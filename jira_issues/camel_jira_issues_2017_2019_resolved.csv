Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Description,Environment,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Outward issue link (Child-Issue),Outward issue link (Cloners),Outward issue link (Container),Outward issue link (Duplicate),Outward issue link (Problem/Incident),Outward issue link (Problem/Incident),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Regression),Outward issue link (Required),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Flags),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Patch Info),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Regression),Custom field (Regression),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Camel-SalesForce DTO Issue while using camel-salesforce-maven,CAMEL-11987,13115814,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,zregvart,srinivasks22,srinivasks22,03/Nov/17 02:58,13/Nov/17 20:58,13/Mar/19 22:19,06/Nov/17 10:23,2.17.7,2.20.0,,,,,,,,,,,,,,2.21.0,,,,,camel-salesforce,,,,,,0,,,,"I'm trying to connect to our private salesforce cloud using camel and trying to generate DTO's using the camel-salesforce-maven. It connects well and it shows that there are about 627 objects found. Then while trying to generate the java classes it throws the exception as below. I'm using the below command and I've tried with the 2.18. 2.19 and 2.20 versions but I see this consistent error across all the versions. 

mvn camel-salesforce:generate -DcamelSalesforce.clientId=<clientId> -DcamelSalesforce.clientSecret=<scret>-DcamelSalesforce.userName=<username> -DcamelSalesforce.password=<password> -DcamelSalesforce.loginUrl=<loginUrl> -DcamelSalesforce.version=41.0
[INFO] Scanning for projects...
[WARNING] The POM for org.eclipse.m2e:lifecycle-mapping:jar:1.0.0 is missing, no dependency information available
[WARNING] Failed to retrieve plugin descriptor for org.eclipse.m2e:lifecycle-mapping:1.0.0: Plugin org.eclipse.m2e:lifecycle-mapping:1.0.0 or one of its dependencies could not be resolved: Failure to find org.eclipse.m2e:lifecycle-mapping:jar:1.0.0 in https://maven.repository.redhat.com/techpreview/all/ was cached in the local repository, resolution will not be reattempted until the update interval of redhat-techpreview-all-repository has elapsed or updates are forced
[WARNING] The POM for org.apache.maven.plugins:maven-surefire-plugin:jar:{maven-surefire-plugin-version} is missing, no dependency information available
[WARNING] Failed to retrieve plugin descriptor for org.apache.maven.plugins:maven-surefire-plugin:{maven-surefire-plugin-version}: Plugin org.apache.maven.plugins:maven-surefire-plugin:{maven-surefire-plugin-version} or one of its dependencies could not be resolved: Failure to find org.apache.maven.plugins:maven-surefire-plugin:jar:{maven-surefire-plugin-version} in https://maven.repository.redhat.com/techpreview/all/ was cached in the local repository, resolution will not be reattempted until the update interval of redhat-techpreview-all-repository has elapsed or updates are forced
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Salesforce :: Maven plugin 2.17.8-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[WARNING] The POM for org.eclipse.m2e:lifecycle-mapping:jar:1.0.0 is missing, no dependency information available
[WARNING] Failed to retrieve plugin descriptor for org.eclipse.m2e:lifecycle-mapping:1.0.0: Plugin org.eclipse.m2e:lifecycle-mapping:1.0.0 or one of its dependencies could not be resolved: Failure to find org.eclipse.m2e:lifecycle-mapping:jar:1.0.0 in https://maven.repository.redhat.com/techpreview/all/ was cached in the local repository, resolution will not be reattempted until the update interval of redhat-techpreview-all-repository has elapsed or updates are forced
[WARNING] The POM for org.apache.maven.plugins:maven-surefire-plugin:jar:{maven-surefire-plugin-version} is missing, no dependency information available
[WARNING] Failed to retrieve plugin descriptor for org.apache.maven.plugins:maven-surefire-plugin:{maven-surefire-plugin-version}: Plugin org.apache.maven.plugins:maven-surefire-plugin:{maven-surefire-plugin-version} or one of its dependencies could not be resolved: Failure to find org.apache.maven.plugins:maven-surefire-plugin:jar:{maven-surefire-plugin-version} in https://maven.repository.redhat.com/techpreview/all/ was cached in the local repository, resolution will not be reattempted until the update interval of redhat-techpreview-all-repository has elapsed or updates are forced
[INFO] 
[INFO] --- camel-salesforce-maven-plugin:2.18.1.redhat-000021:generate (default-cli) @ camel-salesforce-maven-plugin ---
ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console. Set system property 'org.apache.logging.log4j.simplelog.StatusLogger.level' to TRACE to show Log4j2 internal initialization logging.
[INFO] Logging initialized @3646ms
[INFO] Available providers: SUN version 1.8.
[INFO] Salesforce login...
[INFO] Login user <ouruserid> at Salesforce loginUrl: https://<our-private-url>/services/oauth2/token
[INFO] Login successful
[INFO] Salesforce login successful
[INFO] Getting Salesforce Objects...
[WARNING] Generating Java classes for all 627 Objects, this may take a while...
[INFO] Retrieving Object descriptions...
[INFO] Generating Java Classes...
[INFO] Logout successful
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:34 min
[INFO] Finished at: 2017-11-02T22:22:41-04:00
[INFO] Final Memory: 42M/594M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.18.1.redhat-000021:generate (default-cli) on project camel-salesforce-maven-plugin: Error creating EntityParticle.java: Invocation of method 'getFieldType' in  class org.apache.camel.maven.CamelSalesforceMojo$GeneratorUtility threw exception org.apache.maven.plugin.MojoExecutionException: Unsupported type urn:RelationshipReferenceTo for field ReferenceTo at /sobject-pojo.vm[line 77, column 30] -> [Help 1]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-03 06:40:11.04,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 13 20:58:57 UTC 2017,,,,,,,0|i3mcen:,9223372036854775807,,,,,,,,,,"03/Nov/17 06:40;davsclaus;Ask for help first on the user mailing list, or glitter chat, or stack overflow etc","05/Nov/17 23:09;srinivasks22;As per your suggestion, I've posted on various communities. I couldn't find any response or help yet.","06/Nov/17 09:39;zregvart;The Camel Salesforce Maven plugin seems to be missing a type mapping for {{urn:RelationshipReferenceTo}} I think as a first step we can block this property from being considered for DTO generation similar to {{PicklistValues}} and {{ChildRelationships}} currently.

I'll make this modification, in the meantime [~srinvas] perhaps you could run the plugin excluding {{EntityParticle}} SObject from DTO generation, see {{excludePattern}} in the [documentation|https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/docs/salesforce-component.adoc#camel-salesforce-maven-plugin].",06/Nov/17 09:39;zregvart;Let's add {{RelationshipReferenceTo}} to blocked properties.,"06/Nov/17 10:23;zregvart;When testing I found a number of other field types that could cause a similar error and decided that it would be better to warn about those properties instead of not generating the DTOs. Now the Salesforce Maven plugin will display warnings when an unknown type is encountered:

{code}
[WARNING] Unsupported field type urn:SearchLayoutFieldsDisplayed in field FieldsDisplayed of object SearchLayout
[WARNING] Unsupported field type urn:SearchLayoutButtonsDisplayed in field ButtonsDisplayed of object SearchLayout
[WARNING] Unsupported field type urn:JunctionIdListNames in field JunctionIdListNames of object RelationshipInfo
[WARNING] Unsupported field type urn:RecordTypesSupported in field RecordTypesSupported of object EntityDefinition
[WARNING] Unsupported field type urn:JunctionIdListNames in field JunctionIdListNames of object RelationshipDomain
{code}
",06/Nov/17 12:02;srinivasks22;Thank you Zoran for your updates. Can I take the latest 2.21.0-SNAPSHOT and test this out since the release is not yet out?,"06/Nov/17 18:51;zregvart;Yes [~srinivasks22] it should be in the latest 2.21.0-SNAPSHOT, keep in mind that the DTOs generated with the latest Maven plugin might not work with an older version of Camel. IIRC in 2.19 we redesigned the class hierarchy of DTOs and older versions simply don't have the new base class.","09/Nov/17 03:49;srinivasks22;Hi Xoran, I just tried again and I see the below error:

ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console. Set system property 'log4j2.debug' to show Log4j2 internal initialization logging.
[INFO] Logging initialized @21808ms
[INFO] Available providers: SUN version 1.8.
[INFO] Salesforce login...
[INFO] Login at Salesforce loginUrl: https://<sampleurl>/services/oauth2/token
[INFO] Login successful
[INFO] Salesforce login successful
[INFO] Getting Salesforce Objects...
[INFO] Logout successful
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 23.772 s
[INFO] Finished at: 2017-11-08T22:48:28-05:00
[INFO] Final Memory: 38M/407M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.20.0.fuse-000120-redhat-1:generate (default-cli) on project camel-salesforce-maven-plugin: Error getting global Objects: {errors:[{""errorCode"":""NOT_FOUND"",""message"":""The requested resource does not exist""}],statusCode:404} -> [Help 1]","09/Nov/17 04:15;srinivasks22;Hi Zoran,

   Kindly ignore the above stack trace. Please find the latest stack trace as below:


[INFO] --- camel-salesforce-maven-plugin:2.20.0.fuse-000120-redhat-1:generate (default-cli) @ camel-salesforce-maven-plugin ---
ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console. Set system property 'log4j2.debug' to show Log4j2 internal initialization logging.
[INFO] Logging initialized @2421ms
[INFO] Available providers: SUN version 1.8.
[INFO] Salesforce login...
[INFO] Login at Salesforce loginUrl: https://<sampleURL>/services/oauth2/token
[INFO] Login successful
[INFO] Salesforce login successful
[INFO] Getting Salesforce Objects...
[WARNING] Generating Java classes for all 627 Objects, this may take a while...
[INFO] Retrieving Object descriptions...
[INFO] Generating Java Classes...
[INFO] Logout successful
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:22 min
[INFO] Finished at: 2017-11-08T23:15:10-05:00
[INFO] Final Memory: 40M/664M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.20.0.fuse-000120-redhat-1:generate (default-cli) on project camel-salesforce-maven-plugin: Execution default-cli of goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.20.0.fuse-000120-redhat-1:generate failed: Invocation of method 'getFieldType' in  class org.apache.camel.maven.CamelSalesforceMojo$GeneratorUtility threw exception org.apache.maven.plugin.MojoExecutionException: Unsupported type urn:RelationshipReferenceTo for field ReferenceTo at /sobject-pojo.vm[line 80, column 30] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException

Thanks","09/Nov/17 10:01;zregvart;[~srinivasks22] you seem to be using version {{2.20.0.fuse-000120-redhat-1}} this is not something we can support at the Apache, you need to contact RedHat support for that. This was fixed in version 2.21 that you can use by running {{mvn org.apache.camel.maven:camel-salesforce-maven-plugin:2.21.0-SNAPSHOT:generate ...}}.","13/Nov/17 20:58;srinivasks22;Sorry I was on vacation and coul;dn't get to this until this point. I checked right now and it did generated all the classes. 

Thank you, I'll use these classes and will let you know if I run into any issues.",,,,,,,,,,,,,,,,,,,,,,
Bundle in 'Active' State but Camel Context not initialized,CAMEL-12980,13202715,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,gzres,xldai,xldai,06/Dec/18 07:47,15/Jan/19 10:26,13/Mar/19 22:20,11/Jan/19 09:53,2.20.1,2.21.1,,,,,,,,,,,,,,2.21.5,2.22.3,2.23.1,2.24.0,3.0.0,camel-blueprint,,,,,,5,,,,"The camel context can't get initialized when validation of the RouteDefinition failed (e.g. typo in Uri or add an unsupported option in Uri), but when deploy the blueprint, the CamelContext startup and then shutdown, but the bundle status is still 'Active', only a FailedToCreateRouteException ERROR is logged.

318 │ Active  │  80 │ 0.0.0                 │ blueprint.xml

Attached the simple blueprint.xml for reproduce it.

The expected behaviour is the bundle is in the 'Failure' status in this case.

The fix proposal from my side is, move the call of ""this.maybeStart()"" from blueprintEvent() method to the constructor of the BlueprintCamelContext class. then this kind of Route definition error can be processed during the Blueprint ""CREATING"" phase. Currently, the start() is invoked after Blueprint in ""CREATED"" phase. (I tested this fix locally and have the expected 'Failure' bundle status) 

(This issue is found in Camel 2.20.x, 2.21.x, but it may affects also on master branch)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,06/Dec/18 07:42;xldai;blueprint.xml;https://issues.apache.org/jira/secure/attachment/12950801/blueprint.xml,,,,1.0,,,,,,,,,,,,,,,,,,,2018-12-19 11:53:55.366,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 15 10:26:58 UTC 2019,,,,,,,0|s0186o:,9223372036854775807,,,,,,,,,,19/Dec/18 11:53;davsclaus;Yeah noticed this with 2.24 as well.,19/Dec/18 11:57;gzres;Sorry I missed that - let me check,"19/Dec/18 12:03;gzres;CAMEL-10513 moved the initialization to after {{BlueprintEvent.CREATED}} state.

The {{Active}} in {{318 │ Active │ 80 │ 0.0.0 │ blueprint.xml}} means the _bundle_ is active. You should however not treat _bundle_ and its _blueprint container_ as the same thing!
A _bundle_ should be treated as kind of _carrier_ of blueprint description, which is then processed by _blueprint extender_, which monitors bundles being installed, resolved, started and stopped. _blueprint extender_ may pick up your *started* bundle and _attempt_ processing the blueprint descriptor it carries.

You can imagine a bundle that:
* creates a thread that waits till next Halloween
* this thread registers blueprint container manually
* this thread fails

I don't think moving back {{this.maybeStart()}} to constructor is good idea. Events are the way to synchronize actions within OSGi. And it's perfectly fine that _active_ bundle wasn't correctly processed by _blueprint extender_. Such bundle may do many other things that don't fail (register OSGi services manually, register SCR components or alter CM configurations).",19/Dec/18 12:04;gzres;Even if you drop {{blueprint.xml}} file to {{deploy/}} it doesn't matter - it's wrapped inside a bundle that's started/activated and _blueprint extender_ processes the XML - despite it's the *only* thing such bundle provides.,"19/Dec/18 12:17;davsclaus;Yeah but the big problem for the normal user of Camel on OSGi Blueprint is that their Camel application failed to startup and they can't see this in the list which they used to do in the past. eg this is how camel-blueprint runs on OSGi, not some vanilla blueprint app that are NOT using Camel.

If you run the same Camel application outside OSGi such as standalone then it will fail to start and an exception is thrown and the JVM terminated. 

So we should somehow get the failure to startup the CamelContext (due to thrown exception) propagatede into blueprint and let the bundle go into some kind of error state. 

",19/Dec/18 12:23;gzres;True. Because blueprint should _break_ after CREATED. TBH we had already several problems with CAMEL-10513... Let me think about it.,"20/Dec/18 02:53;xldai;Thanks [~davsclaus], [~gzres]!

Yes, moving maybeStart() to constructor is not good, it also breaks many of the ""unit test"" and ""itest"" in the Camel tests/camel-blueprint-test and tests/camel-itest-osgi.

Maybe the BlueprintComponentResolver can be extended a bit? or something like an ""URIResolver"" can be introduced to do this kind of validation. (Currently, given a wrong component name e.g (""aaatimer:"" insteadof ""timer:"") in the blueprint xml, the the blueprint bundle is in ""GracePeriod"" status and finally ""Failure"" status after timeout.)
{code:java}
Bundle blueprint.xml/0.0.0 is waiting for dependencies [(&(component=aaatimer)(objectClass=org.apache.camel.spi.ComponentResolver))]
{code}","20/Dec/18 07:17;davsclaus;The problem with using a component name that has not been installed is fine IMHO. It allows the bundle to wait a bit for it to be installed and fail after the timeout.

Its the other problems that are worse when Camel cannot startup due to an exception on startup, which should cause the bundle to be in Failure state and not Active as today. ","20/Dec/18 07:44;xldai;I was not clear enough ~

I didn't blame the behaviour when component name is wrong, it's good and expected status (""Failure""). I meant that any possibility if the BlueprintComponentResolver can be enhanced to also doing the URI validation for fix this Jira issue.","21/Dec/18 14:19;davsclaus;No

But there is some existing Camel tooling that can check your source code and report potential issues. See the maven tooling validate at:
https://github.com/apache/camel/blob/master/tooling/maven/camel-maven-plugin/src/main/docs/camel-maven-plugin.adoc

","07/Jan/19 10:28;gzres;I read again through https://github.com/apache/camel/pull/1297 and CAMEL-10513 and tbh, I prefer *not to* revert CAMEL-10513 (as this CAMEL-12980 is effectively a revert of CAMEL-10513).

What convinced me is:
bq. The example would fail if the autoStartup=""false"" attribute were present in the XML as well

Indeed, starting (optionally) a Camel context after {{BlueprintEvent.CREATED}} separates Blueprint and Camel lifecycles. While there's one benefit of not doing it:
* seeing {{Failed}} in a list of bundles

I think there are more drawbacks:
* handling contexts with _auto startup_ set to {{false}}
* suggesting that Camel context *is* blueprint container, but a container for bundle may declare more contexts and/or also one context may be implemented in different bundles (importing routes defined in separate bundles)
* reviewing all the adjustments we had to make after accepting CAMEL-10513

In my opinion it's better to use dedicated Camel commands to check status of Camel contexts/routes.","07/Jan/19 10:45;davsclaus;Yeah we had some hard problems with blueprint and lifecycle between camel, blueprint and osgi/karaf. The last many years it has been stable after the work of CAMEL-10513. So maybe we can find an alternative solution if there is some way of having some event notification or background thread that tracks the startup of the camel context and can report ""somehow"" to osgi/karaf/blueprint.

And we could also see if the existing camel karaf commands can show the state of all bundles with camel, then you can find which bundles are in error etc. ","07/Jan/19 11:01;gzres;+1 for enhancing {{camel:context-list}} ({{org.apache.camel.commands.ContextListCommand}}) command instead.

Unfortunately, now, {{camel:context-list}} doesn't return any blueprint-based Camel context that has failed - because relevant OSGi service ({{(objectClass=org.apache.camel.CamelContext)}}) is not registered.","10/Jan/19 10:04;owulff;This issue becomes more critical when your camel route publishes CXF endpoints. Blueprint will then start the CXF endpoints successfully but something else goes wrong with the route initialization. The CXF endpoints are successfully published (including the initialization of some CXF features which registers at a central service) but they can't be called via SOAP/REST because the camel route is not started successfully.

 

IMHO, the OSGi specification states the following that a bundle is in the {{ACTIVE}} state when it has been successfully started and activated.

https://osgi.org/javadoc/r4v43/core/org/osgi/framework/Bundle.html#ACTIVE

 

 

If the bundle uses Camel for its implementation, the bundle should not be in ACTIVE mode when something went wrong during the initialization. Further, all beans which has been initialized should be properly removed.

 

The implementation for spring-dm works perfectly fine. I think it should work in the same way for blueprint.

 ","10/Jan/19 13:16;gzres;I understand the problem... CAMEL-10513 was a big change, but actually not against any specification... It's especially true with context using {{autoStart=""false""}}.

bq. A bundle is in the ACTIVE state when it has been successfully started and activated. 

means exactly this - ""activated"" == ""called BundleActivator.start()"" which is NOT the same as successfully starting Camel Context or *even* creating Blueprint Container.

But if we look at blueprint specification:
{quote}
*121.3.2.2 Failure*
If at any time there is a failure, the Blueprint Container must:
# State = FAILURE
# Unregister the Blueprint Container service.
# Destroy the Blueprint Container.
# Wait for the Blueprint bundle to be stopped.
{quote}

Which may be a reason to call back from failed Camel context/route to their blueprint container.

{{org.osgi.service.blueprint.container.BlueprintContainer}} doesn't have any such callback methods, but {{org.apache.aries.blueprint.services.ExtendedBlueprintContainer}} may be called to grab {{org.osgi.service.blueprint.container.BlueprintListener}} to send Failure event like this:
{code:java}
ExtendedBlueprintContainer.getEventDispatcher().blueprintEvent(new BlueprintEvent(BlueprintEvent.FAILURE, getBundle(), getExtenderBundle(), new Throwable(""Camel context says: oops""));
{code}

Then Karaf would catch such event using {{org.apache.karaf.bundle.state.blueprint.internal.BlueprintStateService}} and alter output of {{bundle:list}}.

I think it's doable.

The problem/confusion may be with this scenario:
# bundle with blueprint.xml and Camel Context using autostart=false is installed/started
# blueprint is successfull
# bundle is ACTIVE
# one year later someone actually starts Camel context
# bundle becomes FAILED

no problem for me, but may be confusing for others.","10/Jan/19 13:39;owulff;I agree with you it's true if autoStart is false. In this case, the bundle developer explicitly decides (default is autoStart=true) that the bundle is properly started and active without starting the camel context. In the other case, the bundle developer decides or assumes that the bundle is properly started and active if starting the camel context is successfull as well.

This is working as described for Spring-DM and standalone, but different for Blueprint.

If the lifecycle of blueprint and camel is not aligned you end up with half-way startup as explained above. CXF endpoints published via HTTP but the route with the CXF endpoints is not started.",10/Jan/19 13:45;davsclaus;autoStartup=false means only the routes are not started. CamelContext is ALWAYS started.,10/Jan/19 13:52;jbonofre;I would extend to blueprint lifecycle.,"10/Jan/19 13:52;davsclaus;In Gregors example then with autoStartup=false, we should just ""see this"" as a camel context with 0 routes. Its something the user explicit decided to not start the routes on startup. When he/she start them later, then errors may happen, just as it can happen later on if you start/stop routes at runtime etc. I think in this situation the bundle should still be active.

But in the normal use-case I also think that its ideal that the bundle becomes failed if CamelContext cannot fully startup and run successfully.
","10/Jan/19 13:52;gzres;Thanks. But because it's {{FailedToCreateRouteException}}, I assume that anything may break at any time, so looks like Camel-specific {{org.apache.karaf.bundle.core.BundleStateService}} (there's already scr, blueprint and spring-dm specific) implementation is the best idea (for now).","10/Jan/19 13:58;jbonofre;I would do the following:

1. {{BlueprintCamelContext}} could register an Camel implement of Karaf {{BundleStateService}}. It could be optional if the user doesn't want to run Camel in Karaf (even I think it never happens ;)).
2. We hook the camel context/route lifecycle to the bundle thanks to this service
3. Thanks to this light {{BundleStateService}} service, we can retrieve all failing info, and react accordingly

Just my $0.01.","11/Jan/19 09:21;gzres;OK, Here's what I did. With sample blueprint.xml with *two* contexts (one bad, one correct):
{code:xml}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""> 
    <camelContext xmlns=""http://camel.apache.org/schema/blueprint""> 
        <route id=""r1""> 
            <from uri=""timer://simpleTimer?period=1000&amp;repeatCount=0&amp;funnyopt=1"" /> 
            <setBody> <simple>Hello World 1</simple> </setBody> 
            <to uri=""log:test"" />
        </route> 
    </camelContext> 
    <camelContext xmlns=""http://camel.apache.org/schema/blueprint""> 
        <route id=""r2""> 
            <from uri=""timer://simpleTimer?period=1000&amp;repeatCount=0"" /> 
            <setBody> <simple>Hello World 2</simple> </setBody> 
            <to uri=""log:test"" />
        </route> 
    </camelContext> 
</blueprint> 
{code}

I've installed it using {{install -s blueprint:file:///data/tmp/blueprint.xml}} and saw:

Working and visible context 2:
{noformat}
karaf@root()> context-list
 Context        Status              Total #       Failed #     Inflight #   Uptime         
 -------        ------              -------       --------     ----------   ------         
 camel-4        Started                   7              0              0   7.662 seconds  
karaf@root()> route-list
 Context        Route          Status              Total #       Failed #     Inflight #   Uptime         
 -------        -----          ------              -------       --------     ----------   ------         
 camel-4        r2             Started                   9              0              0   9.213 seconds  
{noformat}

Correct state for a bundle:
{noformat}
karaf@root()> la -l|grep blueprint.xml
65 │ Failure  │  80 │ 0.0.0           │ blueprint:file:///data/tmp/blueprint.xml
{noformat}

Additional diagnostic information:
{noformat}
karaf@root()> bundle:diag 65
Bundle 65
---------
Status: Failure
Camel Blueprint
Camel context ""camel-1""
Exception: Failed to create route r1: Route(r1)[[From[timer://simpleTimer?period=1000&repeatCount=... because of Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{funnyopt=1}]
org.apache.camel.FailedToCreateRouteException: Failed to create route r1: Route(r1)[[From[timer://simpleTimer?period=1000&repeatCount=... because of Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{funnyopt=1}]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:217)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1140)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3735)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3440)
	at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3248)
	at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3244)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3267)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3244)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3160)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:254)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:296)
	at org.apache.camel.blueprint.BlueprintCamelContext.blueprintEvent(BlueprintCamelContext.java:187)
	at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:190)
	at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:188)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{funnyopt=1}]
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:753)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:80)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:227)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:122)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:75)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:98)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1332)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:212)
	... 24 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{funnyopt=1}]
	at org.apache.camel.impl.DefaultComponent.validateParameters(DefaultComponent.java:215)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:139)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:706)
	... 32 more

{noformat}

After stopping the bundle, the status is correct and contexts are gone:
{noformat}
karaf@root()> context-list
karaf@root()> bundle:diag 65
karaf@root()> la -l|grep blueprint.xml
65 │ Resolved │  80 │ 0.0.0           │ blueprint:file:///data/tmp/blueprint.xml
{noformat}

There's single instance of new {{BundleStateService}} exposed from blueprint bundle (regardles of number of contexts it exposes):
{noformat}
karaf@root()> bundle:services -p 65                                                                              

Bundle 65 provides:
-------------------
objectClass = [org.apache.karaf.bundle.core.BundleStateService]
service.bundleid = 65
service.id = 156
service.scope = singleton
...
{noformat}

This new service is used by {{org.apache.camel.blueprint.BlueprintCamelContext#start()}} to track state of the bundle and context.

After fixing first camel context we see the state changed and diagnostic info removed:
{noformat}
karaf@root()> context-list
 Context        Status              Total #       Failed #     Inflight #   Uptime         
 -------        ------              -------       --------     ----------   ------         
 camel-7        Started                   6              0              0   6.989 seconds  
 camel-8        Started                   6              0              0   6.963 seconds  
karaf@root()> bundle:diag 65
karaf@root()> la -l|grep blueprint.xml
65 │ Active   │  80 │ 0.0.0           │ blueprint:file:///data/tmp/blueprint.xml
{noformat}

And blueprint bundle exposes 6 services:
{noformat}
karaf@root()> bundle:services 65

Bundle 65 provides:
-------------------
[org.apache.karaf.bundle.core.BundleStateService]
[org.osgi.service.blueprint.container.BlueprintListener]
[org.osgi.service.blueprint.container.BlueprintListener]
[org.osgi.service.blueprint.container.BlueprintContainer]
[org.apache.camel.CamelContext]
[org.apache.camel.CamelContext]
{noformat}

camel-blueprint bundle imports additional package (optionally):
{noformat}
org.apache.karaf.bundle.core;resolution:=optional;version=""[4,5)""
{noformat}

If (somehow), this package is not available (wrong Karaf version or no Karaf at all), everything works fine, but bundle is Active (again, with one correct and one broken context):
{noformat}
karaf@root()> bundle:diag 65
karaf@root()> la -l|grep blueprint.xml
65 │ Active   │  80 │ 0.0.0           │ blueprint:file:///data/tmp/blueprint.xml
karaf@root()> context-list
 Context        Status              Total #       Failed #     Inflight #   Uptime          
 -------        ------              -------       --------     ----------   ------          
 camel-4        Started                  18              0              0   18.667 seconds  
{noformat}

And no extra, Karaf-related OSGi service is exposed:
{noformat}
karaf@root()> bundle:services 65

Bundle 65 provides:
-------------------
[org.osgi.service.blueprint.container.BlueprintListener]
[org.osgi.service.blueprint.container.BlueprintListener]
[org.osgi.service.blueprint.container.BlueprintContainer]
[org.apache.camel.CamelContext]
{noformat}

If there's actual Blueprint (non-Camel) problem, we can see it too:
{noformat}
karaf@root()> la -l|grep 65
65 │ Failure  │  80 │ 0.0.0           │ blueprint:file:///data/tmp/blueprint.xml
karaf@root()> bundle:diag 65                                                                                 
Bundle 65
---------
Status: Failure
Blueprint
1/11/19 10:38 AM
Exception: 
Unable to validate xml
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to validate xml
	at org.apache.aries.blueprint.parser.Parser.validate(Parser.java:349)
	at org.apache.aries.blueprint.parser.Parser.validate(Parser.java:336)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:345)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:278)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:299)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:268)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:264)
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:254)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)
	at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730)
	at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4579)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2174)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
	at org.apache.karaf.bundle.command.Start.executeOnBundle(Start.java:38)
	at org.apache.karaf.bundle.command.BundlesCommand.doExecute(BundlesCommand.java:65)
	at org.apache.karaf.bundle.command.BundlesCommand.execute(BundlesCommand.java:55)
	at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:84)
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:68)
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:86)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:599)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:526)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:415)
	at org.apache.felix.gogo.runtime.Pipe.doCall(Pipe.java:416)
	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:229)
	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:59)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.xml.sax.SAXParseException; cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'camelaContext'.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:134)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:396)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:327)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:284)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:453)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3231)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:1912)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(XMLSchemaValidator.java:741)
	at com.sun.org.apache.xerces.internal.jaxp.validation.DOMValidatorHelper.beginNode(DOMValidatorHelper.java:277)
	at com.sun.org.apache.xerces.internal.jaxp.validation.DOMValidatorHelper.validate(DOMValidatorHelper.java:244)
	at com.sun.org.apache.xerces.internal.jaxp.validation.DOMValidatorHelper.validate(DOMValidatorHelper.java:190)
	at com.sun.org.apache.xerces.internal.jaxp.validation.ValidatorImpl.validate(ValidatorImpl.java:109)
	at javax.xml.validation.Validator.validate(Validator.java:124)
	at org.apache.aries.blueprint.parser.Parser.validate(Parser.java:346)
	... 34 more

{noformat}",11/Jan/19 10:17;davsclaus;Great work Grzegorz,"15/Jan/19 10:11;xldai;Hi [~gzres]  I did a quickly test by applying the fixes onto camel-blueprint 2.21.2. yes, the bundle status now it's shown as expected (Failure in case). but one thing I found that the Camel context is still started and then getting shutdown quickly in case of wrong definition in the URI of the Route. 

 
{code}
2019-01-15T17:30:51,141 | INFO  | fileinstall-H:\product\7.1.1GA\Talend-Runtime-V7.1.1/deploy | install.internal.Util$OsgiLogger  205 | 10 - org.apache.felix.fileinstall - 3.6.4 | Installing bundle blueprint.xml / 0.0.0
2019-01-15T17:30:52,049 | INFO  | Blueprint Event Dispatcher: 1 | .blueprint.BlueprintCamelContext  187 | 224 - org.apache.camel.camel-blueprint - 2.21.2 | Attempting to start CamelContext: camel-1
2019-01-15T17:30:52,051 | INFO  | Blueprint Event Dispatcher: 1 | e.camel.impl.DefaultCamelContext 3143 | 226 - org.apache.camel.camel-core - 2.21.2 | Apache Camel 2.21.2 (CamelContext: camel-1) is starting
2019-01-15T17:30:52,053 | INFO  | Blueprint Event Dispatcher: 1 | gement.ManagedManagementStrategy  205 | 226 - org.apache.camel.camel-core - 2.21.2 | JMX is enabled
2019-01-15T17:30:52,270 | INFO  | Blueprint Event Dispatcher: 1 | e.camel.impl.DefaultCamelContext 3501 | 226 - org.apache.camel.camel-core - 2.21.2 | Apache Camel 2.21.2 (CamelContext: camel-1) is shutting down
2019-01-15T17:30:52,283 | INFO  | Blueprint Event Dispatcher: 1 | e.camel.impl.DefaultCamelContext 3592 | 226 - org.apache.camel.camel-core - 2.21.2 | Apache Camel 2.21.2 (CamelContext: camel-1) uptime 0.232 seconds
2019-01-15T17:30:52,284 | INFO  | Blueprint Event Dispatcher: 1 | e.camel.impl.DefaultCamelContext 3593 | 226 - org.apache.camel.camel-core - 2.21.2 | Apache Camel 2.21.2 (CamelContext: camel-1) is shutdown in 0.014 seconds
2019-01-15T17:30:52,284 | WARN  | Blueprint Event Dispatcher: 1 | print.BlueprintCamelStateService   79 | 224 - org.apache.camel.camel-blueprint - 2.21.2 | Changing Camel state for bundle 316 to Failure
2019-01-15T17:30:52,284 | ERROR | Blueprint Event Dispatcher: 1 | .blueprint.BlueprintCamelContext  190 | 224 - org.apache.camel.camel-blueprint - 2.21.2 | Error occurred during starting CamelContext: camel-1
org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[timer://simpleTimer?period=1000&repeatCo... because of Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{funnyopt=1}]
    at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:209) [226:org.apache.camel.camel-core:2.21.2]
    at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1145) [226:org.apache.camel.camel-core:2.21.2]{code}

Is it possible to enhance the fixes by stop doing the Context start/shutdown? 
Thanks",15/Jan/19 10:22;davsclaus;No its not possible. Camel must be started up to detect the error.,15/Jan/19 10:26;gzres;Agree with [~davsclaus].,,,,,,,
Camel route with multicast (parallel) generate huge CPU load,CAMEL-11750,13100094,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,Nazar Vishka,Nazar Vishka,06/Sep/17 10:14,11/Sep/17 09:54,13/Mar/19 22:20,11/Sep/17 09:54,2.18.4,2.19.2,,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-core,,,,,,0,,,,"I've created simple [Spring Camel Route application|https://github.com/leofromgroza/camel-long-term-route] that can be used for issue reproducing. Here we have very simple route:
{code}
    public void configure() throws Exception {
        from(""direct:start"").routeId(""start"")
                .multicast().parallelProcessing()
                .to(""direct:very-long-task"", ""direct:long-task"")
                .end();

        from(""direct:long-task"").routeId(""long-task"")
                .log(""Started long-task"")
                .process(exchange -> Thread.sleep(5000))
                .log(""Finished long-task"")
                .end();
        from(""direct:very-long-task"").routeId(""very-long-task"")
                .log(""Started very-long-task"")
                .process(exchange -> Thread.sleep(35000))
                .log(""Finished very-long-task"")
                .end();
    }{code}
From our main route 'start' we are starting in parallel two sub-routes: 'long-task' and 'very-long-task'. They are just doing something for some period of time and do not generate any load to the system.
But I found that when one task finished earlier than other one, route start to make a huge CPU load. Here you can see a CPU usage during executiong of Camel route that was mentioned earlier (after finishing of 'long-task' usage of CPU uncreased from 0 to 12.5%):
!https://content.screencast.com/users/NazarV/folders/Jing/media/830268f0-d184-4c57-adb1-b782ea63fa6d/2017-09-06_1241.png!
Screenshot was made when I was running route on my Windows PC with 4 physical CPU cores + 4 HT. On Unix systems we found that after end of 'long-task' it used 100% of one core till the end of work.
One more interesting thing that i've found is that the main load on the system was generated by the thread MulticastProcessor-AggregateTask that was spending a lot of time in the method java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject#awaitNanos that was called from java.util.concurrent.DelayQueue#poll(long, java.util.concurrent.TimeUnit):
{code}""Camel (camel-1) thread #2 - MulticastProcessor-AggregateTask"" #29 daemon prio=5 os_prio=0 tid=0x00000000215e3000 nid=0x7a0 runnable [0x0000000022eaf000]
   java.lang.Thread.State: RUNNABLE
	at java.lang.Thread.isInterrupted(Native Method)
	at java.lang.Thread.interrupted(Thread.java:944)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting(AbstractQueuedSynchronizer.java:2002)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2079)
	at java.util.concurrent.DelayQueue.poll(DelayQueue.java:273)
	at org.apache.camel.util.concurrent.SubmitOrderedCompletionService.poll(SubmitOrderedCompletionService.java:127)
	at org.apache.camel.processor.MulticastProcessor$AggregateOnTheFlyTask.aggregateOnTheFly(MulticastProcessor.java:463)
	at org.apache.camel.processor.MulticastProcessor$AggregateOnTheFlyTask.run(MulticastProcessor.java:418)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745){code}
In DelayQueue#poll(long, java.util.concurrent.TimeUnit) we have a piece of code:
{code}E first = q.peek();
if (first == null) {
 ...
} else {
  long delay = first.getDelay(NANOSECONDS);
    ...
  long timeLeft =  available.awaitNanos(delay) {code}
During debugging I found that E first is object of class [org.apache.camel.util.concurrent.SubmitOrderedCompletionService.SubmitOrderFutureTask|https://github.com/apache/camel/blob/camel-2.19.2/camel-core/src/main/java/org/apache/camel/util/concurrent/SubmitOrderedCompletionService.java] and it's very interesting [getDelay(TimeUnit) method|https://github.com/apache/camel/blob/camel-2.19.2/camel-core/src/main/java/org/apache/camel/util/concurrent/SubmitOrderedCompletionService.java#L64] always return 1. I thing that is a source of current issue:
{code} public long getDelay(TimeUnit unit) {
            // if the answer is 0 then this task is ready to be taken
            return id - index.get();
        }{code}
So when delay is 1, AggregateTask thread is not sleeping at all and generates a huge CPU load all the time when it is waiting for the end of the last task.
I think that [getDelay(TimeUnit) method|https://github.com/apache/camel/blob/camel-2.19.2/camel-core/src/main/java/org/apache/camel/util/concurrent/SubmitOrderedCompletionService.java#L64] should be somehow re-implemented.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-07 08:16:22.453,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 11 09:54:37 UTC 2017,,,,,,,0|i3jp7r:,9223372036854775807,,,,,,,,,,"07/Sep/17 08:16;githubbot;GitHub user leofromgroza opened a pull request:

    https://github.com/apache/camel/pull/1922

    CAMEL-11750: Camel route with multicast (parallel) generate huge CPU …

    …load
    
    Fixed issue with huge CPU load: added 1 second delay for a task that is 2nd in the queue order, 2sec for 3rd task, 3sec for 4th taks, etc. That helps to decrease CPU load and does not broke previous logic.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/leofromgroza/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1922.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1922
    
----
commit 089b64ae85d76230d647eb646d806400e1df4b21
Author: leofromgroza <vishka.nazar@gmail.com>
Date:   2017-09-07T08:15:02Z

    CAMEL-11750: Camel route with multicast (parallel) generate huge CPU load
    
    Fixed issue with huge CPU load: added 1 second delay for a task that is 2nd in the queue order, 2sec for 3rd task, 3sec for 4th taks, etc. That helps to decrease CPU load and does not broke previous logic.

----
","07/Sep/17 08:22;Nazar Vishka;I propose minor fix:
{code}public long getDelay(TimeUnit unit) {
          return unit.convert(id - index.get(), TimeUnit.MILLISECONDS);
}{code}
It does not broke other logic but adds 1ms delay for a task that is 2nd in the queue, 2ms for 3rd task, 3ms for 4th task, etc. On my test project it helps to decrease CPU load:
!https://content.screencast.com/users/NazarV/folders/Jing/media/c86ed62c-be49-4ab9-b03a-35028d95bf29/2017-09-07_1119.png!","07/Sep/17 08:41;onders;well, i would say if you have got long running tasks and and you push many tasks to your direct endpoint which will cause oveflooding your processor chain / route, i think this is a design issue.
i am not convinced that you can put delay to each task you send to direct enpoint. this may resolve your issue because you have got long running tasks. 
what if you don't have long running tasks and you want to multicast and parallelize your route? I think putting delay will break such scenario as i mentioned as ""what if"".

i think you need to use throttler EIP if you have long running tasks and overflooding your direct endpoint to reduce the number of messages to your direct enpoint because you have got long running tasks. ","07/Sep/17 10:30;Nazar Vishka;In my [example application|https://github.com/leofromgroza/camel-long-term-route] we have not many tasks, but just two. That does not cause overflooding of processor chain/route. Definitely problem is not in route's design.
For now, when last task is running, method [getDelay(TimeUnit)|https://github.com/apache/camel/blob/camel-2.19.2/camel-core/src/main/java/org/apache/camel/util/concurrent/SubmitOrderedCompletionService.java#L64] always returns 1. That results to situation that is alike while(true) loop and ""eats"" one CPU core. Throttler EIP cannot resolve this issue. Please take a look at [example application|https://github.com/leofromgroza/camel-long-term-route].","07/Sep/17 10:54;onders;hmm, i see what you mean but i still think that putting 1 second delay to each item in the queue incrementally did not seem right to me.
there must be better solution. because such change may break short running tasks as my initial look to your PR. [~davsclaus] can better comment on this.",07/Sep/17 11:11;Nazar Vishka;I thought a little bit and I found we can decrease delay to 1 μs. Even that will decrease load to CPU in ~1000 times for such cases. Also I think that will not seriously affect performance for a bunch of short tasks.,08/Sep/17 08:21;davsclaus;Thanks for reporting and diving int the JDK code and showing CPU graphs. Yeah it does smell like the JDK with the no-delay would keep looping in that logic,"08/Sep/17 08:41;davsclaus;Thanks for the PR. I ammended and pushed to master branch. Do you mind giving that a test on your system?

I set the minimal delay to 1 micro-second. That is very low, but some may think that even 1 milli second is too high. But lets see if 1 micro-second is too fast and also takes up too much CPU. I am open to changing it to 1 milli-second or do 100 micro-seconds (1/10th of micro second).","08/Sep/17 08:42;githubbot;Github user leofromgroza closed the pull request at:

    https://github.com/apache/camel/pull/1922
",11/Sep/17 07:52;Nazar Vishka;[~davsclaus] thank you for fast reaction. I've made tests with 1 microsecond delay and it helps - CPU usage is <=0.1% that is a great result. I think that we can dwell on 1 microsecond delay.  ,11/Sep/17 09:54;davsclaus;Thanks for testing.,,,,,,,,,,,,,,,,,,,,,,
camel-twitter-direct-message doesn't use default delay of 30s,CAMEL-13321,13221216,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,claudio,claudio,12/Mar/19 20:38,13/Mar/19 07:35,13/Mar/19 22:20,13/Mar/19 07:26,,,,,,,,,,,,,,,,2.22.4,2.23.2,2.24.0,3.0.0,3.0.0-M2,camel-twitter,,,,,,0,,,,"Per the documentation, the default delay is 30s, but running the camel-twitter-directmessage polls at 500ms interval.",,"claudio4j commented on pull request #2821: CAMEL-13321 - camel-twitter-direct-message doesn't use default delay of 30s
URL: https://github.com/apache/camel/pull/2821
 
 
   https://issues.apache.org/jira/browse/CAMEL-13321
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Mar/19 20:48;githubbot;600","oscerd commented on pull request #2821: CAMEL-13321 - camel-twitter-direct-message doesn't use default delay of 30s
URL: https://github.com/apache/camel/pull/2821
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/19 07:26;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-03-12 20:38:49.0,,,,,,,0|z00mn4:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DirectMessageConsumerHandler.java [4] pollConsume method calls Twitter.getDirectMessages(getLastIdPaging()),CAMEL-13320,13221205,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,claudio,claudio,12/Mar/19 18:55,13/Mar/19 07:19,13/Mar/19 22:20,13/Mar/19 07:19,,,,,,,,,,,,,,,,2.22.4,2.23.2,2.24.0,3.0.0,3.0.0-M2,camel-twitter,,,,,,0,,,,"DirectMessageConsumerHandler.java [1] pollConsume method calls Twitter.getDirectMessages(getLastIdPaging()), the method is deprecated [2] and filters out the messages sent by the account [3]. The master version removed the getDirectMessages(Paging p) method and doesn't filter the messages. The fix is to call getDirectMessages(int count) instead.

1. https://github.com/apache/camel/blob/master/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/directmessage/DirectMessageConsumerHandler.java#L39
2. https://github.com/Twitter4J/Twitter4J/blob/4.0.7/twitter4j-core/src/main/java/twitter4j/api/DirectMessagesResources.java#L53
3. https://github.com/Twitter4J/Twitter4J/blob/4.0.7/twitter4j-core/src/main/java/twitter4j/TwitterImpl.java#L422",,"claudio4j commented on pull request #2820: CAMEL-13320 - DirectMessageConsumerHandler.java pollConsume method ca…
URL: https://github.com/apache/camel/pull/2820
 
 
   …lls deprecated Twitter.getDirectMessages(Paging p)
   
   https://issues.apache.org/jira/browse/CAMEL-13320
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Mar/19 19:18;githubbot;600","oscerd commented on pull request #2820: CAMEL-13320 - DirectMessageConsumerHandler.java pollConsume method ca…
URL: https://github.com/apache/camel/pull/2820
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/19 07:18;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-03-12 18:55:23.0,,,,,,,0|z00mko:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"TwitterConverter calls deprecated getSenderScreenName, throws UnsupportedOperationException",CAMEL-13319,13221202,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,claudio,claudio,12/Mar/19 18:54,13/Mar/19 07:09,13/Mar/19 22:20,13/Mar/19 07:09,,,,,,,,,,,,,,,,2.22.4,2.23.2,2.24.0,3.0.0,3.0.0-M2,camel-twitter,,,,,,0,,,,"TwitterConverter.java at [1] line 49, calls DirectMessage.getSenderScreenName() but it is deprecated [2] and its implementation DirectMessageJSONImpl [3] throws UnsupportedOperationException. To fix, just call getSenderId() instead.

 

1. https://github.com/apache/camel/blob/master/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/util/TwitterConverter.java#L49
2. https://github.com/Twitter4J/Twitter4J/blob/4.0.7/twitter4j-core/src/main/java/twitter4j/DirectMessage.java#L47
3. https://github.com/Twitter4J/Twitter4J/blob/4.0.7/twitter4j-core/src/internal-json/java/twitter4j/DirectMessageJSONImpl.java#L254",,"claudio4j commented on pull request #2819: CAMEL-13319 - TwitterConverter calls deprecated getSenderScreenName, throws UnsupportedOperationException
URL: https://github.com/apache/camel/pull/2819
 
 
   https://issues.apache.org/jira/browse/CAMEL-13319
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Mar/19 19:05;githubbot;600","oscerd commented on pull request #2819: CAMEL-13319 - TwitterConverter calls deprecated getSenderScreenName, throws UnsupportedOperationException
URL: https://github.com/apache/camel/pull/2819
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/19 07:04;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-03-12 18:54:02.0,,,,,,,0|z00mk0:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Bindy Tab delimited - Handling Blank Values,CAMEL-13304,13220481,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,rnetuka,rnetuka,08/Mar/19 15:10,12/Mar/19 11:05,13/Mar/19 22:20,12/Mar/19 11:05,,,,,,,,,,,,,,,,2.23.2,2.24.0,3.0.0,3.0.0-M2,,camel-bindy,,,,,,0,,,,"Attached the tab Delimited File, XSD/java Object and the converted XML. The Bindy is not reading the file properly based on position when it has blank values.

Input file:

 
|Student 1st 80 56 54 90 90|
|hello 1st 70 65 75 90 11|

 

On the output, i see this,

 
|<?xml version='1.0' encoding='UTF-8'?>|
|<list>|
|<com.redhat.StudentResult>|
|<id>Student</id>|
|<name>1st</name>|
|<semester>80</semester>|
|<grade>B</grade>|
|<totalScore>290</totalScore>|
|<result>Pass</result>|
|<javaMarks>56</javaMarks>|
|<cMarks>54</cMarks>|
|<dbmsMarks>90</dbmsMarks>|
|<mathematicsMarks>90</mathematicsMarks>|
|<dataStructureMarks>0</dataStructureMarks>|
|</com.redhat.StudentResult>|
|<com.redhat.StudentResult>|
|<id>hello</id>|
|<name>1st</name>|
|<semester>70</semester>|
|<grade>C</grade>|
|<totalScore>241</totalScore>|
|<result>Fail</result>|
|<javaMarks>65</javaMarks>|
|<cMarks>75</cMarks>|
|<dbmsMarks>90</dbmsMarks>|
|<mathematicsMarks>11</mathematicsMarks>|
|<dataStructureMarks>0</dataStructureMarks>|
|</com.redhat.StudentResult>|
|</list>|

 

The order was not followed, as you can see from the xml you paste. The Student and hello is mapped to ID tag (should be mapped on the name tag). the ID tag should be empty since from the input file it is blank.",,"rnetuka commented on pull request #2811: [CAMEL-13304] Camel Bindy Tab delimited - Handling Blank Values
URL: https://github.com/apache/camel/pull/2811
 
 
   Issue: https://issues.apache.org/jira/browse/CAMEL-13304
   
   When using tab as a separator in CSV (i.e. TSV format), trimming any leading whitespaces might lead to breaking empty field values.
   
   Trailing whitespaces shouldn't be a problem, since all unset fields will have their default values. Also, empty lines are discarded by line = line.replaceAll(""\s+$"", """"); as they were before.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Mar/19 15:13;githubbot;600","oscerd commented on pull request #2811: [CAMEL-13304] Camel Bindy Tab delimited - Handling Blank Values
URL: https://github.com/apache/camel/pull/2811
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Mar/19 11:05;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 08 15:13:51 UTC 2019,,,,,,,0|z00i4g:,9223372036854775807,,,,,,,,,,08/Mar/19 15:13;rnetuka;PR: https://github.com/apache/camel/pull/2811,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sql cannot resolve nested simple expression,CAMEL-13305,13220485,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,rnetuka,rnetuka,08/Mar/19 15:36,11/Mar/19 07:23,13/Mar/19 22:20,11/Mar/19 07:23,,,,,,,,,,,,,,,,2.23.2,2.24.0,3.0.0,3.0.0-M2,,camel-sql,,,,,,0,,,,"- camel-sql cannot resolve nested simple expression
 - For example, `to(""sql:insert into T_EXAMPLE values (:#$\{header.header1[${header.CamelLoopIndex}][COLUMN_NAME1]})"")` is resolved as `insert into T_EXAMPLE values (?][COLUMN_NAME1]})` instead of `insert into T_EXAMPLE values ( ? )}`. And database driver will generate a syntax error.
 - FYI, `.setHeader(""header1"",simple(""$\{header.header1[${header.CamelLoopIndex}][COLUMN_NAME1]})""))` is resolved correctly. So probably sql-camel cannot properly parse the range of simple expression.",,"rnetuka commented on pull request #2812: [CAMEL-13305] camel-sql cannot resolve nested simple expression
URL: https://github.com/apache/camel/pull/2812
 
 
   Issue: https://issues.apache.org/jira/browse/CAMEL-13305
   
   When using nested expressions in SQL routes, such as
   .to(""sql:INSERT INTO example VALUES (:?${array[${index}]})"");
   both REPLACE_PATTERN and NAME_PATTERN are unable to match the whole expression correctly. We have to find correct enclosing bracket and create a substring in such cases.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Mar/19 15:38;githubbot;600","oscerd commented on pull request #2812: [CAMEL-13305] camel-sql cannot resolve nested simple expression
URL: https://github.com/apache/camel/pull/2812
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Mar/19 07:10;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-03-08 15:36:10.0,,,,,,,0|z00i5c:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel with OSGi blueprint on Karaf should detect JMX,CAMEL-13303,13220428,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Mar/19 09:32,08/Mar/19 10:10,13/Mar/19 22:20,08/Mar/19 10:10,3.0.0-M1,,,,,,,,,,,,,,,3.0.0,3.0.0-M2,,,,camel-osgi,,,,,,0,,,,"10:31:00.277 INFO [Blueprint Event Dispatcher: 1] Attempting to start CamelContext: camel-1
10:31:00.279 INFO [Blueprint Event Dispatcher: 1] Apache Camel 3.0.0-SNAPSHOT (CamelContext: camel-1) is starting
10:31:00.281 INFO [Blueprint Event Dispatcher: 1] JMX is disabled",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 08 09:53:55 UTC 2019,,,,,,,0|z00hso:,9223372036854775807,,,,,,,,,,08/Mar/19 09:52;davsclaus;Its because the JMX is loaded via Java ServiceLoader. It should use the factory finder which we use for loading all the other Camel stuff today.,"08/Mar/19 09:53;davsclaus;10:53:34.239 INFO [Blueprint Event Dispatcher: 1] Attempting to start CamelContext: camel-1
10:53:34.240 INFO [Blueprint Event Dispatcher: 1] Apache Camel 3.0.0-SNAPSHOT (CamelContext: camel-1) is starting
10:53:34.242 INFO [Blueprint Event Dispatcher: 1] JMX is enabled",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel-box, switch HtmlUnit to JSoup to not rely on Jetty (and allow update to servlet api 4)",CAMEL-13284,13219263,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,jondruse,jondruse,04/Mar/19 12:04,08/Mar/19 06:07,13/Mar/19 22:20,05/Mar/19 11:54,3.0.0-M1,,,,,,,,,,,,,,,3.0.0,3.0.0-M2,,,,camel-box,,,,,,0,,,,"Component camel-box depends on Jetty (see https://github.com/apache/camel/blob/master/platforms/karaf/features/src/main/resources/features.xml#L553)

This dependency doesn't allow update servlet-api to 4.0

Solution is to refactor component to use JSoup instead.",,"JiriOndrusek commented on pull request #2803: [CAMEL-13284] Camel-box, switch HtmlUnit to JSoup to not rely on Jetty
URL: https://github.com/apache/camel/pull/2803
 
 
   Issue https://issues.apache.org/jira/browse/CAMEL-13284
   
   Refactor of camel-box component to replace HtmlUnit with Jsoup which allows to remove dependency to Jetty and therefor allows to use servlet-api 4.0
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Mar/19 15:34;githubbot;600","oscerd commented on pull request #2803: [CAMEL-13284] Camel-box, switch HtmlUnit to JSoup to not rely on Jetty
URL: https://github.com/apache/camel/pull/2803
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Mar/19 11:54;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,CAMEL-13279,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-03-04 12:09:21.091,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 04 12:09:21 UTC 2019,,,,,,,0|z00ao0:,9223372036854775807,,,,,,,,,,04/Mar/19 12:09;ancosen;+1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-box - Standard Authentication starts failing,CAMEL-13279,13219201,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,04/Mar/19 04:03,08/Mar/19 05:49,13/Mar/19 22:20,08/Mar/19 05:49,2.23.1,3.0.0-M1,,,,,,,,,,,,,,3.0.0,3.0.0-M2,,,,camel-box,,,,,,0,,,,"Camel Box standard authentication starts failing with the following error stacktrace:
{code}
org.apache.camel.RuntimeCamelException: Box API connection failed: elementName=[form] attributeName=[name] attributeValue=[consent_form]
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createStandardAuthenticatedConnection(BoxConnectionHelper.java:212)
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createConnection(BoxConnectionHelper.java:91)
	at org.apache.camel.component.box.BoxComponent.doStart(BoxComponent.java:85)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3709)
	at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:3715)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3437)
	at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3248)
	at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3244)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3267)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3244)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3160)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:760)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:392)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:281)
	[...]
Caused by: com.gargoylesoftware.htmlunit.ElementNotFoundException: elementName=[form] attributeName=[name] attributeValue=[consent_form]
	at com.gargoylesoftware.htmlunit.html.HtmlPage.getFormByName(HtmlPage.java:643)
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createStandardAuthenticatedConnection(BoxConnectionHelper.java:170)
	... 49 more
{code}

Camel Box implements the 3-legged auth using HTTP scraping for the 1st leg to acquire the auth code and it appears the auth dialog at Box.com has been changed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-03-04 15:38:27.134,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 08 05:49:22 UTC 2019,,,,,,,0|z00aa8:,9223372036854775807,,,,,,,,,,04/Mar/19 15:38;jondruse;Problem is fixed in improvement [CAMEL-13279|https://issues.apache.org/jira/browse/CAMEL-13279] ([PR|https://github.com/apache/camel/pull/2803]),08/Mar/19 05:49;tadayosi;[~jondruse] Yeah it's fixed. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
KafkaConsumer stops consuming messages when exception occurs during offset commit,CAMEL-12031,13120571,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rgala,rgala,24/Nov/17 06:09,05/Mar/19 10:00,13/Mar/19 22:20,18/Dec/17 14:05,2.20.0,,,,,,,,,,,,,,,2.19.5,2.20.2,2.21.0,,,camel-kafka,,,,,,0,,,,"When processing of messages takes longer than max session timeout, the consumer thread will end after receiving the *org.apache.kafka.clients.consumer.CommitFailedException*.

{code:java}
       @Override
        public void run() {
            boolean first = true;
            boolean reConnect = true;

            while (reConnect) {

                // create consumer
                ClassLoader threadClassLoader = Thread.currentThread().getContextClassLoader();
                try {
                    // Kafka uses reflection for loading authentication settings, use its classloader
                    Thread.currentThread().setContextClassLoader(org.apache.kafka.clients.consumer.KafkaConsumer.class.getClassLoader());
                    this.consumer = new org.apache.kafka.clients.consumer.KafkaConsumer(kafkaProps);
                } finally {
                    Thread.currentThread().setContextClassLoader(threadClassLoader);
                }

                if (!first) {
                    // skip one poll timeout before trying again
                    long delay = endpoint.getConfiguration().getPollTimeoutMs();
                    log.info(""Reconnecting {} to topic {} after {} ms"", threadId, topicName, delay);
                    try {
                        Thread.sleep(delay);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }

                first = false;

                // doRun keeps running until we either shutdown or is told to re-connect
                reConnect = doRun();
            }
        }
{code}

The *doRun()* method returns false and the loop ends. It should be possible to let the proces continue after failed offset commit.

I think the catch block inside *doRun* method should look like this:


{code:java}
           ...
            } catch (InterruptException e) {
                getExceptionHandler().handleException(""Interrupted while consuming "" + threadId + "" from kafka topic"", e);
                log.info(""Unsubscribing {} from topic {}"", threadId, topicName);
                consumer.unsubscribe();
                Thread.currentThread().interrupt();
            } catch (org.apache.kafka.clients.consumer.CommitFailedException e) { //or even org.apache.kafka.common.KafkaException
                getExceptionHandler().handleException(""Error consuming "" + threadId + "" from kafka topic"", e);
                reConnect = true;
            } catch (Exception e) {
                getExceptionHandler().handleException(""Error consuming "" + threadId + "" from kafka topic"", e);
            } finally {
                log.debug(""Closing {} "", threadId);
                IOHelper.close(consumer);
            }
            ...
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-25 17:07:14.189,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 05 10:00:30 UTC 2019,,,,,,,0|i3n5o7:,9223372036854775807,,,,,,,,,,25/Nov/17 17:07;davsclaus;Thanks for reporting yeah we can do a re-connect if kafka throws one of its exception. You are welcome to work on a patch as github PR,"18/Dec/17 16:36;rgala;You were faster than me :)

I did almost the same, but was not able to create a reliable test for that so I did not issue a pull request. I tried to simulate a Kafka session timeout in the test to cause a CommitFailedException,  but could not reduce session timeout on embedded Kafka and the test had to run for at least five minutes before the timeout occured.

","05/Mar/19 10:00;eugenb;It seams I can replicate this issue with camel-kafka 3.0.0.M1 release.

On some topics on kafka I get reconnect issue when either changing the offset manually (start from beginning, or when new message comes in).
{code:java}
2019-03-05 10:51:36.168 INFO 5400 --- [carbpandastest]] o.a.kafka.common.utils.AppInfoParser : Kafka version : 2.0.0
2019-03-05 10:51:36.168 INFO 5400 --- [carbpandastest]] o.a.kafka.common.utils.AppInfoParser : Kafka commitId : 3402a8361b734732
2019-03-05 10:51:36.168 INFO 5400 --- [carbpandastest]] o.a.camel.component.kafka.KafkaConsumer : Reconnecting carbpandastest-Thread 0 to topic carbpandastest after 5000 ms
2019-03-05 10:51:41.182 INFO 5400 --- [carbpandastest]] o.a.camel.component.kafka.KafkaConsumer : Subscribing carbpandastest-Thread 0 to topic carbpandastest
2019-03-05 10:51:41.229 INFO 5400 --- [carbpandastest]] org.apache.kafka.clients.Metadata : Cluster ID: SV04zC4aSJuPFIuouM0CZA
2019-03-05 10:51:41.229 INFO 5400 --- [carbpandastest]] o.a.k.c.c.internals.AbstractCoordinator : [Consumer clientId=consumer-47, groupId=1a981fbb-60c4-41b9-9051-8696a2b84cfc] Discovered group coordinator atgrzsl2929.avl01.avlcorp.lan:9092 (id: 2147483646 rack: null)
2019-03-05 10:51:41.229 INFO 5400 --- [carbpandastest]] o.a.k.c.c.internals.ConsumerCoordinator : [Consumer clientId=consumer-47, groupId=1a981fbb-60c4-41b9-9051-8696a2b84cfc] Revoking previously assigned partitions []
2019-03-05 10:51:41.229 INFO 5400 --- [carbpandastest]] o.a.k.c.c.internals.AbstractCoordinator : [Consumer clientId=consumer-47, groupId=1a981fbb-60c4-41b9-9051-8696a2b84cfc] (Re-)joining group
2019-03-05 10:51:41.307 INFO 5400 --- [carbpandastest]] o.a.k.c.c.internals.AbstractCoordinator : [Consumer clientId=consumer-47, groupId=1a981fbb-60c4-41b9-9051-8696a2b84cfc] Successfully joined group with generation 93
2019-03-05 10:51:41.307 INFO 5400 --- [carbpandastest]] o.a.k.c.c.internals.ConsumerCoordinator : [Consumer clientId=consumer-47, groupId=1a981fbb-60c4-41b9-9051-8696a2b84cfc] Setting newly assigned partitions [carbpandastest-0]
2019-03-05 10:51:41.354 WARN 5400 --- [carbpandastest]] o.a.camel.component.kafka.KafkaConsumer : KafkaException consuming carbpandastest-Thread 0 from topic carbpandastest. Will attempt to re-connect on next run
2019-03-05 10:51:41.385 INFO 5400 --- [carbpandastest]] o.a.k.clients.consumer.ConsumerConfig : ConsumerConfig values:
auto.commit.interval.ms = 5000
auto.offset.reset = latest
bootstrap.servers = [XXXXX:9092]
check.crcs = true
client.id =
connections.max.idle.ms = 540000
default.api.timeout.ms = 60000
enable.auto.commit = true
exclude.internal.topics = true
fetch.max.bytes = 52428800
fetch.max.wait.ms = 500
fetch.min.bytes = 1
group.id = 1a981fbb-60c4-41b9-9051-8696a2b84cfc
heartbeat.interval.ms = 3000
interceptor.classes = []
internal.leave.group.on.close = true
isolation.level = read_uncommitted
key.deserializer = class org.apache.kafka.common.serialization.IntegerDeserializer
max.partition.fetch.bytes = 1048576
max.poll.interval.ms = 300000
max.poll.records = 500
metadata.max.age.ms = 300000
metric.reporters = []
metrics.num.samples = 2
metrics.recording.level = INFO
metrics.sample.window.ms = 30000
partition.assignment.strategy = [org.apache.kafka.clients.consumer.RangeAssignor]
receive.buffer.bytes = 65536
reconnect.backoff.max.ms = 1000
reconnect.backoff.ms = 50
request.timeout.ms = 40000
retry.backoff.ms = 100
sasl.client.callback.handler.class = null
sasl.jaas.config = null
sasl.kerberos.kinit.cmd = /usr/bin/kinit
sasl.kerberos.min.time.before.relogin = 60000
sasl.kerberos.service.name = null
sasl.kerberos.ticket.renew.jitter = 0.05
sasl.kerberos.ticket.renew.window.factor = 0.8
sasl.login.callback.handler.class = null
sasl.login.class = null
sasl.login.refresh.buffer.seconds = 300
sasl.login.refresh.min.period.seconds = 60
sasl.login.refresh.window.factor = 0.8
sasl.login.refresh.window.jitter = 0.05
sasl.mechanism = GSSAPI
security.protocol = PLAINTEXT
send.buffer.bytes = 131072
session.timeout.ms = 10000
ssl.cipher.suites = null
ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
ssl.endpoint.identification.algorithm = https
ssl.key.password = null
ssl.keymanager.algorithm = SunX509
ssl.keystore.location = null
ssl.keystore.password = null
ssl.keystore.type = JKS
ssl.protocol = TLS
ssl.provider = null
ssl.secure.random.implementation = null
ssl.trustmanager.algorithm = PKIX
ssl.truststore.location = null
ssl.truststore.password = null
ssl.truststore.type = JKS
value.deserializer = class io.confluent.kafka.serializers.KafkaAvroDeserializer

2019-03-05 10:51:41.385 INFO 5400 --- [carbpandastest]] i.c.k.s.KafkaAvroDeserializerConfig : KafkaAvroDeserializerConfig values:
schema.registry.url = [http://XXXX:30002]
basic.auth.user.info = [hidden]
auto.register.schemas = true
max.schemas.per.subject = 1000
basic.auth.credentials.source = URL
schema.registry.basic.auth.user.info = [hidden]
specific.avro.reader = true
value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove warnings about annotations when validating karaf features,CAMEL-13276,13218886,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,01/Mar/19 13:10,01/Mar/19 19:37,13/Mar/19 22:20,01/Mar/19 13:46,,,,,,,,,,,,,,,,3.0.0-M2,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,CAMEL-13277,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 01 19:37:12 UTC 2019,,,,,,,0|z008c8:,9223372036854775807,,,,,,,,,,"01/Mar/19 13:16;gnt;We need to force the use of bndlib 3.5.0 when validating the features.
The workaround can be removed when bndlib 4.2.0 is released.",01/Mar/19 19:37;gnt;https://github.com/apache/camel/commit/7e58725067763ef8e8f251f5ff81e4e82d922107,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix log configuration for karaf integration tests,CAMEL-13278,13218894,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,01/Mar/19 14:18,01/Mar/19 19:36,13/Mar/19 22:20,01/Mar/19 19:36,,,,,,,,,,,,,,,,3.0.0-M2,,,,,tests,,,,,,0,,,,,,,,,,,,,,,,,,,,,,CAMEL-13277,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 01 19:36:54 UTC 2019,,,,,,,0|z008e0:,9223372036854775807,,,,,,,,,,01/Mar/19 19:36;gnt;https://github.com/apache/camel/commit/48bd797518fe091b7ac7274a62d1024daa78fa0e,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong Jetty Maven plugin referenced,CAMEL-13020,13205710,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,20/Dec/18 12:32,01/Mar/19 13:35,13/Mar/19 22:20,20/Dec/18 12:38,,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,build system,,,,,,0,,,,Seems that we have modules that reference {{org.mortbay.jetty:jetty-maven-plugin}} instead of {{org.eclipse.jetty:org.eclipse.jetty}} with the same {{${jetty-plugin-version}}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-12-20 12:32:56.0,,,,,,,0|u006sw:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in ReactiveHelper class,CAMEL-13033,13206849,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,fvaleri,fvaleri,28/Dec/18 18:34,01/Mar/19 13:34,13/Mar/19 22:20,09/Jan/19 11:51,3.0.0,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,camel-core,,,,,,0,,,,"I was doing a performance test using the Splitter EIP and after reaching good results with 2.23.0 release I tried the same test with 3.0.0-SNAPHOST discovering a memory leak located in the ReactiveHelper class (back LinkedList). It's at the routine engine level and a OOM error should be triggered with every load test, but I can share my test if it's needed.",,"fvaleri commented on pull request #2694: CAMEL-13033: Memory leak in ReactiveHelper class
URL: https://github.com/apache/camel/pull/2694
 
 
   It seems that, in some cases, we are never polling from the back list of work in org.apache.camel.support.ReactiveHelper.Work and this leads to OOM error. 
   
   This is a test case (try to set numOfRecords=1000000 and maxWaitTime=20000):
   https://github.com/fvaleri/camel/tree/bigxml-split-example/examples/camel-example-bigxml-split
   
   I tried to set the ""main"" parameter to true in the schedule call inside ReactiveHelper.scheduleLast. If I understand correctly, this avoids the accumulation of after processor work from CamelInternalProcessor by executing it in the route's main execution thread.
   
   After this change I see the after processor TRACE log (CamelInternalProcessor line 232) and I have similar test results as with 2.23.0, even if I have to increase maxWaitTime a little for the 1.3GB test.
   
   I'm not completely aware of the implications of this change in other parts of the code, so I need a double check from you.
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Dec/18 16:38;githubbot;600","gnodet commented on pull request #2694: CAMEL-13033: Memory leak in ReactiveHelper class
URL: https://github.com/apache/camel/pull/2694
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jan/19 07:29;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,28/Dec/18 18:32;fvaleri;Screenshot 2018-12-28 at 7.18.11 PM.png;https://issues.apache.org/jira/secure/attachment/12953257/Screenshot+2018-12-28+at+7.18.11+PM.png,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sun Dec 30 16:43:52 UTC 2018,,,,,,,0|u00dkw:,9223372036854775807,,,,,,,,,,30/Dec/18 16:43;fvaleri;https://github.com/apache/camel/pull/2694,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove dependency on ActiveMQ SNAPSHOT,CAMEL-13068,13209817,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,tdiesler,tdiesler,16/Jan/19 08:11,01/Mar/19 13:33,13/Mar/19 22:20,16/Jan/19 10:14,,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,camel-activemq,,,,,,0,,,,"Currently we have a reference to [ActiveMQ-5.16.0-SNAPSHOT|https://github.com/apache/camel/blob/master/parent/pom.xml#L42] in Camel-3.0.x, which prevents the WildFly-Camel build that is based on Camel-3.0.x. We integrate the activemq component like [this|https://github.com/wildfly-extras/wildfly-camel/blob/master/feature/modules/etc/smartics/camel-modules.xml#L60], which has a dependency on the activemq module like [this|https://github.com/wildfly-extras/wildfly-camel/blob/master/feature/modules/etc/smartics/activemq-modules.xml#L23].
  
 Perhaps that 5.16.x snapshot can be released to some public repository.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,AMQ-7060,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-16 10:15:08.399,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 16 10:15:08 UTC 2019,,,,,,,0|y0020g:,9223372036854775807,,,,,,,,,,16/Jan/19 10:15;ancosen;We are now using 5.15.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ObjectHelper does no longer see META-INF/services from camel-core,CAMEL-13076,13210169,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,17/Jan/19 14:28,01/Mar/19 13:33,13/Mar/19 22:20,18/Jan/19 09:40,,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,camel-core,,,,,,0,,,,"The separation of camel-util from camel-core is somewhat problematic because of this code https://paste.fedoraproject.org/paste/6OE~asoW6rmuNjA3z-1XUQ In a modular environment, ObjectHelper does no longer see META-INF/services from camel-core",,"tdiesler commented on pull request #2715: [CAMEL-13076] ObjectHelper does no longer see META-INF/services from …
URL: https://github.com/apache/camel/pull/2715
 
 
   …camel-core
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Jan/19 15:53;githubbot;600","davsclaus commented on pull request #2715: [CAMEL-13076] ObjectHelper does no longer see META-INF/services from …
URL: https://github.com/apache/camel/pull/2715
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/19 09:36;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-01-17 14:28:07.0,,,,,,,0|yi014o:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-AWS EKS: Specify the VPC Config header correctly,CAMEL-13079,13210351,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,18/Jan/19 11:04,01/Mar/19 13:33,13/Mar/19 22:20,18/Jan/19 11:07,,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,,,,,,,0,,,,We are setting the ROLE_ARN header for VPC Config.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-01-18 11:04:20.0,,,,,,,0|yi028o:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MockEndpoint may not respect expected minimum message count,CAMEL-13096,13210904,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,22/Jan/19 08:27,01/Mar/19 13:32,13/Mar/19 22:20,22/Jan/19 10:04,,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,camel-core,,,,,,0,,,,"A sequence like this ...

{code}
            mockEndpoint.expectedMinimumMessageCount(1);
            mockEndpoint.expectedHeaderReceived(CHANNEL, ""subscriberChannel"");
            mockEndpoint.assertIsSatisfied();
{code}

may fail when the number of received messages is > 1

This is because expectedHeaderReceived() implicitly sets the expectedMessageCount to 1, which will take priority over expectedMinimumMessageCount.

Instead, expectedHeaderReceived should implicitly set expectedMinimumMessageCount to 1.",,"tdiesler commented on pull request #2725: [CAMEL-13096] MockEndpoint may not respect expected minimum message c…
URL: https://github.com/apache/camel/pull/2725
 
 
   …ount
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jan/19 08:31;githubbot;600","oscerd commented on pull request #2725: [CAMEL-13096] MockEndpoint may not respect expected minimum message c…
URL: https://github.com/apache/camel/pull/2725
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jan/19 10:03;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-01-22 08:27:13.0,,,,,,,0|yi05nc:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Fhir-Example-osgi doesn't work,CAMEL-13127,13212004,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jpoth,ancosen,ancosen,26/Jan/19 11:49,01/Mar/19 13:30,13/Mar/19 22:20,28/Jan/19 09:31,,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,examples,,,,,,0,,,,"{code:java}
12:47:27.332 WARN [pipe-install -s mvn:org.apache.camel.example/camel-example-fhir-osgi/3.0.0-SNAPSHOT] Listener caused an exception, will be ignored
java.util.concurrent.ExecutionException: java.lang.NoClassDefFoundError: org/apache/camel/util/concurrent/ThreadPoolRejectedPolicy
at java.util.concurrent.FutureTask.report(FutureTask.java:122) ~[?:?]
at java.util.concurrent.FutureTask.get(FutureTask.java:192) ~[?:?]
at java.util.concurrent.AbstractExecutorService.doInvokeAny(AbstractExecutorService.java:193) ~[?:?]
at java.util.concurrent.AbstractExecutorService.invokeAny(AbstractExecutorService.java:225) ~[?:?]
at org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper$4.call(ScheduledExecutorServiceWrapper.java:185) ~[48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper$15.call(ScheduledExecutorServiceWrapper.java:446) ~[48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.utils.threading.RWLock.runReadOperation(RWLock.java:33) ~[48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper.runUnlessShutdown(ScheduledExecutorServiceWrapper.java:443) ~[48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper.invokeAny(ScheduledExecutorServiceWrapper.java:180) ~[48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintEventDispatcher.callListener(BlueprintEventDispatcher.java:188) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintEventDispatcher.callListeners(BlueprintEventDispatcher.java:178) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintEventDispatcher.blueprintEvent(BlueprintEventDispatcher.java:133) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:427) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:278) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:299) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:268) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:264) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:254) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179) [?:?]
at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730) [?:?]
at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485) [?:?]
at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4579) [?:?]
at org.apache.felix.framework.Felix.startBundle(Felix.java:2174) [?:?]
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998) [?:?]
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984) [?:?]
at org.apache.karaf.bundle.command.Install.execute(Install.java:115) [17:org.apache.karaf.bundle.core:4.2.2]
at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:84) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:68) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:86) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:599) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:526) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:415) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.felix.gogo.runtime.Pipe.doCall(Pipe.java:416) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:229) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:59) [35:org.apache.karaf.shell.core:4.2.2]
at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:?]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:?]
at java.lang.Thread.run(Thread.java:748) [?:?]
Caused by: java.lang.NoClassDefFoundError: org/apache/camel/util/concurrent/ThreadPoolRejectedPolicy
at org.apache.camel.spi.ThreadPoolProfile.getRejectedExecutionHandler(ThreadPoolProfile.java:225) ~[?:?]
at org.apache.camel.support.DefaultThreadPoolFactory.newScheduledThreadPool(DefaultThreadPoolFactory.java:100) ~[?:?]
at org.apache.camel.impl.DefaultExecutorServiceManager.newScheduledThreadPool(DefaultExecutorServiceManager.java:242) ~[?:?]
at org.apache.camel.impl.DefaultExecutorServiceManager.newScheduledThreadPool(DefaultExecutorServiceManager.java:266) ~[?:?]
at org.apache.camel.support.DefaultScheduledPollConsumerScheduler.doStart(DefaultScheduledPollConsumerScheduler.java:172) ~[?:?]
at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:86) ~[?:?]
at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:55) ~[?:?]
at org.apache.camel.support.ScheduledPollConsumer.doStart(ScheduledPollConsumer.java:439) ~[?:?]
at org.apache.camel.component.file.GenericFileConsumer.doStart(GenericFileConsumer.java:707) ~[?:?]
at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:86) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.startService(AbstractCamelContext.java:3631) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.doStartOrResumeRouteConsumers(AbstractCamelContext.java:3949) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.doStartRouteConsumers(AbstractCamelContext.java:3884) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.safelyStartRouteServices(AbstractCamelContext.java:3804) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.doStartOrResumeRoutes(AbstractCamelContext.java:3568) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:3420) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.lambda$doStart$2(AbstractCamelContext.java:3217) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.doWithDefinedClassLoader(AbstractCamelContext.java:3234) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.doStart(AbstractCamelContext.java:3215) ~[?:?]
at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:86) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.start(AbstractCamelContext.java:3131) ~[?:?]
at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:251) ~[?:?]
at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:293) ~[?:?]
at org.apache.camel.blueprint.BlueprintCamelContext.blueprintEvent(BlueprintCamelContext.java:184) ~[?:?]
at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:190) ~[?:?]
at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:188) ~[?:?]
at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:?]
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:?]
at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:?]
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:?]
at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:?]
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:?]
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:?]
... 3 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-28 09:31:18.431,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 28 09:31:18 UTC 2019,,,,,,,0|yi0cfc:,9223372036854775807,,,,,,,,,,28/Jan/19 09:31;jpoth;Closed with https://github.com/apache/camel/commit/2c63df2ecfa3f8cdf15bf08febfcad6b720bea01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot install camel-jms Karaf feature,CAMEL-13128,13212005,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,ancosen,ancosen,26/Jan/19 11:52,01/Mar/19 13:29,13/Mar/19 22:20,28/Jan/19 13:51,3.0.0,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,karaf,,,,,,0,,,,"by installing on camel-jms
{code:java}
karaf@root()> feature:repo-add file:////home/oscerd/.m2/repository/org/apache/camel/karaf/apache-camel/3.0.0-SNAPSHOT/apache-camel-3.0.0-SNAPSHOT-features.xml
Adding feature url file:////home/oscerd/.m2/repository/org/apache/camel/karaf/apache-camel/3.0.0-SNAPSHOT/apache-camel-3.0.0-SNAPSHOT-features.xml
karaf@root()> feature:install -v camel-jms
Adding features: camel-jms/[3.0.0.SNAPSHOT,3.0.0.SNAPSHOT]
Changes to perform:
Region: root
Bundles to install:
mvn:com.github.ben-manes.caffeine/caffeine/2.6.2
mvn:org.apache.camel/camel-api/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-base/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-browse/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-commands-core/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-controlbus/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-core/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-dataformat/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-direct/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-directvm/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-file/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-jms/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-language/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-log/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-management-api/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-management-impl/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-properties/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-ref/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-saga/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-scheduler/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-seda/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-stub/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-support/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-timer/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-util/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-validator/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-vm/3.0.0-SNAPSHOT
mvn:org.apache.camel/json-simple-ordered/3.0.0-SNAPSHOT
mvn:org.apache.camel.karaf/camel-karaf-commands/3.0.0-SNAPSHOT
mvn:org.apache.camel/spi-annotations/3.0.0-SNAPSHOT
mvn:commons-pool/commons-pool/1.6
mvn:org.apache.geronimo.specs/geronimo-jms_2.0_spec/1.0-alpha-2
mvn:org.apache.geronimo.specs/geronimo-jta_1.1_spec/1.1.1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.aopalliance/1.0_6
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.2.11_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-aop/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-beans/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-context/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-context-support/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-core/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-expression/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-jms/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-tx/5.1.3.RELEASE_1
mvn:org.codehaus.woodstox/stax2-api/3.1.4
mvn:org.codehaus.woodstox/woodstox-core-asl/4.4.1
Stopping bundles:
org.ops4j.pax.logging.pax-logging-log4j2/1.10.1
Installing bundles:
mvn:com.github.ben-manes.caffeine/caffeine/2.6.2
mvn:org.apache.camel/camel-api/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-base/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-browse/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-commands-core/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-controlbus/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-core/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-dataformat/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-direct/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-directvm/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-file/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-jms/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-language/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-log/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-management-api/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-management-impl/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-properties/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-ref/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-saga/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-scheduler/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-seda/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-stub/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-support/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-timer/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-util/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-validator/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-vm/3.0.0-SNAPSHOT
mvn:org.apache.camel/json-simple-ordered/3.0.0-SNAPSHOT
mvn:org.apache.camel.karaf/camel-karaf-commands/3.0.0-SNAPSHOT
mvn:org.apache.camel/spi-annotations/3.0.0-SNAPSHOT
mvn:commons-pool/commons-pool/1.6
mvn:org.apache.geronimo.specs/geronimo-jms_2.0_spec/1.0-alpha-2
mvn:org.apache.geronimo.specs/geronimo-jta_1.1_spec/1.1.1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.aopalliance/1.0_6
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.2.11_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-aop/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-beans/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-context/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-context-support/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-core/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-expression/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-jms/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-tx/5.1.3.RELEASE_1
mvn:org.codehaus.woodstox/stax2-api/3.1.4
mvn:org.codehaus.woodstox/woodstox-core-asl/4.4.1
Refreshing bundles:
org.ops4j.pax.logging.pax-logging-log4j2/1.10.1 (Should be wired to: org.apache.geronimo.specs.geronimo-jms_2.0_spec/1.0.0.alpha-2 (through [org.ops4j.pax.logging.pax-logging-log4j2/1.10.1] osgi.wiring.package; resolution:=optional; filter:=""(osgi.wiring.package=javax.jms)""), stax2-api/3.1.4 (through [org.ops4j.pax.logging.pax-logging-log4j2/1.10.1] osgi.wiring.package; resolution:=optional; filter:=""(osgi.wiring.package=org.codehaus.stax2)""))
Starting bundles:
org.ops4j.pax.logging.pax-logging-log4j2/1.10.1
stax2-api/3.1.4
woodstox-core-asl/4.4.1
org.apache.geronimo.specs.geronimo-jta_1.1_spec/1.1.1
org.apache.servicemix.bundles.jaxb-impl/2.2.11.1
org.apache.servicemix.bundles.spring-core/5.1.3.RELEASE_1
org.apache.servicemix.bundles.aopalliance/1.0.0.6
org.apache.servicemix.bundles.spring-beans/5.1.3.RELEASE_1
org.apache.servicemix.bundles.spring-aop/5.1.3.RELEASE_1
org.apache.servicemix.bundles.spring-expression/5.1.3.RELEASE_1
org.apache.servicemix.bundles.spring-context/5.1.3.RELEASE_1
org.apache.servicemix.bundles.spring-tx/5.1.3.RELEASE_1
org.apache.servicemix.bundles.spring-jms/5.1.3.RELEASE_1
org.apache.servicemix.bundles.spring-context-support/5.1.3.RELEASE_1
com.github.ben-manes.caffeine/2.6.2
org.apache.camel.camel-util/3.0.0.SNAPSHOT
org.apache.geronimo.specs.geronimo-jms_2.0_spec/1.0.0.alpha-2
org.apache.camel.camel-management-api/3.0.0.SNAPSHOT
org.apache.camel.spi-annotations/3.0.0.SNAPSHOT
org.apache.camel.camel-jms/3.0.0.SNAPSHOT
org.apache.camel.camel-api/3.0.0.SNAPSHOT
org.apache.camel.camel-support/3.0.0.SNAPSHOT
org.apache.camel.camel-log/3.0.0.SNAPSHOT
org.apache.camel.camel-seda/3.0.0.SNAPSHOT
org.apache.camel.camel-vm/3.0.0.SNAPSHOT
org.apache.camel.camel-properties/3.0.0.SNAPSHOT
org.apache.camel.camel-language/3.0.0.SNAPSHOT
org.apache.camel.json-simple-ordered/3.0.0.SNAPSHOT
org.apache.camel.camel-base/3.0.0.SNAPSHOT
org.apache.camel.camel-direct/3.0.0.SNAPSHOT
org.apache.camel.camel-core/3.0.0.SNAPSHOT
org.apache.camel.camel-management-impl/3.0.0.SNAPSHOT
org.apache.camel.camel-browse/3.0.0.SNAPSHOT
org.apache.camel.camel-validator/3.0.0.SNAPSHOT
org.apache.camel.camel-saga/3.0.0.SNAPSHOT
org.apache.camel.camel-directvm/3.0.0.SNAPSHOT
org.apache.camel.camel-file/3.0.0.SNAPSHOT
org.apache.camel.camel-stub/3.0.0.SNAPSHOT
org.apache.camel.camel-timer/3.0.0.SNAPSHOT
org.apache.camel.camel-controlbus/3.0.0.SNAPSHOT
org.apache.camel.camel-ref/3.0.0.SNAPSHOT
org.apache.commons.pool/1.6.0
org.apache.camel.camel-scheduler/3.0.0.SNAPSHOT
org.apache.camel.camel-dataformat/3.0.0.SNAPSHOT
org.apache.camel.camel-commands-core/3.0.0.SNAPSHOT
org.apache.camel.karaf.camel-karaf-commands/3.0.0.SNAPSHOT
org.apache.karaf.features.internal.util.MultiException: Error restarting bundles:
Activator start error in bundle org.apache.camel.camel-core [51].
at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1005)
at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1025)
at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:964)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.camel-core [51].
at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:161)
at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1116)
at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:997)
... 6 more
Caused by: java.lang.NoClassDefFoundError: org/apache/camel/util/ObjectHelper
at org.apache.camel.impl.osgi.Activator$BundleTypeConverterLoader.<init>(Activator.java:386)
at org.apache.camel.impl.osgi.Activator.registerTypeConverterLoader(Activator.java:236)
at org.apache.camel.impl.osgi.Activator.addingBundle(Activator.java:136)
at org.apache.camel.impl.osgi.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:430)
at org.apache.camel.impl.osgi.tracker.AbstractTracked.trackAdding(AbstractTracked.java:260)
at org.apache.camel.impl.osgi.tracker.AbstractTracked.trackInitial(AbstractTracked.java:187)
at org.apache.camel.impl.osgi.tracker.BundleTracker.open(BundleTracker.java:173)
at org.apache.camel.impl.osgi.Activator.start(Activator.java:101)
at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240)
... 12 more
Caused by: java.lang.ClassNotFoundException: org.apache.camel.util.ObjectHelper not found by org.apache.camel.camel-jms [56]
at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
... 22 more
Error executing command: Error restarting bundles:
Activator start error in bundle org.apache.camel.camel-core [51].
{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-01-26 11:52:08.0,,,,,,,0|yi0cfk:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileMEPInOutTest fails on case sensitive filesystem,CAMEL-13167,13214314,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,tapiiron,tapiiron,07/Feb/19 06:56,01/Mar/19 13:25,13/Mar/19 22:20,07/Feb/19 07:21,3.0.0,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,tests,,,,,,0,,,,"Test fails on case sensitive filesystem (using master branch, currenty camel3):

camel/core/camel-core/src/test/java/org/apache/camel/component/file/FileMEPInOutTest.java

fix diff:

diff --git a/core/camel-core/src/test/java/org/apache/camel/component/file/FileMEPInOutTest.java b/core/camel-core/src/test/java/org/apache/ca
mel/component/file/FileMEPInOutTest.java
index 653eae88e32..3b73132791c 100644
--- a/core/camel-core/src/test/java/org/apache/camel/component/file/FileMEPInOutTest.java
+++ b/core/camel-core/src/test/java/org/apache/camel/component/file/FileMEPInOutTest.java
@@ -32,7 +32,7 @@ public class FileMEPInOutTest extends ContextTestSupport {
         MockEndpoint mock = getMockEndpoint(""mock:result"");
         mock.expectedMessageCount(1);
         mock.expectedBodiesReceived(""Hello World"");
-        mock.expectedFileExists(""target/data/fileMEPInOutTest.txt"", ""Hello World"");
+        mock.expectedFileExists(""target/data/FileMEPInOutTest.txt"", ""Hello World"");

         // request is InOut
         template.requestBodyAndHeader(""direct:in"", ""Hello World"", Exchange.FILE_NAME,
@@ -51,4 +51,4 @@ public class FileMEPInOutTest extends ContextTestSupport {
         };
     }

-}
\ No newline at end of file
+}",Linux with case sensivite filesystem,,,,,,,,,,,,,,,,,,,,,,,,,,,,,07/Feb/19 06:56;tapiiron;FileMepInOutTest-casefix.patch;https://issues.apache.org/jira/secure/attachment/12957859/FileMepInOutTest-casefix.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2019-02-07 07:21:38.584,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 07 07:21:38 UTC 2019,,,Patch Available,,,,0|yi0qm8:,9223372036854775807,Unit Test Broken,,,,,,,,,07/Feb/19 07:21;ancosen;Thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ActiveMQ reports wrong number of arguments,CAMEL-13145,13212828,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,tdiesler,tdiesler,30/Jan/19 14:23,01/Mar/19 13:24,13/Mar/19 22:20,04/Feb/19 14:50,,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,camel-activemq,,,,,,0,,,,"With a simple route definition like this 

{code}
        CamelContext camelctx = new DefaultCamelContext();
        camelctx.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"").
                transform(simple(""Hello ${body}"")).
                toF(""activemq:queue:%s?connectionFactory=java:/ActiveMQConnectionFactory"", QUEUE_NAME);
            }
        });
{code}

I see

{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: activemq://queue:testQueue?connectionFactory=java%3A%2FActiveMQConnectionFactory due to: java.lang.IllegalArgumentException: wrong number of arguments
	at org.wildfly.camel.test.activemq.ActiveMQIntegrationTest.testSendMessage(ActiveMQIntegrationTest.java:125)
Caused by: java.lang.RuntimeException: java.lang.IllegalArgumentException: wrong number of arguments
	at org.wildfly.camel.test.activemq.ActiveMQIntegrationTest.testSendMessage(ActiveMQIntegrationTest.java:125)
Caused by: java.lang.IllegalArgumentException: wrong number of arguments
	at org.wildfly.camel.test.activemq.ActiveMQIntegrationTest.testSendMessage(ActiveMQIntegrationTest.java:125)
{code}

CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/2763",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-31 12:38:35.973,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 04 14:50:36 UTC 2019,,,,,,,0|yi0hgw:,9223372036854775807,,,,,,,,,,"31/Jan/19 12:38;ancosen;Here there is not so much we can do, because ActiveMQ will need to align to Camel 3, what I think you can do it's override the ActiveMQ component and make it use the IntrospectionSupport from Camel-support in camel 3",04/Feb/19 14:50;ancosen;This should be fixed now that we moved ActiveMQ-Camel into Camel repository with name Camel-ActiveMQ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File producer - Issue with toD when using moveExisting,CAMEL-13272,13218401,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/Feb/19 17:12,01/Mar/19 13:15,13/Mar/19 22:20,28/Feb/19 06:08,,,,,,,,,,,,,,,,3.0.0,3.0.0-M2,,,,camel-core,,,,,,0,,,,"See SO
https://stackoverflow.com/questions/54890566/camel-file-component-create-a-file-and-if-already-exist-move-it-and-renamed-i/54910417#54910417

And for the solution/workaround to use to instead of toD",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 27 17:41:34 UTC 2019,,,,,,,0|z005cw:,9223372036854775807,,,,,,,,,,"27/Feb/19 17:41;davsclaus;Okay I have reproduced this and its a bit more tricky to solve, the same issue would be for the ftp component as they extend file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Header filtering in HTTP producers from RestProducerFactory filters IN instead of OUT headers,CAMEL-13249,13217489,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,22/Feb/19 17:00,25/Feb/19 15:54,13/Mar/19 22:20,25/Feb/19 15:53,2.18.0,,,,,,,,,,,,,,,2.23.2,2.24.0,3.0.0,,,camel-http-common,,,,,,0,,,,"{{HttpRestHeaderFilterStrategy}} is used by HTTP producers and it delegates to {{applyFilterToExternalHeaders}} from superclass, which filters in the {{IN}} direction instead of in the {{OUT}} direction.

This leads to an issue when HTTP consumer is followed by a HTTP producer created from the {{RestProducerFactory}} implementation in that the HTTP headers that are meant to be filtered out are passed on to the HTTP service being invoked.

These headers include {{Host}} header which is used for virtual hosting and will most likely fail the request with 404 or 503 HTTP status.",,"zregvart commented on pull request #2790: CAMEL-13249: invoke `applyFilterToCamelHeaders` instead of `applyFilterToExternalHeaders`
URL: https://github.com/apache/camel/pull/2790
 
 
   This changes the invocation in `HttpRestHeaderFilterStrategy::applyFilterToCamelHeaders` to delegate to `super::applyFilterToCamelHeaders` instead of `super::applyFilterToExternalHeaders`.
   
   Also adds integration test demonstrating the issue and refactors `HttpRestHeaderFilterStrategyTest` from `components/camel-http4` to `/components/camel-http-common` as it doesn't depend on `http4` component and tests a class in `camel-http-common`.
   
   @davsclaus @oscerd can you take a look, this seems right to me, but the use of `applyFilterToExternalHeaders` vs `applyFilterToCamelHeaders` seems intentional so I could be missing something.
   
   If this change gets approved I'll backport it to `2.23.x` and forward port it to `master`.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Feb/19 17:07;githubbot;600","zregvart commented on pull request #2790: CAMEL-13249: invoke `applyFilterToCamelHeaders` instead of `applyFilterToExternalHeaders`
URL: https://github.com/apache/camel/pull/2790
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Feb/19 15:54;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-02-22 17:00:23.0,,,,,,,0|yi1a40:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing backport-util-concurrent-version property defined in the parent pom.xml,CAMEL-13241,13217094,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,xldai,xldai,21/Feb/19 06:28,21/Feb/19 06:39,13/Mar/19 22:20,21/Feb/19 06:39,2.23.1,,,,,,,,,,,,,,,2.23.2,2.24.0,,,,karaf,,,,,,0,,,,"This property is somehow removed from the parent pom.xml

{code}
<backport-util-concurrent-version>3.1</backport-util-concurrent-version>
{code}

As consequence, we have wrong camel-ical feature generated from the apache-camel-2.23.1-features.xml

{code}
<feature name=""camel-ical"" version=""2.23.1"" resolver=""(obr)"" start-level=""50"">
    <feature version=""2.23.1"">camel-core</feature>
    <bundle dependency=""true"">mvn:commons-lang/commons-lang/2.6</bundle>
    <bundle dependency=""true"">mvn:commons-codec/commons-codec/1.11</bundle>
    <bundle dependency=""true"">wrap:mvn:backport-util-concurrent/backport-util-concurrent/${backport-util-concurrent-version}$Bundle-SymbolicName=backport-util-concurrent.backport-util-concurrent&Bundle-Version=${backport-util-concurrent-version}</bundle>
    <bundle dependency=""true"">mvn:org.mnode.ical4j/ical4j/1.0.7</bundle>
    <bundle>mvn:org.apache.camel/camel-ical/2.23.1</bundle>
</feature>
{code}

This property come back again after the CAMEL-13002 fixed by Guillaume but only on the master branch. On camel-2.23.x branch it still has to be fixed.",Java 8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-02-21 06:28:26.0,,,,,,,0|yi17og:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce-maven-plugin generates code that does not compile,CAMEL-12963,13200915,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,boris.daich,boris.daich,27/Nov/18 17:46,19/Feb/19 12:33,13/Mar/19 22:20,19/Feb/19 12:33,2.22.2,,,,,,,,,,,,,,,2.22.4,2.23.2,2.24.0,3.0.0,,camel-salesforce,,,,,,0,,,,"when running pom.xml with
{code:java}
<plugin>
    <groupId>org.apache.camel.maven</groupId>
    <artifactId>camel-salesforce-maven-plugin</artifactId>
    <version>2.22.2</version>
    <executions>
        <execution>
            <id>camel-sforce</id>
            <phase>generate-sources</phase>
            <goals>
                <goal>generate</goal>
            </goals>
        </execution>
    </executions>
    <configuration>
        <outputDirectory>${project.basedir}/src/main/java</outputDirectory>
        <version>44.0</version>
        <clientId>${my.clientId}</clientId>
        <clientSecret>${my.clientSecret}</clientSecret>
        <userName>${my.username}</userName>
        <password>${my.password}</password>
        <loginUrl>${my.loginUrl}</loginUrl>
        <packageName>com.my.entities4camel</packageName>
        <includes>
            <include>Task</include>
        </includes>
    </configuration>
</plugin>
{code}
the generated code does not compile because of the code like
{code:java}
private Account_Lookup What;

    @JsonProperty(""What"")
    public Account_Lookup getWhat() {
        return this.What;
    }

    @JsonProperty(""What"")
    public void setWhat(Account_Lookup What) {
        this.What = What;
    }
    private rtms__CarrierPayment__c_Lookup What;

    @JsonProperty(""What"")
    public rtms__CarrierPayment__c_Lookup getWhat() {
        return this.What;
    }

    @JsonProperty(""What"")
    public void setWhat(rtms__CarrierPayment__c_Lookup What) {
        this.What = What;
    }
{code}
 

it seems that any field that has Salesforce ""polymorphism"" (able to reference any type of Entity) causes the issue.

{{Task}} just simplest example.

Another thing that might be important: I run on top of an installed package the fields with prefix {{rtms__}} are from the managed package.","windows 10 64bit Pro

Java 10 same with Java 8 

 ","przemeklenik commented on pull request #2777: CAMEL-12963 Fix
URL: https://github.com/apache/camel/pull/2777
 
 
   Problem was related to Lookup and External Ids fields - there was unnecessary duplicity in generated DTOs and also @JsonProperty value wasn't set correctly.
   Additionaly, removed issue with NullPointerException for tests in case useStringsForPicklists variable wasn't set correctly.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/19 12:08;githubbot;600","zregvart commented on pull request #2785: CAMEL-12963: camel-salesforce-maven-plugin generates code that does not compile
URL: https://github.com/apache/camel/pull/2785
 
 
   This fixes issue with non-compilable code of created DTOs related to Lookup and External Ids fields.
   
   Also adds sorting of fields so that different field order caused by differences in introspection don't end up generating different source files.
   
   @przemeklenik can you please take a look and see if I missed anything, this should incorporate your changes and in addition some clean up work I wanted to do.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Feb/19 11:16;githubbot;600","zregvart commented on pull request #2777: CAMEL-12963 Fix
URL: https://github.com/apache/camel/pull/2777
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Feb/19 11:17;githubbot;600","zregvart commented on pull request #2785: CAMEL-12963: camel-salesforce-maven-plugin generates code that does not compile
URL: https://github.com/apache/camel/pull/2785
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Feb/19 09:48;githubbot;600",,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-15 12:11:21.842,,,no_permission,,Unknown,,,https://stackoverflow.com/questions/53490510/camel-salesforce-maven-plugin-generates-code-that-does-not-compile,,,,,,,,,,9223372036854775807,,,Tue Feb 19 12:33:24 UTC 2019,,,,,,,0|s00x6g:,9223372036854775807,,,,,,,,,,"15/Feb/19 12:11;Przemo;Issue was related to Lookup/External Ids fields in Salesforce.

Please review pull request #2777.",19/Feb/19 12:33;zregvart;Thanks to [~Przemo] for the contribution (y),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SMPP: Host, port and systemid component configuration is always overridden by URI configuration",CAMEL-13211,13216220,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,17/Feb/19 09:43,17/Feb/19 21:09,13/Mar/19 22:20,17/Feb/19 21:09,2.23.1,,,,,,,,,,,,,,,2.23.2,2.24.0,3.x,,,camel-smpp,,,,,,0,,,,"It is not possible to configure host, port and systemId at component level (e.g. by using Spring Boot component configuration properties), because camel-smpp always uses the values from the URI, even if the values are not present.

",,"PascalSchumacher commented on pull request #2783: CAMEL-13211 - SMPP: Host, port and systemid component configuration i…
URL: https://github.com/apache/camel/pull/2783
 
 
   …s always overridden by URI configuration
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Feb/19 09:47;githubbot;600","asfgit commented on pull request #2783: CAMEL-13211 - SMPP: Host, port and systemid component configuration i…
URL: https://github.com/apache/camel/pull/2783
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Feb/19 20:57;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-02-17 09:43:57.0,,,,,,,0|yi12bs:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URISupport sanitizeUri don't hide complete password if password contains colon,CAMEL-13191,13215474,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,Pieczewski,Pieczewski,13/Feb/19 10:34,15/Feb/19 06:47,13/Mar/19 22:20,15/Feb/19 06:47,2.23.1,,,,,,,,,,,,,,,2.22.4,2.23.2,2.24.0,3.0.0,,camel-core,,,,,,0,,,,"sanitizedUri don't hide the complete password if the password contains a colon.

e.g.

camel route URI is ""sftp://user:hidden:password@target.test"" where the password is ""hidden:password"" 

the sanitizedUri method will only hide the last part of password (sftp://user:hidden:xxxxxx@target.test)

{code:java|title=UnitTest}
import org.apache.camel.util.URISupport;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class UriSupportTest {

  @Test
  void testURISanitizeUri() {
    var sanitizedUri = URISupport.sanitizeUri(""sftp://user:hidden:Password@target.test"");
    Assertions.assertEquals(""sftp://user:xxxxxx@target.test"", sanitizedUri);
  }

}

{code}
 ",,"drmaniac commented on pull request #2766: CAMEL-13191: Fix Regex Pattern to hide passwords in URI 
URL: https://github.com/apache/camel/pull/2766
 
 
   Created Ticket https://issues.apache.org/jira/browse/CAMEL-13191
   For this issue I have created this minor patch. 
   
   The pattern stops colon search after the first colon, so the sanitizeUri method will hide the complete password part. 
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Feb/19 14:27;githubbot;600","davsclaus commented on pull request #2766: CAMEL-13191: Fix Regex Pattern to hide passwords in URI 
URL: https://github.com/apache/camel/pull/2766
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Feb/19 04:44;githubbot;600","drmaniac commented on pull request #2771: CAMEL-13191: Fix Regex Pattern to hide passwords in URI
URL: https://github.com/apache/camel/pull/2771
 
 
   Backport from 3.x to 2.x
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Feb/19 12:15;githubbot;600","oscerd commented on pull request #2771: CAMEL-13191: Fix Regex Pattern to hide passwords in URI
URL: https://github.com/apache/camel/pull/2771
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Feb/19 14:58;githubbot;600","drmaniac commented on pull request #2774: CAMEL-13191: Fix Regex Pattern to hide passwords in URI
URL: https://github.com/apache/camel/pull/2774
 
 
   Backport from 3.x to 2.22.x
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Feb/19 15:30;githubbot;600","drmaniac commented on pull request #2775: CAMEL-13191: Fix Regex Pattern to hide passwords in URI
URL: https://github.com/apache/camel/pull/2775
 
 
   Backport from 3.x to 2.23.x
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Feb/19 15:31;githubbot;600","oscerd commented on pull request #2775: CAMEL-13191: Fix Regex Pattern to hide passwords in URI
URL: https://github.com/apache/camel/pull/2775
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/19 06:24;githubbot;600","oscerd commented on pull request #2774: CAMEL-13191: Fix Regex Pattern to hide passwords in URI
URL: https://github.com/apache/camel/pull/2774
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/19 06:46;githubbot;600",,0,4800,,,0,4800,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 13 14:27:43 UTC 2019,,,,,,,0|yi0xr4:,9223372036854775807,,,,,,,,,,"13/Feb/19 12:29;Pieczewski;Worst case scenario is if the colon is at the end of the password, than it will only append the ''xxxxxx"" -> clear password will be logged. 

 

e.g.

uri: sftp://user:hidden:Password:@target.test

password: ""hidden:Password:""

log -> sftp://user:hidden:Password:xxxxxx@target.test","13/Feb/19 12:44;Pieczewski;To resolve this issue I would suggest following pattern change in URISupport class.

 
{code:java}
private static final Pattern USERINFO_PASSWORD = Pattern.compile(""(.*://.*?:)(.*)(@)"");
{code}
 ","13/Feb/19 14:27;Pieczewski;Create PullRequest for this change 

https://github.com/apache/camel/pull/2766",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Path resolution in rest-swagger fails to include the whole path,CAMEL-13192,13215502,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,13/Feb/19 13:05,13/Feb/19 14:22,13/Mar/19 22:20,13/Feb/19 14:22,2.21.0,2.21.1,2.21.2,2.21.3,2.21.4,2.22.0,2.22.1,2.22.2,2.22.3,2.23.0,2.23.1,,,,,2.22.4,2.23.2,3.0.0,,,,,,,,,0,,,,"When trying to resolve paths from a given OpenAPI 2.0 document the trailing part of the path after the last path parameter placeholder is lost.

For example path with:
{code:java}
/path/{param}/will/be/lost{code}
Is resolved as:
{code:java}
/path/{param}{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-02-13 13:05:17.0,,,,,,,0|yi0xxc:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxfrs - SimpleBinding ignores annotations on interface,CAMEL-13037,13207978,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,jensgr@gmx.net,jensgr@gmx.net,07/Jan/19 09:07,13/Feb/19 08:19,13/Mar/19 22:20,13/Feb/19 08:19,2.23.0,,,,,,,,,,,,,,,2.22.4,2.23.2,2.24.0,3.0.0,,camel-cxfrs,,,,,,0,,,,"When using a service resource that implements an interface, and the interface carries the JAX-RS annotations (a common setup, e.g. when auto-generating code with Swagger) the SimpleBinding ignores those annotations and does not set up the proper Camel message headers.",,"onderson commented on pull request #2765: CAMEL-13037 - SimpleBinding ignores annotations on interface, Thanks …
URL: https://github.com/apache/camel/pull/2765
 
 
   …Jens Kleine-Herzbruch
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Feb/19 21:43;githubbot;600","onderson commented on pull request #2765: CAMEL-13037 - SimpleBinding ignores annotations on interface, Thanks …
URL: https://github.com/apache/camel/pull/2765
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Feb/19 06:50;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,07/Jan/19 09:07;jensgr@gmx.net;0001-use-the-same-procedure-CXF-uses-for-discovering-JAX-.patch;https://issues.apache.org/jira/secure/attachment/12953964/0001-use-the-same-procedure-CXF-uses-for-discovering-JAX-.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2019-02-07 10:10:27.234,,,no_permission,,Unknown,,,,Patch,,,,,,,,,9223372036854775807,,,Wed Feb 13 08:19:45 UTC 2019,,,Patch Available,,,,0|u00kjk:,9223372036854775807,,,,,,,,,,07/Feb/19 09:51;jensgr@gmx.net;Is this supposed to be committed already?,07/Feb/19 10:10;ancosen;thanks for the patch. This will be committed soon.,"12/Feb/19 15:29;onders;[~ancosen], do you need a hand for this?","12/Feb/19 15:31;ancosen;[~onders], yes, that would be great, can you take care of it? :)",12/Feb/19 15:37;onders;yes sure.,13/Feb/19 08:19;onders;merged on master and backported to relevant branches. thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel-MongoDB: Endpoint shutdown closes mongo connection, killing the connection for everyone",CAMEL-13125,13211827,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,25/Jan/19 12:58,13/Feb/19 04:59,13/Mar/19 22:20,13/Feb/19 04:59,2.23.1,,,,,,,,,,,,,,,2.22.3,2.23.2,2.24.0,3.0.0,,camel-mongodb,,,,,,0,,,,"We have the same situation of CAMEL-13123 on camel-mongodb, even though it has been deprecated",,"bwesterfield commented on pull request #2757: Camel 2.x : CAMEL-13125
URL: https://github.com/apache/camel/pull/2757
 
 
   CAMEL-13125 : Endpoint shutdown closes mongo connection, killing the connection for everyone.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/19 18:37;githubbot;600","bwesterfield commented on pull request #2758: Camel 2.23.x : CAMEL-13125
URL: https://github.com/apache/camel/pull/2758
 
 
   CAMEL-13125 : Endpoint shutdown closes mongo connection, killing the connection for everyone.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/19 18:39;githubbot;600","oscerd commented on pull request #2758: Camel 2.23.x : CAMEL-13125
URL: https://github.com/apache/camel/pull/2758
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/19 18:40;githubbot;600","oscerd commented on pull request #2757: Camel 2.x : CAMEL-13125
URL: https://github.com/apache/camel/pull/2757
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/19 18:41;githubbot;600","bwesterfield commented on pull request #2763: CAMEL-13125 : Removal of stop method from MongoDbEndpoint
URL: https://github.com/apache/camel/pull/2763
 
 
   CAMEL-13125 : Removal of stop method from MongoDbEndpoint
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Feb/19 14:44;githubbot;600","davsclaus commented on pull request #2763: CAMEL-13125 : Removal of stop method from MongoDbEndpoint
URL: https://github.com/apache/camel/pull/2763
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Feb/19 04:56;githubbot;600",,,,0,3600,,,0,3600,,,,CAMEL-13123,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-11 18:33:27.448,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 12 15:02:08 UTC 2019,,,,,,,0|yi0bc0:,9223372036854775807,,,,,,,,,,"11/Feb/19 18:33;bwesterfield;I will take a peek at this one.

 ",11/Feb/19 18:37;ancosen;Thanks. ,11/Feb/19 18:38;ancosen;In case there is already an assignee always add a comment like you did,11/Feb/19 18:40;bwesterfield;Sure thing!  ,11/Feb/19 19:07;bwesterfield;Apologies [~ancosen] I didn't notice that you were the assignee.  ,11/Feb/19 19:09;ancosen;No problem! Contributions are welcome always!,12/Feb/19 07:57;ancosen;[~bwesterfield] can you please do the same for 2.22.x? Thanks,"12/Feb/19 14:45;bwesterfield;[~ancosen] : Done - > [https://github.com/apache/camel/pull/2763]

Thank you!","12/Feb/19 14:51;bwesterfield;[~ancosen] : I've also got a branch completed for camel-2.21.x if needed.  Let me know if you want that one PR'd as well.  

Thanks!","12/Feb/19 14:52;ancosen;[~bwesterfield], thanks but 2.21.x is EOL and the last release for that branch has been already released",12/Feb/19 15:02;bwesterfield;[~ancosen] : Sounds good.  Please let me know if there is anything else needed.  ,,,,,,,,,,,,,,,,,,,,,,
camel-linkedin - IllegalArgumentException: Error authorizing application during linkedin authentication,CAMEL-13179,13215004,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,jondruse,jondruse,11/Feb/19 13:59,12/Feb/19 14:35,13/Mar/19 22:20,12/Feb/19 14:35,2.23.1,,,,,,,,,,,,,,,2.23.2,2.24.0,3.0.0,,,camel-linkedin,,,,,,0,,,,"There is a problem during authentication to linkedin. Which ends with following exception:

{noformat}

java.lang.IllegalArgumentException: Error authorizing application: Error authorizing application:

at org.apache.camel.component.linkedin.api.LinkedInOAuthRequestFilter.getRefreshToken(LinkedInOAuthRequestFilter.java:235)
 at org.apache.camel.component.linkedin.api.LinkedInOAuthRequestFilter.updateOAuthToken(LinkedInOAuthRequestFilter.java:307)
 at org.apache.camel.component.linkedin.api.LinkedInOAuthRequestFilter.<init>(LinkedInOAuthRequestFilter.java:123)
 at org.apache.camel.component.linkedin.api.AbstractResourceIntegrationTest.createOAuthHelper(AbstractResourceIntegrationTest.java:102)
 at org.apache.camel.component.linkedin.api.AbstractResourceIntegrationTest.beforeClass(AbstractResourceIntegrationTest.java:62)
 at org.apache.camel.component.linkedin.api.SearchResourceIntegrationTest.beforeClass(SearchResourceIntegrationTest.java:31)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
 at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
 at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
 at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
 at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
 at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
 at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
 at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
 at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
Caused by: java.lang.IllegalArgumentException: Error authorizing application: 
 at org.apache.camel.component.linkedin.api.LinkedInOAuthRequestFilter.getRefreshToken(LinkedInOAuthRequestFilter.java:189)

{noformat}

How to simulate:
1. add your credentials to src/test/resources/test-options.properties
2. run [camel-linkedin-api]$ mvn clean install -P linkedin-test -Dtest=SearchResourceIntegrationTest",,"JiriOndrusek commented on pull request #2761: [CAMEL-13179] camel-linkedin - IllegalArgumentException
URL: https://github.com/apache/camel/pull/2761
 
 
   Issue: https://issues.apache.org/jira/browse/CAMEL-13179
   
   Changes in linkedin authentication has to be reflected in camel component
   (see https://developer.linkedin.com/docs/oauth2)
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Feb/19 10:03;githubbot;600","oscerd commented on pull request #2761: [CAMEL-13179] camel-linkedin - IllegalArgumentException
URL: https://github.com/apache/camel/pull/2761
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Feb/19 14:35;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 12 10:04:01 UTC 2019,,,,,,,0|yi0uuw:,9223372036854775807,,,,,,,,,,12/Feb/19 10:04;jondruse;PR: https://github.com/apache/camel/pull/2761,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel yammer component is accessing non-existent page,CAMEL-13176,13214646,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rnetuka,rnetuka,08/Feb/19 15:19,11/Feb/19 06:04,13/Mar/19 22:20,11/Feb/19 06:04,,,,,,,,,,,,,,,,2.24.0,3.0.0,,,,,,,,,,0,,,,When using camel-yammer component to receive relationships the component is (most likely) trying to access [non-existent page|https://www.yammer.com/api/v1/] and results in returning null.,,"rnetuka commented on pull request #2754: [CAMEL-13176] camel yammer component is accessing non-existent page
URL: https://github.com/apache/camel/pull/2754
 
 
   Issue: https://issues.apache.org/jira/browse/CAMEL-13176
   
   Relationships seem to be removed from Yammer.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/19 15:42;githubbot;600","davsclaus commented on pull request #2754: [CAMEL-13176] camel yammer component is accessing non-existent page
URL: https://github.com/apache/camel/pull/2754
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/19 05:58;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,08/Feb/19 15:18;rnetuka;reproducer.zip;https://issues.apache.org/jira/secure/attachment/12958072/reproducer.zip,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 08 15:43:34 UTC 2019,,,,,,,0|yi0snk:,9223372036854775807,,,,,,,,,,"08/Feb/19 15:20;rnetuka;Yammer API docs seems to be outdated. [https://www.yammer.com/api/v1/relationships.json] is not working anymore. I'm not familiar with Yammer, but according to [https://developer.yammer.com/docs/relationshipsjson] it ""Shows org chart relationships.""

However, org charts are deprecated from May 2018. There doesn't seem to be any replacement for that.
[https://answers.microsoft.com/en-us/msoffice/forum/all/organization-chart-in-yammer/6cd9cb5c-b7f0-456c-a75e-8b845c05f46f]",08/Feb/19 15:43;rnetuka;PR: https://github.com/apache/camel/pull/2754,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-JBPM KIE-Server extension should use KJAR project classloaded in deployment-scoped CamelContext,CAMEL-13152,13213318,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,swiderski.maciej,mccloud,mccloud,01/Feb/19 14:05,06/Feb/19 10:54,13/Mar/19 22:20,06/Feb/19 10:54,2.23.1,,,,,,,,,,,,,,,2.23.2,2.24.0,3.0.0,,,camel-jbpm,,,,,,0,,,,"When a camel-route configured in a KJAR deployment reference a class in the KJAR (for example in an <unmarshal> element), you get a ClassNotFoundException. The problem is that the CamelContext is unable to find the custom class defined in the KJAR.

We should set the Application CamelContext classloader to the KJAR classloader for deployment-scoped (KJAR scoped) CamelContext.",,"DuncanDoyle commented on pull request #2742: CAMEL-13152: KJAR classloaded now set as CamelContext classloader for…
URL: https://github.com/apache/camel/pull/2742
 
 
   … deployment-scoped contexts.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Feb/19 14:18;githubbot;600","oscerd commented on pull request #2742: CAMEL-13152: KJAR classloaded now set as CamelContext classloader for…
URL: https://github.com/apache/camel/pull/2742
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Feb/19 10:53;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-02-01 14:05:49.0,,,,,,,0|yi0khc:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rest DSL generates invalid swagger operation Id,CAMEL-12943,13199302,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,tdiesler,tdiesler,19/Nov/18 11:42,05/Feb/19 16:56,13/Mar/19 22:20,22/Nov/18 07:40,,,,,,,,,,,,,,,,2.23.0,,,,,camel-swagger,,,,,,0,,,,"With this code

 
{code:java}
        rest(""/customers"").description(""Customers REST service"")
            .get(""/\{id}"")
                .bindingMode(RestBindingMode.auto)
                .id(""getCustomerById"")
                .description(""Retrieves a customer for the specified id"")
                .outType(Customer.class)
                .route()
                    .process(exchange -> {
                        Customer customer = new Customer();
                        customer.setId(exchange.getIn().getHeader(""id"", Integer.class));
                        customer.setFirstName(""Kermit"");
                        customer.setLastName(""The Frog"");
                        exchange.getOut().setBody(customer);
                    })
                .endRest();

{code}
 

we see a swagger definition generated like this

 
{code:java}
 ""paths"" : {
    ""/customers/\{id}"" : {
      ""get"" : {
        ""tags"" : [ ""customers"" ],
        ""summary"" : ""Retrieves a customer for the specified id"",
        ""operationId"" : ""route2"",
        ""parameters"" : [ {
          ""name"" : ""id"",
          ""in"" : ""path"",
          ""required"" : true,
          ""type"" : ""string""
        } ],
        ""responses"" : {
          ""200"" : {
            ""description"" : ""Output type"",
            ""schema"" : {
              ""$ref"" : ""#/definitions/Customer"",
              ""originalRef"" : ""Customer""
            },
            ""responseSchema"" : {
              ""$ref"" : ""#/definitions/Customer"",
              ""originalRef"" : ""Customer""
            }
          }
        }
      }
    }
  },

{code}
 

The operationId seems to be incorrect.

 

In our testsuite, which checks the latest Camel HEAD every Monday, we see ...

 
{code:java}
Caused by: java.lang.IllegalArgumentException: The specified operation with ID: `getCustomerById` cannot be found in the Swagger specification loaded from `http://localhost:8080/api/swagger`. Operations defined in the specification are: route2
    at org.apache.camel.component.rest.swagger.RestSwaggerEndpoint.createProducer(RestSwaggerEndpoint.java:198)
    at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:573)
    ... 190 more

{code}",,,,,,,,,,,,,,,,,,,,,,,CAMEL-13162,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-19 11:55:50.837,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 22 07:44:01 UTC 2018,,,,,,,0|s00nco:,9223372036854775807,,,,,,,,,,"19/Nov/18 11:55;dmvolod;[~tdiesler], oh, I will look at this. Is it possible to run this test locally?","19/Nov/18 12:49;tdiesler;Yes of course.With branch [https://github.com/wildfly-extras/wildfly-camel/blob/camel-2.23.x] do something like ...

 
{code:java}
mvn clean install -Dts.all -DskipTests

mvn install -pl itests/standalone/basic -Dtest=SwaggerIntegrationTest

{code}
 

It should work with master, which uses camel-2.22.2","19/Nov/18 16:29;githubbot;dmvolod opened a new pull request #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623
 
 
   @tdiesler , could you please to look at the PR, but RestSwaggerReaderEnableVendorExtensionTest which was failing also seem to be this issue test.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/18 08:43;githubbot;tdiesler commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440189881
 
 
   This patch seems to fix the contentID issue, but is still not working for nested context paths
   
   ```
   09:28:45,428 ERROR [org.jboss.msc.service.fail] (MSC service thread 1-2) MSC000001: Failed to start service jboss.deployment.unit.""UndertowSecureRestDslSpringIntegrationTest3.war"".CamelContextActivationService.""UndertowSecureRestDslSpringIntegrationTest3.war"": org.jboss.msc.service.StartException in service jboss.deployment.unit.""UndertowSecureRestDslSpringIntegrationTest3.war"".CamelContextActivationService.""UndertowSecureRestDslSpringIntegrationTest3.war"": Cannot create camel context: UndertowSecureRestDslSpringIntegrationTest3.war
   	at org.wildfly.extension.camel.service.CamelContextActivationService.start(CamelContextActivationService.java:71)
   	at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1736)
   	at org.jboss.msc.service.ServiceControllerImpl$StartTask.execute(ServiceControllerImpl.java:1698)
   	at org.jboss.msc.service.ServiceControllerImpl$ControllerTask.run(ServiceControllerImpl.java:1556)
   	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
   	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1985)
   	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1487)
   	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1378)
   	at java.lang.Thread.run(Thread.java:748)
   Caused by: org.jboss.msc.service.StartException in anonymous service: Cannot start camel context: secure-rest-context2
   	at org.wildfly.extension.camel.service.CamelContextActivationService.start(CamelContextActivationService.java:67)
   	... 8 more
   Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: Cannot add io.undertow.server.HttpHandler for path /test defined in deployment.UndertowSecureRestDslSpringIntegrationTest3.war because that path is already served by deployment.UndertowSecureRestDslSpringIntegrationTest1.war
   	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1826)
   	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:136)
   	at org.wildfly.extension.camel.service.CamelContextActivationService$1.run(CamelContextActivationService.java:63)
   	at org.wildfly.extension.camel.proxy.ProxyUtils$1.invoke(ProxyUtils.java:51)
   	at com.sun.proxy.$Proxy88.run(Unknown Source)
   	at org.wildfly.extension.camel.proxy.ProxyUtils.invokeProxied(ProxyUtils.java:55)
   	at org.wildfly.extension.camel.service.CamelContextActivationService.start(CamelContextActivationService.java:60)
   	... 8 more
   Caused by: java.lang.IllegalStateException: Cannot add io.undertow.server.HttpHandler for path /test defined in deployment.UndertowSecureRestDslSpringIntegrationTest3.war because that path is already served by deployment.UndertowSecureRestDslSpringIntegrationTest1.war
   	at org.wildfly.extension.camel.undertow.CamelUndertowHostService$WildFlyUndertowHost.validateEndpointContextPath(CamelUndertowHostService.java:211)
   	at org.wildfly.extension.camel.undertow.CamelUndertowHostService$WildFlyUndertowHost.validateEndpointURI(CamelUndertowHostService.java:170)
   	at org.apache.camel.component.undertow.UndertowComponent.registerEndpoint(UndertowComponent.java:336)
   	at org.apache.camel.component.undertow.UndertowConsumer.doStart(UndertowConsumer.java:77)
   	at org.wildfly.extension.camel.undertow.WildFlyUndertowComponent$WildFlyUndertowUndertowConsumer.doStart(WildFlyUndertowComponent.java:86)
   	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
   	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3709)
   	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:4027)
   	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3962)
   	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3882)
   	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3646)
   	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3489)
   	at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3248)
   	at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3244)
   	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3267)
   	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3244)
   	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
   	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3160)
   	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133)
   	... 13 more
   ```
   
   You can reproduce this with branch 
   https://github.com/wildfly-extras/wildfly-camel/tree/camel-2.23.x
   
   ```
   mvn clean install -Dts.all -DskipTests
   mvn install -Dts.all -pl itests/standalone/basic -Dtest=UndertowSecureRestDslSpringIntegrationTest
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/18 08:59;githubbot;oscerd commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440194479
 
 
   This is the last issue for 2.23.0, I hope we can fix it before next weekend :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/18 09:05;githubbot;dmvolod commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440196370
 
 
   Yes, @oscerd ,sure. I'm trying to fix it, but build of the wildfly-camel fails for me with ""Could not resolve dependencies for project org.wildfly.camel:wildfly-camel-feature-modules:pom:8.1.0-SNAPSHOT: Could not find artifact org.kie.remote:kie-remote-client:jar:7.14.0.Final""  seems to be big re-factoring in camel-jbpm

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/18 09:17;githubbot;oscerd commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440199906
 
 
   It's not released from a while. We changed a bunch of stuff in camel-jbpm in 2.23.0. @mswiderski do you have any idea about the kie-remote-client dependecies in wildfly-camel?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/18 09:19;githubbot;mswiderski commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440200729
 
 
   kie-remote-client has been removed in v7 of jBPM. Please let me know where is wildfly-camel so I can have a look and provide fix for it

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/18 09:20;githubbot;mswiderski commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440200882
 
 
   never mind just found it in the previous comments

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/18 09:24;githubbot;dmvolod commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440202106
 
 
   @mswiderski , trying to rebuild components from scratch, may be issue will go away

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/18 09:26;githubbot;mswiderski commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440202885
 
 
   @dmvolod ok, let me know how it goes. kie-remote-client should not be referenced any more once you get the enhanced camel-jbpm from 2.23.0

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/18 09:26;githubbot;tdiesler commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440202967
 
 
   You can meet me on #apache-camel or #wildfly-camel

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/18 13:33;githubbot;dmvolod commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440274714
 
 
   @mswiderski , @oscerd thanks, full rebuild fixed build issue
   @tdiesler I reverted all CAMEL-12908 related commits and test it again. The error stack was the same, as files secure-rest1-camel-context.xml and secure-rest3-camel-context.xml contains the separate verbs with same uri=""/test"". I think this need to be fixed in wildfly-camel.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","21/Nov/18 12:58;githubbot;oscerd commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440653729
 
 
   What's the status of this PR in the end?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","21/Nov/18 14:12;githubbot;oscerd commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440674993
 
 
   @dmvolod once you're available, feel free to merge this PR. Thanks

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","21/Nov/18 16:45;githubbot;dmvolod commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440734094
 
 
   @oscerd, yes I will merge it tomorrow.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Nov/18 07:44;githubbot;dmvolod commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440940493
 
 
   @ppalaga , thanks, PR merged.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Nov/18 07:44;githubbot;dmvolod closed pull request #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java b/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java
index b0059553bae..83e79f34748 100644
--- a/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java
+++ b/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java
@@ -142,6 +142,19 @@ public void run() {
                     });
                 }
                 customIds.add(id);
+            } else {
+                RestDefinition rest = route.getRestDefinition();
+                if (rest != null && route.isRest()) {
+                    VerbDefinition verb = findVerbDefinition(rest, route.getInputs().get(0).getUri());
+                    if (verb != null) {
+                        String id = verb.getId();
+                        if (verb.hasCustomIdAssigned() && ObjectHelper.isNotEmpty(id) && !customIds.contains(id)) {
+                            route.setId(id);
+                            customIds.add(id);
+                            break;
+                        }
+                    }
+                }
             }
         }
 
@@ -169,7 +182,8 @@ public void run() {
             }
             RestDefinition rest = route.getRestDefinition();
             if (rest != null && route.isRest()) {
-                for (VerbDefinition verb : rest.getVerbs()) {
+                VerbDefinition verb = findVerbDefinition(rest, route.getInputs().get(0).getUri());
+                if (verb != null) {
                     String id = verb.idOrCreate(context.getNodeIdFactory());
                     if (!verb.getUsedForGeneratingNodeId()) {
                         id = route.getId();
@@ -195,6 +209,19 @@ public void run() {
             }
         }
     }
+    
+    /**
+     * Find verb associated with the route by mapping uri
+     */
+    private static VerbDefinition findVerbDefinition(RestDefinition rest, String endpointUri) {
+        for (VerbDefinition verb : rest.getVerbs()) {
+            String verbUri = rest.buildFromUri(verb);
+            if (endpointUri.startsWith(verbUri)) {
+                return verb;
+            }
+        }
+        return null;
+    }
 
     /**
      * Validates that the target route has no duplicate id's from any of the existing routes.
diff --git a/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java b/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java
index 5fcce056d7b..3e09b9a1406 100644
--- a/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java
+++ b/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java
@@ -658,6 +658,13 @@ public RouteDefinition route() {
         verb.setRoute(route);
         return route;
     }
+    
+    /**
+     * Build the from endpoint uri for the verb
+     */
+    public String buildFromUri(VerbDefinition verb) {
+        return ""rest:"" + verb.asVerb() + "":"" + buildUri(verb);
+    }
 
     // Implementation
     //-------------------------------------------------------------------------
@@ -799,6 +806,7 @@ public static RouteDefinition asRouteApiDefinition(CamelContext camelContext, Re
         return answer;
     }
 
+    @SuppressWarnings(""rawtypes"")
     private void addRouteDefinition(CamelContext camelContext, List<RouteDefinition> answer, String component) {
         for (VerbDefinition verb : getVerbs()) {
             // either the verb has a singular to or a embedded route
@@ -877,7 +885,7 @@ private void addRouteDefinition(CamelContext camelContext, List<RouteDefinition>
             route.setRestBindingDefinition(binding);
 
             // create the from endpoint uri which is using the rest component
-            String from = ""rest:"" + verb.asVerb() + "":"" + buildUri(verb);
+            String from = buildFromUri(verb);
 
             // append options
             Map<String, Object> options = new HashMap<>();
diff --git a/camel-core/src/test/java/org/apache/camel/impl/RouteIdRestDefinitionTest.java b/camel-core/src/test/java/org/apache/camel/impl/RouteIdRestDefinitionTest.java
new file mode 100644
index 00000000000..30b132765d9
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/impl/RouteIdRestDefinitionTest.java
@@ -0,0 +1,52 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.impl;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.rest.DummyRestConsumerFactory;
+import org.apache.camel.component.rest.DummyRestProcessorFactory;
+import org.junit.Test;
+
+public class RouteIdRestDefinitionTest extends ContextTestSupport {
+
+    @Override
+    protected JndiRegistry createRegistry() throws Exception {
+        JndiRegistry jndi = super.createRegistry();
+        jndi.bind(""dummy-rest"", new DummyRestConsumerFactory());
+        jndi.bind(""dummy-rest-api"", new DummyRestProcessorFactory());
+        return jndi;
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""direct:start1?timeout=30000"").to(""mock:result"");
+                from(""direct:start2"").to(""mock:result"");
+                rest(""/say/hello"").get(""/bar"").id(""getSayHelloBar"").to(""mock:result"");
+            }
+        };
+    }
+
+    @Test
+    public void testSayHelloBar() {
+        assertEquals(""getSayHelloBar"", context.getRouteDefinitions().get(2).getId());
+    }
+    
+}
\ No newline at end of file
diff --git a/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerReaderEnableVendorExtensionTest.java b/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerReaderEnableVendorExtensionTest.java
index ac838059e34..a7b2d45e6e3 100644
--- a/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerReaderEnableVendorExtensionTest.java
+++ b/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerReaderEnableVendorExtensionTest.java
@@ -58,7 +58,7 @@ public void configure() throws Exception {
                         .param().name(""body"").type(RestParamType.body).description(""The user to update or create"").endParam()
                         .to(""bean:userService?method=updateUser"")
 
-                    .get(""/findAll"").description(""Find all users"").outTypeList(User.class)
+                    .get(""/findAll"").description(""Find all users"").outType(User[].class)
                         .responseMessage().message(""All the found users"").endResponseMessage()
                         .to(""bean:userService?method=listUsers"");
             }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,
Cannot start route using rest dsl due to a mysterious duplicate route id,CAMEL-12908,13195345,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,apupier,apupier,31/Oct/18 10:47,05/Feb/19 16:56,13/Mar/19 22:20,22/Nov/18 07:41,2.21.0,,,,,,,,,,,,,,,2.23.0,,,,,rest,,,,,,0,,,,"issue came from investigation on https://github.com/jboss-fuse/fuse-apicurito-generator/issues/12

the Camel files contains a single route id _route2_ but there is an error while trying to start the application mentioning a duplicate id _route2_

{noformat}
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToStartRouteException: Failed to start route route2 because of duplicate id detected: route2. Please correct ids to be unique among all your routes.
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1830) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:136) ~[camel-spring-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.spring.CamelContextFactoryBean.start(CamelContextFactoryBean.java:369) ~[camel-spring-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:416) ~[camel-spring-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:94) ~[camel-spring-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:399) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) ~[spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.createChildManagementContext(EndpointWebMvcAutoConfiguration.java:193) ~[spring-boot-actuator-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.afterSingletonsInstantiated(EndpointWebMvcAutoConfiguration.java:156) ~[spring-boot-actuator-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:781) ~[spring-beans-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at io.example.openapi.Application.main(Application.java:31) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:527) [spring-boot-maven-plugin-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.apache.camel.FailedToStartRouteException: Failed to start route route2 because of duplicate id detected: route2. Please correct ids to be unique among all your routes.
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1132) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3729) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3443) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:209) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3251) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3247) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3270) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3247) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3163) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) ~[camel-spring-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	... 31 common frames omitted
{noformat}",,,,,,,,,,,,,,,,,,,,,,,CAMEL-13162,CAMEL-12943,,,,,,31/Oct/18 10:46;apupier;example-fixedVersionsAndRepositories.zip;https://issues.apache.org/jira/secure/attachment/12946362/example-fixedVersionsAndRepositories.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2018-11-01 17:22:31.526,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 19 11:46:46 UTC 2018,,,,,,,0|i3zu93:,9223372036854775807,,,,,,,,,,"01/Nov/18 17:22;dmvolod;[~apupier], yes looks like a bug. I've reproduced this issue with upstream code just changing <route> to <route id=""route1""> in the components/camel-spring/src/test/resources/org/apache/camel/component/rest/RestRefTest.xml

Will look at route id generator for rest DSL tomorrow. Thanks for reporting.","02/Nov/18 15:35;dmvolod;To implement end-to-end through route id generation with rest and other routes it's necessary to move some code from RestDefinition to the RouteDefinitionHelper. [~davsclaus], what do you think about this? Or use RouteIdFactory as alternative workaround is good enough?","05/Nov/18 08:51;davsclaus;Ah okay, yeah we can move the code if you think its a good solution.

Maybe you can do a PR so we can take a look at the proposed code change?","13/Nov/18 13:46;githubbot;dmvolod opened a new pull request #2612: CAMEL-12908: Cannot start route using rest dsl due to a mysterious  duplicate route id
URL: https://github.com/apache/camel/pull/2612
 
 
   @davsclaus could you please to look at PR

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Nov/18 09:07;githubbot;dmvolod commented on issue #2612: CAMEL-12908: Cannot start route using rest dsl due to a mysterious  duplicate route id
URL: https://github.com/apache/camel/pull/2612#issuecomment-439328269
 
 
   Thanks @onderson and @oscerd 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Nov/18 09:07;githubbot;dmvolod closed pull request #2612: CAMEL-12908: Cannot start route using rest dsl due to a mysterious  duplicate route id
URL: https://github.com/apache/camel/pull/2612
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java b/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java
index 041bdc212dc..b0059553bae 100644
--- a/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java
+++ b/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java
@@ -19,14 +19,18 @@
 import java.io.UnsupportedEncodingException;
 import java.net.URISyntaxException;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 import org.apache.camel.CamelContext;
 import org.apache.camel.builder.ErrorHandlerBuilder;
+import org.apache.camel.model.rest.RestDefinition;
+import org.apache.camel.model.rest.VerbDefinition;
 import org.apache.camel.util.CamelContextHelper;
 import org.apache.camel.util.EndpointHelper;
 import org.apache.camel.util.ObjectHelper;
@@ -145,10 +149,11 @@ public void run() {
         for (final RouteDefinition route : routes) {
             if (route.getId() == null) {
                 // keep assigning id's until we find a free name
+                
                 boolean done = false;
                 String id = null;
                 while (!done) {
-                    id = context.getNodeIdFactory().createId(route);
+                    id = route.idOrCreate(context.getNodeIdFactory());
                     done = !customIds.contains(id);
                 }
                 route.setId(id);
@@ -162,6 +167,32 @@ public void run() {
                 route.setCustomId(false);
                 customIds.add(route.getId());
             }
+            RestDefinition rest = route.getRestDefinition();
+            if (rest != null && route.isRest()) {
+                for (VerbDefinition verb : rest.getVerbs()) {
+                    String id = verb.idOrCreate(context.getNodeIdFactory());
+                    if (!verb.getUsedForGeneratingNodeId()) {
+                        id = route.getId();
+                    }
+                    verb.setRouteId(id);
+                }
+                List<FromDefinition> fromDefinitions = route.getInputs();
+                
+                if (ObjectHelper.isNotEmpty(fromDefinitions)) {
+                    FromDefinition fromDefinition = fromDefinitions.get(0);
+                    String endpointUri = fromDefinition.getEndpointUri();
+                    if (ObjectHelper.isNotEmpty(endpointUri)) {
+                        Map<String, Object> options = new HashMap<String, Object>();
+                        options.put(""routeId"", route.getId());
+                        endpointUri = URISupport.appendParametersToURI(endpointUri, options);
+                     
+                        // replace uri with new routeId
+                        fromDefinition.setUri(endpointUri);
+                        fromDefinitions.set(0, fromDefinition);
+                        route.setInputs(fromDefinitions);
+                    }
+                }
+            }
         }
     }
 
diff --git a/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java b/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java
index 946fb76c16e..5fcce056d7b 100644
--- a/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java
+++ b/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java
@@ -902,23 +902,7 @@ private void addRouteDefinition(CamelContext camelContext, List<RouteDefinition>
             if (outType != null) {
                 options.put(""outType"", outType);
             }
-            // if no route id has been set, then use the verb id as route id
-            if (!route.hasCustomIdAssigned()) {
-                // use id of verb as route id
-                String id = verb.getId();
-                if (id != null) {
-                    route.setId(id);
-                }
-            }
-
-            String routeId = verb.idOrCreate(camelContext.getNodeIdFactory());
-
-            if (!verb.getUsedForGeneratingNodeId()) {
-                routeId = route.idOrCreate(camelContext.getNodeIdFactory());
-            }
 
-            verb.setRouteId(routeId);
-            options.put(""routeId"", routeId);
             if (component != null && !component.isEmpty()) {
                 options.put(""componentName"", component);
             }
@@ -1012,7 +996,6 @@ private void addRouteDefinition(CamelContext camelContext, List<RouteDefinition>
 
             // the route should be from this rest endpoint
             route.fromRest(from);
-            route.routeId(routeId);
             route.setRestDefinition(this);
             answer.add(route);
         }
diff --git a/camel-core/src/main/java/org/apache/camel/model/rest/VerbDefinition.java b/camel-core/src/main/java/org/apache/camel/model/rest/VerbDefinition.java
index bf56005782e..acbe38a6b4b 100644
--- a/camel-core/src/main/java/org/apache/camel/model/rest/VerbDefinition.java
+++ b/camel-core/src/main/java/org/apache/camel/model/rest/VerbDefinition.java
@@ -141,7 +141,7 @@ public void setParams(List<RestOperationParamDefinition> params) {
     /**
      * Sets swagger operation response messages.
      */
-    public void setResponseMsgs(List<RestOperationResponseMsgDefinition> params) {
+    public void setResponseMsgs(List<RestOperationResponseMsgDefinition> responseMsgs) {
         this.responseMsgs = responseMsgs;
     }
 
diff --git a/components/camel-spring/src/test/resources/org/apache/camel/component/rest/RestRefTest.xml b/components/camel-spring/src/test/resources/org/apache/camel/component/rest/RestRefTest.xml
index c53d943f7d2..246c2a90799 100644
--- a/components/camel-spring/src/test/resources/org/apache/camel/component/rest/RestRefTest.xml
+++ b/components/camel-spring/src/test/resources/org/apache/camel/component/rest/RestRefTest.xml
@@ -54,7 +54,7 @@
         <constant>Hello World</constant>
       </transform>
     </route>
-    <route>
+    <route id=""route1"">
       <from uri=""direct:bye""/>
       <transform>
         <constant>Bye World</constant>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",16/Nov/18 09:10;dmvolod;Thanks [~apupier] for reporting. Fixed.,"19/Nov/18 11:46;tdiesler;This change may cause the operationId in swagger to be initialized incorrectly with the routeId.

See: CAMEL-12943",,,,,,,,,,,,,,,,,,,,,,,,,
javax.servlet.http.MappingMatch not found when starting camel-example-spring-boot,CAMEL-13084,13210543,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ppalaga,ppalaga,19/Jan/19 16:14,01/Feb/19 06:27,13/Mar/19 22:20,21/Jan/19 09:26,2.23.0,2.23.1,3.0.0,,,,,,,,,,,,,2.23.2,2.24.0,3.0.0,,,examples,,,,,,0,,,,"Steps to reproduce:
{code}
git checkout -b camel-2.x upstream/camel-2.x
git show --summary
# commit fb5278ea2860e05b833f8e32d4ec6c2dfcc73c94 (HEAD -> camel-2.x, upstream/camel-2.x)
# Author: Claus Ibsen <claus.ibsen@gmail.com>
# Date:   Sat Jan 19 09:57:17 2019 +0100
# 
#     Add missing docs for EIPs
# 
cd examples/camel-example-spring-boot
mvn clean package

java -jar target/camel-example-spring-boot-*.jar 
# Expected: no error
# Actual:
# [...]
# Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-01-19 17:09:16.253 ERROR 21732 --- [           main] o.s.boot.SpringApplication               : Application run failed

org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is java.lang.NoClassDefFoundError: javax/servlet/http/MappingMatch
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:157) ~[spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:540) ~[spring-context-5.1.4.RELEASE.jar!/:5.1.4.RELEASE]
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) [spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) [spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) [spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) [spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at sample.camel.MyCamelApplication.main(MyCamelApplication.java:33) [classes!/:2.24.0-SNAPSHOT]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_191]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_191]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191]
        at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [camel-example-spring-boot-2.24.0-SNAPSHOT.jar:2.24.0-SNAPSHOT]
        at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [camel-example-spring-boot-2.24.0-SNAPSHOT.jar:2.24.0-SNAPSHOT]
        at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [camel-example-spring-boot-2.24.0-SNAPSHOT.jar:2.24.0-SNAPSHOT]
        at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [camel-example-spring-boot-2.24.0-SNAPSHOT.jar:2.24.0-SNAPSHOT]
Caused by: java.lang.NoClassDefFoundError: javax/servlet/http/MappingMatch
        at io.undertow.servlet.handlers.ServletPathMatches.resolveServletForPath(ServletPathMatches.java:445) ~[undertow-servlet-2.0.16.Final.jar!/:2.0.16.Final]
        at io.undertow.servlet.handlers.ServletPathMatches.setupServletChains(ServletPathMatches.java:280) ~[undertow-servlet-2.0.16.Final.jar!/:2.0.16.Final]
        at io.undertow.servlet.handlers.ServletPathMatches.getData(ServletPathMatches.java:145) ~[undertow-servlet-2.0.16.Final.jar!/:2.0.16.Final]
        at io.undertow.servlet.handlers.ServletPathMatches.initData(ServletPathMatches.java:76) ~[undertow-servlet-2.0.16.Final.jar!/:2.0.16.Final]
        at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:256) ~[undertow-servlet-2.0.16.Final.jar!/:2.0.16.Final]
        at org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.createDeploymentManager(UndertowServletWebServerFactory.java:284) ~[spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.getWebServer(UndertowServletWebServerFactory.java:208) ~[spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:181) ~[spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:154) ~[spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        ... 16 common frames omitted
Caused by: java.lang.ClassNotFoundException: javax.servlet.http.MappingMatch
        at java.net.URLClassLoader.findClass(URLClassLoader.java:382) ~[na:1.8.0_191]
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_191]
        at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:93) ~[camel-example-spring-boot-2.24.0-SNAPSHOT.jar:2.24.0-SNAPSHOT]
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_191]
        ... 25 common frames omitted

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-21 08:42:14.108,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 01 06:27:31 UTC 2019,,,,,,,0|yi03f4:,9223372036854775807,,,,,,,,,,19/Jan/19 16:16;ppalaga;Reproducible with Camel 2.23.0 and 2.23.1. Works with 2.22.2,"21/Jan/19 08:42;davsclaus;Its the spring-boot-starter-undertow that seems to not work, it doesnt include the needed servlet apis","21/Jan/19 08:45;ancosen;I added explicitly the dependency for the moment, we have a similar situation for camel-example-rest-producer.","21/Jan/19 08:52;davsclaus;Ah okay it was a Camel BOM that pulls in servlet api 3, and spring boot requires api 4.

Adding the servlet-api 4 makes it work, its the same problem with all the undertow-starter examples

{code}
 git grep ""starter-undertow""
camel-example-fhir-auth-tx-spring-boot/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-fhir-spring-boot/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-rabbitmq/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-rest-producer/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-clustered-route-controller/cluster-node/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-health-checks/application/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-health-checks/service/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-master/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-rest-swagger/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-servicecall/consumer/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-supervising-route-controller/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-xml/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-cloud-servicecall/consumer/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-cloud-servicecall/service/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-cloud-serviceregistry/consumer/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-cloud-serviceregistry/service/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-twitter-salesforce/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-validator-spring-boot/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
{code}","21/Jan/19 09:26;ancosen;This one is fixed, I'll add the dependency also to the other examples.",21/Jan/19 13:47;ancosen;I fixed the rest and found some bugs on the spring-cloud examples. Fixed them too.,"21/Jan/19 13:49;dmvolod;[~ancosen], how is idea about to keep javax.servlet-api version in one place to minimize care on change it?","21/Jan/19 13:52;ancosen;Yeah, this is the main idea, but the problem we currently have is related to the servlet version we have in Parent POM, we could align to 4.0.1, but we won't be sure to have the OSGi support working fine. Once we get the back a working OSGi support we can align everything in one single place. This is just a temporary workaround.","21/Jan/19 13:57;dmvolod;Yes, understood, but we can temporary keep this version in examples root pom.xml to remember where we've changed it.","21/Jan/19 13:59;ancosen;Oh, my bad, you're right, copy-pasted with the explicit dependency :(

I'm fixing that!","21/Jan/19 14:15;ancosen;Done, thanks for spotting this [~dmvolod]","01/Feb/19 04:32;njiang;[~ancosen] I happened to hit this issue and found you add lots of dependency across the examples , we can just specify servlet API 
 in the dependency manager of example pom.xml to override the setting of camel-parent.   As servlet API is backward compatible, the other example should be fine to use servlet-api 4.x.  
I just committed a quick fix for it and merged the patch into camel-2.23.x branch.","01/Feb/19 06:18;ancosen;Totally right, thanks [~njiang]",01/Feb/19 06:27;ancosen;I backported to camel-2.x too.,,,,,,,,,,,,,,,,,,,
Netty4 and Restlet components should support SSLContextParameters,CAMEL-12748,13180436,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,22/Aug/18 10:14,31/Jan/19 06:43,13/Mar/19 22:20,22/Aug/18 11:06,,,,,,,,,,,,,,,,2.23.0,,,,,camel-netty4,camel-netty4-http,camel-restlet,,,,0,,,,"Currently we have no way to specify {{SSLContextParameters}} directly on Netty4 or Restlet components, leaving the only option to configure TLS/SSL via global {{SSLContextParameters}} or component specific configuration.",,"tveskrna commented on pull request #2737: [CAMEL-12748] Test Restlet component support SSLContextParametr
URL: https://github.com/apache/camel/pull/2737
 
 
   https://issues.apache.org/jira/browse/CAMEL-12748
   
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Jan/19 09:56;githubbot;600","oscerd commented on pull request #2737: [CAMEL-12748] Test Restlet component support SSLContextParametr
URL: https://github.com/apache/camel/pull/2737
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Jan/19 06:43;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-08-22 10:14:08.0,,,,,,,0|i3xauf:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kafka - AutoCommitEnabled=false should not auto commit,CAMEL-12454,13153265,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Apr/18 07:21,28/Jan/19 10:48,13/Mar/19 22:20,18/Apr/18 07:26,2.20.3,2.21.0,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-kafka,,,,,,0,,,,"Reported on gitter

John Culleton @jcullet Apr 17 17:22
Hi All - I'm running into an issue with the camel-kafka component when attempting to disable auto commit behavior. On camel 2.21, I'm finding that the offset is being committed even when ""autoCommitEnable=false"" is specified. When running through a debugger, I see that the offset commit is happening here: https://github.com/apache/camel/blob/0f98938e3b6ea15a2e022c707bf21a2af4ed7e0d/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java#L382. Based on the conditional, I think it would always evaluate to true when autoCommitEnable is set to false?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-28 10:39:10.415,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 28 10:39:10 UTC 2019,,,,,,,0|i3sox3:,9223372036854775807,,,,,,,,,,"28/Jan/19 10:39;avasilevskii;[~davsclaus] Sorry for digging out this old ticket, but I just upgraded from Camel 2.20.3 to 2.23.1 and it seems there is a problem with this fix. When using auto commit enabled this code would commit for every complete exchange with no regard to the auto.commit.interval.ms setting. Here is an example with debugging turned on for org.apache.camel.component.kafka.KafkaConsumer, as you can see Kafka consumer commits every 10-500 ms instead of once per 5 seconds:
{code:java}
2019-01-28 10:46:55.025  INFO 3324 --- [ontext_Worker-3] o.a.k.clients.consumer.ConsumerConfig    : ConsumerConfig values: 
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [192.168.56.10:9093]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = service_new
	heartbeat.interval.ms = 3000
	interceptor.classes = null
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 1000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 40000
	retry.backoff.ms = 100
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.mechanism = GSSAPI
	security.protocol = SSL
	send.buffer.bytes = 131072
	session.timeout.ms = 30000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = /usr/files/server.jks
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JCEKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = /usr/files/truststore.jks
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JCEKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2019-01-28 10:46:55.160  INFO 3324 --- [ontext_Worker-3] o.a.kafka.common.utils.AppInfoParser     : Kafka version : 1.0.2
2019-01-28 10:46:55.160  INFO 3324 --- [ontext_Worker-3] o.a.kafka.common.utils.AppInfoParser     : Kafka commitId : 2a121f7b1d402825
2019-01-28 10:46:55.160  INFO 3324 --- [ontext_Worker-3] o.a.camel.spring.SpringCamelContext      : Route: route1 started and consuming from: kafka:topic1,topic2,topic3?brokers=192.168.56.10:9093
2019-01-28 10:46:55.161  INFO 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Subscribing topic1,topic2,topic3-Thread 0 to topic topic1,topic2,topic3
2019-01-28 10:46:55.161  INFO 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Subscribing topic1,topic2,topic3-Thread 0 to topic topic1,topic2,topic3
2019-01-28 10:46:55.313  INFO 3324 --- [uponassignment]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-1, groupId=service_new] Discovered group coordinator 192.168.56.10:9093 (id: 2147483646 rack: null)
2019-01-28 10:46:55.315  INFO 3324 --- [uponassignment]] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-1, groupId=service_new] Revoking previously assigned partitions []
2019-01-28 10:46:55.316  INFO 3324 --- [uponassignment]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-1, groupId=service_new] (Re-)joining group
2019-01-28 10:46:58.469  INFO 3324 --- [uponassignment]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-1, groupId=service_new] Successfully joined group with generation 3
2019-01-28 10:46:58.470  INFO 3324 --- [uponassignment]] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-1, groupId=service_new] Setting newly assigned partitions [topic3-1, topic3-0, topic2-1, topic1-0, topic2-0, topic1-1]
2019-01-28 10:47:24.953 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3221
2019-01-28 10:47:24.953 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3221
2019-01-28 10:47:24.957 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3222
2019-01-28 10:47:24.957 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3222
2019-01-28 10:47:24.964 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3325
2019-01-28 10:47:24.964 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3325
2019-01-28 10:47:25.005 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3223
2019-01-28 10:47:25.005 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3223
2019-01-28 10:47:25.515 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3326
2019-01-28 10:47:25.515 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3326
2019-01-28 10:47:26.005 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3224
2019-01-28 10:47:26.005 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3224
2019-01-28 10:47:26.528 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3327
2019-01-28 10:47:26.528 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3327
2019-01-28 10:47:27.014 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3225
2019-01-28 10:47:27.014 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3225
2019-01-28 10:47:27.512 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3328
2019-01-28 10:47:27.512 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3328
2019-01-28 10:47:28.001 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3226
2019-01-28 10:47:28.001 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3226
2019-01-28 10:47:28.497 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3329
2019-01-28 10:47:28.497 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3329
2019-01-28 10:47:29.024 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3330
2019-01-28 10:47:29.024 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3330
2019-01-28 10:47:29.521 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3227
2019-01-28 10:47:29.521 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3227
2019-01-28 10:47:30.012 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3228
2019-01-28 10:47:30.012 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3228
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
uploadBlobBlocks and commitBlobBlockList operations does not work with List ,CAMEL-13132,13212144,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,apoltavtsev,apoltavtsev,28/Jan/19 05:27,28/Jan/19 10:15,13/Mar/19 22:20,28/Jan/19 10:15,2.21.2,,,,,,,,,,,,,,,2.21.5,2.22.4,2.23.2,2.24.0,3.0.0,camel-azure,,,,,,0,,,,"This is problematic code on 2.21.2:

[https://github.com/apache/camel/blob/release/2.21.2/components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceProducer.java#L160]

the same issue for ""commitBlobBlockList"": 

[https://github.com/apache/camel/blob/release/2.21.2/components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceProducer.java#L192]

 

it is necessary to replace it by ""blobBlocks = (List<BlobBlock>)object;"" and by ""blockEntries = (List<BlockEntry>)object;"" correspondingly

 

In master problematic code is more strange, but can be resolved in the same way:

[https://github.com/apache/camel/blob/master/components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceProducer.java#156]

and the same issue for ""commitBlobBlockList"": 

[https://github.com/apache/camel/blob/master/components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceProducer.java#L188]

 

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-01-28 05:27:19.0,,,,,,,0|yi0dag:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Endpoint shutdown closes mongo connection, killing the connection for everyone",CAMEL-13123,13211585,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,PeterN,PeterN,24/Jan/19 15:00,25/Jan/19 12:58,13/Mar/19 22:20,25/Jan/19 08:47,2.23.1,,,,,,,,,,,,,,,2.21.5,2.22.3,2.23.2,2.24.0,3.0.0,camel-mongodb3,,,,,,0,,,,[This piece of code in MongoEndpoint|https://github.com/apache/camel/blob/21bb980d29cdb7f09d875f8278fcf1d21f785ea0/components/camel-mongodb3/src/main/java/org/apache/camel/component/mongodb3/MongoDbEndpoint.java#L302] closes the underlying MongoClient object when an Endpoint gets stopped. This is not correct behavior. There most probably are other endpoints using the client and this closes the connection for all of them. So if route1 stops and route2 is using the same MongoClient (from the registry) then route2 just got nuked.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-24 19:00:19.48,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 24 19:00:19 UTC 2019,,,,,,,0|yi09u8:,9223372036854775807,,,,,,,,,,24/Jan/19 15:06;PeterN;A  [pull request|https://github.com/apache/camel/pull/2733] is ready.,"24/Jan/19 19:00;davsclaus;Ah thanks, yeah it looks like the lifecycle of the mongodb client is handled outside Camel for this component. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Olingo4 Consumer appears to not work with backoffIdleThreshold,CAMEL-13077,13210216,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,phantomjinx,phantomjinx,17/Jan/19 18:20,25/Jan/19 10:15,13/Mar/19 22:20,25/Jan/19 10:15,2.21.0,2.22.0,2.23.0,,,,,,,,,,,,,2.21.5,2.22.3,2.23.2,2.24.0,3.0.0,camel-olingo2,camel-olingo4,,,,,0,,,,"Looking into using {{backoffIdleThreshold}} for reducing the amount of polling of OData consuming. So far I cannot see how it would work for the [Olingo4Consumer|https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Consumer.java]. Bear with me, this may get a little deep to follow!

Hierarchy: ScheduledPollConsumer > AbstractApiConsumer > Olingo4Consumer

SchedulePollConsumer maintains an [idleCounter|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/support/ScheduledPollConsumer.java#L61], which is incremented each time no messages are returned from polling. Once the {{idleCounter}} starts to increment then this in turn starts to increment the backoffCounter taking into account properties such as {{backoffIdleThreshold}}, resulting in delaying polling etc.

However, in order for {{idleCounter}} to increment, {{poll()}} methods must return 0 messages. Since {{Olingo4Consumer}} defers its {{result[0]}} to [ApiConsumer.getResultsProcessed()|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/support/component/ApiConsumerHelper.java#L85], the results must be in a form that can be handled by this static method, namely a List, an Iterable or an Array. Otherwise, the result is merely added to the Exchange and the constant '1' is returned.

Now here is the crux. OData services like to return a {{ClientEntitySet}} hence when the result is passed to {{ApiConsumerHelper}}, it is none of the expected types and ['1'|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/support/component/ApiConsumerHelper.java#L128] is therefore always returned. Consequently, the return value of {{poll()}} is 1 hence {{idleCounter}} is never incremented.

I hope that makes sense and if I have made a mistake then please let me know. I think the way to handle this would be to put the entities of the {{ClientEntitySet}} into the result rather than the set itself. That way ApiConsumerHelper would understand a {{Collection}} as an {{Iterable}} and return a proper value based on the size of the collection. Alternatively, if the {{ClientEntitySet}} is desired as the result then maybe {{ApiConsumerHelper}} needs to be extended in some way so as to correctly handle a return value for {{poll()}}.

Not sure which way to go on this so anxious to start a discussion.",,"phantomjinx commented on pull request #2719: CAMEL-13077: Fix polling return for empty OData ClientEntitySets
URL: https://github.com/apache/camel/pull/2719
 
 
   * ApiConsumerHelper does not recognise ClientEntitySets and thus defaults
     to return a constant 1. This means that the scheduling polling is never
     concluded to be idle and the backoffXXX consumer properties do not work.
   
   * If the ClientEntitySet is empty then return 0 to allow for backoffXXX
     properties to correctly handle the scheduling of the polling.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/19 16:17;githubbot;600","davsclaus commented on pull request #2719: CAMEL-13077: Fix polling return for empty OData ClientEntitySets
URL: https://github.com/apache/camel/pull/2719
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jan/19 14:56;githubbot;600","phantomjinx commented on pull request #2732: CAMEL-13077: Fix polling return for empty OData ODataFeeds (#2719)
URL: https://github.com/apache/camel/pull/2732
 
 
    * ApiConsumerHelper does not recognise ODataFeeds and thus defaults
      to return a constant 1. This means that the scheduling polling is never
      concluded to be idle and the backoffXXX consumer properties do not work.
   
    * If the ODataFeed is empty then return 0 to allow for backoffXXX
      properties
   
    * This is an equivalent change to that already committed for olingo4
      component.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Jan/19 12:02;githubbot;600","asfgit commented on pull request #2732: CAMEL-13077: Fix polling return for empty OData ODataFeeds (#2719)
URL: https://github.com/apache/camel/pull/2732
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Jan/19 08:23;githubbot;600",,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-18 12:08:24.305,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 25 10:15:43 UTC 2019,,,,,,,0|yi01eo:,9223372036854775807,,,,,,,,,,18/Jan/19 12:08;davsclaus;Yeah that sounds correct that 0 should be returned if no data. You are welcome to attempt to provide a fix via github PR then we can review that,18/Jan/19 16:20;phantomjinx;*PR* -> [2719|https://github.com/apache/camel/pull/2719],"22/Jan/19 14:57;davsclaus;Can you do a PR for olingo2 also, thanks","24/Jan/19 12:06;phantomjinx;[~davsclaus]

As requested -> [PR|https://github.com/apache/camel/pull/2732]",25/Jan/19 10:15;dmvolod;Thanks [~phantomjinx]. Merged and backported.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-google-mail: Stream component doesn't work in OSGi,CAMEL-13098,13210948,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,22/Jan/19 11:04,22/Jan/19 11:17,13/Mar/19 22:20,22/Jan/19 11:17,,,,,,,,,,,,,,,,2.22.3,2.23.2,2.24.0,3.0.0,,camel-google-mail,,,,,,0,,,,There are missing exports,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-01-22 11:04:48.0,,,,,,,0|yi05x4:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-google-calendar: Stream component doesn't work in OSGi,CAMEL-13097,13210938,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,22/Jan/19 10:28,22/Jan/19 10:39,13/Mar/19 22:20,22/Jan/19 10:39,,,,,,,,,,,,,,,,2.23.2,2.24.0,3.0.0,,,camel-google-calendar,,,,,,0,,,,There are missing export directives,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-01-22 10:28:00.0,,,,,,,0|yi05uw:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-olingo2 assumes '/' at end of URI,CAMEL-13059,13209587,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,dmvolod,dmvolod,15/Jan/19 09:28,17/Jan/19 14:11,13/Mar/19 22:20,17/Jan/19 14:11,2.21.0,,,,,,,,,,,,,,,2.21.5,2.22.3,2.23.2,2.24.0,3.0.0,camel-olingo2,,,,,,0,odata,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-01-15 09:28:00.0,,,,,,,0|y000lc:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AbstractFutureCallback generates NPE when response is a 401,CAMEL-13058,13209577,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,dmvolod,dmvolod,15/Jan/19 08:26,17/Jan/19 14:11,13/Mar/19 22:20,17/Jan/19 14:11,2.21.0,,,,,,,,,,,,,,,2.21.5,2.22.3,2.23.2,2.24.0,3.0.0,camel-olingo2,,,,,,0,odata,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13012,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-01-15 08:26:50.0,,,,,,,0|y000j4:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing properties on Olingo2 consumer initialisation,CAMEL-13061,13209610,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,dmvolod,dmvolod,15/Jan/19 10:28,17/Jan/19 14:11,13/Mar/19 22:20,17/Jan/19 14:11,2.21.0,,,,,,,,,,,,,,,2.21.5,2.22.3,2.23.2,2.24.0,3.0.0,camel-olingo2,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13006,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-01-15 10:28:29.0,,,,,,,0|y000qg:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
olingo2 component serviceUri not set,CAMEL-13062,13209660,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,dmvolod,dmvolod,15/Jan/19 14:46,17/Jan/19 14:10,13/Mar/19 22:20,17/Jan/19 14:10,2.21.0,,,,,,,,,,,,,,,2.21.5,2.22.3,2.23.2,2.24.0,3.0.0,camel-olingo2,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13005,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-01-15 14:46:10.0,,,,,,,0|y0011k:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Olingo2Endpoint swallowing consumer. options,CAMEL-13063,13209662,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,dmvolod,dmvolod,15/Jan/19 14:47,17/Jan/19 14:10,13/Mar/19 22:20,17/Jan/19 14:10,2.21.0,,,,,,,,,,,,,,,2.21.5,2.22.3,2.23.2,2.24.0,3.0.0,camel-olingo2,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13054,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-01-15 14:47:46.0,,,,,,,0|y00120:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Olingo4Endpoint swallowing consumer. options,CAMEL-13054,13209437,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,phantomjinx,phantomjinx,14/Jan/19 14:44,17/Jan/19 14:10,13/Mar/19 22:20,17/Jan/19 14:10,2.21.0,,,,,,,,,,,,,,,2.21.5,2.22.3,2.23.2,2.24.0,3.0.0,camel-olingo4,,,,,,0,odata,,,"The Olingo4Endpoint, while calling [configureProperties|https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Endpoint.java#L109], first calls [parseQueryParams|https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Endpoint.java#L191](). This results in consumer.* options being removed from the options map before they can be applied to the DefaultEndpoint.configureProperties(). Consequently, consumer.* options, eg. consumer.delay, can never be applied on the Olingo4Consumer.

To correct this it should be a matter of adding the following [here|https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Endpoint.java#L198]:
{code:java}
  if (paramName.startsWith(""consumer."")) {
    continue;
  }
{code}",,"phantomjinx commented on pull request #2708: CAMEL-13054: Olingo4Endpoint - avoid swallowing consumer options
URL: https://github.com/apache/camel/pull/2708
 
 
   * Those options prefixed with 'consumer' are required to be processed by
     Olingo4Endpoint's parent class. However, they are getting added to the
     query options instead and never applied to the scheduling consumer.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Jan/19 08:47;githubbot;600","asfgit commented on pull request #2708: CAMEL-13054: Olingo4Endpoint - avoid swallowing consumer options
URL: https://github.com/apache/camel/pull/2708
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Jan/19 15:49;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-14 20:28:34.662,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 17 14:10:35 UTC 2019,,,,,,,0|u00tig:,9223372036854775807,,,,,,,,,,"14/Jan/19 20:28;davsclaus;Contributions is welcome, for example as a github PR",15/Jan/19 08:50;phantomjinx;PR: [https://github.com/apache/camel/pull/2708|https://github.com/apache/camel/pull/2708],17/Jan/19 14:10;dmvolod;Thanks [~phantomjinx] for PR.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
olingo4 component serviceUri not set,CAMEL-13005,13204488,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,phantomjinx,phantomjinx,14/Dec/18 14:52,15/Jan/19 14:46,13/Mar/19 22:20,17/Dec/18 10:05,2.21.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,camel-olingo4,,,,,,0,,,,"I think there is a bug in the olingo4 component/endpoint. The [#(1)] states that the serviceUri can be used as a query hence
{code:java}
from(""olingo4://read/Products?serviceUri="" + serviceUri);{code}
However, adding this to a simple test script [#(2)], this results in an exception [#(3)] that the serviceUri has not been set. Digging into the code it seems that the _Olingo4Configuration_ is applied to the endpoint but only has the _apiName_ and _methodName_ set. Consequently, when the call _configuration.getServiceUri()_ is called, the value is null.

 

 [1] [https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-component/src/main/docs/olingo4-component.adoc]
  [2] [https://gist.github.com/phantomjinx/085df03915c5813a1f04b32e09d00049#filesimpleolingo4test-java]
  [3] [https://gist.github.com/phantomjinx/085df03915c5813a1f04b32e09d00049#gistcomment-2784671]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-14 17:40:25.42,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 17 08:29:47 UTC 2018,,,,,,,0|s01j20:,9223372036854775807,,,,,,,,,,14/Dec/18 17:40;dmvolod;Fixed. Thanks Paul for reporting.,"14/Dec/18 17:49;dmvolod;If you need to backport this issue to other Camel versions, let us know.","14/Dec/18 18:01;phantomjinx;Hi [~dmvolod]

If it is possible to backport it to 2.21.0 then that would be great! As part of the fuse project, we take a fork of the camel project and apply bug fixes so probably depends on how complex the fix is.

Thx for the quick fix!","17/Dec/18 08:29;dmvolod;Ok, [~phantomjinx], I will try to do this, but looks like some changes were introduced in 2.23 and OOB cherry-pick is not working.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing properties on Olingo4 consumer initialisation,CAMEL-13006,13204492,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,phantomjinx,phantomjinx,14/Dec/18 15:00,15/Jan/19 14:45,13/Mar/19 22:20,21/Dec/18 05:08,2.21.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,camel-olingo4,,,,,,0,,,,"Essentially, after replacing the olingo4 component in the context to bypass the null [serviceUri issue|https://issues.apache.org/jira/browse/CAMEL-13005], the route moves on to initialising the Olingo4Consumer. The latter tests the '_read_' method to ensure all properties have been set [#(1)]. However, this fails due to the properties '_edm_' and '_responseHandler_' being missing.

Have come up with a test [#(2)] that demonstrates the problem.

These properties are not documented (since they appear to be output properties). However
, they are added into the property names collection of the endpoint [#(3)]. This collection is compared against the method signatures in the Olingo4AppEndpointConfiguration and neither _s/getEdm_ or _s/getResponseHandler_ exist hence the exception thrown.


{anchor:(1)} [1] https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/util/component/ApiConsumerHelper.java#L55
{anchor:(2)} [2] https://gist.github.com/phantomjinx/90ee08a989ddff4366d792cc621b36a9#file-properties-issue-java
{anchor:(3)} [3] https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Endpoint.java#L150
",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13005,,,,,20/Dec/18 11:45;phantomjinx;0001-CAMEL-13006-Fix-for-required-properties-in-odata-con.patch;https://issues.apache.org/jira/secure/attachment/12952524/0001-CAMEL-13006-Fix-for-required-properties-in-odata-con.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2018-12-21 05:08:00.47,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 21 05:08:00 UTC 2018,,,,,,,0|s01j2w:,9223372036854775807,,,,,,,,,,"20/Dec/18 11:46;phantomjinx;Hi [~dmvolod]

Attached a possible fix for this for your consideration.",21/Dec/18 05:08;dmvolod;Thanks [~phantomjinx] for reporting and provided fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-olingo4 - AbstractFutureCallback generates NPE when response is a 401,CAMEL-13012,13204969,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,phantomjinx,phantomjinx,17/Dec/18 19:23,15/Jan/19 09:30,13/Mar/19 22:20,10/Jan/19 10:08,2.21.0,2.22.2,2.23.0,,,,,,,,,,,,,2.21.5,2.22.3,2.23.1,2.24.0,3.0.0,camel-olingo4,,,,,,0,odata,,,"The class [AbstractFutureCallback|https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/AbstractFutureCallback.java] throws a NullPointerException when the server is secured with basic authentication and the camel client fails to provide the correct credentials.
 # Implement an odata server secured with basic authentication;
 # Crate a camel route to access the odata server but do not specify the correct authentication credentials;
 # While fetching the Edm [object|https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Endpoint.java#L166] from the endpoint proxy, an http client request is made using the provided parameters and of course fails with a 401 error.
 # The response is processed by [AbstractFutureCallback|https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/AbstractFutureCallback.java#L60] but _responseContentType_ is null hence the NPE.

 ",,"dmvolod commented on pull request #2702: CAMEL-13012: AbstractFutureCallback generates NPE when response is a 401
URL: https://github.com/apache/camel/pull/2702
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Jan/19 13:13;githubbot;600","dmvolod commented on pull request #2702: CAMEL-13012: AbstractFutureCallback generates NPE when response is a 401
URL: https://github.com/apache/camel/pull/2702
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Jan/19 10:03;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-10 10:08:37.866,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 10 10:08:37 UTC 2019,,,,,,,0|u0028w:,9223372036854775807,,,,,,,,,,"10/Jan/19 10:08;dmvolod;Thanks, [~phantomjinx] for reporting.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Karaf commands that start/resume contexts and routes should use proper TCCL,CAMEL-13049,13208992,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gzres,gzres,gzres,11/Jan/19 12:34,11/Jan/19 13:42,13/Mar/19 22:20,11/Jan/19 13:42,2.24.0,,,,,,,,,,,,,,,2.21.5,2.22.3,2.23.1,2.24.0,3.0.0,,,,,,,0,,,,"When starting route using {{route-start}} Karaf command, TCCL is used from Karaf shell console thread - usually App Class Loader. It should be ClassLoader of the context itself.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 11 13:41:56 UTC 2019,,,,,,,0|u00qs0:,9223372036854775807,,,,,,,,,,"11/Jan/19 13:41;gzres;Fixed:
{noformat}
   c7b772c8b5d..da36458fbd5  camel-2.21.x -> camel-2.21.x
   53185f0b221..ca2ba93782b  camel-2.22.x -> camel-2.22.x
   15a1f10fb53..93eeec1be30  camel-2.23.x -> camel-2.23.x
   aadb0f83c65..b07c5e0c307  camel-2.x -> camel-2.x
   2af70bc092f..b26db98574e  master -> master
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel-AWS MQ: it is not possible to set Broker ""Public accessibility"" parameter using createBroker command",CAMEL-13044,13208596,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,apoltavtsev,apoltavtsev,09/Jan/19 18:16,10/Jan/19 10:05,13/Mar/19 22:20,10/Jan/19 10:05,2.21.2,2.23.0,,,,,,,,,,,,,,2.21.5,2.22.3,2.23.1,2.24.0,3.0.0,camel-aws,,,,,,0,,,,"For now all MQ instances are created with ""public accessibility"" = false using ""createBroker"" command. As result, created AWS Broker instance is not accessible outside AWS environment. And there is no way to change it (corresponding parameter in not propagated to AWS MQ client).

It is necessary to add propagation of ""publiclyAccessible"" parameter to ""createBroker"" operation:

...

request.withPubliclyAccessible(publiclyAccessible);

...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-09 19:01:58.015,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 09 19:01:58 UTC 2019,,,,,,,0|u00ocw:,9223372036854775807,,,,,,,,,,09/Jan/19 19:01;ancosen;I'll try to fix this tomorrow. If you want a PR is welcome.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Slack: The verifier must be able to validate webhook and token at the same time,CAMEL-13045,13208712,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,10/Jan/19 07:03,10/Jan/19 07:36,13/Mar/19 22:20,10/Jan/19 07:36,,,,,,,,,,,,,,,,2.23.1,2.24.0,3.0.0,,,camel-slack,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-01-10 07:03:46.0,,,,,,,0|u00p28:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core-osgi: Slow Memory Leak in OsgiServiceRegistry,CAMEL-12969,13201658,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bobpaulin,bobpaulin,30/Nov/18 15:46,30/Dec/18 19:38,13/Mar/19 22:20,30/Dec/18 18:46,2.18.0,2.19.0,2.20.0,2.21.0,2.22.0,2.23.0,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,,camel-osgi,,,,,,0,,,,"The OsgiServiceRegistry has a slow memory leak in the serviceReferenceQueue.  Currently every time a service is looked up by any method an item is added to the serviceReferenceQueue.  This is required because of OSGi ServiceReference counting.  However left unchecked the system just continues to add ConcurrentLinkedQueue$Node objects until memory is exhausted.

!ServiceReferenceQueueLeak.PNG! . 

 

There is also a second problem with how the registry is being managed within the OsgiDefaultCamelContext.  OsgiServiceRegistry is currently extends LifecycleStrategySupport which is suppose to unload the serviceReferenceQueue onContextStop.  However the registry is never getting added to the CamelContext to manage the Lifecycle because the overridden createRegistry method in OsgiDefaultCamelContext is not being called.  This is because the registry is being set in the constructor of OsgiDefaultCamelContext with
{code:java}
super(registry);{code}
this calls the DefaultCamelContext implementation of createRegistry which does not add the registry to lifecyclemanagement since
{code:java}
OsgiCamelContextHelper.wrapRegistry(this, registry, bundleContext);{code}
is never called. 

See serviceReferenceQueue  pre context stop

  !ServiceReferenceQueuePreContextStop.PNG!

!karafCamelContextStop.PNG!

See serviceReferenceQueue   post context stop (still contain objects)

  !ServiceReferenceQueuePostContextStop.PNG!

Both issues would have existed for some time but may have gone unnoticed because the leak was so slow (ConcurrentLinkedQueue$Node takes up very little memory).  It appears the removal of the cache in https://issues.apache.org/jira/browse/CAMEL-9631 makes the leak occur more quickly. 

 

I have a patch that involves reintroducing the cache but with an invalidation strategy using the OSGi ServiceListener that leverages a single clean up thread to remain non-blocking.  I'm working on an upstream adaptation and will post a PR for community review.

 

 ","Java 10

Karaf 4.2.1

Camel 2.22.0","bobpaulin commented on pull request #2695: CAMEL-12969 : Map based Service Usage counting to remove memory leak
URL: https://github.com/apache/camel/pull/2695
 
 
   This showed comparable performance to using the service cache and thread in my previous PR.  The leak does not occur since the Queue has been replaced with a map of AtomicLongs to count usage.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Dec/18 16:43;githubbot;600","davsclaus commented on pull request #2695: CAMEL-12969 : Map based Service Usage counting to remove memory leak
URL: https://github.com/apache/camel/pull/2695
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Dec/18 17:57;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,30/Nov/18 15:46;bobpaulin;ServiceReferenceQueueLeak.PNG;https://issues.apache.org/jira/secure/attachment/12950174/ServiceReferenceQueueLeak.PNG,30/Nov/18 15:51;bobpaulin;ServiceReferenceQueuePostContextStop.PNG;https://issues.apache.org/jira/secure/attachment/12950177/ServiceReferenceQueuePostContextStop.PNG,30/Nov/18 15:50;bobpaulin;ServiceReferenceQueuePreContextStop.PNG;https://issues.apache.org/jira/secure/attachment/12950175/ServiceReferenceQueuePreContextStop.PNG,30/Nov/18 15:51;bobpaulin;karafCamelContextStop.PNG;https://issues.apache.org/jira/secure/attachment/12950176/karafCamelContextStop.PNG,4.0,,,,,,,,,,,,,,,,,,,2018-11-30 17:37:24.528,,,no_permission,,Unknown,,,,Patch,,,,,,,,,9223372036854775807,,,Sun Dec 30 19:38:51 UTC 2018,,,Patch Available,,,,0|s011rc:,9223372036854775807,,,,,,,,,,"30/Nov/18 17:37;githubbot;bobpaulin opened a new pull request #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Dec/18 11:26;githubbot;davsclaus commented on issue #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647#issuecomment-444452864
 
 
   Thanks for the PR. I wonder if we can avoid the extra background thread. Can't we just use the service listener directly and in the serviceChanged method with unregister service, then remove the item from the osgi service registry directly. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Dec/18 11:28;githubbot;davsclaus commented on issue #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647#issuecomment-444453399
 
 
   Also if the leak is due to `onContextStop` is not called on OsgiServiceRegistry where it unregisters and clears its own cache, then we should try to fix this first and see if the current code is not okay as-is. I am not keen on adding extra complexity with this PR introduces.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Dec/18 11:29;davsclaus;Thanks for reporting the memory leak and providing details and screenshots etc, much appreciated.","05/Dec/18 15:09;githubbot;bobpaulin commented on issue #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647#issuecomment-444518591
 
 
   @davsclaus Yes I would also like to avoid the background thread if possible.  The problem I ran into with removing the service reference on the unregister event is per the OSGi spec[1] (and in the Felix implementation) the event is fired at the beginning of the service being unregistered not at the end.  So it is possible that if the service is looked up after the event firing but before the service registration is invalidated and removed from Felix's registry [2] it could be re-cached without any other means to remove it other than stopping the camel context.  This gap between the unregistered event firing and the service actually being removed causes some problems for trying to invalidate the cache in a synchronous way.  The thread allows the code to check the ungetService return value which switches to false when the service is actually gone.  That allows the invalidation to work properly without locking but trades the extra resources that get allocated to the thread.
   
   To your point of just applying the fix to the onContextStop being called.  I believe that could be applied separately which would improve the situation for users that are using the lookup calls conservatively.  Without the other parts of the patch (such as the cache reintroduction and invalidation strategy) the ConcurrentLinkedQueue$Node objects would continue to accumulate with each lookup call.  I'd prefer an approach that shields developers from the OSGi runtime and allows them make lookup calls as liberally as they can be with the  SimpleRegistry and JndiRegistry.
   
   I agree with your point about complexity and I'm open to ideas to address the issue in a way that allows developers to use the Camel Registries in a uniform way.  Also sorry for the length of this note.  I wish I could have made it shorter but I think the issue is a bit tricky.
   
   [1] https://osgi.org/specification/osgi.core/7.0.0/framework.api.html#org.osgi.framework.ServiceEvent
   [2] https://github.com/apache/felix/blob/trunk/framework/src/main/java/org/apache/felix/framework/ServiceRegistry.java (specfically the unregisterService method.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/Dec/18 17:10;githubbot;bobpaulin commented on issue #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647#issuecomment-445300110
 
 
   If it makes sense I can split this PR into 2 separate PRs.  One with the changes to the code that ensures the onContextStop gets called and another including the re-adding of cache and invalidation strategy.  It seems like the onContextStop change is uncontroversial while the cache and invalidation strategy will take require more consideration.  
   
   In my application the onContextStop fix without the other changes will not be of much benefit to me.  But it may benefit others in the community that call the lookup method less frequently and stop the context more frequently.  
   
   If there are suggestions to this pull request that would reduce the complexity to an acceptable level without adding race conditions and managing OSGi reference counting properly I'm happy to adapt this PR as well.  Let me know what approach makes the most sense.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/Dec/18 18:41;githubbot;davsclaus commented on issue #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647#issuecomment-445326215
 
 
   @bobpaulin yeah it would be good to separate this into 2 PRs. The onContextStop is a good fix IMHO.
   
   For the other I would like to get more feedback and ideas, eg if you have 100 Camel bundles in a JVM, then you now get 100 more JVM threads which is pita. 
   Maybe the background thread can be created on-demand or on when camel context is being shutdown. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",09/Dec/18 03:00;bobpaulin;Created a second issue to separate the onContextStop not called issue CAMEL-12987 .  This issue will be for tracking the memory leak caused by adding to the serviceReferenceQueue with each lookup call.,"09/Dec/18 03:09;githubbot;bobpaulin commented on issue #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647#issuecomment-445507171
 
 
   Split this into CAMEL-12987.  Closing this PR will open a new one that does not include the CAMEL-12987 changes.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Dec/18 03:09;githubbot;bobpaulin closed pull request #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java
index 08ff669c59f..2b9b1fc4e60 100644
--- a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java
+++ b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java
@@ -56,14 +56,23 @@ public static void osgiUpdate(DefaultCamelContext camelContext, BundleContext bu
     public static Registry wrapRegistry(CamelContext camelContext, Registry registry, BundleContext bundleContext) {
         ObjectHelper.notNull(bundleContext, ""BundleContext"");
 
-        LOG.debug(""Setting up OSGi ServiceRegistry"");
-        OsgiServiceRegistry osgiServiceRegistry = new OsgiServiceRegistry(bundleContext);
+        OsgiServiceRegistry osgiServiceRegistry = null;
+        Registry resultingRegistry = registry;
+        if(registry instanceof OsgiServiceRegistry) {
+            osgiServiceRegistry = (OsgiServiceRegistry)registry;
+        } else {
+            LOG.debug(""Wrapping Registry in OsgiServiceRegistry"");
+            osgiServiceRegistry = new OsgiServiceRegistry(bundleContext);
+            CompositeRegistry compositeRegistry = new CompositeRegistry();
+            compositeRegistry.addRegistry(osgiServiceRegistry);
+            compositeRegistry.addRegistry(registry);
+            resultingRegistry = compositeRegistry;
+        }
+        
         // Need to clean up the OSGi service when camel context is closed.
         camelContext.addLifecycleStrategy(osgiServiceRegistry);
-        CompositeRegistry compositeRegistry = new CompositeRegistry();
-        compositeRegistry.addRegistry(osgiServiceRegistry);
-        compositeRegistry.addRegistry(registry);
-        return compositeRegistry;
+        
+        return resultingRegistry;
     }
 
 }
diff --git a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
index 20e3a21eca0..821ef5d7978 100644
--- a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
+++ b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
@@ -32,7 +32,6 @@
 public class OsgiDefaultCamelContext extends DefaultCamelContext {
 
     private final BundleContext bundleContext;
-    private final Registry registry;
 
     public OsgiDefaultCamelContext(BundleContext bundleContext) {
         this(bundleContext, new OsgiServiceRegistry(bundleContext));
@@ -41,7 +40,7 @@ public OsgiDefaultCamelContext(BundleContext bundleContext) {
     public OsgiDefaultCamelContext(BundleContext bundleContext, Registry registry) {
         super(registry);
         this.bundleContext = bundleContext;
-        this.registry = registry;
+        setRegistry(OsgiCamelContextHelper.wrapRegistry(this, registry, bundleContext));
         OsgiCamelContextHelper.osgiUpdate(this, bundleContext);
         // setup the application context classloader with the bundle classloader
         setApplicationContextClassLoader(new BundleDelegatingClassLoader(bundleContext.getBundle()));
@@ -52,15 +51,6 @@ public OsgiDefaultCamelContext(BundleContext bundleContext, Registry registry) {
         return BundleContextUtils.findComponents(bundleContext, this);
     }
 
-    @Override
-    protected Registry createRegistry() {
-        if (registry != null) {
-            return OsgiCamelContextHelper.wrapRegistry(this, registry, bundleContext);
-        } else {
-            return OsgiCamelContextHelper.wrapRegistry(this, super.createRegistry(), bundleContext);
-        }
-    }
-
     @Override
     protected TypeConverter createTypeConverter() {
         // CAMEL-3614: make sure we use a bundle context which imports org.apache.camel.impl.converter package
diff --git a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java
index 4569962da2d..3cbbad8e2fb 100644
--- a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java
+++ b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java
@@ -21,15 +21,24 @@
 import java.util.Map;
 import java.util.Queue;
 import java.util.Set;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.LinkedBlockingQueue;
 
 import org.apache.camel.CamelContext;
+import org.apache.camel.VetoCamelContextStartException;
 import org.apache.camel.spi.Registry;
 import org.apache.camel.support.LifecycleStrategySupport;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.concurrent.CamelThreadFactory;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.Constants;
 import org.osgi.framework.InvalidSyntaxException;
+import org.osgi.framework.ServiceEvent;
+import org.osgi.framework.ServiceListener;
 import org.osgi.framework.ServiceReference;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -37,13 +46,25 @@
 /**
  * The OsgiServiceRegistry support to get the service object from the bundle context
  */
-public class OsgiServiceRegistry extends LifecycleStrategySupport implements Registry {
-    private static final Logger LOG = LoggerFactory.getLogger(OsgiCamelContextHelper.class);
+public class OsgiServiceRegistry extends LifecycleStrategySupport implements Registry, ServiceListener {
+    private static final Logger LOG = LoggerFactory.getLogger(OsgiServiceRegistry.class);
     private final BundleContext bundleContext;
     private final Queue<ServiceReference<?>> serviceReferenceQueue = new ConcurrentLinkedQueue<>();
+    private final BlockingQueue<ServiceReference<?>> unregisteredServiceReferenceQueue = new LinkedBlockingQueue<>();
+    private final Map<ServiceReference<?>, Object> serviceCacheMap = new ConcurrentHashMap<>();
+    private ExecutorService executorService;
     
     public OsgiServiceRegistry(BundleContext bc) {
         bundleContext = bc;
+        bundleContext.addServiceListener(this);
+    }
+    
+    @Override
+    public void onContextStart(CamelContext context) throws VetoCamelContextStartException {
+        //Start the ServiceReference Cleanup Task.
+        executorService = Executors.newSingleThreadExecutor(new CamelThreadFactory(""Camel ("" + context.getName() + "") thread ##counter# - #name#"", ""OSGiServiceReferenceCleanupThread"", true));
+
+        executorService.execute(new OsgiServiceReferenceCleanupTask());
     }
 
     /**
@@ -57,8 +78,7 @@ public OsgiServiceRegistry(BundleContext bc) {
             if (refs != null && refs.length > 0) {
                 // just return the first one
                 sr = refs[0];
-                serviceReferenceQueue.add(sr);
-                service = bundleContext.getService(sr);
+                service = getService(sr);
             }
         } catch (Exception ex) {
             throw ObjectHelper.wrapRuntimeCamelException(ex);
@@ -90,8 +110,7 @@ public Object lookupByName(String name) {
         if (sr != null) {
             // Need to keep the track of Service
             // and call ungetService when the camel context is closed 
-            serviceReferenceQueue.add(sr);
-            service = bundleContext.getService(sr);
+            service = getService(sr);
         }
         return service;
     }
@@ -104,8 +123,7 @@ public Object lookupByName(String name) {
             if (refs != null) {
                 for (ServiceReference<?> sr : refs) {
                     if (sr != null) {
-                        Object service = bundleContext.getService(sr);
-                        serviceReferenceQueue.add(sr);
+                        Object service = getService(sr);
                         if (service != null) {
                             String name = (String)sr.getProperty(""name"");
                             if (name != null) {
@@ -152,6 +170,48 @@ public void onContextStop(CamelContext context) {
         }
         // Clean up the OSGi Service Cache
         serviceReferenceQueue.clear();
+        serviceCacheMap.clear();
+        unregisteredServiceReferenceQueue.clear();
+        executorService.shutdownNow();
+        executorService = null;
+    }
+    
+    @Override
+    public void serviceChanged(ServiceEvent event) {
+        if( event.getType() == ServiceEvent.UNREGISTERING) {
+                this.unregisteredServiceReferenceQueue.add(event.getServiceReference());
+        }
+    }
+    
+    private Object getService(ServiceReference<?> sr) {
+        Object service = this.serviceCacheMap.get(sr);
+        if(service == null) {
+            service = this.bundleContext.getService(sr);
+            serviceReferenceQueue.add(sr);
+            if(service != null) {
+                this.serviceCacheMap.put(sr, service);
+            }
+        }
+        return service;
+    }
+    
+    class OsgiServiceReferenceCleanupTask implements Runnable {
+        @Override
+        public void run() {
+            ServiceReference<?> serviceReference = null;
+            try {
+                while((serviceReference = unregisteredServiceReferenceQueue.take()) != null) {
+                    if(!bundleContext.ungetService(serviceReference)) {
+                        serviceCacheMap.remove(serviceReference);
+                        serviceReferenceQueue.remove(serviceReference);
+                    }
+                    else {
+                        unregisteredServiceReferenceQueue.add(serviceReference);
+                    }
+                }
+            } catch (InterruptedException e) {
+                LOG.info(""Camel Osgi Service Reference Clean up Interrupted"", e);
+            }
+        }
     }
-
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Dec/18 18:45;davsclaus;Thanks Bob, for all the work on this, much appreciated.",30/Dec/18 19:38;bobpaulin;Thank you for backporting.  Looking forward to picking it up in the next release!,,,,,,,,,,,,,,,,,,,,,
Odata-connector assumes '/' at end of URI,CAMEL-13008,13204575,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,phantomjinx,phantomjinx,14/Dec/18 21:01,22/Dec/18 21:36,13/Mar/19 22:20,22/Dec/18 21:36,2.21.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,camel-olingo4,,,,,,0,,,,"An issue comes to light when testing certain odata implementations that do not handle a '/' being added to the end of the consumed URI, eg.
* Implementation of the olingo4 [tutorial|https://olingo.apache.org/doc/odata4/tutorials/read/tutorial_read.html]
* Services deployed using current implementations of [teiid|http://teiid.io/]

Use of the odata-connector on these services results in a _malformed URI_ error.

Essentially, when the service URI is concatenated with the resource path, the constructed URI is [appended|https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java#L781] with a '/' and a '?' prior to the addition of the query parameters.

This works fine for the reference odata [implementation|https://services.odata.org/TripPinRESTierService/(S(4gus0w41xmxedlzbywj2srqo))/People/?$filter=FirstName%20eq%20%27Scott%27] since can handle the extra '/'.

Since both teiid and the olingo4 tutorial use the olingo4 libraries, it would seem that the problem might be solved with them. However, it might be advantageous, given odata implementations already deployed, whether this odata-connector might check whether the '/' was supported before appending it?

(note. a bug [report|https://issues.jboss.org/browse/TEIID-5573] has been logged with the teiid project to this affect).

",,"dmvolod opened a new pull request #2681: CAMEL-13008: Odata-connector assumes '/' at end of URI
URL: https://github.com/apache/camel/pull/2681
 
 
   @phantomjinx, could you please review this fix. Is it enough for this issue?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Dec/18 13:48;githubbot;600","dmvolod closed pull request #2681: CAMEL-13008: Odata-connector assumes '/' at end of URI
URL: https://github.com/apache/camel/pull/2681
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java b/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java
index 62bc8abd616..30bac11141f 100644
--- a/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java
+++ b/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java
@@ -778,7 +778,7 @@ private String createUri(String resourceUri, String resourcePath, String queryOp
 
         final StringBuilder absolutUri = new StringBuilder(resourceUri).append(SEPARATOR).append(resourcePath);
         if (queryOptions != null && !queryOptions.isEmpty()) {
-            absolutUri.append(""/?"" + queryOptions);
+            absolutUri.append(""?"" + queryOptions);
         }
         return absolutUri.toString();
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Dec/18 21:31;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-18 17:38:48.507,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 19 02:57:05 UTC 2018,,,,,,,0|s01jl4:,9223372036854775807,,,,,,,,,,"18/Dec/18 17:38;dmvolod;[~phantomjinx], could you please to test this issue with camel-olingo4 component as this fix looks like already present in implementation https://github.com/apache/camel/blob/44dacd6a5528c85c31c8a3de708ddeb0e7e4b52b/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java#L199",18/Dec/18 17:55;dmvolod;Added test and it's working fine from my point of view https://github.com/dmvolod/camel/tree/CAMEL-13008,"18/Dec/18 20:31;phantomjinx;So couple of things to consider:
 * [L199|https://github.com/apache/camel/blob/44dacd6a5528c85c31c8a3de708ddeb0e7e4b52b/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java#L199] only handles trailing forward slashes at the end of the service uri and not the whole uri. The whole uri is not constructed until [L781|https://github.com/apache/camel/blob/44dacd6a5528c85c31c8a3de708ddeb0e7e4b52b/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java#L781], where the service uri, resource name and query options are concatenated together, eg.

{code:java}
ServiceURI (as seen at L199) -> http://192.168.88.5:8090/odata4/Products.svc
Method Name (Resource) -> Products
QueryOptions -> $filter=FirstName eq 'Scott'

Full URI built at L781 (note the '/?' added after '/Products'):
http://192.168.88.5:8090/odata4/Products.svc/Products/?$filter=FirstName eq 'Scott'
{code}
 
 * The test you've added uses the [reference|https://services.odata.org/TripPinRESTierService/(S(4gus0w41xmxedlzbywj2srqo))/People/?$filter=FirstName%20eq%20%27Scott%27] odata service, which handles trailing slashes correctly. If you construct a test server based on the olingo4 [tutorial|https://olingo.apache.org/doc/odata4/tutorials/read/tutorial_read.html], it will fail. If you would like to run up an existing implementation then feel free to copy the one I have created [here|https://github.com/phantomjinx/syndesis/blob/odata-connector-wip/app/connector/odata/src/test/java/io/syndesis/connector/odata/server/ODataTestServer.java].

 

The issue to reflect upon is the assumption of adding a slash with the question mark at L781. Obviously, some odata services will handle it but just in testing I have found that olingo's own tutorial and implementations of teiid both throw an error. There could well be many more odata services already deployed that would also fail in this fashion. Thus, maybe the slash should be removed entirely or a test done to check whether the slash is supported then acted on accordingly.","19/Dec/18 02:57;dmvolod;[~phantomjinx], thanks for explanation, understood the problem root. Will fix it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-undertow - When using SSL with rest-dsl and api-doc then you can get a port already bound exception,CAMEL-13028,13205985,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Dec/18 15:00,21/Dec/18 15:30,13/Mar/19 22:20,21/Dec/18 15:30,2.23.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,camel-undertow,,,,,,0,,,,"For example this route cannot startup
{code}
	public void configure() throws Exception {

		restConfiguration().scheme(""https"").component(""undertow"").port(7777).contextPath(""/"").host(""0.0.0.0"")
            .apiContextPath(""/swagger.json"")
				.dataFormatProperty(""prettyPrint"", ""true"")

				.apiProperty(""api.schemes"", ""https"")
				.apiProperty(""api.title"", ""Rest swagger"")
				.apiProperty(""api.description"", ""Camel Rest App with Swagger"");

		rest(""/user"").get().to(""direct:start"");

		from(""direct:start"").setBody().constant(""Hi Camels"");
	}
{code}

With a
{code}
Caused by: java.net.BindException: Address already in use
        at sun.nio.ch.Net.bind0(Native Method) ~[na:1.8.0_181]
        at sun.nio.ch.Net.bind(Net.java:433) ~[na:1.8.0_181]
        at sun.nio.ch.Net.bind(Net.java:425) ~[na:1.8.0_181]
        at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223) ~[na:1.8.0_181]
        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74) ~[na:1.8.0_181]
...
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-12-21 15:00:23.0,,,,,,,0|u008i0:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
root-Path handling for SFTP on windows bug,CAMEL-13017,13205326,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,jkleemann,jkleemann,19/Dec/18 10:18,20/Dec/18 11:31,13/Mar/19 22:20,20/Dec/18 11:31,2.23.0,,,,,,,,,,,,,,,2.22.3,2.23.1,2.24.0,,,camel-ftp,,,,,,0,,,,"In SftpOperations.java the commit 0d3612672f2927d0428c2b79686759c16be88791
has introduced a remoting bug when running on windows and connecting to sftp server.



If the sfpt/camel is running on windows, then it assumes that the path include a ""root-path"" like ""C://"" which is not necessarily true for sftp connections. 
So instead of ""/"" it creates a root path of ""/hom"" when working with an sftp path like ""/home/jkleemann/transfer/....:"" and fails when trying to change directory to this root path.

see [https://github.com/apache/camel/commit/0d3612672f2927d0428c2b79686759c16be88791]
for the changes

 ","2.23.0 / executing on windows jdk8 / remote sftp server linux

 ","onderson opened a new pull request #2679: CAMEL-13017 - handle root path on windows
URL: https://github.com/apache/camel/pull/2679
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Dec/18 22:26;githubbot;600","onderson closed pull request #2679: CAMEL-13017 - handle root path on windows
URL: https://github.com/apache/camel/pull/2679
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
index 1ecce010b46..5f75910641a 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
@@ -618,12 +618,17 @@ public synchronized void changeCurrentDirectory(String path) throws GenericFileO
         // that
         if (FileUtil.hasLeadingSeparator(path)) {
             // change to root path
-            if (!FileUtil.isWindows()) {
+            if (!path.matches(""^[a-zA-Z]:(//|\\\\).*$"")) {
                 doChangeDirectory(path.substring(0, 1));
                 path = path.substring(1);
             } else {
-                doChangeDirectory(path.substring(0, 4));
-                path = path.substring(4);
+                if(path.matches(""^[a-zA-Z]:(//).*$"")) {
+                    doChangeDirectory(path.substring(0, 3));
+                    path = path.substring(3);
+                } else if(path.matches(""^[a-zA-Z]:(\\\\).*$"")) {
+                    doChangeDirectory(path.substring(0, 4));
+                    path = path.substring(4);
+                }
             }
         }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Dec/18 09:08;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-19 22:31:29.223,,,no_permission,,Unknown,,,,Important,,,,,,,,,9223372036854775807,,,Wed Dec 19 22:31:29 UTC 2018,,,,,,,0|u004fs:,9223372036854775807,,,,,,,,,,"19/Dec/18 14:30;jkleemann;The simplest solution would be a regular expression to check if the path to process starts with ""[A-Z]://"" and then act accordingly!",19/Dec/18 22:31;onders;Thanks for spotting,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty - If multiple bundles uses the same context-path (pathspec) then Jetty should fail,CAMEL-13016,13205296,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Dec/18 07:28,19/Dec/18 13:30,13/Mar/19 22:20,19/Dec/18 13:30,2.23.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,camel-jetty,,,,,,1,,,,"If you have 2 bundles that both uses the same context-path with a jetty consumer, then the last installed bundle will be routing the incoming requests, and the first installed will not be in use, and if you uninstall the 2nd bundle then the 1st bundle will still not be in use and jetty will return a 404.

We should detect that there is already another jetty consumer with the same context-path to be routing when creating a jetty connector listener and then fail if so.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 19 11:47:38 UTC 2018,,,,,,,0|u00494:,9223372036854775807,,,,,,,,,,19/Dec/18 10:30;davsclaus;There are some existing MultiPart unit tests that relied on the old behavior,19/Dec/18 11:47;davsclaus;Okay I got this fixed,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel mqtt crash using high volume traffic,CAMEL-13014,13205155,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,fabryprog,fabryprog,fabryprog,18/Dec/18 15:42,19/Dec/18 08:03,13/Mar/19 22:20,19/Dec/18 08:03,2.23.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,camel-mqtt,,,,,,0,,,,"Into current version we cannot use 2 (or more) sequential camel-mqtt producer.

With high volume traffic use case, we have this looped error:  
{quote}2018-12-18 16:27:12,609 [.0.1:36172@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36176
2018-12-18 16:27:12,609 [.0.1:36170@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36172
2018-12-18 16:27:12,614 [.0.1:36180@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36170
2018-12-18 16:27:12,639 [.0.1:36182@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36180
2018-12-18 16:27:12,639 [.0.1:36184@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36182
2018-12-18 16:27:12,662 [.0.1:36186@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36184
2018-12-18 16:27:12,662 [.0.1:36190@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36186
2018-12-18 16:27:12,666 [.0.1:36178@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36190
2018-12-18 16:27:12,668 [.0.1:36188@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36192
2018-12-18 16:27:12,668 [.0.1:36192@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36178
2018-12-18 16:27:12,669 [.0.1:36196@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36194
{quote}
 You can reproduce it using junit class *org.apache.camel.component.mqtt.MQTTLoopProducerTest*

 ",,"Fabryprog opened a new pull request #2678: CAMEL-13014 fix stealing link for clientId (looped error)
URL: https://github.com/apache/camel/pull/2678
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Dec/18 15:45;githubbot;600","oscerd closed pull request #2678: CAMEL-13014 fix stealing link for clientId (looped error)
URL: https://github.com/apache/camel/pull/2678
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java b/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java
index 5b70097f46c..12849656131 100644
--- a/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java
+++ b/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java
@@ -228,6 +228,7 @@ protected void doStart() throws Exception {
         super.doStart();
 
         createConnection();
+        connect();
     }
 
     protected void createConnection() {
diff --git a/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java b/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java
index 24e0ad4c250..dcc2d215b9b 100644
--- a/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java
+++ b/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java
@@ -63,7 +63,7 @@ public void testWildcardSubscribeTopicsConfiguration() throws Exception {
 
     @Test
     public void testExactlyOnceQualityOfServiceConfiguration() throws Exception {
-        Endpoint endpoint = context.getEndpoint(""mqtt:todo?qualityOfService=exactlyOnce"");
+        Endpoint endpoint = context.getEndpoint(""mqtt:todo?qualityOfService=exactlyOnce&host="" + MQTTTestSupport.getHostForMQTTEndpoint());
         assertTrue(""Endpoint not a MQTTEndpoint: "" + endpoint, endpoint instanceof MQTTEndpoint);
         MQTTEndpoint mqttEndpoint = (MQTTEndpoint)endpoint;
 
@@ -72,7 +72,7 @@ public void testExactlyOnceQualityOfServiceConfiguration() throws Exception {
 
     @Test
     public void testAtLeastOnceQualityOfServiceConfiguration() throws Exception {
-        Endpoint endpoint = context.getEndpoint(""mqtt:todo?qualityOfService=AtLeastOnce"");
+        Endpoint endpoint = context.getEndpoint(""mqtt:todo?qualityOfService=AtLeastOnce&host="" + MQTTTestSupport.getHostForMQTTEndpoint());
         assertTrue(""Endpoint not a MQTTEndpoint: "" + endpoint, endpoint instanceof MQTTEndpoint);
         MQTTEndpoint mqttEndpoint = (MQTTEndpoint)endpoint;
 
@@ -81,7 +81,7 @@ public void testAtLeastOnceQualityOfServiceConfiguration() throws Exception {
 
     @Test
     public void testAtMostOnceQualityOfServiceConfiguration() throws Exception {
-        Endpoint endpoint = context.getEndpoint(""mqtt:todo?qualityOfService=AtMostOnce"");
+        Endpoint endpoint = context.getEndpoint(""mqtt:todo?qualityOfService=AtMostOnce&host="" + MQTTTestSupport.getHostForMQTTEndpoint());
         assertTrue(""Endpoint not a MQTTEndpoint: "" + endpoint, endpoint instanceof MQTTEndpoint);
         MQTTEndpoint mqttEndpoint = (MQTTEndpoint)endpoint;
 
diff --git a/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTLoopProducerTest.java b/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTLoopProducerTest.java
new file mode 100644
index 00000000000..12662696cbb
--- /dev/null
+++ b/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTLoopProducerTest.java
@@ -0,0 +1,81 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.mqtt;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Producer;
+import org.apache.camel.builder.RouteBuilder;
+import org.fusesource.mqtt.client.BlockingConnection;
+import org.fusesource.mqtt.client.MQTT;
+import org.fusesource.mqtt.client.Message;
+import org.fusesource.mqtt.client.QoS;
+import org.fusesource.mqtt.client.Topic;
+import org.junit.Test;
+
+public class MQTTLoopProducerTest extends MQTTBaseTest {
+    @Test
+    public void testProduce() throws Exception {
+        MQTT mqtt = new MQTT();
+        mqtt.setHost(MQTTTestSupport.getHostForMQTTEndpoint());
+        final BlockingConnection subscribeConnection = mqtt.blockingConnection();
+        subscribeConnection.connect();
+        Topic topic = new Topic(TEST_TOPIC, QoS.AT_MOST_ONCE);
+        Topic[] topics = {topic};
+        subscribeConnection.subscribe(topics);
+        final CountDownLatch latch = new CountDownLatch(numberOfMessages * 2); //2 publishers
+
+        Thread thread = new Thread(new Runnable() {
+            public void run() {
+                for (int i = 0; i < numberOfMessages * 2; i++) {
+                    try {
+                        Message message = subscribeConnection.receive();
+                        message.ack();
+                        latch.countDown();
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                        break;
+                    }
+                }
+            }
+        });
+        thread.start();
+
+        Producer producer = context.getEndpoint(""direct:foo"").createProducer();
+        for (int i = 0; i < numberOfMessages; i++) {
+            Exchange exchange = producer.createExchange();
+            exchange.getIn().setBody(""test message "" + i);
+            producer.process(exchange);
+        }
+        latch.await(10, TimeUnit.SECONDS);
+        assertTrue(""Messages not consumed = "" + latch.getCount(), latch.getCount() == 0);
+    }
+
+    protected RouteBuilder createRouteBuilder() {
+        return new RouteBuilder() {
+            public void configure() {
+                from(""direct:foo"")
+                .setHeader(MQTTConfiguration.MQTT_PUBLISH_TOPIC, constant(TEST_TOPIC))
+                .to(""mqtt:boo1?host="" + MQTTTestSupport.getHostForMQTTEndpoint() + ""&qualityOfService=AtMostOnce"")
+                .setHeader(MQTTConfiguration.MQTT_PUBLISH_TOPIC, constant(TEST_TOPIC))
+                .to(""mqtt:boo2?host="" + MQTTTestSupport.getHostForMQTTEndpoint() + ""&qualityOfService=AtMostOnce"");
+            }
+        };
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Dec/18 07:28;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-12-18 15:42:48.0,,,,,,,0|u003ds:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core-osgi: OsgiServiceRegistry.onContextStop never gets called.,CAMEL-12987,13203243,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bobpaulin,bobpaulin,09/Dec/18 02:58,11/Dec/18 13:22,13/Mar/19 22:20,11/Dec/18 13:22,2.18.0,2.19.0,2.20.0,2.21.0,2.22.0,2.23.0,2.24.0,,,,,,,,,2.22.3,2.23.1,2.24.0,,,camel-osgi,,,,,,0,,,,"There is also a second problem with how the registry is being managed within the OsgiDefaultCamelContext.  OsgiServiceRegistry is currently extends LifecycleStrategySupport which is suppose to unload the serviceReferenceQueue onContextStop.  However the registry is never getting added to the CamelContext to manage the Lifecycle because the overridden createRegistry method in OsgiDefaultCamelContext is not being called.  This is because the registry is being set in the constructor of OsgiDefaultCamelContext with
{code:java}
super(registry);{code}
this calls the DefaultCamelContext implementation of createRegistry which does not add the registry to lifecyclemanagement since
{code:java}
OsgiCamelContextHelper.wrapRegistry(this, registry, bundleContext);{code}
is never called. 

See CAMEL-12969 for screen captures.

 ","Java 10

Karaf 4.2.1

Camel 2.22.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-09 03:06:29.279,,,no_permission,,Unknown,,,,Patch,,,,,,,,,9223372036854775807,,,Tue Dec 11 13:22:37 UTC 2018,,,Patch Available,,,,0|s01bf4:,9223372036854775807,,,,,,,,,,"09/Dec/18 03:06;githubbot;bobpaulin opened a new pull request #2660: CAMEL-12987: Ensure onContextStop is called on the OsgiServiceRegistry.
URL: https://github.com/apache/camel/pull/2660
 
 
   Split the onContextStop issue out of CAMEL-12969.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Dec/18 09:52;githubbot;davsclaus closed pull request #2660: CAMEL-12987: Ensure onContextStop is called on the OsgiServiceRegistry.
URL: https://github.com/apache/camel/pull/2660
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java
index 08ff669c59f..2b9b1fc4e60 100644
--- a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java
+++ b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java
@@ -56,14 +56,23 @@ public static void osgiUpdate(DefaultCamelContext camelContext, BundleContext bu
     public static Registry wrapRegistry(CamelContext camelContext, Registry registry, BundleContext bundleContext) {
         ObjectHelper.notNull(bundleContext, ""BundleContext"");
 
-        LOG.debug(""Setting up OSGi ServiceRegistry"");
-        OsgiServiceRegistry osgiServiceRegistry = new OsgiServiceRegistry(bundleContext);
+        OsgiServiceRegistry osgiServiceRegistry = null;
+        Registry resultingRegistry = registry;
+        if(registry instanceof OsgiServiceRegistry) {
+            osgiServiceRegistry = (OsgiServiceRegistry)registry;
+        } else {
+            LOG.debug(""Wrapping Registry in OsgiServiceRegistry"");
+            osgiServiceRegistry = new OsgiServiceRegistry(bundleContext);
+            CompositeRegistry compositeRegistry = new CompositeRegistry();
+            compositeRegistry.addRegistry(osgiServiceRegistry);
+            compositeRegistry.addRegistry(registry);
+            resultingRegistry = compositeRegistry;
+        }
+        
         // Need to clean up the OSGi service when camel context is closed.
         camelContext.addLifecycleStrategy(osgiServiceRegistry);
-        CompositeRegistry compositeRegistry = new CompositeRegistry();
-        compositeRegistry.addRegistry(osgiServiceRegistry);
-        compositeRegistry.addRegistry(registry);
-        return compositeRegistry;
+        
+        return resultingRegistry;
     }
 
 }
diff --git a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
index 20e3a21eca0..821ef5d7978 100644
--- a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
+++ b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
@@ -32,7 +32,6 @@
 public class OsgiDefaultCamelContext extends DefaultCamelContext {
 
     private final BundleContext bundleContext;
-    private final Registry registry;
 
     public OsgiDefaultCamelContext(BundleContext bundleContext) {
         this(bundleContext, new OsgiServiceRegistry(bundleContext));
@@ -41,7 +40,7 @@ public OsgiDefaultCamelContext(BundleContext bundleContext) {
     public OsgiDefaultCamelContext(BundleContext bundleContext, Registry registry) {
         super(registry);
         this.bundleContext = bundleContext;
-        this.registry = registry;
+        setRegistry(OsgiCamelContextHelper.wrapRegistry(this, registry, bundleContext));
         OsgiCamelContextHelper.osgiUpdate(this, bundleContext);
         // setup the application context classloader with the bundle classloader
         setApplicationContextClassLoader(new BundleDelegatingClassLoader(bundleContext.getBundle()));
@@ -52,15 +51,6 @@ public OsgiDefaultCamelContext(BundleContext bundleContext, Registry registry) {
         return BundleContextUtils.findComponents(bundleContext, this);
     }
 
-    @Override
-    protected Registry createRegistry() {
-        if (registry != null) {
-            return OsgiCamelContextHelper.wrapRegistry(this, registry, bundleContext);
-        } else {
-            return OsgiCamelContextHelper.wrapRegistry(this, super.createRegistry(), bundleContext);
-        }
-    }
-
     @Override
     protected TypeConverter createTypeConverter() {
         // CAMEL-3614: make sure we use a bundle context which imports org.apache.camel.impl.converter package


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",11/Dec/18 13:22;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TransactionErrorHandler fails if UnitOfWork is null -- This seems to happen sometimes with intercepted routes,CAMEL-12985,13203112,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,jsightle@redhat.com,jsightle@redhat.com,07/Dec/18 18:06,10/Dec/18 07:50,13/Mar/19 22:20,10/Dec/18 07:50,,,,,,,,,,,,,,,,2.22.3,2.23.1,2.24.0,3.0.0,,camel-spring-boot,,,,,,0,,,,"I have been getting NullPointerExceptions on tests for transacted routes as a result of this.

 

PR: [https://github.com/apache/camel/pull/2659] (includes unit test that fails on master)

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-12-07 18:06:41.0,,,,,,,0|s01amg:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AbstractCamelWorkItemHandler init fails when WIH is loaded before CamelContext is created.,CAMEL-12973,13201953,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,swiderski.maciej,ddoyle,ddoyle,03/Dec/18 10:37,04/Dec/18 13:09,13/Mar/19 22:20,04/Dec/18 13:07,2.23.0,,,,,,,,,,,,,,,2.23.1,2.24.0,,,,camel-jbpm,,,,,,0,,,,"When the AbstractCamelWorkItemHandler is created before the referenced CamelContext is created and registered, deployment of a KJAR fails with an IllegalArgumentException.

This can happen when the deployment uses a combination of a Singleton RuntimeStrategy and a Deployment-scoped CamelContext. This is due to the fact that the jBPM KIE-Server extension runs after the jBPM extension.

In such a situation we need to defer the creation of the ProducerTemplate until the first call to WIH.execute.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-03 10:58:06.207,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 04 13:09:10 UTC 2018,,,,,,,0|s013ko:,9223372036854775807,,,,,,,,,,"03/Dec/18 10:58;githubbot;DuncanDoyle opened a new pull request #2649: CAMEL-12973: Init deferred to first call when WIH uses Deployment-sco…
URL: https://github.com/apache/camel/pull/2649
 
 
   …ped context in combination with Singleton RuntimeStrategy. Removed redundant double slash from 'direct' URL.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Dec/18 13:07;githubbot;oscerd commented on issue #2649: CAMEL-12973: Init deferred to first call when WIH uses Deployment-sco…
URL: https://github.com/apache/camel/pull/2649#issuecomment-444093483
 
 
   Thanks, I fixed the CS a bit. Merged on master and 2.23.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Dec/18 13:08;githubbot;mswiderski commented on issue #2649: CAMEL-12973: Init deferred to first call when WIH uses Deployment-sco…
URL: https://github.com/apache/camel/pull/2649#issuecomment-444093777
 
 
   excellent, thanks a lot @oscerd and @DuncanDoyle 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Dec/18 13:09;githubbot;oscerd closed pull request #2649: CAMEL-12973: Init deferred to first call when WIH uses Deployment-sco…
URL: https://github.com/apache/camel/pull/2649
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelCommand.java b/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelCommand.java
index 1900960ed2b..212dd7156e2 100644
--- a/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelCommand.java
+++ b/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelCommand.java
@@ -35,7 +35,7 @@
  * The command passes the {@WorkItem} retrieved from the {@link CommandContext} to the route that has a consumer on the endpoint-id 
  * that can be passed with the <code>camel-endpoint-id</code> {@link WorkItem} parameter. E.g. when a the value ""myCamelEndpoint"" is passed to the 
  * {link WorkItem} via the <code>camel-endpoint-id</code> parameter, this {@link Command} will send the {@link WorkItem} to 
- * the Camel URI <code>direct://myCamelEndpoint</code>.  
+ * the Camel URI <code>direct:myCamelEndpoint</code>.  
  * <p/>
  * The body of the result {@link Message} of the invocation is returned via the <code>Response</code> parameter. Access to the raw response 
  * {@link Message} is provided via the <code>Message</code> parameter. This gives the user access to more advanced fields like message headers 
@@ -55,7 +55,7 @@ public ExecutionResults execute(CommandContext ctx) throws Exception {
         String camelEndpointId = (String) workItem.getParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM);
 
         // We only support direct. We don't need to support more, as direct simply gives us the entrypoint into the actual Camel Routes.
-        String camelUri = ""direct://"" + camelEndpointId;
+        String camelUri = ""direct:"" + camelEndpointId;
         
         ProducerTemplate producerTemplate = getProducerTemplate(ctx);
         Exchange inExchange = ExchangeBuilder.anExchange(producerTemplate.getCamelContext()).withBody(workItem).build();
diff --git a/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelWorkItemHandler.java b/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelWorkItemHandler.java
index d5ea7df9092..1361889f26c 100644
--- a/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelWorkItemHandler.java
+++ b/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelWorkItemHandler.java
@@ -35,9 +35,9 @@
  * Camel jBPM {@link WorkItemHandler} which allows to call Camel routes with a <code>direct</code> endpoint.
  * <p/>
  * The handler passes the {@WorkItem} to the route that has a consumer on the endpoint-id that can be passed with the
- * <code>CamelEndpointId</code>{@link WorkItem} parameter. E.g. when a the value ""myCamelEndpoint"" is passed to the {link WorkItem} via
- * the <code>CamelEndpointId</code> parameter, this command will send the {@link WorkItem} to the Camel URI
- * <code>direct://myCamelEndpoint</code>.
+ * <code>CamelEndpointId</code>{@link WorkItem} parameter. E.g. when a the value ""myCamelEndpoint"" is passed to the {link WorkItem} via the
+ * <code>CamelEndpointId</code> parameter, this command will send the {@link WorkItem} to the Camel URI
+ * <code>direct:myCamelEndpoint</code>.
  * <p/>
  * The body of the result {@link Message} of the invocation is returned via the <code>Response</code> parameter. Access to the raw response
  * {@link Message} is provided via the <code>Message</code> parameter. This gives the user access to more advanced fields like message
@@ -47,18 +47,22 @@
  * to find the global KIE {@link CamelContext} from the <code>jBPM</code> {@link ServiceRegistry}. When the {@link RuntimeManager} is passed
  * to the constructor, the handler will retrieve and use the {@link CamelContext} bound to the {@link RuntimeManage} from the
  * {@link ServiceRegistry}. When a <code>CamelEndpointId</code> is passed to the constructor, the handler will send all requests to the
- * Camel route that is consuming from that endpoint, unless the endpoint is overridden by passing a the <code>CamelEndpointId</code> in
- * the {@link WorkItem} parameters.
+ * Camel route that is consuming from that endpoint, unless the endpoint is overridden by passing a the <code>CamelEndpointId</code> in the
+ * {@link WorkItem} parameters.
  * 
  */
 public abstract class AbstractCamelWorkItemHandler extends AbstractLogOrThrowWorkItemHandler implements Cacheable {
 
     private static Logger logger = LoggerFactory.getLogger(AbstractCamelWorkItemHandler.class);
 
-    private final ProducerTemplate producerTemplate;
+    private ProducerTemplate producerTemplate;
 
     private final String camelEndpointId;
-
+    
+    private final String camelContextKey;
+    
+    private boolean initialized = false;
+    
     /**
      * Default Constructor. This creates a {@link ProducerTemplate} for the global {@link CamelContext}.
      */
@@ -67,9 +71,10 @@ public AbstractCamelWorkItemHandler() {
     }
 
     public AbstractCamelWorkItemHandler(String camelEndointId) {
-        CamelContext globalCamelContext = (CamelContext) ServiceRegistry.get().service(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY);
-        this.producerTemplate = globalCamelContext.createProducerTemplate();
         this.camelEndpointId = camelEndointId;
+        this.camelContextKey = JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY;
+        this.producerTemplate = buildProducerTemplate(camelContextKey);
+        this.initialized = true;
     }
 
     /**
@@ -81,18 +86,38 @@ public AbstractCamelWorkItemHandler(RuntimeManager runtimeManager) {
     }
 
     public AbstractCamelWorkItemHandler(RuntimeManager runtimeManager, String camelEndpointId) {
-        String runtimeCamelContextKey = runtimeManager.getIdentifier() + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX;
-        CamelContext runtimeCamelContext = (CamelContext) ServiceRegistry.get().service(runtimeCamelContextKey);
-        this.producerTemplate = runtimeCamelContext.createProducerTemplate();
         this.camelEndpointId = camelEndpointId;
+        this.camelContextKey = runtimeManager.getIdentifier() + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX;
+        /*
+         * Depending on the order of session creation and CamelContext creation and registration, the CamelContext might not yet be
+         * available. Hence, when we deal with a Deployment scoped CamelContext, we can lazy-init when the context is not yet available.
+         */
+        try {
+            this.producerTemplate = buildProducerTemplate(camelContextKey);
+            this.initialized = true;
+        } catch (IllegalArgumentException iae) {
+            String message = ""CamelContext with identifier '"" + camelContextKey
+                    + ""' not found in ServiceRegistry. This can be caused by the order in which the platform extensions are initialized. Deferring Camel ProducerTemplate creation until the first WorkItemHandler call."";
+            logger.info(message, iae);
+        }
     }
 
+    private ProducerTemplate buildProducerTemplate(String key) {
+        CamelContext camelContext = (CamelContext) ServiceRegistry.get().service(key);
+        return this.producerTemplate = camelContext.createProducerTemplate();
+    }
+    
+    
     public void executeWorkItem(WorkItem workItem, final WorkItemManager manager) {
+        if (!initialized) {
+            this.producerTemplate = buildProducerTemplate(camelContextKey);
+            initialized = true;
+        }
 
         String workItemCamelEndpointId = getCamelEndpointId(workItem);
 
         // We only support direct. We don't need to support more, as direct simply gives us the entrypoint into the actual Camel Routes.
-        String camelUri = ""direct://"" + workItemCamelEndpointId;
+        String camelUri = ""direct:"" + workItemCamelEndpointId;
 
         try {
             Exchange requestExchange = buildExchange(producerTemplate, workItem);
diff --git a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/CamelWorkItemHandlerIntegrationTests.java b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/CamelWorkItemHandlerIntegrationTests.java
index 67d54fb69bb..a0fcee5de56 100644
--- a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/CamelWorkItemHandlerIntegrationTests.java
+++ b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/CamelWorkItemHandlerIntegrationTests.java
@@ -79,6 +79,7 @@ public void configure() throws Exception {
         } finally {
             // Cleanup
             context.removeRoute(routeId);
+            ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY);
         }
     }
 
@@ -120,6 +121,7 @@ public void configure() throws Exception {
         } finally {
             // Cleanup
             context.removeRoute(routeId);
+            ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY);
         }
     }
 
@@ -160,6 +162,7 @@ public void configure() throws Exception {
         } finally {
             // Cleanup
             context.removeRoute(routeId);
+            ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY);
         }
 
     }
@@ -198,6 +201,7 @@ public void configure() throws Exception {
         } finally {
             // Cleanup
             context.removeRoute(routeId);
+            ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY);
         }
     }
 
diff --git a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/DeploymentContextCamelCommandTest.java b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/DeploymentContextCamelCommandTest.java
index b0086b9f602..d2d3d94ce36 100644
--- a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/DeploymentContextCamelCommandTest.java
+++ b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/DeploymentContextCamelCommandTest.java
@@ -38,58 +38,62 @@
 
 @RunWith(MockitoJUnitRunner.class)
 public class DeploymentContextCamelCommandTest {
-    
+
     @Mock
     ProducerTemplate producerTemplate;
 
     @Mock
     Exchange outExchange;
-    
+
     @Mock
     Message outMessage;
-    
+
     @Mock
     CamelContext camelContext;
-    
+
     @Mock
     RuntimeManager runtimeManager;
-    
+
     @Mock
     CommandContext commandContext;
 
     @Test
     public void testExecuteCommandDeploymentCamelContext() throws Exception {
-    
+
         String camelEndpointId = ""testCamelRoute"";
-        String camelRouteUri = ""direct://"" + camelEndpointId;
-        
+        String camelRouteUri = ""direct:"" + camelEndpointId;
+
         String testReponse = ""testResponse"";
-        
+
         String deploymentId = ""testDeployment"";
-        
+
         when(producerTemplate.send(eq(camelRouteUri), any(Exchange.class))).thenReturn(outExchange);
         when(producerTemplate.getCamelContext()).thenReturn(camelContext);
-        
+
         when(camelContext.createProducerTemplate()).thenReturn(producerTemplate);
-        
+
         when(outExchange.getOut()).thenReturn(outMessage);
         when(outMessage.getBody()).thenReturn(testReponse);
-        
-        //Register the RuntimeManager bound camelcontext.
-        ServiceRegistry.get().register(deploymentId + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX, camelContext);
-        
-        WorkItemImpl workItem = new WorkItemImpl();
-        workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
-        workItem.setParameter(""Request"", ""someRequest"");
-        
-        when(commandContext.getData(""workItem"")).thenReturn(workItem);
-        when(commandContext.getData(""deploymentId"")).thenReturn(deploymentId);
-        
-        Command command = new DeploymentContextCamelCommand();
-        ExecutionResults results = command.execute(commandContext);
-        
-        assertNotNull(results);
-        assertEquals(2, results.getData().size());
-        assertEquals(testReponse, results.getData().get(JBPMConstants.RESPONSE_WI_PARAM));
+
+        // Register the RuntimeManager bound camelcontext.
+        try {
+            ServiceRegistry.get().register(deploymentId + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX, camelContext);
+
+            WorkItemImpl workItem = new WorkItemImpl();
+            workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
+            workItem.setParameter(""Request"", ""someRequest"");
+
+            when(commandContext.getData(""workItem"")).thenReturn(workItem);
+            when(commandContext.getData(""deploymentId"")).thenReturn(deploymentId);
+
+            Command command = new DeploymentContextCamelCommand();
+            ExecutionResults results = command.execute(commandContext);
+
+            assertNotNull(results);
+            assertEquals(2, results.getData().size());
+            assertEquals(testReponse, results.getData().get(JBPMConstants.RESPONSE_WI_PARAM));
+        } finally {
+            ServiceRegistry.get().remove(deploymentId + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX);
+        }
     }
 }
diff --git a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/GlobalContextCamelCommandTest.java b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/GlobalContextCamelCommandTest.java
index 031bc69e30b..0d0db7cab8a 100644
--- a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/GlobalContextCamelCommandTest.java
+++ b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/GlobalContextCamelCommandTest.java
@@ -44,16 +44,16 @@
 
     @Mock
     Exchange outExchange;
-    
+
     @Mock
     Message outMessage;
-    
+
     @Mock
     CamelContext camelContext;
-    
+
     @Mock
     RuntimeManager runtimeManager;
-    
+
     @Mock
     CommandContext commandContext;
 
@@ -61,7 +61,7 @@
     public void testExecuteGlobalCommand() throws Exception {
     
         String camelEndpointId = ""testCamelRoute"";
-        String camelRouteUri = ""direct://"" + camelEndpointId;
+        String camelRouteUri = ""direct:"" + camelEndpointId;
 
         String testReponse = ""testResponse"";
 
@@ -76,20 +76,24 @@ public void testExecuteGlobalCommand() throws Exception {
         when(outExchange.getOut()).thenReturn(outMessage);
         when(outMessage.getBody()).thenReturn(testReponse);
 
-        //Register the RuntimeManager bound camelContext.
-        ServiceRegistry.get().register(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY, camelContext);
+        // Register the RuntimeManager bound camelcontext.
+        try {
+            ServiceRegistry.get().register(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY, camelContext);
 
-        WorkItemImpl workItem = new WorkItemImpl();
-        workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
-        workItem.setParameter(""Request"", ""someRequest"");
+            WorkItemImpl workItem = new WorkItemImpl();
+            workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
+            workItem.setParameter(""Request"", ""someRequest"");
 
-        when(commandContext.getData(anyString())).thenReturn(workItem);
+            when(commandContext.getData(anyString())).thenReturn(workItem);
 
-        Command command = new GlobalContextCamelCommand();
-        ExecutionResults results = command.execute(commandContext);
+            Command command = new GlobalContextCamelCommand();
+            ExecutionResults results = command.execute(commandContext);
 
-        assertNotNull(results);
-        assertEquals(2, results.getData().size());
-        assertEquals(testReponse, results.getData().get(JBPMConstants.RESPONSE_WI_PARAM));
+            assertNotNull(results);
+            assertEquals(2, results.getData().size());
+            assertEquals(testReponse, results.getData().get(JBPMConstants.RESPONSE_WI_PARAM));
+        } finally {
+            ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY);
+        }
     }
 }
\ No newline at end of file
diff --git a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOnlyCamelWorkItemHandlerTest.java b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOnlyCamelWorkItemHandlerTest.java
index b97822ead63..324f04cf3f9 100644
--- a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOnlyCamelWorkItemHandlerTest.java
+++ b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOnlyCamelWorkItemHandlerTest.java
@@ -60,7 +60,7 @@
     public void testExecuteInOnlyLocalCamelContext() throws Exception {
 
         String camelEndpointId = ""testCamelRoute"";
-        String camelRouteUri = ""direct://"" + camelEndpointId;
+        String camelRouteUri = ""direct:"" + camelEndpointId;
 
         String testReponse = ""testResponse"";
 
@@ -76,22 +76,26 @@ public void testExecuteInOnlyLocalCamelContext() throws Exception {
         when(camelContext.getHeadersMapFactory()).thenReturn(hmf);
 
         // Register the RuntimeManager bound camelcontext.
-        ServiceRegistry.get().register(runtimeManagerId + ""_CamelService"", camelContext);
-
-        WorkItemImpl workItem = new WorkItemImpl();
-        workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
-        workItem.setParameter(""Request"", ""someRequest"");
-        workItem.setDeploymentId(""testDeploymentId"");
-        workItem.setProcessInstanceId(1L);
-        workItem.setId(1L);
-        
-        AbstractCamelWorkItemHandler handler = new InOnlyCamelWorkItemHandler(runtimeManager);
-
-        TestWorkItemManager manager = new TestWorkItemManager();
-        handler.executeWorkItem(workItem,
-                manager);
-        assertThat(manager.getResults(), is(notNullValue()));
-        //InOnly does not complete WorkItem.
-        assertThat(manager.getResults().size(), equalTo(0));
+        try {
+            ServiceRegistry.get().register(runtimeManagerId + ""_CamelService"", camelContext);
+
+            WorkItemImpl workItem = new WorkItemImpl();
+            workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
+            workItem.setParameter(""Request"", ""someRequest"");
+            workItem.setDeploymentId(""testDeploymentId"");
+            workItem.setProcessInstanceId(1L);
+            workItem.setId(1L);
+
+            AbstractCamelWorkItemHandler handler = new InOnlyCamelWorkItemHandler(runtimeManager);
+
+            TestWorkItemManager manager = new TestWorkItemManager();
+            handler.executeWorkItem(workItem,
+                    manager);
+            assertThat(manager.getResults(), is(notNullValue()));
+            // InOnly does not complete WorkItem.
+            assertThat(manager.getResults().size(), equalTo(0));
+        } finally {
+            ServiceRegistry.get().remove(runtimeManagerId + ""_CamelService"");
+        }
     }
 }
diff --git a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOutCamelWorkItemHandlerTest.java b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOutCamelWorkItemHandlerTest.java
index 578de782f36..8453f09cd35 100644
--- a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOutCamelWorkItemHandlerTest.java
+++ b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOutCamelWorkItemHandlerTest.java
@@ -63,7 +63,7 @@
     public void testExecuteInOutGlobalCamelContext() throws Exception {
 
         String camelEndpointId = ""testCamelRoute"";
-        String camelRouteUri = ""direct://"" + camelEndpointId;
+        String camelRouteUri = ""direct:"" + camelEndpointId;
 
         String testReponse = ""testResponse"";
 
@@ -77,6 +77,7 @@ public void testExecuteInOutGlobalCamelContext() throws Exception {
         when(outExchange.getOut()).thenReturn(outMessage);
         when(outMessage.getBody()).thenReturn(testReponse);
 
+        try {
         ServiceRegistry.get().register(""GlobalCamelService"", camelContext);
 
         TestWorkItemManager manager = new TestWorkItemManager();
@@ -97,13 +98,18 @@ public void testExecuteInOutGlobalCamelContext() throws Exception {
         Map<String, Object> results = manager.getResults(workItem.getId());
         assertThat(results.size(), equalTo(2));
         assertThat(results.get(""Response""), equalTo(testReponse));
+        
+        } finally {
+            ServiceRegistry.get().remove(""GlobalCamelService"");
+        }
+        
     }
 
     @Test
     public void testExecuteInOutLocalCamelContext() throws Exception {
 
         String camelEndpointId = ""testCamelRoute"";
-        String camelRouteUri = ""direct://"" + camelEndpointId;
+        String camelRouteUri = ""direct:"" + camelEndpointId;
 
         String testReponse = ""testResponse"";
 
@@ -122,7 +128,94 @@ public void testExecuteInOutLocalCamelContext() throws Exception {
         when(outMessage.getBody()).thenReturn(testReponse);
 
         // Register the RuntimeManager bound camelcontext.
-        ServiceRegistry.get().register(runtimeManagerId + ""_CamelService"", camelContext);
+        try {
+            ServiceRegistry.get().register(runtimeManagerId + ""_CamelService"", camelContext);
+
+            WorkItemImpl workItem = new WorkItemImpl();
+            workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
+            workItem.setParameter(""Request"", ""someRequest"");
+            workItem.setDeploymentId(""testDeploymentId"");
+            workItem.setProcessInstanceId(1L);
+            workItem.setId(1L);
+
+            AbstractCamelWorkItemHandler handler = new InOutCamelWorkItemHandler(runtimeManager);
+
+            TestWorkItemManager manager = new TestWorkItemManager();
+            handler.executeWorkItem(workItem,
+                    manager);
+            assertThat(manager.getResults(), is(notNullValue()));
+            assertThat(manager.getResults().size(), equalTo(1));
+            assertThat(manager.getResults().containsKey(workItem.getId()), is(true));
+
+            Map<String, Object> results = manager.getResults(workItem.getId());
+            assertThat(results.size(), equalTo(2));
+            assertThat(results.get(JBPMConstants.RESPONSE_WI_PARAM), equalTo(testReponse));
+        } finally {
+            ServiceRegistry.get().remove(runtimeManagerId + ""_CamelService"");
+        }
+    }
+
+    @Test
+    public void testExecuteInOutLocalCamelContextLazyInit() throws Exception {
+
+        String camelEndpointId = ""testCamelRoute"";
+        String camelRouteUri = ""direct:"" + camelEndpointId;
+
+        String testReponse = ""testResponse"";
+
+        String runtimeManagerId = ""testRuntimeManager"";
+
+        when(runtimeManager.getIdentifier()).thenReturn(runtimeManagerId);
+
+        when(producerTemplate.send(eq(camelRouteUri), ArgumentMatchers.any(Exchange.class))).thenReturn(outExchange);
+        when(producerTemplate.getCamelContext()).thenReturn(camelContext);
+
+        when(camelContext.createProducerTemplate()).thenReturn(producerTemplate);
+        HeadersMapFactory hmf = new DefaultHeadersMapFactory();
+        when(camelContext.getHeadersMapFactory()).thenReturn(hmf);
+
+        when(outExchange.getOut()).thenReturn(outMessage);
+        when(outMessage.getBody()).thenReturn(testReponse);
+
+        WorkItemImpl workItem = new WorkItemImpl();
+        workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
+        workItem.setParameter(""Request"", ""someRequest"");
+        workItem.setDeploymentId(""testDeploymentId"");
+        workItem.setProcessInstanceId(1L);
+        workItem.setId(1L);
+
+        AbstractCamelWorkItemHandler handler = new InOutCamelWorkItemHandler(runtimeManager);
+
+        // Register the context after we've created the WIH to test lazy-init.
+        try {
+            ServiceRegistry.get().register(runtimeManagerId + ""_CamelService"", camelContext);
+
+            TestWorkItemManager manager = new TestWorkItemManager();
+            handler.executeWorkItem(workItem,
+                    manager);
+            assertThat(manager.getResults(), is(notNullValue()));
+            assertThat(manager.getResults().size(), equalTo(1));
+            assertThat(manager.getResults().containsKey(workItem.getId()), is(true));
+
+            Map<String, Object> results = manager.getResults(workItem.getId());
+            assertThat(results.size(), equalTo(2));
+            assertThat(results.get(JBPMConstants.RESPONSE_WI_PARAM), equalTo(testReponse));
+        } finally {
+            ServiceRegistry.get().remove(runtimeManagerId + ""_CamelService"");
+        }
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testExecuteInOutLocalCamelContextLazyInitFail() throws Exception {
+
+        String camelEndpointId = ""testCamelRoute"";
+        String camelRouteUri = ""direct:"" + camelEndpointId;
+
+        String testReponse = ""testResponse"";
+
+        String runtimeManagerId = ""testRuntimeManager"";
+
+        when(runtimeManager.getIdentifier()).thenReturn(runtimeManagerId);
 
         WorkItemImpl workItem = new WorkItemImpl();
         workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
@@ -134,15 +227,9 @@ public void testExecuteInOutLocalCamelContext() throws Exception {
         AbstractCamelWorkItemHandler handler = new InOutCamelWorkItemHandler(runtimeManager);
 
         TestWorkItemManager manager = new TestWorkItemManager();
-        handler.executeWorkItem(workItem,
-                manager);
-        assertThat(manager.getResults(), is(notNullValue()));
-        assertThat(manager.getResults().size(), equalTo(1));
-        assertThat(manager.getResults().containsKey(workItem.getId()), is(true));
-        
-        Map<String, Object> results = manager.getResults(workItem.getId());
-        assertThat(results.size(), equalTo(2));
-        assertThat(results.get(JBPMConstants.RESPONSE_WI_PARAM), equalTo(testReponse));
+        // This is expected to throw an exception.
+        handler.executeWorkItem(workItem, manager);
+
     }
-   
+
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong camel context bound in service registry of jbpm/Kie Server,CAMEL-12958,13200554,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,swiderski.maciej,swiderski.maciej,swiderski.maciej,26/Nov/18 12:42,27/Nov/18 17:22,13/Mar/19 22:20,27/Nov/18 17:22,2.23.0,,,,,,,,,,,,,,,2.23.1,2.24.0,,,,camel-jbpm,,,,,,0,,,,Wrong camel context is set in the ServiceRegistry of jBPM when creating kie container specific camel context.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-26 12:43:37.523,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 27 10:23:10 UTC 2018,,,,,,,0|s00uyw:,9223372036854775807,,,,,,,,,,"26/Nov/18 12:43;githubbot;mswiderski opened a new pull request #2637: CAMEL-12958 - Wrong camel context bound in service registry of jbpm/K…
URL: https://github.com/apache/camel/pull/2637
 
 
   …ie Server

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Nov/18 10:20;githubbot;mswiderski commented on issue #2637: CAMEL-12958 - Wrong camel context bound in service registry of jbpm/K…
URL: https://github.com/apache/camel/pull/2637#issuecomment-442005294
 
 
   I see that pom.xml is still pointing to 2.23.0-SNAPSHOT so was wondering if this has any chance to be in 2.23.0 release or is it too late?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Nov/18 10:21;githubbot;oscerd commented on issue #2637: CAMEL-12958 - Wrong camel context bound in service registry of jbpm/K…
URL: https://github.com/apache/camel/pull/2637#issuecomment-442005440
 
 
   It's under vote, it will be in 2.23.1

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Nov/18 10:22;githubbot;mswiderski commented on issue #2637: CAMEL-12958 - Wrong camel context bound in service registry of jbpm/K…
URL: https://github.com/apache/camel/pull/2637#issuecomment-442005974
 
 
   sounds good, thanks

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Nov/18 10:23;githubbot;oscerd commented on issue #2637: CAMEL-12958 - Wrong camel context bound in service registry of jbpm/K…
URL: https://github.com/apache/camel/pull/2637#issuecomment-442006129
 
 
   Pushed on master and 2.23.x, thanks @mswiderski 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Nov/18 10:23;githubbot;oscerd closed pull request #2637: CAMEL-12958 - Wrong camel context bound in service registry of jbpm/K…
URL: https://github.com/apache/camel/pull/2637
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/server/CamelKieServerExtension.java b/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/server/CamelKieServerExtension.java
index fbc4448d59c..0e297bece0f 100644
--- a/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/server/CamelKieServerExtension.java
+++ b/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/server/CamelKieServerExtension.java
@@ -117,7 +117,7 @@ public void createContainer(String id, KieContainerInstance kieContainerInstance
                 context.start();
                 camelContexts.put(id, context);
 
-                ServiceRegistry.get().register(id + ""_CamelService"", this.camel);
+                ServiceRegistry.get().register(id + ""_CamelService"", context);
 
             }
         } catch (Exception e) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Error during type conversion from type: java.lang.String to the required type: org.elasticsearch.action.update.UpdateRequest,CAMEL-12774,13182841,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,johnbolshakov,johnbolshakov,04/Sep/18 15:21,20/Nov/18 13:50,13/Mar/19 22:20,20/Nov/18 13:49,2.22.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,camel-elasticsearch-rest,,,,,,0,,,,"When I try to update es document using Update method of camel-elasticsearch-rest endpoint I got this error

*Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: org.elasticsearch.action.update.UpdateRequest with value \{teststringupdate-key2=teststringupdate-value2} due java.lang.IllegalArgumentException: The number of object passed must be even but was [1]*

This is because method {color:#353833}[doc|https://static.javadoc.io/org.elasticsearch/elasticsearch/5.0.0/org/elasticsearch/action/update/UpdateRequest.html#doc-java.lang.String-]{color}{color:#353833}(java.lang.String source){color} org.elasticsearch.action.update does not exist in

<{color:#000080}elasticsearch-rest-version{color}>6.1.1</{color:#000080}elasticsearch-rest-version{color}>.

In attach you can see test for this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20/Nov/18 11:45;johnbolshakov;ElasticsearchGetSearchDeleteExistsUpdateTest.java;https://issues.apache.org/jira/secure/attachment/12948862/ElasticsearchGetSearchDeleteExistsUpdateTest.java,04/Sep/18 15:20;johnbolshakov;ElasticsearchUpdateStringTest.java;https://issues.apache.org/jira/secure/attachment/12938269/ElasticsearchUpdateStringTest.java,,,2.0,,,,,,,,,,,,,,,,,,,2018-09-05 06:20:18.051,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 20 13:50:30 UTC 2018,,,,,,,0|i3xpmv:,9223372036854775807,,,,,,,,,,05/Sep/18 06:20;ancosen;Thanks for spotting this.,20/Nov/18 09:02;johnbolshakov;It look's like not fixed in version 2.22.2,"20/Nov/18 09:11;ancosen;[https://github.com/apache/camel/commit/a47434000734e384ecee746c7d1e30a3b0c1290f]

Here is the commit","20/Nov/18 09:14;ancosen;and if you download the sources [http://repo2.maven.org/maven2/org/apache/camel/camel-elasticsearch-rest/2.22.2/]

In the ActionConverter there is the fix",20/Nov/18 09:15;ancosen;the version used in 2.22.2 is still 6.1.1,"20/Nov/18 09:26;johnbolshakov;Andrea, thank you!","20/Nov/18 09:36;ancosen;If you find any kind of problem, please report here, do you think we can close this or do you prefer to double check?","20/Nov/18 11:44;johnbolshakov;Please review this test code

It looks like new Update adds some other content into ES document.",20/Nov/18 11:45;johnbolshakov;[^ElasticsearchGetSearchDeleteExistsUpdateTest.java],"20/Nov/18 11:50;ancosen;That's the test we have in the repo. I don't get what you're asking for.. Does it work for you, I mean for your use case?","20/Nov/18 12:07;johnbolshakov;I have added to this test additional strings:
{color:#4ec9b0}GetResponse{color} {color:#9cdcfe}response{color} {color:#d4d4d4}={color} {color:#9cdcfe}template{color}{color:#d4d4d4}.{color}{color:#dcdcaa}requestBody{color}{color:#d4d4d4}({color}{color:#ce9178}""direct:get""{color}{color:#d4d4d4}, indexId, {color}{color:#9cdcfe}GetResponse{color}{color:#d4d4d4}.{color}{color:#9cdcfe}class{color}{color:#d4d4d4});{color}
{color:#dcdcaa}assertEquals{color}{color:#d4d4d4}(body, {color}{color:#9cdcfe}response{color}{color:#d4d4d4}.{color}{color:#dcdcaa}getSource{color}{color:#d4d4d4}());{color}
{color:#333333}{color:#333333}Where I am checking that content of document in elasticksearch after update is{color}{color}{color:#008000}""{{color}{color:#000080}\""{color}{color:#008000}id{color}{color:#000080}\""{color}{color:#008000} : 1}""{color}.
{color:#333333}And it fails.{color}","20/Nov/18 13:50;ancosen;Thanks for spotting this, it was an error in the xcontentType parameter. My fault, I was passing the xcontent value as a key to use and the String as document.. Now it should work fine.",,,,,,,,,,,,,,,,,,,,,
Handle LinkedIn Captcha redirects gracefully,CAMEL-12899,13194051,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,25/Oct/18 05:14,16/Nov/18 09:46,13/Mar/19 22:20,16/Nov/18 09:46,2.22.1,,,,,,,,,,,,,,,2.22.3,2.23.0,,,,camel-linkedin,,,,,,0,camel-linkedin,LinkedIn,,"Currently LinkedIn component throws the exception
{code:java}
java.lang.SecurityException: Invalid CSRF code!{code}
when LinkedIn responds with a CAPTCHA instead of a login token. 

Instead it should detect ac CAPTCHA response and print an appropriate message. In addition, since username and password authentication may not work, the component should support configuring a user generated access token to bypass the LinkedIn login process and still be able to use LinkedIn API. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-25 05:31:34.344,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 25 17:52:14 UTC 2018,,,,,,,0|i3zm9r:,9223372036854775807,,,,,,,,,,"25/Oct/18 05:31;githubbot;dhirajsb opened a new pull request #2578: CAMEL-12899: Added check for LinkedIn CAPTCHA, added accessToken and …
URL: https://github.com/apache/camel/pull/2578
 
 
   …expiryTime properties to avoid login issues

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Oct/18 17:17;githubbot;dhirajsb closed pull request #2578: CAMEL-12899: Added check for LinkedIn CAPTCHA, added accessToken and …
URL: https://github.com/apache/camel/pull/2578
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-linkedin/camel-linkedin-api/src/main/java/org/apache/camel/component/linkedin/api/LinkedInOAuthRequestFilter.java b/components/camel-linkedin/camel-linkedin-api/src/main/java/org/apache/camel/component/linkedin/api/LinkedInOAuthRequestFilter.java
index 51e701f3017..a82a26b252f 100644
--- a/components/camel-linkedin/camel-linkedin-api/src/main/java/org/apache/camel/component/linkedin/api/LinkedInOAuthRequestFilter.java
+++ b/components/camel-linkedin/camel-linkedin-api/src/main/java/org/apache/camel/component/linkedin/api/LinkedInOAuthRequestFilter.java
@@ -27,7 +27,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-
 import javax.annotation.Priority;
 import javax.ws.rs.Priorities;
 import javax.ws.rs.client.ClientRequestContext;
@@ -51,6 +50,7 @@
 import com.gargoylesoftware.htmlunit.html.HtmlSubmitInput;
 import com.gargoylesoftware.htmlunit.html.HtmlTextInput;
 import com.gargoylesoftware.htmlunit.util.WebConnectionWrapper;
+
 import org.apache.http.HttpHeaders;
 import org.apache.http.HttpHost;
 import org.apache.http.HttpStatus;
@@ -158,23 +158,31 @@ private String getRefreshToken() {
                 url = String.format(AUTHORIZATION_URL_WITH_SCOPE, oAuthParams.getClientId(), csrfId,
                     builder.toString(), encodedRedirectUri);
             }
-            HtmlPage authPage;
+            HtmlPage authPage = null;
             try {
                 authPage = webClient.getPage(url);
             } catch (FailingHttpStatusCodeException e) {
                 // only handle errors returned with redirects
-                if (e.getStatusCode() == HttpStatus.SC_MOVED_TEMPORARILY) {
-                    final URL location = new URL(e.getResponse().getResponseHeaderValue(HttpHeaders.LOCATION));
-                    final String locationQuery = location.getQuery();
-                    if (locationQuery != null && locationQuery.contains(""error="")) {
-                        throw new IOException(URLDecoder.decode(locationQuery).replaceAll(""&"", "", ""));
-                    } else {
-                        // follow the redirect to login form
-                        authPage = webClient.getPage(location);
-                    }
-                } else {
-                    throw e;
-                }
+                boolean done = false;
+                do {
+                        if (e.getStatusCode() == HttpStatus.SC_MOVED_TEMPORARILY || e.getStatusCode() == HttpStatus.SC_SEE_OTHER) {
+                            final URL location = new URL(e.getResponse().getResponseHeaderValue(HttpHeaders.LOCATION));
+                            final String locationQuery = location.getQuery();
+                            if (locationQuery != null && locationQuery.contains(""error="")) {
+                                throw new IOException(URLDecoder.decode(locationQuery).replaceAll(""&"", "", ""));
+                            } else {
+                                // follow the redirect to login form
+                                try {
+                                    authPage = webClient.getPage(location);
+                                    done = true;
+                                } catch (FailingHttpStatusCodeException e1) {
+                                    e = e1;
+                                }
+                            }
+                        } else {
+                            throw e;
+                        }
+                } while (!done);
             }
 
             // look for <div role=""alert"">
@@ -184,12 +192,12 @@ private String getRefreshToken() {
             }
 
             // submit login credentials
-            final HtmlForm loginForm = authPage.getFormByName(""oauth2SAuthorizeForm"");
+            final HtmlForm loginForm = authPage.getForms().get(0);
             final HtmlTextInput login = loginForm.getInputByName(""session_key"");
             login.setText(oAuthParams.getUserName());
             final HtmlPasswordInput password = loginForm.getInputByName(""session_password"");
             password.setText(oAuthParams.getUserPassword());
-            final HtmlSubmitInput submitInput = loginForm.getInputByName(""authorize"");
+            final HtmlSubmitInput submitInput = (HtmlSubmitInput) loginForm.getElementsByAttribute(""input"", ""type"", ""submit"").get(0);
 
             // validate CSRF and get authorization code
             String redirectQuery;
@@ -212,6 +220,10 @@ private String getRefreshToken() {
             while (matcher.find()) {
                 params.put(matcher.group(1), matcher.group(2));
             }
+            // check if we got caught in a Captcha!
+            if (params.get(""challengeId"") != null) {
+                throw new SecurityException(""Unable to login due to CAPTCHA, use with a valid accessToken instead!"");
+            }
             final String state = params.get(""state"");
             if (!csrfId.equals(state)) {
                 throw new SecurityException(""Invalid CSRF code!"");
@@ -221,7 +233,7 @@ private String getRefreshToken() {
                 return params.get(""code"");
             }
 
-        } catch (IOException e) {
+        } catch (Exception e) {
             throw new IllegalArgumentException(""Error authorizing application: "" + e.getMessage(), e);
         }
     }
diff --git a/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/AbstractResourceIntegrationTest.java b/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/AbstractResourceIntegrationTest.java
index bb38a5bc5d7..8d3a03e393e 100644
--- a/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/AbstractResourceIntegrationTest.java
+++ b/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/AbstractResourceIntegrationTest.java
@@ -20,10 +20,11 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Properties;
-
 import javax.ws.rs.WebApplicationException;
 
 import org.apache.camel.component.linkedin.api.model.Error;
+import org.apache.cxf.Bus;
+import org.apache.cxf.BusFactory;
 import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
 import org.apache.cxf.jaxrs.client.WebClient;
 import org.junit.AfterClass;
@@ -32,6 +33,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static java.util.concurrent.TimeUnit.DAYS;
+import static java.util.concurrent.TimeUnit.MILLISECONDS;
+
 /**
  * Base class for resource tests.
  */
@@ -39,10 +43,11 @@
 
     protected static final Logger LOG = LoggerFactory.getLogger(PeopleResourceIntegrationTest.class);
     protected static final String DEFAULT_FIELDS = """";
+    public static final long DEFAULT_EXPIRY = MILLISECONDS.convert(60, DAYS) + System.currentTimeMillis();
 
     protected static LinkedInOAuthRequestFilter requestFilter;
-    private static Properties properties;
-    private static OAuthToken token;
+    protected static Properties properties;
+    protected static OAuthToken token;
     private static List<Object> resourceList = new ArrayList<>();
 
     @BeforeClass
@@ -59,6 +64,8 @@ private static LinkedInOAuthRequestFilter createOAuthHelper() throws IOException
         final String clientId = properties.getProperty(""clientId"");
         final String clientSecret = properties.getProperty(""clientSecret"");
         final String redirectUri = properties.getProperty(""redirectUri"");
+        final String accessToken = properties.getProperty(""accessToken"");
+        final String expiryTime = properties.getProperty(""expiryTime"");
 
         final OAuthScope[] scopes;
         final String scope = properties.getProperty(""scope"");
@@ -68,6 +75,12 @@ private static LinkedInOAuthRequestFilter createOAuthHelper() throws IOException
             scopes = null;
         }
 
+        // check if accessToken is set
+        if (accessToken != null) {
+            token = new OAuthToken(null, accessToken,
+                    (expiryTime != null) ? Long.parseLong(expiryTime) : DEFAULT_EXPIRY);
+        }
+
         final OAuthSecureStorage secureStorage = new OAuthSecureStorage() {
             @Override
             public OAuthToken getOAuthToken() {
@@ -105,6 +118,8 @@ public static void afterClass() throws Exception {
             throw new IllegalStateException(AbstractResourceIntegrationTest.class.getName()
                                             + "".beforeClass must be invoked before getResource"");
         }
+        Bus bus = BusFactory.getThreadDefaultBus();
+        bus.setProperty(""allow.empty.path.template.value"", true);
         final T resource = JAXRSClientFactory.create(LinkedInOAuthRequestFilter.BASE_ADDRESS, resourceClass,
 //            Arrays.asList(new Object[] { requestFilter, new LinkedInExceptionResponseFilter() } ));
             Arrays.asList(new Object[]{requestFilter, new EnumQueryParamConverterProvider()}));
diff --git a/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/PeopleResourceIntegrationTest.java b/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/PeopleResourceIntegrationTest.java
index 4caaee5f182..78e8e45fb3f 100644
--- a/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/PeopleResourceIntegrationTest.java
+++ b/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/PeopleResourceIntegrationTest.java
@@ -104,9 +104,14 @@ public void testOAuthTokenRefresh() throws Exception {
 
         // mark OAuth token as expired
         final OAuthToken oAuthToken = requestFilter.getOAuthToken();
+        final long expiryTime = oAuthToken.getExpiryTime();
         oAuthToken.setExpiryTime(new Date().getTime());
 
-        peopleResource.getPerson("""", false);
+        try {
+            peopleResource.getPerson("""", false);
+        } finally {
+            token.setExpiryTime(expiryTime);
+        }
     }
 
     @Test
diff --git a/components/camel-linkedin/camel-linkedin-api/src/test/resources/test-options.properties b/components/camel-linkedin/camel-linkedin-api/src/test/resources/test-options.properties
index 43404f5335a..23a3939e3dc 100644
--- a/components/camel-linkedin/camel-linkedin-api/src/test/resources/test-options.properties
+++ b/components/camel-linkedin/camel-linkedin-api/src/test/resources/test-options.properties
@@ -23,6 +23,10 @@ userPassword=
 clientId=
 # LinkedIn App clientSecret
 clientSecret=
+# LinkedIn access token
+accessToken=
+# LinkedIn token expiry time
+expiryTime=
 # LinkedIn App required scopes
 scope=r_basicprofile,r_fullprofile,r_emailaddress,r_network,r_contactinfo,rw_nus,rw_company_admin,rw_groups,w_messages
 # LinkedIn App redirect URI
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc b/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc
index 94043fa824f..c229f0a529d 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc
@@ -89,14 +89,16 @@ with the following path and query parameters:
 |===
 
 
-==== Query Parameters (14 parameters):
+==== Query Parameters (16 parameters):
 
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
 |===
 | Name | Description | Default | Type
+| *accessToken* (common) | LinkedIn access token to avoid username and password login. |  | String
 | *clientId* (common) | LinkedIn application client ID |  | String
 | *clientSecret* (common) | LinkedIn application client secret |  | String
+| *expiryTime* (common) | LinkedIn access token expiry time in milliseconds since Unix Epoch. | 5184000 | long
 | *httpParams* (common) | Custom HTTP params, for example proxy host and port, use constants from AllClientPNames |  | Map
 | *inBody* (common) | Sets the name of a parameter to be passed in the exchange In Body |  | String
 | *lazyAuth* (common) | Flag to enable/disable lazy OAuth, default is true. when enabled, OAuth token retrieval or generation is not done until the first REST call | true | boolean
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java
new file mode 100644
index 00000000000..a052daf9d9b
--- /dev/null
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java
@@ -0,0 +1,35 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.linkedin;
+
+import org.apache.camel.component.linkedin.api.OAuthSecureStorage;
+import org.apache.camel.component.linkedin.api.OAuthToken;
+import org.apache.camel.component.linkedin.internal.CachingOAuthSecureStorage;
+
+/**
+ * Default implementation of {@link OAuthSecureStorage}
+ * with user provided token and expiry time in msecs.
+ */
+public class DefaultOAuthSecureStorage extends CachingOAuthSecureStorage {
+
+    private OAuthToken token;
+
+    public DefaultOAuthSecureStorage(String accessToken, long expiryTime) {
+        super(null);
+        this.token = new OAuthToken(null, accessToken, expiryTime);
+    }
+}
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInComponent.java b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInComponent.java
index 5189b2caf21..3d8f05d4cb1 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInComponent.java
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInComponent.java
@@ -24,6 +24,7 @@
 import org.apache.camel.Endpoint;
 import org.apache.camel.component.linkedin.api.LinkedInOAuthRequestFilter;
 import org.apache.camel.component.linkedin.api.OAuthParams;
+import org.apache.camel.component.linkedin.api.OAuthSecureStorage;
 import org.apache.camel.component.linkedin.internal.CachingOAuthSecureStorage;
 import org.apache.camel.component.linkedin.internal.LinkedInApiCollection;
 import org.apache.camel.component.linkedin.internal.LinkedInApiName;
@@ -109,8 +110,12 @@ private LinkedInOAuthRequestFilter createRequestFilter(LinkedInConfiguration con
     }
 
     private static OAuthParams getOAuthParams(LinkedInConfiguration configuration) {
+        OAuthSecureStorage secureStorage = configuration.getSecureStorage();
+        if (secureStorage == null && !ObjectHelper.isEmpty(configuration.getAccessToken())) {
+            secureStorage = new DefaultOAuthSecureStorage(configuration.getAccessToken(), configuration.getExpiryTime());
+        }
         return new OAuthParams(configuration.getUserName(), configuration.getUserPassword(),
-            new CachingOAuthSecureStorage(configuration.getSecureStorage()), configuration.getClientId(), configuration.getClientSecret(),
+            new CachingOAuthSecureStorage(secureStorage), configuration.getClientId(), configuration.getClientSecret(),
             configuration.getRedirectUri(), configuration.getScopes());
     }
 
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java
index 26fc1b80a34..114849cdd6f 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java
@@ -18,6 +18,7 @@
 
 import java.util.Arrays;
 import java.util.Map;
+import java.util.concurrent.TimeUnit;
 
 import org.apache.camel.component.linkedin.api.OAuthScope;
 import org.apache.camel.component.linkedin.api.OAuthSecureStorage;
@@ -56,6 +57,10 @@
     @UriParam
     private OAuthSecureStorage secureStorage;
     @UriParam
+    private String accessToken;
+    @UriParam(defaultValue = ""5184000"")
+    private long expiryTime = TimeUnit.SECONDS.convert(60, TimeUnit.DAYS);
+    @UriParam
     private String clientId;
     @UriParam
     private String clientSecret;
@@ -116,6 +121,28 @@ public OAuthSecureStorage getSecureStorage() {
         return secureStorage;
     }
 
+    public String getAccessToken() {
+        return accessToken;
+    }
+
+    /**
+     * LinkedIn access token to avoid username and password login.
+     */
+    public void setAccessToken(String accessToken) {
+        this.accessToken = accessToken;
+    }
+
+    public long getExpiryTime() {
+        return expiryTime;
+    }
+
+    /**
+     * LinkedIn access token expiry time in milliseconds since Unix Epoch.
+     */
+    public void setExpiryTime(long expiryTime) {
+        this.expiryTime = expiryTime;
+    }
+
     /**
      * Callback interface for providing an OAuth token or to store the token generated by the component.
      * The callback should return null on the first call and then save the created token in the saveToken() callback.
diff --git a/components/camel-linkedin/camel-linkedin-component/src/test/resources/test-options.properties b/components/camel-linkedin/camel-linkedin-component/src/test/resources/test-options.properties
index 43404f5335a..23a3939e3dc 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/test/resources/test-options.properties
+++ b/components/camel-linkedin/camel-linkedin-component/src/test/resources/test-options.properties
@@ -23,6 +23,10 @@ userPassword=
 clientId=
 # LinkedIn App clientSecret
 clientSecret=
+# LinkedIn access token
+accessToken=
+# LinkedIn token expiry time
+expiryTime=
 # LinkedIn App required scopes
 scope=r_basicprofile,r_fullprofile,r_emailaddress,r_network,r_contactinfo,rw_nus,rw_company_admin,rw_groups,w_messages
 # LinkedIn App redirect URI
diff --git a/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java
index 44d3f44d762..b26303b7cdf 100644
--- a/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java
+++ b/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java
@@ -96,6 +96,14 @@ public void setResolvePropertyPlaceholders(
          * MUST be provided
          */
         private OAuthSecureStorage secureStorage;
+        /**
+         * LinkedIn access token to avoid username and password login.
+         */
+        private String accessToken;
+        /**
+         * LinkedIn access token expiry time in milliseconds since Unix Epoch.
+         */
+        private Long expiryTime = 5184000L;
         /**
          * LinkedIn application client ID
          */
@@ -167,6 +175,22 @@ public void setSecureStorage(OAuthSecureStorage secureStorage) {
             this.secureStorage = secureStorage;
         }
 
+        public String getAccessToken() {
+            return accessToken;
+        }
+
+        public void setAccessToken(String accessToken) {
+            this.accessToken = accessToken;
+        }
+
+        public Long getExpiryTime() {
+            return expiryTime;
+        }
+
+        public void setExpiryTime(Long expiryTime) {
+            this.expiryTime = expiryTime;
+        }
+
         public String getClientId() {
             return clientId;
         }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Oct/18 17:52;githubbot;dhirajsb opened a new pull request #2580: CAMEL-12899: Fixed default expiryTime calculation
URL: https://github.com/apache/camel/pull/2580
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Oct/18 17:52;githubbot;dhirajsb closed pull request #2580: CAMEL-12899: Fixed default expiryTime calculation
URL: https://github.com/apache/camel/pull/2580
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc b/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc
index c229f0a529d..9d7276a4883 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc
@@ -98,7 +98,7 @@ with the following path and query parameters:
 | *accessToken* (common) | LinkedIn access token to avoid username and password login. |  | String
 | *clientId* (common) | LinkedIn application client ID |  | String
 | *clientSecret* (common) | LinkedIn application client secret |  | String
-| *expiryTime* (common) | LinkedIn access token expiry time in milliseconds since Unix Epoch. | 5184000 | long
+| *expiryTime* (common) | LinkedIn access token expiry time in milliseconds since Unix Epoch, default is 60 days in the future. |  | Long
 | *httpParams* (common) | Custom HTTP params, for example proxy host and port, use constants from AllClientPNames |  | Map
 | *inBody* (common) | Sets the name of a parameter to be passed in the exchange In Body |  | String
 | *lazyAuth* (common) | Flag to enable/disable lazy OAuth, default is true. when enabled, OAuth token retrieval or generation is not done until the first REST call | true | boolean
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java
index a052daf9d9b..5a5804a7477 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java
@@ -16,20 +16,23 @@
  */
 package org.apache.camel.component.linkedin;
 
+import java.util.concurrent.TimeUnit;
+
 import org.apache.camel.component.linkedin.api.OAuthSecureStorage;
 import org.apache.camel.component.linkedin.api.OAuthToken;
 import org.apache.camel.component.linkedin.internal.CachingOAuthSecureStorage;
 
 /**
  * Default implementation of {@link OAuthSecureStorage}
- * with user provided token and expiry time in msecs.
+ * with user provided token and optional expiry time in msecs.
  */
 public class DefaultOAuthSecureStorage extends CachingOAuthSecureStorage {
 
-    private OAuthToken token;
-
-    public DefaultOAuthSecureStorage(String accessToken, long expiryTime) {
+    public DefaultOAuthSecureStorage(String accessToken, Long expiryTime) {
         super(null);
+        if (expiryTime == null) {
+            expiryTime = System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(60, TimeUnit.DAYS);
+        }
         this.token = new OAuthToken(null, accessToken, expiryTime);
     }
 }
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java
index 114849cdd6f..59c189d401c 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java
@@ -18,7 +18,6 @@
 
 import java.util.Arrays;
 import java.util.Map;
-import java.util.concurrent.TimeUnit;
 
 import org.apache.camel.component.linkedin.api.OAuthScope;
 import org.apache.camel.component.linkedin.api.OAuthSecureStorage;
@@ -58,8 +57,8 @@
     private OAuthSecureStorage secureStorage;
     @UriParam
     private String accessToken;
-    @UriParam(defaultValue = ""5184000"")
-    private long expiryTime = TimeUnit.SECONDS.convert(60, TimeUnit.DAYS);
+    @UriParam
+    private Long expiryTime;
     @UriParam
     private String clientId;
     @UriParam
@@ -132,14 +131,14 @@ public void setAccessToken(String accessToken) {
         this.accessToken = accessToken;
     }
 
-    public long getExpiryTime() {
+    public Long getExpiryTime() {
         return expiryTime;
     }
 
     /**
-     * LinkedIn access token expiry time in milliseconds since Unix Epoch.
+     * LinkedIn access token expiry time in milliseconds since Unix Epoch, default is 60 days in the future.
      */
-    public void setExpiryTime(long expiryTime) {
+    public void setExpiryTime(Long expiryTime) {
         this.expiryTime = expiryTime;
     }
 
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/internal/CachingOAuthSecureStorage.java b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/internal/CachingOAuthSecureStorage.java
index 029e3ab2fec..a263fab6b94 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/internal/CachingOAuthSecureStorage.java
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/internal/CachingOAuthSecureStorage.java
@@ -25,7 +25,7 @@
 public class CachingOAuthSecureStorage implements OAuthSecureStorage {
 
     private final OAuthSecureStorage secureStorage;
-    private OAuthToken token;
+    protected OAuthToken token;
 
     public CachingOAuthSecureStorage(OAuthSecureStorage secureStorage) {
         this.secureStorage = secureStorage;
diff --git a/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java
index b26303b7cdf..bdad01867e3 100644
--- a/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java
+++ b/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java
@@ -101,9 +101,10 @@ public void setResolvePropertyPlaceholders(
          */
         private String accessToken;
         /**
-         * LinkedIn access token expiry time in milliseconds since Unix Epoch.
+         * LinkedIn access token expiry time in milliseconds since Unix Epoch,
+         * default is 60 days in the future.
          */
-        private Long expiryTime = 5184000L;
+        private Long expiryTime;
         /**
          * LinkedIn application client ID
          */


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-dropbox: upload file does not work,CAMEL-12942,13198841,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,jbouska,jbouska,16/Nov/18 08:13,16/Nov/18 09:41,13/Mar/19 22:20,16/Nov/18 09:41,2.21.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,camel-dropbox,,,,,,0,,,,"I am not able to upload new file with _DropboxUploadMode.add_ option.

see reproducer:
 - git clone -b refactor_dropbox_test [https://github.com/bouskaJ/camel.git]
 - add access token ([https://github.com/bouskaJ/camel/blob/refactor_dropbox_test/components/camel-dropbox/src/test/resources/test-options.properties])
 - run [DropboxProducerPutSingleFileTest|https://github.com/bouskaJ/camel/blob/refactor_dropbox_test/components/camel-dropbox/src/test/java/org/apache/camel/component/dropbox/integration/producer/DropboxProducerPutSingleFileTest.java]

Workaround:
use _DropboxUploadMode.force_",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-16 08:30:45.679,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 16 08:30:45 UTC 2018,,,,,,,0|s00kig:,9223372036854775807,,,,,,,,,,16/Nov/18 08:29;jbouska;PR sent https://github.com/apache/camel/pull/2621,16/Nov/18 08:30;ancosen;Thanks a lot.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
null pointer exceptions accessing swagger url in blueprint projects,CAMEL-12926,13197445,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,valdar,valdar,valdar,09/Nov/18 15:26,14/Nov/18 16:56,13/Mar/19 22:20,14/Nov/18 15:36,2.23.0,,,,,,,,,,,,,,,2.23.0,,,,,camel-swagger,,,,,,0,,,,"When a blueprint like:
{code:xml}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.5.0""
           xsi:schemaLocation=""
             http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">
  
  <reference id=""httpService"" interface=""org.osgi.service.http.HttpService""/>

  <bean class=""org.apache.camel.component.servlet.osgi.OsgiServletRegisterer""
        init-method=""register""
        destroy-method=""unregister"">
    <property name=""alias"" value=""/camel-rest-sql""/>
    <property name=""httpService"" ref=""httpService""/>
    <property name=""servlet"" ref=""camelServlet""/>
  </bean>

  <bean id=""camelServlet"" class=""org.apache.camel.component.servlet.CamelHttpTransportServlet""/>

  <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">

    <restConfiguration
        component=""servlet""
        bindingMode=""json""
        contextPath=""/camel-rest-sql"" port=""{{env:HTTP_PORT:8181}}""
        apiContextPath=""/api-doc"">
    </restConfiguration>

    <rest path=""/books"" consumes=""application/json"" produces=""application/json"">
      <get uri=""/"" outType=""java.util.String"">
        <to uri=""log:blueprint-swagger""/>
      </get>
    </rest>

  </camelContext>
</blueprint>
{code}
and then one try to access {{http://localhost:8181/camel-rest-sql/api-doc}} there is a null pointer exception:

{code:java}
2018-11-03 08:31:37,062 | INFO  | ead #2 - timer://foo | generateOrder-route              | 120 - org.apache.camel.camel-core - 2.21.0.fuse-720040 | Inserted new order 1

2018-11-03 08:31:37,547 | INFO  | rocessed%20=%20false | processOrder-route               | 120 - org.apache.camel.camel-core - 2.21.0.fuse-720040 | Processed order id 1 item ActiveMQ of 10 copies of ActiveMQ in Action

2018-11-03 08:31:45,741 | WARN  | qtp1210359820-76     | o.a.c.s.RestSwaggerProcessor     | 125 - org.apache.camel.camel-swagger-java - 2.21.0.fuse-720040 | Error rendering Swagger API due null

java.lang.NullPointerException: null

	at org.apache.camel.swagger.RestSwaggerSupport.renderResourceListing(RestSwaggerSupport.java:211) ~[?:?]

	at org.apache.camel.swagger.RestSwaggerProcessor.process(RestSwaggerProcessor.java:119) ~[?:?]

	at org.apache.camel.component.rest.RestApiProducer.process(RestApiProducer.java:36) ~[?:?]

	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) ~[?:?]

	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148) ~[?:?]

	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) ~[?:?]

	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) ~[?:?]

	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) ~[?:?]

	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) ~[?:?]

	at org.apache.camel.http.common.CamelServlet.doService(CamelServlet.java:214) ~[?:?]

	at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:80) ~[?:?]

	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) ~[36:javax.servlet-api:3.1.0]

	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:865) ~[?:?]

	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:535) ~[?:?]

	at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:71) ~[?:?]

	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146) ~[?:?]

	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548) ~[?:?]

	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) ~[?:?]

	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257) ~[?:?]

	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595) ~[?:?]

	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255) ~[?:?]

	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1317) ~[?:?]

	at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:293) ~[?:?]

	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203) ~[?:?]

	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473) ~[?:?]

	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564) ~[?:?]

	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201) ~[?:?]

	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1219) ~[?:?]

	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144) ~[?:?]

	at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:80) ~[?:?]

	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) ~[?:?]

	at org.eclipse.jetty.server.Server.handle(Server.java:531) ~[?:?]

	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352) ~[?:?]

	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260) ~[?:?]

	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281) ~[?:?]

	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) ~[?:?]

	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) ~[?:?]

	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333) ~[94:org.eclipse.jetty.util:9.4.11.v20180605]

	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310) ~[94:org.eclipse.jetty.util:9.4.11.v20180605]

	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168) ~[94:org.eclipse.jetty.util:9.4.11.v20180605]

	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:132) ~[94:org.eclipse.jetty.util:9.4.11.v20180605]

	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:762) [94:org.eclipse.jetty.util:9.4.11.v20180605]

	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:680) [94:org.eclipse.jetty.util:9.4.11.v20180605]

	at java.lang.Thread.run(Thread.java:748) [?:?]
{code}
this is happening because {{restConfiguration}} is build with {{apiProperties}} as {{null}} because there is no tag {{<apiProperty key="""" value=""""/>}} inside {{<restConfiguration>}} tag; thus the null pointer here: https://github.com/apache/camel/blob/master/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerSupport.java#L213-L215

What do you think is the best approach to fix this:
* check for null in {{RestSwaggerSupport.java}}
* or investigate why blueprint use initialize {{apiProperties}} as {{null}} (which I think might be a legitimate behaviour)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-12 17:17:45.609,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 14 16:56:25 UTC 2018,,,,,,,0|s00bx4:,9223372036854775807,,,,,,,,,,"12/Nov/18 16:14;valdar;Hi [~ramu11],
I'm also working on this one, which of the 2 alternatives do you think is better? Or what else you propose to fix it?",12/Nov/18 17:17;ramu11;Did not know you are already working. it is unassigned so I owned. feel free to own it. I have not started,"13/Nov/18 09:33;dmvolod;[~valdar], looks like set empty Map if null comes is good enough. But it strange why it not coming from blueprint, as spring works good without explicit apiProperty set.","14/Nov/18 15:13;githubbot;valdar opened a new pull request #2617: CAMEL-12926: fixed null pointer exceptions accessing swagger url inlueprint projects
URL: https://github.com/apache/camel/pull/2617
 
 
   fix CAMEL-12926

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Nov/18 15:29;githubbot;zregvart closed pull request #2617: CAMEL-12926: fixed null pointer exceptions accessing swagger url inlueprint projects
URL: https://github.com/apache/camel/pull/2617
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerSupport.java b/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerSupport.java
index dbbcb905e62..b549634f1f9 100644
--- a/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerSupport.java
+++ b/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerSupport.java
@@ -18,6 +18,7 @@
 
 import java.lang.management.ManagementFactory;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -210,7 +211,7 @@ public void renderResourceListing(RestApiResponseAdapter response, BeanConfig sw
 
         List<RestDefinition> rests = getRestDefinitions(contextId);
         if (rests != null) {
-            final Map<String, Object> apiProperties = configuration.getApiProperties();
+            final Map<String, Object> apiProperties = configuration.getApiProperties() != null ? configuration.getApiProperties() : new HashMap<>();
             if (json) {
                 response.setHeader(Exchange.CONTENT_TYPE, (String) apiProperties.getOrDefault(""api.specification.contentType.json"", ""application/json""));
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Nov/18 15:29;githubbot;zregvart commented on issue #2617: CAMEL-12926: fixed null pointer exceptions accessing swagger url inlueprint projects
URL: https://github.com/apache/camel/pull/2617#issuecomment-438702998
 
 
   Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Nov/18 16:55;githubbot;valdar commented on issue #2617: CAMEL-12926: fixed null pointer exceptions accessing swagger url inlueprint projects
URL: https://github.com/apache/camel/pull/2617#issuecomment-438735496
 
 
   should we backport it to 2.21 as well?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Nov/18 16:56;githubbot;valdar edited a comment on issue #2617: CAMEL-12926: fixed null pointer exceptions accessing swagger url inlueprint projects
URL: https://github.com/apache/camel/pull/2617#issuecomment-438735496
 
 
   should we backport it to 2.21 and 2.22 as well?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Nov/18 16:56;githubbot;zregvart commented on issue #2617: CAMEL-12926: fixed null pointer exceptions accessing swagger url inlueprint projects
URL: https://github.com/apache/camel/pull/2617#issuecomment-438735968
 
 
   > should we backport it to 2.21 as well?
   
   @valdar no, the use of `apiProperties` is only on `master`

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,
Camel FTP regression: RemoteFile does not override populateHeaders method,CAMEL-12933,13198040,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,mshalak,mshalak,13/Nov/18 12:18,14/Nov/18 12:21,13/Mar/19 22:20,14/Nov/18 12:09,2.22.1,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,camel-ftp,,,,,,0,,,,"After upgrade from Camel 2.14 to 2.22.1, I have noticed it no longer sets ""CamelFileHost"" header for Exchange input. After debugging and comparing differences between old and new execution, I have noticed that Camel stopped setting CamelFileHost header after changes in [https://github.com/apache/camel/commit/e3a1bdb6a278b5e4910ba4caf3ebe95751cceaee#diff-f9d7a01c99e5d4239aae6b6834cdfc65].

This happens because previously we had execution chain:
{code:java}
FtpConsumer->RemoteFileEndpoint.createExchange->GenericFile.bindToExchange->RemoteFile.populateHeaders(msg)
{code}
But after this change we have:
{code:java}
FtpConsumer->RemoteFileEndpoint.createExchange->GenericFile.bindToExchange->GenericFile.populateHeaders(msg, false)
{code}
This happens because bindToExchange method sets all the headers via populateHeaders. This method is overriden in RemoteFile, and it adds CamelFileHost header.
{code:java}
public void populateHeaders(GenericFileMessage<T> message) {
    if (message != null) {
        // because there is not probeContentType option 
        // in other file based components, false may be passed
        // as the second argument.
        super.populateHeaders(message, false);
        message.setHeader(""CamelFileHost"", getHostname());
    }
}
{code}
But after changes the signature of the parent method was changed from
{code:java}
public void populateHeaders(GenericFileMessage<T> message) {
{code}
to
{code:java}
public void populateHeaders(GenericFileMessage<T> message, boolean isProbeContentTypeFromEndpoint) {
{code}
But its signature was not changed in RemoteFile. Since it is missing the @Override annotation, it compiled well and was unnoticed. But now the overridden method in RemoteFile does not get executed, and we end up without CamelFileHost header. It may be unnoticed by those who do not use this header, but if we rely on it, it may be an issue.

My proposed changes will be:
 # Add @Override annotation to populateHeaders method in RemoteFile, so the same bug will not happen.
 # Change its signature to
{code:java}
public void populateHeaders(GenericFileMessage<T> message, boolean isProbeContentTypeFromEndpoint)
{code}
So it will be called instead of the parent method. If we assume someone already uses this method somehow and we want to make these changes backward compatible, we may just add a new method with this signature and @Override annotation, leaving existing populateHeaders(GenericFileMessage<T> message) without changes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-13 12:23:18.949,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 14 11:48:10 UTC 2018,,,,,,,0|s00fkw:,9223372036854775807,Regression,,,,,,,,,"13/Nov/18 12:23;ancosen;[~onderson], since the referenced commit is yours, can you please have a look at this Jira issue if you get a chance? Thanks!","14/Nov/18 01:17;githubbot;onderson opened a new pull request #2613: CAMEL-12933 - override populateHeaders  considering backward compatibility
URL: https://github.com/apache/camel/pull/2613
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Nov/18 11:48;githubbot;onderson closed pull request #2613: CAMEL-12933 - override populateHeaders  considering backward compatibility
URL: https://github.com/apache/camel/pull/2613
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFile.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFile.java
index cd1d18eb340..e29c2484889 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFile.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFile.java
@@ -42,6 +42,11 @@ public void populateHeaders(GenericFileMessage<T> message) {
             message.setHeader(""CamelFileHost"", getHostname());
         }
     }
+    
+    @Override
+    public void populateHeaders(GenericFileMessage<T> message, boolean isProbeContentTypeFromEndpoint) {
+        populateHeaders(message);
+    }
 
     public String getHostname() {
         return hostname;


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
error in camel-core/src/main/docs/rest-dsl.adoc,CAMEL-12929,13197670,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,valdar,valdar,valdar,11/Nov/18 22:26,12/Nov/18 14:58,13/Mar/19 22:20,12/Nov/18 14:58,2.22.1,,,,,,,,,,,,,,,2.23.0,,,,,,,,,,,0,,,,"Error in {{camel-core/src/main/docs/rest-dsl.adoc}}  RestConfiguration property name: is not {{apiProperties}}, it is {{apiProperty}}, in fact that is the name of the builder method and the xml tag.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-11-11 22:26:53.0,,,,,,,0|s00db4:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support fixed property placeholders from Aries blueprint,CAMEL-12570,13165271,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gzres,gzres,gzres,11/Jun/18 08:48,08/Nov/18 08:12,13/Mar/19 22:20,11/Jun/18 10:04,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-blueprint,,,,,,0,,,,,,,,,,,,,,,,,,,,,,KARAF-5776,,,,,,,ARIES-1858,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-11 08:51:06.684,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 23 12:30:07 UTC 2018,,,,,,,0|i3upx3:,9223372036854775807,,,,,,,,,,11/Jun/18 08:51;ancosen;Please first merge on master for 2.22.0 release.,"11/Jun/18 09:52;githubbot;grgrzybek opened a new pull request #2369: [CAMEL-12570] Upgrade to blueprint.core 1.10.0, blueprint.cm 1.3.0, a…
URL: https://github.com/apache/camel/pull/2369
 
 
   …ries.proxy 1.1.1

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Jun/18 09:52;githubbot;GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/2369

    [CAMEL-12570] Upgrade to blueprint.core 1.10.0, blueprint.cm 1.3.0, a…

    …ries.proxy 1.1.1

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-12570-master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2369.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2369
    
----
commit dfe81111eeaa55a4ea2b792b9541706a06d67bbd
Author: Grzegorz Grzybek <gr.grzybek@...>
Date:   2018-06-11T09:45:17Z

    [CAMEL-12570] Upgrade to blueprint.core 1.10.0, blueprint.cm 1.3.0, aries.proxy 1.1.1

----
","11/Jun/18 09:57;githubbot;grgrzybek closed pull request #2369: [CAMEL-12570] Upgrade to blueprint.core 1.10.0, blueprint.cm 1.3.0, a…
URL: https://github.com/apache/camel/pull/2369
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintPropertiesParser.java b/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintPropertiesParser.java
index ad9a5cafaa21..ac1ff46352e2 100644
--- a/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintPropertiesParser.java
+++ b/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintPropertiesParser.java
@@ -26,7 +26,9 @@
 
 import org.apache.aries.blueprint.ExtendedBeanMetadata;
 import org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder;
+import org.apache.aries.blueprint.ext.AbstractPropertyPlaceholderExt;
 import org.apache.aries.blueprint.ext.PropertyPlaceholder;
+import org.apache.aries.blueprint.ext.PropertyPlaceholderExt;
 import org.apache.camel.component.properties.DefaultPropertiesParser;
 import org.apache.camel.component.properties.PropertiesComponent;
 import org.apache.camel.component.properties.PropertiesParser;
@@ -47,8 +49,9 @@
     private final PropertiesComponent propertiesComponent;
     private final BlueprintContainer container;
     private final PropertiesParser delegate;
-    private final Set<AbstractPropertyPlaceholder> placeholders = new LinkedHashSet<>();
+    private final Set<PropertyPlaceholderWrapper> placeholders = new LinkedHashSet<PropertyPlaceholderWrapper>();
     private Method method;
+    private Method oldMethod;
 
     public BlueprintPropertiesParser(PropertiesComponent propertiesComponent, BlueprintContainer container, PropertiesParser delegate) {
         super(propertiesComponent);
@@ -71,7 +74,8 @@ public BlueprintPropertiesParser(PropertiesComponent propertiesComponent, Bluepr
             ComponentMetadata meta = container.getComponentMetadata(id);
             if (meta instanceof ExtendedBeanMetadata) {
                 Class<?> clazz = ((ExtendedBeanMetadata) meta).getRuntimeClass();
-                if (clazz != null && AbstractPropertyPlaceholder.class.isAssignableFrom(clazz)) {
+                if (clazz != null && (AbstractPropertyPlaceholder.class.isAssignableFrom(clazz)
+                        || AbstractPropertyPlaceholderExt.class.isAssignableFrom(clazz))) {
                     ids.add(id);
                 }
             }
@@ -88,15 +92,16 @@ public BlueprintPropertiesParser(PropertiesComponent propertiesComponent, Bluepr
     public void addPropertyPlaceholder(String id) {
         Object component = container.getComponentInstance(id);
 
-        if (component instanceof AbstractPropertyPlaceholder) {
-            AbstractPropertyPlaceholder placeholder = (AbstractPropertyPlaceholder) component;
-            placeholders.add(placeholder);
+        // new API
+        if (component instanceof AbstractPropertyPlaceholderExt) {
+            AbstractPropertyPlaceholderExt placeholder = (AbstractPropertyPlaceholderExt) component;
+            placeholders.add(new AbstractPropertyPlaceholderExtWrapper(placeholder));
 
             log.debug(""Adding Blueprint PropertyPlaceholder: {}"", id);
 
             if (method == null) {
                 try {
-                    method = AbstractPropertyPlaceholder.class.getDeclaredMethod(""retrieveValue"", String.class);
+                    method = AbstractPropertyPlaceholderExt.class.getDeclaredMethod(""retrieveValue"", String.class);
                     method.setAccessible(true);
                 } catch (NoSuchMethodException e) {
                     throw new IllegalStateException(""Cannot add blueprint property placeholder: "" + id
@@ -104,6 +109,24 @@ public void addPropertyPlaceholder(String id) {
                 }
             }
         }
+
+        // old, deprecated API
+        if (component instanceof AbstractPropertyPlaceholder) {
+            AbstractPropertyPlaceholder placeholder = (AbstractPropertyPlaceholder) component;
+            placeholders.add(new AbstractPropertyPlaceholderWrapper(placeholder));
+
+            log.debug(""Adding Blueprint PropertyPlaceholder: {}"", id);
+
+            if (oldMethod == null) {
+                try {
+                    oldMethod = AbstractPropertyPlaceholder.class.getDeclaredMethod(""retrieveValue"", String.class);
+                    oldMethod.setAccessible(true);
+                } catch (NoSuchMethodException e) {
+                    throw new IllegalStateException(""Cannot add blueprint property placeholder: "" + id
+                            + "" as the method retrieveValue is not accessible"", e);
+                }
+            }
+        }
     }
 
     @Override
@@ -122,12 +145,15 @@ public String parseProperty(String key, String value, Properties properties) {
 
         // lookup key in blueprint and return its value
         if (answer == null && key != null) {
-            for (AbstractPropertyPlaceholder placeholder : placeholders) {
+            for (PropertyPlaceholderWrapper placeholder : placeholders) {
                 boolean isDefault = false;
                 if (placeholders.size() > 1) {
                     // okay we have multiple placeholders and we want to return the answer that
                     // is not the default placeholder if there is multiple keys
-                    if (placeholder instanceof PropertyPlaceholder) {
+                    if (placeholder instanceof PropertyPlaceholderExt) {
+                        Map map = ((PropertyPlaceholderExt) placeholder).getDefaultProperties();
+                        isDefault = map != null && map.containsKey(key);
+                    } else if (placeholder instanceof PropertyPlaceholder) {
                         Map map = ((PropertyPlaceholder) placeholder).getDefaultProperties();
                         isDefault = map != null && map.containsKey(key);
                     }
@@ -135,7 +161,7 @@ public String parseProperty(String key, String value, Properties properties) {
                 }
                 
                 try {
-                    String candidate = (String) ObjectHelper.invokeMethod(method, placeholder, key);
+                    String candidate = placeholder.retrieveValue(key);
     
                     if (candidate != null) {
                         if (answer == null || !isDefault) {
@@ -164,4 +190,44 @@ public String parseProperty(String key, String value, Properties properties) {
         return answer;
     }
 
+    private interface PropertyPlaceholderWrapper {
+
+        /**
+         * Retrieves the String value (or {@code null}) from underlying placeholder
+         * @param key
+         * @return
+         */
+        String retrieveValue(String key);
+    }
+
+    private class AbstractPropertyPlaceholderExtWrapper implements PropertyPlaceholderWrapper {
+
+        private AbstractPropertyPlaceholderExt delegate;
+
+        public AbstractPropertyPlaceholderExtWrapper(AbstractPropertyPlaceholderExt delegate) {
+            this.delegate = delegate;
+        }
+
+        @Override
+        public String retrieveValue(String key) {
+            Object v = ObjectHelper.invokeMethod(method, delegate, key);
+            return v == null ? null : v.toString();
+        }
+    }
+
+    private class AbstractPropertyPlaceholderWrapper implements PropertyPlaceholderWrapper {
+
+        private AbstractPropertyPlaceholder delegate;
+
+        public AbstractPropertyPlaceholderWrapper(AbstractPropertyPlaceholder delegate) {
+            this.delegate = delegate;
+        }
+
+        @Override
+        public String retrieveValue(String key) {
+            Object v = ObjectHelper.invokeMethod(oldMethod, delegate, key);
+            return v == null ? null : v.toString();
+        }
+    }
+
 }
diff --git a/components/camel-test-blueprint/pom.xml b/components/camel-test-blueprint/pom.xml
index 8b351f3310ed..b33ac4d6b470 100644
--- a/components/camel-test-blueprint/pom.xml
+++ b/components/camel-test-blueprint/pom.xml
@@ -66,14 +66,9 @@
              with felix-connect, and you may get a weird error if wrong order -->
         <dependency>
             <groupId>org.apache.aries.proxy</groupId>
-            <artifactId>org.apache.aries.proxy.api</artifactId>
+            <artifactId>org.apache.aries.proxy</artifactId>
             <version>${aries-blueprint-proxy-version}</version>
         </dependency>
-        <dependency>
-            <groupId>org.apache.aries.proxy</groupId>
-            <artifactId>org.apache.aries.proxy.impl</artifactId>
-            <version>${aries-blueprint-proxy-impl-version}</version>
-        </dependency>
         <dependency>
             <groupId>org.apache.aries.blueprint</groupId>
             <artifactId>org.apache.aries.blueprint.api</artifactId>
diff --git a/parent/pom.xml b/parent/pom.xml
index c8e26665ba2d..5b63fd2a5f4e 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -53,10 +53,10 @@
     <apache-gora-version>0.8</apache-gora-version>
     <apache-mime4j-version>0.7.2</apache-mime4j-version>
     <aries-blueprint-api-version>1.0.1</aries-blueprint-api-version>
-    <aries-blueprint-cm-version>1.0.6</aries-blueprint-cm-version>
-    <aries-blueprint-core-version>1.4.4</aries-blueprint-core-version>
-    <aries-blueprint-proxy-version>1.0.1</aries-blueprint-proxy-version>
-    <aries-blueprint-proxy-impl-version>1.0.6</aries-blueprint-proxy-impl-version>
+    <aries-blueprint-cm-version>1.3.0</aries-blueprint-cm-version>
+    <aries-blueprint-core-version>1.10.0</aries-blueprint-core-version>
+    <aries-blueprint-proxy-version>1.1.1</aries-blueprint-proxy-version>
+    <aries-blueprint-proxy-impl-version>1.1.1</aries-blueprint-proxy-impl-version>
     <aries-spifly-version>1.0.8</aries-spifly-version>
     <aries-util-version>1.1.3</aries-util-version>
     <arquillian-container-se-managed-version>1.0.0.Final</arquillian-container-se-managed-version>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Jun/18 09:57;githubbot;Github user grgrzybek closed the pull request at:

    https://github.com/apache/camel/pull/2369
","12/Jun/18 08:13;gzres;[~ancosen], [~gnt], [~jbonofre], with this fix, Camel will work with blueprint.core 1.10.0, *but* if we upgrade Karaf 4.2.1 to blueprint.core 1.10.0 / blueprint.cm 1.3.0, existing Camel applications will stop working (expecting {{org.apache.aries.blueprint.compendium.cm.CmPropertyPlaceholder}} to be derived from {{org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder}} and not from new {{org.apache.aries.blueprint.ext.AbstractPropertyPlaceholderExt}}).

The only backward compatible change I can think of is to have (in blueprint.cm 1.3.1):
* org.apache.aries.blueprint.compendium.cm.CmPropertyPlaceholderExt and
* org.apache.aries.blueprint.compendium.cm.CmPropertyPlaceholder

Which instance should be created by {{org.apache.aries.blueprint.compendium.cm.CmNamespaceHandler#parsePropertyPlaceholder()}} should actually depend on XSD of {{http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.*}} version used - existing (before blueprint.core 1.10.0) cm XSD versions should fallback to {{CmPropertyPlaceholder}} derived from {{AbstractPropertyPlaceholder}}, so existing Camel applications work after upgrading blueprint.core to 1.10.0 (new 1.10.1 actually). WDYT?",12/Jun/18 09:04;ancosen;I think is the best solution to allow backward compatibility.,23/Oct/18 12:30;gzres;Final commit that makes camel work with aries blueprint 1.4.4+: https://github.com/apache/camel/commit/7fe62296f83,,,,,,,,,,,,,,,,,,,,,,,,,
gzip Content-Encoding problems after upgrading to Jetty 9.4.12,CAMEL-12911,13195885,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,gzres,gzres,02/Nov/18 12:22,06/Nov/18 09:48,13/Mar/19 22:20,06/Nov/18 03:29,2.22.1,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,camel-http,camel-jetty,,,,,0,,,,"After upgrading to Jetty {{9.4.12.v20180830}}, some tests stopped working:
* org.apache.camel.component.jetty.JettyContentTypeTest.testContentTypeWithGZipEncoding(org.apache.camel.component.jetty.JettyContentTypeTest)
* org.apache.camel.component.jetty.JettyImageFileTest.testImageContentWithGZip(org.apache.camel.component.jetty.JettyImageFileTest)
* org.apache.camel.component.jetty.HttpGZipEncodingTest.testGzipProducerWithGzipData(org.apache.camel.component.jetty.HttpGZipEncodingTest)
* org.apache.camel.component.jetty.HttpGZipEncodingTest.testGzipProxy(org.apache.camel.component.jetty.HttpGZipEncodingTest)
* org.apache.camel.component.jetty.HttpGZipEncodingTest.testHttpProducerWithGzip(org.apache.camel.component.jetty.HttpGZipEncodingTest)


I did some analysis on jetty side and the reason is [exactly this commit|https://github.com/eclipse/jetty.project/commit/cf3681ef568be2fea41e89b2937112a7474c5c07] for Jetty issue [1688|https://github.com/eclipse/jetty.project/issues/1688] where this was added to {{jetty-server/src/main/java/org/eclipse/jetty/server/Request.java}}:
{code:xml}
    private void extractContentParameters()
    {
        // Content cannot be encoded
        if (_metaData!=null && getHttpFields().contains(HttpHeader.CONTENT_ENCODING))
            throw new BadMessageException(HttpStatus.NOT_IMPLEMENTED_501,""Unsupported Content-Encoding"");
...
{code}

With Jetty 9.4.11, it's Camel that does gzip encoding (when creating http entity for httpclient 3) and decoding (when reading http body in {{org.apache.camel.http.common.DefaultHttpBinding#readRequest()}}).

However, with 9.4.12, after {{org.apache.camel.http.common.DefaultHttpBinding#readRequest()}} has read the body, it calls {{org.apache.camel.http.common.DefaultHttpBinding#readHeaders()}} which also extracts parameters.
Because parameters may be POSTed using {{application/x-www-form-urlencoded}} content type, Jetty really needs GZIP Handler.

So far tests worked, because we didn't use {{application/x-www-form-urlencoded}} content type.

I'm not sure how to solve, but maybe, {{org.apache.camel.http.common.DefaultHttpBinding#readRequest()}} should remove {{Content-Encoding: gzip}} header after reading body? IMO, gzip decoding should be done at ""server side"" and jetty is the server - so either it decodes gzip content (using configured {{org.eclipse.jetty.server.handler.gzip.GzipHandler}}) or it should not be aware of encoded body (thus camel should pass wrapped request with {{Content-Encoding}} header filtered.",,,,,,,,,,,,,,,,,,,,,,,CAMEL-12914,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-02 12:35:36.831,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 02 12:35:36 UTC 2018,,,,,,,0|s002bc:,9223372036854775807,,,,,,,,,,02/Nov/18 12:35;davsclaus;Yeah it sounds plausible to remove that header after the body has been read/unzipped. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-json-validator - Potential issue with reading from streams,CAMEL-12835,13187202,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Sep/18 07:15,02/Nov/18 14:18,13/Mar/19 22:20,02/Nov/18 14:18,2.22.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,,,,,,,0,,,,"See SO
https://stackoverflow.com/questions/52228692/camel-json-validator-throws-stream-closed-exception?noredirect=1#comment91912061_52228692",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-09-25 07:15:58.0,,,,,,,0|i3yg8n:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel context inconsistencies in Spring Cloud Environment ,CAMEL-12905,13194514,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,omaralles,omaralles,26/Oct/18 21:06,29/Oct/18 14:50,13/Mar/19 22:20,29/Oct/18 14:50,,,,,,,,,,,,,,,,2.23.0,,,,,,,,,,,0,,,,"In a Spring Cloud environment some components might create a child application context that spring cloud mantains. Such is the case for Feign and Ribbon Clients.

See 7.2 - [https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html]
 ""A central concept in Spring Cloud’s Feign support is that of the named client. Each feign client is part of an ensemble of components that work together to contact a remote server on demand, and the ensemble has a name that you give it as an application developer using the @FeignClient annotation. Spring Cloud creates a new ensemble as an ApplicationContext on demand for each named client using FeignClientsConfiguration.""

This child application contexts are going to be an ApplicationEvent source for the SpringCamelContext and RoutesCollector component who are defined as  ApplicationEvent listeners in a parent context.

SpringCamelContext is intended to be started after a ContextRefreshedEvent.
 RoutesCollector intends to add routes to the camel context after a ContextRefreshedEvent.

When there are child application contexts (ContextRefreshedEvent emitters)  we end up having some inconsistencies in the camel context lifecycle.

 

To reproduce the issue see:

[https://github.com/oalles/camel-cloud-bug]

 

Pull Request:

https://github.com/apache/camel/pull/2581

 

 

 

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-26 21:59:20.251,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 29 14:50:58 UTC 2018,,,,,,,0|i3zp4f:,9223372036854775807,,,,,,,,,,"26/Oct/18 21:59;githubbot;oalles opened a new pull request #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581
 
 
   CAMEL-12905: The trigger that starts the SpringCamelContext and that collect to routes to the camel context, needs to be a expected ContextRefreshedEvent that has been emitted by the ApplicationContext that instantiated the SpringCamelContext instance. 
   
   https://issues.apache.org/jira/browse/CAMEL-12905

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","28/Oct/18 10:56;githubbot;onderson commented on issue #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581#issuecomment-433694655
 
 
   @zregvart , could you have a look?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Oct/18 10:09;githubbot;zregvart commented on a change in pull request #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581#discussion_r228862576
 
 

 ##########
 File path: components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java
 ##########
 @@ -84,7 +84,8 @@ public void onApplicationEvent(ContextRefreshedEvent event) {
         CamelContext camelContext = applicationContext.getBean(CamelContext.class);
 
         // only add and start Camel if its stopped (initial state)
-        if (camelContext.getStatus().isStopped()) {
+        if (((ContextRefreshedEvent) event).getApplicationContext().getId().equals(this.applicationContext.getId())
 
 Review comment:
   According to [the documentation](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html#getId--) `ApplicationContext::getId` can return `null`, this would result in `NullPointerException` thrown from this line.
   
   `event` is already a `ContextRefreshedEvent` no need to cast to it.
   
   ```suggestion
           if (event.getApplicationContext() == this.applicationContext)
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Oct/18 10:09;githubbot;zregvart commented on a change in pull request #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581#discussion_r228863323
 
 

 ##########
 File path: components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java
 ##########
 @@ -159,7 +159,7 @@ public void stop() {
     public void onApplicationEvent(ApplicationEvent event) {
         LOG.debug(""onApplicationEvent: {}"", event);
 
-        if (event instanceof ContextRefreshedEvent) {
+        if (event instanceof ContextRefreshedEvent && ((ContextRefreshedEvent) event).getApplicationContext().getId().equals(this.applicationContext.getId())) {
 
 Review comment:
   We should watch out for `ApplicationContext::getId` returning `null`
   ```suggestion
           if (event instanceof ContextRefreshedEvent && ((ContextRefreshedEvent) event).getApplicationContext() == this.applicationContext) {
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Oct/18 10:58;githubbot;oalles commented on issue #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581#issuecomment-433868771
 
 
   @zregvart: good point
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Oct/18 11:00;githubbot;zregvart closed pull request #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java b/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java
index 54f2064c391..d378e3162be 100644
--- a/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java
+++ b/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java
@@ -84,7 +84,8 @@ public void onApplicationEvent(ContextRefreshedEvent event) {
         CamelContext camelContext = applicationContext.getBean(CamelContext.class);
 
         // only add and start Camel if its stopped (initial state)
-        if (camelContext.getStatus().isStopped()) {
+        if (event.getApplicationContext() == this.applicationContext
+                && camelContext.getStatus().isStopped()) {
             LOG.debug(""Post-processing CamelContext bean: {}"", camelContext.getName());
 
             final AntPathMatcher matcher = new AntPathMatcher();
diff --git a/components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java b/components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java
index e32e581566b..b4dba29728d 100644
--- a/components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java
+++ b/components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java
@@ -159,7 +159,7 @@ public void stop() {
     public void onApplicationEvent(ApplicationEvent event) {
         LOG.debug(""onApplicationEvent: {}"", event);
 
-        if (event instanceof ContextRefreshedEvent) {
+        if (event instanceof ContextRefreshedEvent && ((ContextRefreshedEvent) event).getApplicationContext() == this.applicationContext) {
             // nominally we would prefer to use Lifecycle interface that
             // would invoke start() method, but in order to do that 
             // SpringCamelContext needs to implement SmartLifecycle


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Oct/18 11:01;githubbot;zregvart commented on issue #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581#issuecomment-433869654
 
 
   Thanks for the pull request @oalles :1st_place_medal: 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Oct/18 11:02;githubbot;oalles commented on issue #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581#issuecomment-433870086
 
 
   @zregvart  @onderson: Thank you for your work ;) 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",29/Oct/18 14:50;zregvart;Merged from PR [#2581|https://github.com/apache/camel/pull/2581] thanks to [~omaralles],,,,,,,,,,,,,,,,,,,,,,,,
Route contract validate does not throw validation exception when validation fails,CAMEL-12900,13194091,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Oct/18 08:30,25/Oct/18 08:46,13/Mar/19 22:20,25/Oct/18 08:46,2.21.0,2.22.0,,,,,,,,,,,,,,2.21.4,2.22.2,2.23.0,,,camel-core,,,,,,0,,,,"This route will not throw validation exception when expected
{code}
                validator().type(""xml"").withUri(""validator:org/apache/camel/impl/validate.xsd"");

                from(""direct:in"").inputTypeWithValidate(""xml"")
                    .to(""mock:result"");
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-10-25 08:30:59.0,,,,,,,0|i3zmin:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PGP Decryption in XML DSL not working,CAMEL-12897,13193844,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,feinhorn,feinhorn,24/Oct/18 11:45,24/Oct/18 13:36,13/Mar/19 22:20,24/Oct/18 13:36,2.21.1,,,,,,,,,,,,,,,2.21.4,2.22.2,2.23.0,,, camel-crypto,,,,,,0,,,,"I'm trying to use camel-crypto to crypt and decrypt files with PGP.

Right now, I have the following in my XML DSL:
{code:java}
<dataFormats>
    <pgp id=""encrypt"" keyFileName=""party2public.pgp"" keyUserid=""party2""/>
    <pgp id=""decrypt"" keyFileName=""party2private.pgp""/>
</dataFormats>

<route id=""encrypter"">
    <from uri=""file:ToEncrypt""/>
    <marshal ref=""encrypt""/>
    <to uri=""file:Encrypted""/>
</route>

<route id=""decrypter"">
    <from uri=""file:ToDecrypt""/>
    <unmarshal ref=""decrypt""/>
    <to uri=""file:Decrypted""/>
</route>
{code}
 

The encryption does work, while the decryption throws an error:
{noformat}
org.bouncycastle.openpgp.PGPException: PGP message is encrypted with a key which could not be found in the Secret Keyring.{noformat}
I created a repo with the files being used (camel context, PGP private and public keys), that can be viewed here: [https://github.com/apoguy/Camel-PGP-Test]","This was tested on Windows 10, Java 1.8.191. Using camel core and camel crypto both at 2.21.1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,24/Oct/18 11:46;feinhorn;camel-context.xml;https://issues.apache.org/jira/secure/attachment/12945391/camel-context.xml,24/Oct/18 11:46;feinhorn;private.pgp;https://issues.apache.org/jira/secure/attachment/12945392/private.pgp,24/Oct/18 11:46;feinhorn;public.pgp;https://issues.apache.org/jira/secure/attachment/12945393/public.pgp,,3.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-10-24 11:45:24.0,,,,,,,0|i3zkzr:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Swagger REST DSL generator not honoring basePath ,CAMEL-12893,13193245,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,22/Oct/18 11:58,22/Oct/18 12:28,13/Mar/19 22:20,22/Oct/18 12:28,2.19.0,,,,,,,,,,,,,,,2.23.0,,,,,tooling,,,,,,0,,,,When the OpenAPI specification contains a {{basePath}} property the REST DSL routes should be prefixed by that value. The value is currently ignored.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 22 12:28:54 UTC 2018,,,,,,,0|i3zhcf:,9223372036854775807,,,,,,,,,,"22/Oct/18 12:28;zregvart;Now {{basePath}} is added to the generated REST DSL (Java route, Java source code and XML REST).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kubernetes getConfigMap does not use Namespace Header,CAMEL-12891,13193014,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,bobpaulin,bobpaulin,20/Oct/18 03:12,22/Oct/18 09:42,13/Mar/19 22:20,22/Oct/18 06:04,2.21.2,2.22.0,,,,,,,,,,,,,,2.21.4,2.22.2,2.23.0,,,camel-kubernetes,,,,,,0,,,,The getConfigMap operation does not return a map in a namespace when the CamelKubernetesNamespaceName being specified.  This header should be used by getConfigMap when it is present.,Kubernetes 1.9.11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-20 03:31:24.752,,,no_permission,,Unknown,,,,Patch,,,,,,,,,9223372036854775807,,,Mon Oct 22 09:42:13 UTC 2018,,,Patch Available,,,,0|i3zfx3:,9223372036854775807,,,,,,,,,,"20/Oct/18 03:31;githubbot;bobpaulin opened a new pull request #2573: CAMEL-12891 - Allow getConfigMap operation to specify namespace.
URL: https://github.com/apache/camel/pull/2573
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Oct/18 06:03;githubbot;oscerd commented on issue #2573: CAMEL-12891 - Allow getConfigMap operation to specify namespace.
URL: https://github.com/apache/camel/pull/2573#issuecomment-431746925
 
 
   Merged on master, 2.22.x and 2.21.x, thanks @bobpaulin 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Oct/18 06:03;githubbot;oscerd closed pull request #2573: CAMEL-12891 - Allow getConfigMap operation to specify namespace.
URL: https://github.com/apache/camel/pull/2573
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/config_maps/KubernetesConfigMapsProducer.java b/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/config_maps/KubernetesConfigMapsProducer.java
index 7513a8e43af..6878a337cf9 100644
--- a/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/config_maps/KubernetesConfigMapsProducer.java
+++ b/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/config_maps/KubernetesConfigMapsProducer.java
@@ -109,11 +109,16 @@ protected void doListConfigMapsByLabels(Exchange exchange, String operation) thr
     protected void doGetConfigMap(Exchange exchange, String operation) throws Exception {
         ConfigMap configMap = null;
         String cfMapName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_NAME, String.class);
+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);
         if (ObjectHelper.isEmpty(cfMapName)) {
             LOG.error(""Get a specific ConfigMap require specify a ConfigMap name"");
             throw new IllegalArgumentException(""Get a specific ConfigMap require specify a ConfigMap name"");
         }
-        configMap = getEndpoint().getKubernetesClient().configMaps().withName(cfMapName).get();
+        if(namespaceName != null) {
+            configMap = getEndpoint().getKubernetesClient().configMaps().inNamespace(namespaceName).withName(cfMapName).get();
+        } else {
+            configMap = getEndpoint().getKubernetesClient().configMaps().withName(cfMapName).get();
+        }
 
         MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);
         exchange.getOut().setBody(configMap);
diff --git a/components/camel-kubernetes/src/test/java/org/apache/camel/component/kubernetes/producer/KubernetesConfigMapsProducerTest.java b/components/camel-kubernetes/src/test/java/org/apache/camel/component/kubernetes/producer/KubernetesConfigMapsProducerTest.java
index ef63de6bf04..f4497698a82 100644
--- a/components/camel-kubernetes/src/test/java/org/apache/camel/component/kubernetes/producer/KubernetesConfigMapsProducerTest.java
+++ b/components/camel-kubernetes/src/test/java/org/apache/camel/component/kubernetes/producer/KubernetesConfigMapsProducerTest.java
@@ -73,9 +73,9 @@ public void process(Exchange exchange) throws Exception {
 
         assertEquals(3, result.size());
     }
-
+    
     @Test
-    public void getConfigMapTest() throws Exception {
+    public void getConfigMapTestDefaultNamespace() throws Exception {
         ObjectMeta meta = new ObjectMeta();
         meta.setName(""cm1"");
         server.expect().withPath(""/api/v1/namespaces/test/configmaps/cm1"").andReturn(200, new ConfigMapBuilder().withMetadata(meta).build()).once();
@@ -84,7 +84,26 @@ public void getConfigMapTest() throws Exception {
 
             @Override
             public void process(Exchange exchange) throws Exception {
-                exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, ""test"");
+                exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_NAME, ""cm1"");
+            }
+        });
+
+        ConfigMap result = ex.getOut().getBody(ConfigMap.class);
+
+        assertEquals(""cm1"", result.getMetadata().getName());
+    }
+
+    @Test
+    public void getConfigMapTestCustomNamespace() throws Exception {
+        ObjectMeta meta = new ObjectMeta();
+        meta.setName(""cm1"");
+        server.expect().withPath(""/api/v1/namespaces/custom/configmaps/cm1"").andReturn(200, new ConfigMapBuilder().withMetadata(meta).build()).once();
+        server.expect().withPath(""/api/v1/namespaces/custom/configmaps/cm2"").andReturn(200, new ConfigMapBuilder().build()).once();
+        Exchange ex = template.request(""direct:getConfigMap"", new Processor() {
+
+            @Override
+            public void process(Exchange exchange) throws Exception {
+                exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, ""custom"");
                 exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_NAME, ""cm1"");
             }
         });


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Oct/18 06:04;ancosen;Thanks [~bobpaulin]

Comments on github don't work this morning. So I'm writing you on JIRA.","22/Oct/18 09:42;githubbot;oscerd commented on issue #2573: CAMEL-12891 - Allow getConfigMap operation to specify namespace.
URL: https://github.com/apache/camel/pull/2573#issuecomment-431768172
 
 
   Thanks @bobpaulin merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Printer unable to print to the network printer,CAMEL-12890,13192456,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,calyanbandi,calyanbandi,18/Oct/18 08:23,22/Oct/18 06:18,13/Mar/19 22:20,22/Oct/18 05:51,2.17.0,,,,,,,,,,,,,,,2.21.4,2.22.2,2.23.0,,,camel-printer,,,,,,0,patch,ready-to-commit,,"Hi,

We have developed a camel route to print a PDF file to a network printer that is configured on the machine. The route looks as follows:

 

<route id=""_route1"">
 <from uri=""file:/opt/user/data?fileName=test.PDF&amp;noop=true""/>
 <to uri=""lpr://1.2.3.4/B4-2nd-floor-right-wing?copies=1&amp;sides=Sides.ONE_SIDED&amp;mimeType=PDF&amp;mediaSize=na-letter&amp;flavor=DocFlavor.INPUT_STREAM&amp;sendToPrinter=true""/>
 </route>

 

When this route is executed we see the following error:

org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[lpr://1.2.3.4:9100/B4-2nd-floor-right-wing?copies=1&flavor=DocFlavor.INPUT_STREAM&mediaSize=na-letter&mediaTray=AUTOSENSE&mimeType=PDF&orientation=portrait&sendToPrinter=true&sides=one-sided]. Reason: javax.print.PrintException: No printer found with name: 1.2.3.4/B4-2nd-floor-right-wing. Please verify that the host and printer are registered and reachable from this machine.

 

With DEBUG logs enabled, i can that it is using the following printer name.

2018-10-17 21:01:05,628 | DEBUG | xtenderThread-26 | PrinterProducer                  | 794 - org.apache.camel.camel-core - 2.17.0.redhat-630310 | Using printer name: 1.2.3.4/B4-2nd-floor-right-wing

 

After more debugging came across the following code in PrinterProducer.java in camel-printer component

private int findPrinter(PrintService[] services, String printer) {
 int position = -1;
 for (int i = 0; i < services.length; i++) {
 if (services[i].getName().toLowerCase().endsWith(printer.toLowerCase())) {
 position = i;
 break;
 }
 }
 return position;
 }

Printer services configured on the machine are:
 * B4-2nd-floor-right-wing
 * B4-2nd-floor-left-wing
 * B4-1st-floor-right-wing
 * B4-1st-floor-left-wing

 

Here the if block condition

{color:#FF0000}services[i].getName().toLowerCase().endsWith(printer.toLowerCase()){color} will always evaluate to false. Because my service name is ""B4-2nd-floor-right-wing"" and printerName in the URI is ""1.2.3.4/B4-2nd-floor-right-wing"" so what you are checking is:

{color:#FF0000}if (""B4-2nd-floor-right-wing"".toLowerCase().endsWith(""1.2.3.4/B4-2nd-floor-right-wing"".toLowerCase()){color} which is always false

 

If  i change the condition to (""1.2.3.4/B4-2nd-floor-right-wing"".toLowerCase().endsWith(""B4-2nd-floor-right-wing"".toLowerCase()) then it works fine

 

I took the latest version (2.23.0-SNAPSHOT) from github which is also having the same condition. Modified the single line and ran my route and it worked fine. 

 

Note that the issue happens only when trying with remote printer and with local printer it works fine. I tested with local printer in my windows PC and it worked fine but none (Windows/Linux) worked with remote printer configuration.

 

Thanks,

Kalyan"," 

Camel version 2.17.0

OS - RHEL Linux 

Running as a standalone application with only following dependencies
 * camel-core
 * camel-spring
 * camel-printer

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,18/Oct/18 08:20;calyanbandi;testCamelPrinter.xml;https://issues.apache.org/jira/secure/attachment/12944500/testCamelPrinter.xml,,,,1.0,,,,,,,,,,,,,,,,,,,2018-10-18 08:39:40.523,,,no_permission,,Novice,,,http://camel.465427.n5.nabble.com/Cannot-create-endpoint-with-camel-printer-component-td5742654.html#a5743178,,,,,,,,,,9223372036854775807,,,Mon Oct 22 06:18:39 UTC 2018,,,,,,,0|i3zch3:,9223372036854775807,,,,,,,,,,"18/Oct/18 08:39;dmvolod;[~calyanbandi], you are welcome to provide PR and/or JUnit test for this issue.","19/Oct/18 17:16;githubbot;b2kalyan opened a new pull request #2572: Fixing issue CAMEL-12890
URL: https://github.com/apache/camel/pull/2572
 
 
   Please refer to the following link for more detailed explanation about the issue.
   
   https://issues.apache.org/jira/projects/CAMEL/issues/CAMEL-12890?filter=allopenissues
   
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Oct/18 05:52;githubbot;oscerd commented on issue #2572: Fixing issue CAMEL-12890
URL: https://github.com/apache/camel/pull/2572#issuecomment-431745617
 
 
   Thanks, merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Oct/18 05:52;githubbot;oscerd closed pull request #2572: Fixing issue CAMEL-12890
URL: https://github.com/apache/camel/pull/2572
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java
index 7e69aa7759b..e19f9f0b08a 100644
--- a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java
+++ b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java
@@ -148,7 +148,7 @@ private int findPrinter(PrintService[] services, String printer) {
             // align slashes so we match / or \
             printerName = printerName.toLowerCase(Locale.US);
             printerName = printerName.replace('\\', '/');
-            if (printerName.endsWith(printer)) {
+            if (printer.endsWith(printerName)) {
                 position = i;
                 break;
             }
diff --git a/components/camel-printer/src/test/java/org/apache/camel/component/printer/PrinterPrintTest.java b/components/camel-printer/src/test/java/org/apache/camel/component/printer/PrinterPrintTest.java
index 8c099c48305..5a02c8b8f23 100644
--- a/components/camel-printer/src/test/java/org/apache/camel/component/printer/PrinterPrintTest.java
+++ b/components/camel-printer/src/test/java/org/apache/camel/component/printer/PrinterPrintTest.java
@@ -306,6 +306,36 @@ public void configure() {
         verify(job1, times(1)).print(any(Doc.class), any(PrintRequestAttributeSet.class));
     }
 
+    /*
+     * Test for CAMEL-12890
+     * Unable to send to remote printer
+     * */
+    @Test
+    public void testSendingFileToRemotePrinter() throws Exception {
+        // setup javax.print 
+        PrintService ps1 = mock(PrintService.class);
+        when(ps1.getName()).thenReturn(""printer1"");
+        when(ps1.isDocFlavorSupported(any(DocFlavor.class))).thenReturn(Boolean.TRUE);
+        boolean res1 = PrintServiceLookup.registerService(ps1);
+        assertTrue(""The Remote PrintService #1 should be registered."", res1);
+        DocPrintJob job1 = mock(DocPrintJob.class);
+        when(ps1.createPrintJob()).thenReturn(job1);
+
+        context.addRoutes(new RouteBuilder() {
+
+            public void configure() {
+                from(""direct:start1"").to(""lpr://remote/printer1?sendToPrinter=true"");
+            }
+        });
+        context.start();
+
+        template.sendBody(""direct:start1"", ""Hello Printer 1"");
+
+        context.stop();
+
+        verify(job1, times(1)).print(any(Doc.class), any(PrintRequestAttributeSet.class));
+    }
+
     @Test
     public void setJobName() throws Exception {
         if (isAwtHeadless()) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Oct/18 05:52;githubbot;oscerd commented on issue #2572: Fixing issue CAMEL-12890
URL: https://github.com/apache/camel/pull/2572#issuecomment-431745680
 
 
   Thanks, merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Oct/18 05:52;githubbot;oscerd commented on issue #2572: Fixing issue CAMEL-12890
URL: https://github.com/apache/camel/pull/2572#issuecomment-431745703
 
 
   Thanks, merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Oct/18 06:05;ancosen;Thanks [~calyanbandi]

Comments on github don't work this morning, so I'm writing you here.","22/Oct/18 06:17;calyanbandi;You are welcome Andrea.

I am glad that i was able to contribute to the open source community. 

 ",22/Oct/18 06:18;ancosen;We're waiting for other contributions then :),,,,,,,,,,,,,,,,,,,,,,,,
Atom consumer stops polling,CAMEL-12880,13191454,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,saravanakumar,saravanakumar,saravanakumar,14/Oct/18 14:52,15/Oct/18 07:16,13/Mar/19 22:20,15/Oct/18 06:03,2.22.1,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-atom,,,,,,0,,,,"Camel-atom consumer stops polling for new feeds when a connection error occurs. 

It uses java.net.HttpURLConnection without a connection timeout value(The default value is 0 i.e. no timeout).

When network error occur, connection threads hang and it causes ScheduledExecutorService stop polling.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-14 14:54:51.347,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 15 06:03:32 UTC 2018,,,,,,,0|i3z6b3:,9223372036854775807,,,,,,,,,,"14/Oct/18 14:54;githubbot;saravanakumar1987 opened a new pull request #2565: CAMEL-12880 : Atom consumer stops polling
URL: https://github.com/apache/camel/pull/2565
 
 
   PR for https://issues.apache.org/jira/browse/CAMEL-12880. 
   Setting a timeout value of 60 seconds to throw exception if connection not successful so that the scheduled poll consumer restart polling.
   
   Thanks,
   Saravanakumar

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Oct/18 14:54;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/2565

    CAMEL-12880 : Atom consumer stops polling

    PR for https://issues.apache.org/jira/browse/CAMEL-12880. 
    Setting a timeout value of 60 seconds to throw exception if connection not successful so that the scheduled poll consumer restart polling.
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2565.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2565
    
----
commit f57fc05e09637c6c94551f7b2f3fdd407a00b957
Author: Saravanakumar Selvaraj <saravanakumar.java@...>
Date:   2018-10-14T14:52:50Z

    CAMEL-12880 : Atom consumer stops polling

----
","15/Oct/18 05:57;githubbot;oscerd closed pull request #2565: CAMEL-12880 : Atom consumer stops polling
URL: https://github.com/apache/camel/pull/2565
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-atom/src/main/java/org/apache/camel/component/atom/AtomUtils.java b/components/camel-atom/src/main/java/org/apache/camel/component/atom/AtomUtils.java
index f6e9b2c3cee..5b1875a8b45 100644
--- a/components/camel-atom/src/main/java/org/apache/camel/component/atom/AtomUtils.java
+++ b/components/camel-atom/src/main/java/org/apache/camel/component/atom/AtomUtils.java
@@ -20,6 +20,7 @@
 import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.net.URL;
+import java.net.URLConnection;
 
 import org.apache.abdera.Abdera;
 import org.apache.abdera.model.Document;
@@ -53,13 +54,19 @@ public static Parser getAtomParser() {
      * @throws ParseException is thrown if the parsing failed
      */
     public static Document<Feed> parseDocument(String uri) throws IOException, ParseException {
-        InputStream in = new URL(uri).openStream();
+        URL feedUrl = new URL(uri);
+        URLConnection urlConn = feedUrl.openConnection();
+        urlConn.setConnectTimeout(60000);
+        urlConn.setReadTimeout(60000);
+        InputStream in = urlConn.getInputStream();
         return parseInputStream(in);
     }
 
     public static Document<Feed> parseDocument(String uri, String username, String password) throws IOException {
         URL feedUrl = new URL(uri);
         HttpURLConnection httpcon = (HttpURLConnection) feedUrl.openConnection();
+        httpcon.setConnectTimeout(60000);
+        httpcon.setReadTimeout(60000);
         String encoding = Base64.encodeBase64String(username.concat("":"").concat(password).getBytes());
         httpcon.setRequestProperty(""Authorization"", ""Basic "" + encoding);
         InputStream in = httpcon.getInputStream();


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/Oct/18 05:57;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2565
","15/Oct/18 06:03;githubbot;oscerd commented on issue #2565: CAMEL-12880 : Atom consumer stops polling
URL: https://github.com/apache/camel/pull/2565#issuecomment-429718607
 
 
   Thanks @saravanakumar1987 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-google-calendar-stream: Last update date must consider UpdatedMin field instead of TimeMin when used,CAMEL-12874,13190839,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,11/Oct/18 07:27,11/Oct/18 07:40,13/Mar/19 22:20,11/Oct/18 07:40,,,,,,,,,,,,,,,,2.23.0,,,,,camel-google-calendar,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-10-11 07:27:45.0,,,,,,,0|i3z2jj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-servlet - Example for HttpRegistry no longer works throwing FinalModifierException,CAMEL-12873,13190556,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,10/Oct/18 04:15,10/Oct/18 08:29,13/Mar/19 22:20,10/Oct/18 08:29,2.22.1,,,,,,,,,,,,,,,2.23.0,,,,,camel-http-common,camel-servlet,,,,,0,,,,"There was a configuration example for {{HttpRegistry}}, which is introduced by CAMEL-3549, under {{tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/servlet/}}. The test itself was removed probably because it depended on deprecated Spring DM, but the use case CAMEL-3549, which is to use a CamelServlet instance across OSGi bundles, exemplified by the test should be still valid and maintained.

However, with the latest Camel when deploying the attached example ({{camel-example-servlet-httpregistry-blueprint.zip}}) to Karaf it fails to deploy throwing the following error:
{code}
2018-10-09T20:42:54,813 | ERROR | FelixStartLevel  | BlueprintContainerImpl           | 52 - org.apache.aries.blueprint.core - 1.9.0 | Unable to start blueprint container for bundle camel-example-servlet-httpregistry-blueprint/2.23.0.SNAPSHOT
org.osgi.service.blueprint.container.ComponentDefinitionException: org.apache.aries.proxy.FinalModifierException: The methods protected final void org.apache.camel.http.common.CamelServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException,java.io.IOException in class org.apache.camel.http.common.CamelServlet are final.
	at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:141) ~[52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:81) ~[52:org.apache.aries.blueprint.core:1.9.0]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:?]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:90) ~[52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:360) ~[52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:190) ~[52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:716) ~[52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:413) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:278) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:299) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:268) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:264) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:254) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179) [?:?]
	at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730) [?:?]
	at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485) [?:?]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4579) [?:?]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2174) [?:?]
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1373) [?:?]
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:308) [?:?]
	at java.lang.Thread.run(Thread.java:748) [?:?]
Caused by: org.apache.aries.proxy.FinalModifierException: The methods protected final void org.apache.camel.http.common.CamelServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException,java.io.IOException in class org.apache.camel.http.common.CamelServlet are final.
	at org.apache.aries.proxy.impl.gen.ProxySubclassGenerator.getProxySubclass(ProxySubclassGenerator.java:112) ~[?:?]
	at org.apache.aries.proxy.impl.gen.ProxySubclassGenerator.newProxySubclassInstance(ProxySubclassGenerator.java:171) ~[?:?]
	at org.apache.aries.proxy.impl.AsmProxyManager.createNewProxy(AsmProxyManager.java:140) ~[?:?]
	at org.apache.aries.proxy.impl.AbstractProxyManager.createDelegatingInterceptingProxy(AbstractProxyManager.java:77) ~[?:?]
	at org.apache.aries.proxy.impl.AbstractProxyManager.createDelegatingProxy(AbstractProxyManager.java:42) ~[?:?]
	at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.createProxy(AbstractServiceReferenceRecipe.java:332) ~[?:?]
	at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:125) ~[?:?]
	... 25 more
{code}
This is clearly because at some point in time {{CamelServlet.service()}} method was marked as {{final}}. We should remove it to restore the use case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,10/Oct/18 04:14;tadayosi;camel-example-servlet-httpregistry-blueprint.zip;https://issues.apache.org/jira/secure/attachment/12943169/camel-example-servlet-httpregistry-blueprint.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2018-10-10 04:31:17.921,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 10 08:28:38 UTC 2018,,,,,,,0|i3z0t3:,9223372036854775807,,,,,,,,,,"10/Oct/18 04:31;githubbot;tadayosi opened a new pull request #2559: CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works…
URL: https://github.com/apache/camel/pull/2559
 
 
   … throwing FinalModifierException
   
   It also recovers an example test which existed under `tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/servlet/` as an example.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Oct/18 04:31;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/2559

    CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works…

    … throwing FinalModifierException
    
    It also recovers an example test which existed under `tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/servlet/` as an example.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-12873

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2559.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2559
    
----
commit e145c59edd652b1df567ac07423f70fe33133c7e
Author: Tadayoshi Sato <sato.tadayoshi@...>
Date:   2018-10-10T04:25:21Z

    CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works throwing FinalModifierException

----
","10/Oct/18 07:37;githubbot;oscerd commented on issue #2559: CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works…
URL: https://github.com/apache/camel/pull/2559#issuecomment-428469453
 
 
   For the moment I merged only on master. That final is there since three years. So I won't backport. Don't know what @davsclaus think about backporting this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Oct/18 08:08;githubbot;tadayosi commented on issue #2559: CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works…
URL: https://github.com/apache/camel/pull/2559#issuecomment-428478257
 
 
   Thanks @oscerd. I'm fine with merging only on master atm. We can wait until some other users complain about it for older versions :wink: 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Oct/18 08:28;githubbot;oscerd commented on issue #2559: CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works…
URL: https://github.com/apache/camel/pull/2559#issuecomment-428484141
 
 
   Thanks @tadayosi :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Oct/18 08:28;githubbot;oscerd closed pull request #2559: CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works…
URL: https://github.com/apache/camel/pull/2559
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-http-common/src/main/java/org/apache/camel/http/common/CamelServlet.java b/components/camel-http-common/src/main/java/org/apache/camel/http/common/CamelServlet.java
index 2b12a6283b1..105373d555a 100644
--- a/components/camel-http-common/src/main/java/org/apache/camel/http/common/CamelServlet.java
+++ b/components/camel-http-common/src/main/java/org/apache/camel/http/common/CamelServlet.java
@@ -71,7 +71,7 @@ public void init(ServletConfig config) throws ServletException {
     }
 
     @Override
-    protected final void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
+    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
         if (isAsync()) {
             final AsyncContext context = req.startAsync();
             //run async
diff --git a/components/camel-servlet/src/main/docs/servlet-component.adoc b/components/camel-servlet/src/main/docs/servlet-component.adoc
index fee56721985..9e52612226e 100644
--- a/components/camel-servlet/src/main/docs/servlet-component.adoc
+++ b/components/camel-servlet/src/main/docs/servlet-component.adoc
@@ -325,79 +325,71 @@ like this:
 
 From *Camel 2.6.0*, you can publish the
 https://github.com/apache/camel/blob/master/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/CamelHttpTransportServlet.java[CamelHttpTransportServlet]
-as an OSGi service with help of SpringDM like this:
+as an OSGi service with Blueprint like this:
 
 [source,xml]
 -------------------------------------------------------------------------
-<beans xmlns=""http://www.springframework.org/schema/beans""
-       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
-       xmlns:osgi=""http://www.springframework.org/schema/osgi""
-       xsi:schemaLocation=""
-       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
-       http://www.springframework.org/schema/osgi  http://www.springframework.org/schema/osgi/spring-osgi.xsd"">
-
-    <bean id=""camelServlet"" class=""org.apache.camel.component.servlet.CamelHttpTransportServlet"">
-    </bean>
+<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
+           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+           xsi:schemaLocation=""
+           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">
+
+    <bean id=""camelServlet"" class=""org.apache.camel.component.servlet.CamelHttpTransportServlet"" />
 
     <!--
-        Enlist it in OSGi service registry
+        Enlist it in OSGi service registry.
         This will cause two things:
         1) As the pax web whiteboard extender is running the CamelServlet will
            be registered with the OSGi HTTP Service
         2) It will trigger the HttpRegistry in other bundles so the servlet is
            made known there too
     -->
-    <osgi:service ref=""camelServlet"">
-        <osgi:interfaces>
+    <service ref=""camelServlet"">
+        <interfaces>
             <value>javax.servlet.Servlet</value>
-            <value>org.apache.camel.component.http.CamelServlet</value>
-        </osgi:interfaces>
-        <osgi:service-properties>
+            <value>org.apache.camel.http.common.CamelServlet</value>
+        </interfaces>
+        <service-properties>
             <entry key=""alias"" value=""/camel/services"" />
             <entry key=""matchOnUriPrefix"" value=""true"" />
-            <entry key=""servlet-name"" value=""CamelServlet""/>
-        </osgi:service-properties>
-    </osgi:service>
+            <entry key=""servlet-name"" value=""CamelServlet"" />
+        </service-properties>
+    </service>
 
-</beans>
+</blueprint>
 -------------------------------------------------------------------------
 
-Then use this service in your camel route like this:
+Then use this service in your Camel route like this:
 
 [source,xml]
 -------------------------------------------------------------------------
-<beans xmlns=""http://www.springframework.org/schema/beans""
-       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
-       xmlns:camel=""http://camel.apache.org/schema/spring""
-       xmlns:osgi=""http://www.springframework.org/schema/osgi""
-       xsi:schemaLocation=""
-       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
-       http://www.springframework.org/schema/osgi  http://www.springframework.org/schema/osgi/spring-osgi.xsd
-       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
-
-    <osgi:reference id=""servletref"" interface=""org.apache.camel.component.http.CamelServlet"">
-        <osgi:listener bind-method=""register"" unbind-method=""unregister"">
-            <ref bean=""httpRegistry""/>
-        </osgi:listener>
-    </osgi:reference>
-
-    <bean id=""httpRegistry"" class=""org.apache.camel.component.servlet.DefaultHttpRegistry""/>
+<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
+           xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0""
+           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+           xsi:schemaLocation=""
+           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">
+
+    <reference id=""servletref"" ext:proxy-method=""classes"" interface=""org.apache.camel.http.common.CamelServlet"">
+        <reference-listener ref=""httpRegistry"" bind-method=""register"" unbind-method=""unregister"" />
+    </reference>
+
+    <bean id=""httpRegistry"" class=""org.apache.camel.component.servlet.DefaultHttpRegistry"" />
 
     <bean id=""servlet"" class=""org.apache.camel.component.servlet.ServletComponent"">
         <property name=""httpRegistry"" ref=""httpRegistry"" />
     </bean>
 
-    <bean id=""servletProcessor"" class=""org.apache.camel.itest.osgi.servlet.ServletProcessor"" />
+    <bean id=""servletProcessor"" class=""org.apache.camel.example.servlet.ServletProcessor"" />
 
-    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
+    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
         <route>
-            <!-- notice how we can use the servlet scheme which is that osgi:reference above -->
-            <from uri=""servlet:///hello""/>
-            <process ref=""servletProcessor""/>
+            <!-- Notice how we can use the servlet scheme which is that reference above -->
+            <from uri=""servlet://hello"" />
+            <process ref=""servletProcessor"" />
         </route>
     </camelContext>
 
-</beans>
+</blueprint>
 -------------------------------------------------------------------------
 
 For versions prior to Camel 2.6 you can use an `Activator` to publish
diff --git a/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/HttpRegistry.java b/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/HttpRegistry.java
index 980949bdd8b..6ec9847feb9 100644
--- a/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/HttpRegistry.java
+++ b/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/HttpRegistry.java
@@ -20,14 +20,15 @@
 import org.apache.camel.http.common.HttpConsumer;
 
 /**
- * Keeps track of HttpConsumers and CamelServlets and 
+ * Keeps track of HttpConsumers and CamelServlets and
  * connects them to each other. In OSGi there should
  * be one HttpRegistry per bundle.
  * 
  * A CamelServlet that should serve more than one
  * bundle should be registered as an OSGi service.
- * The HttpRegistryImpl can then be configured to listen
- * to service changes. See /tests/camel-itest-osgi/../servlet
+ * The {@link DefaultHttpRegistry} can then be configured to listen
+ * to service changes.
+ * See /examples/camel-example-servlet-httpregistry-blueprint
  * for an example how to use this.
  */
 public interface HttpRegistry {
@@ -42,4 +43,4 @@
 
     CamelServlet getCamelServlet(String servletName);
 
-}
\ No newline at end of file
+}
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/README.md b/examples/camel-example-servlet-httpregistry-blueprint/README.md
new file mode 100644
index 00000000000..77467551ec0
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/README.md
@@ -0,0 +1,55 @@
+# Camel Servlet HttpRegistry Blueprint example
+
+### Introduction
+
+This example shows how to use `camel-servlet` [HttpRegistry](https://github.com/apache/camel/blob/master/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/HttpRegistry.java) so that a `CamelServlet` can serve multiple OSGi bundles.
+
+### Build
+
+You will need to compile this example first:
+
+    mvn install
+
+### Run
+
+To install Apache Camel in Karaf you type in the shell (we use version ${project.version}):
+
+    feature:repo-add camel ${project.version}
+    feature:install camel
+
+First you need to install the following features in Karaf/ServiceMix with:
+
+    feature:install camel-servlet
+    feature:install war
+
+Then you can install the example:
+
+    install -s mvn:org.apache.camel.example/camel-example-servlet-httpregistry-blueprint/${project.version}
+
+And you can see the application running by tailing the logs
+
+    log:tail
+
+And you can use <kbd>ctrl</kbd>+<kbd>c</kbd> to stop tailing the log.
+
+There is a servlet that supports the following operation:
+
+- POST /camel/services/hello - to echo the request body
+
+From the command shell you can use `curl` to post a request to the servlet as shown below:
+
+    curl -X POST -H ""Content-Type: text/plain"" -d ""Hello World"" http://localhost:8181/camel/services/hello
+
+
+### Configuration
+
+This example is implemented in XML DSL in the [src/main/resources/OSGI-INF/blueprint/camel-context.xml](src/main/resources/OSGI-INF/blueprint/camel-context.xml) file.
+
+
+### Forum, Help, etc
+
+If you hit problems please let us know on the Camel Forums:
+    <http://camel.apache.org/discussion-forums.html>
+
+Please help us make Apache Camel better - we appreciate any feedback you may
+have.  Enjoy!
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/pom.xml b/examples/camel-example-servlet-httpregistry-blueprint/pom.xml
new file mode 100644
index 00000000000..6b10a81407e
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/pom.xml
@@ -0,0 +1,82 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>org.apache.camel.example</groupId>
+    <artifactId>examples</artifactId>
+    <version>2.23.0-SNAPSHOT</version>
+  </parent>
+
+  <artifactId>camel-example-servlet-httpregistry-blueprint</artifactId>
+  <name>Camel :: Example :: Servlet HttpRegistry Blueprint</name>
+  <description>An example using Servlet and HttpRegistry with OSGi Blueprint</description>
+  <packaging>jar</packaging>
+
+  <properties>
+    <category>OSGi</category>
+    <title>Servlet HttpRegistry Blueprint</title>
+
+    <camel.osgi.import.pkg>
+      *
+    </camel.osgi.import.pkg>
+    <camel.osgi.export.pkg>
+      *
+    </camel.osgi.export.pkg>
+  </properties>
+
+  <dependencies>
+
+    <!-- camel -->
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-core</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-blueprint</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-servlet</artifactId>
+    </dependency>
+    
+    <!-- logging -->
+    <dependency>
+      <groupId>org.apache.logging.log4j</groupId>
+      <artifactId>log4j-api</artifactId>
+      <scope>runtime</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.logging.log4j</groupId>
+      <artifactId>log4j-core</artifactId>
+      <scope>runtime</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.logging.log4j</groupId>
+      <artifactId>log4j-slf4j-impl</artifactId>
+      <scope>runtime</scope>
+    </dependency>
+  </dependencies>
+
+</project>
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/src/main/java/org/apache/camel/example/servlet/ServletProcessor.java b/examples/camel-example-servlet-httpregistry-blueprint/src/main/java/org/apache/camel/example/servlet/ServletProcessor.java
new file mode 100644
index 00000000000..a674b1e52c3
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/src/main/java/org/apache/camel/example/servlet/ServletProcessor.java
@@ -0,0 +1,34 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.example.servlet;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class ServletProcessor implements Processor {
+
+    private static final Logger LOG = LoggerFactory.getLogger(ServletProcessor.class);
+
+    public void process(Exchange exchange) throws Exception {
+        String request = exchange.getIn().getBody(String.class);
+        LOG.info(""The request is: {}"", request);
+        exchange.getOut().setBody(""Echo "" + request);
+    }
+
+}
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/META-INF/LICENSE.txt b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/META-INF/LICENSE.txt
new file mode 100644
index 00000000000..6b0b1270ff0
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/META-INF/LICENSE.txt
@@ -0,0 +1,203 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      ""License"" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      ""Licensor"" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      ""Legal Entity"" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      ""control"" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      ""You"" (or ""Your"") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      ""Source"" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      ""Object"" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      ""Work"" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      ""Derivative Works"" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      ""Contribution"" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, ""submitted""
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as ""Not a Contribution.""
+
+      ""Contributor"" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a ""NOTICE"" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an ""AS IS"" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets ""[]""
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same ""printed page"" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the ""License"");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an ""AS IS"" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/META-INF/NOTICE.txt b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/META-INF/NOTICE.txt
new file mode 100644
index 00000000000..2e215bf2e6b
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/META-INF/NOTICE.txt
@@ -0,0 +1,11 @@
+   =========================================================================
+   ==  NOTICE file corresponding to the section 4 d of                    ==
+   ==  the Apache License, Version 2.0,                                   ==
+   ==  in this case for the Apache Camel distribution.                    ==
+   =========================================================================
+
+   This product includes software developed by
+   The Apache Software Foundation (http://www.apache.org/).
+
+   Please read the different LICENSE files present in the licenses directory of
+   this distribution.
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/OSGI-INF/blueprint/camel-context.xml b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/OSGI-INF/blueprint/camel-context.xml
new file mode 100644
index 00000000000..70adff3feff
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/OSGI-INF/blueprint/camel-context.xml
@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
+           xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0""
+           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+           xsi:schemaLocation=""
+           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">
+
+    <!-- availability=""optional"" is required only when the servlet service is packaged in the same bundle -->
+    <reference id=""servletRef"" ext:proxy-method=""classes"" interface=""org.apache.camel.http.common.CamelServlet""
+        availability=""optional"">
+        <reference-listener ref=""httpRegistry"" bind-method=""register"" unbind-method=""unregister"" />
+    </reference>
+
+    <bean id=""httpRegistry"" class=""org.apache.camel.component.servlet.DefaultHttpRegistry"" />
+
+    <bean id=""servlet"" class=""org.apache.camel.component.servlet.ServletComponent"">
+        <property name=""httpRegistry"" ref=""httpRegistry"" />
+    </bean>
+
+    <bean id=""servletProcessor"" class=""org.apache.camel.example.servlet.ServletProcessor"" />
+
+    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
+        <route>
+            <!-- Notice how we can use the servlet scheme which is that reference above -->
+            <from uri=""servlet://hello"" />
+            <process ref=""servletProcessor"" />
+        </route>
+    </camelContext>
+
+</blueprint>
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/OSGI-INF/blueprint/servlet-service.xml b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/OSGI-INF/blueprint/servlet-service.xml
new file mode 100644
index 00000000000..123e65cb26d
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/OSGI-INF/blueprint/servlet-service.xml
@@ -0,0 +1,45 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
+           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+           xsi:schemaLocation=""
+           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">
+
+    <bean id=""camelServlet"" class=""org.apache.camel.component.servlet.CamelHttpTransportServlet"" />
+
+    <!--
+        Enlist it in OSGi service registry.
+        This will cause two things:
+        1) As the pax web whiteboard extender is running the CamelServlet will
+           be registered with the OSGi HTTP Service
+        2) It will trigger the HttpRegistry in other bundles so the servlet is
+           made known there too
+    -->
+    <service ref=""camelServlet"">
+        <interfaces>
+            <value>javax.servlet.Servlet</value>
+            <value>org.apache.camel.http.common.CamelServlet</value>
+        </interfaces>
+        <service-properties>
+            <entry key=""alias"" value=""/camel/services"" />
+            <entry key=""matchOnUriPrefix"" value=""true"" />
+            <entry key=""servlet-name"" value=""CamelServlet"" />
+        </service-properties>
+    </service>
+
+</blueprint>
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/log4j2.properties b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/log4j2.properties
new file mode 100644
index 00000000000..9deb51c460b
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/log4j2.properties
@@ -0,0 +1,23 @@
+## ---------------------------------------------------------------------------
+## Licensed to the Apache Software Foundation (ASF) under one or more
+## contributor license agreements.  See the NOTICE file distributed with
+## this work for additional information regarding copyright ownership.
+## The ASF licenses this file to You under the Apache License, Version 2.0
+## (the ""License""); you may not use this file except in compliance with
+## the License.  You may obtain a copy of the License at
+##
+##      http://www.apache.org/licenses/LICENSE-2.0
+##
+## Unless required by applicable law or agreed to in writing, software
+## distributed under the License is distributed on an ""AS IS"" BASIS,
+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+## See the License for the specific language governing permissions and
+## limitations under the License.
+## ---------------------------------------------------------------------------
+
+appender.console.type = Console
+appender.console.name = console
+appender.console.layout.type = PatternLayout
+appender.console.layout.pattern = %d [%-15.15t] %-5p %-30.30c{1} - %m%n
+rootLogger.level = INFO
+rootLogger.appenderRef.console.ref = console
diff --git a/examples/camel-example-servlet-rest-blueprint/README.md b/examples/camel-example-servlet-rest-blueprint/README.md
index 16742d4779b..b3cc1470e8f 100644
--- a/examples/camel-example-servlet-rest-blueprint/README.md
+++ b/examples/camel-example-servlet-rest-blueprint/README.md
@@ -1,5 +1,4 @@
 # Camel Servlet REST and OSGi Blueprint example
-=============================================
 
 ### Introduction
 This example shows how to use Servlet REST to define REST endpoints in Camel routes using the Rest DSL
@@ -11,7 +10,7 @@ You will need to compile this example first:
 	mvn install
 
 
-### run
+### Run
 To install Apache Camel in Karaf you type in the shell (we use version ${project.version}):
 
 	feature:repo-add camel ${project.version}
@@ -35,9 +34,9 @@ And you can use <kbd>ctrl</kbd>+<kbd>c</kbd> to stop tailing the log.
 
 There is a user REST service that supports the following operations
 
- - GET /user/{id} - to view a user with the given id </li>
- - GET /user/final - to view all users</li>
- - PUT /user - to update/create an user</li>
+ - GET /user/{id} - to view a user with the given id
+ - GET /user/final - to view all users
+ - PUT /user - to update/create an user
 
 The view operations are HTTP GET, and update is using HTTP PUT.
 
@@ -54,12 +53,12 @@ From the command shell you can use curl to access the service as shown below:
 
 
 ### Configuration
-This example is implemented in XML DSL in the `src/main/resources/OSGI-INF/bluepring/camel.xml` file.
+This example is implemented in XML DSL in the `src/main/resources/OSGI-INF/blueprint/camel.xml` file.
 
 
 ### Forum, Help, etc
 
-If you hit an problems please let us know on the Camel Forums
+If you hit problems please let us know on the Camel Forums
 	<http://camel.apache.org/discussion-forums.html>
 
 Please help us make Apache Camel better - we appreciate any feedback you may
diff --git a/examples/pom.xml b/examples/pom.xml
index 80e6e4b6562..fea0e77ff41 100644
--- a/examples/pom.xml
+++ b/examples/pom.xml
@@ -97,6 +97,7 @@
     <module>camel-example-restlet-jdbc</module>
     <module>camel-example-route-throttling</module>
     <module>camel-example-scala</module>
+    <module>camel-example-servlet-httpregistry-blueprint</module>
     <module>camel-example-servlet-rest-blueprint</module>
     <module>camel-example-servlet-tomcat</module>
     <module>camel-example-servlet-tomcat-no-spring</module>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Oct/18 08:28;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2559
",,,,,,,,,,,,,,,,,,,,,,,,,,
make cxf consumer endpoints suspendable,CAMEL-12870,13190268,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,09/Oct/18 00:56,09/Oct/18 01:08,13/Mar/19 22:20,09/Oct/18 01:08,,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-cxf,camel-cxfrs,,,,,0,,,,"Currently both CxfConsumer and CxfRsConsumer are SuspendableService, however they don't implements Suspendable interface, which means in DefaultShutdownStrategy, when catching kill signal, those consumer endpoints will be shutdown immediately. So even though inflight and pending exchanges are completed, they have no change to return to client since CXF Consumer endpoints already shutdown. 

We should make cxf consumer endpoints suspendable to support graceful shutdown",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-10-09 00:56:28.0,,,,,,,0|i3yz27:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-salesforce component does not try to reconnect on specific error,CAMEL-12484,13157121,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,hemangajmera,hemangajmera,04/May/18 11:35,05/Oct/18 10:42,13/Mar/19 22:20,05/Oct/18 09:49,2.21.0,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-salesforce,,,,,,0,,,,"The issue is very much identical to CAMEL-10238 where camel component does not try to reconnect. It was resolved for that particular case, however there is additional scenario where we are facing exactly similar problem.

Here is the key log message after which component stops retrying

{{2018-05-03 17:19:50.257 WARN 7636 — [nt@911561694-23] o.a.c.c.s.i.s.SubscriptionHelper : Connect failure: {clientId=3qi3g4psrtqrntt15ockewu0a59q, advice=

{reconnect=none, interval=0}

, channel=/meta/connect, id=154, error=403::Unknown client, successful=false}}}

Please note that we are getting Connect failure multiple times but it is able to reconnect where there is exception or when the advice is to do handshake again. Here are those sample which works...
 * The one with exceptions

{quote}2018-05-03 17:19:17.965  WARN 7636 — [nt@911561694-23] o.a.c.c.s.i.s.SubscriptionHelper         : Connect failure: {failure=
Unknown macro: \{exception=java.io.EOFException}
],recv=HttpReceiverOverHTTP@144e8ebb(rsp=IDLE,failure=null)[HttpParser
Unknown macro: \{s=CLOSED,0 of -1}
]]<-DecryptedEndPoint@245db684
Unknown macro: \{telia-fi--dev.cs88.my.salesforce.com/85.222.137.144}
->HttpConnectionOverHTTP@69f41507(l:/0:0:0:0:0:0:0:1:60369 <-> r:telia-fi--dev.cs88.my.salesforce.com/85.222.137.144:443,closed=false)=>HttpChannelOverHTTP@3109c579(exchange=HttpExchange@76b96e24 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@5d6efa04(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator@43ac2f18
Unknown macro: \{s=START}
],recv=HttpReceiverOverHTTP@144e8ebb(rsp=IDLE,failure=null)[HttpParser

]]->SocketChannelEndPoint@6b93b346
Unknown macro: \{telia-fi--dev.cs88.my.salesforce.com/85.222.137.144}
Unknown macro: \{io=0/0,kio=0,kro=1}
 ->SslConnection@53bc7193\{NEED_WRAP,eio=-1/-1,di=-1}=>HttpConnectionOverHTTP@69f41507(l:/0:0:0:0:0:0:0:1:60369 <-> r:telia-fi--dev.cs88.my.salesforce.com/85.222.137.144:443,closed=false)=>HttpChannelOverHTTP@3109c579(exchange=HttpExchange@76b96e24 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@5d6efa04(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator@43ac2f18
Unknown macro: \{s=START}
],recv=HttpReceiverOverHTTP@144e8ebb(rsp=IDLE,failure=null)[HttpParser
Unknown macro: \{s=CLOSED,0 of -1}
]], message=\{clientId=3qi3g4psrtqrntt15ockewu0a59q, channel=/meta/connect, id=153, connectionType=long-polling}, connectionType=long-polling}, channel=/meta/connect, id=153, successful=false}
{quote}
 
 * The one with advice for new handshake

{quote}2018-05-03 16:31:08.970  WARN 7636 — [nt@911561694-21] o.a.c.c.s.i.s.SubscriptionHelper         : Connect failure:
Unknown macro: \{advice=Unknown macro}
, channel=/meta/connect, id=83, error=403::Unknown client, successful=false}
{quote}
 

One more thing, this log is coming from line 168 {{LOG.warn(""Connect failure: {}"", message);}} of the [https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/streaming/SubscriptionHelper.java#L168]. I see that there is no attempt to reconnect. If this information helps move things faster...

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,13/Aug/18 12:06;hemangajmera;logs.zip;https://issues.apache.org/jira/secure/attachment/12935360/logs.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2018-05-09 10:10:38.418,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 05 09:49:42 UTC 2018,,,,,,,0|i3tchj:,9223372036854775807,,,,,,,,,,"04/May/18 11:38;hemangajmera;Hi [~dhirajsb] and [~zregvart]

 

Can you please have a look that this ticket if time permits.

 

Thanks","09/May/18 09:54;hemangajmera;[~dhirajsb], [~zregvart], can you please look into this one.","09/May/18 10:10;zregvart;[~hemangajmera] can you provide details on how to reproduce this issue? I see that you're getting a 403 error with unknown client, potentially in this case until authentication information is updated reconnecting wont help.","06/Aug/18 14:20;davsclaus;Any update on this, or we will have to close it with cannot reproduce","13/Aug/18 10:31;hemangajmera;We have being running this component with debug logging for org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper

I have two logs, one before restart and one after restart...

Here are my observations.
 # In the logs before restart the component is running but not picking up message.We can see that after every 110 seconds it is polling message. However there are not messages being picked after 2018-08-06 02:01:36.024. Message with replayId = 11341 is the last one, after which it has not been able to pick any message.
 # Logs after restart where component picks up the messages without any changes. Since the component was started after 4 days there are few messages which are missing and the first message which it could get is 11485 and we have lost all the messages in between.
 # We are using camel springboot starter component for salesforce
 # We are using initial replay is as -2 and we are saving all the replayid to avoid duplicates.
 ","14/Aug/18 13:46;2billy;[~zregvart] [~davsclaus]

I am also getting a similar error. The scenario is as follows:
 # Successfully getting a token and hitting the Salesforce Composite API
 # Wait for ~5-6 minutes
 # executing the same call as in step (1) and the following error happens (after ~20 seconds).
 # executing the same call as in step (1) and it works.

It seems that camel-salesforce is keeping the HTTP connection open, but for some reason after ~5-6 minutes the connection is terminated and the first request after that point it fails with: 
{code:java}
java.io.EOFException: HttpConnectionOverHTTP@6bea0fd0{code}
This is a blocker for me as well.. :(

Error that occurs at step (3):

 
{code:java}
// Caused by: org.apache.camel.component.salesforce.api.SalesforceException: Unexpected error {0:null} executing {GET:https://blabla.salesforce.com/services/data/v43.0/sobjects/Blabla__c/Blabla__c/GB}
at org.apache.camel.component.salesforce.internal.client.AbstractClientBase$1.onComplete(AbstractClientBase.java:199)
at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:216)
at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:208)
at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:470)
at org.eclipse.jetty.client.HttpReceiver.abort(HttpReceiver.java:552)
at org.eclipse.jetty.client.HttpReceiver.responseFailure(HttpReceiver.java:442)
at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.failAndClose(HttpReceiverOverHTTP.java:369)
at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.earlyEOF(HttpReceiverOverHTTP.java:338)
at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1557)
at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.shutdown(HttpReceiverOverHTTP.java:209)
at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:147)
at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:73)
at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:133)
at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:155)
at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)
at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)
at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:291)
at org.eclipse.jetty.io.ssl.SslConnection$3.succeeded(SslConnection.java:151)
at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)
at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)
at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:762)
at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:680)
... 1 common frames omitted
Caused by: java.io.EOFException: HttpConnectionOverHTTP@6bea0fd0(l:/:56790 <-> r:saas-power.my.salesforce.com/:443,closed=false)=>HttpChannelOverHTTP@3b5b76fa(exchange=HttpExchange@79e09003 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@6df54357(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator@7a3939a8{s=START}],recv=HttpReceiverOverHTTP@41163db0(rsp=IDLE,failure=null)[HttpParser{s=CLOSED,0 of -1}]]<-DecryptedEndPoint@211a7fce{saas-power.my.salesforce.com/:443<->/,OPEN,fill=-,flush=-,to=1222972/0}->HttpConnectionOverHTTP@6bea0fd0(l:/:56790 <-> r:saas-power.my.salesforce.com/:443,closed=false)=>HttpChannelOverHTTP@3b5b76fa(exchange=HttpExchange@79e09003 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@6df54357(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator@7a3939a8{s=START}],recv=HttpReceiverOverHTTP@41163db0(rsp=IDLE,failure=null)[HttpParser{s=CLOSED,0 of -1}]]->SocketChannelEndPoint@66327f41{saas-powermy.salesforce.com/:443<->/:56790,ISHUT,fill=-,flush=-,to=18913/0}{io=0/0,kio=0,kro=1}->SslConnection@55f5fe56{NEED_WRAP,eio=-1/-1,di=-1}=>HttpConnectionOverHTTP@6bea0fd0(l:/:56790 <-> r:<http://saas-power.my.salesforce.com/85.222.132.58:443,closed=false|saas-power.my.salesforce.co:443,closed=false>)=>HttpChannelOverHTTP@3b5b76fa(exchange=HttpExchange@79e09003 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@6df54357(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator@7a3939a8{s=START}],recv=HttpReceiverOverHTTP@41163db0(rsp=IDLE,failure=null)[HttpParser{s=CLOSED,0 of -1}]]
... 16 common frames omitted
{code}
 

 ","14/Aug/18 15:30;2billy;In my case there is no bug! So what was happening is that the ""idleTimeout"" (with default value 0) was not expiring before SalesForce closed the connection (~5-6 minutes). The solution is to set
{code:java}
 clientProperties.put(""idleTimeout"", ""5000"");
 // ...
 component.setHttpClientProperties(clientProperties);
{code}
so as to make sure it expires before SF forcefully terminates the connection.

 

Thanks

 ","14/Aug/18 15:36;2billy;Actually, Camel Salesforce should set a reasonable default ""idleTimeout"" and not leave the jetty default 0 value (which if I am not wrong is ""never timeout""). As it is reasonable for SalesForce to eventually terminate the connection.

Thanks again!",15/Aug/18 11:30;zregvart;[~hemangajmera] can you see if the solution proposed by [~2billy] helps in your case? If it helps I would resolve this by setting the {{idleTimeout}} to a value other than {{0.}} Thanks :),20/Aug/18 06:37;hemangajmera;I will try out and let you know,"20/Aug/18 10:13;hemangajmera;I am using camel-salesforce-starter with springboot. Can I set the timeout by setting application.properties

{{camel.component.salesforce.httpClientProperties.idleTimeout=5000}}","20/Aug/18 10:16;hemangajmera;Also the first exception (line number 1530) after the last time it was able to receive message(line number 1282) is bit different

 
{code:java}
2018-08-06 05:03:18.822  INFO 9 --- [ent@710f4dc7-25] o.eclipse.jetty.client.ResponseNotifier  : Exception while notifying listener org.cometd.client.transport.LongPollingTransport$2@53962c22 java.lang.NullPointerException: null     at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936) ~[na:1.8.0_151]     at org.cometd.common.AbstractClientSession.getReleasableChannel(AbstractClientSession.java:320) ~[cometd-java-common-3.1.2.jar!/:na]     at org.cometd.common.AbstractClientSession.receive(AbstractClientSession.java:240) ~[cometd-java-common-3.1.2.jar!/:na]     at org.cometd.client.BayeuxClient.processMessage(BayeuxClient.java:822) ~[cometd-java-client-3.1.2.jar!/:na]     at org.cometd.client.BayeuxClient.processMessages(BayeuxClient.java:618) ~[cometd-java-client-3.1.2.jar!/:na]     at org.cometd.client.BayeuxClient.access$3100(BayeuxClient.java:100) ~[cometd-java-client-3.1.2.jar!/:na]     at org.cometd.client.BayeuxClient$MessageTransportListener.onMessages(BayeuxClient.java:1189) ~[cometd-java-client-3.1.2.jar!/:na]     at org.cometd.client.transport.LongPollingTransport$2.onComplete(LongPollingTransport.java:236) ~[cometd-java-client-3.1.2.jar!/:na]     at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:193) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:185) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:464) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.HttpReceiver.responseSuccess(HttpReceiver.java:410) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.messageComplete(HttpReceiverOverHTTP.java:301) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.http.HttpParser.handleContentMessage(HttpParser.java:628) [jetty-http-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.http.HttpParser.parseContent(HttpParser.java:1594) [jetty-http-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1442) [jetty-http-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.parse(HttpReceiverOverHTTP.java:173) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:134) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:72) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:133) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:155) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:291) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.io.ssl.SslConnection$3.succeeded(SslConnection.java:151) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:319) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:175) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:133) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:754) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:672) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at java.lang.Thread.run(Thread.java:748) [na:1.8.0_151]
{code}","14/Sep/18 10:52;hemangajmera;After adding below line in applications.properties, we have not faced the issue so far. 

{{camel.component.salesforce.httpClientProperties.idleTimeout=5000}}

It seems setting idleTimeout resolves the issue. 

From my end the issue is resolved, and if issue resurface, I will create another ticket.

However, before we close this ticket, we should set default value for this and add this information in the documentation.
","04/Oct/18 18:46;sowjanya.mudimala@gmail.com;I am willing to make a code fix to set a default value for idleTimeout. I am new to the process, let me know how I can get the ticket assigned to myself. 
Trying to create a patch as suggested here. https://github.com/apache/camel/blob/master/CONTRIBUTING.md#creating-patches","04/Oct/18 19:09;githubbot;sowjanyamudimala opened a new pull request #2552: CAMEL-12484: setting default idletimeout for httpclient
URL: https://github.com/apache/camel/pull/2552
 
 
    setting default idletimeout as per the suggestion in the ticket. 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Oct/18 19:09;githubbot;GitHub user sowjanyamudimala opened a pull request:

    https://github.com/apache/camel/pull/2552

    CAMEL-12484: setting default idletimeout for httpclient

     setting default idletimeout as per the suggestion in the ticket. 


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sowjanyamudimala/camel CAMEL-12484

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2552.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2552
    
----
commit 526e2164c1b29eccd21c966592c948adcf3f869e
Author: Sowjanya Mudimala <smudimala@...>
Date:   2018-10-04T19:03:56Z

    setting default idletimeout for httpclient

----
","04/Oct/18 19:22;githubbot;oscerd commented on issue #2552: CAMEL-12484: setting default idletimeout for httpclient
URL: https://github.com/apache/camel/pull/2552#issuecomment-427139203
 
 
   @zregvart can you have a look?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Oct/18 09:47;githubbot;zregvart closed pull request #2552: CAMEL-12484: setting default idletimeout for httpclient
URL: https://github.com/apache/camel/pull/2552
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java b/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java
index 7ced1a0fc9c..daa0f130026 100644
--- a/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java
+++ b/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java
@@ -80,6 +80,7 @@
     public static final String HTTP_PROXY_REALM = ""httpProxyRealm"";
 
     static final int CONNECTION_TIMEOUT = 60000;
+    static final int IDLE_TIMEOUT = 5000;
     static final Pattern SOBJECT_NAME_PATTERN = Pattern.compile(""^.*[\\?&]sObjectName=([^&,]+).*$"");
     static final String APEX_CALL_PREFIX = OperationName.APEX_CALL.value() + ""/"";
 
@@ -116,7 +117,7 @@
         label = ""common,security"", secret = true)
     private String refreshToken;
 
-    @Metadata(description = ""Username used in OAuth flow to gain access to access token. It's easy to get started with"" 
+    @Metadata(description = ""Username used in OAuth flow to gain access to access token. It's easy to get started with""
         + "" password OAuth flow, but in general one should avoid it as it is deemed less secure than other flows."",
         label = ""common,security"")
     private String userName;
@@ -716,6 +717,7 @@ static SalesforceHttpClient createHttpClient(final SslContextFactory sslContextF
         // default settings, use httpClientProperties to set other
         // properties
         httpClient.setConnectTimeout(CONNECTION_TIMEOUT);
+        httpClient.setIdleTimeout(IDLE_TIMEOUT);
 
         return httpClient;
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Oct/18 09:47;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/2552
","05/Oct/18 09:47;githubbot;zregvart commented on issue #2552: CAMEL-12484: setting default idletimeout for httpclient
URL: https://github.com/apache/camel/pull/2552#issuecomment-427307407
 
 
   Thanks for the PR @sowjanyamudimala :100: 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",05/Oct/18 09:49;zregvart;Thanks to [~sowjanya.mudimala@gmail.com] for pull request!,,,,,,,,,,,,
Camel-AWS IAM: The accessKey delete operation need to specify an AccessKey Id instead of a username,CAMEL-12860,13189668,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,05/Oct/18 08:46,05/Oct/18 09:00,13/Mar/19 22:20,05/Oct/18 09:00,,,,,,,,,,,,,,,,2.23.0,,,,,camel-aws,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-10-05 08:46:54.0,,,,,,,0|i3yven:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp tries reconnects twice as much as maximumReconnectAttempts,CAMEL-12850,13189043,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,03/Oct/18 01:42,03/Oct/18 07:25,13/Mar/19 22:20,03/Oct/18 07:25,2.22.1,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-ftp,,,,,,0,,,,"When {{maximumReconnectAttempts > 0}} on the endpoint, both camel-ftp consumers and producers retry connecting to an unavailable FTP server twice as much as the number of {{maximumReconnectAttempts}}. It is because of the following logic in {{RemoteFileConsumer.prePollCheck()}} and {{RemoteFileProducer.preWriteCheck()}}:
{code:java}
                if (getEndpoint().getMaximumReconnectAttempts() > 0) {
                    // only use recoverable if we are allowed any re-connect attempts
                    recoverableConnectIfNecessary();
                } else {
                    connectIfNecessary();
                }
{code}
where {{recoverableConnectIfNecessary()}} retries {{RemoteFileOperations.connect()}} once in case of initial connection failure.

Digging into the commit history, this logic appears to be introduced due to CAMEL-2829 as a workaround. However, since the root cause NET-327 is already resolved the logic doesn't seem to be necessary any more. So probably we can remove the logic to avoid attempting reconnects twice as much as {{maximumReconnectAttempts}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,03/Oct/18 01:19;tadayosi;FtpTimeoutWithMaximumReconnectAttemptsTest.java;https://issues.apache.org/jira/secure/attachment/12942224/FtpTimeoutWithMaximumReconnectAttemptsTest.java,,,,1.0,,,,,,,,,,,,,,,,,,,2018-10-03 02:10:58.093,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 03 07:25:41 UTC 2018,,,,,,,0|i3yrjz:,9223372036854775807,,,,,,,,,,"03/Oct/18 02:10;githubbot;tadayosi opened a new pull request #2545: CAMEL-12850: camel-ftp tries reconnects twice as much as maximumRecon…
URL: https://github.com/apache/camel/pull/2545
 
 
   …nectAttempts
   
   https://issues.apache.org/jira/browse/CAMEL-12850
   
   Sent the pull req for reviewing purposes at this moment. Please do not merge this until we fully discuss it's a valid way to fix it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Oct/18 02:10;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/2545

    CAMEL-12850: camel-ftp tries reconnects twice as much as maximumRecon…

    …nectAttempts
    
    https://issues.apache.org/jira/browse/CAMEL-12850
    
    Sent the pull req for reviewing purposes at this moment. Please do not merge this until we fully discuss it's a valid way to fix it.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-12850

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2545.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2545
    
----
commit 1cd4268a33e65657f82df9c415d9c25727cea737
Author: Tadayoshi Sato <sato.tadayoshi@...>
Date:   2018-10-03T02:07:22Z

    CAMEL-12850: camel-ftp tries reconnects twice as much as maximumReconnectAttempts

----
","03/Oct/18 02:13;githubbot;tadayosi commented on issue #2545: CAMEL-12850: camel-ftp tries reconnects twice as much as maximumRecon…
URL: https://github.com/apache/camel/pull/2545#issuecomment-426489836
 
 
   @davsclaus Can you please review?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Oct/18 06:31;githubbot;davsclaus closed pull request #2545: CAMEL-12850: camel-ftp tries reconnects twice as much as maximumRecon…
URL: https://github.com/apache/camel/pull/2545
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java
index f4e5c349565..8c18751d84d 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java
@@ -55,12 +55,7 @@ protected boolean prePollCheck() throws Exception {
             log.trace(""prePollCheck on {}"", getEndpoint().getConfiguration().remoteServerInformation());
         }
         try {
-            if (getEndpoint().getMaximumReconnectAttempts() > 0) {
-                // only use recoverable if we are allowed any re-connect attempts
-                recoverableConnectIfNecessary();
-            } else {
-                connectIfNecessary();
-            }
+            connectIfNecessary();
         } catch (Exception e) {
             loggedIn = false;
 
@@ -183,37 +178,6 @@ protected void forceDisconnect() {
         }
     }
 
-    protected void recoverableConnectIfNecessary() throws Exception {
-        try {
-            connectIfNecessary();
-        } catch (Exception e) {
-            if (log.isDebugEnabled()) {
-                log.debug(""Could not connect to: "" + getEndpoint() + "". Will try to recover."", e);
-            }
-            loggedIn = false;
-        }
-
-        // recover by re-creating operations which should most likely be able to recover
-        if (!loggedIn) {
-            log.debug(""Trying to recover connection to: {} with a fresh client."", getEndpoint());
-            // we want to preserve last FTP activity listener when we set a new operations
-            if (operations instanceof FtpOperations) {
-                FtpOperations ftpOperations = (FtpOperations) operations;
-                FtpClientActivityListener listener = ftpOperations.getClientActivityListener();
-                setOperations(getEndpoint().createRemoteFileOperations());
-                getOperations().setEndpoint(getEndpoint());
-                if (listener != null) {
-                    ftpOperations = (FtpOperations) getOperations();
-                    ftpOperations.setClientActivityListener(listener);
-                }
-            } else {
-                setOperations(getEndpoint().createRemoteFileOperations());
-                getOperations().setEndpoint(getEndpoint());
-            }
-            connectIfNecessary();
-        }
-    }
-
     protected void connectIfNecessary() throws IOException {
         // We need to send a noop first to check if the connection is still open 
         boolean isConnected = false;
diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java
index 2f4c5b6582e..38ccdd1177e 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java
@@ -20,7 +20,6 @@
 import org.apache.camel.ServicePoolAware;
 import org.apache.camel.component.file.GenericFileOperationFailedException;
 import org.apache.camel.component.file.GenericFileProducer;
-import org.apache.camel.util.ObjectHelper;
 import org.apache.camel.util.URISupport;
 
 /**
@@ -128,12 +127,7 @@ public void preWriteCheck() throws Exception {
         // if not alive then reconnect
         if (!noop) {
             try {
-                if (getEndpoint().getMaximumReconnectAttempts() > 0) {
-                    // only use recoverable if we are allowed any re-connect attempts
-                    recoverableConnectIfNecessary();
-                } else {
-                    connectIfNecessary();
-                }
+                connectIfNecessary();
             } catch (Exception e) {
                 loggedIn = false;
 
@@ -179,47 +173,6 @@ protected void doStop() throws Exception {
         super.doStop();
     }
 
-    protected void recoverableConnectIfNecessary() throws Exception {
-        try {
-            connectIfNecessary();
-        } catch (Exception e) {
-            loggedIn = false;
-
-            // are we interrupted
-            InterruptedException ie = ObjectHelper.getException(InterruptedException.class, e);
-            if (ie != null) {
-                if (log.isDebugEnabled()) {
-                    log.debug(""Interrupted during connect to: {}"", getEndpoint(), ie);
-                }
-                throw ie;
-            }
-
-            if (log.isDebugEnabled()) {
-                log.debug(""Could not connect to: "" + getEndpoint() + "". Will try to recover."", e);
-            }
-        }
-
-        // recover by re-creating operations which should most likely be able to recover
-        if (!loggedIn) {
-            log.debug(""Trying to recover connection to: {} with a new FTP client."", getEndpoint());
-            // we want to preserve last FTP activity listener when we set a new operations
-            if (operations instanceof FtpOperations) {
-                FtpOperations ftpOperations = (FtpOperations) operations;
-                FtpClientActivityListener listener = ftpOperations.getClientActivityListener();
-                setOperations(getEndpoint().createRemoteFileOperations());
-                getOperations().setEndpoint(getEndpoint());
-                if (listener != null) {
-                    ftpOperations = (FtpOperations) getOperations();
-                    ftpOperations.setClientActivityListener(listener);
-                }
-            } else {
-                setOperations(getEndpoint().createRemoteFileOperations());
-                getOperations().setEndpoint(getEndpoint());
-            }
-            connectIfNecessary();
-        }
-    }
-
     protected void connectIfNecessary() throws GenericFileOperationFailedException {
         if (!loggedIn || !getOperations().isConnected()) {
             log.debug(""Not already connected/logged in. Connecting to: {}"", getEndpoint());
diff --git a/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpBadLoginInProducerConnectionLeakTest.java b/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpBadLoginInProducerConnectionLeakTest.java
index 332a43ce548..56b7227e14b 100644
--- a/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpBadLoginInProducerConnectionLeakTest.java
+++ b/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpBadLoginInProducerConnectionLeakTest.java
@@ -59,9 +59,7 @@ public void testConnectionLeak() throws Exception {
             }
         }
 
-        // maximumReconnectAttempts is related to TCP connects, not to FTP login attempts
-        // but having this parameter > 0 leads to two connection attempts
-        assertEquals(""Expected 4 socket connections to be created"", 4, socketAudits.size());
+        assertEquals(""Expected 2 socket connections to be created"", 2, socketAudits.size());
 
         for (Map.Entry<Integer, boolean[]> socketStats : socketAudits.entrySet()) {
             assertTrue(""Socket should be connected"", socketStats.getValue()[0]);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Oct/18 06:31;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2545
","03/Oct/18 06:42;githubbot;tadayosi commented on issue #2545: CAMEL-12850: camel-ftp tries reconnects twice as much as maximumRecon…
URL: https://github.com/apache/camel/pull/2545#issuecomment-426528402
 
 
   @davsclaus Thanks for merge. So do you think this is ok?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Oct/18 07:01;githubbot;davsclaus commented on issue #2545: CAMEL-12850: camel-ftp tries reconnects twice as much as maximumRecon…
URL: https://github.com/apache/camel/pull/2545#issuecomment-426532324
 
 
   @tadayosi yeah it seems that NET ticket fixed it after-all. The code in camel was a workaround.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",03/Oct/18 07:25;davsclaus;Thanks for the PR and looking into this,,,,,,,,,,,,,,,,,,,,,,,,,
FTP producer stuck if timeout occurs just after connect,CAMEL-12830,13187062,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,lchdev,lchdev,24/Sep/18 15:19,02/Oct/18 07:08,13/Mar/19 22:20,02/Oct/18 07:08,2.22.1,,,,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-ftp,,,,,,0,,,,"In our production systems, we had several threads stuck indefinitely while trying to send a file to an FtpEndpoint. We had both _connectTimeout_ and _soTimeout_ properties set so it surprised us a little bit.

After digging a bit, we found that the scenario is quite simple to reproduce: this happens every time the {{FTPClient}} establishes the TCP connection with a server that does not respond anything.

Here is a simplified view of what happens when establishing a connection using a {{FTPClient}}:
{code:java}
// within Socket Client
public void connect(InetAddress host, int port) throws SocketException,IOException {
    _socket_.connect(new InetSocketAddress(host, port), connectTimeout);
    _connectAction_();
}
protected void _connectAction_() throws IOException { 
    _socket_.setSoTimeout(_timeout_); // _timeout_ is the default timeout of the socket
}

// overridden within FTP
protected void _connectAction_() {
    super._connectAction_();
    if (connectTimeout > 0) {
        int original = _socket_.getSoTimeout();
        _socket_.setSoTimeout(connectTimeout);
        try {
            __getReply();
        } finally {
             _socket_.setSoTimeout(original);
        }
    }
}{code}
 A {{SocketTimeoutException}} can be thrown either during the initial socket _connect_ action, either during the ___getReply()_ where the FTPClient waits for the hello message from the server.  Both are using _connectTimeout_, after which the original (default) timeout is restored. The _soTimeout_ we specified in the URI is configured by FTPOperations only when the connection is successful. In this case, the Socket is connected, but an exception is thrown afterwards and the _soTimeout_ is left at 0. 

Within Camel, when the RemoteFileProducer encounters an exception while processing an Exchange, it tries to disconnect the endpoint properly with a _logout_ followed by a _disconnect_. 
{code:java}
// RemoteFileProducer
public void handleFailedWrite(Exchange exchange, Exception exception) throws Exception {
    try {
        if (getOperations().isConnected()) { // <== in our case, this returns true because the socket is actually connected
            getOperations().disconnect();
        }
    } catch (...) {
        ...
    }
}
// FTPOperations
protected void doDisconnect() throws GenericFileOperationFailedException {
    try {
        client.logout();
    } catch (IOException e) {
         throw new GenericFileOperationFailedException
    } finally {
        try {
            client.disconnect();
        } catch (IOException e) {
            throw new GenericFileOperationFailedException
        }
    }
}{code}
Unfortunately, at this point, the {{client.logout()}} sends the FTP {{QUIT}} command, then waits for the response still using the default timeout of the Socket. Since the misbehaving server/firewall never sent any form of response, the thread is left waiting forever.

I attached a simple test case to illustrate the scenario, simply using a ServerSocket that never accepts any connection. Also included is an easy workaround that uses a custom FTPClient on which the _default timeout_ is set. 

A possible fix would be to always set the _default timeout_ on the socket, before connecting it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26/Sep/18 11:28;lchdev;FtpOperations.patch;https://issues.apache.org/jira/secure/attachment/12941377/FtpOperations.patch,24/Sep/18 15:29;lchdev;FtpSoTimeoutTest.java;https://issues.apache.org/jira/secure/attachment/12941065/FtpSoTimeoutTest.java,,,2.0,,,,,,,,,,,,,,,,,,,2018-09-24 18:31:42.645,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 26 11:35:07 UTC 2018,,,Patch Available,,,,0|i3yfe7:,9223372036854775807,,,,,,,,,,"24/Sep/18 18:31;davsclaus;Thanks for reporting. Can you maybe add a patch file with your suggested fix, or as a github PR","26/Sep/18 11:35;lchdev;The suggestion I made was more a workaround than a true fix. I attached a patch with another fix that tackles the true issue: a _logout_ should not be performed if the _connect_ was not successful.

If an exception is raised during the _connect_ of the {{FtpClient}}, a _disconnect_ should be issued to ensure that the underlying {{Socket}} is properly closed and disposed. This also avoids potential resources leaks (in the situation of a server accepting connections without sending FTP replies, each reconnect attempt created and connected a new Socket without closing the previous one).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
splitter with grouping looses encoding property,CAMEL-12844,13188486,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Oct/18 11:18,01/Oct/18 11:19,13/Mar/19 22:20,01/Oct/18 11:19,2.21.0,2.22.0,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-core,,,,,,0,,,,"Reported on user list and today also on gitter
http://camel.465427.n5.nabble.com/File-Encoding-falls-back-to-default-encoding-while-grouping-after-split-using-tokenize-td5797769.html

Jakob Krejberg Ørhøj @jakoborhoj_twitter Sep 28 12:30
Hello. I've been battling with some encoding issues when using split().tokenize() in Camel. I am having the same issue as described in: http://camel.465427.n5.nabble.com/File-Encoding-falls-back-to-default-encoding-while-grouping-after-split-using-tokenize-td5797769.html. Is it a bug that Camel does not pass the exchange to the converter so that it can get the encoding set in the exchange? Currently it will always default to UTF-8 as I see it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-10-01 11:18:05.0,,,,,,,0|i3yo4n:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""-"" dash is not a valid characters for keys in JMS headers",CAMEL-12842,13188250,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,aldettinger,fgiloux,fgiloux,28/Sep/18 22:02,29/Sep/18 08:44,13/Mar/19 22:20,29/Sep/18 08:41,,,,,,,,,,,,,,,,2.23.0,,,,,camel-opentracing,,,,,,0,,,,"Hi

""-"", dash is not a valid character for keys in JMS headers. This gets encoded in OpenTracing java-jms client: DASH = ""_$dash$_""; see:

[https://github.com/opentracing-contrib/java-jms/blob/master/opentracing-jms-common/src/main/java/io/opentracing/contrib/jms/common/JmsTextMapInjectAdapter.java]

I am proposing to have the same approach in camel-opentracing. By doing so spans created by Camel can be seen under a trace created by java-jms. I have amended the code accordingly and will raise a pull request. I have extended the change to the abstract messaging class so that it also works when a peer is using JMS for amqp endpoint for instance. A configuration parameter allows to activate/deactivate encoding. If no parameter is provided the behavior is as before for backward compatibility.

Regards,

Frédéric",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-28 22:10:21.51,,,no_permission,,Moderate,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 29 08:44:30 UTC 2018,,,,,,,0|i3ymo7:,9223372036854775807,,,,,,,,,,"28/Sep/18 22:10;githubbot;GitHub user fgiloux opened a pull request:

    https://github.com/apache/camel/pull/2540

    ""-"" dash is not a valid characters for keys in JMS headers

    See Jira issue: https://issues.apache.org/jira/browse/CAMEL-12842


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fgiloux/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2540.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2540
    
----
commit 278dc03e62d73b00f6d689ad59bc31d37cdfcce8
Author: Frederic Giloux <fgiloux@...>
Date:   2018-09-28T14:23:41Z

    Added dash encoding for JMS and extensibility for other connectors

commit fcb4d0ae29c842994100ae17b7f8a06505ffa92f
Author: Frederic Giloux <fgiloux@...>
Date:   2018-09-28T17:35:23Z

    Makes encoding activation configuration

----
",29/Sep/18 08:41;aldettinger;Merged on master.,"29/Sep/18 08:44;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2540
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Twitter Send Direct Message Endpoint not working,CAMEL-12838,13187812,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,sms0070,sms0070,27/Sep/18 06:47,28/Sep/18 07:53,13/Mar/19 22:20,28/Sep/18 07:36,2.22.1,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-twitter,,,,,,0,,,,"There has been a change in twitter APIs. On September 17^th^, twitter discontinued the legacy direct message endpoints.

[https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/guides/direct-message-migration.html]

There are three sendDirectMessage methods provided by twitter4j API.

[http://twitter4j.org/oldjavadocs/4.0.7/twitter4j/api/DirectMessagesResources.html#sendDirectMessage(long,%20java.lang.String,%20long)]

 

 
|[*DirectMessage*|http://twitter4j.org/javadoc/twitter4j/DirectMessage.html]|*[sendDirectMessage|http://twitter4j.org/javadoc/twitter4j/api/DirectMessagesResources.html#sendDirectMessage-long-java.lang.String-]*(long userId, java.lang.String text)
Sends a new direct message to the specified user from the authenticating user.|
|[*DirectMessage*|http://twitter4j.org/javadoc/twitter4j/DirectMessage.html]|*[sendDirectMessage|http://twitter4j.org/javadoc/twitter4j/api/DirectMessagesResources.html#sendDirectMessage-long-java.lang.String-long-]*(long userId, java.lang.String text, long mediaId)
Sends a new direct message to the specified user from the authenticating user.|
|[*DirectMessage*|http://twitter4j.org/javadoc/twitter4j/DirectMessage.html]|*[sendDirectMessage|http://twitter4j.org/javadoc/twitter4j/api/DirectMessagesResources.html#sendDirectMessage-java.lang.String-java.lang.String-]*(java.lang.String screenName, java.lang.String text)
Sends a new direct message to the specified user from the authenticating user.|

 

The first two methods use the new endpoints([direct_messages/events/new|https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/new-event]), while the third one uses the old APIs([direct_messages/new|https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/new-message])

 

 

Camel twitter component uses the third method to send direct message (using screen name).

[https://github.com/apache/camel/blob/master/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/directmessage/DirectMessageProducer.java]

 

This needs to be changed in order to support direct message sending to twitter

 ",,,,,,,,,,172800,172800,,0%,172800,172800,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-28 07:35:28.47,,,no_permission,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 28 07:51:37 UTC 2018,,,,,,,0|i3yjzz:,9223372036854775807,,,,,,,,,,"28/Sep/18 07:33;sms0070;Hi,

 

This still doesn't work because of issues in twitter4j APIs.

[https://github.com/Twitter4J/Twitter4J/issues/297]

When they fix it in twitter4j, then version of twitter4j here need to be changed.

Right now, this issue is not fixed.

 

Regards,

Suyash","28/Sep/18 07:35;ancosen;You are wrong. I moved the implementation to use a method in the library using the new endpoint. So this is fixed and already tested. If you want to have a test, you can build camel-twitter 2.23.0-SNAPSHOT and try to send a direct-message","28/Sep/18 07:36;ancosen;Please, don't reopen this issue.","28/Sep/18 07:42;sms0070;Hi,

I have tested after building it for 5 hours just to find that this issue is still happening.

I know that you are using the method which uses the new endpoint, but API is not working properly.

Check this issue : [https://github.com/Twitter4J/Twitter4J/issues/297]

 

Regards,

Suyash

 ",28/Sep/18 07:46;ancosen;I don't think you are using the right version. I just sent a direct message to different users and I don't have problem. ,"28/Sep/18 07:51;ancosen;And also you just need to rebuild camel-twitter, you don't need to run a full build. ","28/Sep/18 07:51;ancosen;I consider this fixed since it's tested and it works.

 

Also the fact that the API is not working as expected it's because the library still use an old endpoint, but Camel, inside, is calling a method pointing to the new endpoint, so I don't know what you're hitting but probably you're not using the last version and you're doing something wrong.",,,,,,,,,,,,,,,,,,,,,,,,,,
An autocreated CXF Bus not shut down in CxfSpringEndpoint,CAMEL-12829,13187005,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,24/Sep/18 12:24,26/Sep/18 12:51,13/Mar/19 22:20,24/Sep/18 12:44,,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-cxf,,,,,,0,,,,"{{CxfSpringEndpoint.setApplicationContext(ApplicationContext)}} creates a {{org.apache.cxf.Bus}} [1] whose {{shutdown()}} method is never called. This is one of the causes for a memory leak in WildFly Camel (WFC) [2]. 

The steps to reproduce for WFC are as follows:

1. Start the WFC 
2. run the CXFWSConsumerIntegrationTest several times
3. Force GC on WFC
4. Get a heap dump
NOT OK: There are as many stale SpringBus instances as many times the test was run.
Expected: no SpringBus instances there 

[1] https://github.com/apache/camel/blob/c69affc49415b190645ce25536ffd62348c4fe34/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSpringEndpoint.java#L251
[2] https://github.com/wildfly-extras/wildfly-camel/issues/2649",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-24 12:36:12.782,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 26 12:51:42 UTC 2018,,,,,,,0|i3yf1j:,9223372036854775807,,,,,,,,,,"24/Sep/18 12:36;githubbot;ppalaga opened a new pull request #2530: CAMEL-12829: An autocreated CXF Bus not shut down in CxfSpringEndpoint
URL: https://github.com/apache/camel/pull/2530
 
 
   https://issues.apache.org/jira/browse/CAMEL-12829

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Sep/18 12:36;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2530

    CAMEL-12829: An autocreated CXF Bus not shut down in CxfSpringEndpoint

    https://issues.apache.org/jira/browse/CAMEL-12829

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-12829

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2530.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2530
    
----
commit 4a867ef5376932a78d2677785dd261e812b12c78
Author: Peter Palaga <ppalaga@...>
Date:   2018-09-24T06:00:53Z

    CAMEL-12829: An autocreated CXF Bus not shut down in CxfSpringEndpoint

----
","24/Sep/18 12:40;githubbot;davsclaus closed pull request #2530: CAMEL-12829: An autocreated CXF Bus not shut down in CxfSpringEndpoint
URL: https://github.com/apache/camel/pull/2530
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java
index 25b72b70ce4..1247d4302a9 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java
@@ -128,7 +128,7 @@
     protected Bus bus;
 
     private AtomicBoolean getBusHasBeenCalled = new AtomicBoolean(false);
-    private volatile boolean createBus;
+    protected volatile boolean createBus;
 
     private BindingConfiguration bindingConfig;
     private DataBinding dataBinding;
diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSpringEndpoint.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSpringEndpoint.java
index 0671b1632cd..f837dd01ec2 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSpringEndpoint.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSpringEndpoint.java
@@ -248,6 +248,7 @@ public void setApplicationContext(ApplicationContext ctx) throws BeansException
         applicationContext = ctx;
 
         if (bus == null) {
+            createBus = true;
             bus = BusWiringBeanFactoryPostProcessor.addDefaultBus(ctx);
         }
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Sep/18 12:40;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2530
",24/Sep/18 12:44;davsclaus;Thanks for reporting and the PR,26/Sep/18 12:51;ppalaga;Cloned to https://issues.jboss.org/browse/ENTESB-9537,,,,,,,,,,,,,,,,,,,,,,,,,,,
Type Converter Loader Exception: Elasticsearch-Rest cannot find any in package defined,CAMEL-12836,13187478,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tim.sexton,tim.sexton,26/Sep/18 00:46,26/Sep/18 06:23,13/Mar/19 22:20,26/Sep/18 06:23,2.22.0,,,,,,,,,,,,,,,2.22.2,2.23.0,,,,,,,,,,0,,,,"{code:java}
{{Error creating bean with name 'servletEndpointRegistrar' defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]: Factory method 'servletEndpointRegistrar' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'routeControllerEndpoint' defined in class path resource [org/apache/camel/spring/boot/actuate/endpoint/CamelRouteControllerEndpointAutoConfiguration.class]: Unsatisfied dependency expressed through method 'routeControllerEndpoint' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.CamelContext]: Factory method 'camelContext' threw exception; nested exception is org.apache.camel.RuntimeCamelException: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.elasticsearch.converter] }}{code}
 

 

A possible solution to this is to use FQN class names instead of package name",Docker/K8s,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,2018-09-26 00:46:31.0,,,,,,,0|i3yhxr:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-zipkin: useFallbackServiceNames leaks passwords,CAMEL-12831,13187095,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,24/Sep/18 17:53,24/Sep/18 19:07,13/Mar/19 22:20,24/Sep/18 19:07,2.22.1,,,,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-zipkin,,,,,,0,,,,"If you do not define service names and useFallbackServiceNames is true (the default setting) camel uses endpoints URIs as services names.

Passwords in these URIs are not masked and therefore visible in Zipkin traces.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-24 17:55:54.275,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 24 19:04:11 UTC 2018,,,,,,,0|i3yflj:,9223372036854775807,,,,,,,,,,"24/Sep/18 17:55;githubbot;PascalSchumacher opened a new pull request #2531: CAMEL-12831: Camel-zipkin: useFallbackServiceNames leaks passwords
URL: https://github.com/apache/camel/pull/2531
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Sep/18 17:55;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/2531

    CAMEL-12831: Camel-zipkin: useFallbackServiceNames leaks passwords

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel hide_passwords_in_zipkin_fallback_service_names

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2531.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2531
    
----
commit 74a5e078f41cfff9b3a606ba63d1d07093a75e91
Author: Pascal Schumacher <pascalschumacher@...>
Date:   2018-09-24T17:55:00Z

    CAMEL-12831: Camel-zipkin: useFallbackServiceNames leaks passwords

----
","24/Sep/18 19:04;githubbot;Github user PascalSchumacher closed the pull request at:

    https://github.com/apache/camel/pull/2531
","24/Sep/18 19:04;githubbot;PascalSchumacher commented on issue #2531: CAMEL-12831: Camel-zipkin: useFallbackServiceNames leaks passwords
URL: https://github.com/apache/camel/pull/2531#issuecomment-424088562
 
 
   Merged in https://github.com/apache/camel/commit/4b6773785e2031cf54485e4ad2c9634df3a10231
   
   @davsclaus Thanks for the review!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Sep/18 19:04;githubbot;PascalSchumacher closed pull request #2531: CAMEL-12831: Camel-zipkin: useFallbackServiceNames leaks passwords
URL: https://github.com/apache/camel/pull/2531
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java b/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java
index f069c782e41..7314a5dfffa 100644
--- a/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java
+++ b/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java
@@ -61,6 +61,7 @@
 import org.apache.camel.util.IOHelper;
 import org.apache.camel.util.ObjectHelper;
 import org.apache.camel.util.ServiceHelper;
+import org.apache.camel.util.URISupport;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.slf4j.MDC;
@@ -516,10 +517,11 @@ private String getServiceName(Exchange exchange, Endpoint endpoint, Map<String,
                     return null;
                 }
             }
-            if (LOG.isTraceEnabled() && key != null) {
-                LOG.trace(""Using serviceName: {} as fallback"", key);
+            String sanitizedKey = URISupport.sanitizeUri(key);
+            if (LOG.isTraceEnabled() && sanitizedKey != null) {
+                LOG.trace(""Using serviceName: {} as fallback"", sanitizedKey);
             }
-            return key;
+            return sanitizedKey;
         } else {
             if (LOG.isTraceEnabled() && answer != null) {
                 LOG.trace(""Using serviceName: {}"", answer);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-restdsl-swagger-plugin doesn't convert integer default value to string,CAMEL-12805,13184733,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jcordes,jcordes,12/Sep/18 21:56,24/Sep/18 18:54,13/Mar/19 22:20,24/Sep/18 18:54,2.21.0,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,tooling,,,,,,0,,,,"When generating a RouteBuilder from a swagger that defines default parameter values of type integer, there is no conversion to a string when setting it:

Swagger:

""limit"":{
 ""name"":""limit"",
 ""in"":""query"",
 ""type"":""integer"",
 ""minimum"":1,
 ""default"":20,
 ""description"":""the limit of the results for the collections query""
 },

RouteBuilder:

.param()
 .name(""limit"")
 .type(RestParamType.query)
 .dataType(""integer"")
 .defaultValue(20)
 .required(false)
 .description(""the limit of the results for the collections query"")
 .endParam()

defaultValue only accepts parameters of type string and therefore the generated code can't be compiled and needs to be corrected manually.

 

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-13 05:45:21.436,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 24 18:54:45 UTC 2018,,,,,,,0|i3y12n:,9223372036854775807,,,,,,,,,,"13/Sep/18 05:45;vrlgohel;Thanks for reporting. Can you attach the complete json file which you are using? From the snippets you provided, i am not getting the plugin to generate code,

>> Unable to generate REST DSL Swagger sources from specification: src/spec/example.json, make sure that the specification is available at the given URI,
{code:java}
{
 ""name"": ""limit"",
 ""in"": ""query"",
 ""type"": ""integer"",
 ""minimum"": 1,
 ""default"": 20,
 ""description"": ""the limit of the results for the collections query""
}{code}",24/Sep/18 18:54;davsclaus;Thanks for reporting,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Grape component is missing documentation for some endpoints,CAMEL-12826,13186616,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,21/Sep/18 12:56,24/Sep/18 07:34,13/Mar/19 22:20,24/Sep/18 07:34,,,,,,,,,,,,,,,,2.23.0,,,,,,,,,,,0,,,,"Daily build on the java-10 branch fails with:
{code:java}
[INFO] --- camel-package-maven-plugin:2.23.0-SNAPSHOT:validate-components (validate) @ camel-grape ---
[WARNING] The component: grape has validation errors
[WARNING] Missing component documentation for the following options:
	metaClass
	patchesRepository
[WARNING] Missing endpoint documentation for the following options:
	defaultCoordinates{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-23 10:05:01.222,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 24 07:34:27 UTC 2018,,,,,,,0|i3ycnb:,9223372036854775807,,,,,,,,,,23/Sep/18 10:05;davsclaus;Okay I think we do something a bit special in this component as the json metadata is already hardcoded in the src/main/resources/..../grape.json file. Take a look in this file if it has some missing options. Then we need to add them manually there. ,"23/Sep/18 14:18;davsclaus;Got the others fixed, but the metaClass seems like something maybe only java 10 or newer JDK somehow reveal. We may need to exclude it specially in the maven validator logic.",24/Sep/18 07:34;zregvart;[~davsclaus] I think with we [57533d4cf076ef0c1dc239fa1bc3085ee02297b4|https://gitbox.apache.org/repos/asf?p=camel.git;a=commitdiff;h=57533d4cf076ef0c1dc239fa1bc3085ee02297b4] have this fixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http-common HttpSendDynamicAware setting port to -1 when port is not defined in uri,CAMEL-12827,13186729,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bobpaulin,bobpaulin,21/Sep/18 21:24,23/Sep/18 14:27,13/Mar/19 22:20,23/Sep/18 14:27,2.22.0,2.22.1,2.23.0,,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-http-common,,,,,,0,,,,"If the route qualifies for SendDyanamicAware processing within the camel-http or camel-http4 component and the route does not specify a port it is getting set to -1.  This should simply assume port 80 or 443 based on http vs https.  Logic exists to trim those ports if they are specified however if you omit them your get the following exception:

 
{code:java}
2018-09-21T16:20:32,797 | ERROR | Camel (camel-2) thread #10 - NettyEventExecutorGroup | AbstractErrorListProcessor       | 26 - com.somebundle - 1.0.76 | Error Handled for route: http://0.0.0.0:8880/%7BsiteId%7D/%7Bcountry%7D/somepath?httpMethodRestrict=GET
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: https4://somedomain.com:-1?bridgeEndpoint=true due to: Expected scheme-specific part at index 6: https:
    at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:758) ~[91:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:80) ~[91:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.util.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:91) ~[91:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.SendDynamicProcessor.resolveEndpoint(SendDynamicProcessor.java:239) ~[91:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:132) ~[91:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:181) ~[91:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.InterceptorToAsyncProcessorBridge.process(InterceptorToAsyncProcessorBridge.java:67) ~[91:org.apache.camel.camel-core:2.22.0]{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-21 21:59:40.766,,,no_permission,,Unknown,,,,Patch,,,,,,,,,9223372036854775807,,,Sun Sep 23 14:27:27 UTC 2018,,,Patch Available,,,,0|i3ydc7:,9223372036854775807,,,,,,,,,,"21/Sep/18 21:59;githubbot;bobpaulin opened a new pull request #2528: CAMEL-12827 - HttpSendDynamicAware setting port to -1 when not defined.
URL: https://github.com/apache/camel/pull/2528
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","21/Sep/18 21:59;githubbot;GitHub user bobpaulin opened a pull request:

    https://github.com/apache/camel/pull/2528

    CAMEL-12827 - HttpSendDynamicAware setting port to -1 when not defined.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bobpaulin/camel CAMEL-12827

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2528.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2528
    
----
commit dffcfff129cdb9f5cb2fae984aabe4c8c761b96b
Author: Bob Paulin <bob@...>
Date:   2018-09-21T21:51:11Z

    CAMEL-12827 - HttpSendDynamicAware setting port to -1 when not defined.

commit 4a55d681648209341c076acce4bebf7a38bbed90
Author: Bob Paulin <bob@...>
Date:   2018-09-21T21:59:13Z

    CAMEL-12827 - Add Apache License Headers to test.

----
","23/Sep/18 14:23;githubbot;davsclaus closed pull request #2528: CAMEL-12827 - HttpSendDynamicAware setting port to -1 when not defined.
URL: https://github.com/apache/camel/pull/2528
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpSendDynamicAware.java b/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpSendDynamicAware.java
index 7968952c636..86fb192641a 100644
--- a/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpSendDynamicAware.java
+++ b/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpSendDynamicAware.java
@@ -141,7 +141,7 @@ public Processor createPostProcessor(Exchange exchange, DynamicAwareEntry entry)
             // if the path is just a trailing slash then skip it (eg it must be longer than just the slash itself)
             if (path != null && path.length() > 1) {
                 int port = parse.getPort();
-                if (port != 80 && port != 443) {
+                if (port > 0 && port != 80 && port != 443) {
                     host += "":"" + port;
                 }
                 if (!httpComponent) {
diff --git a/components/camel-http-common/src/test/java/org/apache/camel/http/common/HttpSendDynamicAwareTest.java b/components/camel-http-common/src/test/java/org/apache/camel/http/common/HttpSendDynamicAwareTest.java
new file mode 100644
index 00000000000..71ec8f51374
--- /dev/null
+++ b/components/camel-http-common/src/test/java/org/apache/camel/http/common/HttpSendDynamicAwareTest.java
@@ -0,0 +1,98 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.http.common;
+
+import static org.junit.Assert.*;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.apache.camel.spi.SendDynamicAware.DynamicAwareEntry;
+
+public class HttpSendDynamicAwareTest {
+
+    private HttpSendDynamicAware httpSendDynamicAware;
+    @Before
+    public void setUp() throws Exception {
+        this.httpSendDynamicAware = new HttpSendDynamicAware();
+        
+    }
+
+    @Test
+    public void testHttpUndefinedPortWithPathParseUri() {
+        this.httpSendDynamicAware.setScheme(""http"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""http://localhost/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should not add port if http and not specified"", ""localhost"", result[0]);
+    }
+    
+    @Test
+    public void testHttpsUndefinedPortParseUri() {
+        this.httpSendDynamicAware.setScheme(""https"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""https://localhost/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should not add port if https and not specified"", ""localhost"", result[0]);
+    }
+    
+    @Test
+    public void testHttp4UndefinedPortWithPathParseUri() {
+        this.httpSendDynamicAware.setScheme(""http4"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""http4://localhost/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should not add port if http4 and not specified"", ""localhost"", result[0]);
+    }
+    
+    @Test
+    public void testHttps4UndefinedPortParseUri() {
+        this.httpSendDynamicAware.setScheme(""https4"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""https4://localhost/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should not add port if https4 and not specified"", ""localhost"", result[0]);
+    }
+    
+    @Test
+    public void testHttpPort80ParseUri() {
+        this.httpSendDynamicAware.setScheme(""http"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""http://localhost:80/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should not port if http and port 80 specified"", ""localhost"", result[0]);
+    }
+    
+    @Test
+    public void testHttpsPort443ParseUri() {
+        this.httpSendDynamicAware.setScheme(""https"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""https://localhost:443/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should not port if https and port 443 specified"", ""localhost"", result[0]);
+    }
+    
+    @Test
+    public void testHttpPort8080ParseUri() {
+        this.httpSendDynamicAware.setScheme(""http"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""http://localhost:8080/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should add port if http and port other than 80 specified"", ""localhost:8080"", result[0]);
+    }
+    
+    @Test
+    public void testHttpsPort8443ParseUri() {
+        this.httpSendDynamicAware.setScheme(""https"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""https://localhost:8443/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should add port if https and port other than 443 specified"", ""localhost:8443"", result[0]);
+    }
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Sep/18 14:23;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2528
",23/Sep/18 14:27;davsclaus;Thanks for reporting and the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SQS: Malformed queue URL due to bad region parsing,CAMEL-12820,13185787,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,edu2046,edu2046,18/Sep/18 12:00,18/Sep/18 13:22,13/Mar/19 22:20,18/Sep/18 13:22,2.22.1,,,,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-aws,,,,,,1,sqs,,,"h3. Diagnosis
When configuring the component with a queue ARN, for example:

{{aws-sqs://arn:aws:sqs:eu-west-1:account-number:queue-name}}

The region is being parsed as {{EU_WEST_1}}. See [https://github.com/apache/camel/blob/master/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsComponent.java#L64]

The region is then used in the construction of the queue URL in https://github.com/apache/camel/blob/master/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java#L132

This creates a URL pointing to the wrong host: {{https://sqs.EU_WEST_1.amazonaws.com/account-number/queue-name}} when the right one should be {{https://sqs.eu-west-1.amazonaws.com/account-number/queue-name}} 

Subsequents polls of the sqs component failed due to to this host not being recognised:

{code}java.net.UnknownHostException: sqs.EU_WEST_1.amazonaws.com{code}

h3. Proposed solution
Invoke the {{getName}} method instead of {{toString}} the https://github.com/apache/camel/blob/master/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsComponent.java#L64","AWS, Centos 7, Java 8, Spring boot 2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-18 12:40:33.889,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 18 12:40:33 UTC 2018,,,,,,,0|i3y7jr:,9223372036854775807,Regression,,,,,,,,,"18/Sep/18 12:40;ancosen;Doing stuff in the way you suggest, will break the other part of regions support 

 

[https://github.com/apache/camel/blob/master/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java#L314]

 

So we need to find a different way.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Threading issues with the throttler when using a correlation key,CAMEL-12809,13185087,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,14/Sep/18 08:41,14/Sep/18 14:04,13/Mar/19 22:20,14/Sep/18 14:04,,,,,,,,,,,,,,,,2.23.0,,,,,,,,,,,0,,,,The Throttler has threading issues and some of the {{ThrottlingGroupingTest}} tests sometimes fail.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 14 14:04:33 UTC 2018,,,,,,,0|i3y38f:,9223372036854775807,Regression,Unit Test Broken,,,,,,,,14/Sep/18 13:46;gnt;CAMEL-6840 introduces a few problems which need to be fixed.,14/Sep/18 14:04;gnt;https://github.com/apache/camel/commit/8517fdfc2d934bc4bd1254dcd983e02b3ef4f5e8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid to use endpoint attribute when MqttConnectOptions is declared once,CAMEL-12807,13184904,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,fabryprog,fabryprog,fabryprog,13/Sep/18 13:27,14/Sep/18 13:41,13/Mar/19 22:20,14/Sep/18 13:41,2.22.2,,,,,,,,,,,,,,,2.23.0,,,,,camel-paho,,,,,,0,,,,"Hello,

In my system i have a default MqttConnectOptions declared into spring context and some other camel consumers/producers connected to others mqtt servers.

So today i cannot use endpoint parameters without declare an another mqttConnectOptions class because the endpoint code suppose that use ALWAYS MqttConnectOptions (if it is declared once)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-13 13:39:01.102,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 14 13:40:44 UTC 2018,,,,,,,0|i3y23z:,9223372036854775807,,,,,,,,,,"13/Sep/18 13:39;githubbot;Fabryprog opened a new pull request #2521: CAMEL-12807 Avoid to use endpoint attribute when MqttConnectOptions i…
URL: https://github.com/apache/camel/pull/2521
 
 
   …s declared once
   
   Hello, this is my propose patch to camel-paho endpoint
   
   Note is backward compatible!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Sep/18 13:39;githubbot;GitHub user Fabryprog opened a pull request:

    https://github.com/apache/camel/pull/2521

    CAMEL-12807 Avoid to use endpoint attribute when MqttConnectOptions i…

    …s declared once
    
    Hello, this is my propose patch to camel-paho endpoint
    
    Note is backward compatible!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Fabryprog/camel CAMEL-12807

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2521.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2521
    
----
commit a962be45274d37d7610c6dd3bdfb90365b4a0d42
Author: Fabrizio Spataro <fabrizio.spataro@...>
Date:   2018-09-13T13:37:45Z

    CAMEL-12807 Avoid to use endpoint attribute when MqttConnectOptions is declared once

----
","14/Sep/18 13:40;githubbot;oscerd commented on issue #2521: CAMEL-12807 Avoid to use endpoint attribute when MqttConnectOptions i…
URL: https://github.com/apache/camel/pull/2521#issuecomment-421361753
 
 
   Merged on master. Thanks @Fabryprog 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Sep/18 13:40;githubbot;oscerd closed pull request #2521: CAMEL-12807 Avoid to use endpoint attribute when MqttConnectOptions i…
URL: https://github.com/apache/camel/pull/2521
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-paho/src/main/docs/paho-component.adoc b/components/camel-paho/src/main/docs/paho-component.adoc
index 723f883d736..0514235ac55 100644
--- a/components/camel-paho/src/main/docs/paho-component.adoc
+++ b/components/camel-paho/src/main/docs/paho-component.adoc
@@ -95,6 +95,7 @@ with the following path and query parameters:
 | *brokerUrl* (common) | The URL of the MQTT broker. | tcp://localhost:1883 | String
 | *clientId* (common) | MQTT client identifier. |  | String
 | *connectOptions* (common) | Client connection options |  | MqttConnectOptions
+| *resolveMqttConnectOptions* (common) | Auto Resolve Client connection options | true | boolean
 | *filePersistenceDirectory* (common) | Base directory used by the file persistence provider. |  | String
 | *password* (common) | Password to be used for authentication against the MQTT broker |  | String
 | *persistence* (common) | Client persistence to be used - memory or file. | MEMORY | PahoPersistence
diff --git a/components/camel-paho/src/main/java/org/apache/camel/component/paho/PahoEndpoint.java b/components/camel-paho/src/main/java/org/apache/camel/component/paho/PahoEndpoint.java
index 8d858d5c6a5..6d58751d56c 100644
--- a/components/camel-paho/src/main/java/org/apache/camel/component/paho/PahoEndpoint.java
+++ b/components/camel-paho/src/main/java/org/apache/camel/component/paho/PahoEndpoint.java
@@ -68,7 +68,8 @@
     private String userName; 
     @UriParam @Metadata(secret = true)
     private String password; 
-    
+    @UriParam(defaultValue = ""true"")
+    private boolean resolveMqttConnectOptions = true; 
 
     // Collaboration members
     @UriParam
@@ -135,13 +136,16 @@ protected MqttConnectOptions resolveMqttConnectOptions() {
         if (connectOptions != null) {
             return connectOptions;
         }
-        Set<MqttConnectOptions> connectOptions = getCamelContext().getRegistry().findByType(MqttConnectOptions.class);
-        if (connectOptions.size() == 1) {
-            LOG.info(""Single MqttConnectOptions instance found in the registry. It will be used by the endpoint."");
-            return connectOptions.iterator().next();
-        } else if (connectOptions.size() > 1) {
-            LOG.warn(""Found {} instances of the MqttConnectOptions in the registry. None of these will be used by the endpoint. ""
-                     + ""Please use 'connectOptions' endpoint option to select one."", connectOptions.size());
+        
+        if(resolveMqttConnectOptions) {
+            Set<MqttConnectOptions> connectOptions = getCamelContext().getRegistry().findByType(MqttConnectOptions.class);
+            if (connectOptions.size() == 1) {
+                LOG.info(""Single MqttConnectOptions instance found in the registry. It will be used by the endpoint."");
+                return connectOptions.iterator().next();
+            } else if (connectOptions.size() > 1) {
+                LOG.warn(""Found {} instances of the MqttConnectOptions in the registry. None of these will be used by the endpoint. ""
+                         + ""Please use 'connectOptions' endpoint option to select one."", connectOptions.size());
+            }
         }
         
         MqttConnectOptions options = new MqttConnectOptions();
@@ -306,4 +310,12 @@ public void setPassword(String password) {
         this.password = password;
     }
 
+    public synchronized boolean isResolveMqttConnectOptions() {
+        return resolveMqttConnectOptions;
+    }
+
+    public synchronized void setResolveMqttConnectOptions(boolean resolveMqttConnectOptions) {
+        this.resolveMqttConnectOptions = resolveMqttConnectOptions;
+    }
+
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Sep/18 13:40;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2521
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ServletComponent ignores httpBinding option,CAMEL-12785,13183443,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,vrlgohel,paulmcculloch,paulmcculloch,06/Sep/18 16:24,12/Sep/18 06:20,13/Mar/19 22:20,12/Sep/18 06:20,2.18.3,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-servlet,,,,,,0,,,,"ServletComponent.doCreateConsumer()  seems to consider the 'httpBindingRef' option when deciding whether or not to create a default HttpBinding. However this option was removed in 2.17 (https://github.com/apache/camel/commit/df701cc3776833c98a3e2b53f86dfd8f01eabe4b )

{{<restConfiguration component=""servlet"" enableCORS=""true"">}}
{{   <endpointProperty key=""servletName"" value=""MyCamelServlet""/>}}
{{   <endpointProperty key=""httpBinding"" value=""#MyHttpBinding""/>}}
{{</restConfiguration>}}

Doesn't use the custom binding. Providing a value for httpBindingRef causes the endpoint creation to fail (due to unknown parameters being included in the servlet:// URI.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-11 18:00:35.98,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 12 06:20:47 UTC 2018,,,,,,,0|i3xt73:,9223372036854775807,,,,,,,,,,"11/Sep/18 18:00;githubbot;vrlgohel opened a new pull request #2517: CAMEL-12785: ServletComponent ignores HttpBinding
URL: https://github.com/apache/camel/pull/2517
 
 
   We dropped the **httpBindingRef** in http common and servlet component some time back. The Servlet Component had a regression where it wasn't taking into consideration a custom **httpBinding**, and instead always initialized a default instance of **ServletRestHttpBinding**, thereby ignoring the custom config. 
   This change now takes into effect **user's custom httpBinding**. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Sep/18 18:00;githubbot;GitHub user vrlgohel opened a pull request:

    https://github.com/apache/camel/pull/2517

    CAMEL-12785: ServletComponent ignores HttpBinding

    We dropped the **httpBindingRef** in http common and servlet component some time back. The Servlet Component had a regression where it wasn't taking into consideration a custom **httpBinding**, and instead always initialized a default instance of **ServletRestHttpBinding**, thereby ignoring the custom config. 
    This change now takes into effect **user's custom httpBinding**. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/vrlgohel/camel-1 CAMEL-12785

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2517.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2517
    
----
commit 8714e24a3fc0f50c92a5a2d3311129a5969e8302
Author: Viral Gohel <vrlgohel87@...>
Date:   2018-09-11T17:55:10Z

    CAMEL-12785: ServletComponent ignores HttpBinding

----
","12/Sep/18 06:20;githubbot;oscerd commented on issue #2517: CAMEL-12785: ServletComponent ignores HttpBinding
URL: https://github.com/apache/camel/pull/2517#issuecomment-420525994
 
 
   Merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Sep/18 06:20;githubbot;oscerd closed pull request #2517: CAMEL-12785: ServletComponent ignores HttpBinding
URL: https://github.com/apache/camel/pull/2517
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java b/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java
index 1ee0fdabff1..7c269db2991 100644
--- a/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java
+++ b/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java
@@ -320,7 +320,7 @@ Consumer doCreateConsumer(CamelContext camelContext, Processor processor, String
         ServletEndpoint endpoint = camelContext.getEndpoint(url, ServletEndpoint.class);
         setProperties(camelContext, endpoint, parameters);
 
-        if (!map.containsKey(""httpBindingRef"")) {
+        if (!map.containsKey(""httpBinding"")) {
             // use the rest binding, if not using a custom http binding
             HttpBinding binding = new ServletRestHttpBinding();
             binding.setHeaderFilterStrategy(endpoint.getHeaderFilterStrategy());


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Sep/18 06:20;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2517
","12/Sep/18 06:20;githubbot;oscerd commented on issue #2517: CAMEL-12785: ServletComponent ignores HttpBinding
URL: https://github.com/apache/camel/pull/2517#issuecomment-420526020
 
 
   Thanks @vrlgohel 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-k: Kamel install reports error,CAMEL-12801,13184246,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,11/Sep/18 07:15,11/Sep/18 08:01,13/Mar/19 22:20,11/Sep/18 08:01,,,,,,,,,,,,,,,,,,,,,camel-k,,,,,,0,,,,ERROR: logging before flag.Parse: W0911 07:07:50.460412 1 reflector.go:341] github.com/apache/camel-k/vendor/github.com/operator-framework/operator-sdk/pkg/sdk/informer.go:91: watch of *unstructured.Unstructured ended with: The resourceVersion for the provided watch is too old.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-11 07:57:15.002,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 11 08:01:44 UTC 2018,,,,,,,0|i3xy3b:,9223372036854775807,,,,,,,,,,"11/Sep/18 07:57;dmvolod;[~ancosen], which version of kubernetes or openshift are you using?
I run on oc v3.9.0 and all is fine.","11/Sep/18 08:01;ancosen;3.9.0, I updated with the latest code after a fix from Nicola and now it's working fine. Closing this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Accept header is not respected anymore in CXFRS consumer when POST,CAMEL-12787,13183611,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,xldai,xldai,07/Sep/18 11:36,10/Sep/18 06:41,13/Mar/19 22:20,10/Sep/18 06:31,2.21.1,2.21.2,2.22.0,2.22.1,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-cxfrs,,,,,,0,,,,"Given the camel route as a cxfrs server (test case is here: https://github.com/xldai/test/tree/master/cxfrs), Running the Route and send POST request from curl with ""Accept: application/json"", but the cxfrs server will always return  application/xml as Response.

Note this issue only happening on POST method, for GET, the Accept header is respected.

No this kind of issue on Camel 2.20.x, Camel 2.21.0.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-09 04:37:05.622,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 10 06:41:14 UTC 2018,,,,,,,0|i3xu87:,9223372036854775807,,,,,,,,,,"09/Sep/18 04:01;xldai;Looks like we have this issue after this commit https://github.com/apache/camel/commit/4280d660ed7bdce2c79d7d5d3da8b63567391f5d, which try to fix the https://issues.apache.org/jira/browse/CAMEL-12428","09/Sep/18 04:37;githubbot;xldai opened a new pull request #2513: fix CAMEL-12787 Accept header is not respected anymore in CXFRS consu…
URL: https://github.com/apache/camel/pull/2513
 
 
   …mer when POST

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Sep/18 04:37;githubbot;GitHub user xldai opened a pull request:

    https://github.com/apache/camel/pull/2513

    fix CAMEL-12787 Accept header is not respected anymore in CXFRS consu…

    …mer when POST

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xldai/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2513.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2513
    
----
commit b3b837a697943598bdd2a9ff4488d69a36f54d72
Author: Xilai Dai <xldai@...>
Date:   2018-09-09T04:36:44Z

    fix CAMEL-12787 Accept header is not respected anymore in CXFRS consumer when POST

----
","09/Sep/18 04:38;xldai;As a quick fix, the PR is created https://github.com/apache/camel/pull/2513","10/Sep/18 05:45;githubbot;oscerd commented on issue #2513: fix CAMEL-12787 Accept header is not respected anymore in CXFRS consu…
URL: https://github.com/apache/camel/pull/2513#issuecomment-419794002
 
 
   I'm merging this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Sep/18 06:33;githubbot;oscerd commented on issue #2513: fix CAMEL-12787 Accept header is not respected anymore in CXFRS consu…
URL: https://github.com/apache/camel/pull/2513#issuecomment-419803433
 
 
   Merged on master, 2.22.x and 2.21.x
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Sep/18 06:41;githubbot;oscerd closed pull request #2513: fix CAMEL-12787 Accept header is not respected anymore in CXFRS consu…
URL: https://github.com/apache/camel/pull/2513
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
index 1ae15e91fe3..8679bba6894 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
@@ -115,7 +115,7 @@ public Object populateCxfRsResponseFromExchange(Exchange camelExchange,
             if (response.getHeader(Exchange.HTTP_RESPONSE_CODE) != null && !cxfExchange.containsKey(org.apache.cxf.message.Message.RESPONSE_CODE)) {
                 cxfExchange.put(org.apache.cxf.message.Message.RESPONSE_CODE, response.getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class));
             }
-            if (response.getHeader(Exchange.CONTENT_TYPE) != null) {
+            if (response.getHeader(Exchange.CONTENT_TYPE) != null && !cxfExchange.containsKey(org.apache.cxf.message.Message.CONTENT_TYPE)) {
                 if (!ObjectHelper.isEmpty(cxfExchange) && !ObjectHelper.isEmpty(cxfExchange.getOutMessage())) {
                     cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, 
                                                         new TreeMap<>(String.CASE_INSENSITIVE_ORDER));


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Sep/18 06:41;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2513
",,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-redis - When stopping consumer it should stop the message listener,CAMEL-12779,13183110,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,05/Sep/18 12:08,05/Sep/18 12:11,13/Mar/19 22:20,05/Sep/18 12:11,2.21.0,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-spring-redis,,,,,,0,,,,"The consumer needs to remove the message listener when its stopping so it wont continue to receive messages, which otherwise can happen when shutting down Camel graceful.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-09-05 12:08:49.0,,,,,,,0|i3xr5j:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using StubComponent can block routes depending on MEP,CAMEL-12775,13182869,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,guido.schreuder@gmail.com,guido.schreuder@gmail.com,04/Sep/18 17:34,05/Sep/18 09:27,13/Mar/19 22:20,05/Sep/18 08:38,2.16.3,2.22.0,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-core,,,,,,0,,,,"As the name implies and per the documentation 'stub:' should be a no-op.

However, if the exchange pattarn is InOut, routes are actually blocked waiting for a response.

Discovered against camel 2.16.3

Confirmed against Camel 2.22.0 (see attached test-case)

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,04/Sep/18 17:32;guido.schreuder@gmail.com;StubTest.java;https://issues.apache.org/jira/secure/attachment/12938283/StubTest.java,,,,1.0,,,,,,,,,,,,,,,,,,,2018-09-05 08:39:03.778,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 05 09:27:05 UTC 2018,,,,,,,0|i3xpt3:,9223372036854775807,,,,,,,,,,05/Sep/18 08:39;davsclaus;Thanks for reporting and providing the unit test,"05/Sep/18 09:27;guido.schreuder@gmail.com;You're welcome Claus, that was fast!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelCatalog - Should be JMX compliant,CAMEL-12778,13183052,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,05/Sep/18 06:55,05/Sep/18 07:23,13/Mar/19 22:20,05/Sep/18 07:23,2.21.2,2.22.0,,,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-catalog,,,,,,0,,,,"We have this error

Failed
org.apache.camel.catalog.CamelCatalogMBeanExporterTest.testMBeanExporter

Failing for the past 8 builds (Since Unstable#599 )
Took 7 ms.
Error Message
org.apache.camel.catalog.CamelCatalog: Method org.apache.camel.catalog.CamelCatalog.setSuggestionStrategy has parameter or return type that cannot be translated into an open type
Stacktrace
javax.management.NotCompliantMBeanException: org.apache.camel.catalog.CamelCatalog: Method org.apache.camel.catalog.CamelCatalog.setSuggestionStrategy has parameter or return type that cannot be translated into an open type
	at org.apache.camel.catalog.CamelCatalogMBeanExporterTest.testMBeanExporter(CamelCatalogMBeanExporterTest.java:35)
Caused by: java.lang.IllegalArgumentException: Method org.apache.camel.catalog.CamelCatalog.setSuggestionStrategy has parameter or return type that cannot be translated into an open type
	at org.apache.camel.catalog.CamelCatalogMBeanExporterTest.testMBeanExporter(CamelCatalogMBeanExporterTest.java:35)
Caused by: javax.management.openmbean.OpenDataException: Cannot convert type: org.apache.camel.catalog.SuggestionStrategy
	at org.apache.camel.catalog.CamelCatalogMBeanExporterTest.testMBeanExporter(CamelCatalogMBeanExporterTest.java:35)
Caused by: javax.management.openmbean.OpenDataException: Can't map org.apache.camel.catalog.SuggestionStrategy to an open data type
	at org.apache.camel.catalog.CamelCatalogMBeanExporterTest.testMBeanExporter(CamelCatalogMBeanExporterTest.java:35)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 05 07:23:17 UTC 2018,,,,,,,0|i3xqsn:,9223372036854775807,,,,,,,,,,05/Sep/18 07:23;davsclaus;As this is not in use we have deprecate it instead and will remove it in future release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Combination of File consumer with charset and Split DSL with XPath doesn't parse XML correctly,CAMEL-12769,13182580,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,03/Sep/18 08:22,04/Sep/18 14:37,13/Mar/19 22:20,04/Sep/18 14:37,2.22.0,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-core,,,,,,0,,,,"This route:
{code:java}
from(""file:/...?charset=iso-8859-1&&include=.*\.xml"")
    .split(xpath(""/foo/bar""))
        ...
{code}
does not read and split XML like the following with the correct encoding:
{code:xml}
<?xml version=""1.0"" encoding=""ISO-8859-1""?>
<foo>
	<bar>abc</bar>
	<bar>xyz</bar>
	<bar>åäö</bar>
</root>
{code}
The root cause is due to the spec of {{IOConverter.toInputStream(File, String)}}:
 [https://github.com/apache/camel/blob/camel-2.22.1/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java#L84-L119]
 which was clarified at CAMEL-8346 and CAMEL-8356.

This method converts a {{File}} with a charset to an {{InputStream}} with the *JVM default charset* encoding whatever the format of the file is. However, in turn [XmlConverter.toDOMDocument(...)|https://github.com/apache/camel/blob/camel-2.22.1/camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java#L870-L872] uses {{DocumentBuilder}} to convert the input stream to a DOM {{Document}} and {{DocumentBuilder}} is aware of the XML declaration:
{code:xml}
<?xml version=""1.0"" encoding=""ISO-8859-1""?>
{code}
to detect the file encoding, and there is a mismatch between the actual encoding of the input stream (JVM default) and the encoding declared in XML.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-03 08:28:44.936,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 04 14:37:47 UTC 2018,,,,,,,0|i3xo1j:,9223372036854775807,,,,,,,,,,"03/Sep/18 08:28;githubbot;tadayosi opened a new pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505
 
 
   …with XPath doesn't parse XML correctly
   
   https://issues.apache.org/jira/browse/CAMEL-12769

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Sep/18 08:28;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/2505

    CAMEL-12769: Combination of File consumer with charset and Split DSL …

    …with XPath doesn't parse XML correctly
    
    https://issues.apache.org/jira/browse/CAMEL-12769

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-12769

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2505.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2505
    
----
commit b8dd9d2c9a4f9a0616ed3016b91fa547b138ae0f
Author: Tadayoshi Sato <sato.tadayoshi@...>
Date:   2018-09-03T08:24:05Z

    CAMEL-12769: Combination of File consumer with charset and Split DSL with XPath doesn't parse XML correctly

----
","03/Sep/18 08:37;githubbot;oscerd commented on issue #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#issuecomment-418042984
 
 
   LGTM. I'd like to have feedback from @davsclaus and @onderson too

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Sep/18 08:49;githubbot;davsclaus commented on issue #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#issuecomment-418046264
 
 
   Have you run all the unit tests of camel-core, camel-spring and also since this is XML, then try camel-saxon and maybe camel-cxf.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Sep/18 09:20;githubbot;onderson commented on a change in pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#discussion_r214624570
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
 ##########
 @@ -500,6 +478,53 @@ public static String getCharsetName(Exchange exchange) {
         return getCharsetName(exchange, true);
     }
 
+    /**
+     * Encoding-aware input stream.
+     */
+    public static class EncodingInputStream extends InputStream {
+
+        private final File file;
+        private final BufferedReader reader;
+        private final Charset defaultStreamCharset;
+
+        private ByteBuffer bufferBytes;
+        private CharBuffer bufferedChars = CharBuffer.allocate(4096);
+
+        public EncodingInputStream(File file, String charset) throws IOException {
+            this.file = file;
+            reader = toReader(file, charset);
+            defaultStreamCharset = defaultCharset.get();
 
 Review comment:
   isn't it still that the given `String charset` and defaultStreamCharset should match and default fileinputstream's encoding resolves it?
   and yes full CI test build would be good to see, before merging.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Sep/18 09:21;githubbot;onderson commented on a change in pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#discussion_r214624993
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java
 ##########
 @@ -869,7 +870,14 @@ public Document toDOMDocument(InputStream in) throws IOException, SAXException,
     @Converter
     public Document toDOMDocument(InputStream in, Exchange exchange) throws IOException, SAXException, ParserConfigurationException {
         DocumentBuilder documentBuilder = createDocumentBuilder(getDocumentBuilderFactory(exchange));
-        return documentBuilder.parse(in);
+        if (in instanceof IOConverter.EncodingInputStream) {
+            // DocumentBuilder detects encoding from XML declaration, so we need to
+            // revert the converted encoding for the input stream
+            IOConverter.EncodingInputStream encIn = (IOConverter.EncodingInputStream) in;
 
 Review comment:
   as we have instance of, type casting is good. maybe objecthelper.cast can be used.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Sep/18 09:35;githubbot;tadayosi commented on a change in pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#discussion_r214628894
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
 ##########
 @@ -500,6 +478,53 @@ public static String getCharsetName(Exchange exchange) {
         return getCharsetName(exchange, true);
     }
 
+    /**
+     * Encoding-aware input stream.
+     */
+    public static class EncodingInputStream extends InputStream {
+
+        private final File file;
+        private final BufferedReader reader;
+        private final Charset defaultStreamCharset;
+
+        private ByteBuffer bufferBytes;
+        private CharBuffer bufferedChars = CharBuffer.allocate(4096);
+
+        public EncodingInputStream(File file, String charset) throws IOException {
+            this.file = file;
+            reader = toReader(file, charset);
+            defaultStreamCharset = defaultCharset.get();
 
 Review comment:
   If I understand your question correctly, I don't think it resolves the bug. We read files with encodings other than default and IIUC the purpose of `IOConverter.toInputStream(File, String)` is to convert a File with a charset to an InputStream with the JVM default charset encoding. So we should handle cases where the given charset and the default one differ.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Sep/18 09:36;githubbot;tadayosi commented on issue #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#issuecomment-418059234
 
 
   I ran camel-core, camel-spring, camel-saxon, and camel-cxf, and all the unit tests passed. Should I run the full test suite locally?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Sep/18 10:05;githubbot;onderson commented on a change in pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#discussion_r214637601
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
 ##########
 @@ -500,6 +478,53 @@ public static String getCharsetName(Exchange exchange) {
         return getCharsetName(exchange, true);
     }
 
+    /**
+     * Encoding-aware input stream.
+     */
+    public static class EncodingInputStream extends InputStream {
+
+        private final File file;
+        private final BufferedReader reader;
+        private final Charset defaultStreamCharset;
+
+        private ByteBuffer bufferBytes;
+        private CharBuffer bufferedChars = CharBuffer.allocate(4096);
+
+        public EncodingInputStream(File file, String charset) throws IOException {
+            this.file = file;
+            reader = toReader(file, charset);
+            defaultStreamCharset = defaultCharset.get();
 
 Review comment:
   yes, that's my point too. I am unsure if it is right approach. https://github.com/apache/camel/pull/2505/files#diff-cf527fa70918461b67c399c1a1be9f4eR508 encodes with the default charset even if you have BufferedReader with a given charset. or could it be the otherway around?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Sep/18 10:06;githubbot;onderson commented on a change in pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#discussion_r214637601
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
 ##########
 @@ -500,6 +478,53 @@ public static String getCharsetName(Exchange exchange) {
         return getCharsetName(exchange, true);
     }
 
+    /**
+     * Encoding-aware input stream.
+     */
+    public static class EncodingInputStream extends InputStream {
+
+        private final File file;
+        private final BufferedReader reader;
+        private final Charset defaultStreamCharset;
+
+        private ByteBuffer bufferBytes;
+        private CharBuffer bufferedChars = CharBuffer.allocate(4096);
+
+        public EncodingInputStream(File file, String charset) throws IOException {
+            this.file = file;
+            reader = toReader(file, charset);
+            defaultStreamCharset = defaultCharset.get();
 
 Review comment:
   yes, that's my point too. I am unsure if it is right approach. https://github.com/apache/camel/pull/2505/files#diff-cf527fa70918461b67c399c1a1be9f4eR508 encodes with the default charset even if you have BufferedReader with a given charset. or could it be the otherway around? if UTs are good, i think it is good to go.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Sep/18 11:02;githubbot;tadayosi commented on a change in pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#discussion_r214651061
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
 ##########
 @@ -500,6 +478,53 @@ public static String getCharsetName(Exchange exchange) {
         return getCharsetName(exchange, true);
     }
 
+    /**
+     * Encoding-aware input stream.
+     */
+    public static class EncodingInputStream extends InputStream {
+
+        private final File file;
+        private final BufferedReader reader;
+        private final Charset defaultStreamCharset;
+
+        private ByteBuffer bufferBytes;
+        private CharBuffer bufferedChars = CharBuffer.allocate(4096);
+
+        public EncodingInputStream(File file, String charset) throws IOException {
+            this.file = file;
+            reader = toReader(file, charset);
+            defaultStreamCharset = defaultCharset.get();
 
 Review comment:
   I didn't create this but the line came from the existing code. I just made the anonymous class in the method to a named static class. It was brought from https://issues.apache.org/jira/browse/CAMEL-8346 and https://issues.apache.org/jira/browse/CAMEL-8356 so we need to understand their backgrounds to see if it's really a right approach or not.
   
   My understanding is that we already have the other method  `IOConverter.toInputStream(File)` so unless the following is the specification of the method, there is no reason for the existence of `IOConverter.toInputStream(File, String)`:
   ```
       /**
        * Converts the given {@link File} with the given charset to {@link InputStream} with the JVM default charset
        *
        * @param file the file to be converted
        * @param charset the charset the file is read with
        * @return the input stream with the JVM default charset
        */
   ```
   Let's think that you have a file with `iso-8859-1` and want the input stream with `iso-8859-1` encoding. Then you can just use `IOConverter.toInputStream(File)`. `IOConverter.toInputStream(File, String)` is necessary only when you want the input stream with something other than `iso-8859-1`, but what encoding should the method return?  The only sensible choice would be `UTF-8` or the JVM default, but AFAIK `UTF-8` has a problem at CAMEL-8346.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Sep/18 10:17;githubbot;tadayosi commented on issue #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#issuecomment-418315454
 
 
   I finally ran through `mvn clean install` on the project but got a few test failures on some components:
   ```
   [INFO] Camel :: ElasticSearch5 (deprecated) 2.23.0-SNAPSHOT FAILURE [05:10 min]
   [INFO] Camel :: Netty HTTP (deprecated) ................... FAILURE [05:05 min]
   [INFO] Camel :: Tika ...................................... FAILURE [  7.036 s]
   [INFO] Camel :: XChange ................................... FAILURE [  9.915 s]
   [INFO] Camel :: Zookeeper ................................. FAILURE [10:04 min]
   [INFO] Camel :: Zookeeper Master .......................... FAILURE [ 41.479 s]
   [INFO] Camel :: Platforms :: Camel Catalog ................ FAILURE [ 20.017 s]
   ```
   For camel-netty-http, camel-zookeeper, and camel-zookeeper-master, I re-ran their tests individually and they passed with my patch. For the others, I re-ran them without my patch and still got the same failures, so probably it's not my fault.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Sep/18 10:57;githubbot;davsclaus commented on issue #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#issuecomment-418324881
 
 
   The CI server also have some unit test failures in zookeeper etc.
   https://builds.apache.org/job/Camel/job/master/lastCompletedBuild/testReport/
   
   LGTM

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Sep/18 14:36;githubbot;davsclaus closed pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java b/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
index 073547ea36c..ae02a2c8e39 100644
--- a/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
+++ b/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
@@ -81,40 +81,18 @@ public static InputStream toInputStream(File file) throws IOException {
         return IOHelper.buffered(new FileInputStream(file));
     }
 
+    /**
+     * Converts the given {@link File} with the given charset to {@link InputStream} with the JVM default charset
+     *
+     * @param file the file to be converted
+     * @param charset the charset the file is read with
+     * @return the input stream with the JVM default charset
+     */
     public static InputStream toInputStream(File file, String charset) throws IOException {
         if (charset != null) {
-            final BufferedReader reader = toReader(file, charset);
-            final Charset defaultStreamCharset = defaultCharset.get();
-            return new InputStream() {
-                private ByteBuffer bufferBytes;
-                private CharBuffer bufferedChars = CharBuffer.allocate(4096);
-
-                @Override
-                public int read() throws IOException {
-                    if (bufferBytes == null || bufferBytes.remaining() <= 0) {
-                        bufferedChars.clear();
-                        int len = reader.read(bufferedChars);
-                        bufferedChars.flip();
-                        if (len == -1) {
-                            return -1;
-                        }
-                        bufferBytes = defaultStreamCharset.encode(bufferedChars);
-                    }
-                    return bufferBytes.get();
-                }
-
-                @Override
-                public void close() throws IOException {
-                    reader.close();
-                }
-
-                @Override
-                public void reset() throws IOException {
-                    reader.reset();
-                }
-            };
+            return new EncodingInputStream(file, charset);
         } else {
-            return IOHelper.buffered(new FileInputStream(file));
+            return toInputStream(file);
         }
     }
 
@@ -500,6 +478,53 @@ public static String getCharsetName(Exchange exchange) {
         return getCharsetName(exchange, true);
     }
 
+    /**
+     * Encoding-aware input stream.
+     */
+    public static class EncodingInputStream extends InputStream {
+
+        private final File file;
+        private final BufferedReader reader;
+        private final Charset defaultStreamCharset;
+
+        private ByteBuffer bufferBytes;
+        private CharBuffer bufferedChars = CharBuffer.allocate(4096);
+
+        public EncodingInputStream(File file, String charset) throws IOException {
+            this.file = file;
+            reader = toReader(file, charset);
+            defaultStreamCharset = defaultCharset.get();
+        }
+
+        @Override
+        public int read() throws IOException {
+            if (bufferBytes == null || bufferBytes.remaining() <= 0) {
+                bufferedChars.clear();
+                int len = reader.read(bufferedChars);
+                bufferedChars.flip();
+                if (len == -1) {
+                    return -1;
+                }
+                bufferBytes = defaultStreamCharset.encode(bufferedChars);
+            }
+            return bufferBytes.get();
+        }
+
+        @Override
+        public void close() throws IOException {
+            reader.close();
+        }
+
+        @Override
+        public void reset() throws IOException {
+            reader.reset();
+        }
+
+        public InputStream toOriginalInputStream() throws FileNotFoundException {
+            return new FileInputStream(file);
+        }
+    }
+
     /**
      * Encoding-aware file reader. 
      */
diff --git a/camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java b/camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java
index f8a876637d4..6d7c06379a3 100644
--- a/camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java
+++ b/camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java
@@ -54,7 +54,6 @@
 import javax.xml.transform.stream.StreamResult;
 import javax.xml.transform.stream.StreamSource;
 
-import org.apache.camel.util.StringHelper;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -70,8 +69,10 @@
 import org.apache.camel.Converter;
 import org.apache.camel.Exchange;
 import org.apache.camel.StringSource;
+import org.apache.camel.converter.IOConverter;
 import org.apache.camel.util.IOHelper;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.StringHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -870,7 +871,14 @@ public Document toDOMDocument(InputStream in) throws IOException, SAXException,
     @Converter
     public Document toDOMDocument(InputStream in, Exchange exchange) throws IOException, SAXException, ParserConfigurationException {
         DocumentBuilder documentBuilder = createDocumentBuilder(getDocumentBuilderFactory(exchange));
-        return documentBuilder.parse(in);
+        if (in instanceof IOConverter.EncodingInputStream) {
+            // DocumentBuilder detects encoding from XML declaration, so we need to
+            // revert the converted encoding for the input stream
+            IOConverter.EncodingInputStream encIn = (IOConverter.EncodingInputStream) in;
+            return documentBuilder.parse(encIn.toOriginalInputStream());
+        } else {
+            return documentBuilder.parse(in);
+        }
     }
 
     /**
diff --git a/camel-core/src/test/java/org/apache/camel/converter/IOConverterCharsetTest.java b/camel-core/src/test/java/org/apache/camel/converter/IOConverterCharsetTest.java
index 9d82ade477f..c192349b531 100644
--- a/camel-core/src/test/java/org/apache/camel/converter/IOConverterCharsetTest.java
+++ b/camel-core/src/test/java/org/apache/camel/converter/IOConverterCharsetTest.java
@@ -38,8 +38,8 @@ public void testToInputStreamFileWithCharsetUTF8() throws Exception {
         switchToDefaultCharset(StandardCharsets.UTF_8);
         File file = new File(""src/test/resources/org/apache/camel/converter/german.utf-8.txt"");
         try (InputStream in = IOConverter.toInputStream(file, ""UTF-8"");
-        BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8)); 
-        BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), StandardCharsets.UTF_8))) {
+             BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));
+             BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), StandardCharsets.UTF_8))) {
             String line = reader.readLine();
             String naiveLine = naiveReader.readLine();
             assertEquals(naiveLine, line);
@@ -52,8 +52,8 @@ public void testToInputStreamFileWithCharsetUTF8withOtherDefaultEncoding() throw
         switchToDefaultCharset(StandardCharsets.ISO_8859_1);
         File file = new File(""src/test/resources/org/apache/camel/converter/german.utf-8.txt"");
         try (InputStream in = IOConverter.toInputStream(file, ""UTF-8"");
-        BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.ISO_8859_1));
-        BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), StandardCharsets.UTF_8))) {
+             BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.ISO_8859_1));
+             BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), StandardCharsets.UTF_8))) {
             String line = reader.readLine();
             String naiveLine = naiveReader.readLine();
             assertEquals(naiveLine, line);
@@ -66,8 +66,8 @@ public void testToInputStreamFileWithCharsetLatin1() throws Exception {
         switchToDefaultCharset(StandardCharsets.UTF_8);
         File file = new File(""src/test/resources/org/apache/camel/converter/german.iso-8859-1.txt"");
         try (InputStream in = IOConverter.toInputStream(file, ""ISO-8859-1"");
-        BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));
-        BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), ""ISO-8859-1""))) {
+             BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));
+             BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), ""ISO-8859-1""))) {
             String line = reader.readLine();
             String naiveLine = naiveReader.readLine();
             assertEquals(naiveLine, line);
@@ -80,7 +80,7 @@ public void testToInputStreamFileDirectByteDumpWithCharsetLatin1() throws Except
         switchToDefaultCharset(StandardCharsets.UTF_8);
         File file = new File(""src/test/resources/org/apache/camel/converter/german.iso-8859-1.txt"");
         try (InputStream in = IOConverter.toInputStream(file, ""ISO-8859-1"");
-        InputStream naiveIn = Files.newInputStream(Paths.get(file.getAbsolutePath()))) {
+             InputStream naiveIn = Files.newInputStream(Paths.get(file.getAbsolutePath()))) {
             byte[] bytes = new byte[8192];
             in.read(bytes);
             byte[] naiveBytes = new byte[8192];
@@ -93,7 +93,7 @@ public void testToInputStreamFileDirectByteDumpWithCharsetLatin1() throws Except
     public void testToReaderFileWithCharsetUTF8() throws Exception {
         File file = new File(""src/test/resources/org/apache/camel/converter/german.utf-8.txt"");
         try (BufferedReader reader = IOConverter.toReader(file, ""UTF-8"");
-        BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), StandardCharsets.UTF_8))) {
+             BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), StandardCharsets.UTF_8))) {
             String line = reader.readLine();
             String naiveLine = naiveReader.readLine();
             assertEquals(naiveLine, line);
@@ -105,7 +105,7 @@ public void testToReaderFileWithCharsetUTF8() throws Exception {
     public void testToReaderFileWithCharsetLatin1() throws Exception {
         File file = new File(""src/test/resources/org/apache/camel/converter/german.iso-8859-1.txt"");
         try (BufferedReader reader = IOConverter.toReader(file, ""ISO-8859-1"");
-        BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), ""ISO-8859-1""))) {
+             BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), ""ISO-8859-1""))) {
             String line = reader.readLine();
             String naiveLine = naiveReader.readLine();
             assertEquals(naiveLine, line);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Sep/18 14:36;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2505
",04/Sep/18 14:37;davsclaus;Thanks for reporting and the PR,,,,,,,,,,,,,,,,,
SOAP request causing null namespace URI in SimpleNsStreamWriter camel-cxf/woodstox,CAMEL-12758,13181598,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ramu11,juergen.fritz@irix.ch,juergen.fritz@irix.ch,28/Aug/18 13:19,04/Sep/18 08:03,13/Mar/19 22:20,04/Sep/18 08:03,2.22.0,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-core,camel-cxf,,,,,1,,,,"Getting NullPointer at com.ctc.wstx.sw.SimpleNsStreamWriter.writeNamespace(+SimpleNsStreamWriter.java:134)+ because parameter nsURI is null. (full stack trace below)

First call of this method prefix=”soapenv”, nsURI=null

Second call: prefix=”soap”, nsURI==""[http://schemas.xmlsoap.org/soap/envelope/]"" (I changed the value of nsURI in the debugger in the first call to arrive here)

In general: if I change the nsURI in the debugger to the correct value or to an empty string,

the request goes through without any error.

Same SOAP request using SOAPUI 5.4 was working with the same application using an older version of camel-cxf (2.12.4) under Java 1.7

My SOAP request:

<soapenv:Envelope xmlns:soapenv=""[http://schemas.xmlsoap.org/soap/envelope/]"" xmlns:tss=""[http://axpo.ch/emis/v1/TimeseriesService]"">
       <soapenv:Header>
        <tss:sourceSystem>MySourceSystem</tss:sourceSystem>
    </soapenv:Header>
    <soapenv:Body>
           <tss:send>
                 <correlationId>IN1806141130169762894</correlationId>
                 <collectionIdentifier>NA</collectionIdentifier>
                 <timeseriesList>
                     <timeseries>
                         <identifier>1234</identifier>
                         <measurementUnit>MW</measurementUnit>
                         <resolution>PT15M</resolution>
                         <periodList>
                             <interval start=""2018-06-27T22:00:00Z"" quantity=""0.041"" status=""VALID""/>
                             <interval start=""2018-06-28T21:45:00Z"" quantity=""0.036"" status=""VALID""/>
                         </periodList>
                     </timeseries>
                 </timeseriesList>
           </tss:send>
    </soapenv:Body>
</soapenv:Envelope>

Error stack trace:


com.ctc.wstx.sw.SimpleNsStreamWriter.writeNamespace(+SimpleNsStreamWriter.java:134+
10:27:09,294 WARNING [org.apache.cxf.phase.PhaseInterceptorChain] (default task-118) Application \{http://axpo.ch/emis/v1/TimeseriesService}TimeseriesService#\{http://axpo.ch/emis/v1/TimeseriesService}send has thrown exception, unwinding now: org.apache.cxf.interceptor.Fault: Error during type conversion from type: org.apache.camel.converter.jaxp.XMLStreamReaderInputStream to the required type: javax.xml.stream.XMLStreamReader with value [org.apache.camel.converter.jaxp.XMLStreamReaderInputStream@9c55922|mailto:org.apache.camel.converter.jaxp.XMLStreamReaderInputStream@9c55922] due +java.lang.NullPointerException+
       at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.checkFailure(+CxfConsumer.java:344+) [camel-cxf-2.22.0.jar:2.22.0]
       at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.setResponseBack(+CxfConsumer.java:318+) [camel-cxf-2.22.0.jar:2.22.0]
       at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.syncInvoke(+CxfConsumer.java:244+) [camel-cxf-2.22.0.jar:2.22.0]
       at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.invoke(+CxfConsumer.java:162+) [camel-cxf-2.22.0.jar:2.22.0]
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(+ServiceInvokerInterceptor.java:59+) [cxf-core-3.2.5.jar:3.2.5]
       at java.util.concurrent.Executors$RunnableAdapter.call(+Executors.java:511+) [rt.jar:1.8.0_144]
      at java.util.concurrent.FutureTask.run(+FutureTask.java:266+) [rt.jar:1.8.0_144]
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(+ServiceInvokerInterceptor.java:126+) [cxf-core-3.2.5.jar:3.2.5]
       at org.apache.cxf.workqueue.SynchronousExecutor.execute(+SynchronousExecutor.java:37+) [cxf-core-3.2.5.jar:3.2.5]
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(+ServiceInvokerInterceptor.java:131+) [cxf-core-3.2.5.jar:3.2.5]
       at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(+PhaseInterceptorChain.java:308+) [cxf-core-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.ChainInitiationObserver.onMessage(+ChainInitiationObserver.java:121+) [cxf-core-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(+AbstractHTTPDestination.java:267+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.servlet.ServletController.invokeDestination(+ServletController.java:234+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.servlet.ServletController.invoke(+ServletController.java:208+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.servlet.ServletController.invoke(+ServletController.java:160+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(+CXFNonSpringServlet.java:216+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(+AbstractHTTPServlet.java:301+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(+AbstractHTTPServlet.java:220+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at javax.servlet.http.HttpServlet.service(+HttpServlet.java:707+) [jboss-servlet-api_3.1_spec-1.0.0.Final-redhat-1.jar:1.0.0.Final-redhat-1]
      at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(+AbstractHTTPServlet.java:276+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at io.undertow.servlet.handlers.ServletHandler.handleRequest(+ServletHandler.java:74+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]
       at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(+ServletSecurityRoleHandler.java:62+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]
       at io.undertow.servlet.handlers.ServletChain$1.handleRequest(+ServletChain.java:65+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]
       at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(+ServletDispatchingHandler.java:36+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]
       at org.wildfly.extension.undertow.security.SecurityContextAssociationHandler.handleRequest(+SecurityContextAssociationHandler.java:78+)
       at io.undertow.server.handlers.PredicateHandler.handleRequest(+PredicateHandler.java:43+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]
       at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(+SSLInformationAssociationHandler.java:131+) [undertow-servlet-1.4.18.SP8-redhat-.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(+ServletAuthenticationCallHandler.java:57+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.server.handlers.PredicateHandler.handleRequest(+PredicateHandler.java:43+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(+AbstractConfidentialityHandler.java:46+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(+ServletConfidentialityConstraintHandler.java:64+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(+AuthenticationMechanismsHandler.java:60+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(+CachedAuthenticatedSessionHandler.java:77+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.security.handlers.NotificationReceiverHandler.handleRequest(+NotificationReceiverHandler.java:50+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(+AbstractSecurityContextAssociationHandler.java:43+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.server.handlers.PredicateHandler.handleRequest(+PredicateHandler.java:43+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(+JACCContextIdHandler.java:61+)

       at io.undertow.server.handlers.PredicateHandler.handleRequest(+PredicateHandler.java:43+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at org.wildfly.extension.undertow.deployment.GlobalRequestControllerHandler.handleRequest(+GlobalRequestControllerHandler.java:68+)

       at io.undertow.server.handlers.PredicateHandler.handleRequest(+PredicateHandler.java:43+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(+ServletInitialHandler.java:292+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.ServletInitialHandler.access$100(+ServletInitialHandler.java:81+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.ServletInitialHandler$2.call(+ServletInitialHandler.java:138+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.ServletInitialHandler$2.call(+ServletInitialHandler.java:135+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(+ServletRequestContextThreadSetupAction.java:48+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(+ContextClassLoaderSetupAction.java:43+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at org.wildfly.extension.undertow.security.SecurityContextThreadSetupAction.lambda$create$0(+SecurityContextThreadSetupAction.java:105+)

       at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda{{monospaced text}}$create$0(+UndertowDeploymentInfoService.java:1501+)

       at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(+UndertowDeploymentInfoService.java:1501+)

       at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(+UndertowDeploymentInfoService.java:1501+)

       at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(+UndertowDeploymentInfoService.java:1501+)

       at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(+ServletInitialHandler.java:272+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.ServletInitialHandler.access$000(+ServletInitialHandler.java:81+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(+ServletInitialHandler.java:104+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.server.Connectors.executeRootHandler(+Connectors.java:330+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.server.HttpServerExchange$1.run(+HttpServerExchange.java:812+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at java.util.concurrent.ThreadPoolExecutor.runWorker(+ThreadPoolExecutor.java:1149+) [rt.jar:1.8.0_144]

       at java.util.concurrent.ThreadPoolExecutor$Worker.run(+ThreadPoolExecutor.java:624+) [rt.jar:1.8.0_144]

       at java.lang.Thread.run(+Thread.java:748+) [rt.jar:1.8.0_144]

Caused by: +org.apache.camel.TypeConversionException+: Error during type conversion from type: org.apache.camel.converter.jaxp.XMLStreamReaderInputStream to the required type: javax.xml.stream.XMLStreamReader with value [org.apache.camel.converter.jaxp.XMLStreamReaderInputStream@9c55922|mailto:org.apache.camel.converter.jaxp.XMLStreamReaderInputStream@9c55922] due +java.lang.NullPointerException+

       at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(+BaseTypeConverterRegistry.java:667+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(+BaseTypeConverterRegistry.java:158+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(+BaseTypeConverterRegistry.java:129+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(+JaxbDataFormat.java:273+) [camel-jaxb-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.UnmarshalProcessor.process(+UnmarshalProcessor.java:69+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.RedeliveryErrorHandler.process(+RedeliveryErrorHandler.java:548+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.CamelInternalProcessor.process(+CamelInternalProcessor.java:201+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.Pipeline.process(+Pipeline.java:138+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.Pipeline.process(+Pipeline.java:101+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.CamelInternalProcessor.process(+CamelInternalProcessor.java:201+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.DelegateAsyncProcessor.process(+DelegateAsyncProcessor.java:97+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.syncInvoke(+CxfConsumer.java:238+) [camel-cxf-2.22.0.jar:2.22.0]

       ... 57 more

Caused by: +org.apache.camel.RuntimeCamelException+: +java.lang.NullPointerException+

       at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(+ObjectHelper.java:1830+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.util.ObjectHelper.invokeMethod(+ObjectHelper.java:1409+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(+InstanceMethodTypeConverter.java:79+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(+BaseTypeConverterRegistry.java:326+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(+BaseTypeConverterRegistry.java:141+) [camel-core-2.22.0.jar:2.22.0]

       ... 67 more

Caused by: +java.lang.NullPointerException+

       at com.ctc.wstx.sw.SimpleNsStreamWriter.writeNamespace(+SimpleNsStreamWriter.java:134+) [woodstox-core-5.0.3.jar:5.0.3]

       at org.apache.camel.converter.jaxp.XMLStreamReaderInputStream.ensureBuffering(+XMLStreamReaderInputStream.java:111+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.converter.jaxp.XMLStreamReaderInputStream.read(+XMLStreamReaderInputStream.java:68+) [camel-core-2.22.0.jar:2.22.0]

       at java.io.BufferedInputStream.fill(+BufferedInputStream.java:246+) [rt.jar:1.8.0_144]

       at java.io.BufferedInputStream.read1(+BufferedInputStream.java:286+) [rt.jar:1.8.0_144]

       at java.io.BufferedInputStream.read(+BufferedInputStream.java:345+) [rt.jar:1.8.0_144]

       at com.ctc.wstx.io.StreamBootstrapper.ensureLoaded(+StreamBootstrapper.java:482+) [woodstox-core-5.0.3.jar:5.0.3]

       at com.ctc.wstx.io.StreamBootstrapper.resolveStreamEncoding(+StreamBootstrapper.java:306+) [woodstox-core-5.0.3.jar:5.0.3]

       at com.ctc.wstx.io.StreamBootstrapper.bootstrapInput(+StreamBootstrapper.java:167+) [woodstox-core-5.0.3.jar:5.0.3]

       at com.ctc.wstx.stax.WstxInputFactory.doCreateSR(+WstxInputFactory.java:573+) [woodstox-core-5.0.3.jar:5.0.3]

       at com.ctc.wstx.stax.WstxInputFactory.createSR(+WstxInputFactory.java:633+) [woodstox-core-5.0.3.jar:5.0.3]

       at com.ctc.wstx.stax.WstxInputFactory.createSR(+WstxInputFactory.java:647+) [woodstox-core-5.0.3.jar:5.0.3]

       at com.ctc.wstx.stax.WstxInputFactory.createXMLStreamReader(+WstxInputFactory.java:334+) [woodstox-core-5.0.3.jar:5.0.3]

       at __redirected.__XMLInputFactory.createXMLStreamReader(+__XMLInputFactory.java:139+) [jboss-modules.jar:1.6.4.Final-redhat-1]

       at org.apache.camel.converter.jaxp.StaxConverter.createXMLStreamReader(+StaxConverter.java:170+) [camel-core-2.22.0.jar:2.22.0]

       at sun.reflect.NativeMethodAccessorImpl.invoke0(+Native Method+) [rt.jar:1.8.0_144]

       at sun.reflect.NativeMethodAccessorImpl.invoke(+NativeMethodAccessorImpl.java:62+) [rt.jar:1.8.0_144]

       at sun.reflect.DelegatingMethodAccessorImpl.invoke(+DelegatingMethodAccessorImpl.java:43+) [rt.jar:1.8.0_144]

       at java.lang.reflect.Method.invoke(+Method.java:498+) [rt.jar:1.8.0_144]

       at org.apache.camel.util.ObjectHelper.invokeMethod(+ObjectHelper.java:1405+) [camel-core-2.22.0.jar:2.22.0]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-29 15:24:30.469,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 04 08:03:08 UTC 2018,,,,,,,0|i3xhzz:,9223372036854775807,,,,,,,,,,"29/Aug/18 15:24;davsclaus;Maybe you can try to provide a patch/fix - for example setting that null namespace to an empty string as workaround.

Also if possible an unit test or sample project that is easy to run to reproduce the issue would be good.",31/Aug/18 17:06;ramu11;will look,"31/Aug/18 17:24;githubbot;ramu11 opened a new pull request #2503: CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream…
URL: https://github.com/apache/camel/pull/2503
 
 
   
   CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","31/Aug/18 17:24;githubbot;GitHub user ramu11 opened a pull request:

    https://github.com/apache/camel/pull/2503

    CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream…

    
    CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ramu11/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2503.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2503
    
----
commit 19df98642031fe4c65b92500657169bff1253f61
Author: Ramu <kkakarla@...>
Date:   2018-08-31T17:20:49Z

    CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStreamWriter

----
","31/Aug/18 17:31;ramu11;NUll check was already handled for 'NamespaceAttribute'

 [XMLStreamReaderInputStream|https://github.com/apache/camel/blob/apache-master/camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java#L105-L109]  but was missing for NamespaceURI. 

Now the NamespaceURI also has the Null check done

 ","03/Sep/18 08:24;githubbot;oscerd commented on a change in pull request #2503: CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream…
URL: https://github.com/apache/camel/pull/2503#discussion_r214609631
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java
 ##########
 @@ -108,7 +108,9 @@ private int ensureBuffering(int size) throws IOException {
                                                   reader.getAttributeValue(i));
                         }
                         for (int i = 0; i < reader.getNamespaceCount(); i++) {
-                            writer.writeNamespace(reader.getNamespacePrefix(i), reader.getNamespaceURI(i));
+                            String namespacePrefix = reader.getNamespacePrefix(i);
+                            String namespaceURI = reader.getNamespaceURI(i);
+                            writer.writeNamespace(namespacePrefix == null ? """" : namespacePrefix, namespaceURI == null ? """" : namespaceURI);
 
 Review comment:
   Maybe it would be better to use the ObjectHelper isEmpty method

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Sep/18 09:36;githubbot;ramu11 commented on a change in pull request #2503: CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream…
URL: https://github.com/apache/camel/pull/2503#discussion_r214629356
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java
 ##########
 @@ -108,7 +108,9 @@ private int ensureBuffering(int size) throws IOException {
                                                   reader.getAttributeValue(i));
                         }
                         for (int i = 0; i < reader.getNamespaceCount(); i++) {
-                            writer.writeNamespace(reader.getNamespacePrefix(i), reader.getNamespaceURI(i));
+                            String namespacePrefix = reader.getNamespacePrefix(i);
+                            String namespaceURI = reader.getNamespaceURI(i);
+                            writer.writeNamespace(namespacePrefix == null ? """" : namespacePrefix, namespaceURI == null ? """" : namespaceURI);
 
 Review comment:
   @oscerd  Actually the fix is to check for NULL for Namespace and substitute with empty.
   
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Sep/18 07:54;githubbot;davsclaus closed pull request #2503: CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream…
URL: https://github.com/apache/camel/pull/2503
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java b/camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java
index 9601742dbec..6344d1dcc59 100644
--- a/camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java
+++ b/camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java
@@ -108,7 +108,9 @@ private int ensureBuffering(int size) throws IOException {
                                                   reader.getAttributeValue(i));
                         }
                         for (int i = 0; i < reader.getNamespaceCount(); i++) {
-                            writer.writeNamespace(reader.getNamespacePrefix(i), reader.getNamespaceURI(i));
+                            String namespacePrefix = reader.getNamespacePrefix(i);
+                            String namespaceURI = reader.getNamespaceURI(i);
+                            writer.writeNamespace(namespacePrefix == null ? """" : namespacePrefix, namespaceURI == null ? """" : namespaceURI);
                         }
                         break;
                     case XMLStreamConstants.END_ELEMENT:


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Sep/18 07:54;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2503
",04/Sep/18 08:03;davsclaus;Thanks for reporting and the PR,,,,,,,,,,,,,,,,,,,,,,,
camel-sjms - MessageProducer is not closed when using shared session,CAMEL-12762,13181892,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,fogninid,fogninid,29/Aug/18 11:37,30/Aug/18 06:14,13/Mar/19 22:20,30/Aug/18 06:14,,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-sjms,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-29 14:01:50.159,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 30 06:14:49 UTC 2018,,,,,,,0|i3xjtb:,9223372036854775807,,,,,,,,,,"29/Aug/18 14:01;githubbot;fogninid opened a new pull request #2498: CAMEL-12762: close JMS producer
URL: https://github.com/apache/camel/pull/2498
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Aug/18 14:01;githubbot;GitHub user fogninid opened a pull request:

    https://github.com/apache/camel/pull/2498

    CAMEL-12762: close JMS producer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fogninid/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2498.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2498
    
----
commit e4de63b4fe82b4dae914bdb9661456ad4c700d53
Author: Daniele Fognini <daniele.fognini@...>
Date:   2018-08-27T13:41:18Z

    CAMEL-12762: close JMS producer

----
","30/Aug/18 06:02;githubbot;oscerd commented on issue #2498: CAMEL-12762: close JMS producer
URL: https://github.com/apache/camel/pull/2498#issuecomment-417199826
 
 
   I'm merging

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Aug/18 06:08;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2498
","30/Aug/18 06:08;githubbot;oscerd closed pull request #2498: CAMEL-12762: close JMS producer
URL: https://github.com/apache/camel/pull/2498
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsProducer.java b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsProducer.java
index 594cf46e689..516a8dc5ba0 100644
--- a/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsProducer.java
+++ b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsProducer.java
@@ -190,8 +190,10 @@ protected Session createSession() throws Exception {
         void release(MessageProducerResources producer) throws Exception;
     }
 
-    protected class NOOPReleaseProducerCallback implements ReleaseProducerCallback {
-        public void release(MessageProducerResources producer) throws Exception { /* no-op */ }
+    protected class CloseProducerCallback implements ReleaseProducerCallback {
+        public void release(MessageProducerResources producer) throws Exception {
+            producer.getMessageProducer().close();
+        }
     }
 
     protected class ReturnProducerCallback implements ReleaseProducerCallback {
@@ -209,15 +211,15 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
         }
 
         try {
-            MessageProducerResources producer = null;
-            ReleaseProducerCallback releaseProducerCallback = null;
+            final MessageProducerResources producer;
+            final ReleaseProducerCallback releaseProducerCallback;
             if (isEndpointTransacted() && isSharedJMSSession()) {
                 Session session = exchange.getIn().getHeader(SjmsConstants.JMS_SESSION, Session.class);
                 if (session != null && session.getTransacted()) {
                     // Join existing transacted session - Synchronization must have been added
                     // by the session initiator
                     producer = doCreateProducerModel(session);
-                    releaseProducerCallback = new NOOPReleaseProducerCallback();
+                    releaseProducerCallback = new CloseProducerCallback();
                 } else {
                     // Propagate JMS session and register Synchronization as an initiator
                     producer = getProducers().borrowObject();
@@ -240,13 +242,11 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
                     if (log.isDebugEnabled()) {
                         log.debug(""  Sending message asynchronously: {}"", exchange.getIn().getBody());
                     }
-                    final MessageProducerResources finalProducer = producer;
-                    final ReleaseProducerCallback finalrpc = releaseProducerCallback;
                     getExecutor().execute(new Runnable() {
                         @Override
                         public void run() {
                             try {
-                                sendMessage(exchange, callback, finalProducer, finalrpc);
+                                sendMessage(exchange, callback, producer, releaseProducerCallback);
                             } catch (Exception e) {
                                 ObjectHelper.wrapRuntimeCamelException(e);
                             }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Aug/18 06:14;githubbot;oscerd commented on issue #2498: CAMEL-12762: close JMS producer
URL: https://github.com/apache/camel/pull/2498#issuecomment-417202093
 
 
   Thanks @fogninid 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,
java.util.ConcurrentModificationException at org.apache.camel.impl.DefaultExchange.createProperties(DefaultExchange.java:550) in 2.20.1,CAMEL-12727,13178648,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,boutblock,boutblock,13/Aug/18 17:23,27/Aug/18 11:58,13/Mar/19 22:20,27/Aug/18 11:58,2.20.0,,,,,,,,,,,,,,,2.23.0,,,,,camel-core,,,,,,0,,,,"A concurrent access exception occurs during our load tests while consuming messages from a rabbitmq queue.

The call stack embedded below shows that the issue is related to an ""optimization"" which was introduced in https://issues.apache.org/jira/browse/CAMEL-11330 to replace a ConcurrentHashMap with a regular one from version 2.19.5 to 2.20.0 onward.

The faulty code is still present in latest 2.22.0.

 

 ","Camel 2.20.1.

The exception occurs within a aggregation processor using a custom aggregation strategy and optimistic locking.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,13/Aug/18 17:16;boutblock;dih-error.queue_2 (1).txt;https://issues.apache.org/jira/secure/attachment/12935407/dih-error.queue_2+%281%29.txt,,,,1.0,,,,,,,,,,,,,,,,,,,2018-08-14 08:16:22.149,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 27 11:58:45 UTC 2018,,,,,,,0|i3wzun:,9223372036854775807,Regression,,,,,,,,,"14/Aug/18 08:16;dmvolod;[~boutblock], could you please provide a reproducer as simple as possible.",14/Aug/18 08:45;davsclaus;Optimistick locking implies concurrent access and is not always safe to be used. We may need to do a synchronization point in the aggregator at a certain point,"14/Aug/18 08:50;boutblock;Hi, 

I'm sorry this cannot be easily reproduced with a simple unit test as it only occurs under heavy workload on our perf platform of test.

The route looks like this:

from(auditQueueProperties.getAuditQueueUri()) // rabbitmq queue
 .routeId(ROUTE_NAME)
 .autoStartup(true)
 .split().method(batchUnfoldPlugin) // extract individual xml audit messages from the input batch
 .aggregate(simple(""${header."" + AUDIT_TYPE + ""}""), aggregationStrategy) // aggregate the audit messages by appending them directly into files on disk, spread by type
 .optimisticLocking() // as exclusive pessimistic locking is directly managed by the file system for each individual file instead of a less efficient global lock.
 .completionSize(stagingAreaProperties.getCompletionSize())
 .completionInterval(stagingAreaProperties.getCompletionInterval())
 // copy each completed file to another location
 .process(ex -> stagingArea.push(ex.getIn().getHeader(TRANSACTION_TYPE).toString(), ex.getIn().getHeader(AUDIT_DATA_PATH).toString(), ex.getIn().getBody()))
 .end();

The custom aggregation strategy implements CompletionAwareAggregationStrategy and TimeoutAwareAggregationStrategy to save each incoming message by appending it to the correct file by type, date etc... protected by a FileLock and retries on OverlappingFileLockException.

We are currently in the process to downgrade from our current version 2.20.1 to version 2.19.5 to validate our assumption on the issue but we are facing other incompatibility problems doing so that needs to be fixed/circumvented.","14/Aug/18 09:02;boutblock;You are certainly right as the lines of code where the exception occurs depends on tests on optimisticLocking and  aggregationRepository being in-memory (AggregateProcessor.java line 398 in 2.20.1):

// hack to support legacy AggregationStrategy's that modify and return the oldExchange, these will not
// working when using an identify based approach for optimistic locking like the MemoryAggregationRepository.
if (optimisticLocking && aggregationRepository instanceof MemoryAggregationRepository) {
 oldExchange = originalExchange.copy();
}

Please note that we did  not choose to follow the repository pattern to save each individual message to disk but we chose to directly save them in the aggregation strategy class we provided.

Actually, the default MemoryAggregationRepository is of no use in our use case and shall may be replaced by our own 'null repository' to not put pressure on the garbage collector for nothing. This may also workaround the issue as the conditional test would be false and the exchange would not be copied and would not crash.","14/Aug/18 09:48;boutblock;So. I added a custom 'NullAggregationRepository' to my route which is a copy of the original MemoryAggregationRepository to avoid the internal copy of the exchange. I will unfortunately only have a result when our perf platform is ready to upgrade.

I'll give back more information ASAP.

Note that I couldn't avoid the in-memory cache of the exchanges in the repository without breaking the internal logic of the aggregator.","15/Aug/18 12:23;davsclaus;Thanks, when you have feedback then provide it here for us","15/Aug/18 12:40;davsclaus;We could synchronize that hack
{code}
                // need to synchronize this to avoid concurrency issue
                synchronized (this) {
                    oldExchange = originalExchange.copy();
                }
{code}

We could also consider going back to ConcurrentHashMap. The implementation in newer JVMs are much better now.",22/Aug/18 14:05;davsclaus;Any feedback [~boutblock],"22/Aug/18 14:46;boutblock;No definitive results yet from our full perf platform. However, from our CI smaller stress test, after having integrated our own  aggregation repository bypassing the hack and therefore the copy, no more exception occurred for now. Which sounds good.

Now, IMHO, re-introducing the ConcurrentHashMap is the proper and safer solution. However, adding the lock within the hack only has less impacts on performances. Q: is this hack really still useful ?",27/Aug/18 09:04;davsclaus;Yeah the hack would be needed as the locking is optimistick and therefore concurrent access on the copy method. But as you say the concurrent hash map smells like the better option and it was also what was used in the past.,27/Aug/18 11:58;davsclaus;Okay going back to ConcurrentMap so its safe as it was in Camel 2.19.x and older.,,,,,,,,,,,,,,,,,,,,,,
relative references for nested xslt inclusions don't get resolved,CAMEL-12685,13174348,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,pvdbosch,pvdbosch,25/Jul/18 11:54,23/Aug/18 07:07,13/Mar/19 22:20,25/Jul/18 14:12,2.22.0,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"If an XSLT A includes XSLT B which includes XSLT C using relative references, XSLT C is resolved relative to A instead of B.

The attached PR provides a unit test and fix for the described scenario. It changes the behavior to the expected one, i.e. resolve relative references based on the location of the direct parent XSLT.

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-25 12:09:02.122,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 25 14:11:05 UTC 2018,,,,,,,0|i3w9mf:,9223372036854775807,,,,,,,,,,"25/Jul/18 12:09;githubbot;oscerd commented on issue #2440: CAMEL-12685: fix xslt nested relative refs
URL: https://github.com/apache/camel/pull/2440#issuecomment-407732596
 
 
   Yes, but in the commit message too, that way we can track the change.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Jul/18 13:38;githubbot;pvdbosch commented on issue #2440: CAMEL-12685: fix xslt nested relative refs
URL: https://github.com/apache/camel/pull/2440#issuecomment-407757090
 
 
   OK, I rebased and squashed the commits with a new commit message.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Jul/18 13:41;githubbot;oscerd commented on issue #2440: CAMEL-12685: fix xslt nested relative refs
URL: https://github.com/apache/camel/pull/2440#issuecomment-407757846
 
 
   Great thanks.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Jul/18 14:10;githubbot;oscerd closed pull request #2440: CAMEL-12685: fix xslt nested relative refs
URL: https://github.com/apache/camel/pull/2440
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java b/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java
index c7d528c8bd3..2520d7f1382 100644
--- a/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java
+++ b/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java
@@ -91,7 +91,7 @@ public Source resolve(String href, String base) throws TransformerException {
             } catch (IOException e) {
                 throw new TransformerException(e);
             }
-            return new StreamSource(is);
+            return new StreamSource(is, href);
         }
 
         // if href and location is the same, then its the initial resolve
@@ -100,8 +100,8 @@ public Source resolve(String href, String base) throws TransformerException {
             return resolve(path, base);
         }
 
-        // okay then its relative to the starting location from the XSLT component
-        String path = FileUtil.onlyPath(location);
+        // okay then its relative to the starting location from the XSLT importing this one
+        String path = FileUtil.onlyPath(base);
         if (ObjectHelper.isEmpty(path)) {
             path = baseScheme + href;
             return resolve(path, base);
diff --git a/camel-core/src/main/java/org/apache/camel/component/xslt/XsltEndpoint.java b/camel-core/src/main/java/org/apache/camel/component/xslt/XsltEndpoint.java
index c9b0a0721d8..dc1e2a80f17 100644
--- a/camel-core/src/main/java/org/apache/camel/component/xslt/XsltEndpoint.java
+++ b/camel-core/src/main/java/org/apache/camel/component/xslt/XsltEndpoint.java
@@ -416,7 +416,6 @@ protected void loadResource(String resourceUri) throws TransformerException, IOE
         if (source == null) {
             throw new IOException(""Cannot load schema resource "" + resourceUri);
         } else {
-            source.setSystemId(resourceUri);
             xslt.setTransformerSource(source);
         }
         // now loaded so clear flag
diff --git a/camel-core/src/test/java/org/apache/camel/component/xslt/XsltIncludeRelativeNestedTest.java b/camel-core/src/test/java/org/apache/camel/component/xslt/XsltIncludeRelativeNestedTest.java
new file mode 100644
index 00000000000..2b9d53ee8b3
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/component/xslt/XsltIncludeRelativeNestedTest.java
@@ -0,0 +1,46 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.xslt;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+
+/**
+ *
+ */
+public class XsltIncludeRelativeNestedTest extends ContextTestSupport {
+
+    public void testXsltIncludeRelativeNested() throws Exception {
+        MockEndpoint mock = getMockEndpoint(""mock:result"");
+        mock.expectedMessageCount(1);
+        assertMockEndpointsSatisfied();
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""file:src/test/data/?fileName=staff.xml&noop=true&initialDelay=0&delay=10"")
+                    .to(""xslt:org/apache/camel/component/xslt/staff_include_relative_nested.xsl"")
+                    .to(""log:foo"")
+                    .to(""mock:result"");
+            }
+        };
+    }
+}
diff --git a/camel-core/src/test/resources/org/apache/camel/component/xslt/included/staff_included_nested_level_1.xsl b/camel-core/src/test/resources/org/apache/camel/component/xslt/included/staff_included_nested_level_1.xsl
new file mode 100644
index 00000000000..ae635a206f8
--- /dev/null
+++ b/camel-core/src/test/resources/org/apache/camel/component/xslt/included/staff_included_nested_level_1.xsl
@@ -0,0 +1,41 @@
+<?xml version=""1.0""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+
+    <xsl:include href=""../staff_included_nested_level_2.xsl"" />
+
+    <xsl:template match=""staff/programmer"">
+        <html>
+            <body>
+                <xsl:apply-templates select=""age""/>
+                <br/>
+            </body>
+        </html>
+    </xsl:template>
+
+    <xsl:template match=""age"">
+        AGE:
+        <span style=""color:yellow;"">
+            <xsl:value-of select="".""/>
+        </span>
+        <br/>
+    </xsl:template>
+
+</xsl:stylesheet>
\ No newline at end of file
diff --git a/camel-core/src/test/resources/org/apache/camel/component/xslt/staff_include_relative_nested.xsl b/camel-core/src/test/resources/org/apache/camel/component/xslt/staff_include_relative_nested.xsl
new file mode 100644
index 00000000000..cba77400d6f
--- /dev/null
+++ b/camel-core/src/test/resources/org/apache/camel/component/xslt/staff_include_relative_nested.xsl
@@ -0,0 +1,33 @@
+<?xml version=""1.0""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+
+    <xsl:include href=""included/staff_included_nested_level_1.xsl""/>
+
+    <xsl:template match=""staff/programmer"" priority=""2"">
+        <html>
+            <body>
+                <xsl:apply-templates select=""age""/>
+                <br/>
+            </body>
+        </html>
+    </xsl:template>
+
+</xsl:stylesheet>
\ No newline at end of file
diff --git a/camel-core/src/test/resources/org/apache/camel/component/xslt/staff_included_nested_level_2.xsl b/camel-core/src/test/resources/org/apache/camel/component/xslt/staff_included_nested_level_2.xsl
new file mode 100644
index 00000000000..8ec82a37c49
--- /dev/null
+++ b/camel-core/src/test/resources/org/apache/camel/component/xslt/staff_included_nested_level_2.xsl
@@ -0,0 +1,26 @@
+<?xml version = ""1.0""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
+
+  <xsl:template match=""hello"">
+    <goodbye/>
+  </xsl:template>
+
+</xsl:stylesheet>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Jul/18 14:10;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2440
","25/Jul/18 14:11;githubbot;oscerd commented on issue #2440: CAMEL-12685: fix xslt nested relative refs
URL: https://github.com/apache/camel/pull/2440#issuecomment-407767997
 
 
   Thanks. Merged on master.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,
SjmsMessage should set Exchange in copyFrom,CAMEL-12741,13179920,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,20/Aug/18 09:46,22/Aug/18 21:57,13/Mar/19 22:20,22/Aug/18 10:25,,,,,,,,,,,,,,,,2.23.0,,,,,camel-sjms,,,,,,0,,,,When a copy of the {{SjmsMessage}} is created using {{copyFrom(Message)}} the resulting message copy doesn't have the {{Exchange}} set. This prevents the use of {{TypeConverter}} when {{Message:getBody(Class)}} is invoked.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-20 09:59:26.158,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 22 21:57:24 UTC 2018,,,,,,,0|i3x7on:,9223372036854775807,,,,,,,,,,"20/Aug/18 09:51;zregvart;[~davsclaus] I need some help here, it's easy to set the {{Exchange}} in {{SjmsMessage::copyFrom(Message)}}, I'm not sure if this is the right thing to do. Perhaps we should support type conversion in {{Message:getBody(Class, Object)}} if no {{Exchange}} is set on the message and {{CamelContext}} is set i.e. perform type conversion without exchange.","20/Aug/18 09:59;githubbot;zregvart opened a new pull request #2483: CAMEL-12741: type conversion with SjmsMessage
URL: https://github.com/apache/camel/pull/2483
 
 
   If we don't copy Exchange in `SjmsMessage::copyFrom` then type conversion doesn't work.
   
   I'm not sure what approach to take for resolving [CAMEL-12741](https://issues.apache.org/jira/browse/CAMEL-12741). 
   
   I've created two commits with two options that could help here, not sure what option (or both?) should we implement.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Aug/18 09:59;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/2483

    CAMEL-12741: type conversion with SjmsMessage

    If we don't copy Exchange in `SjmsMessage::copyFrom` then type conversion doesn't work.
    
    I'm not sure what approach to take for resolving [CAMEL-12741](https://issues.apache.org/jira/browse/CAMEL-12741). 
    
    I've created two commits with two options that could help here, not sure what option (or both?) should we implement.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-12741

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2483.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2483
    
----
commit 8731e90d2ac680a40b90bb21406b688e95c8e5bd
Author: Zoran Regvart <zregvart@...>
Date:   2018-08-20T09:55:18Z

    Option A: set the Exchange of the original message

commit 6ac7c7b3cc4020f17a939d79d86b57d8abcde189
Author: Zoran Regvart <zregvart@...>
Date:   2018-08-20T09:55:39Z

    Option B: support type conversion without Exchange

----
","20/Aug/18 11:16;davsclaus;Do you have an use-case where this happens?

Usually the exchange is set in the configureMessage method in DefaultExchange, so just wonder when you have this situation. We have a few other components that has special message like camel-jms, camel-mail (AFAIR) and a few others, and haven't heard of any issues before.

","20/Aug/18 11:45;zregvart;In Syndesis to help Atlasmap access messages from all processors along the route we create a copy of the Message and store it in a Exchange property. I've workaround it in [Syndesis PR#3406|https://github.com/syndesisio/syndesis/pull/3406] to set the Exchange from the original message if not set, I wonder if this should be done always? I see several places where copy of the message is created via {{copyFrom}} (via {{grep -B 4 -A 4 -r --include='*.java' copyFrom}}), not sure if for all of those the copied message has {{Exchange}} set.","20/Aug/18 13:08;davsclaus;Ah okay, yeah it should potentially have copied over the exchange from the beginning, but we had this behaviour in Camel since its creation. And the EIPs that create sub exchanges are using copy on exchange instead of message etc, so its likely not been an issue at all before this special use-case from atlastmap.

And yeah we could try to fix this in all those copyFrom methods on classes extending DefaultMessage and set the exchange as well, and on its base class too. They dont call super.copyFrom so we need to do it in both places.","20/Aug/18 16:07;davsclaus;Okay so its 4 components and camel-core that needs an adjustment

- camel-core
- camel-jms
- camel-sjms
- camel-mail
- camel-spring-integration",20/Aug/18 16:07;davsclaus;Working on an attempt fix and giving a test of those modules before doing a PR.,"20/Aug/18 17:03;githubbot;davsclaus opened a new pull request #2488: CAMEL-12741: The copy method on Message should by default set the exc…
URL: https://github.com/apache/camel/pull/2488
 
 
   …hange on the copied message to the same instance as from the source. If the copied message is re-attached to another exchange it will reset the exchange anyway.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Aug/18 17:03;githubbot;GitHub user davsclaus opened a pull request:

    https://github.com/apache/camel/pull/2488

    CAMEL-12741: The copy method on Message should by default set the exc…

    …hange on the copied message to the same instance as from the source. If the copied message is re-attached to another exchange it will reset the exchange anyway.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-12741

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2488.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2488
    
----
commit fe75c444740fe48361c93decfe10ec508d95d566
Author: Claus Ibsen <claus.ibsen@...>
Date:   2018-08-20T17:02:40Z

    CAMEL-12741: The copy method on Message should by default set the exchange on the copied message to the same instance as from the source. If the copied message is re-attached to another exchange it will reset the exchange anyway.

----
","20/Aug/18 17:03;davsclaus;A PR with a proposed implementation
https://github.com/apache/camel/pull/2488","21/Aug/18 13:34;githubbot;davsclaus commented on issue #2488: CAMEL-12741: The copy method on Message should by default set the exc…
URL: https://github.com/apache/camel/pull/2488#issuecomment-414675545
 
 
   @zregvart here is a extended PR for this problem, you are welcome to take a look

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Aug/18 06:49;githubbot;davsclaus commented on issue #2483: CAMEL-12741: type conversion with SjmsMessage
URL: https://github.com/apache/camel/pull/2483#issuecomment-414929703
 
 
   This PR has more fixes than these here.
   https://github.com/apache/camel/pull/2488
   
   @zregvart could you take a quick look at that

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Aug/18 07:23;githubbot;zregvart commented on issue #2483: CAMEL-12741: type conversion with SjmsMessage
URL: https://github.com/apache/camel/pull/2483#issuecomment-414937362
 
 
   Closed in favour of #2488

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Aug/18 07:23;githubbot;zregvart closed pull request #2483: CAMEL-12741: type conversion with SjmsMessage
URL: https://github.com/apache/camel/pull/2483
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java b/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java
index a2ae7e73a2a..3307c145820 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java
@@ -94,6 +94,18 @@ public Object getMandatoryBody() throws InvalidPayloadException {
             if (answer != null) {
                 return answer;
             }
+        } else if (camelContext != null) {
+            TypeConverter converter = camelContext.getTypeConverter();
+
+            T answer = converter.convertTo(type, body);
+            if (answer != null) {
+                return answer;
+            }
+
+            answer = converter.tryConvertTo(type, this);
+            if (answer != null) {
+                return answer;
+            }
         }
 
         // not possible to convert
diff --git a/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsMessage.java b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsMessage.java
index d3520346ccb..bdac87e6326 100644
--- a/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsMessage.java
+++ b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsMessage.java
@@ -101,6 +101,8 @@ public void copyFrom(org.apache.camel.Message that) {
         if (that.hasAttachments()) {
             getAttachmentObjects().putAll(that.getAttachmentObjects());
         }
+
+        setExchange(that.getExchange());
     }
 
     public JmsBinding getBinding() {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Aug/18 07:23;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/2483
","22/Aug/18 10:25;githubbot;davsclaus closed pull request #2488: CAMEL-12741: The copy method on Message should by default set the exc…
URL: https://github.com/apache/camel/pull/2488
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Aug/18 10:25;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2488
",22/Aug/18 21:57;zregvart;Thanks!,,,,,,,,,,,,,,
Configured SSL Context on Undertow component not honored by camel-rest-swagger,CAMEL-12728,13178744,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,chirino,chirino,14/Aug/18 01:30,22/Aug/18 12:30,13/Mar/19 22:20,22/Aug/18 11:06,2.22.0,,,,,,,,,,,,,,,2.23.0,,,,,camel-rest-swagger,,,,,,0,,,,"Say you have:
{code:java}
    <camel:sslContextParameters id=""sslContextParameters"">
        <camel:trustManagers>
            <camel:keyStore password=""redhat123"" type=""JKS"" ... />
        </camel:trustManagers>
    </camel:sslContextParameters>

.. and ..

    <bean id=""myundertow"" class=""org.apache.camel.component.undertow.UndertowComponent"">
        <property name=""sslContextParameters"" value=""#{sslContextParameters}""/>
    </bean>


.. and ..

    <to id=""_to1"" pattern=""InOut"" uri=""rest-swagger:swagger.json#getMembersList?basePath=/membersweb/rest/v2&amp;componentName=myundertow&amp;host=https://myapp.demolab.local:443”/>{code}

It will fail with

{code}
java.io.IOException: UT000065: SSL must be specified to connect to a https URL
	at io.undertow.client.http.HttpClientProvider.connect(HttpClientProvider.java:72)
	at io.undertow.client.http.HttpClientProvider.connect(HttpClientProvider.java:60)
	at io.undertow.client.UndertowClient.connect(UndertowClient.java:133)
	at org.apache.camel.component.undertow.UndertowProducer.process(UndertowProducer.java:165)
	at org.apache.camel.component.rest.RestProducer.process(RestProducer.java:86)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:197)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:79)
	at java.util.TimerThread.mainLoop(Timer.java:555)
	at java.util.TimerThread.run(Timer.java:505)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-14 05:50:36.717,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 22 12:30:44 UTC 2018,,,,,,,0|i3x0fz:,9223372036854775807,,,,,,,,,,"14/Aug/18 01:31;chirino;I took a peek and this seems smelly:
https://github.com/apache/camel/blob/master/components/camel-rest-swagger/src/main/java/org/apache/camel/component/rest/swagger/RestSwaggerEndpoint.java#L282
 
We create the endpoint and configure it there (skip starting the endpoint) and then create a Producer.  The configured SSLContext is created in the UndertowEndpoint doStart method:
 
https://github.com/apache/camel/blob/master/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowEndpoint.java#L393
 ",14/Aug/18 05:50;zregvart;I can take a look at this one.,"15/Aug/18 14:03;zregvart;[~chirino] naah, Undertow component implements the {{org.apache.camel.spi.RestProducerFactory}} contract, so it needs and does start the UndertowEndpoint in {{UndertowComponent::createProducer}}. I'll work on a test to see if this is something that we need to address in the {{camel-rest-swagger} or in {{camel-undertow}}.","22/Aug/18 11:06;zregvart;Addressed this in three ways: added Camel's standard SSLContextParameters and useGlobalSSLContextParameters properties to {{camel-rest-swagger}}, modified supported delegate components to support SSLContextParameters where lacking, made sure that the configured properties on {{camel-rest-swagger}} are passed to the delegate component in case the component will be created as a side effect of the endpoint being created.

We now have tests that assert both globally configured and per component provided configurations.",22/Aug/18 12:30;chirino;Fantastic! Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Temporary reply queues being created with main endpoint autoAck setting,CAMEL-12746,13180237,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Andersons,Andersons,21/Aug/18 15:49,22/Aug/18 10:28,13/Mar/19 22:20,22/Aug/18 10:28,2.20.2,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-rabbitmq,,,,,,0,rabbitmq,,,"As discussed here:

[http://camel.465427.n5.nabble.com/Camel-with-Rabbitmq-messages-in-temp-reply-queue-not-being-acked-td5822286.html]

When temporary reply queues are used on InOut capable routes with autoAck set to false on the main queue(s) the reply messages keep piling up in the temporary queue in an un-acked state until a consumer restart.

This can be prevented with a change to the TemporaryQueueReplyManager line 139 to always start the consumer of temprary queues with auto acknowledge mode of true.

Changing this:

    private void start() throws IOException {
        tag = channel.basicConsume(getReplyTo(), endpoint.isAutoAck(), this);
    }

To:

    private void start() throws IOException {
        tag = channel.basicConsume(getReplyTo(), *true*, this);
    }

 ",,,,,,,,,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-22 07:19:11.802,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 22 10:28:41 UTC 2018,,,,,,,0|i3x9mf:,9223372036854775807,,,,,,,,,,"22/Aug/18 07:19;davsclaus;Valdis, is working on a patch via a github PR

You can read here how to contribute
https://github.com/apache/camel/blob/master/CONTRIBUTING.md","22/Aug/18 08:55;githubbot;valdisa opened a new pull request #2490: Fix for CAMEL-12746 (temp reply queue autoAck)
URL: https://github.com/apache/camel/pull/2490
 
 
   https://issues.apache.org/jira/browse/CAMEL-12746
   
   This is a fix for the above issue of temporary reply queues getting stale un-acked messages. The fix ensures that temp reply queues will be always created with the autoAck setting set to true.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Aug/18 08:55;githubbot;GitHub user valdisa opened a pull request:

    https://github.com/apache/camel/pull/2490

    Fix for CAMEL-12746 (temp reply queue autoAck)

    https://issues.apache.org/jira/browse/CAMEL-12746
    
    This is a fix for the above issue of temporary reply queues getting stale un-acked messages. The fix ensures that temp reply queues will be always created with the autoAck setting set to true.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/valdisa/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2490.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2490
    
----
commit 2970725878cae1f1c149ccda49bd17cf3a99ae12
Author: valdisa <valdis.andersons@...>
Date:   2018-08-22T08:37:25Z

    Update TemporaryQueueReplyManager.java

commit 7a505fe2ff381339f5e691ba21f1d132b1025f3a
Author: valdisa <valdis.andersons@...>
Date:   2018-08-22T08:51:36Z

    Merge pull request #1 from valdisa/CAMEL-12746
    
    Update TemporaryQueueReplyManager.java

----
","22/Aug/18 10:26;githubbot;davsclaus closed pull request #2490: Fix for CAMEL-12746 (temp reply queue autoAck)
URL: https://github.com/apache/camel/pull/2490
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/TemporaryQueueReplyManager.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/TemporaryQueueReplyManager.java
index 842d43e1df7..760cc47455f 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/TemporaryQueueReplyManager.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/TemporaryQueueReplyManager.java
@@ -136,7 +136,7 @@ public void handleDelivery(String consumerTag, Envelope envelope,
          * Bind consumer to channel
          */
         private void start() throws IOException {
-            tag = channel.basicConsume(getReplyTo(), endpoint.isAutoAck(), this);
+            tag = channel.basicConsume(getReplyTo(), true, this);
         }
 
         /**


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Aug/18 10:26;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2490
",22/Aug/18 10:28;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet when used as client doesn't use the configured SSL properties,CAMEL-12744,13180207,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,21/Aug/18 13:07,22/Aug/18 09:01,13/Mar/19 22:20,22/Aug/18 09:01,,,,,,,,,,,,,,,,2.23.0,,,,,camel-restlet,,,,,,0,,,,We're missing configuration options needed for the Restlet client to use the configured SSL properties.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-22 07:19:52.822,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 22 07:19:52 UTC 2018,,,,,,,0|i3x9fr:,9223372036854775807,,,,,,,,,,"22/Aug/18 07:19;davsclaus;Is this implemented, if so this ticket can ber resolved",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in APT IOHelper,CAMEL-12745,13180215,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,21/Aug/18 13:48,21/Aug/18 13:48,13/Mar/19 22:20,21/Aug/18 13:48,,,,,,,,,,,,,,,,2.23.0,,,,,tooling,,,,,,0,,,,Seems that some use cases pass {{null}} to {{IOHelper::close}}.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-08-21 13:48:19.0,,,,,,,0|i3x9hj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Olingo4Component creates and ignores HttpAsyncClientBuilder,CAMEL-12740,13179585,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ninckblokje,ninckblokje,17/Aug/18 13:27,20/Aug/18 18:48,13/Mar/19 22:20,20/Aug/18 17:27,2.22.0,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-olingo2,camel-olingo4,,,,,0,,,,"The Olingo4Component will create an instance of HttpAsyncClientBuilder is the provided Olingo4Configuration does not contain one. The new instance of HttpAsyncClientBuilder will be configured with timeout settings, proxy and SSL, but will never be used.

Extract from Olingo4Component.createOlingo4App:
{code:java}
Object clientBuilder = configuration.getHttpAsyncClientBuilder();
if (clientBuilder == null) {
    HttpAsyncClientBuilder asyncClientBuilder = HttpAsyncClientBuilder.create();
    Builder requestConfigBuilder = RequestConfig.custom();
    requestConfigBuilder.setConnectTimeout(configuration.getConnectTimeout());
    requestConfigBuilder.setSocketTimeout(configuration.getSocketTimeout());
    HttpHost proxy = configuration.getProxy();
    if (proxy != null) {
        requestConfigBuilder.setProxy(proxy);
    }

    asyncClientBuilder.setDefaultRequestConfig(requestConfigBuilder.build());
    SSLContextParameters sslContextParameters = configuration.getSslContextParameters();
    if (sslContextParameters == null) {
        sslContextParameters = this.retrieveGlobalSslContextParameters();
    }

    if (sslContextParameters == null) {
        sslContextParameters = new SSLContextParameters();
    }

    try {
        asyncClientBuilder.setSSLContext(sslContextParameters.createSSLContext(this.getCamelContext()));
    } catch (GeneralSecurityException var8) {
        throw ObjectHelper.wrapRuntimeCamelException(var8);
    } catch (IOException var9) {
        throw ObjectHelper.wrapRuntimeCamelException(var9);
    }
}

Olingo4AppImpl olingo4App;
if (clientBuilder != null && !(clientBuilder instanceof HttpAsyncClientBuilder)) {
    olingo4App = new Olingo4AppImpl(configuration.getServiceUri(), (HttpClientBuilder)clientBuilder);
} else {
    olingo4App = new Olingo4AppImpl(configuration.getServiceUri(), (HttpAsyncClientBuilder)clientBuilder);
}
{code}
The class Olingo4AppImpl gets a null clientBuilder reference and then instantiates its own:
{code:java}
public Olingo4AppImpl(String serviceUri, HttpAsyncClientBuilder builder) {
    this.odataClient = ODataClientFactory.getClient();
    this.odataReader = this.odataClient.getReader();
    this.odataWriter = this.odataClient.getWriter();
    this.setServiceUri(serviceUri);
    CloseableHttpAsyncClient asyncClient;
    if (builder == null) {
        asyncClient = HttpAsyncClients.createDefault();
    } else {
        asyncClient = builder.build();
    }

    asyncClient.start();
    this.client = asyncClient;
    this.contentType = DEFAULT_CONTENT_TYPE;
}
{code}
Because of this, none of the Olingo4Configuration settings are used and for example connect and socket timeout defaults to -1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-17 13:40:59.512,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 20 18:48:36 UTC 2018,,,,,,,0|i3x5mf:,9223372036854775807,,,,,,,,,,17/Aug/18 13:27;ninckblokje;I am working on a pull request for this issue.,"17/Aug/18 13:40;dmvolod;Thanks [~ninckblokje], the camel-olingo2 component need to be fixed too.","20/Aug/18 14:45;githubbot;ninckblokje opened a new pull request #2487: CAMEL-12740: HttpAsyncClientBuilder is now used when no ClientBuilder…
URL: https://github.com/apache/camel/pull/2487
 
 
   I have changed the Olingo2 and Olingo4 components do use the created HttpAsyncClientBuilder when no builder is specified. In the previous scenario the created HttpAsyncClientBuilder was ignored.
   
   See CAMEL-12740

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Aug/18 14:45;githubbot;GitHub user ninckblokje opened a pull request:

    https://github.com/apache/camel/pull/2487

    CAMEL-12740: HttpAsyncClientBuilder is now used when no ClientBuilder…

    I have changed the Olingo2 and Olingo4 components do use the created HttpAsyncClientBuilder when no builder is specified. In the previous scenario the created HttpAsyncClientBuilder was ignored.
    
    See CAMEL-12740

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ninckblokje/camel CAMEL-12740

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2487.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2487
    
----
commit 602ba1c50a997b9bad7375a673b36a4fab8dbb4e
Author: ninckblokje <jeroen.ninckblok@...>
Date:   2018-08-19T16:09:21Z

    CAMEL-12740: HttpAsyncClientBuilder is now used when no ClientBuilder is specified

----
","20/Aug/18 17:23;githubbot;davsclaus closed pull request #2487: CAMEL-12740: HttpAsyncClientBuilder is now used when no ClientBuilder…
URL: https://github.com/apache/camel/pull/2487
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Component.java b/components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Component.java
index 4e7973df754..77b9864b078 100644
--- a/components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Component.java
+++ b/components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Component.java
@@ -176,6 +176,8 @@ private Olingo2AppWrapper createOlingo2App(Olingo2Configuration configuration) {
             } catch (IOException e) {
                 throw ObjectHelper.wrapRuntimeCamelException(e);
             }
+
+            clientBuilder = asyncClientBuilder;
         }
 
         Olingo2AppImpl olingo2App;
diff --git a/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Component.java b/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Component.java
index 0f17d73ed71..b6a7b442408 100644
--- a/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Component.java
+++ b/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Component.java
@@ -162,6 +162,8 @@ private Olingo4AppWrapper createOlingo4App(Olingo4Configuration configuration) {
             } catch (IOException e) {
                 throw ObjectHelper.wrapRuntimeCamelException(e);
             }
+
+            clientBuilder = asyncClientBuilder;
         }
 
         Olingo4AppImpl olingo4App;


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Aug/18 17:23;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2487
",20/Aug/18 17:27;davsclaus;Thanks for reporting and the PR,20/Aug/18 18:48;ninckblokje;Thank you for accepting the PR :),,,,,,,,,,,,,,,,,,,,,,,,,
UseOriginalAggregationStrategy in outer loops,CAMEL-12709,13176707,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Matthi,Matthi,03/Aug/18 13:26,20/Aug/18 07:26,13/Mar/19 22:20,07/Aug/18 13:41,2.21.2,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"Using splitters with the UseOriginalAggregationStrategy +in a loop+ causes the splitter to return always the same original exchange.

 
{code:java}
// my code is similar to the following one:
from(""direct:myLoop"")
  .loop(simple(""{{export.maxLoopsPerRun}}""))
    .setHeader(...) // changing header fields
    .split(body(), new UseOriginalAggregationStrategy(null, false))
      .to(""direct:handleRecord"")
    .end()
    .log(""${in.headers}"") // the headers of the exchange of the very first loop iteration
  .end()
{code}
Reason: Once the original exchange is set by UseOriginalAggregationStrategy#setOriginal(Exchange), it is not updated any more for loop iterations > 1.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-06 21:03:28.059,,,no_permission,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 20 07:26:50 UTC 2018,,,,,,,0|i3wnvj:,9223372036854775807,,,,,,,,,,"06/Aug/18 21:03;onders;i think this is on purpose. what loop-eip and split-eip with UseOriginalAggregationStrategy do it is right with the route definition you have given. i think this is not a bug, this is your routing design issue.","07/Aug/18 13:37;davsclaus;Thanks for reporting. There is an issue with concurrency as the strategy can be shared on the splitter with multiple exchanges and that is not good.

The original that is being set would be set as the same instance. I am not sure what you do in your use-case that would set a clone of the exchange as Camel routes the same exchange instance for its lifecycle.

But the concurrency issue should be fixed.",14/Aug/18 14:41;Matthi;Thank you for the fix (my use case should now work too according to the new code on gitlab).,"16/Aug/18 09:36;Matthi;Hi

Do you already know when the bug fix release is planned?

Thanks, Matthias","16/Aug/18 13:36;davsclaus;In Q3 2018. The next expected patch release is 2.22.1, and then some times later 2.21.3 or a 2.22.2 which ones come first.","17/Aug/18 09:08;folschewski;I think you missed the ShareUnitOfWorkAggregationStrategy in your fix.

it should be like this:
{code:java}
AggregationStrategy strategy = getAggregationStrategy();

if (strategy == null) {
    AggregationStrategy original = new UseOriginalAggregationStrategy(exchange, true);
    if (isShareUnitOfWork()) {
        original = new ShareUnitOfWorkAggregationStrategy(original);
    }
    setAggregationStrategyOnExchange(exchange, original);
} else {
    if (DelegateAggregationStrategy.class.isAssignableFrom(strategy)) {
       strategy = ((DelegateAggregationStrategy) strategy).getDelegate();
    }
    if (UseOriginalAggregationStrategy.class.isAssignableFrom(strategy)) {
        UseOriginalAggregationStrategy original = (UseOriginalAggregationStrategy) strategy;
        AggregationStrategy clone = original.newInstance(exchange);
        if (isShareUnitOfWork()) {
            clone = new ShareUnitOfWorkAggregationStrategy(clone);
        }
        setAggregationStrategyOnExchange(exchange, clone);
    }
}
return super.process(exchange, callback);
{code}","17/Aug/18 10:41;davsclaus;Thanks Frank, would you be able to provide a PR on github with this fix?",17/Aug/18 11:45;folschewski;Unfortunately not. I'm not deeply enough involved in Camel to contribute.,20/Aug/18 07:26;davsclaus;Thanks I have updated the code a bit,,,,,,,,,,,,,,,,,,,,,,,,
TypeConverters are not registered to all contexts,CAMEL-12739,13179534,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fogninid,fogninid,17/Aug/18 08:31,17/Aug/18 09:14,13/Mar/19 22:20,17/Aug/18 09:14,,,,,,,,,,,,,,,,2.23.0,,,,,camel-cdi,,,,,,0,,,,"When using multiple Camel contexts in CDI, auto-discovered TypeConverters are registered only to the first encoutered context.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-17 08:38:26.268,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 17 09:14:30 UTC 2018,,,Patch Available,,,,0|i3x5b3:,9223372036854775807,,,,,,,,,,"17/Aug/18 08:38;githubbot;fogninid opened a new pull request #2480: CAMEL-12739: fix camel-cdi multi context type converter registration
URL: https://github.com/apache/camel/pull/2480
 
 
   while loading discovered type converters into the camel context a single instance of `CdiTypeConverterLoader` was used for all context, but the it only loads classes the first time and then caches the results.
   Changed to use one loader per context

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Aug/18 08:38;githubbot;GitHub user fogninid opened a pull request:

    https://github.com/apache/camel/pull/2480

    CAMEL-12739: fix camel-cdi multi context type converter registration

    while loading discovered type converters into the camel context a single instance of `CdiTypeConverterLoader` was used for all context, but the it only loads classes the first time and then caches the results.
    Changed to use one loader per context

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fogninid/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2480.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2480
    
----
commit 89ee831e6bf81f37a9ceb31fe1b872f30e7a0b6e
Author: Daniele Fognini <daniele.fognini@...>
Date:   2018-08-17T07:21:55Z

    CAMEL-12739: fix camel-cdi multi context type converter registration

----
","17/Aug/18 09:14;githubbot;davsclaus closed pull request #2480: CAMEL-12739: fix camel-cdi multi context type converter registration
URL: https://github.com/apache/camel/pull/2480
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiCamelExtension.java b/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiCamelExtension.java
index 1de2d725bb7..e4e4c845a08 100644
--- a/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiCamelExtension.java
+++ b/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiCamelExtension.java
@@ -379,9 +379,9 @@ private void afterDeploymentValidation(@Observes AfterDeploymentValidation adv,
         }
 
         // Add type converters to Camel contexts
-        CdiTypeConverterLoader loader = new CdiTypeConverterLoader();
-        for (Class<?> converter : converters) {
-            for (CamelContext context : contexts) {
+        for (CamelContext context : contexts) {
+            CdiTypeConverterLoader loader = new CdiTypeConverterLoader();
+            for (Class<?> converter : converters) {
                 loader.loadConverterMethods(context.getTypeConverterRegistry(), converter);
             }
         }
diff --git a/components/camel-cdi/src/test/java/org/apache/camel/cdi/bean/FirstCamelContextConvertingRoute.java b/components/camel-cdi/src/test/java/org/apache/camel/cdi/bean/FirstCamelContextConvertingRoute.java
new file mode 100644
index 00000000000..a0feffcf820
--- /dev/null
+++ b/components/camel-cdi/src/test/java/org/apache/camel/cdi/bean/FirstCamelContextConvertingRoute.java
@@ -0,0 +1,33 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.cdi.bean;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.cdi.ContextName;
+import org.apache.camel.cdi.pojo.TypeConverterOutput;
+
+@ContextName(""first"")
+public class FirstCamelContextConvertingRoute extends RouteBuilder {
+
+    @Override
+    public void configure() {
+        from(""direct:inbound"")
+                .setHeader(""context"").constant(""first"")
+                .convertBodyTo(TypeConverterOutput.class)
+                .to(""mock:outbound"");
+    }
+}
diff --git a/components/camel-cdi/src/test/java/org/apache/camel/cdi/bean/SecondCamelContextConvertingRoute.java b/components/camel-cdi/src/test/java/org/apache/camel/cdi/bean/SecondCamelContextConvertingRoute.java
new file mode 100644
index 00000000000..4bb9bcc0170
--- /dev/null
+++ b/components/camel-cdi/src/test/java/org/apache/camel/cdi/bean/SecondCamelContextConvertingRoute.java
@@ -0,0 +1,33 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.cdi.bean;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.cdi.ContextName;
+import org.apache.camel.cdi.pojo.TypeConverterOutput;
+
+@ContextName(""second"")
+public class SecondCamelContextConvertingRoute extends RouteBuilder {
+
+    @Override
+    public void configure() {
+        from(""direct:inbound"")
+                .setHeader(""context"").constant(""second"")
+                .convertBodyTo(TypeConverterOutput.class)
+                .to(""mock:outbound"");
+    }
+}
diff --git a/components/camel-cdi/src/test/java/org/apache/camel/cdi/test/InjectedTypeConverterMultipleContextsTest.java b/components/camel-cdi/src/test/java/org/apache/camel/cdi/test/InjectedTypeConverterMultipleContextsTest.java
new file mode 100644
index 00000000000..c45770fd500
--- /dev/null
+++ b/components/camel-cdi/src/test/java/org/apache/camel/cdi/test/InjectedTypeConverterMultipleContextsTest.java
@@ -0,0 +1,120 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.cdi.test;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.Converter;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.cdi.CdiCamelExtension;
+import org.apache.camel.cdi.ContextName;
+import org.apache.camel.cdi.Uri;
+import org.apache.camel.cdi.bean.FirstCamelContextConvertingRoute;
+import org.apache.camel.cdi.bean.SecondCamelContextConvertingRoute;
+import org.apache.camel.cdi.pojo.TypeConverterInput;
+import org.apache.camel.cdi.pojo.TypeConverterOutput;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.impl.DefaultCamelContext;
+import org.jboss.arquillian.container.test.api.Deployment;
+import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.shrinkwrap.api.Archive;
+import org.jboss.shrinkwrap.api.ShrinkWrap;
+import org.jboss.shrinkwrap.api.asset.EmptyAsset;
+import org.jboss.shrinkwrap.api.spec.JavaArchive;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import javax.enterprise.context.ApplicationScoped;
+import javax.enterprise.inject.Produces;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.camel.cdi.expression.ExchangeExpression.fromCamelContext;
+import static org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied;
+import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+
+@RunWith(Arquillian.class)
+public class InjectedTypeConverterMultipleContextsTest {
+
+    @Deployment
+    public static Archive<?> deployment() {
+        return ShrinkWrap.create(JavaArchive.class)
+                // Camel CDI
+                .addPackage(CdiCamelExtension.class.getPackage())
+                // Test class
+                .addClass(FirstCamelContextConvertingRoute.class)
+                .addClass(SecondCamelContextConvertingRoute.class)
+                // Type converter
+                .addClass(InjectedTypeConverter.class)
+                // No need as Camel CDI automatically registers the type converter bean
+                //.addAsManifestResource(new StringAsset(""org.apache.camel.cdi.se.converter""), ArchivePaths.create(""services/org/apache/camel/TypeConverter""))
+                // Bean archive deployment descriptor
+                .addAsManifestResource(EmptyAsset.INSTANCE, ""beans.xml"");
+    }
+
+    @Produces
+    @ContextName(""first"")
+    @ApplicationScoped
+    public CamelContext camelContextFoo() {
+        return new DefaultCamelContext();
+    }
+
+    @Produces
+    @ContextName(""second"")
+    @ApplicationScoped
+    public CamelContext camelContextBar() {
+        return new DefaultCamelContext();
+    }
+
+    @Test
+    public void sendMessageToInboundFirst(@ContextName(""first"") @Uri(""direct:inbound"") ProducerTemplate inbound,
+                                          @ContextName(""first"") @Uri(""mock:outbound"") MockEndpoint outbound) throws InterruptedException {
+        _sendMessageToInbound(inbound, outbound, ""first"");
+    }
+
+    @Test
+    public void sendMessageToInboundSecond(@ContextName(""second"") @Uri(""direct:inbound"") ProducerTemplate inbound,
+                                           @ContextName(""second"") @Uri(""mock:outbound"") MockEndpoint outbound) throws InterruptedException {
+        _sendMessageToInbound(inbound, outbound, ""second"");
+    }
+
+
+    private void _sendMessageToInbound(ProducerTemplate inbound, MockEndpoint outbound, String contextName) throws InterruptedException {
+        outbound.expectedMessageCount(1);
+        outbound.message(0).exchange().matches(fromCamelContext(contextName));
+
+        TypeConverterInput input = new TypeConverterInput();
+        input.setProperty(""test"");
+
+        inbound.sendBody(input);
+
+        assertIsSatisfied(2L, TimeUnit.SECONDS, outbound);
+        assertThat(outbound.getExchanges().get(0).getIn().getBody(TypeConverterOutput.class).getProperty(), is(equalTo(""test"")));
+    }
+
+    @Converter
+    public static final class InjectedTypeConverter {
+        @Converter
+        public TypeConverterOutput convert(TypeConverterInput input) throws Exception {
+            TypeConverterOutput output = new TypeConverterOutput();
+            output.setProperty(input.getProperty());
+            return output;
+        }
+    }
+
+}
+


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Aug/18 09:14;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2480
",17/Aug/18 09:14;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kafka component commits the offset as soon as it is retrieved,CAMEL-12525,13160708,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Chandwani,Chandwani,21/May/18 14:16,17/Aug/18 07:29,13/Mar/19 22:20,17/Aug/18 07:29,2.21.0,,,,,,,,,,,,,,,2.22.1,2.23.0,,,,camel-kafka,,,,,,0,,,,"I am trying the maual commit from consumer below is the code snippet, i want to consume and  commit the message after 2 mins of its arrival in the topic. My consumer retrieves and checks the time difference if it is above 2 mins then it should commit. But message once retrieved and not committed manually. I am expecting it to come back but it does not comeback ever.  when i try creating kafka consumer it works fine

public void configure() throws Exception {
from(""kafka:BENEFITSLOADER.LOAD?brokers=xxxx:9092,xxxx:9092,xxxx:9092&groupId=BENEFITSLOADER&consumersCount=1&pollTimeoutMs=1000&autoCommitEnable=false&allowManualCommit=true&maxPollRecords=1"")
.process(new Processor() {
 @Override
 public void process(Exchange exchange) throws Exception {

 Long msgDateTime = (Long) exchange.getIn().getHeaders().get(KafkaConstants.TIMESTAMP);
 System.out.println(""Message : "" + (exchange.getIn().getHeaders()));
 System.out.println(""Message : "" + (exchange.getIn().getBody()));
 Date msgDate = new Date(msgDateTime);
 Date currentDate = new Date();
 long diff = currentDate.getTime() - msgDate.getTime();
 long diffMinutes = diff / (60 * 1000) % 60;
 System.out.println(""Difference in Minutes "" + diffMinutes);
 KafkaManualCommit manualCommit = exchange.getIn().getHeader(KafkaConstants.MANUAL_COMMIT, KafkaManualCommit.class);
if(diffMinutes > 2)
 {
 System.out.println(""Commiting Message "" + exchange.getIn().getBody()); 
 manualCommit.commitSync(); 
 } 
 }
 });
 }
 }

 

 

Code that works fine

 

public class TestKafkaConsumer {
 static Consumer<String, String> consumer = null;
 static ConsumerRecord<String,String> fetchedRecord; 
 static ConsumerRecords<String, String> records;
 public static void main(String... args) {


String topicName = ""BENEFITSLOADER.LOAD"";
 consumer = createConsumer();
 consumer.subscribe(Collections.singletonList(topicName));

try {
 while (true) {
 
 if(fetchedRecord == null)
 records = consumer.poll(1000);
 
 
 records.forEach(record -> { 
 fetchedRecord = record; 
 });
 
 if(fetchedRecord != null)
 {
 Date msgDate = new Date(fetchedRecord.timestamp());
 Date date = new Date(System.currentTimeMillis());
 long diff = date.getTime() - msgDate.getTime();
 long diffMinutes = diff / (60 * 1000) % 60;
 
 System.out.printf(""Consumer Record:(%s, %s, %d, %d)\n"",
 fetchedRecord.key(), fetchedRecord.value(),
 fetchedRecord.partition(), fetchedRecord.offset());
 if(diffMinutes > 2)
 {
 System.out.printf(""Consumer Record Commiting:(%s, %s, %d, %d)\n"",
 fetchedRecord.key(), fetchedRecord.value(),
 fetchedRecord.partition(), fetchedRecord.offset());
 consumer.commitSync();
 System.out.println(""Commited"");
 fetchedRecord = null;
 }
 } 
 }
 }

catch (Exception ex) {
 ex.printStackTrace();
 } finally { 
 consumer.close();
 }

}

private static Consumer<String, String> createConsumer() {
 Properties props = new Properties();
 props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, ""xxx:9092,xxx:9092,xxx:9093"");
 props.put(ConsumerConfig.GROUP_ID_CONFIG, ""BENEFITSLOADER"");
 props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
 props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
 props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);
 props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, 1);
 return new KafkaConsumer<>(props);
 }

}",Linux,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12732,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-06 14:14:10.713,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 17 07:29:13 UTC 2018,,,,,,,0|i3ty6n:,9223372036854775807,,,,,,,,,,06/Aug/18 14:14;davsclaus;Can you try with a newer Camel version,"17/Aug/18 07:29;davsclaus;We fixed CAMEL-12732 which is related to this, when doing manual commit. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Kafka manual commit to file repository doesn't work properly (using Spring boot),CAMEL-12732,13179049,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,michael992,michael992,15/Aug/18 10:45,17/Aug/18 07:28,13/Mar/19 22:20,16/Aug/18 13:32,2.22.0,,,,,,,,,,,,,,,2.22.1,2.23.0,,,,camel-kafka,,,,,,0,,,,"I'im trying to save the Kafka offset into FileStateRepository, the offset is correctly writing but it is not reading at route start so camel will read all the topic every time

 
{code:java}
@Component
public class Route extends RouteBuilder {
    @Override
    public void configure() throws Exception {
        from(kafka())
                .to(""log:TEST?level=INFO"")
                .process(Route::commitKafka);
    }

    private String kafka() {

        String kafkaEndpoint = ""kafka:"";

        kafkaEndpoint += ""topictest"";
        kafkaEndpoint += ""?brokers="";
        kafkaEndpoint += ""localhost:9092"";
        kafkaEndpoint += ""&groupId="";
        kafkaEndpoint += ""TEST"";
        kafkaEndpoint += ""&autoOffsetReset="";
        kafkaEndpoint += ""earliest"";
        kafkaEndpoint += ""&autoCommitEnable="";
        kafkaEndpoint += false;
        kafkaEndpoint += ""&allowManualCommit="";
        kafkaEndpoint += true;
        kafkaEndpoint += ""&offsetRepository="";
        kafkaEndpoint += ""#fileStore"";

        return kafkaEndpoint;
    }

    @Bean(name = ""fileStore"")
    private FileStateRepository fileStateRepository() {
        FileStateRepository fileStateRepository = FileStateRepository.fileStateRepository(new File(""/kafka/offset_repo/repo.dat""));

        // This will be empty
        // System.out.println(fileStateRepository.getCache());
        return fileStateRepository;
    }

    private static void commitKafka(Exchange exchange) {

        KafkaManualCommit manual = exchange.getIn().getHeader(KafkaConstants.MANUAL_COMMIT, KafkaManualCommit.class);
        manual.commitSync();
    }
}

{code}
 ","Spring boot

kafka_2.11-1.1.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-15 11:50:00.157,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 16 15:28:07 UTC 2018,,,,,,,0|i3x2br:,9223372036854775807,,,,,,,,,,"15/Aug/18 10:54;michael992;There is a second point even if i don't do the manual commit
{code:java}
.process(Route::commitKafka){code}
camel will write into the repo file this is not supposed to happen i think.","15/Aug/18 11:22;michael992;I finally found a solution for the first post i need to do this to start the repo with Spring
{code:java}
try {
    fileStateRepository.start();
} catch (Exception e) {
    e.printStackTrace();
}
{code}
But it does'nt appear in the documentation.

 ","15/Aug/18 11:50;dmvolod;[~michael992], you are welcome to add this info to the camel-kafka docs, but usually you can get more use cases from the unit-test, like FileStateRepositoryTest.java and others.","15/Aug/18 11:59;michael992;[~dmvolod], Done for the documentation, still have a bug with the autocommit even when i set autocommit to false the offset is still immediatly writing to the file and when i call to the commitSync() method it will be written again.",15/Aug/18 12:06;dmvolod;[~michael992] could you please to create a simple JUnit test against your local Kafka server?,"15/Aug/18 13:56;michael992; 
{code:java}
import java.io.File;
import java.io.IOException;
import java.util.Properties;

import org.apache.camel.CamelContext;
import org.apache.camel.Endpoint;
import org.apache.camel.EndpointInject;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.kafka.KafkaConstants;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.impl.FileStateRepository;
import org.apache.camel.impl.JndiRegistry;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class RouteTest extends CamelTestSupport {
    public static final String TOPIC = ""some_topic"";
    public static final String TOPIC_PARTITION = TOPIC + ""/0"";
    public static final String BROKER = ""localhost:9092"";

    @EndpointInject(uri = ""kafka:"" + TOPIC
            + ""?brokers="" + BROKER + ""&groupId=group1&autoCommitEnable=false&allowManualCommit=true&offsetRepository=#offset&autoOffsetReset=earliest"")
    private Endpoint from;

    @EndpointInject(uri = ""mock:result"")
    private MockEndpoint to;

    private org.apache.kafka.clients.producer.KafkaProducer<String, String> producer;

    private FileStateRepository fileStateRepository;

    @Override
    protected void doPreSetup() throws Exception {
        fileStateRepository = new FileStateRepository();
        fileStateRepository.setFileStore(
                new File(getClass().getClassLoader().getResource(""repo.dat"").getPath())
        );
        fileStateRepository.start();
    }

    @Before
    public void before() {
        Properties props = new Properties();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, BROKER);
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, KafkaConstants.KAFKA_DEFAULT_SERIALIZER);
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KafkaConstants.KAFKA_DEFAULT_SERIALIZER);
        props.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, KafkaConstants.KAFKA_DEFAULT_PARTITIONER);
        props.put(ProducerConfig.ACKS_CONFIG, ""1"");
        producer = new org.apache.kafka.clients.producer.KafkaProducer<>(props);
    }

    @After
    public void after() {
        if (producer != null) {
            producer.close();
        }
    }

    @Override
    protected CamelContext createCamelContext() throws Exception {
        JndiRegistry registry = super.createRegistry();
        registry.bind(""offset"", fileStateRepository);

        DefaultCamelContext defaultCamelContext = new DefaultCamelContext(registry);
        return defaultCamelContext;
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                from(from).id(""foo"")
                        .to(to);
            }
        };
    }

    @Test
    public void autocommitDisabled() throws InterruptedException, IOException {
        int n = 1;
        to.expectedMessageCount(n);
        // The LAST_RECORD_BEFORE_COMMIT header should include a value as we use manual commit
        to.allMessages().header(KafkaConstants.LAST_RECORD_BEFORE_COMMIT).isNotNull();

        for (int k = 0; k < n; k++) {
            String msg = ""message"";
            ProducerRecord<String, String> data = new ProducerRecord<>(TOPIC, ""KAFKA_KEY_"" + k, msg);
            producer.send(data);
        }

        to.assertIsSatisfied(500);

        assertEquals(""Since no commit its performed the state should not change"", ""1"", fileStateRepository.getState(TOPIC_PARTITION));
    }
}

{code}
here the content of repo.dat in test/resources

 

some_topic/0=1

 ","15/Aug/18 17:41;githubbot;mikadev opened a new pull request #2475: CAMEL-12732 Take into account autoCommitEnable
URL: https://github.com/apache/camel/pull/2475
 
 
   Check if autocommit is enabled before setting the state
   
   (Fix the manual commit for the state)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/Aug/18 17:41;githubbot;GitHub user mikadev opened a pull request:

    https://github.com/apache/camel/pull/2475

    CAMEL-12732 Take into account autoCommitEnable

    Check if autocommit is enabled before setting the state
    
    (Fix the manual commit for the state)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mikadev/camel patch-3

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2475.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2475
    
----
commit 880656f64c35cb3f8cdac09236890917d2a0f2e9
Author: elbaz michael <michaelelbaz@...>
Date:   2018-08-15T17:40:22Z

    CAMEL-12732 Take into account autoCommitEnable
    
    Check if autocommit is enabled before setting the state
    
    (Fix the manual commit for the state)

----
","15/Aug/18 19:25;githubbot;mikadev closed pull request #2475: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2475
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
index 5f56270c4ab..5af185f9ffe 100644
--- a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
+++ b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
@@ -378,15 +378,19 @@ protected boolean doRun() {
 
         private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {
             if (partitionLastOffset != -1) {
-                if (offsetRepository != null) {
+                boolean autoCommitEnable = endpoint.getConfiguration().isAutoCommitEnable();
+                Optional<StateRepository<String, String>> offsetRepositoryOptional = Optional.ofNullable(offsetRepository);
+                BiConsumer<TopicPartition, Long> topicPartitionLongBiConsumer = (partition1, partitionLastOffset1) -> consumer.commitSync(Collections.singletonMap(partition1, new OffsetAndMetadata(partitionLastOffset1 + 1)));
+
+                if (autoCommitEnable && offsetRepositoryOptional.isPresent()) {
                     log.debug(""Saving offset repository state {} from topic {} with offset: {}"", threadId, topicName, partitionLastOffset);
                     offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));
                 } else if (forceCommit) {
                     log.debug(""Forcing commitSync {} from topic {} with offset: {}"", threadId, topicName, partitionLastOffset);
-                    consumer.commitSync(Collections.singletonMap(partition, new OffsetAndMetadata(partitionLastOffset + 1)));
-                } else if (endpoint.getConfiguration().isAutoCommitEnable()) {
+                    topicPartitionLongBiConsumer.accept(partition, partitionLastOffset);
+                } else if (autoCommitEnable) {
                     log.debug(""Auto commitSync {} from topic {} with offset: {}"", threadId, topicName, partitionLastOffset);
-                    consumer.commitSync(Collections.singletonMap(partition, new OffsetAndMetadata(partitionLastOffset + 1)));
+                    topicPartitionLongBiConsumer.accept(partition, partitionLastOffset);
                 }
             }
         }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/Aug/18 19:25;githubbot;Github user mikadev closed the pull request at:

    https://github.com/apache/camel/pull/2475
","15/Aug/18 21:12;githubbot;mikadev opened a new pull request #2476: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2476
 
 
   Check if autocommitstate is enabled before setting the state
   
   (Fix the manual commit for the state)
   
   Warning! if the AutoCommitStateEnable is true and manual.commitSync is called when AllowManualCommit is true the state will be committed twice

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/Aug/18 21:12;githubbot;GitHub user mikadev opened a pull request:

    https://github.com/apache/camel/pull/2476

    CAMEL-12732 Take into account autoCommitEnable for the state

    Check if autocommitstate is enabled before setting the state
    
    (Fix the manual commit for the state)
    
    Warning! if the AutoCommitStateEnable is true and manual.commitSync is called when AllowManualCommit is true the state will be committed twice

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mikadev/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2476.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2476
    
----
commit c3d89a59eb6bd9d78042e7e38972bc9d0ebd3dfc
Author: elbaz michael <elbazmichael92@...>
Date:   2018-08-15T21:02:39Z

    CAMEL-12732 Take into account autoCommitEnable for the state
    
    Check if autocommitstate is enabled before setting the state
    
    (Fix the manual commit for the state)
    
    Warning! if the AutoCommitStateEnable is true and manual.commitSync is called when AllowManualCommit is true the state will be committed twice

----
","16/Aug/18 06:23;githubbot;dmvolod commented on issue #2476: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2476#issuecomment-413438782
 
 
   If some parameters are incompatible you can detect this and raise an exception or waiting.
   Please also add a JUnit test for this option. You can add real test and mark it with @Ignored. I'm planning to add testcontainers option for Kafka component and able to run real test against container is possible.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Aug/18 06:23;githubbot;dmvolod edited a comment on issue #2476: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2476#issuecomment-413438782
 
 
   If some parameters are incompatible you can detect this and raise an exception or waiting.
   Please also add a JUnit test for this option. You can add real test and mark it with @Ignored. I'm planning to add testcontainers option for Kafka component and able to run real test against container if possible.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Aug/18 07:20;githubbot;davsclaus commented on a change in pull request #2476: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2476#discussion_r210497745
 
 

 ##########
 File path: components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConfiguration.java
 ##########
 @@ -403,6 +405,7 @@ public Properties createConsumerProperties() {
         addPropertyIfNotNull(props, ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, getAutoOffsetReset());
         addPropertyIfNotNull(props, ConsumerConfig.CONNECTIONS_MAX_IDLE_MS_CONFIG, getConnectionMaxIdleMs());
         addPropertyIfNotNull(props, ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, isAutoCommitEnable());
+        addPropertyIfNotNull(props, ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, isAutoCommitStateEnable());
 
 Review comment:
   This is wrong where you override the same option

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",16/Aug/18 07:21;davsclaus;The file repo needs to be started / stopped as you found out.,16/Aug/18 07:35;davsclaus;We can look at making camel-kafka automatic start/stop the repo if needed.,"16/Aug/18 08:17;githubbot;davsclaus commented on issue #2476: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2476#issuecomment-413464295
 
 
   @mikadev whats the reason for yet another option, can you try to explain a bit more about it? 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Aug/18 08:26;githubbot;mikadev closed pull request #2476: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2476
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-kafka/src/main/docs/kafka-component.adoc b/components/camel-kafka/src/main/docs/kafka-component.adoc
index 3a8cac53b8a..eef901ee3ea 100644
--- a/components/camel-kafka/src/main/docs/kafka-component.adoc
+++ b/components/camel-kafka/src/main/docs/kafka-component.adoc
@@ -86,6 +86,7 @@ with the following path and query parameters:
 | *autoCommitEnable* (consumer) | If true, periodically commit to ZooKeeper the offset of messages already fetched by the consumer. This committed offset will be used when the process fails as the position from which the new consumer will begin. | true | Boolean
 | *autoCommitIntervalMs* (consumer) | The frequency in ms that the consumer offsets are committed to zookeeper. | 5000 | Integer
 | *autoCommitOnStop* (consumer) | Whether to perform an explicit auto commit when the consumer stops to ensure the broker has a commit from the last consumed message. This requires the option autoCommitEnable is turned on. The possible values are: sync, async, or none. And sync is the default value. | sync | String
+| *autoCommitStateEnable* (consumer) | If false this will disable the auto commit of the state. | true | boolean
 | *autoOffsetReset* (consumer) | What to do when there is no initial offset in ZooKeeper or if an offset is out of range: earliest : automatically reset the offset to the earliest offset latest : automatically reset the offset to the latest offset fail: throw exception to the consumer | latest | String
 | *breakOnFirstError* (consumer) | This options controls what happens when a consumer is processing an exchange and it fails. If the option is false then the consumer continues to the next message and processes it. If the option is true then the consumer breaks out, and will seek back to offset of the message that caused a failure, and then re-attempt to process this message. However this can lead to endless processing of the same message if its bound to fail every time, eg a poison message. Therefore its recommended to deal with that for example by using Camel's error handler. | false | boolean
 | *bridgeErrorHandler* (consumer) | Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored. | false | boolean
diff --git a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConfiguration.java b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConfiguration.java
index e58caee72cc..0425d21f715 100644
--- a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConfiguration.java
+++ b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConfiguration.java
@@ -128,6 +128,8 @@
     //Consumer configuration properties
     @UriParam(label = ""consumer"", defaultValue = ""true"")
     private Boolean autoCommitEnable = true;
+    @UriParam(label = ""consumer"", defaultValue = ""true"")
+    private boolean autoCommitStateEnable = true;
     @UriParam(label = ""consumer"")
     private boolean allowManualCommit;
     @UriParam(label = ""consumer"", defaultValue = ""sync"", enums = ""sync,async,none"")
@@ -403,6 +405,7 @@ public Properties createConsumerProperties() {
         addPropertyIfNotNull(props, ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, getAutoOffsetReset());
         addPropertyIfNotNull(props, ConsumerConfig.CONNECTIONS_MAX_IDLE_MS_CONFIG, getConnectionMaxIdleMs());
         addPropertyIfNotNull(props, ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, isAutoCommitEnable());
+        addPropertyIfNotNull(props, ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, isAutoCommitStateEnable());
         addPropertyIfNotNull(props, ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG, getPartitionAssignor());
         addPropertyIfNotNull(props, ConsumerConfig.RECEIVE_BUFFER_CONFIG, getReceiveBufferBytes());
         addPropertyIfNotNull(props, ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG, getConsumerRequestTimeoutMs());
@@ -643,6 +646,17 @@ public void setAutoCommitEnable(Boolean autoCommitEnable) {
         this.autoCommitEnable = autoCommitEnable;
     }
 
+    public boolean isAutoCommitStateEnable() {
+        return autoCommitStateEnable;
+    }
+
+    /**
+     * If false this will disable the autocommit of the state
+     */
+    public void setAutoCommitStateEnable(boolean autoCommitStateEnable) {
+        this.autoCommitStateEnable = autoCommitStateEnable;
+    }
+
     public boolean isAllowManualCommit() {
         return allowManualCommit;
     }
diff --git a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
index 5f56270c4ab..f6596daf3da 100644
--- a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
+++ b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
@@ -378,7 +378,7 @@ protected boolean doRun() {
 
         private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {
             if (partitionLastOffset != -1) {
-                if (offsetRepository != null) {
+                if (endpoint.getConfiguration().isAutoCommitStateEnable() && offsetRepository != null) {
                     log.debug(""Saving offset repository state {} from topic {} with offset: {}"", threadId, topicName, partitionLastOffset);
                     offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));
                 } else if (forceCommit) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Aug/18 08:26;githubbot;Github user mikadev closed the pull request at:

    https://github.com/apache/camel/pull/2476
",16/Aug/18 08:56;michael992;[~davsclaus] 'We can look at making camel-kafka automatic start/stop the repo if needed.' Yeah good idea,"16/Aug/18 10:52;githubbot;mikadev opened a new pull request #2478: CAMEL-12732 Take into account isAllowManualCommit
URL: https://github.com/apache/camel/pull/2478
 
 
   Check  isAllowManualCommit before setting the state
   
   (Fix the manual commit for the state)
   
   Sorry for my previous pull request i think now is the right solution without adding parameters to the component.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Aug/18 10:52;githubbot;GitHub user mikadev opened a pull request:

    https://github.com/apache/camel/pull/2478

    CAMEL-12732 Take into account isAllowManualCommit

    Check  isAllowManualCommit before setting the state
    
    (Fix the manual commit for the state)
    
    Sorry for my previous pull request i think now is the right solution without adding parameters to the component.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mikadev/camel patch-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2478.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2478
    
----
commit c540332c5e0711d1533632f47ca5a302ec728583
Author: elbaz michael <michaelelbaz@...>
Date:   2018-08-16T10:51:07Z

    CAMEL-12732 Take into account isAllowManualCommit
    
    Check  isAllowManualCommit before setting the state
    
    (Fix the manual commit for the state)

----
","16/Aug/18 13:28;githubbot;davsclaus closed pull request #2478: CAMEL-12732 Take into account isAllowManualCommit
URL: https://github.com/apache/camel/pull/2478
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
index e6913f3c698..df3b4b5769f 100644
--- a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
+++ b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
@@ -399,7 +399,7 @@ protected boolean doRun() {
 
         private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {
             if (partitionLastOffset != -1) {
-                if (offsetRepository != null) {
+                if (!endpoint.getConfiguration().isAllowManualCommit() && offsetRepository != null) {
                     log.debug(""Saving offset repository state {} from topic {} with offset: {}"", threadId, topicName, partitionLastOffset);
                     offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));
                 } else if (forceCommit) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Aug/18 13:28;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2478
","16/Aug/18 13:32;davsclaus;Okay the manual commit fix for commitOffset has been backported, thanks for the PR.",16/Aug/18 13:33;davsclaus;The auto startup of the offset repo has been introduced from Camel 2.23 onwards.,"16/Aug/18 15:02;githubbot;mikadev commented on issue #2478: CAMEL-12732 Take into account isAllowManualCommit
URL: https://github.com/apache/camel/pull/2478#issuecomment-413577033
 
 
   Thanks when it will be deployed on mvn repo ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Aug/18 15:28;githubbot;davsclaus commented on issue #2478: CAMEL-12732 Take into account isAllowManualCommit
URL: https://github.com/apache/camel/pull/2478#issuecomment-413585763
 
 
   You mean a new release, then it take a bit we have new set of patch releases planned for Q3, you can find details in ASF JIRA.
   
   For SNAPSHOT then they are usually build overnight

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,
Krati implementation does not work properly persistence after put operation.,CAMEL-12720,13177920,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,vcibulka,vcibulka,09/Aug/18 09:30,14/Aug/18 08:39,13/Mar/19 22:20,14/Aug/18 08:35,,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-krati,,,,,,0,,,,"In KratiProducer class 

} else {
           Object value = getValue(exchange);
           //Its required to have only one thread putting stuff there at any given time per store.
            synchronized (endpoint.getPath().intern()) {
            dataStore.put(key, value);

            {color:#FF0000}dataStore.persist();  {color:#d04437}// Here should be this{color}{color}
           }
 }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-10 07:04:26.289,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 14 08:39:20 UTC 2018,,,,,,,0|i3wvd3:,9223372036854775807,,,,,,,,,,"10/Aug/18 07:04;dmvolod;[~vcibulka], you are welcome to provide a fix and fix/add JUnit test.

However, Krati is not updated for more than 5 years and we need to understand is this component still actual or not.

[~davsclaus], [~ancosen] what do you think about this component deprecation?",10/Aug/18 07:25;davsclaus;Yes its deprecated. But if we can fix bugs in it then that is okay also.,14/Aug/18 08:39;dmvolod;[~vcibulka] Thanks for fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FindBugs warnings: Invocation of toString on an array,CAMEL-12726,13178408,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,aldettinger,hiroakiyoshida,hiroakiyoshida,11/Aug/18 01:30,11/Aug/18 17:21,13/Mar/19 22:20,11/Aug/18 17:20,,,,,,,,,,,,,,,,2.23.0,,,,,camel-box,camel-core,camel-jsch,,,,0,,,,"FindBugs-3.0.1 ([http://findbugs.sourceforge.net/]) reported 4 DMI_INVOKING_TOSTRING_ON_ARRAY warnings on master:
{code:java}
H C USELESS_STRING: Invocation of toString on org.apache.camel.processor.RemoveHeadersProcessor.getExcludePattern() in new org.apache.camel.management.mbean.ManagedRemoveHeaders(CamelContext, RemoveHeadersProcessor, ProcessorDefinition)  At ManagedRemoveHeaders.java:[line 37]
H C USELESS_STRING: Invocation of toString on org.apache.camel.processor.RemovePropertiesProcessor.getExcludePattern() in new org.apache.camel.management.mbean.ManagedRemoveProperties(CamelContext, RemovePropertiesProcessor, ProcessorDefinition)  At ManagedRemoveProperties.java:[line 37]
M C USELESS_STRING: Invocation of toString on ScpConfiguration.getPrivateKeyBytes() in org.apache.camel.component.scp.ScpOperations.createSession(ScpConfiguration)  At ScpOperations.java:[line 262]
M C USELESS_STRING: Invocation of toString on path in org.apache.camel.component.box.api.BoxFoldersManager.createFolder(String, String[])  At BoxFoldersManager.java:[line 204]
{code}
The description of the bug is as follows:
{quote}*USELESS_STRING: Invocation of toString on an array (DMI_INVOKING_TOSTRING_ON_ARRAY)*
 The code invokes toString on an array, which will generate a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.
 [http://findbugs.sourceforge.net/bugDescriptions.html#DMI_INVOKING_TOSTRING_ON_ARRAY]
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-11 01:44:58.658,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sat Aug 11 17:20:12 UTC 2018,,,Patch Available,,,,0|i3wydj:,9223372036854775807,,,,,,,,,,"11/Aug/18 01:44;githubbot;hiroakiy opened a new pull request #2467: CAMEL-12726: Fix FindBugs warnings: Invocation of toString on an array
URL: https://github.com/apache/camel/pull/2467
 
 
   FindBugs-3.0.1 ([http://findbugs.sourceforge.net/](http://findbugs.sourceforge.net/)) reported 4 DMI_INVOKING_TOSTRING_ON_ARRAY warnings on master:
   ```
   H C USELESS_STRING: Invocation of toString on org.apache.camel.processor.RemoveHeadersProcessor.getExcludePattern() in new org.apache.camel.management.mbean.ManagedRemoveHeaders(CamelContext, RemoveHeadersProcessor, ProcessorDefinition)  At ManagedRemoveHeaders.java:[line 37]
   H C USELESS_STRING: Invocation of toString on org.apache.camel.processor.RemovePropertiesProcessor.getExcludePattern() in new org.apache.camel.management.mbean.ManagedRemoveProperties(CamelContext, RemovePropertiesProcessor, ProcessorDefinition)  At ManagedRemoveProperties.java:[line 37]
   M C USELESS_STRING: Invocation of toString on ScpConfiguration.getPrivateKeyBytes() in org.apache.camel.component.scp.ScpOperations.createSession(ScpConfiguration)  At ScpOperations.java:[line 262]
   M C USELESS_STRING: Invocation of toString on path in org.apache.camel.component.box.api.BoxFoldersManager.createFolder(String, String[])  At BoxFoldersManager.java:[line 204]
   ```
   The description of the bug is as follows:
   > USELESS_STRING: Invocation of toString on an array (DMI_INVOKING_TOSTRING_ON_ARRAY)
   >  The code invokes toString on an array, which will generate a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.
    [http://findbugs.sourceforge.net/bugDescriptions.html#DMI_INVOKING_TOSTRING_ON_ARRAY](http://findbugs.sourceforge.net/bugDescriptions.html#DMI_INVOKING_TOSTRING_ON_ARRAY)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Aug/18 01:44;githubbot;GitHub user hiroakiy opened a pull request:

    https://github.com/apache/camel/pull/2467

    CAMEL-12726: Fix FindBugs warnings: Invocation of toString on an array

    FindBugs-3.0.1 ([http://findbugs.sourceforge.net/](http://findbugs.sourceforge.net/)) reported 4 DMI_INVOKING_TOSTRING_ON_ARRAY warnings on master:
    ```
    H C USELESS_STRING: Invocation of toString on org.apache.camel.processor.RemoveHeadersProcessor.getExcludePattern() in new org.apache.camel.management.mbean.ManagedRemoveHeaders(CamelContext, RemoveHeadersProcessor, ProcessorDefinition)  At ManagedRemoveHeaders.java:[line 37]
    H C USELESS_STRING: Invocation of toString on org.apache.camel.processor.RemovePropertiesProcessor.getExcludePattern() in new org.apache.camel.management.mbean.ManagedRemoveProperties(CamelContext, RemovePropertiesProcessor, ProcessorDefinition)  At ManagedRemoveProperties.java:[line 37]
    M C USELESS_STRING: Invocation of toString on ScpConfiguration.getPrivateKeyBytes() in org.apache.camel.component.scp.ScpOperations.createSession(ScpConfiguration)  At ScpOperations.java:[line 262]
    M C USELESS_STRING: Invocation of toString on path in org.apache.camel.component.box.api.BoxFoldersManager.createFolder(String, String[])  At BoxFoldersManager.java:[line 204]
    ```
    The description of the bug is as follows:
    > USELESS_STRING: Invocation of toString on an array (DMI_INVOKING_TOSTRING_ON_ARRAY)
    >  The code invokes toString on an array, which will generate a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.
     [http://findbugs.sourceforge.net/bugDescriptions.html#DMI_INVOKING_TOSTRING_ON_ARRAY](http://findbugs.sourceforge.net/bugDescriptions.html#DMI_INVOKING_TOSTRING_ON_ARRAY)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hiroakiy/camel CAMEL-12726

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2467.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2467
    
----
commit 28627fe3301f8e5854194c92bdf4d961996d6e92
Author: Hiroaki Yoshida <hyoshida@...>
Date:   2018-08-11T01:33:09Z

    CAMEL-12726: Fix FindBugs warnings: Invocation of toString on an array

----
","11/Aug/18 17:16;githubbot;aldettinger closed pull request #2467: CAMEL-12726: Fix FindBugs warnings: Invocation of toString on an array
URL: https://github.com/apache/camel/pull/2467
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveHeaders.java b/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveHeaders.java
index 723e4d71703..ae5d333ebae 100644
--- a/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveHeaders.java
+++ b/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveHeaders.java
@@ -16,6 +16,8 @@
  */
 package org.apache.camel.management.mbean;
 
+import java.util.Arrays;
+
 import org.apache.camel.CamelContext;
 import org.apache.camel.api.management.ManagedResource;
 import org.apache.camel.api.management.mbean.ManagedRemoveHeadersMBean;
@@ -34,7 +36,7 @@ public ManagedRemoveHeaders(CamelContext context, RemoveHeadersProcessor process
         super(context, processor, definition);
         this.processor = processor;
         if (processor.getExcludePattern() != null) {
-            exclude = processor.getExcludePattern().toString();
+            exclude = Arrays.toString(processor.getExcludePattern());
         } else {
             exclude = null;
         }
diff --git a/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveProperties.java b/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveProperties.java
index f01a0a856a7..f843b77efba 100644
--- a/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveProperties.java
+++ b/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveProperties.java
@@ -16,6 +16,8 @@
  */
 package org.apache.camel.management.mbean;
 
+import java.util.Arrays;
+
 import org.apache.camel.CamelContext;
 import org.apache.camel.api.management.ManagedResource;
 import org.apache.camel.api.management.mbean.ManagedRemovePropertiesMBean;
@@ -34,7 +36,7 @@ public ManagedRemoveProperties(CamelContext context, RemovePropertiesProcessor p
         super(context, processor, definition);
         this.processor = processor;
         if (processor.getExcludePattern() != null) {
-            exclude = processor.getExcludePattern().toString();
+            exclude = Arrays.toString(processor.getExcludePattern());
         } else {
             exclude = null;
         }
diff --git a/components/camel-box/camel-box-api/src/main/java/org/apache/camel/component/box/api/BoxFoldersManager.java b/components/camel-box/camel-box-api/src/main/java/org/apache/camel/component/box/api/BoxFoldersManager.java
index 1fe7d99f993..eb2ed554505 100644
--- a/components/camel-box/camel-box-api/src/main/java/org/apache/camel/component/box/api/BoxFoldersManager.java
+++ b/components/camel-box/camel-box-api/src/main/java/org/apache/camel/component/box/api/BoxFoldersManager.java
@@ -201,7 +201,7 @@ public BoxFolder createFolder(String parentFolderId, String folderName) {
      */
     public BoxFolder createFolder(String parentFolderId, String... path) {
         try {
-            LOG.debug(""Creating folder with path '"" + path + ""' in parent_folder(id="" + parentFolderId + "")"");
+            LOG.debug(""Creating folder with path '"" + Arrays.toString(path) + ""' in parent_folder(id="" + parentFolderId + "")"");
             if (parentFolderId == null) {
                 throw new IllegalArgumentException(""Parameter 'parentFolderId' can not be null"");
             }
diff --git a/components/camel-jsch/src/main/java/org/apache/camel/component/scp/ScpOperations.java b/components/camel-jsch/src/main/java/org/apache/camel/component/scp/ScpOperations.java
index d0efd1487eb..a9ea3008cb1 100644
--- a/components/camel-jsch/src/main/java/org/apache/camel/component/scp/ScpOperations.java
+++ b/components/camel-jsch/src/main/java/org/apache/camel/component/scp/ScpOperations.java
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.util.Arrays;
 import java.util.Hashtable;
 import java.util.List;
 
@@ -259,7 +260,7 @@ private Session createSession(ScpConfiguration config) {
                 try {
                     jsch.addIdentity(""camel-jsch"", data, null, pkfp != null ? pkfp.getBytes() : null);
                 } catch (Exception e) {
-                    throw new GenericFileOperationFailedException(""Cannot load private key bytes: "" + config.getPrivateKeyBytes(), e);
+                    throw new GenericFileOperationFailedException(""Cannot load private key bytes: "" + Arrays.toString(config.getPrivateKeyBytes()), e);
                 }                
             }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Aug/18 17:16;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2467
",11/Aug/18 17:20;aldettinger;Merged on master. Could arguably be a candidate to be back-ported in older branches (mainly the mbean part). Please re-open if needed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple SFTP-to-File integration with charset options fails,CAMEL-12724,13178204,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,10/Aug/18 07:21,10/Aug/18 07:46,13/Mar/19 22:20,10/Aug/18 07:46,2.22.0,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-core,camel-ftp,,,,,0,,,,"Simple SFTP-to-File integrations with {{charset}} conversion like:
{code:java}
from(""sftp://sample@localhost:2222/in?password=password&delete=true&charset=ISO-8859-1"")
    .to(""file:/tmp/samples-camel/SftpToFileTest/out?charset=UTF-8"");
{code}
fails to output a file in {{/tmp/samples-camel/SftpToFileTest/out/}} correctly. Depending on the combinations, it sometimes converts the charset wrongly and sometimes it simply doesn't output a file to the target dir.

The root cause is that {{SftpOperations}} puts {{ByteArrayOutputStream}} instead of {{byte[]}} or {{InputStream}} to the exchange file body when retrieving a file:
https://github.com/apache/camel/blob/camel-2.22.0/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java#L718-L720
which then results in no converter from {{OutputStream}} to {{java.io.Reader}} being found in {{GenericFileConverter}} downstream, and thus the File producer handles a {{RemoteFile}} awkwardly when outputting a file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,10/Aug/18 07:26;tadayosi;SftpToFileTest.zip;https://issues.apache.org/jira/secure/attachment/12935091/SftpToFileTest.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2018-08-10 07:31:58.636,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 10 07:31:58 UTC 2018,,,,,,,0|i3wx47:,9223372036854775807,,,,,,,,,,"10/Aug/18 07:31;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2463
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultFluentProducerTemplate is not thread safe,CAMEL-12638,13171366,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lucas_,lucas_,11/Jul/18 10:02,08/Aug/18 13:01,13/Mar/19 22:20,08/Aug/18 12:01,2.20.2,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-core,,,,,,1,,,,"I think we have rediscovered the CAMEL-10820 bug. A body of one request gets replaced with a body of proceeding request, in our case we use *request()* method instead of *asyncSend()*.

We use camel together with spring-boot. Consider following code:

 
{code:java}
@Service
public class UseCamelService {

   private FluentProducerTemplate producer;

   @Autowired
   public UseCamelService(FluentProducerTemplate producer) {
      this.producer = producer;
   }

   public String getValueFromCamel(String body) {
      return producer.to(""route"").withBody(body).request(String.class);
   }

}
{code}
If *UseCamelService.getValueFromCamel()* gets called from two different threads it is possible for the latter one to override the body of the first one.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,12/Jul/18 15:58;mario.papandrea;image-2018-07-12-17-58-09-225.png;https://issues.apache.org/jira/secure/attachment/12931349/image-2018-07-12-17-58-09-225.png,,,,1.0,,,,,,,,,,,,,,,,,,,2018-07-11 20:37:34.534,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 08 13:01:16 UTC 2018,,,,,,,0|i3vrfz:,9223372036854775807,,,,,,,,,,"11/Jul/18 20:37;neildrummonddorado;We just ran into this on a project I am currently working on.

Looking at the {{DefaultFluentProducerTemplate}} class, it looks like it mutates it's internal state in it's implementation of the methods of the {{FluentProducerTemplate}} interface. Because the builder isn't immutable, it would appear that any two threads using the same {{DefaultFluentProducerTemplate}} instance (as in the example in the description) would allow for any state changes from one thread to leak into the other.

In my case, it looks like the body is often getting swapped out with one from another thread, but it looks like any of the internal state could get mixed up since this class isn't immutable.  I'm not sure what the performance implications of making this class immutable would be, but that would definitely appear to be one way to solve the problem.","12/Jul/18 07:25;lucas_;I came up with the same conclusion as you [~neildrummonddorado]. There is no mention about this in the _DefaultFluentProducerTemplate_ javadoc, but the one for _FluentProducerTemplate_ clearly states that the producer is threadsafe and I would kind of expect that the same should apply for its implementations.",12/Jul/18 09:09;njiang;The FluentProducerTemplate works as the Builder class with the fluent API to setup the internal states which  is not thread safe. You may need to use the DefaultProducerTemplate to do the job.,"12/Jul/18 12:37;lucas_;I'm not really convinced by that [~njiang]. Even in the _Camel in Action (Second Edition)_ book, [~davsclaus] and [~janstey] use it as a standard bean that can be called to execute a service, not as a builder (see _Listing 7.12 JAX-RS_ _REST implementation_)_:_
{code:java}
@ApplicationScoped
@Path ( ""/api"" )
public class RulesController {
   @Inject
   @Uri ( ""direct:inventory"" )
   private FluentProducerTemplate producer;

   @GET
   @Produces ( MediaType.APPLICATION_JSON )
   @Path ( ""/rules/{cartIds}"" )
   public List<ItemDto> rules( @PathParam ( ""cartIds"" ) String cartIds ) {
      List<ItemDto> answer = new ArrayList<>();
      ItemsDto inventory = producer.request( ItemsDto.class );
      [...]
   }
}{code}
 Obviously they don't refer to a specific implementation but we can all imagine which implementation is provided by default. Also if it was supposed to be *just* a builder I find it misleading that the class actually implements a _Service_ interface.

 ","12/Jul/18 15:57;mario.papandrea;Moreover the api doc clearly state  that this object is ""thread safe"" 

[http://static.javadoc.io/org.apache.camel/camel-core/2.19.3/org/apache/camel/FluentProducerTemplate.html] 

  !image-2018-07-12-17-58-09-225.png!","13/Jul/18 14:55;njiang;OK, I saw the java doc. Normally the template send, request method are thread safe, but withBody() is not thread safe, we can fix it by declare the body as thread local , but there are some other settings such as endpoint, processorSupplier which are not thread safe. So I just add a comment that we need treat FluentProducerTemplate as a Builder.

{code:java}
public class DefaultFluentProducerTemplate extends ServiceSupport implements FluentProducerTemplate {
    private final CamelContext context;
    private final ClassValue<ConvertBodyProcessor> resultProcessors;
    private Map<String, Object> headers;
    private Object body;
    private Optional<Consumer<ProducerTemplate>> templateCustomizer;
    private Optional<Supplier<Exchange>> exchangeSupplier;
    private Optional<Supplier<Processor>> processorSupplier;
    private Optional<Endpoint> endpoint;
    private Optional<Endpoint> defaultEndpoint;
    private int maximumCacheSize;
    private boolean eventNotifierEnabled;
    private volatile ProducerTemplate template;

...{code}","13/Jul/18 15:57;mario.papandrea;i suggest also to remove the singleton from the camel-spring-boot-starter cause is misleading. 

Or maybe  the scope of the bean can be changed to be Request Scoped
{code:java}
@Scope(""request"") 
{code}
. But I 'm not sure it will do the job..","13/Jul/18 16:46;neildrummonddorado;[~mario.papandrea] I don't think that will fix the issue.

Consider the case of a service that injects {{FluentProducerTemplate}}:
{code:java}
@Service
public class MyService {

    @Inject
    private FluentProducerTemplate fluentProducerTemplate

    public void useProducerTemplate() {
        ....
    }
}{code}
In this case, if {{useProducerTemplate()}} is called from multiple threads, and it uses the {{fluentProducerTemplate}}, then even if you give it prototype scope, some instances may still be used in a multithreaded way, and may still run into this issue.  (It might make this happen less often, and fix it in some cases, but not in all cases).

I think any proper solution that doesn't break the API of {{FluentProducerTemplate}} will need {{DefaultFluentProducerTemplate}} to be a proper thread-safe class, such that a single instance can be used in multiple threads at the same time.

Right now, because {{DefaultFluentProducerTemplate}} implements {{FluentProducerTemplate}}, it really ought to be thread-safe, as is guaranteed in the javadocs of the {{FluentProducerTemplate}} interface.","13/Jul/18 19:29;mario.papandrea;Ah yes sure, sorry! I was hoping exists some scope crating a new instance for each call, but is not like this. Anyway my suggestion to remove from the camel-spring-boot-starter configuration as a singleton is still valid. It shouldn't be used that way and the fact that you can find it in the spring context available for injection is error prone. This class must be instantiated each time is used so there is no need to be provided by the container","24/Jul/18 18:12;lucas_;{quote}So I just add a comment that we need treat FluentProducerTemplate as a Builder.
{quote}
[~njiang] I kind of feel like this is not enough... If we want to avoid further confusion and potential production issues (our case) I think the class should be either made thread-safe for all operations *or* **it should not be possible to use it as a _ProducerTemplate_ (and don't create a singleton of this class as part of spring-boot-starter).","27/Jul/18 10:07;njiang;If we set the property to be thread local, we can make it thread-safe, but it may introduce some memory leak if we don't use it rightly.
","08/Aug/18 08:00;githubbot;davsclaus opened a new pull request #2459:  CAMEL-12638: FluentProducerTemplate should be thread-safe
URL: https://github.com/apache/camel/pull/2459
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/Aug/18 08:00;githubbot;GitHub user davsclaus opened a pull request:

    https://github.com/apache/camel/pull/2459

     CAMEL-12638: FluentProducerTemplate should be thread-safe

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-12638

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2459.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2459
    
----
commit afedbc78afde861075ec218e50eaff12e2b9c7fc
Author: Claus Ibsen <claus.ibsen@...>
Date:   2018-08-08T07:57:57Z

    CAMEL-12638: FluentProducerTemplate should be thread-safe.

commit efc0e955139565f49f3f6ffd357ba78fa288efcc
Author: Claus Ibsen <claus.ibsen@...>
Date:   2018-08-08T07:59:46Z

    CAMEL-12638: FluentProducerTemplate should be thread-safe.

----
","08/Aug/18 08:00;davsclaus;I created a PR with a potential fix
https://github.com/apache/camel/pull/2459","08/Aug/18 11:58;githubbot;davsclaus closed pull request #2459:  CAMEL-12638: FluentProducerTemplate should be thread-safe
URL: https://github.com/apache/camel/pull/2459
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/Aug/18 11:58;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2459
",08/Aug/18 12:01;davsclaus;Thanks for reporting,"08/Aug/18 13:01;lucas_;The fix looks good to me, thank you!",,,,,,,,,,,,,,,
relative paths can remove scheme from xslt URI,CAMEL-12713,13177335,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pvdbosch,pvdbosch,07/Aug/18 08:58,07/Aug/18 12:07,13/Mar/19 22:20,07/Aug/18 12:07,2.22.0,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-core,,,,,,0,xslt,,,"When using relative paths in an XSLT referenced from another one, the used URI scheme may be ignored.

e.g. in case of an XSLT specified by URI ""classpath:location/master.xsl"",  that includes another one:  <xsl:include href=""../child.xsl""/>

In this case, the URI of child.xsl is resolved as just ""child.xsl"" instead of ""classpath:child.xsl"", omitting the URI scheme.

The cause is XsltUriResolver, in which FileUtil.compactPath() is used to calculate the relative URI, but this call ignores the colon separator and considers ""classpath:location"" as a single path part.

I'm creating a pull request which passes the URI without scheme to FileUtil.compactPath().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-07 09:05:45.464,,,no_permission,,Unknown,,,,Patch,,,,,,,,,9223372036854775807,,,Tue Aug 07 12:07:46 UTC 2018,,,Patch Available,,,,0|i3wrr3:,9223372036854775807,,,,,,,,,,"07/Aug/18 09:05;githubbot;pvdbosch opened a new pull request #2456: CAMEL-12713 - XsltUriResolver fix: relative imports can ignore URI scheme 
URL: https://github.com/apache/camel/pull/2456
 
 
   fix for CAMEL-12713
   
   FileUtil.compactPath() is used to calculate the relative URI, but this call ignores the colon separator and considers ""classpath:directory"" as a single path part. 
   
   This patch passes the URI without its scheme to FileUtil.compactPath() and attaches it again to the result. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/Aug/18 09:05;githubbot;GitHub user pvdbosch opened a pull request:

    https://github.com/apache/camel/pull/2456

    CAMEL-12713 - XsltUriResolver fix: relative imports can ignore URI scheme 

    fix for CAMEL-12713
    
    FileUtil.compactPath() is used to calculate the relative URI, but this call ignores the colon separator and considers ""classpath:directory"" as a single path part. 
    
    This patch passes the URI without its scheme to FileUtil.compactPath() and attaches it again to the result. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kszbcss/camel xslt-resolver-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2456.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2456
    
----
commit 4b957bd345a38a4cadd9e492b0ea7a9325c2a551
Author: pvdbosch <peter.vandenbosch@...>
Date:   2018-08-06T15:58:56Z

    CAMEL-12713 - XsltUriResolver fix: relative paths can remove scheme from XSLT URI

----
","07/Aug/18 12:02;githubbot;davsclaus closed pull request #2456: CAMEL-12713 - XsltUriResolver fix: relative imports can ignore URI scheme 
URL: https://github.com/apache/camel/pull/2456
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java b/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java
index 2520d7f1382..7c302d91021 100644
--- a/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java
+++ b/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java
@@ -27,6 +27,7 @@
 import org.apache.camel.util.FileUtil;
 import org.apache.camel.util.ObjectHelper;
 import org.apache.camel.util.ResourceHelper;
+import org.apache.camel.util.StringHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -74,14 +75,16 @@ public Source resolve(String href, String base) throws TransformerException {
         LOG.trace(""Resolving URI with href: {} and base: {}"", href, base);
 
         String scheme = ResourceHelper.getScheme(href);
+
         if (scheme != null) {
             // need to compact paths for file/classpath as it can be relative paths using .. to go backwards
+            String hrefPath = StringHelper.after(href, scheme);
             if (""file:"".equals(scheme)) {
                 // compact path use file OS separator
-                href = FileUtil.compactPath(href);
+                href = scheme + FileUtil.compactPath(hrefPath);
             } else if (""classpath:"".equals(scheme)) {
                 // for classpath always use /
-                href = FileUtil.compactPath(href, '/');
+                href = scheme + FileUtil.compactPath(hrefPath, '/');
             }
             LOG.debug(""Resolving URI from {}: {}"", scheme, href);
 
diff --git a/camel-core/src/test/java/org/apache/camel/builder/xml/XsltUriResolverTest.java b/camel-core/src/test/java/org/apache/camel/builder/xml/XsltUriResolverTest.java
new file mode 100644
index 00000000000..6d4df9e5a37
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/builder/xml/XsltUriResolverTest.java
@@ -0,0 +1,18 @@
+package org.apache.camel.builder.xml;
+
+import junit.framework.TestCase;
+import org.apache.camel.CamelContext;
+import org.apache.camel.impl.DefaultCamelContext;
+
+import javax.xml.transform.Source;
+
+public class XsltUriResolverTest extends TestCase {
+
+    public void testResolveUri() throws Exception {
+        CamelContext context = new DefaultCamelContext();
+        XsltUriResolver xsltUriResolver = new XsltUriResolver(context, ""classpath:xslt/staff/staff.xsl"");
+        Source source = xsltUriResolver.resolve(""../../xslt/common/staff_template.xsl"", ""classpath:xslt/staff/staff.xsl"");
+        assertNotNull(source);
+        assertEquals(""classpath:xslt/common/staff_template.xsl"", source.getSystemId());
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/Aug/18 12:02;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2456
",07/Aug/18 12:07;davsclaus;Thanks for reporting and the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,
outputTypeWithValidate (or inputTypeWithValidate) + validator()... doesn't work as expected,CAMEL-12565,13165107,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,michaeldz,michaeldz,09/Jun/18 12:27,06/Aug/18 18:09,13/Mar/19 22:20,06/Aug/18 18:09,2.21.1,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"{code:java}
package org.mike.tests;

import org.apache.camel.ValidationException;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class ValidatorTests extends CamelTestSupport {
    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {

                validator()
                        .type(String.class)
                        .withExpression(bodyAs(String.class).isEqualToIgnoreCase(""valid""));

                onException(ValidationException.class)
                        .handled(true)
                        .log(""Invalid predicate: ${exception.message}"")
                        .to(""mock:invalid"");

                from(""direct:in"")
                        //.validate(bodyAs(String.class).isEqualToIgnoreCase(""valid""))
                        .outputTypeWithValidate(String.class) // or .inputTypeWithValidate(String.class)
                        .to(""mock:out"");
            }
        };
    }

    @Test
    public void testValid() throws InterruptedException {

        getMockEndpoint(""mock:out"").expectedMessageCount(1);
        getMockEndpoint(""mock:invalid"").expectedMessageCount(0);

        template.sendBody(""direct:in"", ""valid"");

        assertMockEndpointsSatisfied();
    }

    @Test
    public void testInvalid() throws InterruptedException {
        getMockEndpoint(""mock:out"").expectedMessageCount(0);
        getMockEndpoint(""mock:invalid"").expectedMessageCount(1);

        template.sendBody(""direct:in"", ""wrong"");

        assertMockEndpointsSatisfied();
    }
}


{code}
Expected result: both tests pass

Actual result: 'testValid' - passed, 'testInvalid' - failed

If uncomment line 25 & comment 26
{code:java}
.validate(bodyAs(String.class).isEqualToIgnoreCase(""valid""))
//.inputTypeWithValidate(String.class)
{code}
tests will OK

 

Other test case with same results

 
{code:java}
package org.mike.tests;

import org.apache.camel.Message;
import org.apache.camel.ValidationException;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.JndiRegistry;
import org.apache.camel.spi.DataType;
import org.apache.camel.spi.Validator;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BeanValidatorTest extends CamelTestSupport {
    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                validator()
                        .type(""toValidate"")
                        .withBean(""testValidator"");

                onException(ValidationException.class)
                        .handled(true)
                        .log(""Invalid validation: ${exception.message}"")
                        .to(""mock:invalid"");

                from(""direct:in"")
                        .outputTypeWithValidate(""toValidate"")
                        .to(""mock:out"");
            }
        };
    }

    public static class TestValidator extends Validator {
        private static final Logger LOG = LoggerFactory.getLogger(TestValidator.class);

        @Override
        public void validate(Message message, DataType type) throws ValidationException {
            Object body = message.getBody();
            LOG.info(""Validating : [{}]"", body);
            if (body instanceof String && body.equals(""valid"")) {
                LOG.info(""OK"");
            } else {
                throw new ValidationException(message.getExchange(), ""Wrong content"");
            }
        }
    }


    @Override
    protected JndiRegistry createRegistry() throws Exception {
        JndiRegistry registry = super.createRegistry();

        registry.bind(""testValidator"", new TestValidator());

        return registry;
    }

    @Test
    public void testValid() throws InterruptedException {

        getMockEndpoint(""mock:out"").expectedMessageCount(1);
        getMockEndpoint(""mock:invalid"").expectedMessageCount(0);

        template.sendBody(""direct:in"", ""valid"");

        assertMockEndpointsSatisfied();
    }

    @Test
    public void testInvalid() throws InterruptedException {
        getMockEndpoint(""mock:out"").expectedMessageCount(0);
        getMockEndpoint(""mock:invalid"").expectedMessageCount(1);

        template.sendBody(""direct:in"", ""wrong"");

        assertMockEndpointsSatisfied();
    }
}

{code}","Tested on camel 2.21.1, Java 8, Win",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-06 17:30:52.047,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 06 18:09:07 UTC 2018,,,,,,,0|i3uown:,9223372036854775807,,,,,,,,,,"06/Aug/18 17:30;davsclaus;Okay so this is expected to happen, because the validation is at the output, which happens after the message has completed being routed. So any error handler with onException does not apply here. (chicken and egg).

",06/Aug/18 17:34;davsclaus;However there was a little bug in the validator somewhere else which I have fixed.,06/Aug/18 18:09;davsclaus;Thanks for the unit test its been added to the source code and also a input validation variation.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Optimising toD via SendDynamicAware component removes the 3rd octet from IP address,CAMEL-12705,13176242,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Frasineanu,Frasineanu,01/Aug/18 21:12,02/Aug/18 12:44,13/Mar/19 22:20,02/Aug/18 12:44,2.22.0,,,,,,,,,,,,,,,2.22.1,2.23.0,,,,camel-core,,,,,,0,,,,"IP address 10.192.1.10 is optimized as 10.192.10
{code:java}
DEBUG in SendDynamicProcessor:264 [main] - DynamicSendTo sendTo(netty4-http:http://10.192.1.10:8080/client/alerts/summary?throwExceptionOnFailure=false) using ProducerCache with default cache size

DEBUG in SendDynamicProcessor:125 [Camel (camel-1) thread #6 - seda://alertSummary] - Optimising toD via SendDynamicAware component: netty4-http to use static uri: netty4-http:http:10.192.10:8080/path?throwExceptionOnFailure=false
{code}
The issue seems to be in AbstractCamelCatalog class, method ""doAsEndpointUri(String scheme, Map<String, String> properties, String ampersand, boolean encode) throws URISyntaxException""","Java 8, Camel 2.22.0, Spring Boot 2.0.3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-02 08:44:03.304,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 02 12:25:08 UTC 2018,,,,,,,0|i3wlan:,9223372036854775807,,,,,,,,,,"02/Aug/18 08:44;davsclaus;Yes this is an issue with camel-netty4, you can use either recipient list instead of toD or use another http component until this is fixed",02/Aug/18 12:20;davsclaus;Okay have a potential fix,02/Aug/18 12:25;Frasineanu;Thank you!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-zipkin - Root Span Id is not reported if the route calls multiple route,CAMEL-12656,13172420,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,st2654,st2654,16/Jul/18 14:59,01/Aug/18 08:48,13/Mar/19 22:20,01/Aug/18 08:48,2.21.1,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-zipkin,,,,,,0,,,,"Camel-Zipkin does not report traces with root span id when there are multiple routes. 

For example: 

 
{code:java}
from(""direct:foo"")
        .delay(1000)
        .to(""direct:bar"")
        .to(""direct:moo"")
        .to(""direct:tar"");

from(""direct:bar"")
        .delay(2000);

from(""direct:moo"")
        .delay(1000);

from(""direct:tar"")
        .delay(3000);
{code}
Root SpanId(TraceId) should be for service-name = direct:foo and the trace in UI should show all the 4 routes in one sequence. But it breaks. Check the attached screenshot: Traces Breaking.png

I looked into the code and figured out why its happening. Here is the code which is breaking the functionality.

Class Name: ZipkinTracer.ZipkinRoutePolicy
Inside onExchangeBegin() method 

 
{code:java}
// add on completion after the route is done, but before the consumer writes the response
// this allows us to track the zipkin event before returning the response which is the right time
exchange.addOnCompletion(new SynchronizationAdapter() {
    @Override
    public void onAfterRoute(Route route, Exchange exchange) {
        String serviceName = getServiceName(exchange, route.getEndpoint(), true, false);
        Brave brave = getBrave(serviceName);
        if (brave != null) {
            serverResponse(brave, serviceName, exchange);
        }
    }

    @Override
    public String toString() {
        return ""ZipkinTracerOnCompletion["" + routeId + ""]"";
    }
});
{code}
 

 

Using onAfterRoute() :  if the exchange is being routed through multiple routes, there will be callbacks for each route.

I have fix for it: 
If I use onExchangeDone() instead of above code. The traces are reported properly.  Check screenshots.

[https://zipkin.io/pages/instrumenting.html]

*Note* This process must be repeated if the service makes multiple downstream calls. That is each subsequent span will have the same trace id and parent id, but a new and different span id.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,16/Jul/18 14:32;st2654;Traces breaking.png;https://issues.apache.org/jira/secure/attachment/12931805/Traces+breaking.png,16/Jul/18 14:32;st2654;Traces fixed 1.png;https://issues.apache.org/jira/secure/attachment/12931806/Traces+fixed+1.png,16/Jul/18 14:32;st2654;Traces fixed 2.png;https://issues.apache.org/jira/secure/attachment/12931807/Traces+fixed+2.png,,3.0,,,,,,,,,,,,,,,,,,,2018-07-16 15:15:29.894,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 01 08:48:26 UTC 2018,,,,,,,0|i3vxqn:,9223372036854775807,,,,,,,,,,16/Jul/18 15:01;st2654;[~cibsen@e-ma.net] How can I assign this issue to me?,"16/Jul/18 15:15;ancosen;You can't. It's sufficient to leave a comment.

Also, test your app with the camel master code where we updated camel-zipkin. 

If you're breaking the normal behavior then your fix can be only be merged on master.","18/Jul/18 07:24;davsclaus;Yeah this seems more correct, thanks for the suggested fix. The root id should be used to group all of that activity on the exchange together, and your screenshots with the fix shows that.

You are welcome to provide a github PR with the fix
https://github.com/apache/camel/blob/master/CONTRIBUTING.md","01/Aug/18 03:54;githubbot;st2654 opened a new pull request #2448: CAMEL-12656: Fixed root span id for multiple routes.
URL: https://github.com/apache/camel/pull/2448
 
 
   https://issues.apache.org/jira/browse/CAMEL-12656
   I have added screenshots in Jira already.
   Camel-Zipkin does not report traces with root span id when there are multiple routes. 
   
   For example: 
   `from(""direct:foo"")
           .delay(1000)
           .to(""direct:bar"")
           .to(""direct:moo"")
           .to(""direct:tar"");
   
   from(""direct:bar"")
           .delay(2000);
   
   from(""direct:moo"")
           .delay(1000);
   
   from(""direct:tar"")
           .delay(3000);`
   
   Root SpanId(TraceId) should be for service-name = direct:foo and the trace in UI should show all the 4 routes in one sequence. But it breaks. Check the attached screenshot: Traces Breaking.png
   
   I looked into the code and figured out why its happening. Here is the code which is breaking the functionality.
   
   Class Name: ZipkinTracer.ZipkinRoutePolicy
   Inside onExchangeBegin() method 
   
    
   
   // add on completion after the route is done, but before the consumer writes the response
   // this allows us to track the zipkin event before returning the response which is the right time
   exchange.addOnCompletion(new SynchronizationAdapter() {
       @Override
       public void onAfterRoute(Route route, Exchange exchange) {
           String serviceName = getServiceName(exchange, route.getEndpoint(), true, false);
           Brave brave = getBrave(serviceName);
           if (brave != null) {
               serverResponse(brave, serviceName, exchange);
           }
       }
   
       @Override
       public String toString() {
           return ""ZipkinTracerOnCompletion["" + routeId + ""]"";
       }
   });
    
   
    
   
   Using onAfterRoute() :  if the exchange is being routed through multiple routes, there will be callbacks for each route.
   
   I have fix for it: 
   If I use onExchangeDone() instead of above code. The traces are reported properly.  Check screenshots.
   
   https://zipkin.io/pages/instrumenting.html
   
   Note This process must be repeated if the service makes multiple downstream calls. That is each subsequent span will have the same trace id and parent id, but a new and different span id.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Aug/18 03:54;githubbot;GitHub user st2654 opened a pull request:

    https://github.com/apache/camel/pull/2448

    CAMEL-12656: Fixed root span id for multiple routes.

    https://issues.apache.org/jira/browse/CAMEL-12656
    I have added screenshots in Jira already.
    Camel-Zipkin does not report traces with root span id when there are multiple routes. 
    
    For example: 
    `from(""direct:foo"")
            .delay(1000)
            .to(""direct:bar"")
            .to(""direct:moo"")
            .to(""direct:tar"");
    
    from(""direct:bar"")
            .delay(2000);
    
    from(""direct:moo"")
            .delay(1000);
    
    from(""direct:tar"")
            .delay(3000);`
    
    Root SpanId(TraceId) should be for service-name = direct:foo and the trace in UI should show all the 4 routes in one sequence. But it breaks. Check the attached screenshot: Traces Breaking.png
    
    I looked into the code and figured out why its happening. Here is the code which is breaking the functionality.
    
    Class Name: ZipkinTracer.ZipkinRoutePolicy
    Inside onExchangeBegin() method 
    
     
    
    // add on completion after the route is done, but before the consumer writes the response
    // this allows us to track the zipkin event before returning the response which is the right time
    exchange.addOnCompletion(new SynchronizationAdapter() {
        @Override
        public void onAfterRoute(Route route, Exchange exchange) {
            String serviceName = getServiceName(exchange, route.getEndpoint(), true, false);
            Brave brave = getBrave(serviceName);
            if (brave != null) {
                serverResponse(brave, serviceName, exchange);
            }
        }
    
        @Override
        public String toString() {
            return ""ZipkinTracerOnCompletion["" + routeId + ""]"";
        }
    });
     
    
     
    
    Using onAfterRoute() :  if the exchange is being routed through multiple routes, there will be callbacks for each route.
    
    I have fix for it: 
    If I use onExchangeDone() instead of above code. The traces are reported properly.  Check screenshots.
    
    https://zipkin.io/pages/instrumenting.html
    
    Note This process must be repeated if the service makes multiple downstream calls. That is each subsequent span will have the same trace id and parent id, but a new and different span id.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/st2654/camel CAMEL-12656

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2448.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2448
    
----
commit ca7fdaecc6645506a81c24409602ba3819b169b5
Author: Sourabh Taletiya <st2654@...>
Date:   2018-08-01T03:49:24Z

    CAMEL-12656: Fixed root span id for multiple routes.

----
","01/Aug/18 04:02;githubbot;st2654 commented on issue #2448: CAMEL-12656: Fixed root span id for multiple routes.
URL: https://github.com/apache/camel/pull/2448#issuecomment-409442095
 
 
   @oscerd @davsclaus How can I add you as reviewers??

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Aug/18 04:13;githubbot;st2654 commented on issue #2448: CAMEL-12656: Fixed root span id for multiple routes.
URL: https://github.com/apache/camel/pull/2448#issuecomment-409443582
 
 
   I want it to be part of SpringBoot 1.X and camel release 2.21.3 if possible.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Aug/18 08:38;githubbot;davsclaus commented on issue #2448: CAMEL-12656: Fixed root span id for multiple routes.
URL: https://github.com/apache/camel/pull/2448#issuecomment-409497470
 
 
   Thanks as the master branch has changed a bit with zipkin upgrades, then I can manually port it upwards.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Aug/18 08:38;githubbot;davsclaus closed pull request #2448: CAMEL-12656: Fixed root span id for multiple routes.
URL: https://github.com/apache/camel/pull/2448
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java b/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java
index fa6d8d2101f..401b14d9e09 100644
--- a/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java
+++ b/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java
@@ -757,24 +757,16 @@ public void onExchangeBegin(Route route, Exchange exchange) {
                     serverRequest(brave, serviceName, exchange);
                 }
             }
+        }
 
-            // add on completion after the route is done, but before the consumer writes the response
-            // this allows us to track the zipkin event before returning the response which is the right time
-            exchange.addOnCompletion(new SynchronizationAdapter() {
-                @Override
-                public void onAfterRoute(Route route, Exchange exchange) {
-                    String serviceName = getServiceName(exchange, route.getEndpoint(), true, false);
-                    Brave brave = getBrave(serviceName);
-                    if (brave != null) {
-                        serverResponse(brave, serviceName, exchange);
-                    }
-                }
-
-                @Override
-                public String toString() {
-                    return ""ZipkinTracerOnCompletion["" + routeId + ""]"";
-                }
-            });
+        // Report Server send after route has completed processing of the exchange.
+        @Override
+        public void onExchangeDone(Route route, Exchange exchange) {
+            String serviceName = getServiceName(exchange, route.getEndpoint(), true, false);
+            Brave brave = getBrave(serviceName);
+            if (brave != null) {
+                serverResponse(brave, serviceName, exchange);
+            }
         }
     }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Aug/18 08:38;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2448
",01/Aug/18 08:48;davsclaus;Thanks for the PR.,,,,,,,,,,,,,,,,,,,,,,
camel-cxfrs: NPE on GET request with Content-Type header,CAMEL-12575,13165641,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ramu11,chribble,chribble,12/Jun/18 18:15,01/Aug/18 07:24,13/Mar/19 22:20,01/Aug/18 07:24,2.21.1,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-cxfrs,,,,,,0,,,,"This commit  [https://github.com/apache/camel/commit/e4ad40f2eebb68cfde175b171538e26b278f63f6] modified DefaultCxfRsBinding.populateCxfRsResponseFromExchange in a way that causes an NPE on line #116 when a GET request is made with the Content-Type header set. Since Camel copies the request headers into the response, this causes the check for Content-Type to find the header and the code after that assumes that cxfExchange.getOutMessage() is non-null.

I can work around this by asking clients not to send the Content-Type header (which is generally meaningless for a GET), but I cannot force them not to send it. I think I can also add header filtering before the endpoint is executed to strip the Content-Type header for GET requests, but ideally DefaultCxfRsBinding.populateCxfRsResponseFromExchange would not call cxfExchange.getOutMessage().putIfAbsent if getOutMessage returns null.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-18 11:20:37.485,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 01 07:24:36 UTC 2018,,,,,,,0|i3us73:,9223372036854775807,,,,,,,,,,"18/Jun/18 11:20;davsclaus;Are you able to work on a PR / patch to help fix this?

https://github.com/apache/camel/blob/master/CONTRIBUTING.md","31/Jul/18 12:12;githubbot;ramu11 opened a new pull request #2446: CAMEL-12575:NPE on GET request with Content-Type header
URL: https://github.com/apache/camel/pull/2446
 
 
   CAMEL-12575:NPE on GET request with Content-Type header

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","31/Jul/18 12:12;githubbot;GitHub user ramu11 opened a pull request:

    https://github.com/apache/camel/pull/2446

    CAMEL-12575:NPE on GET request with Content-Type header

    CAMEL-12575:NPE on GET request with Content-Type header

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ramu11/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2446.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2446
    
----
commit f967f06d029a3ae8f008d13fbe8a392f1e5706d2
Author: Ramu <kkakarla@...>
Date:   2018-07-31T12:10:45Z

    CAMEL-12575:NPE on GET request with Content-Type header

----
","31/Jul/18 14:58;githubbot;oscerd commented on issue #2446: CAMEL-12575:NPE on GET request with Content-Type header
URL: https://github.com/apache/camel/pull/2446#issuecomment-409252000
 
 
   And maybe it would be good to use ObjectHelper too to check for null

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Aug/18 07:24;githubbot;oscerd commented on issue #2446: CAMEL-12575:NPE on GET request with Content-Type header
URL: https://github.com/apache/camel/pull/2446#issuecomment-409476750
 
 
   Thanks, merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Aug/18 07:24;githubbot;oscerd closed pull request #2446: CAMEL-12575:NPE on GET request with Content-Type header
URL: https://github.com/apache/camel/pull/2446
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
index 0ecfd7b4972..1ae15e91fe3 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
@@ -40,6 +40,7 @@
 import org.apache.camel.spi.HeaderFilterStrategy;
 import org.apache.camel.spi.HeaderFilterStrategyAware;
 import org.apache.camel.util.ExchangeHelper;
+import org.apache.camel.util.ObjectHelper;
 import org.apache.cxf.helpers.CastUtils;
 import org.apache.cxf.helpers.HttpHeaderHelper;
 import org.apache.cxf.jaxrs.impl.MetadataMap;
@@ -92,8 +93,10 @@ public Object populateCxfRsResponseFromExchange(Exchange camelExchange,
             
             if (response.getHeader(org.apache.cxf.message.Message.PROTOCOL_HEADERS) != null) {
                 Map<String, Object> headers = CastUtils.cast((Map<?, ?>)response.getHeader(org.apache.cxf.message.Message.PROTOCOL_HEADERS));
-                cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, 
+                if (!ObjectHelper.isEmpty(cxfExchange) && !ObjectHelper.isEmpty(cxfExchange.getOutMessage())) {
+                    cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, 
                                                         new TreeMap<>(String.CASE_INSENSITIVE_ORDER));
+                }
                 final Map<String, List<String>> cxfHeaders =
                     CastUtils.cast((Map<?, ?>) cxfExchange.getOutMessage().get(org.apache.cxf.message.Message.PROTOCOL_HEADERS));
                 
@@ -113,8 +116,10 @@ public Object populateCxfRsResponseFromExchange(Exchange camelExchange,
                 cxfExchange.put(org.apache.cxf.message.Message.RESPONSE_CODE, response.getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class));
             }
             if (response.getHeader(Exchange.CONTENT_TYPE) != null) {
-                cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, 
+                if (!ObjectHelper.isEmpty(cxfExchange) && !ObjectHelper.isEmpty(cxfExchange.getOutMessage())) {
+                    cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, 
                                                         new TreeMap<>(String.CASE_INSENSITIVE_ORDER));
+                }
                 final Map<String, List<String>> cxfHeaders =
                     CastUtils.cast((Map<?, ?>) cxfExchange.getOutMessage().get(org.apache.cxf.message.Message.PROTOCOL_HEADERS));
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Aug/18 07:24;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2446
",,,,,,,,,,,,,,,,,,,,,,,,,,
"EndpointRegistry, TransformerRegistry and ValidatorRegistry use wrong generics",CAMEL-12689,13174826,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,26/Jul/18 12:50,26/Jul/18 16:20,13/Mar/19 22:20,26/Jul/18 16:20,,,,,,,,,,,,,,,,2.23.0,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 26 16:20:11 UTC 2018,,,,,,,0|i3wckf:,9223372036854775807,,,,,,,,,,26/Jul/18 16:20;gnt;https://github.com/apache/camel/commit/6512ee08cf4dba1cfb65df13f06a7420a061d3cb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Annotation processors used in build should error out,CAMEL-12690,13174857,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,26/Jul/18 14:07,26/Jul/18 14:10,13/Mar/19 22:20,26/Jul/18 14:10,2.23.0,,,,,,,,,,,,,,,2.23.0,,,,,build system,,,,,,0,,,,"The annotation processors generate a log if they fail, but they do not fail the build. They should fail the build along with the log needed for debugging. Tracing issues due to missing JSON descriptors not generated by annotation processors back to the apt project is quite difficult otherwise.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-07-26 14:07:57.0,,,,,,,0|i3wcrb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-catalog - Transacted and Policy should not have outputs,CAMEL-12558,13164860,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Jun/18 06:11,24/Jul/18 12:35,13/Mar/19 22:20,08/Jun/18 07:09,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-catalog,,,,,,0,,,,"These 2 eips should not have output: true in the camel-catalog json meta-data.

For Camel 3.0 we will change their base class in the model so they are no outputs",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-24 12:06:44.466,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 24 12:35:51 UTC 2018,,,,,,,0|i3undr:,9223372036854775807,,,,,,,,,,"24/Jul/18 12:06;apupier;Can you precise a bit more the reasons why they should not have outputs?
They were previously ignored when there was some?",24/Jul/18 12:35;apupier;Shouldn't the xsd updated too?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix syntax for micrometer endpoint,CAMEL-12680,13174084,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,apupier,apupier,24/Jul/18 11:54,24/Jul/18 12:23,13/Mar/19 22:20,24/Jul/18 12:23,2.22.0,,,,,,,,,,,,,,,2.22.1,2.23.0,,,,,,,,,,0,,,,"provided syntax is micrometer:metricsType:meterName but it should be micrometer:metricsType:metricsName

(the component camel-micrometer is missing)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-07-24 11:54:04.0,,,,,,,0|i3w7zj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem in setting region for camel AWS-SQS endpoint,CAMEL-12647,13171831,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,saravanakumar,saravanakumar,12/Jul/18 21:18,18/Jul/18 09:26,13/Mar/19 22:20,18/Jul/18 09:26,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-aws,,,,,,0,,,,"It gives FailedToCreateRouteException while creating camel AWS-SQS endpoint with ARN.

For example, below producer or consumer endpoint is not being created.
{code:java}
uri=""aws-sqs://arn:aws:sqs:us-east-2:account:MyQueue?accessKey=xxx&secretKey=yyy&region=US_EAST_2""{code}
And it throws error as follows.
{code:java}
Caused by: java.lang.IllegalArgumentException: No enum constant com.amazonaws.regions.Regions.us-east-2
	at java.lang.Enum.valueOf(Enum.java:238)
	at com.amazonaws.regions.Regions.valueOf(Regions.java:26)
	at org.apache.camel.component.aws.sqs.SqsEndpoint.createClient(SqsEndpoint.java:310)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-12 21:45:42.172,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 13 12:16:08 UTC 2018,,,,,,,0|i3vubb:,9223372036854775807,,,,,,,,,,"12/Jul/18 21:45;githubbot;saravanakumar1987 opened a new pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424
 
 
   PR created for Bug : https://issues.apache.org/jira/browse/CAMEL-12647
   
   Thanks,
   Saravanakumar

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Jul/18 21:45;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/2424

    CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint

    PR created for Bug : https://issues.apache.org/jira/browse/CAMEL-12647
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2424.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2424
    
----
commit 9a2ce74a208f8df622536202acf3c2e26ef417a6
Author: Saravanakumar Selvaraj <saravanakumar.java@...>
Date:   2018-07-12T21:40:57Z

    CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint

----
","13/Jul/18 05:10;githubbot;onderson commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202245127
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   Should not this assert be null before this change?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 05:21;githubbot;saravanakumar1987 commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202246177
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   Region value was taken from ARN which was wrong. Take a look at the source file changes.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 05:24;githubbot;saravanakumar1987 commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202246177
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   Region value was taken from ARN which is wrong. Take a look at the source file changes.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 05:33;githubbot;onderson commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202247330
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   Why not? sqs://arn:aws:sqs:US_EAST_2:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 05:58;githubbot;saravanakumar1987 commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404734149
 
 
   ARN is actually created like “arn:aws:sqs:us-east-2:account:MyQueue”. You can try creating a SQS Queue in Aws and check the syntax of ARN. It’s not the right place to get Region. Later the value is directly used in com.amazonaws API directly and gives problem in enum. Check the error message I posted in CAMEL-12647.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 05:59;githubbot;saravanakumar1987 commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404734327
 
 
   aws-sns does not have this problem.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 07:02;githubbot;saravanakumar1987 commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202260036
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   ARN is actually created like “arn:aws:sqs:us-east-2:account:MyQueue”. You can try creating a SQS Queue in AWS and check the syntax of ARN. It’s not the right place to get Region. Later the value is directly used in com.amazonaws API and gives problem in enum. Check the error message I posted in CAMEL-12647. Also aws-sns does not have this problem.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 07:02;githubbot;saravanakumar1987 removed a comment on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404734149
 
 
   ARN is actually created like “arn:aws:sqs:us-east-2:account:MyQueue”. You can try creating a SQS Queue in Aws and check the syntax of ARN. It’s not the right place to get Region. Later the value is directly used in com.amazonaws API directly and gives problem in enum. Check the error message I posted in CAMEL-12647.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 07:02;githubbot;saravanakumar1987 removed a comment on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404734327
 
 
   aws-sns does not have this problem.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 07:09;githubbot;onderson commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202261323
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   In this case, region in ARN on sqs component possibly becomes irrelevant. Doesn't it? Maybe number of parts in ARN would require extre length checks and conditions control by this [line](https://github.com/apache/camel/pull/2424/files#diff-b27317b097ef229e2092bebe046882f9R60). What do you think @oscerd ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 07:31;githubbot;saravanakumar1987 commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202265472
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   Yes. camel aws-sql component uses com.amazonaws.AmazonWebServiceClient and it does not require ARN to get instance of it. The required parameters are parsed by camel from the given ARN.
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 07:31;githubbot;saravanakumar1987 commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202265472
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   Yes. camel aws-sqs component uses com.amazonaws.AmazonWebServiceClient and it does not require ARN to get instance of it. The required parameters are parsed by camel from the given ARN.
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 08:00;githubbot;oscerd commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202272063
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   The example of arn for an sqs endpoint is arn:aws:sqs:us-east-1:123456789012:MyQueue. The problem is that we are using the enum value of the Regions class, so probably we may need to double check if the region is specified as arn, then we need to manipulate it to use it and make it compliant to be used for the enum.  In my opinion the PR must be reviewed in this way.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 08:13;githubbot;saravanakumar1987 commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404760977
 
 
   @oscerd Do you say the region should be picked from ARN and deprecate the URI option ""region"" for the endpoint ? It can not be used for creating client com.amazonaws.AmazonWebServiceClient though. Because the enum expects the region to be in correct format.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 08:19;githubbot;oscerd commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404762327
 
 
   No. Arn is a thing, while endpoint region option is different stuff. If you use an arn, you don't need to specify a region as endpoint option, because the configuration will be populated starting from the arn. In case the region is obtained from the arn we need to make his value good for the enum. We don't have to deprecate anything.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 08:29;githubbot;saravanakumar1987 commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404764996
 
 
   Hi @oscerd ,
   
   In that case, it can not be fixed in our camel code. Because the Region is the class from AWS SDK : https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/regions/Regions.html
   
   I have actually made changes in this commit similar to how AWS-SNS component works. 
   
   Could you clarify what code changes can be performed here in this PR?
   
   Thanks,
   Saravanakumar

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 08:30;githubbot;saravanakumar1987 edited a comment on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404764996
 
 
   Hi @oscerd ,
   
   In that case, it can not be fixed in our camel code. Because the Regions is the enum from AWS SDK : https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/regions/Regions.html
   
   I have actually made changes in this commit similar to how AWS-SNS component works. 
   
   Could you clarify what code changes can be performed here in this PR?
   
   Thanks,
   Saravanakumar

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 08:34;githubbot;oscerd commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404766244
 
 
   Suppose you have the parts[3] of the arn, that is ""us-east-1""
   
   On line 63 of the SQSComponent class you need to do:
   
   `configuration.setRegion(Regions.fromName(parts[3]).toString())`
   
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 08:35;githubbot;oscerd commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404766382
 
 
   In this way you'll be able to use the region in the following code

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 10:57;githubbot;saravanakumar1987 commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404800303
 
 
   @oscerd I updated the PR with new changes. Please review.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 10:58;githubbot;saravanakumar1987 edited a comment on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404800303
 
 
   @oscerd @onderson I updated the PR with new changes. Please review.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 12:16;githubbot;oscerd commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404816081
 
 
   Thanks. Merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 12:16;githubbot;oscerd closed pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsComponent.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsComponent.java
index 655f92e5b55..89a0e92ba5b 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsComponent.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsComponent.java
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import com.amazonaws.regions.Regions;
 import org.apache.camel.CamelContext;
 import org.apache.camel.Endpoint;
 import org.apache.camel.impl.DefaultComponent;
@@ -54,7 +55,12 @@ protected Endpoint createEndpoint(String uri, String remaining, Map<String, Obje
             throw new IllegalArgumentException(""Topic name must be specified."");
         }
         if (remaining.startsWith(""arn:"")) {
+            String[] parts = remaining.split("":"");
+            if (parts.length != 6 || !parts[2].equals(""sns"")) {
+                throw new IllegalArgumentException(""Topic arn must be in format arn:aws:sns:region:account:name."");
+            }
             configuration.setTopicArn(remaining);
+            configuration.setRegion(Regions.fromName(parts[3]).toString());
         } else {
             configuration.setTopicName(remaining);
         }
diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsComponent.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsComponent.java
index e21610b0dc7..e09f76cbad8 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsComponent.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsComponent.java
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import com.amazonaws.regions.Regions;
 import org.apache.camel.CamelContext;
 import org.apache.camel.Endpoint;
 import org.apache.camel.impl.DefaultComponent;
@@ -60,7 +61,7 @@ protected Endpoint createEndpoint(String uri, String remaining, Map<String, Obje
             if (parts.length != 6 || !parts[2].equals(""sqs"")) {
                 throw new IllegalArgumentException(""Queue arn must be in format arn:aws:sqs:region:account:name."");
             }
-            configuration.setRegion(parts[3]);
+            configuration.setRegion(Regions.fromName(parts[3]).toString());
             configuration.setQueueOwnerAWSAccountId(parts[4]);
             configuration.setQueueName(parts[5]);
         } else {
diff --git a/components/camel-aws/src/test/java/org/apache/camel/component/aws/sns/SnsComponentConfigurationTest.java b/components/camel-aws/src/test/java/org/apache/camel/component/aws/sns/SnsComponentConfigurationTest.java
index 329263ff63a..0e564698407 100644
--- a/components/camel-aws/src/test/java/org/apache/camel/component/aws/sns/SnsComponentConfigurationTest.java
+++ b/components/camel-aws/src/test/java/org/apache/camel/component/aws/sns/SnsComponentConfigurationTest.java
@@ -61,10 +61,10 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSNSClient"", mock);
         SnsComponent component = new SnsComponent(context);
-        SnsEndpoint endpoint = (SnsEndpoint) component.createEndpoint(""aws-sns://arn:aws:sns:region:account:MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy"");
+        SnsEndpoint endpoint = (SnsEndpoint) component.createEndpoint(""aws-sns://arn:aws:sns:us-east-1:account:MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy"");
 
         assertNull(endpoint.getConfiguration().getTopicName());
-        assertEquals(""arn:aws:sns:region:account:MyTopic"", endpoint.getConfiguration().getTopicArn());
+        assertEquals(""arn:aws:sns:us-east-1:account:MyTopic"", endpoint.getConfiguration().getTopicArn());
     }
 
     @Test
diff --git a/components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java b/components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
index 240a48b2a31..2699482d716 100644
--- a/components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
+++ b/components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
@@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:us-east-1:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
+        assertEquals(""US_EAST_1"", endpoint.getConfiguration().getRegion());
         assertEquals(""account"", endpoint.getConfiguration().getQueueOwnerAWSAccountId());
         assertEquals(""MyQueue"", endpoint.getConfiguration().getQueueName());
         assertEquals(""xxx"", endpoint.getConfiguration().getAccessKey());


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 12:16;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2424
",,,,,,,
XmlConverter can't transform StAXSource when external xalan lib available,CAMEL-12637,13171328,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,11/Jul/18 07:57,11/Jul/18 08:21,13/Mar/19 22:20,11/Jul/18 08:21,,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"since external xalan impl doesn't support StAXSource, we should convert StAXSource to SAXSource firstly when external xalan is used

Otherwise we will see exception like

{code}

javax.xml.transform.TransformerException: Can't transform a Source of type javax.xml.transform.stax.StAXSource

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-07-11 07:57:58.0,,,,,,,0|i3vr7j:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Better attachment handling in camel-mail component,CAMEL-12630,13170790,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,09/Jul/18 07:18,09/Jul/18 08:28,13/Mar/19 22:20,09/Jul/18 08:28,2.21.1,2.22.0,2.23.0,,,,,,,,,,,,,2.20.4,2.21.2,2.22.1,2.23.0,,camel-mail,,,,,,0,,,,Attachment handling in camel-mail component should be improved.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-07-09 07:18:26.0,,,,,,,0|i3vnw7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rest Producer - Query Parameters : Wrong query parameter name is used when header substitution is performed ,CAMEL-12594,13167859,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,leonidre,leonidre,24/Jun/18 07:40,09/Jul/18 08:20,13/Mar/19 22:20,09/Jul/18 08:20,2.22.0,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-core,,,,,,0,rest,,,"CAMEL-11050 [https://github.com/apache/camel/commit/35638b280be7ca43031ea4c5d937590f30495e70]

Introduced a bug in this line 

[https://github.com/apache/camel/blob/6938a4ea6b68e295fae48f52e8e7cb2628f161a3/camel-core/src/main/java/org/apache/camel/component/rest/RestProducer.java#L409]

 

The fix is (probably) to replace the line with :

params.put(entry.getKey(), value);

 

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-25 06:29:36.589,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 09 08:20:48 UTC 2018,,,,,,,0|i3v653:,9223372036854775807,,,,,,,,,,25/Jun/18 06:29;dmvolod;You are welcome to provide PR and JUnit test for it.,"05/Jul/18 12:28;githubbot;leonidr opened a new pull request #2409: CAMEL-12594 repro
URL: https://github.com/apache/camel/pull/2409
 
 
   CAMEL-12594 repro

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Jul/18 12:28;githubbot;GitHub user leonidr opened a pull request:

    https://github.com/apache/camel/pull/2409

    CAMEL-12594 repro

    CAMEL-12594 repro

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/leonidr/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2409.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2409
    
----
commit 850681be7b9da8aaf80a7ae4e21b83e3bca13911
Author: leonidr <leonidre@...>
Date:   2018-07-05T12:27:50Z

    CAMEL-12594 repro
    
    CAMEL-12594 repro

----
","05/Jul/18 12:30;leonidre;[~dmvolod] - please find repro JUnit modification here - [https://github.com/apache/camel/pull/2409]

The code fix was already provided.

 

Repro was blind coded in github editor - so I hope it compiles at all ;)

 ","05/Jul/18 13:38;githubbot;dmvolod commented on issue #2409: CAMEL-12594 repro
URL: https://github.com/apache/camel/pull/2409#issuecomment-402724567
 
 
   @leonidr could you please to add fix also to this PR and wait for community review and merge

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Jul/18 13:39;githubbot;dmvolod edited a comment on issue #2409: CAMEL-12594 repro
URL: https://github.com/apache/camel/pull/2409#issuecomment-402724567
 
 
   @leonidr could you please to add a fix also to this PR and wait for community review and merge

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Jul/18 07:54;githubbot;davsclaus commented on issue #2409: CAMEL-12594 repro
URL: https://github.com/apache/camel/pull/2409#issuecomment-403392020
 
 
   Thanks for the PR, I am working on getting the fix and merged today

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Jul/18 08:20;githubbot;davsclaus commented on issue #2409: CAMEL-12594 repro
URL: https://github.com/apache/camel/pull/2409#issuecomment-403399015
 
 
   PR merged and a fix applied. Thanks for reporting.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Jul/18 08:20;githubbot;davsclaus closed pull request #2409: CAMEL-12594 repro
URL: https://github.com/apache/camel/pull/2409
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/test/java/org/apache/camel/component/rest/RestProducerTest.java b/camel-core/src/test/java/org/apache/camel/component/rest/RestProducerTest.java
index 0145e2bfa89..50ce9428467 100644
--- a/camel-core/src/test/java/org/apache/camel/component/rest/RestProducerTest.java
+++ b/camel-core/src/test/java/org/apache/camel/component/rest/RestProducerTest.java
@@ -40,17 +40,17 @@ public void shouldCreateDefinedQueryParameters() throws UnsupportedEncodingExcep
     public void shouldCreateOptionalPlaceholderQueryParametersForPresentValues()
         throws UnsupportedEncodingException, URISyntaxException {
         final DefaultMessage message = new DefaultMessage(camelContext);
-        message.setHeader(""param"", ""header"");
+        message.setHeader(""paramPlaceholderName"", ""paramValue"");
 
-        assertEquals(""param=header"", RestProducer.createQueryParameters(""param={param?}"", message));
+        assertEquals(""param=paramValue"", RestProducer.createQueryParameters(""param={paramPlaceholderName?}"", message));
     }
 
     @Test
     public void shouldCreatePlaceholderQueryParameters() throws UnsupportedEncodingException, URISyntaxException {
         final DefaultMessage message = new DefaultMessage(camelContext);
-        message.setHeader(""param"", ""header"");
+        message.setHeader(""paramPlaceholderName"", ""paramValue"");
 
-        assertEquals(""param=header"", RestProducer.createQueryParameters(""param={param}"", message));
+        assertEquals(""param=paramValue"", RestProducer.createQueryParameters(""param={paramPlaceholderName}"", message));
     }
 
     @Test
@@ -63,17 +63,17 @@ public void shouldNotCreateOptionalPlaceholderQueryParametersForMissingValues()
         throws UnsupportedEncodingException, URISyntaxException {
         final DefaultMessage message = new DefaultMessage(camelContext);
 
-        assertEquals("""", RestProducer.createQueryParameters(""param={param?}"", message));
+        assertEquals("""", RestProducer.createQueryParameters(""param={paramPlaceholderName?}"", message));
     }
 
     @Test
     public void shouldSupportAllCombinations() throws UnsupportedEncodingException, URISyntaxException {
         final DefaultMessage message = new DefaultMessage(camelContext);
-        message.setHeader(""required"", ""header_required"");
-        message.setHeader(""optional_present"", ""header_optional_present"");
+        message.setHeader(""requiredParamPlaceholder"", ""header_required_value"");
+        message.setHeader(""optionalPresentParamPlaceholder"", ""header_optional_present_value"");
 
-        assertEquals(""given=value&required=header_required&optional_present=header_optional_present"",
+        assertEquals(""given=value&required=header_required_value&optional_present=header_optional_present_value"",
             RestProducer.createQueryParameters(
-                ""given=value&required={required}&optional={optional?}&optional_present={optional_present?}"", message));
+                ""given=value&required={requiredParamPlaceholder}&optional={optionalParamPlaceholder?}&optional_present={optionalPresentParamPlaceholder?}"", message));
     }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Jul/18 08:20;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2409
",,,,,,,,,,,,,,,,,,,,,,,
"Rest DSL with Jetty9|netty4-http components returns 404 instead of 405, when http method is not supported",CAMEL-12621,13169981,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,04/Jul/18 02:44,04/Jul/18 09:37,13/Mar/19 22:20,04/Jul/18 03:00,,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,,,,,,,0,,,,"For example when a GET request is expected but client send a POST, currently it returns 404, however, it should return 405 instead, as resource actually exists and just the HTTP method mismatch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-07-04 02:44:14.0,,,,,,,0|i3vizb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Thread stuck in re-delivery loop after interrupting it,CAMEL-12603,13168795,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,NickUK,NickUK,28/Jun/18 07:55,04/Jul/18 08:15,13/Mar/19 22:20,04/Jul/18 08:15,,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"I have experienced an issue where we could not cancel a message stuck in a re-delivery cycle. I was using Jolokia and calling the interrupt method on the DefaultAsyncProcessorAwaitManager for the blocked exchange and I had expected the re-delivery cycle to stop.

This does not happen, and the blocked message continues to get executed and re-delivered. The mapping does get removed from the in-flight messages though. I can see also that the RejectedExecutionException set by the interrupt is also overwritten by the exception thrown by our failing bean. I think the problem here is that there are no checks for this RejectedExecutionException during the re-delivery cycle.

It seems like the following part of the RedeliveryErrorHandler::call should pick up the fact that the exchange has been interrupted:
{code:java}
// only process if the exchange hasn't failed
// and it has not been handled by the error processor
if (isDone(exchange)) {
 callback.done(false);
 return;
}{code}
This is an issue if you have configured a long re-delivery cycle and you have a message retrying that you know will never succeed. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-03 12:07:10.125,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 04 08:15:27 UTC 2018,,,,,,,0|i3vbnz:,9223372036854775807,,,,,,,,,,"03/Jul/18 12:07;githubbot;davsclaus commented on issue #2396: CAMEL-12603 - Interrupt fix for messages stuck in a re-delivery loop
URL: https://github.com/apache/camel/pull/2396#issuecomment-402132134
 
 
   Lets wait to merge this until we get the 2.22.x branch

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Jul/18 12:12;githubbot;dmvolod commented on a change in pull request #2396: CAMEL-12603 - Interrupt fix for messages stuck in a re-delivery loop
URL: https://github.com/apache/camel/pull/2396#discussion_r199783067
 
 

 ##########
 File path: camel-core/src/test/java/org/apache/camel/processor/async/AsyncProcessorAwaitManagerInterruptWithRedeliveryTest.java
 ##########
 @@ -0,0 +1,136 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.processor.async;
+
+import org.apache.camel.CamelExecutionException;
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.spi.AsyncProcessorAwaitManager;
+import org.apache.camel.util.jndi.JndiContext;
+
+import javax.naming.Context;
+import java.util.Collection;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.TimeUnit;
+
+import static org.mockito.Mockito.atMost;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+
+public class AsyncProcessorAwaitManagerInterruptWithRedeliveryTest extends ContextTestSupport {
+    private CountDownLatch latch;
+    private MyBean bean;
+
+    @Override
+    protected void setUp() throws Exception {
+        latch = new CountDownLatch(2);
+        bean = spy(new MyBean(latch));
+        super.setUp();
+    }
+
+    public void testAsyncAwaitInterrupt() throws Exception {
+        context.getAsyncProcessorAwaitManager().getStatistics().setStatisticsEnabled(true);
+
+        assertEquals(0, context.getAsyncProcessorAwaitManager().size());
+
+        getMockEndpoint(""mock:before"").expectedBodiesReceived(""Hello Camel"");
+        getMockEndpoint(""mock:result"").expectedMessageCount(0);
+        getMockEndpoint(""mock:error"").expectedMessageCount(0);
+
+        createThreadToInterrupt();
+        try {
+            template.sendBody(""direct:start"", ""Hello Camel"");
+            fail(""Should throw exception"");
+        } catch (CamelExecutionException e) {
+            RejectedExecutionException cause = assertIsInstanceOf(RejectedExecutionException.class, e.getCause());
+            assertTrue(cause.getMessage().startsWith(""Interrupted while waiting for asynchronous callback""));
+        }
+
+        assertMockEndpointsSatisfied();
+
+        // Check we have not reached the full 5 re-deliveries
+        verify(bean, atMost(4)).callMe();
+
+        assertEquals(0, context.getAsyncProcessorAwaitManager().size());
+        assertEquals(1, context.getAsyncProcessorAwaitManager().getStatistics().getThreadsBlocked());
+        assertEquals(1, context.getAsyncProcessorAwaitManager().getStatistics().getThreadsInterrupted());
+    }
+
+    private void createThreadToInterrupt() {
+        new Thread(() -> {
+            // Allow some time for camel exchange to enter the re-deliveries
+            try {
+                latch.await(1, TimeUnit.SECONDS);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+
+            // Get our blocked thread
+            int size = context.getAsyncProcessorAwaitManager().size();
+            System.out.println(""In-flight messages: "" + size);
 
 Review comment:
   Please avoid using System.out.println if it's not required for use-case. Use logs for it. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Jul/18 13:21;githubbot;NickUK commented on a change in pull request #2396: CAMEL-12603 - Interrupt fix for messages stuck in a re-delivery loop
URL: https://github.com/apache/camel/pull/2396#discussion_r199804106
 
 

 ##########
 File path: camel-core/src/test/java/org/apache/camel/processor/async/AsyncProcessorAwaitManagerInterruptWithRedeliveryTest.java
 ##########
 @@ -0,0 +1,136 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.processor.async;
+
+import org.apache.camel.CamelExecutionException;
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.spi.AsyncProcessorAwaitManager;
+import org.apache.camel.util.jndi.JndiContext;
+
+import javax.naming.Context;
+import java.util.Collection;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.TimeUnit;
+
+import static org.mockito.Mockito.atMost;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+
+public class AsyncProcessorAwaitManagerInterruptWithRedeliveryTest extends ContextTestSupport {
+    private CountDownLatch latch;
+    private MyBean bean;
+
+    @Override
+    protected void setUp() throws Exception {
+        latch = new CountDownLatch(2);
+        bean = spy(new MyBean(latch));
+        super.setUp();
+    }
+
+    public void testAsyncAwaitInterrupt() throws Exception {
+        context.getAsyncProcessorAwaitManager().getStatistics().setStatisticsEnabled(true);
+
+        assertEquals(0, context.getAsyncProcessorAwaitManager().size());
+
+        getMockEndpoint(""mock:before"").expectedBodiesReceived(""Hello Camel"");
+        getMockEndpoint(""mock:result"").expectedMessageCount(0);
+        getMockEndpoint(""mock:error"").expectedMessageCount(0);
+
+        createThreadToInterrupt();
+        try {
+            template.sendBody(""direct:start"", ""Hello Camel"");
+            fail(""Should throw exception"");
+        } catch (CamelExecutionException e) {
+            RejectedExecutionException cause = assertIsInstanceOf(RejectedExecutionException.class, e.getCause());
+            assertTrue(cause.getMessage().startsWith(""Interrupted while waiting for asynchronous callback""));
+        }
+
+        assertMockEndpointsSatisfied();
+
+        // Check we have not reached the full 5 re-deliveries
+        verify(bean, atMost(4)).callMe();
+
+        assertEquals(0, context.getAsyncProcessorAwaitManager().size());
+        assertEquals(1, context.getAsyncProcessorAwaitManager().getStatistics().getThreadsBlocked());
+        assertEquals(1, context.getAsyncProcessorAwaitManager().getStatistics().getThreadsInterrupted());
+    }
+
+    private void createThreadToInterrupt() {
+        new Thread(() -> {
+            // Allow some time for camel exchange to enter the re-deliveries
+            try {
+                latch.await(1, TimeUnit.SECONDS);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+
+            // Get our blocked thread
+            int size = context.getAsyncProcessorAwaitManager().size();
+            System.out.println(""In-flight messages: "" + size);
 
 Review comment:
   I have removed these

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Jul/18 06:33;githubbot;oscerd commented on issue #2396: CAMEL-12603 - Interrupt fix for messages stuck in a re-delivery loop
URL: https://github.com/apache/camel/pull/2396#issuecomment-402377752
 
 
   I'm preparing to merge this one.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Jul/18 08:15;githubbot;oscerd commented on issue #2396: CAMEL-12603 - Interrupt fix for messages stuck in a re-delivery loop
URL: https://github.com/apache/camel/pull/2396#issuecomment-402401097
 
 
   Merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Jul/18 08:15;githubbot;oscerd closed pull request #2396: CAMEL-12603 - Interrupt fix for messages stuck in a re-delivery loop
URL: https://github.com/apache/camel/pull/2396
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/impl/DefaultAsyncProcessorAwaitManager.java b/camel-core/src/main/java/org/apache/camel/impl/DefaultAsyncProcessorAwaitManager.java
index c8dafaa19d7..4a9ef4ddf53 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/DefaultAsyncProcessorAwaitManager.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/DefaultAsyncProcessorAwaitManager.java
@@ -161,6 +161,7 @@ public void interrupt(Exchange exchange) {
                     interruptedCounter.incrementAndGet();
                 }
                 exchange.setException(new RejectedExecutionException(""Interrupted while waiting for asynchronous callback for exchangeId: "" + exchange.getExchangeId()));
+                exchange.setProperty(Exchange.INTERRUPTED, Boolean.TRUE);
                 entry.getLatch().countDown();
             }
         }
diff --git a/camel-core/src/test/java/org/apache/camel/processor/async/AsyncProcessorAwaitManagerInterruptWithRedeliveryTest.java b/camel-core/src/test/java/org/apache/camel/processor/async/AsyncProcessorAwaitManagerInterruptWithRedeliveryTest.java
new file mode 100644
index 00000000000..c400d4d9756
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/processor/async/AsyncProcessorAwaitManagerInterruptWithRedeliveryTest.java
@@ -0,0 +1,134 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.processor.async;
+
+import org.apache.camel.CamelExecutionException;
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.spi.AsyncProcessorAwaitManager;
+import org.apache.camel.util.jndi.JndiContext;
+
+import javax.naming.Context;
+import java.util.Collection;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.TimeUnit;
+
+import static org.mockito.Mockito.atMost;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+
+public class AsyncProcessorAwaitManagerInterruptWithRedeliveryTest extends ContextTestSupport {
+    private CountDownLatch latch;
+    private MyBean bean;
+
+    @Override
+    protected void setUp() throws Exception {
+        latch = new CountDownLatch(2);
+        bean = spy(new MyBean(latch));
+        super.setUp();
+    }
+
+    public void testAsyncAwaitInterrupt() throws Exception {
+        context.getAsyncProcessorAwaitManager().getStatistics().setStatisticsEnabled(true);
+
+        assertEquals(0, context.getAsyncProcessorAwaitManager().size());
+
+        getMockEndpoint(""mock:before"").expectedBodiesReceived(""Hello Camel"");
+        getMockEndpoint(""mock:result"").expectedMessageCount(0);
+        getMockEndpoint(""mock:error"").expectedMessageCount(0);
+
+        createThreadToInterrupt();
+        try {
+            template.sendBody(""direct:start"", ""Hello Camel"");
+            fail(""Should throw exception"");
+        } catch (CamelExecutionException e) {
+            RejectedExecutionException cause = assertIsInstanceOf(RejectedExecutionException.class, e.getCause());
+            assertTrue(cause.getMessage().startsWith(""Interrupted while waiting for asynchronous callback""));
+        }
+
+        assertMockEndpointsSatisfied();
+
+        // Check we have not reached the full 5 re-deliveries
+        verify(bean, atMost(4)).callMe();
+
+        assertEquals(0, context.getAsyncProcessorAwaitManager().size());
+        assertEquals(1, context.getAsyncProcessorAwaitManager().getStatistics().getThreadsBlocked());
+        assertEquals(1, context.getAsyncProcessorAwaitManager().getStatistics().getThreadsInterrupted());
+    }
+
+    private void createThreadToInterrupt() {
+        new Thread(() -> {
+            // Allow some time for camel exchange to enter the re-deliveries
+            try {
+                latch.await(1, TimeUnit.SECONDS);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+
+            // Get our blocked thread
+            int size = context.getAsyncProcessorAwaitManager().size();
+            assertEquals(1, size);
+
+            Collection<AsyncProcessorAwaitManager.AwaitThread> threads = context.getAsyncProcessorAwaitManager().browse();
+            AsyncProcessorAwaitManager.AwaitThread thread = threads.iterator().next();
+
+            // Interrupt it
+            String id = thread.getExchange().getExchangeId();
+            context.getAsyncProcessorAwaitManager().interrupt(id);
+        }).start();
+    }
+
+    @Override
+    protected Context createJndiContext() throws Exception {
+        JndiContext jndiContext = new JndiContext();
+
+        jndiContext.bind(""myBean"", bean);
+        return jndiContext;
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() {
+                errorHandler(deadLetterChannel(""mock:error"")
+                    .maximumRedeliveries(5)
+                    .redeliveryDelay(100)
+                    .asyncDelayedRedelivery());
+
+                from(""direct:start"").routeId(""myRoute"")
+                    .to(""mock:before"")
+                    .bean(""myBean"", ""callMe"")
+                    .to(""mock:result"");
+            }
+        };
+    }
+
+    public static class MyBean {
+        private CountDownLatch latch;
+
+        public MyBean(CountDownLatch latch) {
+            this.latch = latch;
+        }
+
+        public void callMe() throws Exception {
+            latch.countDown();
+            throw new Exception();
+        }
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Jul/18 08:15;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2396
",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel file endpoint loses modification date and length information when preMove is used,CAMEL-12613,13169536,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jpoth,jpoth,jpoth,02/Jul/18 13:49,04/Jul/18 07:01,13/Mar/19 22:20,03/Jul/18 14:43,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"I'll work on a PR with a unit test, thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-03 14:39:32.163,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 03 14:42:15 UTC 2018,,,,,,,0|i3vg8f:,9223372036854775807,,,,,,,,,,"03/Jul/18 14:39;githubbot;johnpoth opened a new pull request #2405: [CAMEL-12613] Use GenericFile's absolute path when updating file head…
URL: https://github.com/apache/camel/pull/2405
 
 
   …ers as it is updated when the underlying file is moved
   
   https://issues.apache.org/jira/browse/CAMEL-12613
   
   Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Jul/18 14:39;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/2405

    [CAMEL-12613] Use GenericFile's absolute path when updating file head…

    …ers as it is updated when the underlying file is moved
    
    https://issues.apache.org/jira/browse/CAMEL-12613
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-12613

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2405.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2405
    
----
commit 77b24cde0ee5e6fb53f3510399cbfce3192f4eed
Author: jpoth <poth.john@...>
Date:   2018-07-02T14:10:04Z

    [CAMEL-12613] Use GenericFile's absolute path when updating file headers as it is updated when the underlying file is moved

----
","03/Jul/18 14:42;githubbot;johnpoth closed pull request #2405: [CAMEL-12613] Use GenericFile's absolute path when updating file head…
URL: https://github.com/apache/camel/pull/2405
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java
index ccf73e7cef7..c984d6644c9 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java
@@ -241,8 +241,12 @@ protected boolean isMatched(GenericFile<File> file, String doneFileName, List<Fi
 
     @Override
     protected void updateFileHeaders(GenericFile<File> file, Message message) {
-        long length = file.getFile().length();
-        long modified = file.getFile().lastModified();
+        File upToDateFile = file.getFile();
+        if (fileHasMoved(file)) {
+            upToDateFile = new File(file.getAbsoluteFilePath());
+        }
+        long length = upToDateFile.length();
+        long modified = upToDateFile.lastModified();
         file.setFileLength(length);
         file.setLastModified(modified);
         if (length >= 0) {
@@ -257,4 +261,9 @@ protected void updateFileHeaders(GenericFile<File> file, Message message) {
     public FileEndpoint getEndpoint() {
         return (FileEndpoint) super.getEndpoint();
     }
+
+    private boolean fileHasMoved(GenericFile<File> file) {
+        // GenericFile's absolute path is always up to date whereas the underlying file is not
+        return !file.getFile().getAbsolutePath().equals(file.getAbsoluteFilePath());
+    }
 }
diff --git a/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPreMoveLastModifiedTest.java b/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPreMoveLastModifiedTest.java
new file mode 100644
index 00000000000..719145d1f13
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPreMoveLastModifiedTest.java
@@ -0,0 +1,61 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+
+public class FileConsumerPreMoveLastModifiedTest extends ContextTestSupport {
+
+    @Override
+    protected void setUp() throws Exception {
+        deleteDirectory(""target/premove"");
+        super.setUp();
+    }
+
+    public void testPreMoveLastModified() throws Exception {
+        MockEndpoint mock = getMockEndpoint(""mock:result"");
+        mock.expectedMessageCount(1);
+        template.sendBodyAndHeader(""file://target/premove"", ""Hello World"", Exchange.FILE_NAME, ""hello.txt"");
+
+        assertMockEndpointsSatisfied();
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""file://target/premove?preMove=work/work-${file:name}&initialDelay=0&delay=10&keepLastModified=true"")
+                        .process(new LastModifiedCheckerProcessor())
+                        .log(""Got file ${file:name} modified=${file:modified}"")
+                        .to(""mock:result"");
+            }
+        };
+    }
+
+    private static class LastModifiedCheckerProcessor implements Processor {
+
+        public void process(Exchange exchange) throws Exception {
+            assertTrue(exchange.getIn().getHeader(Exchange.FILE_LAST_MODIFIED, Long.class) > 0L);
+            assertTrue(exchange.getIn().getHeader(Exchange.FILE_LENGTH, Long.class) > 0L);
+        }
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Jul/18 14:42;githubbot;Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/2405
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
regression in camel test blueprint behaviour,CAMEL-12606,13169168,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,valdar,valdar,valdar,29/Jun/18 14:01,02/Jul/18 08:04,13/Mar/19 22:20,02/Jul/18 08:04,,,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,,,,,,,0,,,,"This commit https://github.com/apache/camel/commit/1a73fa61a6e0f1125e516798d0cabc1198328684 introduced a regression on how camel test blue print behaves regarding loading of TypeConverters only defined in {{META-INF/services/org/apache/camel/TypeConverter}}:
before the commit such a converter would be loaded because the felix.connect bundle would see the descriptor (i.e. {{META-INF/services/org/apache/camel/TypeConverter}} ) after that commit the TypeConverter is ignored.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-29 14:47:58.458,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 29 15:18:21 UTC 2018,,,,,,,0|i3vdyv:,9223372036854775807,,,,,,,,,,"29/Jun/18 14:47;githubbot;valdar opened a new pull request #2400: CAMEL-12606: Fixed regression in camel test blueprint behaviour.
URL: https://github.com/apache/camel/pull/2400
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Jun/18 14:47;githubbot;GitHub user valdar opened a pull request:

    https://github.com/apache/camel/pull/2400

    CAMEL-12606: Fixed regression in camel test blueprint behaviour.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/valdar/camel CAMEL-12606

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2400.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2400
    
----
commit 8d9a2f4c38865e3ef6c629fbb2a75caea1525ef5
Author: Andrea Tarocchi <atarocch@...>
Date:   2018-06-29T14:36:52Z

    CAMEL-12606: Fixed regression in camel test blueprint behaviour.

----
","29/Jun/18 14:49;githubbot;oscerd commented on issue #2400: CAMEL-12606: Fixed regression in camel test blueprint behaviour.
URL: https://github.com/apache/camel/pull/2400#issuecomment-401377742
 
 
   @gzurowski are you already cutting the release? This should be useful for blueprint testing to have in.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Jun/18 14:55;githubbot;gzurowski commented on issue #2400: CAMEL-12606: Fixed regression in camel test blueprint behaviour.
URL: https://github.com/apache/camel/pull/2400#issuecomment-401379610
 
 
   Not yet, please merge it into `master` so that it will be part of the 2.22.0 release.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Jun/18 15:15;githubbot;oscerd closed pull request #2400: CAMEL-12606: Fixed regression in camel test blueprint behaviour.
URL: https://github.com/apache/camel/pull/2400
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java b/camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java
index 40b5b52ef81..0b1f9156967 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java
@@ -254,7 +254,7 @@ protected boolean canSee(Bundle bundle, Class<?> clazz) {
 
         // it may be running outside real OSGi container such as when unit testing with camel-test-blueprint
         // then we need to use a different canSee algorithm that works outside real OSGi
-        if (bundle.getBundleId() > 0) {
+        if (bundle.getBundleId() >= 0) {
             Bundle root = bundle.getBundleContext().getBundle(0);
             if (root != null && ""org.apache.felix.connect"".equals(root.getSymbolicName())) {
                 return checkCompat(bundle, clazz);
diff --git a/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.java b/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.java
new file mode 100644
index 00000000000..369cc6007a0
--- /dev/null
+++ b/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.java
@@ -0,0 +1,44 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.test.blueprint.converter;
+
+import org.apache.camel.test.blueprint.CamelBlueprintTestSupport;
+import org.apache.camel.test.blueprint.Foo;
+import org.junit.Test;
+
+public class CustomConverterRegressionTest extends CamelBlueprintTestSupport {
+    
+    @Override
+    protected String getBlueprintDescriptor() {
+        return ""org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.xml"";
+    }
+
+    @Test
+    public void testCustomConverter() throws Exception {
+        getMockEndpoint(""mock:result"").expectedMessageCount(1);
+        getMockEndpoint(""mock:result"").message(0).body().isInstanceOf(Foo.class);
+
+        template.sendBody(""direct:start"", ""John,Doe"");
+
+        assertMockEndpointsSatisfied();
+
+        Foo foo = getMockEndpoint(""mock:result"").getReceivedExchanges().get(0).getIn().getBody(Foo.class);
+        assertEquals(""John"", foo.getFirst());
+        assertEquals(""Doe"", foo.getLast());
+    }
+
+}
diff --git a/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/converter/FooConverterRegression.java b/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/converter/FooConverterRegression.java
new file mode 100644
index 00000000000..26c2ba3d7ad
--- /dev/null
+++ b/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/converter/FooConverterRegression.java
@@ -0,0 +1,37 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.test.blueprint.converter;
+
+import org.apache.camel.Converter;
+import org.apache.camel.TypeConverters;
+import org.apache.camel.test.blueprint.Foo;
+
+public class FooConverterRegression {
+
+    public FooConverterRegression() {
+    }
+    
+    @Converter
+    public Foo convertToFoo(String data) {
+        String[] s = data.split("","");
+        Foo foo = new Foo();
+        foo.setFirst(s[0]);
+        foo.setLast(s[1]);
+        return foo;
+    }
+
+}
diff --git a/components/camel-test-blueprint/src/test/resources/META-INF/services/org/apache/camel/TypeConverter b/components/camel-test-blueprint/src/test/resources/META-INF/services/org/apache/camel/TypeConverter
index 2b0f5e590bf..ae8dad18d1c 100644
--- a/components/camel-test-blueprint/src/test/resources/META-INF/services/org/apache/camel/TypeConverter
+++ b/components/camel-test-blueprint/src/test/resources/META-INF/services/org/apache/camel/TypeConverter
@@ -15,4 +15,4 @@
 # limitations under the License.
 #
 
-org.apache.camel.test.blueprint.converter.MyConverter
\ No newline at end of file
+org.apache.camel.test.blueprint.converter.FooConverterRegression
\ No newline at end of file
diff --git a/components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.xml b/components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.xml
new file mode 100644
index 00000000000..8548e3e9c6b
--- /dev/null
+++ b/components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.xml
@@ -0,0 +1,36 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
+           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+           xsi:schemaLocation=""
+             http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">
+
+  <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
+
+    <route>
+      <from uri=""direct:start""/>
+      <convertBodyTo type=""org.apache.camel.test.blueprint.Foo""/>
+      <to uri=""mock:result""/>
+    </route>
+
+  </camelContext>
+
+</blueprint>
+


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Jun/18 15:15;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2400
","29/Jun/18 15:18;githubbot;oscerd commented on issue #2400: CAMEL-12606: Fixed regression in camel test blueprint behaviour.
URL: https://github.com/apache/camel/pull/2400#issuecomment-401386315
 
 
   This is merged, I'll leave the JIRA open to backport, but for 2.22.0 we are already fine. Thanks @valdar @gzurowski 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Wordpress don't set basic authentication even if user and password are provided,CAMEL-12602,13168716,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ricardozanini,ricardozanini,27/Jun/18 20:22,29/Jun/18 13:32,13/Mar/19 22:20,28/Jun/18 06:06,2.21.0,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-wordpress,,,,,,0,,,,"When setting user/password for Basic Authentication, the component misses adding the HTTP headers to perform the actual authentication.

Users should see the following message in logs, even though the user/pass properties are set:

{{2018-06-27 17:20:16 [main] WARN o.a.c.c.w.p.WordpressPostProducer - Wordpress Producer hasn't authentication. This may lead to errors during route execution. Wordpress writing operations need authentication.}}

 ",,,,,,,,,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-27 23:53:11.639,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 29 13:32:37 UTC 2018,,,,,,,0|i3vb6f:,9223372036854775807,,,,,,,,,,"27/Jun/18 23:53;githubbot;ricardozanini opened a new pull request #2397: CAMEL-12602: Fixing issue with basic authentication
URL: https://github.com/apache/camel/pull/2397
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Jun/18 23:53;githubbot;GitHub user ricardozanini opened a pull request:

    https://github.com/apache/camel/pull/2397

    CAMEL-12602: Fixing issue with basic authentication

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ricardozanini/camel CAMEL-12602

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2397.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2397
    
----
commit e58aefe150c335e60f785426834f62375b0ce3c8
Author: Ricardo Zanini <ricardozanini@...>
Date:   2018-06-27T23:50:04Z

    CAMEL-12602: Fixing issue with basic authentication

----
","28/Jun/18 06:07;githubbot;oscerd commented on issue #2397: CAMEL-12602: Fixing issue with basic authentication
URL: https://github.com/apache/camel/pull/2397#issuecomment-400921166
 
 
   Thanks. The PR has been merged on master.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","28/Jun/18 06:07;githubbot;oscerd closed pull request #2397: CAMEL-12602: Fixing issue with basic authentication
URL: https://github.com/apache/camel/pull/2397
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-wordpress/src/main/docs/wordpress-component.adoc b/components/camel-wordpress/src/main/docs/wordpress-component.adoc
index 54fb3183118..0c1e575a2b2 100644
--- a/components/camel-wordpress/src/main/docs/wordpress-component.adoc
+++ b/components/camel-wordpress/src/main/docs/wordpress-component.adoc
@@ -77,7 +77,7 @@ The `WordpressConfiguration` class can be used to set initial properties configu
 ----
 public void configure() {
     final WordpressConfiguration configuration = new WordpressConfiguration();
-    final WordpressComponent component = new WordpressComponent();
+    final WordpressComponentConfiguration component = new WordpressComponentConfiguration();
     configuration.setApiVersion(""2"");
     configuration.setUrl(""http://yoursite.com/wp-json/"");
     component.setConfiguration(configuration);
diff --git a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/WordpressServiceProvider.java b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/WordpressServiceProvider.java
index 4954623cb34..98c827c9e17 100644
--- a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/WordpressServiceProvider.java
+++ b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/WordpressServiceProvider.java
@@ -71,6 +71,7 @@ public void init(WordpressAPIConfiguration config) {
         this.services = new HashMap<>();
         this.services.put(WordpressServicePosts.class, servicePosts);
         this.services.put(WordpressServiceUsers.class, serviceUsers);
+        this.configuration = config;
 
         LOGGER.info(""Wordpress Service Provider initialized using base URL: {}, API Version {}"", config.getApiUrl(), config.getApiVersion());
     }
diff --git a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/auth/WordpressBasicAuthentication.java b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/auth/WordpressBasicAuthentication.java
index 6f63c48be59..78b92aa8090 100644
--- a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/auth/WordpressBasicAuthentication.java
+++ b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/auth/WordpressBasicAuthentication.java
@@ -19,6 +19,8 @@
 import org.apache.cxf.common.util.Base64Utility;
 import org.apache.cxf.jaxrs.client.ClientConfiguration;
 import org.apache.cxf.jaxrs.client.WebClient;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Basic Authentication implementation for Wordpress authentication mechanism. Should be used only on tested environments due to lack of security. Be aware that credentials will be passed over each
@@ -30,6 +32,8 @@
  */
 public class WordpressBasicAuthentication extends BaseWordpressAuthentication {
 
+    private static final Logger LOGGER = LoggerFactory.getLogger(BaseWordpressAuthentication.class);
+
     public WordpressBasicAuthentication() {
     }
 
@@ -45,8 +49,11 @@ public WordpressBasicAuthentication(String username, String password) {
     @Override
     public void configureAuthentication(Object api) {
         if (isCredentialsSet()) {
-            final String authorizationHeader = String.format(""Basic "", Base64Utility.encode(String.format(""%s:%s"", this.username, this.password).getBytes()));
+            final String authorizationHeader = String.format(""Basic %s"", Base64Utility.encode(String.format(""%s:%s"", this.username, this.password).getBytes()));
+            LOGGER.info(""Credentials set for user {}"", username);
             WebClient.client(api).header(""Authorization"", authorizationHeader);
+        } else {
+            LOGGER.warn(""Credentials not set because username or password are empty."");
         }
     }
 
diff --git a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/impl/AbstractWordpressServiceAdapter.java b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/impl/AbstractWordpressServiceAdapter.java
index 59037e807b5..5ba844f6b2c 100644
--- a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/impl/AbstractWordpressServiceAdapter.java
+++ b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/impl/AbstractWordpressServiceAdapter.java
@@ -57,10 +57,6 @@
         WebClient.getConfig(spi).getInInterceptors().add(new LoggingInInterceptor());
         WebClient.getConfig(spi).getOutInterceptors().add(new LoggingOutInterceptor());
 
-        if (this.authentication != null) {
-            this.authentication.configureAuthentication(spi);
-        }
-
         LOGGER.info(""******* {} API initialized *********"", spi.getClass().getSimpleName());
     }
 
@@ -77,5 +73,8 @@ protected final String getApiVersion() {
     @Override
     public final void setWordpressAuthentication(WordpressAuthentication authentication) {
         this.authentication = authentication;
+        if (this.authentication != null) {
+            this.authentication.configureAuthentication(spi);
+        }
     }
 }
diff --git a/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServicePostsAdapterTest.java b/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServicePostsAdapterTest.java
index 9adfd6a06ff..ca49e6eb18b 100644
--- a/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServicePostsAdapterTest.java
+++ b/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServicePostsAdapterTest.java
@@ -17,12 +17,14 @@
 package org.apache.camel.component.wordpress.api.service.impl;
 
 import java.util.List;
+import org.apache.camel.component.wordpress.api.auth.WordpressBasicAuthentication;
 import org.apache.camel.component.wordpress.api.model.Content;
 import org.apache.camel.component.wordpress.api.model.Format;
 import org.apache.camel.component.wordpress.api.model.Post;
 import org.apache.camel.component.wordpress.api.model.PostSearchCriteria;
 import org.apache.camel.component.wordpress.api.service.WordpressServicePosts;
 import org.apache.camel.component.wordpress.api.test.WordpressMockServerTestSupport;
+import org.apache.camel.component.wordpress.api.test.WordpressServerHttpRequestHandler;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import static org.hamcrest.CoreMatchers.is;
@@ -39,6 +41,7 @@
     @BeforeClass
     public static void before() {
         servicePosts = serviceProvider.getService(WordpressServicePosts.class);
+        servicePosts.setWordpressAuthentication(new WordpressBasicAuthentication(WordpressServerHttpRequestHandler.USERNAME, WordpressServerHttpRequestHandler.PASSWORD));
     }
 
     @Test
diff --git a/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/ignored/WordpressServiceUsersAdapterTest.java b/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServiceUsersAdapterTest.java
similarity index 87%
rename from components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/ignored/WordpressServiceUsersAdapterTest.java
rename to components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServiceUsersAdapterTest.java
index c4ba5a5610b..c9c69c19597 100644
--- a/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/ignored/WordpressServiceUsersAdapterTest.java
+++ b/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServiceUsersAdapterTest.java
@@ -14,13 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.camel.component.wordpress.api.service.impl.ignored;
+package org.apache.camel.component.wordpress.api.service.impl;
 
 import java.util.List;
+import org.apache.camel.component.wordpress.api.auth.WordpressBasicAuthentication;
 import org.apache.camel.component.wordpress.api.model.User;
 import org.apache.camel.component.wordpress.api.model.UserSearchCriteria;
 import org.apache.camel.component.wordpress.api.service.WordpressServiceUsers;
 import org.apache.camel.component.wordpress.api.test.WordpressMockServerTestSupport;
+import org.apache.camel.component.wordpress.api.test.WordpressServerHttpRequestHandler;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import static org.hamcrest.CoreMatchers.is;
@@ -37,6 +39,7 @@
     @BeforeClass
     public static void before() {
         serviceUsers = serviceProvider.getService(WordpressServiceUsers.class);
+        serviceUsers.setWordpressAuthentication(new WordpressBasicAuthentication(WordpressServerHttpRequestHandler.USERNAME, WordpressServerHttpRequestHandler.PASSWORD));
     }
 
     @Test
diff --git a/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/test/WordpressServerHttpRequestHandler.java b/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/test/WordpressServerHttpRequestHandler.java
index 4d5482b2c83..d68c693ac62 100644
--- a/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/test/WordpressServerHttpRequestHandler.java
+++ b/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/test/WordpressServerHttpRequestHandler.java
@@ -17,9 +17,12 @@
 package org.apache.camel.component.wordpress.api.test;
 
 import java.io.IOException;
+import java.nio.charset.Charset;
+import java.util.Base64;
 import java.util.Collections;
 import java.util.Map;
 import org.apache.cxf.helpers.IOUtils;
+import org.apache.http.Header;
 import org.apache.http.HttpException;
 import org.apache.http.HttpRequest;
 import org.apache.http.HttpResponse;
@@ -33,6 +36,9 @@
 import org.slf4j.LoggerFactory;
 
 public class WordpressServerHttpRequestHandler implements HttpRequestHandler {
+    
+    public static final String USERNAME = ""ben"";
+    public static final String PASSWORD = ""password123"";
 
     private static final Logger LOGGER = LoggerFactory.getLogger(WordpressServerHttpRequestHandler.class);
 
@@ -50,6 +56,12 @@ public WordpressServerHttpRequestHandler(Map<String, String> mockResourceJsonRes
     public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {
         LOGGER.debug(""received request {}"", request);
         final HttpRequestWrapper requestWrapper = HttpRequestWrapper.wrap(request);
+        // make sure that our writing operations have authentication header
+        if (!authenticate(requestWrapper)) {
+            response.setStatusCode(HttpStatus.SC_FORBIDDEN);
+            response.setEntity(new StringEntity(""Forbidden"", ContentType.TEXT_PLAIN));
+            return;
+        }
         final String responseBody = IOUtils.toString(this.getClass().getResourceAsStream(mockResourceJsonResponse.get(requestWrapper.getMethod())));
         if (responseBody == null) {
             LOGGER.warn(""Resource not found on {}. Response body null."", mockResourceJsonResponse);
@@ -58,4 +70,19 @@ public void handle(HttpRequest request, HttpResponse response, HttpContext conte
         response.setEntity(new StringEntity(responseBody, ContentType.APPLICATION_JSON));
     }
 
+    private boolean authenticate(HttpRequestWrapper request) {
+        // read operations don't need to authenticate
+        if (request.getMethod().contentEquals(""GET"")) {
+            return true;
+        }
+        for (Header authorizationHeader : request.getHeaders(""Authorization"")) {
+            // Authorization: Basic base64credentials
+            String base64Credentials = authorizationHeader.getValue().substring(""Basic"".length()).trim();
+            String credentials = new String(Base64.getDecoder().decode(base64Credentials), Charset.forName(""UTF-8""));
+            // credentials = username:password
+            final String[] values = credentials.split("":"", 2);
+            return USERNAME.equals(values[0]) && PASSWORD.equals(values[1]);
+        }
+        return false;
+    }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","28/Jun/18 06:07;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2397
","29/Jun/18 13:26;githubbot;ricardozanini commented on issue #2397: CAMEL-12602: Fixing issue with basic authentication
URL: https://github.com/apache/camel/pull/2397#issuecomment-401353495
 
 
   Hi @oscerd! Is it possible to merge this one if 2.21.x branch as well? :fearful: 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Jun/18 13:27;githubbot;oscerd commented on issue #2397: CAMEL-12602: Fixing issue with basic authentication
URL: https://github.com/apache/camel/pull/2397#issuecomment-401353914
 
 
   Yeah, seems I forgot about backporting, thanks for spotting.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Jun/18 13:32;githubbot;oscerd commented on issue #2397: CAMEL-12602: Fixing issue with basic authentication
URL: https://github.com/apache/camel/pull/2397#issuecomment-401355290
 
 
   Backported, sorry

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,
Re-apply CAMEL-12104 Unintuitive default cxf timeout behavior,CAMEL-12577,13166048,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,14/Jun/18 09:16,14/Jun/18 11:52,13/Mar/19 22:20,14/Jun/18 11:52,,,,,,,,,,,,,,,,2.22.0,,,,,camel-cxf,,,,,,0,,,,CAMEL-12104 was temporarily reverted via CAMEL-12409. We can re-apply CAMEL-12104 through reverting CAMEL-12409 now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-14 09:56:37.328,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 14 11:52:23 UTC 2018,,,,,,,0|i3uupj:,9223372036854775807,,,,,,,,,,"14/Jun/18 09:56;githubbot;ppalaga opened a new pull request #2374: CAMEL-12577: Re-apply CAMEL-12104 Unintuitive default cxf timeout
URL: https://github.com/apache/camel/pull/2374
 
 
   behavior

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Jun/18 09:56;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2374

    CAMEL-12577: Re-apply CAMEL-12104 Unintuitive default cxf timeout

    behavior

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-12577

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2374.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2374
    
----
commit ebbf89550078b4f99f30804c89296a0e56612c57
Author: Peter Palaga <ppalaga@...>
Date:   2018-06-14T09:32:16Z

    CAMEL-12577: Re-apply CAMEL-12104 Unintuitive default cxf timeout
    behavior

----
",14/Jun/18 10:11;ancosen;May I ask you why CAMEL-12104 can be re-applied?,14/Jun/18 11:40;ppalaga;CAMEL-12104 was temporarily reverted - see CAMEL-12409 It was actually a favor made towards us in WFC till we are able to consume CXF 3.2.4 via WF 13. WF 13 appeared recently so the revert of CAMEL-12104 can be undone now. ,"14/Jun/18 11:41;ancosen;Sorry, thanks for explaining. I didn't remember about this.","14/Jun/18 11:52;githubbot;oscerd closed pull request #2374: CAMEL-12577: Re-apply CAMEL-12104 Unintuitive default cxf timeout
URL: https://github.com/apache/camel/pull/2374
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java
index 3ba12bf138a..95705c7a83d 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java
@@ -191,7 +191,7 @@ public void done(boolean doneSync) {
                         }
                     });
 
-                } else if (continuation.isResumed()) {
+                } else if (!continuation.isTimeout() && continuation.isResumed()) {
                     org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange)continuation.getObject();
                     try {
                         setResponseBack(cxfExchange, camelExchange);
@@ -199,7 +199,8 @@ public void done(boolean doneSync) {
                         CxfConsumer.this.doneUoW(camelExchange);
                         throw ex;
                     }
-                } else if (!continuation.isResumed() && !continuation.isPending()) {
+
+                } else if (continuation.isTimeout() || (!continuation.isResumed() && !continuation.isPending())) {
                     org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange)continuation.getObject();
                     try {
                         if (!continuation.isPending()) {
diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java
index 29d9fa3eb90..fef3818f43a 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java
@@ -104,7 +104,7 @@ public void done(boolean doneSync) {
                 });
                 return null;
             }
-            if (continuation.isResumed()) {
+            if (!continuation.isTimeout() && continuation.isResumed()) {
                 cxfExchange.put(SUSPENED, Boolean.FALSE);
                 org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange)continuation.getObject();
                 try {
@@ -114,7 +114,7 @@ public void done(boolean doneSync) {
                     throw ex;
                 }
             } else {
-                if (!continuation.isPending()) {
+                if (continuation.isTimeout() || !continuation.isPending()) {
                     cxfExchange.put(SUSPENED, Boolean.FALSE);
                     org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange)continuation.getObject();
                     camelExchange.setException(new ExchangeTimedOutException(camelExchange, endpoint.getContinuationTimeout()));
diff --git a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerContinuationTimeoutTest.java b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerContinuationTimeoutTest.java
index cfe31bde6e5..d628501ddb3 100644
--- a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerContinuationTimeoutTest.java
+++ b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerContinuationTimeoutTest.java
@@ -25,7 +25,6 @@
 import org.apache.camel.builder.RouteBuilder;
 import org.apache.camel.test.junit4.CamelTestSupport;
 import org.apache.camel.util.AsyncProcessorHelper;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class CxfConsumerContinuationTimeoutTest extends CamelTestSupport {
@@ -114,7 +113,6 @@ public void testNoTimeout() throws Exception {
     }
 
     @Test
-    @Ignore(""CAMEL-12104"")
     public void testTimeout() throws Exception {
         String out = template.requestBodyAndHeader(""direct:start"", ""Bye World"", ""priority"", ""slow"", String.class);
         assertTrue(out.contains(""The OUT message was not received within: 5000 millis.""));


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Jun/18 11:52;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2374
","14/Jun/18 11:52;githubbot;oscerd commented on issue #2374: CAMEL-12577: Re-apply CAMEL-12104 Unintuitive default cxf timeout
URL: https://github.com/apache/camel/pull/2374#issuecomment-397267577
 
 
   Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException thrown KafkaSpanDecorator,CAMEL-12573,13165602,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,akhettar,akhettar,12/Jun/18 15:41,14/Jun/18 08:25,13/Mar/19 22:20,13/Jun/18 06:19,,,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,camel-opentracing,,,,,,0,,,,"ClassCastException is thrown by `KafkaSpanDecorator` for the Partition and the Offset header values. The fix to this is to cast the partition to an Integer and the Offset to a Long. I have got a fix for it and here is a pull request for it: https://github.com/apache/camel/pull/2372 
{code:java}
2018-06-12 16:36:26.224 WARN 34820 --- [kaConsumer[ocr]] o.a.camel.opentracing.OpenTracingTracer : OpenTracing: Failed to capture tracing data

java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String
at org.apache.camel.opentracing.decorators.KafkaSpanDecorator.pre(KafkaSpanDecorator.java:61) ~[camel-opentracing-2.21.0.jar:2.21.0]
at org.apache.camel.opentracing.OpenTracingTracer$OpenTracingRoutePolicy.onExchangeBegin(OpenTracingTracer.java:297) ~[camel-opentracing-2.21.0.jar:2.21.0]
at org.apache.camel.processor.CamelInternalProcessor$RoutePolicyAdvice.before(CamelInternalProcessor.java:495) [camel-core-2.21.0.jar:2.21.0]
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:149) [camel-core-2.21.0.jar:2.21.0]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [camel-core-2.21.0.jar:2.21.0]
at org.apache.camel.component.kafka.KafkaConsumer$KafkaFetchRecords.doRun(KafkaConsumer.java:295) [camel-kafka-2.21.0.jar:2.21.0]
at org.apache.camel.component.kafka.KafkaConsumer$KafkaFetchRecords.run(KafkaConsumer.java:187) [camel-kafka-2.21.0.jar:2.21.0]
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_151]
at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_151]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_151]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_151]
at java.lang.Thread.run(Thread.java:748) [na:1.8.0_151]
{code}
{code:java}
 {code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-12 15:47:12.548,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 14 08:25:30 UTC 2018,,,,,,,0|i3uryf:,9223372036854775807,,,,,,,,,,"12/Jun/18 15:47;githubbot;akhettar opened a new pull request #2372: CAMEL-12573: Fixing class cast exception
URL: https://github.com/apache/camel/pull/2372
 
 
   I have introduced a generic method which extracts the values of the `Partition` and the `Offset` from the Exchange headers according to their corresponding types.
   
   Here is the Jira ticket for it.https://issues.apache.org/jira/browse/CAMEL-12573

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Jun/18 15:47;githubbot;GitHub user akhettar opened a pull request:

    https://github.com/apache/camel/pull/2372

    CAMEL-12573: Fixing class cast exception

    I have introduced a generic method which extracts the values of the `Partition` and the `Offset` from the Exchange headers according to their corresponding types.
    
    Here is the Jira ticket for it.https://issues.apache.org/jira/browse/CAMEL-12573

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/akhettar/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2372.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2372
    
----
commit aa9464cdd8a30ff9a88bf893999158ec7c8ae40e
Author: akhettar <ayache@...>
Date:   2018-06-12T15:31:12Z

    Fixing class cast exception. Handling kafka.Partition as Integer and kafka.Offset as a Long.

----
","12/Jun/18 15:48;akhettar;Can anyone review this for me, please? Pull request: [https://github.com/apache/camel/pull/2372] ","12/Jun/18 15:49;githubbot;oscerd commented on issue #2372: CAMEL-12573: Fixing class cast exception
URL: https://github.com/apache/camel/pull/2372#issuecomment-396639580
 
 
   Can you please add the Jira number to the commit message? Otherwise it looks good.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Jun/18 16:10;githubbot;akhettar commented on issue #2372: CAMEL-12573: Fixing class cast exception
URL: https://github.com/apache/camel/pull/2372#issuecomment-396646766
 
 
   @oscerd I've just amended the commit with the Jira nunber

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Jun/18 16:11;githubbot;akhettar commented on issue #2372: CAMEL-12573: Fixing class cast exception
URL: https://github.com/apache/camel/pull/2372#issuecomment-396646766
 
 
   @oscerd I've just amended the commit with the Jira number

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jun/18 06:19;githubbot;oscerd commented on issue #2372: CAMEL-12573: Fixing class cast exception
URL: https://github.com/apache/camel/pull/2372#issuecomment-396826349
 
 
   Merged on master, 2.21.x and 2.20.x, thanks.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jun/18 06:19;githubbot;oscerd closed pull request #2372: CAMEL-12573: Fixing class cast exception
URL: https://github.com/apache/camel/pull/2372
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/KafkaSpanDecorator.java b/components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/KafkaSpanDecorator.java
index ecc92797d58..1ec0a6886eb 100644
--- a/components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/KafkaSpanDecorator.java
+++ b/components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/KafkaSpanDecorator.java
@@ -58,7 +58,7 @@ public String getDestination(Exchange exchange, Endpoint endpoint) {
     public void pre(Span span, Exchange exchange, Endpoint endpoint) {
         super.pre(span, exchange, endpoint);
 
-        String partition = (String)exchange.getIn().getHeader(PARTITION);
+        String partition = getValue(exchange, PARTITION, Integer.class);
         if (partition != null) {
             span.setTag(KAFKA_PARTITION_TAG, partition);
         }
@@ -73,10 +73,22 @@ public void pre(Span span, Exchange exchange, Endpoint endpoint) {
             span.setTag(KAFKA_KEY_TAG, key);
         }
 
-        String offset = (String)exchange.getIn().getHeader(OFFSET);
+        String offset = getValue(exchange, OFFSET, Long.class);
         if (offset != null) {
             span.setTag(KAFKA_OFFSET_TAG, offset);
         }
     }
 
+    /**
+     * Extracts header value from the exchange for given header
+     * @param exchange the {@link Exchange}
+     * @param header the header name
+     * @param type the class type of the exchange header
+     * @return
+     */
+    private <T> String getValue(final Exchange exchange, final String header, Class<T> type) {
+         T partition = exchange.getIn().getHeader(header, type);
+         return partition != null ? String.valueOf(partition) : exchange.getIn().getHeader(header, String.class);
+    }
+
 }
diff --git a/components/camel-opentracing/src/test/java/org/apache/camel/opentracing/decorators/KafkaSpanDecoratorTest.java b/components/camel-opentracing/src/test/java/org/apache/camel/opentracing/decorators/KafkaSpanDecoratorTest.java
index b3eda9c3770..2c51def5b47 100644
--- a/components/camel-opentracing/src/test/java/org/apache/camel/opentracing/decorators/KafkaSpanDecoratorTest.java
+++ b/components/camel-opentracing/src/test/java/org/apache/camel/opentracing/decorators/KafkaSpanDecoratorTest.java
@@ -19,6 +19,7 @@
 import io.opentracing.mock.MockSpan;
 import io.opentracing.mock.MockTracer;
 
+import jdk.nashorn.internal.IntDeque;
 import org.apache.camel.Endpoint;
 import org.apache.camel.Exchange;
 import org.apache.camel.Message;
@@ -59,7 +60,7 @@ public void testGetDestinationNoHeaderTopic() {
     }
 
     @Test
-    public void testPre() {
+    public void testPreOffsetAndPartitionAsStringHeader() {
         String testKey = ""TestKey"";
         String testOffset = ""TestOffset"";
         String testPartition = ""TestPartition"";
@@ -72,8 +73,8 @@ public void testPre() {
         Mockito.when(endpoint.getEndpointUri()).thenReturn(""test"");
         Mockito.when(exchange.getIn()).thenReturn(message);
         Mockito.when(message.getHeader(KafkaSpanDecorator.KEY)).thenReturn(testKey);
-        Mockito.when(message.getHeader(KafkaSpanDecorator.OFFSET)).thenReturn(testOffset);
-        Mockito.when(message.getHeader(KafkaSpanDecorator.PARTITION)).thenReturn(testPartition);
+        Mockito.when(message.getHeader(KafkaSpanDecorator.OFFSET, String.class)).thenReturn(testOffset);
+        Mockito.when(message.getHeader(KafkaSpanDecorator.PARTITION, String.class)).thenReturn(testPartition);
         Mockito.when(message.getHeader(KafkaSpanDecorator.PARTITION_KEY)).thenReturn(testPartitionKey);
 
         SpanDecorator decorator = new KafkaSpanDecorator();
@@ -89,4 +90,29 @@ public void testPre() {
         assertEquals(testPartitionKey, span.tags().get(KafkaSpanDecorator.KAFKA_PARTITION_KEY_TAG));
     }
 
+    @Test
+    public void testPrePartitionAsIntegerHeaderAndOffsetAsLongHeader() {
+        Long testOffset = 4875454l;
+        Integer testPartition = 0;
+
+        Endpoint endpoint = Mockito.mock(Endpoint.class);
+        Exchange exchange = Mockito.mock(Exchange.class);
+        Message message = Mockito.mock(Message.class);
+
+        Mockito.when(endpoint.getEndpointUri()).thenReturn(""test"");
+        Mockito.when(exchange.getIn()).thenReturn(message);
+        Mockito.when(message.getHeader(KafkaSpanDecorator.OFFSET, Long.class)).thenReturn(testOffset);
+        Mockito.when(message.getHeader(KafkaSpanDecorator.PARTITION, Integer.class)).thenReturn(testPartition);
+
+        SpanDecorator decorator = new KafkaSpanDecorator();
+
+        MockTracer tracer = new MockTracer();
+        MockSpan span = tracer.buildSpan(""TestSpan"").start();
+
+        decorator.pre(span, exchange, endpoint);
+
+        assertEquals(String.valueOf(testOffset), span.tags().get(KafkaSpanDecorator.KAFKA_OFFSET_TAG));
+        assertEquals(String.valueOf(testPartition), span.tags().get(KafkaSpanDecorator.KAFKA_PARTITION_TAG));
+    }
+
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jun/18 06:19;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2372
","13/Jun/18 16:29;akhettar;[~ancosen] any idea in which release this fix is going to be?

Thanks","13/Jun/18 16:32;ancosen;2.22.0,2.21.2 and 2.20.4",14/Jun/18 08:25;akhettar;Many thanks,,,,,,,,,,,,,,,,,,,,,
camel-kubernetes: serviceCall EIP configuration is not read from application.properties,CAMEL-12560,13164959,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,nferraro,nferraro,08/Jun/18 15:56,08/Jun/18 21:55,13/Mar/19 22:20,08/Jun/18 21:55,,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,,,,,,,0,,,,"Configuration of servicecall eip is not read by any starter in camel-kubernetes.

 

I've put configuration under:
{code:java}
camel.cloud.kubernetes.service-discovery...{code}
 

But service-call eip ignores it.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-06-08 15:56:53.0,,,,,,,0|i3unzr:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kubernetes: serviceCall EIP throws NullPointerException,CAMEL-12561,13164961,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,nferraro,nferraro,08/Jun/18 16:03,08/Jun/18 21:55,13/Mar/19 22:20,08/Jun/18 21:55,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-kubernetes,,,,,,0,,,,"I've written the following route:

 
{code:java}
rest().get(""/purchases"")
  .route()
  .serviceCall().name(""inventory/api/purchases"")
    .kubernetesServiceDiscovery();{code}
But when I run the service inside Openshift I get:
{code:java}
org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.component.kubernetes.cloud.KubernetesEnvServiceDiscovery.getServices(KubernetesEnvServiceDiscovery.java:44)
	at org.apache.camel.impl.cloud.DefaultServiceLoadBalancer.process(DefaultServiceLoadBalancer.java:132)
	at org.apache.camel.impl.cloud.DefaultServiceCallProcessor.process(DefaultServiceCallProcessor.java:185)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
	at org.apache.camel.http.common.CamelServlet.doService(CamelServlet.java:208)
	at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:78)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)
	at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)
	at io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:64)
	at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)
	at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:132)
	at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)
	at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)
	at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)
	at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)
	at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:292)
	at io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:81)
	at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:138)
	at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:135)
	at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)
	at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)
	at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:272)
	at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81)
	at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:104)
	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:336)
	at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.kubernetes.cloud.KubernetesEnvServiceDiscovery.getServices(KubernetesEnvServiceDiscovery.java:38)
	... 55 more{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-06-08 16:03:15.0,,,,,,,0|i3uo07:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
saga-eip: do not hang if option cannot be computed,CAMEL-12555,13163826,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,04/Jun/18 12:44,07/Jun/18 14:57,13/Mar/19 22:20,07/Jun/18 14:57,2.21.0,2.21.1,,,,,,,,,,,,,,2.22.0,,,,,,,,,,,0,,,,"Saga-enabled exchanges hang if the expression associated with a option fails. We should throw a error and conclude the saga with failure instead.
{code:java}
from(""timer:tick"")
  .saga().option(""data"", simple(""${something / fails}""))
      .log(""exchange and saga hang...""){code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-06-04 12:44:46.0,,,,,,,0|i3uh0f:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel does not have logic that checks that it should only retry when its a new/changed file,CAMEL-12551,13163201,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,RedaBalkouch,RedaBalkouch,31/May/18 16:54,05/Jun/18 12:09,13/Mar/19 22:20,05/Jun/18 12:07,2.20.2,,,,,,,,,,,,,,,2.22.0,,,,,camel-stream,,,,,,0,,,,"Hello,

I am reading a file using the stream camel component. The behaviour expected is the following :
 # Read the stream
 # When the file roll over, start the reading the file from the begining

My code :

{{from(""stream:file?fileName=myfile&scanStream=true&scanStreamDelay=1000&retry=true"") }}

The problem with the code above is that the same file is read every 1000ms. The component don't check is the file was rolled over.

Thanks in advance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-04 12:40:02.047,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 05 12:09:22 UTC 2018,,,,,,,0|i3ud5r:,9223372036854775807,,,,,,,,,,"04/Jun/18 12:40;davsclaus;Okay taking a look at this, and its a bit more tricky to roll-over the file when its changed. So we need to add some more logic to make this more reliable.","04/Jun/18 14:51;davsclaus;Hmm we may need to either hash the file to know if it was changed / rollover. Or try to use the java nio api with the file event watcher (a bit cumbersome code). However the latter would assume that when a file rollover, then its deleted and created again, so we have a deleted (or created) event to listen to.",05/Jun/18 12:09;davsclaus;There is a new fileWatcher=true option you need to turn on as well.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in camel-cmis when using wrong credentials,CAMEL-12548,13163121,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,31/May/18 11:41,04/Jun/18 05:55,13/Mar/19 22:20,04/Jun/18 05:55,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,2.23.0,,,camel-cmis,,,,,,0,,,,"If you try to send something via cmis (uri in blueprint: {{""cmis:// ... ""}}) and you use a wrong password then on the second (and all subsequent) tries you will get a {{NullPointerExceptionException}}.

Stacktrace:
{code}
java.lang.NullPointerException
 at org.apache.camel.component.cmis.CMISSessionFacade.getCMISTypeFor(CMISSessionFacade.java:221)
 at org.apache.camel.component.cmis.CMISProducer.isFolder(CMISProducer.java:146)
 at org.apache.camel.component.cmis.CMISProducer.parentFolderPathFor(CMISProducer.java:132)
 at org.apache.camel.component.cmis.CMISProducer.createNode(CMISProducer.java:101)
 at org.apache.camel.component.cmis.CMISProducer.process(CMISProducer.java:62)
 at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
 at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
 at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:196)
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
 at org.apache.camel.processor.TryProcessor.process(TryProcessor.java:113)
 at org.apache.camel.processor.TryProcessor.process(TryProcessor.java:84)
 at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:196)
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:196)
 at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.asyncInvoke(CxfConsumer.java:165)
 at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.invoke(CxfConsumer.java:144)
 at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 at java.util.concurrent.FutureTask.run(FutureTask.java:266)
 at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(ServiceInvokerInterceptor.java:126)
 at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
 at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:131)
 at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)
 at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)
 at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:254)
 at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:234)
 at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:208)
 at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:160)
 at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:180)
 at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:299)
 at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:218)
 at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
 at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:274)
 at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812)
 at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669)
 at org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter.doFilter(WebSocketUpgradeFilter.java:201)
 at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
 at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
 at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:72)
 at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
 at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)
 at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)
 at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
 at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:287)
 at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
 at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
 at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
 at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
 at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:80)
 at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
 at org.eclipse.jetty.server.Server.handle(Server.java:499)
 at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)
 at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:258)
 at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)
 at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
 at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
 at java.lang.Thread.run(Thread.java:748)
{code}

The {{CMISProducer}} creates a {{CMISSessionFacade}} ({{CMISProducer.getSessionFacade()}}), delegates the initialization of a session to the facade ({{CMISSessionFacade.initSession()}}) and stores the facade inside a member variable. The {{CMISSessionFacade}} creates a Session, tries to connect to the remote system and stores the created Session object inside a member variable. If the provided password for the remote system is wrong then at this point a {{CmisUnauthorizedException}} (basically a {{RuntimeException}}) is thrown.

({{org.apache.chemistry.opencmis.commons.exceptions.CmisUnauthorizedException: Unauthorized}})

This behavior is ok but the consequence is that a member variable inside the {{CMISSessionFacade}} (called ""session"") is still null.

Camel caches the {{CMISProducer}} with its reference to {{CMISSessionFacade}} whose ""session"" is set to null. If you try to send something else via cmis then you get the {{NullPointerException}} as described above.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-04 02:50:20.058,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 04 05:55:37 UTC 2018,,,,,,,0|i3ucnz:,9223372036854775807,,,,,,,,,,"04/Jun/18 02:50;githubbot;tadayosi opened a new pull request #2357: CAMEL-12548: NullPointerException in camel-cmis when using wrong cred…
URL: https://github.com/apache/camel/pull/2357
 
 
   …entials
   
   It makes sure the sessionFacade is assgined to the field only after the session is successfully initialised, so that the sessionFacade never dangles in an incomplete state.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Jun/18 02:50;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/2357

    CAMEL-12548: NullPointerException in camel-cmis when using wrong cred…

    …entials
    
    It makes sure the sessionFacade is assgined to the field only after the session is successfully initialised, so that the sessionFacade never dangles in an incomplete state.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-12548

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2357.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2357
    
----
commit 08aa6124bc710179b608ed1538d966ea91b1f39b
Author: Tadayoshi Sato <sato.tadayoshi@...>
Date:   2018-06-04T02:46:53Z

    CAMEL-12548: NullPointerException in camel-cmis when using wrong credentials

----
","04/Jun/18 05:40;githubbot;davsclaus closed pull request #2357: CAMEL-12548: NullPointerException in camel-cmis when using wrong cred…
URL: https://github.com/apache/camel/pull/2357
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cmis/src/main/java/org/apache/camel/component/cmis/CMISProducer.java b/components/camel-cmis/src/main/java/org/apache/camel/component/cmis/CMISProducer.java
index 4097260ef7d..dc927020e2d 100644
--- a/components/camel-cmis/src/main/java/org/apache/camel/component/cmis/CMISProducer.java
+++ b/components/camel-cmis/src/main/java/org/apache/camel/component/cmis/CMISProducer.java
@@ -195,8 +195,11 @@ private String getMimeType(Message message) throws NoSuchHeaderException {
 
     private CMISSessionFacade getSessionFacade() throws Exception {
         if (sessionFacade == null) {
-            sessionFacade = sessionFacadeFactory.create(getEndpoint());
+            CMISSessionFacade sessionFacade = sessionFacadeFactory.create(getEndpoint());
             sessionFacade.initSession();
+            // make sure to set sessionFacade to the field after successful initialisation
+            // so that it has a valid session
+            this.sessionFacade = sessionFacade;
         }
 
         return sessionFacade;


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Jun/18 05:40;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2357
",04/Jun/18 05:55;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-google-mail: adding the camel component to a spring boot project leads to java.lang.NoSuchMethodError: javax.servlet.ServletContext.getClassLoader()Ljava/lang/ClassLoader;,CAMEL-12536,13161803,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,lb,lb,24/May/18 15:21,01/Jun/18 07:20,13/Mar/19 22:20,01/Jun/18 07:20,2.21.1,2.22.0,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,,,,,,,0,,,,"I've created a very simple spring boot (1.x) which includes camel-google-mail as dependency and when running the application, the following exception is thrown:

{code}
java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run (AbstractRunMojo.java:527)
    at java.lang.Thread.run (Thread.java:748)
Caused by: org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is java.lang.NoSuchMethodError: javax.servlet.ServletContext.getClassLoader()Ljava/lang/ClassLoader;
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh (EmbeddedWebApplicationContext.java:137)
    at org.springframework.context.support.AbstractApplicationContext.refresh (AbstractApplicationContext.java:537)
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh (EmbeddedWebApplicationContext.java:122)
    at org.springframework.boot.SpringApplication.refresh (SpringApplication.java:693)
    at org.springframework.boot.SpringApplication.refreshContext (SpringApplication.java:360)
    at org.springframework.boot.SpringApplication.run (SpringApplication.java:303)
    at org.springframework.boot.SpringApplication.run (SpringApplication.java:1118)
    at org.springframework.boot.SpringApplication.run (SpringApplication.java:1107)
    at test.Application.main (Application.java:9)
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run (AbstractRunMojo.java:527)
    at java.lang.Thread.run (Thread.java:748)
Caused by: java.lang.NoSuchMethodError: javax.servlet.ServletContext.getClassLoader()Ljava/lang/ClassLoader;
    at io.undertow.websockets.jsr.Bootstrap.handleDeployment (Bootstrap.java:92)
    at io.undertow.servlet.core.DeploymentManagerImpl.handleExtensions (DeploymentManagerImpl.java:263)
    at io.undertow.servlet.core.DeploymentManagerImpl.deploy (DeploymentManagerImpl.java:153)
    at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createDeploymentManager (UndertowEmbeddedServletContainerFactory.java:412)
    at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.getEmbeddedServletContainer (UndertowEmbeddedServletContainerFactory.java:234)
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer (EmbeddedWebApplicationContext.java:164)
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh (EmbeddedWebApplicationContext.java:134)
    at org.springframework.context.support.AbstractApplicationContext.refresh (AbstractApplicationContext.java:537)
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh (EmbeddedWebApplicationContext.java:122)
    at org.springframework.boot.SpringApplication.refresh (SpringApplication.java:693)
    at org.springframework.boot.SpringApplication.refreshContext (SpringApplication.java:360)
    at org.springframework.boot.SpringApplication.run (SpringApplication.java:303)
    at org.springframework.boot.SpringApplication.run (SpringApplication.java:1118)
    at org.springframework.boot.SpringApplication.run (SpringApplication.java:1107)
    at test.Application.main (Application.java:9)
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run (AbstractRunMojo.java:527)
    at java.lang.Thread.run (Thread.java:748)

{code}

Sample project included in the attached reproducer",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,24/May/18 15:20;lb;project.tgz;https://issues.apache.org/jira/secure/attachment/12924961/project.tgz,,,,1.0,,,,,,,,,,,,,,,,,,,2018-05-24 22:09:01.313,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 01 07:20:00 UTC 2018,,,,,,,0|i3u4k7:,9223372036854775807,,,,,,,,,,"24/May/18 22:09;njiang;It is caused by the servlet API conflict which is introduced by camel-google-mail.
You can work around this issue by excluding the servlet-api from jetty just like this.
{code}
  <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-google-mail</artifactId>
      <version>${camel.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.mortbay.jetty</groupId>
          <artifactId>servlet-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
{code}
It's strange that google mail API still has this kind of 10 years old API, I will dig more about shortly. ","24/May/18 22:46;njiang;Just go through the [document|https://developers.google.com/api-client-library/java/google-oauth-java-client/setup#google-oauth-client-jetty], it looks like we don't need to use the google-oauth-client-jetty module, as when using google mail component we already provide the authorization code. 
[~lb]Could you double check with it?",25/May/18 06:47;lb;I'm not very familiar with the component so [~ancosen] [~janstey] what do you think ?,"25/May/18 08:20;ancosen;I'm not completely sure we can get rid of that dependency, we can try by removing that, but since the fix is needed also on 2.21.x maybe I would go with the exclusions for the moment and after that we can take a look at a different solution","25/May/18 09:34;njiang;[~ancosen] 
+1 for exclusion of the google-oauth-client-jetty as it has some old jetty jars which could introduce some issue here.
We may upgrade the version of google mail client in the master branch at the same time.",25/May/18 09:39;ancosen;So you'll exclude the servlet-api from Jetty for the moment? For me it's fine.,28/May/18 08:02;ancosen;Excluding the servlet-api dependency from jetty is the best solution. [~njiang] can you please do this on master and 2.21.x and probably 2.20.x?,"28/May/18 08:05;njiang;OK, I will work on this later today.","01/Jun/18 07:20;ancosen;I took the liberty to fix this one, since I was taking a look at google-mail. Thanks [~njiang]",,,,,,,,,,,,,,,,,,,,,,,,
Camel-Twilio: Karaf feature is not working,CAMEL-12550,13163172,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,31/May/18 14:31,31/May/18 14:44,13/Mar/19 22:20,31/May/18 14:44,2.20.0,2.20.1,2.20.2,2.20.3,2.21.0,2.21.1,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,karaf,,,,,,0,,,,Caused by: java.lang.ClassNotFoundException: org.apache.http.ProtocolVersion not found by wrap_file__home_jbouska_.m2_repository_com_twilio_sdk_twilio_7.9.1_twilio-7.9.1.jar [224],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-05-31 14:31:51.0,,,,,,,0|i3uczb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-cxfrs - rsClient does not work programmatically, only with XML",CAMEL-12541,13162298,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,Willian Antunes,Willian Antunes,Willian Antunes,27/May/18 14:09,31/May/18 03:40,13/Mar/19 22:20,31/May/18 03:40,2.21.1,,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,camel-cxfrs,,,,,,0,,,,"As described in the documentation you can use [camel-cxfrs as producer|https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/docs/cxfrs-component.adoc#how-to-configure-the-rest-endpoint-in-camel]. You have some approaches like using a proxy created from a interface which maps all the services available in the targeted REST web service (sample [here|https://github.com/willianantunes/honesto-sqn/blob/d4bf48257fc64a4725894c7f07c24bb1a516d410/src/main/java/br/com/willianantunes/serenata/JarbasAPI.java#L14]). As I'm using Spring Boot and Apache Camel I may create a bean through XML or programmatically.
h4. Creating the test sample

I'm testing with the following:

[https://gist.github.com/willianantunes/58979bfb91ee30c7ff4e235940e60880]

You can find a copy of JarbasAPI [here|https://github.com/willianantunes/honesto-sqn/blob/d4bf48257fc64a4725894c7f07c24bb1a516d410/src/main/java/br/com/willianantunes/serenata/JarbasAPI.java#L14].
h4. When rsClient producer works as expected

When I do using the first approach using the configuration below everything works fine:
{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:cxf=""http://camel.apache.org/schema/cxf""
       xmlns:jaxrs=""http://cxf.apache.org/jaxrs""
       xmlns:util=""http://www.springframework.org/schema/util""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

    <cxf:rsClient id=""serviceEndpointViaXML""
                  address=""https://jarbas.serenata.ai"" 
                  serviceClass=""br.com.willianantunes.serenata.JarbasAPI""/>
</beans>
{code}
h4. When rsClient producer does not work as expected

XML works fine, but when I do the same thing programmatically it doesn't.
{code:java}
    @Bean(""serviceEndpoint"")
    public SpringJAXRSClientFactoryBean serviceEndpoint() {

        SpringJAXRSClientFactoryBean clientFactoryBean = new SpringJAXRSClientFactoryBean();
        clientFactoryBean.setAddress(""https://jarbas.serenata.ai"");
        clientFactoryBean.setServiceClass(JarbasAPI.class);

        return clientFactoryBean;
    }
{code}
Although it has no difference compared to XML, it does not work.
h4. When does it fail?

Debugging you can see the following:
 * The bean is correctly got [here|https://github.com/apache/camel/blob/a4cfea6823d31eacf57489ffffe1ffeead9a256b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsComponent.java#L76] is CxfRsComponent.
 * When a message is sent and there is a _to_ command with the URI *cxfrs:bean:serviceEndpoint,* I see the message arriving [here|https://github.com/apache/camel/blob/a4cfea6823d31eacf57489ffffe1ffeead9a256b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java#L94] in CxfRsProducer.
 * The method [invokeProxyClient|https://github.com/apache/camel/blob/a4cfea6823d31eacf57489ffffe1ffeead9a256b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java#L103] is called.
 * The SpringJAXRSClientFactoryBean which I provided as bean is ignored. A new one is created [here|https://github.com/apache/camel/blob/834a59910e4b6b8d089e229b39f6c8673e7c3f9a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsEndpoint.java#L414] and when it arrives to the next line the method invoked is from [CxfRsSpringEndpoint|https://github.com/apache/camel/blob/834a59910e4b6b8d089e229b39f6c8673e7c3f9a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java] which uses [configurer.ConfigureBean|https://github.com/apache/camel/blob/834a59910e4b6b8d089e229b39f6c8673e7c3f9a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L77] that only works with XML.

h4. Versions used
 * Spring Boot: 1.5.12.RELEASE
 * Apache Camel: 2.21.1

h4. Proposal to make it works

The idea obviously is to make both approaches work, maybe merging the configuration or as long as the user is providing a custom SpringJAXRSClientFactoryBean then making it the standard instead of creating a new one for each request as it is available in the CxfRsSpringEndpoint from the start.
----
If you want to understand more, read from [here|https://gitter.im/apache/apache-camel?at=5b09f7a54eaffb692d5adb43] until the [end of conversation|https://gitter.im/apache/apache-camel?at=5b0a13cb54ce23136159a2c0] on Gitter.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-27 16:32:16.393,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu May 31 03:40:06 UTC 2018,,,,,,,0|i3u7lb:,9223372036854775807,,,,,,,,,,"27/May/18 16:32;githubbot;willianantunes opened a new pull request #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350
 
 
   When the endpoint is created with the bean (see [here](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsComponent.java#L76) how it's found) is always available and is used for the consumer approach (see the method [newJAXRSServerFactoryBean](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L65)). 
   
   Now the [same behavior](https://github.com/willianantunes/camel/blob/30a4bdbf0975c8efc06d504b751e88ec4af5e64a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L71) is used for producer approach as nowadays [we always return a new instance of SpringJAXRSClientFactoryBean](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L71).

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/May/18 16:32;githubbot;GitHub user willianantunes opened a pull request:

    https://github.com/apache/camel/pull/2350

    CAMEL-12541: rsClient does not work programmatically, only with XML

    When the endpoint is created with the bean (see [here](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsComponent.java#L76) how it's found) is always available and is used for the consumer approach (see the method [newJAXRSServerFactoryBean](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L65)). 
    
    Now the [same behavior](https://github.com/willianantunes/camel/blob/30a4bdbf0975c8efc06d504b751e88ec4af5e64a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L71) is used for producer approach as nowadays [we always return a new instance of SpringJAXRSClientFactoryBean](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L71).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/willianantunes/camel cxfrs-bean-programmatically

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2350.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2350
    
----
commit 30a4bdbf0975c8efc06d504b751e88ec4af5e64a
Author: Willian Antunes <willian.lima.antunes@...>
Date:   2018-05-27T16:20:53Z

    CAMEL-12541: Use configured bean instead of creating a new
    
    When the endpoint is created the bean is always available and is used
    for the consumer approach (newJAXRSServerFactoryBean). Now the same
    behavior is used for producer approach (newJAXRSClientFactoryBean).

----
","27/May/18 17:10;githubbot;willianantunes commented on issue #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350#issuecomment-392348111
 
 
   Before creating this PR I'd run the tests and re-ran after inserting the fix to make sure if it was OK. 
   
   I believe [CxfRsProducerAddressOverrideTest.testAddressMultiOverride](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java#L155) is now breaking because LRUSoftCache is return the wrong stored object [here](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java#L862) when the test execute [line 166](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java#L166).

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/May/18 17:35;githubbot;willianantunes commented on issue #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350#issuecomment-392349806
 
 
   When the cache works properly it has the following:
   ```
   {
       http://localhost:1101/CxfRsProducerNonExistingAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@625487a6, 
       http://localhost:1101/CxfRsProducerAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@36224f93
   }
   ```
   See that each value is a different object (625487a6 and 36224f93). But when I run a test with this PR I get the following:
   ```
   {
       http://localhost:1101/CxfRsProducerNonExistingAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@ab58eea1, 
       http://localhost:1101/CxfRsProducerAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@ab58eea1
   }
   ```
   Both keys have the same object. That's why the test is breaking.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/May/18 17:36;githubbot;willianantunes commented on issue #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350#issuecomment-392349806
 
 
   When the cache works properly it has the following:
   ```
   {
       http://localhost:1101/CxfRsProducerNonExistingAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@625487a6, 
       http://localhost:1101/CxfRsProducerAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@36224f93
   }
   ```
   See that each value is a different object (625487a6 and 36224f93). But when I run a test with this PR I get the following:
   ```
   {
       http://localhost:1101/CxfRsProducerNonExistingAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@ab58eea1, 
       http://localhost:1101/CxfRsProducerAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@ab58eea1
   }
   ```
   Both keys have the same object (ab58eea1). That's why the test is breaking.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","28/May/18 02:26;githubbot;WillemJiang commented on a change in pull request #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350#discussion_r191099821
 
 

 ##########
 File path: components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointTest.java
 ##########
 @@ -62,13 +69,51 @@ public void testCreateCxfRsClientFactoryBean() {
 
     }
     
+    @Test
+    public void testCreateCxfRsClientFactoryBeanProgrammatically() {
+        
+        CxfRsEndpoint endpoint = resolveMandatoryEndpoint(""cxfrs://bean://"" + BEAN_SERVICE_ENDPOINT_NAME, CxfRsEndpoint.class);
+        SpringJAXRSClientFactoryBean cfb = (SpringJAXRSClientFactoryBean)endpoint.createJAXRSClientFactoryBean();
+        
+        assertEquals(""Got the wrong address"", BEAN_SERVICE_ADDRESS, cfb.getAddress());
+        assertNotNull(""Service class must not be null"", cfb.getServiceClass());
+        assertEquals(""Got the wrong ServiceClass"", CustomerService.class, cfb.getServiceClass());
+        assertEquals(""Got the wrong username"", BEAN_SERVICE_USERNAME, cfb.getUsername());
+        assertEquals(""Got the wrong password"", BEAN_SERVICE_PASSWORD, cfb.getPassword());
+    }
+
+    public static SpringJAXRSClientFactoryBean serviceEndpoint() {
+
+        SpringJAXRSClientFactoryBean clientFactoryBean = new SpringJAXRSClientFactoryBean();
+        clientFactoryBean.setAddress(BEAN_SERVICE_ADDRESS);
+        clientFactoryBean.setServiceClass(CustomerService.class);
+        clientFactoryBean.setUsername(BEAN_SERVICE_USERNAME);
+        clientFactoryBean.setPassword(BEAN_SERVICE_PASSWORD);
+
+        return clientFactoryBean;
+    }    
+    
     @Override
     protected AbstractXmlApplicationContext createApplicationContext() {
         String version = Version.getCurrentVersion();
+        
+        ClassPathXmlApplicationContext applicationContext = null;
+        
         if (version.startsWith(""2"") && (version.contains(""2.5"") || version.contains(""2.4""))) {
 
 Review comment:
   This version check could be removed as we already move to 2.6.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","28/May/18 02:26;githubbot;WillemJiang commented on a change in pull request #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350#discussion_r191099881
 
 

 ##########
 File path: components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointTest.java
 ##########
 @@ -62,13 +69,51 @@ public void testCreateCxfRsClientFactoryBean() {
 
     }
     
+    @Test
+    public void testCreateCxfRsClientFactoryBeanProgrammatically() {
+        
+        CxfRsEndpoint endpoint = resolveMandatoryEndpoint(""cxfrs://bean://"" + BEAN_SERVICE_ENDPOINT_NAME, CxfRsEndpoint.class);
+        SpringJAXRSClientFactoryBean cfb = (SpringJAXRSClientFactoryBean)endpoint.createJAXRSClientFactoryBean();
 
 Review comment:
   we may need to check the instance of cfb is not the one we set before.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","28/May/18 11:36;githubbot;willianantunes commented on issue #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350#issuecomment-392348111
 
 
   Before creating this PR I'd run the tests and re-ran after inserting the fix to make sure if it was OK or not. 
   
   I believe [CxfRsProducerAddressOverrideTest.testAddressMultiOverride](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java#L155) is now breaking because LRUSoftCache returns the wrong stored object [here](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java#L862) when the test executes [line 166](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java#L166).

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","28/May/18 12:59;githubbot;WillemJiang closed pull request #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java
index 954d9842679..46b235a3bd7 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java
@@ -25,6 +25,7 @@
 import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
 import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;
 import org.springframework.context.ApplicationContext;
+import org.springframework.util.ReflectionUtils;
 
 public class CxfRsSpringEndpoint extends CxfRsEndpoint implements BeanIdAware {
     private AbstractJAXRSFactoryBean bean;
@@ -69,7 +70,8 @@ protected JAXRSServerFactoryBean newJAXRSServerFactoryBean() {
 
     @Override
     protected JAXRSClientFactoryBean newJAXRSClientFactoryBean() {
-        return new SpringJAXRSClientFactoryBean();
+        checkBeanType(bean, JAXRSClientFactoryBean.class);
+        return newInstanceWithCommonProperties();
     }
 
     @Override
@@ -88,4 +90,14 @@ public String getBeanId() {
     public void setBeanId(String id) {
         this.beanId = id;
     }
-}
+    
+    private JAXRSClientFactoryBean newInstanceWithCommonProperties() {
+        SpringJAXRSClientFactoryBean cfb = new SpringJAXRSClientFactoryBean();
+        
+        if (bean instanceof SpringJAXRSClientFactoryBean) {
+            ReflectionUtils.shallowCopyFieldState(bean, cfb);
+        }
+
+        return cfb;
+    }    
+}
\ No newline at end of file
diff --git a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointTest.java b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointTest.java
index 977d7dca3e3..5e1c10925d1 100644
--- a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointTest.java
+++ b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointTest.java
@@ -22,13 +22,19 @@
 import org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean;
 import org.apache.camel.component.cxf.spring.SpringJAXRSServerFactoryBean;
 import org.apache.camel.test.spring.CamelSpringTestSupport;
-import org.apache.cxf.version.Version;
 import org.junit.Test;
+import org.springframework.beans.factory.support.BeanDefinitionBuilder;
+import org.springframework.beans.factory.support.DefaultListableBeanFactory;
 import org.springframework.context.support.AbstractXmlApplicationContext;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 
 public class CxfRsSpringEndpointTest extends CamelSpringTestSupport {
     
+    private static final String BEAN_SERVICE_ENDPOINT_NAME = ""serviceEndpoint"";
+    private static final String BEAN_SERVICE_ADDRESS = ""http://localhost/programmatically"";
+    private static final String BEAN_SERVICE_USERNAME = ""BEAN_SERVICE_USERNAME"";
+    private static final String BEAN_SERVICE_PASSWORD = ""BEAN_SERVICE_PASSWORD"";
+    
     @Test
     public void testCreateCxfRsServerFactoryBean() {
         CxfRsEndpoint endpoint = resolveMandatoryEndpoint(""cxfrs://bean://rsServer"", CxfRsEndpoint.class);
@@ -62,13 +68,44 @@ public void testCreateCxfRsClientFactoryBean() {
 
     }
     
+    @Test
+    public void testCreateCxfRsClientFactoryBeanProgrammatically() {
+        
+        CxfRsEndpoint endpoint = resolveMandatoryEndpoint(""cxfrs://bean://"" + BEAN_SERVICE_ENDPOINT_NAME, CxfRsEndpoint.class);
+        SpringJAXRSClientFactoryBean cfb = (SpringJAXRSClientFactoryBean)endpoint.createJAXRSClientFactoryBean();
+        
+        assertNotSame(""Got the same object but must be different"", super.applicationContext.getBean(BEAN_SERVICE_ENDPOINT_NAME), cfb);
+        assertEquals(""Got the wrong address"", BEAN_SERVICE_ADDRESS, cfb.getAddress());
+        assertNotNull(""Service class must not be null"", cfb.getServiceClass());
+        assertEquals(""Got the wrong ServiceClass"", CustomerService.class, cfb.getServiceClass());
+        assertEquals(""Got the wrong username"", BEAN_SERVICE_USERNAME, cfb.getUsername());
+        assertEquals(""Got the wrong password"", BEAN_SERVICE_PASSWORD, cfb.getPassword());                
+    }
+
+    public static SpringJAXRSClientFactoryBean serviceEndpoint() {
+
+        SpringJAXRSClientFactoryBean clientFactoryBean = new SpringJAXRSClientFactoryBean();
+        clientFactoryBean.setAddress(BEAN_SERVICE_ADDRESS);
+        clientFactoryBean.setServiceClass(CustomerService.class);
+        clientFactoryBean.setUsername(BEAN_SERVICE_USERNAME);
+        clientFactoryBean.setPassword(BEAN_SERVICE_PASSWORD);
+
+        return clientFactoryBean;
+    }    
+    
     @Override
-    protected AbstractXmlApplicationContext createApplicationContext() {
-        String version = Version.getCurrentVersion();
-        if (version.startsWith(""2"") && (version.contains(""2.5"") || version.contains(""2.4""))) {
-            return new ClassPathXmlApplicationContext(new String(""org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans.xml""));
-        }
-        return new ClassPathXmlApplicationContext(new String(""org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans-2.6.xml""));
+    protected AbstractXmlApplicationContext createApplicationContext() {      
+        
+        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(new String(""org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans.xml""));        
+        emulateBeanRegistrationProgrammatically(applicationContext);
+        
+        return applicationContext;
     }
 
-}
+    private void emulateBeanRegistrationProgrammatically(ClassPathXmlApplicationContext applicationContext) {
+        
+        DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) applicationContext.getBeanFactory();
+        BeanDefinitionBuilder definitionBuilder = BeanDefinitionBuilder.rootBeanDefinition(CxfRsSpringEndpointTest.class.getName()).setFactoryMethod(""serviceEndpoint"");
+        beanFactory.registerBeanDefinition(BEAN_SERVICE_ENDPOINT_NAME, definitionBuilder.getBeanDefinition());
+    }
+}
\ No newline at end of file
diff --git a/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans-2.6.xml b/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans-2.6.xml
deleted file mode 100644
index 8b0ca34cfed..00000000000
--- a/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans-2.6.xml
+++ /dev/null
@@ -1,57 +0,0 @@
-<?xml version=""1.0"" encoding=""UTF-8""?>
-<!--
-
-    Licensed to the Apache Software Foundation (ASF) under one or more
-    contributor license agreements.  See the NOTICE file distributed with
-    this work for additional information regarding copyright ownership.
-    The ASF licenses this file to You under the Apache License, Version 2.0
-    (the ""License""); you may not use this file except in compliance with
-    the License.  You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an ""AS IS"" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
-
--->
-<beans xmlns=""http://www.springframework.org/schema/beans""
-       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
-       xmlns:cxf=""http://camel.apache.org/schema/cxf""
-       xsi:schemaLocation=""
-       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
-       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
-       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
-
-
-  <cxf:rsServer id=""rsServer"" address=""http://localhost:9000/router""
-    serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService""
-    loggingFeatureEnabled=""true"" loggingSizeLimit=""200"">
-    <cxf:properties>
-        <entry key=""aKey"" value=""aValue""/>
-    </cxf:properties>
-    <cxf:providers>
-       <ref bean=""jsonProvider""/>
-    </cxf:providers>
-    <cxf:inInterceptors>
-        <bean class=""org.apache.camel.component.cxf.jaxrs.TestInInterceptor""/>
-    </cxf:inInterceptors>
-  </cxf:rsServer>
-
-  <cxf:rsClient id=""rsClient"" address=""http://localhost:9002/helloworld""
-    serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService"">
-    <cxf:inInterceptors>
-        <bean class=""org.apache.camel.component.cxf.jaxrs.TestInInterceptor""/>
-    </cxf:inInterceptors>
-  </cxf:rsClient>
-
-  <bean id=""jsonProvider"" class=""org.apache.cxf.jaxrs.provider.json.JSONProvider""/>
-
-  <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
-  </camelContext>
-  
-  
-
-</beans>
diff --git a/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans.xml b/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans.xml
index fcd0e8238fe..8b0ca34cfed 100644
--- a/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans.xml
+++ b/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans.xml
@@ -23,22 +23,31 @@
        xsi:schemaLocation=""
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
-       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
-    "">
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
 
 
   <cxf:rsServer id=""rsServer"" address=""http://localhost:9000/router""
     serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService""
     loggingFeatureEnabled=""true"" loggingSizeLimit=""200"">
+    <cxf:properties>
+        <entry key=""aKey"" value=""aValue""/>
+    </cxf:properties>
     <cxf:providers>
        <ref bean=""jsonProvider""/>
     </cxf:providers>
+    <cxf:inInterceptors>
+        <bean class=""org.apache.camel.component.cxf.jaxrs.TestInInterceptor""/>
+    </cxf:inInterceptors>
   </cxf:rsServer>
 
   <cxf:rsClient id=""rsClient"" address=""http://localhost:9002/helloworld""
-    serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService""/>
+    serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService"">
+    <cxf:inInterceptors>
+        <bean class=""org.apache.camel.component.cxf.jaxrs.TestInInterceptor""/>
+    </cxf:inInterceptors>
+  </cxf:rsClient>
 
-  <bean id=""jsonProvider"" class=""org.apache.cxf.jaxrs.provider.JSONProvider""/>
+  <bean id=""jsonProvider"" class=""org.apache.cxf.jaxrs.provider.json.JSONProvider""/>
 
   <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
   </camelContext>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","28/May/18 12:59;githubbot;Github user WillemJiang closed the pull request at:

    https://github.com/apache/camel/pull/2350
","31/May/18 03:40;njiang;Merged the patches into master, camel-2.21.x and camel-2.20.x branches.",,,,,,,,,,,,,,,,,,,,,,
CxfRsProducer doesn't configure CxfRsEndpointConfigurer while using the Proxy API,CAMEL-12399,13147406,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,mikeschippers,mikeschippers,23/Mar/18 09:21,27/May/18 06:17,13/Mar/19 22:20,27/Mar/18 05:53,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-cxfrs,,,,,,0,,,,"The CxfRsProducer doesn't configure a CxfRsEndpointConfigurer on the client while using the Proxy API. When using the HTTP API this is working fine.

So when i create an endpoint like this:

 
{code:java}
CxfRsEndpoint endpoint = new CxfRsEndpoint(); endpoint.setCxfRsEndpointConfigurer(new MyCxfRsEndpointConfigurer());
{code}
 
{code:java}
public static class MyCxfRsEndpointConfigurer implements CxfRsEndpointConfigurer {

    @Override
    public void configure(AbstractJAXRSFactoryBean factoryBean) {
    }

    @Override
    public void configureClient(Client client) {
        client.header(""foo"", ""bar"");
    }

    @Override
    public void configureServer(Server server) {
    }
}
{code}
In case i use the HTTP API the header ""foo"" is sent but not when i use the Proxy API.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-23 10:05:21.989,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 27 05:42:30 UTC 2018,,,,,,,0|i3roxr:,9223372036854775807,,,,,,,,,,23/Mar/18 09:22;mikeschippers;I'm working on a PR,"23/Mar/18 10:05;githubbot;mikeschippers opened a new pull request #2265: CAMEL-12399: CxfRsProducer configures CxfRsEndpointConfigurer while using the Proxy API
URL: https://github.com/apache/camel/pull/2265
 
 
   With this change CxfRsProducer configures CxfRsEndpointConfigurer while using the Proxy API (invokeProxyClient)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Mar/18 10:05;githubbot;GitHub user mikeschippers opened a pull request:

    https://github.com/apache/camel/pull/2265

    CAMEL-12399: CxfRsProducer configures CxfRsEndpointConfigurer while using the Proxy API

    With this change CxfRsProducer configures CxfRsEndpointConfigurer while using the Proxy API (invokeProxyClient)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mikeschippers/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2265.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2265
    
----
commit b1ad26ab133b50d91c298fbb82113f5ecc9b79cb
Author: Schippers <mike.schippers@...>
Date:   2018-03-23T09:51:14Z

    CAMEL-12399: fix CxfRsProducer doesn't configure CxfRsEndpointConfigurer while using Proxy API

----
","23/Mar/18 11:04;githubbot;davsclaus commented on issue #2265: CAMEL-12399: CxfRsProducer configures CxfRsEndpointConfigurer while using the Proxy API
URL: https://github.com/apache/camel/pull/2265#issuecomment-375624531
 
 
   @ffang would you mind taking a look at this PR?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Mar/18 05:39;githubbot;ffang closed pull request #2265: CAMEL-12399: CxfRsProducer configures CxfRsEndpointConfigurer while using the Proxy API
URL: https://github.com/apache/camel/pull/2265
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
index fa9978c71b3..7edd0ba83e3 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
@@ -200,6 +200,8 @@ protected void invokeAsyncProxyClient(Exchange exchange, final AsyncCallback cal
             target = cfb.createWithValues(varValues);
         }
 
+        ((CxfRsEndpoint) getEndpoint()).getChainedCxfRsEndpointConfigurer().configureClient(target);
+
         setupClientHeaders(target, exchange);
 
         // find out the method which we want to invoke
@@ -421,7 +423,9 @@ protected void invokeProxyClient(Exchange exchange) throws Exception {
         } else {
             target = cfb.createWithValues(varValues);
         }
-        
+
+        ((CxfRsEndpoint) getEndpoint()).getChainedCxfRsEndpointConfigurer().configureClient(target);
+
         setupClientHeaders(target, exchange);
         
         // find out the method which we want to invoke
diff --git a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerEndpointConfigurerTest.java b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerEndpointConfigurerTest.java
new file mode 100644
index 00000000000..035a79aede0
--- /dev/null
+++ b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerEndpointConfigurerTest.java
@@ -0,0 +1,103 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.jaxrs;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Message;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxrs.testbean.Customer;
+import org.apache.camel.component.cxf.jaxrs.testbean.CustomerService;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.client.Client;
+import org.apache.cxf.message.MessageContentsList;
+import org.junit.Test;
+
+import javax.ws.rs.HttpMethod;
+
+public class CxfRsProducerEndpointConfigurerTest extends CamelTestSupport {
+
+    protected RouteBuilder createRouteBuilder() {
+        return new RouteBuilder() {
+            public void configure() {
+                CxfRsEndpoint endpoint = new CxfRsEndpoint();
+                endpoint.setAddress(""http://localhost:8000"");
+                endpoint.setCamelContext(context);
+                endpoint.setResourceClasses(CustomerService.class);
+                endpoint.setEndpointUriIfNotSpecified(""cxfrs:simple"");
+                endpoint.setCxfRsEndpointConfigurer(new MyCxfRsEndpointConfigurer());
+
+                from(""direct:start"")
+                        .to(endpoint)
+                        .to(""mock:end"");
+
+                from(""jetty:http://localhost:8000?matchOnUriPrefix=true"")
+                        .to(""mock:result"")
+                        .process(exchange -> exchange.getIn().setBody(new Customer()));
+            }
+        };
+    }
+
+    @Test
+    public void testCxfRsEndpoinConfigurerProxyApi() throws InterruptedException {
+        template.send(""direct:start"", exchange -> {
+            exchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = exchange.getIn();
+            inMessage.setHeader(CxfConstants.OPERATION_NAME, ""getCustomer"");
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE);
+            MessageContentsList messageContentsList = new MessageContentsList();
+            messageContentsList.add(""1"");
+            inMessage.setBody(messageContentsList);
+        });
+        getMockEndpoint(""mock:result"").expectedHeaderReceived(""foo"", ""bar"");
+        assertMockEndpointsSatisfied();
+    }
+
+    @Test
+    public void testCxfRsEndpointConfigurerHttpApi() throws InterruptedException {
+        template.send(""direct:start"", exchange -> {
+            exchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = exchange.getIn();
+            inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/1"");
+            inMessage.setHeader(Exchange.HTTP_METHOD, HttpMethod.GET);
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+        });
+        getMockEndpoint(""mock:result"").expectedHeaderReceived(""foo"", ""bar"");
+        assertMockEndpointsSatisfied();
+    }
+
+    public static class MyCxfRsEndpointConfigurer implements CxfRsEndpointConfigurer {
+
+        @Override
+        public void configure(AbstractJAXRSFactoryBean factoryBean) {
+        }
+
+        @Override
+        public void configureClient(Client client) {
+            client.header(""foo"", ""bar"");
+        }
+
+        @Override
+        public void configureServer(Server server) {
+        }
+    }
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Mar/18 05:39;githubbot;Github user ffang closed the pull request at:

    https://github.com/apache/camel/pull/2265
",27/Mar/18 05:42;ffang;patch applied on behalf of Mike Schippers  with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix syntax for wordpress component,CAMEL-12535,13161697,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,apupier,apupier,24/May/18 08:41,24/May/18 08:50,13/Mar/19 22:20,24/May/18 08:50,2.21.0,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-wordpress,,,,,,0,,,,it is wordpress:operation but it should be wordpress:operationDetail,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10013,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-05-24 08:41:09.0,,,,,,,0|i3u3wn:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Content Based Router in Java DSL may not resolve property placeholders in when predicates,CAMEL-12532,13161547,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/May/18 18:25,23/May/18 19:15,13/Mar/19 22:20,23/May/18 19:15,2.20.3,2.21.1,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,camel-core,,,,,,0,,,,Reported on gitter,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-05-23 18:25:57.0,,,,,,,0|i3u2zj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix CXF-Blueprint tests,CAMEL-12497,13158184,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,09/May/18 12:35,17/May/18 11:41,13/Mar/19 22:20,17/May/18 11:41,,,,,,,,,,,,,,,,2.22.0,,,,,,,,,,,0,,,,"A number of tests in {{tests/camel-blueprint-cxf-test}} are failing on CI.

[Test results|https://builds.apache.org/view/C/view/Apache%20Camel/job/Camel/job/master/289/testReport/]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-05-09 12:35:31.0,,,,,,,0|i3tipj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
One of the camel-jcache tests is failing,CAMEL-12498,13158186,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,09/May/18 12:37,17/May/18 11:40,13/Mar/19 22:20,17/May/18 11:40,,,,,,,,,,,,,,,,2.22.0,,,,,camel-jcache,,,,,,0,,,,"Seems that one of camel-jcache tests started failing.

[Test results|https://builds.apache.org/view/C/view/Apache%20Camel/job/Camel/job/master/289/testReport/org.apache.camel.component.jcache/JCacheConsumerTest/testFilters/]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-05-09 12:37:46.0,,,,,,,0|i3tipz:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-jms: ClassNotFoundException: org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory in Spring-Boot,CAMEL-12490,13157524,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pascalschumacher,pascalschumacher,07/May/18 07:54,16/May/18 07:53,13/Mar/19 22:20,16/May/18 07:53,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-jms,camel-spring-boot-starters,,,,,0,,,,"Not sure if this is a Camel bug, but I'm using activemq-camel 5.14.5 in a spring-boot 1.5.12 application.

After upgrading from Camel 2.21.0 to 2.21.1 start-up fails with:

{noformat}
2018-05-07 09:45:34.213 ERROR 7992 --- [  restartedMain] o.s.boot.SpringApplication               : Application startup failed

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.jms.config.internalJmsListenerAnnotationProcessor' defined in class path resource [org/springframework/jms/annotation/JmsBootstrapConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor]: Factory method 'jmsListenerAnnotationProcessor' threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1071) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:312) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:225) ~[spring-context-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:703) ~[spring-context-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:528) ~[spring-context-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.12.RELEASE.jar:1.5.12.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.12.RELEASE.jar:1.5.12.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.12.RELEASE.jar:1.5.12.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.12.RELEASE.jar:1.5.12.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.12.RELEASE.jar:1.5.12.RELEASE]
	at de.telekom.dms.FlexKommBusinessServicesApplication.main(FlexKommBusinessServicesApplication.java:10) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.12.RELEASE.jar:1.5.12.RELEASE]
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor]: Factory method 'jmsListenerAnnotationProcessor' threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	... 22 common frames omitted
Caused by: java.lang.NoClassDefFoundError: org/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory
	at java.lang.ClassLoader.defineClass1(Native Method) ~[na:1.8.0_121]
	at java.lang.ClassLoader.defineClass(ClassLoader.java:763) ~[na:1.8.0_121]
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) ~[na:1.8.0_121]
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:467) ~[na:1.8.0_121]
	at java.net.URLClassLoader.access$100(URLClassLoader.java:73) ~[na:1.8.0_121]
	at java.net.URLClassLoader$1.run(URLClassLoader.java:368) ~[na:1.8.0_121]
	at java.net.URLClassLoader$1.run(URLClassLoader.java:362) ~[na:1.8.0_121]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_121]
	at java.net.URLClassLoader.findClass(URLClassLoader.java:361) ~[na:1.8.0_121]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_121]
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_121]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_121]
	at org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.<init>(JmsListenerAnnotationBeanPostProcessor.java:103) ~[spring-jms-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.jms.annotation.JmsBootstrapConfiguration.jmsListenerAnnotationProcessor(JmsBootstrapConfiguration.java:47) ~[spring-jms-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.jms.annotation.JmsBootstrapConfiguration$$EnhancerBySpringCGLIB$$1878cc3d.CGLIB$jmsListenerAnnotationProcessor$1(<generated>) ~[spring-jms-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.jms.annotation.JmsBootstrapConfiguration$$EnhancerBySpringCGLIB$$1878cc3d$$FastClassBySpringCGLIB$$265c8d54.invoke(<generated>) ~[spring-jms-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358) ~[spring-context-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.jms.annotation.JmsBootstrapConfiguration$$EnhancerBySpringCGLIB$$1878cc3d.jmsListenerAnnotationProcessor(<generated>) ~[spring-jms-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	... 23 common frames omitted
Caused by: java.lang.ClassNotFoundException: org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_121]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_121]
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_121]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_121]
	... 47 common frames omitted
{noformat}

The cause is https://issues.apache.org/jira/browse/CAMEL-12447, because when I add

{code}
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-messaging</artifactId>
</dependency>
{code}

everything works fine again.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-07 12:29:36.355,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed May 16 07:53:22 UTC 2018,,,,,,,0|i3ten3:,9223372036854775807,,,,,,,,,,"07/May/18 12:29;davsclaus;Ah okay, so it sounds like spring-messaging should be added in camel-jms-starter or if spring had some jms-starter of its own.",16/May/18 07:53;davsclaus;Okay its better to just revert CAMEL-12447 then it works as before. We could have added spring-messaging to only camel-jms-starter also. But maybe its safter to just let it be part of camel-jms by default so its always on the classpath.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-consul - NPE on ConsulEventConsumer start,CAMEL-12511,13159114,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,Viachaslau.Tsikhanovich,Viachaslau.Tsikhanovich,14/May/18 14:28,15/May/18 12:52,13/Mar/19 22:20,15/May/18 12:52,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-consul,,,,,,0,,,,"When _doStart_ is called on ConsulEventConsumer it first [calls|https://github.com/apache/camel/blob/camel-2.21.1/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java#L54] _doStart_ of a superclass _AbstractConsulConsumer_ when _scheduledExecutorService_ is not initialized yet.

EventWatcher run [is allowed|https://github.com/apache/camel/blob/camel-2.21.1/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/AbstractConsulConsumer.java#L95]. Thus _EventWatcher.watch_ is called with uninitialized _scheduledExecutorService_ and failing with NPE.

{quote}
 Caused by: java.lang.NullPointerException: null
         at org.apache.camel.component.consul.endpoint.ConsulEventConsumer$EventWatcher.watch(ConsulEventConsumer.java:76)
         at org.apache.camel.component.consul.endpoint.ConsulEventConsumer$EventWatcher.watch(ConsulEventConsumer.java:68)
         at org.apache.camel.component.consul.endpoint.AbstractConsulConsumer$AbstractWatcher.run(AbstractConsulConsumer.java:96)
         at org.apache.camel.component.consul.endpoint.AbstractConsulConsumer.doStart(AbstractConsulConsumer.java:56)
         at org.apache.camel.component.consul.endpoint.ConsulEventConsumer.doStart(ConsulEventConsumer.java:54)
         at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
         at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3705)
         at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:4023)
         at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3958)
         at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3878)
         at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3642)
         at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3494)
         at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:209)
         at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3253)
         at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3249)
         at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3272)
         at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3249)
         at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
         at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3165)
         at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133)
		 ...
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-14 14:43:41.521,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue May 15 12:22:46 UTC 2018,,,,,,,0|i3toef:,9223372036854775807,,,,,,,,,,"14/May/18 14:43;lb;Yeah I saw that, [~Viachaslau.Tsikhanovich] do you want to work on a fix ?","14/May/18 15:39;Viachaslau.Tsikhanovich;I believe [https://github.com/apache/camel/commit/cd0d07d1745cbf153881160d73e28b2abc240ebb] could be reverted to fix this.
 However I am not sure if it would be a right approach because of this [comment|https://github.com/apache/camel/pull/2283#discussion_r182332929].

As I can see for consumers of other components it is OK to [pass _scheduledExecutorService_ to a constructor|https://github.com/apache/camel/blob/camel-2.21.1/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java#L77]

If some alternative solution (instead of reverting) is required I could try to work on it.","14/May/18 15:46;lb;A quick fix would be to initialize the executor service before super.doStart(), isn't it ?","15/May/18 12:15;githubbot;viachka opened a new pull request #2342: CAMEL-12511: Init scheduledExecutorService before ConsulEventConsumer's watcher run
URL: https://github.com/apache/camel/pull/2342
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/May/18 12:15;githubbot;GitHub user viachka opened a pull request:

    https://github.com/apache/camel/pull/2342

    CAMEL-12511: Init scheduledExecutorService before ConsulEventConsumer's watcher run

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/viachka/camel camel-12511-npe-on-consuleventconsumer-start

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2342.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2342
    
----
commit 851f6208fc208427f02a44adc4bce1f0e6d0ff34
Author: Viachaslau Tsikhanovich <viachaslau_tsikhanovich@...>
Date:   2018-05-15T12:07:54Z

    CAMEL-12511: Init scheduledExecutorService before ConsulEventConsumer's watcher run

----
","15/May/18 12:22;githubbot;lburgazzoli closed pull request #2342: CAMEL-12511: Init scheduledExecutorService before ConsulEventConsumer's watcher run
URL: https://github.com/apache/camel/pull/2342
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java b/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
index b74615b40fe..13753c23003 100644
--- a/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
+++ b/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
@@ -51,8 +51,8 @@ protected Runnable createWatcher(EventClient client) throws Exception {
 
     @Override
     protected void doStart() throws Exception {
-        super.doStart();
         this.scheduledExecutorService = this.executorServiceManager.newSingleThreadScheduledExecutor(this, ""ConsulEventConsumer"");
+        super.doStart();
     }
 
     @Override


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/May/18 12:22;githubbot;Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/2342
",,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect URL for AWS SQS queues,CAMEL-12500,13158191,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,candrews,candrews,09/May/18 13:16,09/May/18 13:42,13/Mar/19 22:20,09/May/18 13:39,,,,,,,,,,,,,,,,2.22.0,,,,,camel-aws,,,,,,0,,,,"There should be a . between the region and the host. The queueUrl is, for example, {{https://sqs.sqs.us-gov-west-1amazonaws.com}} - it should be {{https://sqs.sqs.us-gov-west-1.amazonaws.com}}.

 

This bug was caused by https://github.com/apache/camel/commit/6bb9f5559145bfc1f9db6718192e86c2a09a4e07",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-09 13:22:34.572,,,no_permission,,Unknown,,,https://github.com/apache/camel/pull/2329,Patch,,,,,,,,,9223372036854775807,,,Wed May 09 13:42:41 UTC 2018,,,Patch Available,,,,0|i3tir3:,9223372036854775807,Regression,,,,,,,,,"09/May/18 13:22;githubbot;candrews commented on issue #2329: CAMEL-12500: Add missing . between region and host in SqsEndpoint
URL: https://github.com/apache/camel/pull/2329#issuecomment-387736596
 
 
   > We'll wait for the JIRA and the commit amend.
   
   Done

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/May/18 13:26;githubbot;oscerd commented on issue #2329: CAMEL-12500: Add missing . between region and host in SqsEndpoint
URL: https://github.com/apache/camel/pull/2329#issuecomment-387737598
 
 
   Thanks
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/May/18 13:38;githubbot;oscerd commented on issue #2329: CAMEL-12500: Add missing . between region and host in SqsEndpoint
URL: https://github.com/apache/camel/pull/2329#issuecomment-387741466
 
 
   Thanks this has been merged on master

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/May/18 13:42;githubbot;oscerd closed pull request #2329: CAMEL-12500: Add missing . between region and host in SqsEndpoint
URL: https://github.com/apache/camel/pull/2329
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java
index 7f3ab4d203d..45067347daf 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java
@@ -129,7 +129,7 @@ protected void doStart() throws Exception {
             if (configuration.getRegion() != null && configuration.getQueueOwnerAWSAccountId() != null) {
                 String host = configuration.getAmazonAWSHost();
                 host = FileUtil.stripTrailingSeparator(host);
-                queueUrl = ""https://sqs."" + configuration.getRegion() + host + ""/""
+                queueUrl = ""https://sqs."" + configuration.getRegion() + ""."" + host + ""/""
                         + configuration.getQueueOwnerAWSAccountId() + ""/"" + configuration.getQueueName();
             } else if (configuration.getQueueOwnerAWSAccountId() != null) {
                 GetQueueUrlRequest getQueueUrlRequest = new GetQueueUrlRequest();


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/May/18 13:42;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2329
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
S3Producer must close the streams it opens,CAMEL-12487,13157426,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,damien_b,damien_b,06/May/18 09:31,08/May/18 08:52,13/Mar/19 22:20,08/May/18 08:51,2.20.3,2.21.0,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,camel-aws,,,,,,0,,,,"We've got a busy route with high memory pressure, we found out it was due to S3Producer not closing the streams it opened in some cases. See [MR|https://github.com/apache/camel/pull/2321]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-06 11:32:12.96,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Tue May 08 08:52:14 UTC 2018,,,Patch Available,,,,0|i3te1b:,9223372036854775807,,,,,,,,,,"06/May/18 11:32;githubbot;damienb-opt commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-386872733
 
 
   See https://issues.apache.org/jira/browse/CAMEL-12487

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/May/18 08:59;githubbot;oscerd commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387003326
 
 
   Can you please rebase?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/May/18 15:11;githubbot;damienb-opt commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387097397
 
 
   Could you be more precise? I don't understand what you're asking ^^;

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/May/18 15:21;githubbot;oscerd commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387100516
 
 
   You need to align the code to the master branch with a git pull --rebase origin master

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/May/18 15:39;githubbot;damienb-opt commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387106398
 
 
   It was created directly from the GitHub editor, I didn't check out the repo. Let's see.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/May/18 15:47;githubbot;damienb-opt commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387109038
 
 
   Ok, GitHub documentation says you need to do it from a Git client, but you should have a button ""rebase and merge"" on your side https://blog.github.com/2016-09-26-rebase-and-merge-pull-requests/ .

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/May/18 15:49;githubbot;oscerd commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387109762
 
 
   I know it but your PR has conflicts even when rebasing. So I can't use it directly. By the way I'll create a commit with your fix and let you know.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/May/18 16:16;githubbot;damienb-opt commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387118634
 
 
   My bad, thought apache-master was the logical master for an Apache project.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/May/18 08:34;githubbot;damienb-opt opened a new pull request #2326: CAMEL-12487: S3Producer must close the streams it opens
URL: https://github.com/apache/camel/pull/2326
 
 
   See https://issues.apache.org/jira/browse/CAMEL-12487

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/May/18 08:34;githubbot;GitHub user damienb-opt opened a pull request:

    https://github.com/apache/camel/pull/2326

    CAMEL-12487: S3Producer must close the streams it opens

    See https://issues.apache.org/jira/browse/CAMEL-12487

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/damienb-opt/camel patch-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2326.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2326
    
----
commit d14f5b173d063f24872f0c80af98937fbf8f2212
Author: damienb-opt <36661255+damienb-opt@...>
Date:   2018-05-08T08:34:09Z

    CAMEL-12487: S3Producer must close the streams it opens
    
    See https://issues.apache.org/jira/browse/CAMEL-12487

----
","08/May/18 08:35;githubbot;oscerd commented on issue #2326: CAMEL-12487: S3Producer must close the streams it opens
URL: https://github.com/apache/camel/pull/2326#issuecomment-387327792
 
 
   Thanks, I'm merging.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/May/18 08:35;githubbot;damienb-opt closed pull request #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java
index bb5847c28bb..2af5742450a 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java
@@ -242,10 +242,11 @@ public void processSingleOp(final Exchange exchange) throws Exception {
             message.setHeader(S3Constants.VERSION_ID, putObjectResult.getVersionId());
         }
 
+        // close streams
+        IOHelper.close(putObjectRequest.getInputStream());
+        IOHelper.close(is);
+
         if (getConfiguration().isDeleteAfterWrite() && filePayload != null) {
-            // close streams
-            IOHelper.close(putObjectRequest.getInputStream());
-            IOHelper.close(is);
             FileUtil.deleteFile(filePayload);
         }
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/May/18 08:35;githubbot;damienb-opt commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387327925
 
 
   Replaced by https://github.com/apache/camel/pull/2326

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/May/18 08:35;githubbot;Github user damienb-opt closed the pull request at:

    https://github.com/apache/camel/pull/2321
","08/May/18 08:49;githubbot;oscerd closed pull request #2326: CAMEL-12487: S3Producer must close the streams it opens
URL: https://github.com/apache/camel/pull/2326
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java
index fc5c2354945..159eff64175 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java
@@ -276,10 +276,11 @@ public void processSingleOp(final Exchange exchange) throws Exception {
             message.setHeader(S3Constants.VERSION_ID, putObjectResult.getVersionId());
         }
 
+        // close streams
+        IOHelper.close(putObjectRequest.getInputStream());
+        IOHelper.close(is);
+
         if (getConfiguration().isDeleteAfterWrite() && filePayload != null) {
-            // close streams
-            IOHelper.close(putObjectRequest.getInputStream());
-            IOHelper.close(is);
             FileUtil.deleteFile(filePayload);
         }
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/May/18 08:49;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2326
","08/May/18 08:52;githubbot;oscerd commented on issue #2326: CAMEL-12487: S3Producer must close the streams it opens
URL: https://github.com/apache/camel/pull/2326#issuecomment-387332457
 
 
   Thanks for the PR. It has been merged on master, 2.21.x and 2.20.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,
Undertow consumer with http4 producer results in Undertow throwing NullPointerException,CAMEL-12475,13156319,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dentych,dentych,01/May/18 10:39,03/May/18 03:22,13/Mar/19 22:20,03/May/18 03:22,2.20.3,2.21.0,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,,,,,,,0,component,,,"I have a very simple setup of Camel (standalone).

My route is as follows:
{code:java}
public class Application {
    public static void main(String... args) throws Exception {
        Main main = new Main();

        main.addRouteBuilder(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                restConfiguration().port(8080);

                rest(""/pi"")
                        .get()
                        .route()
                        .setExchangePattern(ExchangePattern.InOut)
                        .to(""https4://api.pi.delivery/v1/pi?bridgeEndpoint=true"");
            }
        });

        main.run();
    }
}{code}
Call the endpoint with: 
{noformat}
curl ""http://localhost:8080/pi?start=0&numberOfDigits=10""{noformat}
 

When using camel-undertow for consumer and camel-http4 for producer, I get a NullPointerException.
{code:java}
java.lang.NullPointerException: null
at io.undertow.io.AsyncSenderImpl.send(AsyncSenderImpl.java:141) ~[undertow-core-1.4.23.Final.jar:1.4.23.Final]
at io.undertow.io.AsyncSenderImpl.send(AsyncSenderImpl.java:285) ~[undertow-core-1.4.23.Final.jar:1.4.23.Final]
at org.apache.camel.component.undertow.UndertowConsumer.handleRequest(UndertowConsumer.java:142) ~[camel-undertow-2.21.0.jar:2.21.0]
at io.undertow.server.Connectors.executeRootHandler(Connectors.java:336) ~[undertow-core-1.4.23.Final.jar:1.4.23.Final]
at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830) ~[undertow-core-1.4.23.Final.jar:1.4.23.Final]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_102]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_102]
at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_102]
{code}
However, if I switch out the camel-undertow dependency with camel-jetty, the above route configuration works just fine.","Operating System: Windows 8

Java version: 1.8

Camel version: 2.21.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-02 12:39:06.849,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu May 03 03:22:16 UTC 2018,,,,,,,0|i3t7lz:,9223372036854775807,,,,,,,,,,"02/May/18 12:39;njiang;[~dentych] How can you access the route? I'm trying to reproduce the error.
It could be great if you can past the curl command to access the camel route.",02/May/18 12:54;dentych;[~njiang] I have added the cURL command I used to the description. Sorry about that.,"02/May/18 15:04;njiang;This issue is caused by the camel cannot find a right type convert from InputStream to ByteBuffer.
You can workaround this issue by adding the convertTo(byte[].class) just like this 
{code}
  rest(""/pi"")
            .get()
            .route()
            .setExchangePattern(ExchangePattern.InOut)
            .to(""https4://api.pi.delivery/v1/pi?bridgeEndpoint=true"").convertBodyTo(byte[].class);
{code} ","03/May/18 02:41;njiang;[~dentych] You can also add a [type converter|http://camel.apache.org/type-converter.html] from the InputStream to ByteBuffer to fix the NPE without changing the route. I will commit a quick fix for this issue shortly.

 ","03/May/18 03:22;njiang;Applied the patch into master, camel-2.21.x and camel-2.20.x branches.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove servicemix repository,CAMEL-12474,13156313,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,oflebbe,oflebbe,01/May/18 08:30,02/May/18 20:10,13/Mar/19 22:20,02/May/18 06:19,,,,,,,,,,,,,,,,2.22.0,,,,,camel-script,,,,,,0,,,,"I did research on insecure development practises and tripped of the usage of

<url>http://svn.apache.org/repos/asf/servicemix/m2-repo</url>

in camel-script.

I checked servicemix repositories: It either contains duplicates of maven central (some with invalid poms) or original content.

Network traces while compiling camel suggest that mvn only pulls these artifacts from servicemix maven repository:
{code:java}
1525026026.300329	CW4Snp4aVItMFgPff9	172.17.0.2	38354	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/mozilla/rhino/1.7.7.1/rhino-1.7.7.1.pom	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	270	404	Not Found	-	-	(empty)	-	-Fl1CyF3Qpey4VRjMaf	-	text/html
1525026026.756122	CzWVcz4DWIH77Wsfg2	172.17.0.2	38356	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/python/jython/2.5.3/jython-2.5.3.pom	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	267	404	Not Found	-	-	(empty)	-	-FE4nRr2km9bJj89ff6	-	text/html
1525026027.180905	CFlRQ818nO5cbbbsTl	172.17.0.2	38358	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/codehaus/groovy/groovy-jsr223/2.4.12/groovy-jsr223-2.4.12.pom	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	292	404	Not Found	-	-(empty)	-	-	-	-	-	-	F1QpLz2VRydzyYntF4	-	text/html
1525026027.647593	CX5M1E1hyxPYAoyL8i	172.17.0.2	38360	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/apache-extras/beanshell/bsh/2.0b6/bsh-2.0b6.pom	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	278	404	Not Found	-	-	(empty)	-FuD9RLFHEi17eOUkh	-	text/html
1525026028.094818	CiIO7oAUfj4tscfX5	172.17.0.2	38366	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/codehaus/groovy/groovy-jsr223/2.4.12/groovy-jsr223-2.4.12.jar	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	292	404	Not Found	-	-(empty)	-	-	-	-	-	-	FyVPyfu1Y3DFkNgJ2	-	text/html
1525026028.099453	CUh1fW3Dl62XKXPLX2	172.17.0.2	38364	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/python/jython/2.5.3/jython-2.5.3.jar	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	267	404	Not Found	-	-	(empty)	-	-F7x74522BvGw3zS7Eh	-	text/html
1525026028.099309	ClETpU2KKP8Ne1p6yh	172.17.0.2	38362	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/mozilla/rhino/1.7.7.1/rhino-1.7.7.1.jar	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	270	404	Not Found	-	-	(empty)	-	-FbZ0xi2NtRzDdBk0Bb	-	text/html
1525026028.102116	CFCPI51JMEeZ5XVLz	172.17.0.2	38368	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/apache-extras/beanshell/bsh/2.0b6/bsh-2.0b6.jar	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	278	404	Not Found	-	-	(empty)	-Fahqzk1hqZbMkcZZY5	-	text/html{code}
In a nutshell: rhino js engine, jython and beanshell.  This is provided by maven central as well.

 

So I suggest to remove that repository here.

Will provide a patch by a github pull request ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-01 08:39:01.194,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed May 02 20:10:46 UTC 2018,,,,,,,0|i3t7kn:,9223372036854775807,,,,,,,,,,"01/May/18 08:39;githubbot;GitHub user oflebbe opened a pull request:

    https://github.com/apache/camel/pull/2311

    Remove servicemix repository

    See https://issues.apache.org/jira/browse/CAMEL-12474 for motivation and analysis.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oflebbe/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2311.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2311
    
----
commit 3c927ea43cd6b328b477e2bb3b17688403f023d9
Author: Olaf Flebbe <oflebbe@...>
Date:   2018-05-01T08:33:37Z

    Remove servicemix repository

----
","02/May/18 06:15;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2311
",02/May/18 20:10;oflebbe;Thank you!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't carry soapAction forward if operationName is specified explicitly for the CxfProducer,CAMEL-12465,13154383,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,23/Apr/18 06:32,23/Apr/18 06:50,13/Mar/19 22:20,23/Apr/18 06:50,,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-cxf,,,,,,0,,,,So that the outgoing soap message get chance to calculate soapAction from the operationName,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-04-23 06:32:22.0,,,,,,,0|i3svrb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-consul - service health state calculated from all services with same name,CAMEL-12448,13152697,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Vadim R,Vadim R,16/Apr/18 11:56,19/Apr/18 07:51,13/Mar/19 22:20,19/Apr/18 07:51,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-consul,,,,,,0,,,,"In Consul catalog registered two instances of one service. Health check for first instance have ""passed"" state, and for second instance - ""critical"". Camel returns both service instances with healty checks, which method ""isHealthy"" returns ""false"".

I've make some changes in ConsulServiceDiscoveryTest to show up this bug, and fix it in ConsulServiceDiscovery.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-16 12:00:17.626,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 16 13:18:32 UTC 2018,,,,,,,0|i3slfj:,9223372036854775807,,,,,,,,,,"16/Apr/18 12:00;githubbot;player13 opened a new pull request #2296: CAMEL-12448  - camel-consul: filter health checks by service id
URL: https://github.com/apache/camel/pull/2296
 
 
   In Consul catalog registered two instances of one service. Health check for first instance have ""passed"" state, and for second instance - ""critical"". Camel returns both service instances with healty checks, which method ""isHealthy"" returns ""false"".

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Apr/18 12:00;githubbot;GitHub user player13 opened a pull request:

    https://github.com/apache/camel/pull/2296

    CAMEL-12448  - camel-consul: filter health checks by service id

    In Consul catalog registered two instances of one service. Health check for first instance have ""passed"" state, and for second instance - ""critical"". Camel returns both service instances with healty checks, which method ""isHealthy"" returns ""false"".

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/player13/camel CAMEL-12448

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2296.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2296
    
----
commit 4a521a1fba5ea432838d2d168f72bb7a2eec53b8
Author: Vadim R <8365723+player13@...>
Date:   2018-04-16T11:58:44Z

    CAMEL-12448  - camel-consul: filter health checks by service id

----
","16/Apr/18 12:05;githubbot;davsclaus commented on issue #2296: CAMEL-12448  - camel-consul: filter health checks by service id
URL: https://github.com/apache/camel/pull/2296#issuecomment-381576196
 
 
   lgtm
   
   @lburgazzoli wonder if you could take a peak as well.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Apr/18 13:02;githubbot;lburgazzoli commented on a change in pull request #2296: CAMEL-12448  - camel-consul: filter health checks by service id
URL: https://github.com/apache/camel/pull/2296#discussion_r181725231
 
 

 ##########
 File path: components/camel-consul/src/main/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscovery.java
 ##########
 @@ -62,7 +62,12 @@ public ConsulServiceDiscovery(ConsulConfiguration configuration) throws Exceptio
             .getResponse();
 
         return services.stream()
-            .map(service -> newService(name, service, healths))
+            .map(service -> newService(
+                    name,
+                    service,
+                    healths.stream()
+                            .filter(serviceHealth -> serviceHealth.getService().getId().equals(service.getServiceId()))
+                            .collect(Collectors.toList())))
 
 Review comment:
   Wondering if this can be moved inside `newService`

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Apr/18 13:16;githubbot;player13 commented on a change in pull request #2296: CAMEL-12448  - camel-consul: filter health checks by service id
URL: https://github.com/apache/camel/pull/2296#discussion_r181729271
 
 

 ##########
 File path: components/camel-consul/src/main/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscovery.java
 ##########
 @@ -62,7 +62,12 @@ public ConsulServiceDiscovery(ConsulConfiguration configuration) throws Exceptio
             .getResponse();
 
         return services.stream()
-            .map(service -> newService(name, service, healths))
+            .map(service -> newService(
+                    name,
+                    service,
+                    healths.stream()
+                            .filter(serviceHealth -> serviceHealth.getService().getId().equals(service.getServiceId()))
+                            .collect(Collectors.toList())))
 
 Review comment:
   Done!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Apr/18 13:18;githubbot;lburgazzoli closed pull request #2296: CAMEL-12448  - camel-consul: filter health checks by service id
URL: https://github.com/apache/camel/pull/2296
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-consul/src/main/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscovery.java b/components/camel-consul/src/main/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscovery.java
index e7cfd5f7430..74b7c006c35 100644
--- a/components/camel-consul/src/main/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscovery.java
+++ b/components/camel-consul/src/main/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscovery.java
@@ -99,7 +99,11 @@ private ServiceDefinition newService(String serviceName, CatalogService service,
             service.getServiceAddress(),
             service.getServicePort(),
             meta,
-            new DefaultServiceHealth(serviceHealthList.stream().allMatch(this::isHealthy))
+            new DefaultServiceHealth(
+                    serviceHealthList.stream()
+                            .filter(h -> ObjectHelper.equal(h.getService().getId(), service.getServiceId()))
+                            .allMatch(this::isHealthy)
+            )
         );
     }
 }
diff --git a/components/camel-consul/src/test/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscoveryTest.java b/components/camel-consul/src/test/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscoveryTest.java
index 2523ad74017..119e85b68fd 100644
--- a/components/camel-consul/src/test/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscoveryTest.java
+++ b/components/camel-consul/src/test/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscoveryTest.java
@@ -21,6 +21,7 @@
 
 import com.orbitz.consul.AgentClient;
 import com.orbitz.consul.Consul;
+import com.orbitz.consul.model.agent.ImmutableRegCheck;
 import com.orbitz.consul.model.agent.ImmutableRegistration;
 import com.orbitz.consul.model.agent.Registration;
 import org.apache.camel.cloud.ServiceDefinition;
@@ -44,7 +45,12 @@ public void setUp() throws Exception {
         client = Consul.builder().build().agentClient();
         registrations = new ArrayList<>(3);
 
-        for (int i = 0; i < 3; i++) {
+        for (int i = 0; i < 6; i++) {
+            Registration.RegCheck c = ImmutableRegCheck.builder()
+                .ttl(""1m"")
+                .status(i < 3 ? ""passing"" : ""critical"")
+                .build();
+
             Registration r = ImmutableRegistration.builder()
                 .id(""service-"" + i)
                 .name(""my-service"")
@@ -53,6 +59,7 @@ public void setUp() throws Exception {
                 .addTags(""key1=value1"")
                 .addTags(""key2=value2"")
                 .port(9000 + i)
+                .check(c)
                 .build();
 
             client.register(r);
@@ -76,7 +83,7 @@ public void testServiceDiscovery() throws Exception {
 
         List<ServiceDefinition> services = discovery.getServices(""my-service"");
         assertNotNull(services);
-        assertEquals(3, services.size());
+        assertEquals(6, services.size());
 
         for (ServiceDefinition service : services) {
             assertFalse(service.getMetadata().isEmpty());
@@ -85,6 +92,7 @@ public void testServiceDiscovery() throws Exception {
             assertTrue(service.getMetadata().containsKey(""a-tag""));
             assertTrue(service.getMetadata().containsKey(""key1""));
             assertTrue(service.getMetadata().containsKey(""key2""));
+            assertTrue(service.getPort() < 9003 ? service.getHealth().isHealthy() : !service.getHealth().isHealthy());
         }
     }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Apr/18 13:18;githubbot;Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/2296
","16/Apr/18 13:18;githubbot;lburgazzoli commented on issue #2296: CAMEL-12448  - camel-consul: filter health checks by service id
URL: https://github.com/apache/camel/pull/2296#issuecomment-381596076
 
 
   Thx @player13 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,
file consumer - Should not use readlock by default,CAMEL-12457,13153605,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Apr/18 06:55,19/Apr/18 07:13,13/Mar/19 22:20,19/Apr/18 07:13,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-core,,,,,,0,,,,"The file consumer should use readLock=none by default, which is also what the documentation says. However its reconfigured to markerFile which is a little mistake.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 19 06:56:15 UTC 2018,,,,,,,0|i3sr0n:,9223372036854775807,,,,,,,,,,"19/Apr/18 06:56;davsclaus;See

http://camel.465427.n5.nabble.com/Question-about-Exchange-properties-when-using-File-component-tp5819311.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-consul - High CPU load on events watching,CAMEL-12418,13149955,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Viachaslau.Tsikhanovich,Viachaslau.Tsikhanovich,04/Apr/18 10:48,18/Apr/18 07:39,13/Mar/19 22:20,18/Apr/18 07:39,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-consul,,,,,,0,,,,"Camel-Consul library expects EventClient to block requests and [passes number of seconds to block request to EventClient|https://github.com/apache/camel/blob/camel-2.21.0/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java#L59].
 However Event HTTP Endpoint [does not support Blocking Queries|https://www.consul.io/api/event.html] and EventClient [ignores passed queryOptions|https://github.com/rickfast/consul-client/blob/1.1.1/src/main/java/com/orbitz/consul/EventClient.java#L164].
 This results in high CPU usage because ConsulEventConsumer constantly makes requests to Consul without any delay or blocking.
 Maybe some _Thread.sleep_ could be added to _EventWatcher.watch(EventClient client)_ before _client.listEvents_ call or any other fix to introduce delay between _listEvents_ requests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-07 07:40:32.857,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 18 07:39:54 UTC 2018,,,,,,,0|i3s4lb:,9223372036854775807,,,,,,,,,,"07/Apr/18 07:40;davsclaus;Yeah that sounds like a good idea. Contributions is welcome to add an option to configure the sleep delay, and have a resonable default of maybe 500 millis or something.","08/Apr/18 22:44;githubbot;Gr1f0n6x opened a new pull request #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283
 
 
   I believe that scheduledExecutorService with schedule method will be a little better then Thread.sleep(mills) (maybe i'm wrong).
   
   Also, i didn't add default value as proposed in description of this problem beecause as i found in `ConsulClientConfiguration` the default value of  `blockSeconds` is 10:
   ```
   @UriParams
   public class ConsulClientConfiguration implements Cloneable {
       . . . 
       @UriParam(label = ""consumer,watch"", defaultValue = ""10"")
       private Integer blockSeconds = 10;
       . . . 
   }
   ```
   
   ## Check style
   Result of `mvn clean install -Psourcecheck`:
   ```
   [INFO] Scanning for projects...
   [INFO]                                                                         
   [INFO] ------------------------------------------------------------------------
   [INFO] Building Camel :: Consul 2.22.0-SNAPSHOT
   [INFO] ------------------------------------------------------------------------
   [INFO] 
   [INFO] --- maven-clean-plugin:3.0.0:clean (default-clean) @ camel-consul ---
   [INFO] Deleting D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target
   [INFO] 
   [INFO] --- maven-enforcer-plugin:1.4.1:enforce (enforce-maven) @ camel-consul ---
   [INFO] 
   [INFO] --- maven-bundle-plugin:3.5.0:cleanVersions (versions) @ camel-consul ---
   [INFO] 
   [INFO] --- maven-checkstyle-plugin:3.0.0:checkstyle (default-cli) @ camel-consul ---
   [INFO] Starting audit...
   Audit done.
   [INFO] 
   [INFO] --- maven-remote-resources-plugin:1.5:process (process-resource-bundles) @ camel-consul ---
   [INFO] 
   [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:prepare-components (prepare) @ camel-consul ---
   [INFO] Generated D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\generated\camel\components\META-INF\services\org\apache\camel\component.properties containing 1 Camel component: consul
   [INFO] 
   [INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ camel-consul ---
   [INFO] Using 'UTF-8' encoding to copy filtered resources.
   [INFO] Copying 4 resources
   [INFO] Copying 3 resources
   [INFO] Copying 1 resource
   [INFO] skip non existing resourceDirectory D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\generated\camel\dataformats
   [INFO] skip non existing resourceDirectory D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\generated\camel\languages
   [INFO] 
   [INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ camel-consul ---
   [INFO] Changes detected - recompiling the module!
   [INFO] Compiling 37 source files to D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\classes
   [INFO] 
   [INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ camel-consul ---
   [INFO] Using 'UTF-8' encoding to copy filtered resources.
   [INFO] Copying 4 resources
   [INFO] Copying 3 resources
   [INFO] 
   [INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ camel-consul ---
   [INFO] Changes detected - recompiling the module!
   [INFO] Compiling 23 source files to D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\test-classes
   [INFO] 
   [INFO] --- maven-surefire-plugin:2.20.1:test (default-test) @ camel-consul ---
   [INFO] Tests are skipped.
   [INFO] 
   [INFO] --- maven-bundle-plugin:3.5.0:manifest (bundle-manifest) @ camel-consul ---
   [WARNING] Manifest org.apache.camel:camel-consul:jar:2.22.0-SNAPSHOT : Unused Import-Package instructions: [org.springframework.ws.*, org.springframework.xml.*, org.springframework.*, org.apache.cxf.*, org.apache.qpid.*, org.apache.abdera.*, org.apache.commons.httpclient.*, org.apache.velocity.*, org.apache.xmlbeans.*, org.eclipse.jetty.*, com.thoughtworks.xstream.*, org.antlr.stringtemplate.*, org.ccil.cowan.tagsoup.*, org.mortbay.cometd.*, net.sf.flatpack.*, net.sf.saxon.*, freemarker.*, javax.persistence.*, org.apache.lucene.*, org.apache.solr.*] 
   [INFO] 
   [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:validate-components (validate) @ camel-consul ---
   [INFO] Validation complete
   [INFO] 
   [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:prepare-spring-boot-starter (validate) @ camel-consul ---
   [INFO] Spring-Boot-Starter: starter dir for the component is: D:\Program Files\WORK\WORK_Java\camel\platforms\spring-boot\components-starter\camel-consul-starter
   [INFO] Reusing the existing pom.xml for the starter
   [INFO] 
   [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:prepare-spring-boot-auto-configuration (validate) @ camel-consul ---
   [INFO] Updated existing file: D:\Program Files\WORK\WORK_Java\camel\platforms\spring-boot\components-starter\camel-consul-starter\src\main\java\org\apache\camel\component\consul\springboot\ConsulComponentConfiguration.java
   [INFO] Updated existing file: D:\Program Files\WORK\WORK_Java\camel\platforms\spring-boot\components-starter\camel-consul-starter\src\main\java\org\apache\camel\component\consul\springboot\ConsulComponentAutoConfiguration.java
   [INFO] 
   [INFO] --- maven-jar-plugin:3.0.2:jar (default-jar) @ camel-consul ---
   [INFO] Building jar: D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\camel-consul-2.22.0-SNAPSHOT.jar
   [INFO] 
   [INFO] --- maven-site-plugin:3.5.1:attach-descriptor (attach-descriptor) @ camel-consul ---
   [INFO] 
   [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:update-readme (readme) @ camel-consul ---
   [INFO] 
   [INFO] --- maven-install-plugin:2.5.2:install (default-install) @ camel-consul ---
   [INFO] Installing D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\camel-consul-2.22.0-SNAPSHOT.jar to C:\Users\GrIfOn\.m2\repository\org\apache\camel\camel-consul\2.22.0-SNAPSHOT\camel-consul-2.22.0-SNAPSHOT.jar
   [INFO] Installing D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\pom.xml to C:\Users\GrIfOn\.m2\repository\org\apache\camel\camel-consul\2.22.0-SNAPSHOT\camel-consul-2.22.0-SNAPSHOT.pom
   [INFO] ------------------------------------------------------------------------
   [INFO] BUILD SUCCESS
   [INFO] ------------------------------------------------------------------------
   [INFO] Total time: 16.378 s
   [INFO] Finished at: 2018-04-09T01:29:11+03:00
   [INFO] Final Memory: 53M/553M
   [INFO] ------------------------------------------------------------------------
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/Apr/18 22:44;githubbot;GitHub user Gr1f0n6x opened a pull request:

    https://github.com/apache/camel/pull/2283

    CAMEL-12418: High CPU load on events watching

    I believe that scheduledExecutorService with schedule method will be a little better then Thread.sleep(mills) (maybe i'm wrong).
    
    Also, i didn't add default value as proposed in description of this problem beecause as i found in `ConsulClientConfiguration` the default value of  `blockSeconds` is 10:
    ```
    @UriParams
    public class ConsulClientConfiguration implements Cloneable {
        . . . 
        @UriParam(label = ""consumer,watch"", defaultValue = ""10"")
        private Integer blockSeconds = 10;
        . . . 
    }
    ```
    
    ## Check style
    Result of `mvn clean install -Psourcecheck`:
    ```
    [INFO] Scanning for projects...
    [INFO]                                                                         
    [INFO] ------------------------------------------------------------------------
    [INFO] Building Camel :: Consul 2.22.0-SNAPSHOT
    [INFO] ------------------------------------------------------------------------
    [INFO] 
    [INFO] --- maven-clean-plugin:3.0.0:clean (default-clean) @ camel-consul ---
    [INFO] Deleting D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target
    [INFO] 
    [INFO] --- maven-enforcer-plugin:1.4.1:enforce (enforce-maven) @ camel-consul ---
    [INFO] 
    [INFO] --- maven-bundle-plugin:3.5.0:cleanVersions (versions) @ camel-consul ---
    [INFO] 
    [INFO] --- maven-checkstyle-plugin:3.0.0:checkstyle (default-cli) @ camel-consul ---
    [INFO] Starting audit...
    Audit done.
    [INFO] 
    [INFO] --- maven-remote-resources-plugin:1.5:process (process-resource-bundles) @ camel-consul ---
    [INFO] 
    [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:prepare-components (prepare) @ camel-consul ---
    [INFO] Generated D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\generated\camel\components\META-INF\services\org\apache\camel\component.properties containing 1 Camel component: consul
    [INFO] 
    [INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ camel-consul ---
    [INFO] Using 'UTF-8' encoding to copy filtered resources.
    [INFO] Copying 4 resources
    [INFO] Copying 3 resources
    [INFO] Copying 1 resource
    [INFO] skip non existing resourceDirectory D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\generated\camel\dataformats
    [INFO] skip non existing resourceDirectory D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\generated\camel\languages
    [INFO] 
    [INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ camel-consul ---
    [INFO] Changes detected - recompiling the module!
    [INFO] Compiling 37 source files to D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\classes
    [INFO] 
    [INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ camel-consul ---
    [INFO] Using 'UTF-8' encoding to copy filtered resources.
    [INFO] Copying 4 resources
    [INFO] Copying 3 resources
    [INFO] 
    [INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ camel-consul ---
    [INFO] Changes detected - recompiling the module!
    [INFO] Compiling 23 source files to D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\test-classes
    [INFO] 
    [INFO] --- maven-surefire-plugin:2.20.1:test (default-test) @ camel-consul ---
    [INFO] Tests are skipped.
    [INFO] 
    [INFO] --- maven-bundle-plugin:3.5.0:manifest (bundle-manifest) @ camel-consul ---
    [WARNING] Manifest org.apache.camel:camel-consul:jar:2.22.0-SNAPSHOT : Unused Import-Package instructions: [org.springframework.ws.*, org.springframework.xml.*, org.springframework.*, org.apache.cxf.*, org.apache.qpid.*, org.apache.abdera.*, org.apache.commons.httpclient.*, org.apache.velocity.*, org.apache.xmlbeans.*, org.eclipse.jetty.*, com.thoughtworks.xstream.*, org.antlr.stringtemplate.*, org.ccil.cowan.tagsoup.*, org.mortbay.cometd.*, net.sf.flatpack.*, net.sf.saxon.*, freemarker.*, javax.persistence.*, org.apache.lucene.*, org.apache.solr.*] 
    [INFO] 
    [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:validate-components (validate) @ camel-consul ---
    [INFO] Validation complete
    [INFO] 
    [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:prepare-spring-boot-starter (validate) @ camel-consul ---
    [INFO] Spring-Boot-Starter: starter dir for the component is: D:\Program Files\WORK\WORK_Java\camel\platforms\spring-boot\components-starter\camel-consul-starter
    [INFO] Reusing the existing pom.xml for the starter
    [INFO] 
    [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:prepare-spring-boot-auto-configuration (validate) @ camel-consul ---
    [INFO] Updated existing file: D:\Program Files\WORK\WORK_Java\camel\platforms\spring-boot\components-starter\camel-consul-starter\src\main\java\org\apache\camel\component\consul\springboot\ConsulComponentConfiguration.java
    [INFO] Updated existing file: D:\Program Files\WORK\WORK_Java\camel\platforms\spring-boot\components-starter\camel-consul-starter\src\main\java\org\apache\camel\component\consul\springboot\ConsulComponentAutoConfiguration.java
    [INFO] 
    [INFO] --- maven-jar-plugin:3.0.2:jar (default-jar) @ camel-consul ---
    [INFO] Building jar: D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\camel-consul-2.22.0-SNAPSHOT.jar
    [INFO] 
    [INFO] --- maven-site-plugin:3.5.1:attach-descriptor (attach-descriptor) @ camel-consul ---
    [INFO] 
    [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:update-readme (readme) @ camel-consul ---
    [INFO] 
    [INFO] --- maven-install-plugin:2.5.2:install (default-install) @ camel-consul ---
    [INFO] Installing D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\camel-consul-2.22.0-SNAPSHOT.jar to C:\Users\GrIfOn\.m2\repository\org\apache\camel\camel-consul\2.22.0-SNAPSHOT\camel-consul-2.22.0-SNAPSHOT.jar
    [INFO] Installing D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\pom.xml to C:\Users\GrIfOn\.m2\repository\org\apache\camel\camel-consul\2.22.0-SNAPSHOT\camel-consul-2.22.0-SNAPSHOT.pom
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD SUCCESS
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time: 16.378 s
    [INFO] Finished at: 2018-04-09T01:29:11+03:00
    [INFO] Final Memory: 53M/553M
    [INFO] ------------------------------------------------------------------------
    ```

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Gr1f0n6x/camel CAMEL-12418

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2283.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2283
    
----
commit 5ea5cbda3a52948669e7a2fe00eacb577dd674ba
Author: Nick <grifon52@...>
Date:   2018-04-08T22:30:46Z

    Add delay between listEvents requests

----
","09/Apr/18 07:13;githubbot;davsclaus commented on issue #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#issuecomment-379656748
 
 
   We should have code that shutdown that executor service - also the executor service should be created via Camel's API for that, see `ExecutorServiceManager` you can get via `CamelContext`

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Apr/18 07:14;githubbot;davsclaus commented on issue #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#issuecomment-379656748
 
 
   We should have code that shutdown that executor service - also the executor service should be created via Camel's API for that, see `ExecutorServiceManager` you can get via `CamelContext`

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",09/Apr/18 07:39;lb;maybe the issue should also be reported against the underlying consul library so this may get fixed on their side,"10/Apr/18 17:30;githubbot;Gr1f0n6x commented on issue #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#issuecomment-380183508
 
 
   Ok, i'll fix it 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Apr/18 10:42;githubbot;davsclaus commented on issue #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#issuecomment-381557484
 
 
   @Gr1f0n6x let us know how it goes for you

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Apr/18 01:20;githubbot;Gr1f0n6x commented on issue #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#issuecomment-381799061
 
 
   @davsclaus, I tried to use `ConsulEndpoint` for getting `CamelContext` as it implemented `CamelContextAware`.
   Also, i move field `scheduledExecutorService` to the `ConsulEventConsumer` class from the inner class `EventWatcher` because otherwise it will created more than one thread for this background work. 
   I'm not sure about `doStop` but i overrided it and shutdown executor there.
   
   Sorry for delay. I had some problems with building the project 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Apr/18 08:38;githubbot;dmvolod commented on a change in pull request #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#discussion_r181994251
 
 

 ##########
 File path: components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
 ##########
 @@ -33,32 +36,46 @@
 import org.apache.camel.component.consul.ConsulEndpoint;
 
 public final class ConsulEventConsumer extends AbstractConsulConsumer<EventClient> {
+    private ScheduledExecutorService scheduledExecutorService;
 
     public ConsulEventConsumer(ConsulEndpoint endpoint, ConsulConfiguration configuration, Processor processor) {
         super(endpoint, configuration, processor, Consul::eventClient);
+        this.scheduledExecutorService = endpoint.getCamelContext().getExecutorServiceManager().newSingleThreadScheduledExecutor(this, ""ConsulEventConsumer"");
     }
 
     @Override
     protected Runnable createWatcher(EventClient client) throws Exception {
         return new EventWatcher(client);
     }
 
+    @Override
+    protected void doStop() throws Exception {
+        scheduledExecutorService.shutdown();
 
 Review comment:
   @Gr1f0n6x , please use ExecutorServiceManager.shutdownGraceful there

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Apr/18 13:26;githubbot;Gr1f0n6x commented on a change in pull request #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#discussion_r182071274
 
 

 ##########
 File path: components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
 ##########
 @@ -33,32 +36,46 @@
 import org.apache.camel.component.consul.ConsulEndpoint;
 
 public final class ConsulEventConsumer extends AbstractConsulConsumer<EventClient> {
+    private ScheduledExecutorService scheduledExecutorService;
 
     public ConsulEventConsumer(ConsulEndpoint endpoint, ConsulConfiguration configuration, Processor processor) {
         super(endpoint, configuration, processor, Consul::eventClient);
+        this.scheduledExecutorService = endpoint.getCamelContext().getExecutorServiceManager().newSingleThreadScheduledExecutor(this, ""ConsulEventConsumer"");
     }
 
     @Override
     protected Runnable createWatcher(EventClient client) throws Exception {
         return new EventWatcher(client);
     }
 
+    @Override
+    protected void doStop() throws Exception {
+        scheduledExecutorService.shutdown();
 
 Review comment:
   @dmvolod, did it. Thank you for hint, didn't notice this method before

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Apr/18 07:34;githubbot;davsclaus commented on a change in pull request #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#discussion_r182332929
 
 

 ##########
 File path: components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
 ##########
 @@ -28,37 +30,54 @@
 import org.apache.camel.Exchange;
 import org.apache.camel.Message;
 import org.apache.camel.Processor;
+import org.apache.camel.spi.ExecutorServiceManager;
 import org.apache.camel.component.consul.ConsulConfiguration;
 import org.apache.camel.component.consul.ConsulConstants;
 import org.apache.camel.component.consul.ConsulEndpoint;
 
 public final class ConsulEventConsumer extends AbstractConsulConsumer<EventClient> {
+    private ExecutorServiceManager executorServiceManager;
+    private ScheduledExecutorService scheduledExecutorService;
 
     public ConsulEventConsumer(ConsulEndpoint endpoint, ConsulConfiguration configuration, Processor processor) {
         super(endpoint, configuration, processor, Consul::eventClient);
+        this.executorServiceManager = endpoint.getCamelContext().getExecutorServiceManager();
+        this.scheduledExecutorService = this.executorServiceManager.newSingleThreadScheduledExecutor(this, ""ConsulEventConsumer"");
 
 Review comment:
   We create these in the doStart method, so we have start/stop logic together, and the constructors are light-weight

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Apr/18 07:35;githubbot;davsclaus closed pull request #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java b/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
index 2e8a141e0bb..7133fec5df3 100644
--- a/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
+++ b/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
@@ -18,6 +18,8 @@
 
 import java.math.BigInteger;
 import java.util.List;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
 
 import com.orbitz.consul.Consul;
 import com.orbitz.consul.EventClient;
@@ -28,14 +30,19 @@
 import org.apache.camel.Exchange;
 import org.apache.camel.Message;
 import org.apache.camel.Processor;
+import org.apache.camel.spi.ExecutorServiceManager;
 import org.apache.camel.component.consul.ConsulConfiguration;
 import org.apache.camel.component.consul.ConsulConstants;
 import org.apache.camel.component.consul.ConsulEndpoint;
 
 public final class ConsulEventConsumer extends AbstractConsulConsumer<EventClient> {
+    private ExecutorServiceManager executorServiceManager;
+    private ScheduledExecutorService scheduledExecutorService;
 
     public ConsulEventConsumer(ConsulEndpoint endpoint, ConsulConfiguration configuration, Processor processor) {
         super(endpoint, configuration, processor, Consul::eventClient);
+        this.executorServiceManager = endpoint.getCamelContext().getExecutorServiceManager();
+        this.scheduledExecutorService = this.executorServiceManager.newSingleThreadScheduledExecutor(this, ""ConsulEventConsumer"");
     }
 
     @Override
@@ -43,22 +50,34 @@ protected Runnable createWatcher(EventClient client) throws Exception {
         return new EventWatcher(client);
     }
 
+    @Override
+    protected void doStop() throws Exception {
+        executorServiceManager.shutdownGraceful(scheduledExecutorService);
+        super.doStop();
+    }
+
     // *************************************************************************
     // Watch
     // *************************************************************************
 
     private class EventWatcher extends AbstractWatcher implements EventResponseCallback {
+
         EventWatcher(EventClient client) {
             super(client);
         }
 
         @Override
-        public void watch(EventClient client) {
-            client.listEvents(
-                key,
-                QueryOptions.blockSeconds(configuration.getBlockSeconds(), index.get()).build(),
-                this
-            );
+        public void watch(final EventClient client) {
+            scheduledExecutorService.schedule(new Runnable() {
+                @Override
+                public void run() {
+                    client.listEvents(
+                        key,
+                        QueryOptions.blockSeconds(configuration.getBlockSeconds(), index.get()).build(),
+                        EventWatcher.this
+                    );
+                }
+            }, configuration.getBlockSeconds(), TimeUnit.SECONDS);
         }
 
         @Override


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Apr/18 07:35;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2283
",18/Apr/18 07:39;davsclaus;Thanks for reporting and the PR,,,,,,,,,,,,,,,,,,
DefaultServiceLoadBalancer throws IndexOutOfBoundsException after applying ServiceFilter,CAMEL-12449,13152741,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Vadim R,Vadim R,16/Apr/18 14:41,17/Apr/18 08:31,13/Mar/19 22:20,17/Apr/18 07:58,2.21.0,,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-core,,,,,,0,,,,"If no services remains after applying ServiceFilter in DefaultServiceLoadBalancer, expecting exception RejectedExecutionException(""No active services with name "" + serviceName), but throws IndexOutOfBoundsException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-16 14:45:10.658,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 17 08:31:50 UTC 2018,,,,,,,0|i3slpb:,9223372036854775807,,,,,,,,,,"16/Apr/18 14:45;githubbot;player13 opened a new pull request #2297: CAMEL-12449: DefaultServiceLoadBalancer throws IndexOutOfBoundsException
URL: https://github.com/apache/camel/pull/2297
 
 
   If no services remains after applying ServiceFilter in DefaultServiceLoadBalancer, expecting exception RejectedExecutionException(""No active services with name "" + serviceName), but throws IndexOutOfBoundsException.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Apr/18 14:45;githubbot;GitHub user player13 opened a pull request:

    https://github.com/apache/camel/pull/2297

    CAMEL-12449: DefaultServiceLoadBalancer throws IndexOutOfBoundsException

    If no services remains after applying ServiceFilter in DefaultServiceLoadBalancer, expecting exception RejectedExecutionException(""No active services with name "" + serviceName), but throws IndexOutOfBoundsException.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/player13/camel CAMEL-12449

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2297.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2297
    
----
commit d7e85d89f1d2469862c9eadd5ecd82cb4a7aea8f
Author: Vadim R <8365723+player13@...>
Date:   2018-04-16T14:43:33Z

    CAMEL-12449: DefaultServiceLoadBalancer throws IndexOutOfBoundsException after applying ServiceFilter

----
","17/Apr/18 07:53;githubbot;davsclaus closed pull request #2297: CAMEL-12449: DefaultServiceLoadBalancer throws IndexOutOfBoundsException
URL: https://github.com/apache/camel/pull/2297
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/impl/cloud/DefaultServiceLoadBalancer.java b/camel-core/src/main/java/org/apache/camel/impl/cloud/DefaultServiceLoadBalancer.java
index 19a55fa31a0..51d33cd0c59 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/cloud/DefaultServiceLoadBalancer.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/cloud/DefaultServiceLoadBalancer.java
@@ -136,7 +136,7 @@ protected void doStop() throws Exception {
             // filter services
             services = serviceFilter.apply(services);
             // let the client service chooser find which server to use
-            service = services.size() > 1 ? serviceChooser.choose(services) : services.get(0);
+            service = services.isEmpty() ? null : services.size() > 1 ? serviceChooser.choose(services) : services.get(0);
             if (service == null) {
                 throw new RejectedExecutionException(""No active services with name "" + serviceName);
             }
diff --git a/camel-core/src/test/java/org/apache/camel/impl/cloud/LoadBalancerTest.java b/camel-core/src/test/java/org/apache/camel/impl/cloud/LoadBalancerTest.java
index a78c291c582..1b30c29f324 100644
--- a/camel-core/src/test/java/org/apache/camel/impl/cloud/LoadBalancerTest.java
+++ b/camel-core/src/test/java/org/apache/camel/impl/cloud/LoadBalancerTest.java
@@ -16,22 +16,31 @@
  */
 package org.apache.camel.impl.cloud;
 
+import java.util.concurrent.RejectedExecutionException;
 import java.util.stream.Collectors;
 
-import org.apache.camel.ContextTestSupport;
+import org.apache.camel.impl.DefaultCamelContext;
+import org.junit.BeforeClass;
 import org.junit.Test;
 
-public class LoadBalancerTest extends ContextTestSupport {
-    @Test
-    public void testLoadBalancer() throws Exception {
-        StaticServiceDiscovery serviceDiscovery = new StaticServiceDiscovery();
+import static junit.framework.TestCase.assertEquals;
+
+public class LoadBalancerTest {
+
+    private static StaticServiceDiscovery serviceDiscovery = new StaticServiceDiscovery();
+
+    @BeforeClass
+    public static void setUp() {
         serviceDiscovery.addServer(""no-name"", ""127.0.0.1"", 2001);
         serviceDiscovery.addServer(""no-name"", ""127.0.0.1"", 2002);
         serviceDiscovery.addServer(""no-name"", ""127.0.0.1"", 1001);
         serviceDiscovery.addServer(""no-name"", ""127.0.0.1"", 1002);
+    }
 
+    @Test
+    public void testLoadBalancer() throws Exception {
         DefaultServiceLoadBalancer loadBalancer = new DefaultServiceLoadBalancer();
-        loadBalancer.setCamelContext(context);
+        loadBalancer.setCamelContext(new DefaultCamelContext());
         loadBalancer.setServiceDiscovery(serviceDiscovery);
         loadBalancer.setServiceFilter(services -> services.stream().filter(s -> s.getPort() < 2000).collect(Collectors.toList()));
         loadBalancer.setServiceChooser(new RoundRobinServiceChooser());
@@ -44,4 +53,14 @@ public void testLoadBalancer() throws Exception {
             return false;
         });
     }
+
+    @Test(expected = RejectedExecutionException.class)
+    public void testNoActiveServices() throws Exception {
+        DefaultServiceLoadBalancer loadBalancer = new DefaultServiceLoadBalancer();
+        loadBalancer.setCamelContext(new DefaultCamelContext());
+        loadBalancer.setServiceDiscovery(serviceDiscovery);
+        loadBalancer.setServiceFilter(services -> services.stream().filter(s -> s.getPort() < 1000).collect(Collectors.toList()));
+        loadBalancer.setServiceChooser(new RoundRobinServiceChooser());
+        loadBalancer.process(""no-name"", service -> false);
+    }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Apr/18 07:53;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2297
",17/Apr/18 07:58;davsclaus;Thanks for the PR. I fixed the checkstyle issue.,"17/Apr/18 08:31;githubbot;player13 commented on issue #2297: CAMEL-12449: DefaultServiceLoadBalancer throws IndexOutOfBoundsException
URL: https://github.com/apache/camel/pull/2297#issuecomment-381898820
 
 
   @davsclaus Tnx!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Apr/18 08:31;githubbot;player13 commented on issue #2297: CAMEL-12449: DefaultServiceLoadBalancer throws IndexOutOfBoundsException
URL: https://github.com/apache/camel/pull/2297#issuecomment-381898820
 
 
   @davsclaus Thx!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,
spring-boot-rest-swagger example does not compile due to missing servlet-api dependendency,CAMEL-12445,13152660,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,16/Apr/18 09:36,16/Apr/18 10:39,13/Mar/19 22:20,16/Apr/18 10:39,2.21.1,,,,,,,,,,,,,,,2.21.1,,,,,examples,,,,,,0,,,,"camel-example-spring-boot-rest-swagger in camel-2.21.x branch does not compile due to missing servlet-api dep. Comparing with master, spring-boot-starter-undertow dep seems to be missing there. PR follows.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-16 09:40:22.493,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 16 10:39:43 UTC 2018,,,,,,,0|i3sl7b:,9223372036854775807,,,,,,,,,,"16/Apr/18 09:40;githubbot;ppalaga opened a new pull request #2295: CAMEL-12445: spring-boot-rest-swagger example does not compile due to
URL: https://github.com/apache/camel/pull/2295
 
 
   missing servlet-api dependendency

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Apr/18 09:40;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2295

    CAMEL-12445: spring-boot-rest-swagger example does not compile due to

    missing servlet-api dependendency

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-12445

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2295.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2295
    
----
commit 930f1307df2eb0d8e4326770de465b1c8f8047d3
Author: Peter Palaga <ppalaga@...>
Date:   2018-04-16T09:38:55Z

    CAMEL-12445: spring-boot-rest-swagger example does not compile due to
    missing servlet-api dependendency

----
","16/Apr/18 10:39;githubbot;davsclaus closed pull request #2295: CAMEL-12445: spring-boot-rest-swagger example does not compile due to
URL: https://github.com/apache/camel/pull/2295
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/examples/camel-example-spring-boot-rest-swagger/pom.xml b/examples/camel-example-spring-boot-rest-swagger/pom.xml
index d97db33772b..1ddeabf0670 100644
--- a/examples/camel-example-spring-boot-rest-swagger/pom.xml
+++ b/examples/camel-example-spring-boot-rest-swagger/pom.xml
@@ -67,6 +67,10 @@
         </exclusion>
       </exclusions>
     </dependency>
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-undertow</artifactId>
+    </dependency>
 
     <!-- Camel -->
     <dependency>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Apr/18 10:39;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2295
",16/Apr/18 10:39;davsclaus;A Jira ticket was not needed for a trivial thing like this as it was not a bug in a released version,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MulticastProcessor doProcessParallel blocks indefinitly if exception occurs in it.next(),CAMEL-12441,13152202,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,shellysoft,shellysoft,13/Apr/18 08:00,16/Apr/18 09:00,13/Mar/19 22:20,16/Apr/18 08:32,2.20.3,2.21.0,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-core,,,,,,0,,,,"After upgrading from camel 2.17.5 to 2.21.0 the following problem was encountered:

Context:
A camel RouteBuilder with a split :

{code:title=MyRouteBuilder.java|borderStyle=solid}
public class MyRouteBuilder extends RouteBuilder {
    @Override
    public void configure() throws Exception {
         from(""direct:in"")
                 .split()
                      .xtokenize(""//someTocken"", 'i', NAMESPACES)
                      .aggregationStrategy(nw UseLatestAggregationStrategy())
                      .stopOnException()
                      .parallelAggregate()
                      .parallelProcessing()
                      .executorServiceRef(""splitExecutorService"").stopOnException()
                      .streaming().stopOnException()
                      .id(""xml-splitter"")
                .to(""direct:out"")
                .routeId(getClass().getSimpleName());
    } 
}
{code}

Problem encountered:
A malformed xml arrives on this route. it.hasNext() returns true but it.next() throws an exception. This causes an indefinite wait in MulticastProcessor at line 374.

Reason:
A call to countDown on aggregationOnTheFlyDone is never performed and thus the latch waits indefinitely.

Possible solution:
A call to aggregationOnTheFlyDone .countDown inside the catch corresponding to the try surrounding the while.

","Windows 8, java 1.8.0_162, camel 2.21.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-14 07:51:41.432,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 16 09:00:52 UTC 2018,,,,,,,0|i3sien:,9223372036854775807,,,,,,,,,,14/Apr/18 07:51;davsclaus;Can you post your XML sample,"15/Apr/18 08:54;shellysoft;I've created an example on my github account:

[https://github.com/shellysoft/CAMEL-12441]

I've tried to mirror the context I have in my project where I discovered the issue. As javax.xml.stream.XMLInputFactory I use com.ctc.wstx.stax.WstxInputFactory.

Please do not hesitate if you have any questions.

Thank you!",16/Apr/18 08:22;davsclaus;Thanks I have reproduced the issue and have a fix. Mind that this problem is only on the first next call.,16/Apr/18 08:32;davsclaus;Thanks for the sample project.,"16/Apr/18 09:00;shellysoft;You are most welcome!

Ah, yes! Because after the first call the aggregateOnTheFlyTask is submitted to the aggregateExecutorService and the allTaskSubmitted flag does it's job.

Thank you!

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTPHelper.setCharsetFromContentType can't properly extract the charset if it isn't the last parameter,CAMEL-12424,13150428,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fabricio.pellegrini,fabricio.pellegrini,05/Apr/18 20:45,13/Apr/18 07:02,13/Mar/19 22:20,13/Apr/18 07:02,2.19.2,,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-http-common,,,,,,0,easyfix,,,"When our application recieves the Content-Type: application/json;charset=utf-8;profile=""http://my.company.profile.errorSchema.4.json#"", the HTTPHelper sets the wrong value for the Exchange.CHARSET_NAME in the Exchange.
{quote} @SuppressWarnings(""deprecation"")
     public static void setCharsetFromContentType(String contentType, Exchange exchange) {
         if (contentType != null) {
             // find the charset and set it to the Exchange
             int index = contentType.indexOf(""charset="");
             if (index > 0) {

                 String charset = contentType.substring(index + 8); //HERE IS THE PROBLEM                 exchange.setProperty(Exchange.CHARSET_NAME, IOConverter.normalizeCharset(charset));             }

        }
     }
{quote}
Because of that, when the HTTPProducer tries to load the body we get the following error:
{quote}Exception: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is instance of java.io.InputStream] due java.io.UnsupportedEncodingException: utf-8;profile=""http://my.company.profile.errorSchema.4.json#
 org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is instance of java.io.InputStream] due java.io.UnsupportedEncodingException: utf-8;profile=""http://my.company.profile.errorSchema.4.json#
         at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:629) [178:org.apache.camel.camel-core:2.19.2]
         at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:150) [178:org.apache.camel.camel-core:2.19.2]
         at org.apache.camel.core.osgi.OsgiTypeConverter.convertTo(OsgiTypeConverter.java:120) [176:org.apache.camel.camel-blueprint:2.19.2]
         at org.apache.camel.component.http4.HttpProducer.populateHttpOperationFailedException(HttpProducer.java:305) [182:org.apache.camel.camel-http4:2.19.2]
         at org.apache.camel.component.http4.HttpProducer.process(HttpProducer.java:207) [182:org.apache.camel.camel-http4:2.19.2]

Caused by: org.apache.camel.RuntimeCamelException: java.io.UnsupportedEncodingException: utf-8;profile=""http://my.company.profile.errorSchema.4.json#
         at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1774) ~[?:?]
         at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1355) ~[?:?]
         at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59) ~[?:?]
         at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:306) ~[?:?]
         at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:133) ~[?:?]
         ... 70 more
 Caused by: java.io.UnsupportedEncodingException: utf-8;profile=""http://my.company.profile.errorSchema.4.json#
         at sun.nio.cs.StreamDecoder.forInputStreamReader(StreamDecoder.java:71) ~[?:?]
         at java.io.InputStreamReader.<init>(InputStreamReader.java:100) ~[?:?]
         at org.apache.camel.converter.IOConverter.toReader(IOConverter.java:179) ~[?:?]
         at org.apache.camel.converter.IOConverter.toString(IOConverter.java:364) ~[?:?]
         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
         at java.lang.reflect.Method.invoke(Method.java:498) ~[?:?]
         at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1351) ~[?:?]
         at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59) ~[?:?]
         at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:306) ~[?:?]
         at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:133) ~[?:?]
{quote}
 ","Apache Camel 2.19.2

Karaf 4.1.2

JDK 1.8.0_161",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-13 07:02:28.915,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 13 07:02:28 UTC 2018,,,,,,,0|i3s7hb:,9223372036854775807,,,,,,,,,,"06/Apr/18 08:33;fabricio.pellegrini;This is the temporary patch that I made locally to fix the issue.

    @SuppressWarnings(""deprecation"")
    public static void setCharsetFromContentType(String contentType, Exchange exchange) {
        if (contentType != null) {
            String charset = getCharsetFromContentType(contentType);
            exchange.setProperty(Exchange.CHARSET_NAME, charset);
        }
    }",13/Apr/18 07:02;davsclaus;Thanks for reporting and providing the suggested patch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-undertow - should extract body message from PATCH request,CAMEL-12436,13151944,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tturek,tturek,12/Apr/18 11:49,12/Apr/18 14:07,13/Mar/19 22:20,12/Apr/18 14:07,2.21.0,,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-undertow,,,,,,0,,,,Undertow component should process body message of HTTP PATCH request.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-12 11:53:20.874,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 12 14:07:24 UTC 2018,,,,,,,0|i3sgtj:,9223372036854775807,,,,,,,,,,"12/Apr/18 11:53;githubbot;osmman opened a new pull request #2289: CAMEL-12436: Fix Undertow to extract body message from PATCH request
URL: https://github.com/apache/camel/pull/2289
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Apr/18 11:53;githubbot;GitHub user osmman opened a pull request:

    https://github.com/apache/camel/pull/2289

    CAMEL-12436: Fix Undertow to extract body message from PATCH request

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/osmman/camel undertow-patch-method

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2289.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2289
    
----
commit 3dfd992e7a262f4c917351f1ba535e4d3d59d2a9
Author: Tomas Turek <tturek@...>
Date:   2018-04-11T14:35:46Z

    CAMEL-12436: Fix Undertow to extract body message from PATCH request

----
","12/Apr/18 14:04;githubbot;davsclaus closed pull request #2289: CAMEL-12436: Fix Undertow to extract body message from PATCH request
URL: https://github.com/apache/camel/pull/2289
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java
index 91bd8522205..ae1f6fe6e45 100644
--- a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java
+++ b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java
@@ -124,7 +124,7 @@ public Message toCamelMessage(HttpServerExchange httpExchange, Exchange exchange
         } else {
             //extract body by myself if undertow parser didn't handle and the method is allowed to have one
             //body is extracted as byte[] then auto TypeConverter kicks in
-            if (Methods.POST.equals(httpExchange.getRequestMethod()) || Methods.PUT.equals(httpExchange.getRequestMethod())) {
+            if (Methods.POST.equals(httpExchange.getRequestMethod()) || Methods.PUT.equals(httpExchange.getRequestMethod()) || Methods.PATCH.equals(httpExchange.getRequestMethod())) {
                 result.setBody(readFromChannel(httpExchange.getRequestChannel()));
             } else {
                 result.setBody(null);
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowProducerPatchTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowProducerPatchTest.java
new file mode 100644
index 00000000000..bfbd59fca2b
--- /dev/null
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowProducerPatchTest.java
@@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.undertow.rest;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.component.undertow.BaseUndertowTest;
+import org.junit.Test;
+
+public class RestUndertowProducerPatchTest extends BaseUndertowTest {
+
+    @Test
+    public void testUndertowProducerPatch() throws Exception {
+        String body = ""Donald Duck"";
+        String id = ""123"";
+
+        MockEndpoint mock = getMockEndpoint(""mock:input"");
+        mock.message(0).body().isEqualTo(body);
+        mock.message(0).header(""id"").isEqualTo(id);
+
+        fluentTemplate.withBody(body).withHeader(""id"", id).to(""direct:start"").send();
+
+        assertMockEndpointsSatisfied();
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                // configure to use localhost with the given port
+                restConfiguration().component(""undertow"").host(""localhost"").port(getPort());
+
+                from(""direct:start"")
+                        .to(""rest:patch:users/{id}"");
+
+                // use the rest DSL to define the rest services
+                rest(""/users/"")
+                        .patch(""{id}"")
+                        .to(""mock:input"");
+            }
+        };
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Apr/18 14:04;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2289
",12/Apr/18 14:07;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty4 - Shared connection pool should re-create connection if its no longer valid,CAMEL-12435,13151943,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Apr/18 11:44,12/Apr/18 11:48,13/Mar/19 22:20,12/Apr/18 11:48,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-netty4,,,,,,0,,,,"If you turn of the connection pooling on the producer and use the shared single instance for multiplexing then if the connection becomes invalid such as read time triggered by netty that then closes the connection.

Then we should re-create the connection, like the pooling does with test on borrow.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-04-12 11:44:47.0,,,,,,,0|i3sgtb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SqsProducer doesn't support Number attributes,CAMEL-12425,13150440,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,candrews,candrews,05/Apr/18 21:13,06/Apr/18 08:15,13/Mar/19 22:20,06/Apr/18 08:14,2.20.2,2.21.0,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-aws,,,,,,0,,,,SqsProducer doesn't support Number attributes. It only supports attributes with a value of type String or ByteBuffer.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-06 08:15:09.887,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 06 08:15:14 UTC 2018,,,Patch Available,,,,0|i3s7jz:,9223372036854775807,,,,,,,,,,05/Apr/18 21:13;candrews;[https://github.com/apache/camel/pull/2282],"06/Apr/18 08:15;githubbot;oscerd commented on issue #2282: CAMEL-12425 SQS Producer support for numeric attributes
URL: https://github.com/apache/camel/pull/2282#issuecomment-379182020
 
 
   Thanks. Merged on master, 2.21.x and 2.20.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Apr/18 08:15;githubbot;oscerd closed pull request #2282: CAMEL-12425 SQS Producer support for numeric attributes
URL: https://github.com/apache/camel/pull/2282
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java
index 04a66e0ca88..231f9b6b7ff 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java
@@ -135,6 +135,11 @@ public String toString() {
                     mav.setDataType(""Binary"");
                     mav.withBinaryValue((ByteBuffer)value);
                     result.put(entry.getKey(), mav);
+                } else if (value instanceof Number) {
+                    MessageAttributeValue mav = new MessageAttributeValue();
+                    mav.setDataType(""Number"");
+                    mav.withStringValue(((Number)value).toString());
+                    result.put(entry.getKey(), mav);
                 } else {
                     // cannot translate the message header to message attribute value
                     LOG.warn(""Cannot put the message header key={}, value={} into Sqs MessageAttribute"", entry.getKey(), entry.getValue());


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Apr/18 08:15;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2282
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong language syntax declarations for code samples in documentation,CAMEL-12422,13150021,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,fbolton,fbolton,04/Apr/18 14:45,05/Apr/18 07:15,13/Mar/19 22:20,05/Apr/18 05:53,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,documentation,,,,,,0,,,,"AsciiDoc has the ability to support syntax highlighting, which can be enabled by putting the following line before a code sample (e.g. for Java code):
{code:java}
[source,java]{code}

However, there are some places in the documentation where this declaration is used, but the code sample that follows is _not_ Java. This can cause incorrect syntax highlighting or (more seriously) can sometimes cause a documentation build to crash. The following doc files are affected:
* {{csv-dataformat.adoc}}
* {{mime-multipart-dataformat.adoc}}
* {{mongodb-gridfs-component.adoc}}
* {{snmp-component.adoc}}

I plan to submit a PR to fix these files.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-04 15:20:25.393,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 05 07:15:15 UTC 2018,,,,,,,0|i3s4zr:,9223372036854775807,,,,,,,,,,"04/Apr/18 15:20;githubbot;fbolton opened a new pull request #2280: CAMEL-12422 Fixed language declaration for code snippets in documenta…
URL: https://github.com/apache/camel/pull/2280
 
 
   …tion

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Apr/18 15:20;githubbot;GitHub user fbolton opened a pull request:

    https://github.com/apache/camel/pull/2280

    CAMEL-12422 Fixed language declaration for code snippets in documenta…

    …tion

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fbolton/camel camel-12422

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2280.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2280
    
----
commit 6d9e172de7572038529b394f4159f5693225389c
Author: Fintan Bolton <fbolton@...>
Date:   2018-04-04T15:18:22Z

    CAMEL-12422 Fixed language declaration for code snippets in documentation

----
","05/Apr/18 05:52;githubbot;oscerd closed pull request #2280: CAMEL-12422 Fixed language declaration for code snippets in documenta…
URL: https://github.com/apache/camel/pull/2280
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-csv/src/main/docs/csv-dataformat.adoc b/components/camel-csv/src/main/docs/csv-dataformat.adoc
index bae6f163f18..6cd2d973038 100644
--- a/components/camel-csv/src/main/docs/csv-dataformat.adoc
+++ b/components/camel-csv/src/main/docs/csv-dataformat.adoc
@@ -89,12 +89,12 @@ or this XML route definition
 </route>
 -------------------------------------------------------
 
+
 then it will produce 
 
-[source,java]
--------------------------------------------------------
+----
 abc,123
--------------------------------------------------------
+----
 
 ### Unmarshalling a CSV message into a Java List
 
@@ -178,6 +178,7 @@ body.put(""foo"", ""abc"");
 body.put(""bar"", 123);
 ------------------------------------------------------- 
 
+
 and this Java route definition 
 
 [source,java]
@@ -210,7 +211,6 @@ or this XML route definition
 
 then it will produce 
 
-[source,java]
 -------------------------------------------------------
 abc|123
 ------------------------------------------------------- 
@@ -358,7 +358,7 @@ If you use Maven you can just add the following to your pom.xml,
 substituting the version number for the latest and greatest release (see
 the download page for the latest versions).
 
-[source,java]
+[source,xml]
 -------------------------------------
 <dependency>
   <groupId>org.apache.camel</groupId>
diff --git a/components/camel-mail/src/main/docs/mime-multipart-dataformat.adoc b/components/camel-mail/src/main/docs/mime-multipart-dataformat.adoc
index d7cf6a9ea43..49fbe2638e4 100644
--- a/components/camel-mail/src/main/docs/mime-multipart-dataformat.adoc
+++ b/components/camel-mail/src/main/docs/mime-multipart-dataformat.adoc
@@ -116,7 +116,6 @@ Message with the following message Camel headers:
 
 *Camel Message Headers*
 
-[source,java]
 -------------------------------------------------------------------------------
 Content-Type=multipart/mixed; \n boundary=""----=_Part_0_14180567.1447658227051""
 Message-Id=<...>
@@ -129,7 +128,6 @@ The message body will be:
 
 *Camel Message Body*
 
-[source,java]
 ----------------------------------------------------------------
 ------=_Part_0_14180567.1447658227051
 Content-Type: application/octet-stream
@@ -158,7 +156,6 @@ original message starting with ""x-"" and the header with name ""included"":
 
 *Camel Message Body*
 
-[source,java]
 ----------------------------------------------------------------
 Message-ID: <...>
 MIME-Version: 1.0
diff --git a/components/camel-mongodb-gridfs/src/main/docs/mongodb-gridfs-component.adoc b/components/camel-mongodb-gridfs/src/main/docs/mongodb-gridfs-component.adoc
index d51fef7091f..6b005a47b1c 100644
--- a/components/camel-mongodb-gridfs/src/main/docs/mongodb-gridfs-component.adoc
+++ b/components/camel-mongodb-gridfs/src/main/docs/mongodb-gridfs-component.adoc
@@ -18,7 +18,6 @@ for this component:
 
 ### URI format
 
-[source,java]
 ------------------------------------------------------------------------------
 mongodb-gridfs:connectionBean?database=databaseName&bucket=bucketName[&moreOptions...]
 ------------------------------------------------------------------------------
@@ -121,8 +120,7 @@ The following route defined in Spring XML executes the operation
 #### count
 
 Returns the total number of file in the collection, returning an Integer
-as the OUT message body. +
- +
+as the OUT message body.
 
 [source,java]
 ---------------------------------------------------------------------------------
@@ -146,7 +144,6 @@ Integer count = template.requestBodyAndHeaders(""direct:count"", query, headers);
 Returns an Reader that lists all the filenames and their IDs in a tab
 separated stream.
 
-[source,java]
 ----------------------------------------------------------------------------------
 // from(""direct:listAll"").to(""mongodb-gridfs?database=tickets&operation=listAll"");
 Reader result = template.requestBodyAndHeader(""direct:listAll"", ""irrelevantBody"");
diff --git a/components/camel-snmp/src/main/docs/snmp-component.adoc b/components/camel-snmp/src/main/docs/snmp-component.adoc
index 9298f77ca20..e80f4657103 100644
--- a/components/camel-snmp/src/main/docs/snmp-component.adoc
+++ b/components/camel-snmp/src/main/docs/snmp-component.adoc
@@ -21,7 +21,6 @@ for this component:
 
 ### URI format
 
-[source,java]
 --------------------------------
 snmp://hostname[:port][?Options]
 --------------------------------
@@ -118,7 +117,6 @@ Given the situation, that I poll for the following OIDs:
 
 *OIDs*
 
-[source,java]
 -------------------------
 1.3.6.1.2.1.1.3.0
 1.3.6.1.2.1.25.3.2.1.5.1
@@ -167,14 +165,12 @@ requested...be prepared.
 
 Polling a remote device:
 
-[source,java]
 ---------------------------------------------------------------------
 snmp:192.168.178.23:161?protocol=udp&type=POLL&oids=1.3.6.1.2.1.1.5.0
 ---------------------------------------------------------------------
 
 Setting up a trap receiver (*Note that no OID info is needed here!*):
 
-[source,java]
 -----------------------------------------
 snmp:127.0.0.1:162?protocol=udp&type=TRAP
 -----------------------------------------


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Apr/18 05:52;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2280
","05/Apr/18 05:55;githubbot;oscerd commented on issue #2280: CAMEL-12422 Fixed language declaration for code snippets in documenta…
URL: https://github.com/apache/camel/pull/2280#issuecomment-378828030
 
 
   Thanks. Merged on master and backported to 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Apr/18 07:15;githubbot;fbolton commented on issue #2280: CAMEL-12422 Fixed language declaration for code snippets in documenta…
URL: https://github.com/apache/camel/pull/2280#issuecomment-378842094
 
 
   That's great. Thanks very much, @oscerd !

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jclouds - Fallback type converter is wrong,CAMEL-12412,13148577,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Mar/18 13:52,28/Mar/18 14:08,13/Mar/19 22:20,28/Mar/18 14:06,2.20.2,2.21.0,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-jclouds,,,,,,0,,,,"Reported on user forum

http://camel.465427.n5.nabble.com/java-lang-ClassCastException-org-jclouds-io-payloads-ByteSourcePayload-cannot-be-cast-to-org-apache-e-tp5818904.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-03-28 13:52:45.0,,,,,,,0|i3rw4n:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Camel-consul] firstIndex cannot be set if it is out of Long range,CAMEL-12065,13122818,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,Viachaslau.Tsikhanovich,Viachaslau.Tsikhanovich,05/Dec/17 09:59,27/Mar/18 09:17,13/Mar/19 22:20,07/Dec/17 09:49,2.20.1,,,,,,,,,,,,,,,2.21.0,,,,,camel-consul,,,,,,0,,,,"[Documentation|http://camel.apache.org/consul-component.html] claims that _firstIndex_ option must be of Long Java type.
However WaitIndex (that is generated by Consul and should be set for _firstIndex_ to skip all events until one that has such WaitIndex) is actually of BigInteger type and can be out of Long type range - https://github.com/hashicorp/consul/blob/master/api/event.go#L90-L104

_org.apache.camel.component.consul.enpoint.ConsulEventConsumer_ has _index_ field of correct type AtomicReference<BigInteger> and is initialized as
{code}
this.index = new AtomicReference(BigInteger.valueOf(configuration.getFirstIndex()));
{code}
However BigInteger value that is out of Long range cannot be passed for _index_  from apiEnpoint option _firstIndex_ because _org.apache.camel.component.consul.ConsulConfiguration_ has _firstIndex_ field that is declared as _long_ type:
{code}
    @UriParam(
        label = ""consumer,watch"",
        defaultValue = ""0""
    )
    private long firstIndex;
{code}
Seems that it should be changed to be of BigInteger type.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-07 09:50:00.972,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 07 09:50:00 UTC 2017,,,,,,,0|i3njgn:,9223372036854775807,,,,,,,,,,"07/Dec/17 09:50;ancosen;Thanks, since this is a breaking change for the configuration of Camel-consul this is fixed only on 2.21.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unintuitive default cxf timeout behavior,CAMEL-12104,13127396,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,adamcampbell,adamcampbell,27/Dec/17 18:31,26/Mar/18 15:56,13/Mar/19 22:20,20/Mar/18 01:27,,,,,,,,,,,,,,,,2.22.0,,,,,camel-cxf,camel-cxfrs,,,,,0,,,,"There is very strange behavior in Camel cxf and cxfrs timeouts which could lead to sensitive data being released.

Below is a code sample which illustrates the unexpected behavior. I think any developer would expect the test API to return ""Valid Response"" or some kind exception, but in fact it returns ""SENSITIVE DATA"" due to the default continuationTimeout of 30 seconds.

This issue seems to have been introduced by https://issues.apache.org/jira/browse/CAMEL-7401

{code:java}
    public void configure() {

        from(""cxf:///test?dataFormat=MESSAGE"")
            .setBody(constant(""SENSITIVE DATA""))
            .to(""cxf://http://localhost:8003/slowApi?serviceClass=com.example.ExampleService&dataFormat=MESSAGE"")
            .transform(constant(""Valid Response""));

        from(""cxf:///slowApi?dataFormat=MESSAGE"")
            .process(new Processor(){
                @Override
                public void process(final Exchange exchange) throws Exception {
                    Thread.sleep(45000);
                }
            });
    }
{code}
",,,,,,,,,,,,,,,,,,,,,,,CAMEL-12409,,,,,,,28/Feb/18 14:21;davsclaus;Screen Shot 2018-02-28 at 15.20.31.png;https://issues.apache.org/jira/secure/attachment/12912443/Screen+Shot+2018-02-28+at+15.20.31.png,,,,1.0,,,,,,,,,,,,,,,,,,,2018-01-11 14:28:38.966,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 01 09:09:14 UTC 2018,,,,,,,0|i3obkv:,9223372036854775807,,,,,,,,,,11/Jan/18 14:28;davsclaus;Would you be able to build an unit test of this sample code so we can take that and add to the tests of camel-cxf and work on a fix.,28/Feb/18 13:36;davsclaus;Also as a workaround you can try with synchronous=true on the CXF endpoint,"28/Feb/18 14:21;davsclaus;Okay so the issue is in Apache CXF where it will onTimeout that is called from Jetty or Servlet3 async API then just call resume(), see screenshot

 ","28/Feb/18 14:22;davsclaus;The CXF Continuation API itself lacks the concept of timeout, so you cannot get that state to know there was a timeout and then fail accordingly.","28/Feb/18 14:26;davsclaus;[~dkulp] or [~ffang] I wonder if you guys may have any comments on this.

I added an unit test to camel-cxf named: 

CxfConsumerContinuationTimeoutTest",01/Mar/18 07:47;ffang;I think we can extend cxf Continuation interface a bit to add an isTimeout method so that we know the timeout happen and can handle this situation accordingly outside CXF,01/Mar/18 09:09;davsclaus;Thanks Freeman,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-olingo4-api should explicitly depend on commons-io,CAMEL-12407,13147917,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,26/Mar/18 11:49,26/Mar/18 12:59,13/Mar/19 22:20,26/Mar/18 12:59,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-olingo4,,,,,,0,,,,"Otherwise, routes fail with ClassNotFoundException IOUtils, e.g. when running Olingo4IntegrationTest in WildFly Camel",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-26 12:56:53.899,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 26 12:57:58 UTC 2018,,,,,,,0|i3rs2v:,9223372036854775807,,,,,,,,,,"26/Mar/18 12:56;githubbot;ppalaga opened a new pull request #2270: CAMEL-12407: camel-olingo4-api should explicitly depend on commons-io
URL: https://github.com/apache/camel/pull/2270
 
 
   This should please be ported to `camel-2.21.x` too

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Mar/18 12:56;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2270

    CAMEL-12407: camel-olingo4-api should explicitly depend on commons-io

    This should please be ported to `camel-2.21.x` too

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-12407

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2270.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2270
    
----
commit c20cf523de8af4a74442afe2f1f520666681443c
Author: Peter Palaga <ppalaga@...>
Date:   2018-03-26T11:53:57Z

    CAMEL-12407: camel-olingo4-api should explicitly depend on commons-io

----
","26/Mar/18 12:57;githubbot;davsclaus closed pull request #2270: CAMEL-12407: camel-olingo4-api should explicitly depend on commons-io
URL: https://github.com/apache/camel/pull/2270
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-olingo4/camel-olingo4-api/pom.xml b/components/camel-olingo4/camel-olingo4-api/pom.xml
index 30a6220efba..d41bfb94d3d 100644
--- a/components/camel-olingo4/camel-olingo4-api/pom.xml
+++ b/components/camel-olingo4/camel-olingo4-api/pom.xml
@@ -58,17 +58,22 @@
       <artifactId>odata-server-core</artifactId>
       <version>${olingo4-version}</version>
     </dependency>
-    
+
     <dependency>
       <groupId>org.apache.camel</groupId>
       <artifactId>camel-core</artifactId>
     </dependency>
-    
+
     <dependency>
       <groupId>org.apache.httpcomponents</groupId>
       <artifactId>httpasyncclient</artifactId>
     </dependency>
 
+    <dependency>
+      <groupId>commons-io</groupId>
+      <artifactId>commons-io</artifactId>
+    </dependency>
+
     <!-- logging -->
     <dependency>
       <groupId>org.apache.logging.log4j</groupId>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Mar/18 12:57;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2270
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-dropbox - Need to use force to check for file/folder exists,CAMEL-12406,13147863,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Mar/18 07:56,26/Mar/18 08:00,13/Mar/19 22:20,26/Mar/18 08:00,,,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-dropbox,,,,,,0,,,,"See this PR

https://github.com/apache/camel/pull/2269",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-03-26 07:56:24.0,,,,,,,0|i3rrqv:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
lastConnectionActivityTicks is not getting updated by MllpTcpClientProducer,CAMEL-12325,13143003,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hqstevenson,hqstevenson,hqstevenson,06/Mar/18 22:06,23/Mar/18 16:25,13/Mar/19 22:20,23/Mar/18 16:25,,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-mllp,,,,,,0,,,,"The producer is not updating the last activity timestamp, which is causing idleTimeout to not work.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 23 16:25:22 UTC 2018,,,,,,,0|i3qy8n:,9223372036854775807,,,,,,,,,,06/Mar/18 22:10;hqstevenson;Fixed with commit e2b10183ba735986102799e8d1be28111f11cfc6,"23/Mar/18 16:25;hqstevenson;Commits for 2.22

14d2cf99cd0fbd85ab5a8383e4516acdffb65a7b

97ae6103acd5c28626d14045502e42df4e0b91af

 

Commits for 2.21.1

b782d2eead7d72b5ab3703495343c89954589651

5fa2f4f9ba203cca61687b34bc8b3b2d32c291d2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LinkedIn component throws IllegalArgumentException on API requests,CAMEL-12345,13144281,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,jamesnetherton,jamesnetherton,12/Mar/18 12:15,23/Mar/18 03:42,13/Mar/19 22:20,23/Mar/18 03:42,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,,,,,,,0,,,,"Almost all of the camel-linkedin integration tests are failing on master and for the 2.21.0 tag. The error is pretty much the same for all of them. For example SearchResourceIntegrationTest.testSearchCompanies:

 
{code:java}
Caused by: org.apache.camel.RuntimeCamelException: Error invoking searchCompanies with {keywords=linkedin, fields=}: Value for fields is not specified
at org.apache.camel.util.component.ApiMethodHelper.invokeMethod(ApiMethodHelper.java:514)
at org.apache.camel.util.component.AbstractApiProducer.doInvokeMethod(AbstractApiProducer.java:120)
at org.apache.camel.component.linkedin.LinkedInProducer.doInvokeMethod(LinkedInProducer.java:43)
at org.apache.camel.util.component.AbstractApiProducer$1.run(AbstractApiProducer.java:86)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Value for fields is not specified
at org.apache.cxf.jaxrs.client.AbstractClient.convertParamValue(AbstractClient.java:824)
at org.apache.cxf.jaxrs.client.ClientProxyImpl.getPathParamValues(ClientProxyImpl.java:452)
at org.apache.cxf.jaxrs.client.ClientProxyImpl.invoke(ClientProxyImpl.java:179)
at com.sun.proxy.$Proxy54.searchCompanies(Unknown Source)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.apache.camel.util.component.ApiMethodHelper.invokeMethod(ApiMethodHelper.java:506)
... 10 more{code}
 

I tried setting the CamelLinkedIn.fields header, but this leads to further errors. The CXF 3.2.2 upgrade may be the culprit here. The tests run fine on Camel 2.20.x with CXF 3.2.1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-15 01:36:22.659,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 23 03:37:08 UTC 2018,,,,,,,0|i3r64f:,9223372036854775807,,,,,,,,,,"15/Mar/18 01:36;neoxu999;[~jamesnetherton]

 

Can you please attach your testing project?  It works for me.

{code}

INFO] 
[INFO] Camel :: LinkedIn :: Parent ........................ SUCCESS [ 2.923 s]
[INFO] Camel :: LinkedIn :: API ........................... SUCCESS [ 13.740 s]
[INFO] Camel :: LinkedIn :: Component ..................... SUCCESS [ 6.515 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 23.659 s
[INFO] Finished at: 2018-03-15T12:55:03+11:00
[INFO] Final Memory: 46M/153M

{code}","15/Mar/18 08:09;jamesnetherton;[~neoxu999] the integration tests are disabled by default. You'll need a LinkedIn Developer account so that you can configure the properties in this file:

 

https://github.com/apache/camel/blob/master/components/camel-linkedin/camel-linkedin-component/src/test/resources/test-options.properties",16/Mar/18 12:34;davsclaus;I wonder if you could run the test on master branch and then the only change would be to change the CXF version in the pom.xml to 3.2.1 vs 3.2.2 so we know its only that change that may affect this.,16/Mar/18 13:56;jamesnetherton;Ran against master with the CXF 3.2.1 downgrade and the tests pass. Reverting back to 3.2.2 makes them fail again.,16/Mar/18 13:58;davsclaus;Thanks a lot. Maybe [~ffang] can take a look at CXF and try to find out why its causing this problem? ,"19/Mar/18 04:57;ffang;Is there a  LinkedIn Developer account  I can use to reproduce this?

Thanks!","20/Mar/18 06:03;davsclaus;There is a CXF 3.2.3 release out, can we try testing with that version?","20/Mar/18 08:19;ffang;should be caused by this change

CXF-7584","23/Mar/18 03:37;ffang;CXF-7584 restrict the proxies (by default) from accidentally supplying empty path template values, but seems camel-linkedIn component still need the ability to input empty path. Fortunately CXF-7584 also introduce a property ""allow.empty.path.template.value"" from which we can switch off this check, so that keep the CXF jaxrs proxy client behavior as is.",,,,,,,,,,,,,,,,,,,,,,,,
withAdvice() + weaveById() failing for global onException() route definitions,CAMEL-12359,13145846,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,nkhalasi,nkhalasi,16/Mar/18 20:12,21/Mar/18 12:14,13/Mar/19 22:20,21/Mar/18 12:14,2.19.4,2.20.0,2.20.1,2.20.2,2.21.0,,,,,,,,,,,2.19.5,2.20.3,2.22.0,,,camel-core,,,,,,0,,,,"weaveById() when invoked in the context of withAdvise() for global routes defined for generic exception handling.

Attached is a demo code containing a single test case. It works upto 2.19.3 release and then fails with the error given below.

To reproduce the error, update the came version in build.gradle to 2.19.4 and higher.

 

{{java.lang.IllegalArgumentException: There are no outputs which matches: handle-http-host-connect-exception in the route: Route[[From[direct:dummy]] -> [OnException[[class org.apache.http.conn.HttpHostConnectException] -> [process[Processor@0x51cb5d8d], To[log://camelLogger?level=INFO&showHeaders=true]]], OnException[[class org.apache.camel.http.common.HttpOperationFailedException] -> [process[Processor@0x7dbfd5a2], To[log://camelLogger?level=INFO&showHeaders=true]]], OnException[[class java.lang.Throwable] -> [process[Processor@0x4b675ceb], To[log://camelLogger?level=INFO&showHeaders=true]]], process[Processor@0x6eb9ac40], To[mock:dummy-route-end]]] at org.apache.camel.builder.AdviceWithTasks$2.task(AdviceWithTasks.java:244) at org.apache.camel.model.RouteDefinition.adviceWith(RouteDefinition.java:288) at com.vayana.vnet.cameldemo.base.CamelDemoRoutesTestSupport.setUp(base.kt:12)}}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,16/Mar/18 20:09;nkhalasi;camel-kotlin-demo.zip;https://issues.apache.org/jira/secure/attachment/12914922/camel-kotlin-demo.zip,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 16 20:16:07 UTC 2018,,,,,,,0|i3rfc7:,9223372036854775807,,,,,,,,,,16/Mar/18 20:16;nkhalasi;https://github.com/apache/camel/commit/f3f0c70e97c35f4734569303535b423403d186e0#diff-eeb47c7593aa57d32b6071108ee43a51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-influxdb Query ,CAMEL-12384,13146518,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,andyflatt,andyflatt,20/Mar/18 11:28,20/Mar/18 14:46,13/Mar/19 22:20,20/Mar/18 14:46,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-influxdb,,,,,,0,,,,"In [https://github.com/apache/camel/blob/master/components/camel-influxdb/src/main/java/org/apache/camel/component/influxdb/InfluxDbProducer.java]

on line 108, the out message on the exchange is mutated with the result.  These means that the messages headers and attachments are lost when querying.   

 

 
{code:java}
private void doQuery(Exchange exchange, String dataBaseName, String retentionPolicy) {
  String query = calculateQuery(exchange);
  Query influxdbQuery = new Query(query, dataBaseName);
  QueryResult resultSet = connection.query(influxdbQuery);
  exchange.getOut().setBody(resultSet);
}
{code}
 

I suggest that line 108 is changed to:
{code:java}
 exchange.getIn().setBody(resultSet);{code}
 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-20 14:46:43.182,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 20 14:46:43 UTC 2018,,,,,,,0|i3rjhj:,9223372036854775807,,,,,,,,,,20/Mar/18 14:46;ancosen;Now the headers are copied from in to out,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-SFTP: errors in SSH routes after changes in read-lock  ,CAMEL-12370,13146225,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ancosen,ancosen,19/Mar/18 13:40,20/Mar/18 09:39,13/Mar/19 22:20,20/Mar/18 09:39,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-sftp,,,,,,1,,,,"{code:java}
2018-03-17 12:39:37.411 WARN 1 — [OUT/compressed] o.a.c.c.file.remote.SftpConsumer : sftp://username@hostname.com/OUT/compressed?binary=true&delay=5m&greedy=true&idempotentKey=%24%7Bfile%3Aname%7D-%24%7Bfile%3Asize%7D&idempotentRepository=%23theRepo&include=filename.*zip&maxMessagesPerPoll=10&noop=true&password=xxxxxx&readLock=changed&streamDownload=true cannot begin processing file: RemoteFile[filename.zip] due to: org.apache.camel.component.file.remote.SftpRemoteFileJCraft cannot be cast to com.jcraft.jsch.ChannelSftp$LsEntry. Caused by: [java.lang.ClassCastException - org.apache.camel.component.file.remote.SftpRemoteFileJCraft cannot be cast to com.jcraft.jsch.ChannelSftp$LsEntry] java.lang.ClassCastException: org.apache.camel.component.file.remote.SftpRemoteFileJCraft cannot be cast to com.jcraft.jsch.ChannelSftp$LsEntry at org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy.acquireExclusiveReadLock(SftpChangedExclusiveReadLockStrategy.java:97) ~[camel-ftp-2.21.0.jar!/:2.21.0] at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.begin(GenericFileProcessStrategySupport.java:49) ~[camel-core-2.21.0.jar!/:2.21.0] at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.begin(GenericFileRenameProcessStrategy.java:37) ~[camel-core-2.21.0.jar!/:2.21.0] at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:360) [camel-core-2.21.0.jar!/:2.21.0] at org.apache.camel.component.file.remote.RemoteFileConsumer.processExchange(RemoteFileConsumer.java:137) [camel-ftp-2.21.0.jar!/:2.21.0] at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:219) [camel-core-2.21.0.jar!/:2.21.0] at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:183) [camel-core-2.21.0.jar!/:2.21.0] at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174) [camel-core-2.21.0.jar!/:2.21.0] at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101) [camel-core-2.21.0.jar!/:2.21.0] at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_151] at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [na:1.8.0_151] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_151] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [na:1.8.0_151] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_151] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_151] at java.lang.Thread.run(Thread.java:748) [na:1.8.0_151]{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-19 13:43:37.841,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 19 13:43:37 UTC 2018,,,,,,,0|i3rhof:,9223372036854775807,,,,,,,,,,"19/Mar/18 13:43;micke;In case it helps, when troubleshooting this issue it seems to work fine on Windows but I get this error on Linux",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shutdown only AWS clients owned by the context,CAMEL-12379,13146261,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ppalaga,ppalaga,19/Mar/18 14:47,20/Mar/18 07:18,13/Mar/19 22:20,20/Mar/18 07:18,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-aws,,,,,,0,,,,"This is caused by https://github.com/apache/camel/commit/0a34a3ccfdf487b2e855c0ed567b479a49bcd51e that calls {{ddbClient.shutdown()}} on endpoint shutdown.

As it happens we have a test in WildFly Camel that does roughly the following;
 * It first binds a client instance we claim to own (because we created it ourselves) to a camelctx
 * It does some route invocations and assertions
 * It stops the camelctx
 * And finally it wants to delete all Dynamo tables it has created

The last point cannot succeed because the client is closed.

The test is here https://github.com/wildfly-extras/wildfly-camel/blob/7c9c67362b324043f6ad95e4233330c2d160e9c3/itests/standalone/extra/src/test/java/org/wildfly/camel/test/aws/DynamoDBIntegrationTest.java#L58

We tend to think that camel should only close the resources it owns. It it is us who created a resource and bound it manually to a name, we expect not to loose the ownership by that. Camel should thus destroy only resources it has created itself.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 19 15:57:23 UTC 2018,,,,,,,0|i3rhwf:,9223372036854775807,,,,,,,,,,"19/Mar/18 15:57;ppalaga;Looks like we have the same problem also for at least ec2, kinesis, s3, SNS and SQS.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ensure a SOAP 1.2 enabled camel-cxf consumer endpoint can handle SOAP 1.1 request  correctly,CAMEL-12364,13146111,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,19/Mar/18 04:49,19/Mar/18 06:34,13/Mar/19 22:20,19/Mar/18 06:34,,,,,,,,,,,,,,,,2.20.3,2.21.1,2.22.0,,,camel-cxf,,,,,,0,,,,"The expected behavior for a SOAP 1.2 enabled camel-cxf consumer endpoint should be that
when the request is SOAP1.2, response SOAP 1.2 message, when the request is SOAP 1.1, response SOAP 1.1 message. 
The CXF ReadHeadersInterceptor can check the actual request soap version, we should keep this soap version when create CXF response from the Camel Exchange.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-03-19 04:49:06.0,,,,,,,0|i3rgzb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core - Potential NPE in ExchangeHelper.isStreamCaching,CAMEL-12348,13144343,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Mar/18 15:34,17/Mar/18 13:10,13/Mar/19 22:20,17/Mar/18 13:10,2.20.2,2.21.0,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.1,2.22.0,,camel-core,,,,,,1,,,,"See SO

https://stackoverflow.com/questions/49235152/defaultcamelcontext-getroutes-is-empty-so-exchangehelper-isstreamcachingenable",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-12 20:46:18.34,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 12 20:46:18 UTC 2018,,,,,,,0|i3r6i7:,9223372036854775807,,,,,,,,,,12/Mar/18 16:37;davsclaus;Need to cherry-pick to 2.21.x branch when its created,"12/Mar/18 20:46;adrianhopebailie;This can be re-created using the following project by replacing the inline processor definition with the commented out ""marshal()"" call:

[https://github.com/adrianhopebailie/ilp-node]

 

Incoming connections can be simulated using the ""example.js"" sample in [https://github.com/interledgerjs/ilp-protocol-psk2] and twerakign this to use the same address configured in the server (wss://localhost:9090/btp).

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Claim Check EPI: ManagedManagementStrategy: Can not register service: ClaimCheck[*] as Service MBean,CAMEL-12356,13145656,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pascalschumacher,pascalschumacher,16/Mar/18 10:52,16/Mar/18 12:55,13/Mar/19 22:20,16/Mar/18 12:28,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-core,,,,,,0,,,,"I using the new Claim Check EIP (great new features by the way) in a Spring Boot 1.5.10 application.

The EIP works fine, but on application start-up these warnings are logged:

{noformat}
2018-03-16 11:28:50.418  INFO 16020 --- [  restartedMain] o.a.c.m.ManagedManagementStrategy        : JMX is enabled
2018-03-16 11:28:51.037  WARN 16020 --- [  restartedMain] o.a.c.m.ManagedManagementStrategy        : Cannot check whether the managed object is registered. This exception will be ignored.

java.lang.ClassCastException: org.apache.camel.model.ClaimCheckDefinition cannot be cast to org.apache.camel.model.ExpressionNode
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:40) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:29) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getManagedObjectName(ManagedManagementStrategy.java:122) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getObjectName(ManagedManagementStrategy.java:198) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.isManaged(ManagedManagementStrategy.java:174) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onServiceAdd(DefaultManagementLifecycleStrategy.java:437) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:368) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:196) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:145) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3947) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3854) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3640) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3492) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:209) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3251) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3270) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3163) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) [camel-spring-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:174) [camel-spring-2.21.0.jar:2.21.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at company.Application.main(Application.java:10) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.10.RELEASE.jar:1.5.10.RELEASE]

2018-03-16 11:28:51.038  WARN 16020 --- [  restartedMain] a.c.m.DefaultManagementLifecycleStrategy : Could not register service: ClaimCheck[Push] as Service MBean.

java.lang.ClassCastException: org.apache.camel.model.ClaimCheckDefinition cannot be cast to org.apache.camel.model.ExpressionNode
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:40) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:29) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getManagedObjectName(ManagedManagementStrategy.java:122) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getObjectName(ManagedManagementStrategy.java:198) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.manageNamedObject(ManagedManagementStrategy.java:78) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.manageObject(ManagedManagementStrategy.java:74) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.manageObject(DefaultManagementLifecycleStrategy.java:894) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onServiceAdd(DefaultManagementLifecycleStrategy.java:443) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:368) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:196) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:145) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3947) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3854) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3640) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3492) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:209) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3251) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3270) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3163) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) [camel-spring-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:174) [camel-spring-2.21.0.jar:2.21.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at company.Application.main(Application.java:10) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.10.RELEASE.jar:1.5.10.RELEASE]

2018-03-16 11:28:51.042  WARN 16020 --- [  restartedMain] o.a.c.m.ManagedManagementStrategy        : Cannot check whether the managed object is registered. This exception will be ignored.

java.lang.ClassCastException: org.apache.camel.model.ClaimCheckDefinition cannot be cast to org.apache.camel.model.ExpressionNode
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:40) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:29) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getManagedObjectName(ManagedManagementStrategy.java:122) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getObjectName(ManagedManagementStrategy.java:198) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.isManaged(ManagedManagementStrategy.java:174) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onServiceAdd(DefaultManagementLifecycleStrategy.java:437) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:368) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:196) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:145) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3947) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3854) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3640) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3492) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:209) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3251) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3270) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3163) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) [camel-spring-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:174) [camel-spring-2.21.0.jar:2.21.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at company.Application.main(Application.java:10) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.10.RELEASE.jar:1.5.10.RELEASE]

2018-03-16 11:28:51.042  WARN 16020 --- [  restartedMain] a.c.m.DefaultManagementLifecycleStrategy : Could not register service: ClaimCheck[Pop] as Service MBean.

java.lang.ClassCastException: org.apache.camel.model.ClaimCheckDefinition cannot be cast to org.apache.camel.model.ExpressionNode
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:40) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:29) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getManagedObjectName(ManagedManagementStrategy.java:122) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getObjectName(ManagedManagementStrategy.java:198) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.manageNamedObject(ManagedManagementStrategy.java:78) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.manageObject(ManagedManagementStrategy.java:74) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.manageObject(DefaultManagementLifecycleStrategy.java:894) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onServiceAdd(DefaultManagementLifecycleStrategy.java:443) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:368) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:196) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:145) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3947) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3854) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3640) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3492) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:209) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3251) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3270) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3163) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) [camel-spring-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:174) [camel-spring-2.21.0.jar:2.21.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at company.Application.main(Application.java:10) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.10.RELEASE.jar:1.5.10.RELEASE]
{noformat}

My (simplified) route:

{code}
from(IN_URL)
    .claimCheck(ClaimCheckOperation.Push, null, ""body"")
    .to(SMPP_ENDPOINT_URL)
    .claimCheck(ClaimCheckOperation.Pop)
    .to(ExchangePattern.InOnly, OUT_URL);
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-16 11:18:00.212,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 16 12:55:45 UTC 2018,,,,,,,0|i3re5z:,9223372036854775807,,,,,,,,,,"16/Mar/18 11:18;davsclaus;Ah in the ManagedClaimCheck you can delete the @override method that causes the class cast exception as it should not be there.

A commit / PR is welcome. Remember to backport to 2.21.x branch.",16/Mar/18 12:55;pascalschumacher;Thanks for fixing!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-weather: freegeoip.io has been moved to freegeoip.net,CAMEL-12342,13144062,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,10/Mar/18 16:25,10/Mar/18 16:31,13/Mar/19 22:20,10/Mar/18 16:31,,,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-weather,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 10 16:30:53 UTC 2018,,,,,,,0|i3r4rz:,9223372036854775807,,,,,,,,,,10/Mar/18 16:30;ancosen;[~davsclaus] [~gzurowski] last commit from me for 2.21.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sjms - Potential NPE in consumer,CAMEL-12335,13143474,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Mar/18 07:54,08/Mar/18 08:05,13/Mar/19 22:20,08/Mar/18 08:05,2.20.1,,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-sjms,,,,,,0,,,,{{ | Caused by: java.lang.NullPointerException: null   | at org.apache.camel.component.sjms.consumer.AbstractMessageHandler.onMessage(AbstractMessageHandler.java:88) ~[camel-sjms-2.20.1.jar!/:2.20.1]   | ... 8 common frames omitted}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 08 08:05:27 UTC 2018,,,,,,,0|i3r15b:,9223372036854775807,,,,,,,,,,08/Mar/18 08:05;davsclaus;The NPE is if you set synchronous=true,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MllpTcpServerConsumer resetting connections on idleTimout,CAMEL-12333,13143281,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hqstevenson,hqstevenson,hqstevenson,07/Mar/18 17:56,07/Mar/18 21:51,13/Mar/19 22:20,07/Mar/18 21:51,,,,,,,,,,,,,,,,2.21.0,,,,,camel-mllp,,,,,,0,,,,"If an idleTimeout is specified, the MllpTcpServerConsumer is resetting client connections after the idleTimeout - regardless of whether or not there has been any activity on the connection.

This causes serious issues with upstream components that are very connection sensitive.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 07 21:51:17 UTC 2018,,,,,,,0|i3qzyf:,9223372036854775807,,,,,,,,,,07/Mar/18 21:51;hqstevenson;Resolved w/commit 89bcfa0753233f8b576154486a89a2677d9d3efd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Headers getting lost after calling kubernetes-services API,CAMEL-12328,13143129,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,pmanayangath,pmanayangath,07/Mar/18 07:30,07/Mar/18 12:59,13/Mar/19 22:20,07/Mar/18 12:59,2.20.2,,,,,,,,,,,,,,,2.20.3,2.21.0,,,,camel-kubernetes,,,,,,0,,,,Header set by user is getting removed after calling Kubernetes-services API.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-07 07:37:44.284,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 07 07:37:44 UTC 2018,,,,,,,0|i3qz0n:,9223372036854775807,,,,,,,,,,"07/Mar/18 07:37;ancosen;Yes, the copy headers like other resources already use is missing in services Producers.

[https://github.com/apache/camel/blob/camel-2.20.x/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/deployments/KubernetesDeploymentsProducer.java#L119]

I'll fix this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Blueprint error: ""name is already instanciated as null and cannot be removed""",CAMEL-12291,13140594,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alex.soto,alex.soto,23/Feb/18 19:33,05/Mar/18 14:34,13/Mar/19 22:20,05/Mar/18 12:07,2.19.4,2.20.2,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-blueprint,,,,,,1,,,,"The error ""name is already instanciated (sic) as null and cannot be removed"" is thrown when configuring a component in Blueprint using property placeholders.

I noticed when trying to migrate my project to Camel 2.20.2 (from 2.17.4) 
 Example:
{code:java}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 
xmlns:camel=""http://camel.apache.org/schema/blueprint""
xmlns:cm=""http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0""
xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0""
xsi:schemaLocation=""
              http://www.osgi.org/xmlns/blueprint/v1.0.0 
     https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd”>
 
<cm:property-placeholder 
   persistent-id=""audit.log""
   update-strategy=""reload” 
   placeholder-prefix=""#{"" placeholder-suffix=""}"">

   <cm:default-properties>
      <cm:property name=""audit-log.reaper.cron"" value=""0 0/30 * * * ?"" />
      <cm:property name=""startDelaySeconds"" value=""600"" />
   </cm:default-properties>
</cm:property-placeholder>

 <bean id=""audit-log-reaper-quartz"" 
       class=""org.apache.camel.component.quartz2.QuartzComponent"">

    <property name=""startDelayedSeconds"" value=""#{startDelaySeconds}"" />
</bean>{code}
  
 The bean is referenced in a Camel route:
{code:java}
<route id=""reaper-scheduler"">
     <from uri=""[audit-log-reaper-quartz://reaper?cron=\{{cron}}]"" />
{code}
Throws exception:
{quote}org.osgi.service.blueprint.container.ComponentDefinitionException: Name audit-log-reaper-quartz is already +instanciated+ as null and cannot be removed.
 at org.apache.aries.blueprint.container.BlueprintRepository.removeRecipe(BlueprintRepository.java:131) [38:org.apache.aries.blueprint.core:1.8.3]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.updateUninstantiatedRecipes(BlueprintContainerImpl.java:572) [38:org.apache.aries.blueprint.core:1.8.3]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.processProcessors(BlueprintContainerImpl.java:559) [38:org.apache.aries.blueprint.core:1.8.3]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:394) [38:org.apache.aries.blueprint.core:1.8.3]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:275) [38:org.apache.aries.blueprint.core:1.8.3]
{quote}
 
  
 Removing the property placeholder fixes the issue:
  
{code:java}
<bean id=""audit-log-reaper-quartz"" 
      class=""org.apache.camel.component.quartz2.QuartzComponent"">
  
      <property name=""startDelayedSeconds"" value=""600"" />
</bean>
{code}
 
 According to Guillaume Nodet, this seems to have been introduced by this pull request:

[https://github.com/apache/camel/commit/a4e94f036d02943814c84195d73837cf607c8c20]

Solution proposed by Guillaume Nodet is to change line 1056 of /camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java

to
{code:java}
 if (camelContext.getComponent(component, false) == null) {
{code}
I tested this change locally and it seems to work, however I don't know if this can cause other problems.","Mac OSX, {color:#000000}Karaf 4.2.5{color}",,,,,,,,,,,,,,,,,,,,,CAMEL-12251,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-23 20:25:25.326,,,no_permission,,Unknown,,,http://camel.465427.n5.nabble.com/Re-Blueprint-property-place-holder-error-name-is-already-instanciated-as-null-and-cannot-be-removed-td5817866.html,,,,,,,,,,9223372036854775807,,,Mon Mar 05 11:42:34 UTC 2018,,,,,,,0|i3qjfb:,9223372036854775807,,,,,,,,,,"23/Feb/18 20:25;ancosen;The fix for 12251will be in 2.20.3, but it doesn't help ",24/Feb/18 06:17;gzres;The fix for CAMEL-12251 should not help with original problem - it should just make it visible in logs ;),"24/Feb/18 10:50;ancosen;Yeah, I was on a train and I messed up with the issue.","05/Mar/18 11:42;davsclaus;Yeah the proposed solution by gnodet is good, lets use that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SnsProducer/SqsProducer setting MessageAttributes with empty values which causes errors,CAMEL-12292,13140812,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,25/Feb/18 21:45,03/Mar/18 16:53,13/Mar/19 22:20,03/Mar/18 16:53,2.19.4,2.20.2,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-aws,,,,,,0,,,,"If we send MessageAttributes to AWS where the value is null, it causes the following excheption:

{code}

com.amazonaws.services.sns.model.InvalidParameterValueException: The message attribute 'JMSType' must contain non-empty message attribute value for message attribute type 'String'. (Service: AmazonSNS; Status Code: 400; Error Code: ParameterValueInvalid; Request ID: d3ab2323-b70d-5d11-b466-702f48b02816)

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-26 08:48:15.353,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 28 18:13:08 UTC 2018,,,,,,,0|i3qkrr:,9223372036854775807,,,,,,,,,,26/Feb/18 08:48;davsclaus;So maybe it should skip those headers that has null values.,28/Feb/18 16:02;davsclaus;Christian how soon can you get this fixed as we will cut the new release end of next week,28/Feb/18 18:13;muellerc;Will fix it by end of the week...,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce - Http proxy support uses two inconsistent methods and is broken,CAMEL-12123,13128505,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,mabroukb,mabroukb,04/Jan/18 14:32,27/Feb/18 13:38,13/Mar/19 22:20,27/Feb/18 13:38,2.20.1,,,,,,,,,,,,,,,2.21.0,,,,,camel-salesforce,,,,,,0,proxy,salesforce,,"in the SalesforceComponent class, there is two ways to configure a http proxy :
- using  setHttpProxyHost method and others alike
- using httpClientProperties map with proxy keys (HTTP_PROXY_HOST and others ...)

but instance variables set by setHttpProxyXXX methods are not used and should be considered as dead code. 
one can have a look at the setupHttpClient() method to figure out that the proxy variables are not used, but only the properties map is.

This bug was discovered while proceeding to an upgrade from 2.19.x to 2.20.1.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-01-08 12:38:22.814,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 27 13:38:59 UTC 2018,,,,,,,0|i3oien:,9223372036854775807,Regression,,,,,,,,,08/Jan/18 12:38;ricardozanini;I could work on this. Waiting for triage. :),27/Feb/18 13:38;zregvart;Fixed to take both methods of configuring HTTP proxy under consideration.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URISyntaxException in AbstractSpanDecorator,CAMEL-12289,13140526,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cipous,cipous,23/Feb/18 15:36,26/Feb/18 13:09,13/Mar/19 22:20,26/Feb/18 08:46,2.20.2,,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-opentracing,,,,,,0,,,,"Fix provided in CAMEL-12098 does not solve whole problem. As there are still curly brackets in URL, it fails  in AbstractDecorator in method pre(...), where is again used URI.createSchema().

I checked and URI.create(endpoint.getEndpointUri()) is also in 2 other decorators, but there is probably not happening that {} are used in path..

 ",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12098,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-26 08:46:25.794,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 26 13:09:37 UTC 2018,,,,,,,0|i3qj07:,9223372036854775807,,,,,,,,,,"23/Feb/18 15:39;cipous;I can submit fix with only changes in AbstractSpanDecorator:
{code:java}
Index: components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/AbstractSpanDecorator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/AbstractSpanDecorator.java    (revision 65b5394ff4645cb47e1bdd6060d100bfe4293a09)
+++ components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/AbstractSpanDecorator.java    (date 1519316576424)
@@ -27,6 +27,7 @@
 import org.apache.camel.Exchange;
 import org.apache.camel.opentracing.SpanDecorator;
 import org.apache.camel.util.URISupport;
+import org.apache.camel.util.StringHelper;
 
 /**
  * An abstract base implementation of the {@link SpanDecorator} interface.
@@ -69,11 +70,13 @@
 
     @Override
     public void pre(Span span, Exchange exchange, Endpoint endpoint) {
-        span.setTag(Tags.COMPONENT.getKey(), CAMEL_COMPONENT + URI.create(endpoint.getEndpointUri()).getScheme());
+        String endpointUri = endpoint.getEndpointUri();
+        endpointUri = endpointUri.replace(""{"",""("").replace(""}"","")"");
+        span.setTag(Tags.COMPONENT.getKey(), CAMEL_COMPONENT + URI.create(endpointUri).getScheme());
 
         // Including the endpoint URI provides access to any options that may have been provided, for
         // subsequent analysis
-        span.setTag(""camel.uri"", URISupport.sanitizeUri(endpoint.getEndpointUri()));
+        span.setTag(""camel.uri"", URISupport.sanitizeUri(endpointUri));
     }
 
     @Override

{code}
This solves my problem with restlet component, but not sure if it is optimal solution...","26/Feb/18 08:46;davsclaus;Thanks I found a little different way to grab the component name from the uri, they way its done in camel-core","26/Feb/18 13:09;cipous;This shoud be working as well... But again 
URI.create(endpoint.getEndpointUri())
is used in other decorators I am not aware of..

 

Thank you.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URISyntaxException in OpenTracingTracer for endpoints with path parameters,CAMEL-12098,13126319,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,koscejev,koscejev,20/Dec/17 15:48,23/Feb/18 15:41,13/Mar/19 22:20,21/Dec/17 10:39,2.20.1,,,,,,,,,,,,,,,2.19.5,2.20.2,2.21.0,,,camel-opentracing,camel-restlet,,,,,0,,,,"We're using a lot of endpoints with path parameters, such as: {{restlet://https://localhost:58530//people/{personId\}?restletMethod=GET}} 

The endpoint URI contains curly brackets, which is invalid and doesn't pass validation in {{URI.create}}. Unfortunately, that is exactly what happens in OpenTracingTracer:
{code}
SpanDecorator sd = decorators.get(URI.create(endpoint.getEndpointUri()).getScheme());
{code}

Naturally, this results in OpenTracing not working and lots of warnings like this: {code}
WARN  o.a.c.opentracing.OpenTracingTracer - OpenTracing: Failed to capture tracing data
java.lang.IllegalArgumentException: Illegal character in path at index 42: restlet://https://localhost:58530//people/{personId}?restletMethod=GET
	at java.net.URI.create(URI.java:852)
	at org.apache.camel.opentracing.OpenTracingTracer.getSpanDecorator(OpenTracingTracer.java:192)
	at org.apache.camel.opentracing.OpenTracingTracer$OpenTracingEventNotifier.notify(OpenTracingTracer.java:218)
	at org.apache.camel.util.EventHelper.doNotifyEvent(EventHelper.java:1096)
	at org.apache.camel.util.EventHelper.notifyExchangeSending(EventHelper.java:833)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:137)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:197)
	at org.apache.camel.component.timer.TimerConsumer$2.run(TimerConsumer.java:110)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.URISyntaxException: Illegal character in path at index 42: restlet://https://localhost:58530//people/{personId}?restletMethod=GET
	at java.net.URI$Parser.fail(URI.java:2848)
	at java.net.URI$Parser.checkChars(URI.java:3021)
	at java.net.URI$Parser.parseHierarchical(URI.java:3105)
	at java.net.URI$Parser.parse(URI.java:3053)
	at java.net.URI.<init>(URI.java:588)
	at java.net.URI.create(URI.java:850)
	... 40 common frames omitted
{code}

Previously Restlet endpoint URI used normal brackets instead of curly brackets, so this wasn't an issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-12-20 15:48:34.0,,,,,,,0|i3o4y7:,9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Milo client broken,CAMEL-12286,13140164,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dentrassi,ctron,ctron,22/Feb/18 10:59,23/Feb/18 14:50,13/Mar/19 22:20,23/Feb/18 14:06,2.21.0,,,,,,,,,,,,,,,2.21.0,,,,,camel-milo,,,,,,0,,,,"It looks to me as if the camel-milo client is broken in the most recent version of camel (2.21.x). Running a working example from camel 2.20.x (and 2.19.x) with Camel 2.21-SNAPSHOT results in:
{code:java}
2018-02-22 11:56:45.248  INFO 30400 --- [           main] o.e.milo.opcua.sdk.client.OpcUaClient    : Eclipse Milo OPC UA Stack version: 0.2.1
2018-02-22 11:56:45.248  INFO 30400 --- [           main] o.e.milo.opcua.sdk.client.OpcUaClient    : Eclipse Milo OPC UA Client SDK version: 0.2.1
2018-02-22 11:56:45.407  INFO 30400 --- [           main] o.a.c.c.m.c.i.SubscriptionManager        : Failed to connect

java.util.concurrent.ExecutionException: UaException: status=Bad_SessionClosed, message=The session was closed by the client.
    at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357) ~[na:1.8.0_161]
    at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895) ~[na:1.8.0_161]
    at org.apache.camel.component.milo.client.internal.SubscriptionManager.performConnect(SubscriptionManager.java:450) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.internal.SubscriptionManager.performAndEvalConnect(SubscriptionManager.java:375) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.internal.SubscriptionManager.connect(SubscriptionManager.java:370) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.internal.SubscriptionManager.<init>(SubscriptionManager.java:340) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.MiloClientConnection.init(MiloClientConnection.java:52) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.MiloClientConnection.checkInit(MiloClientConnection.java:69) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.MiloClientConnection.monitorValue(MiloClientConnection.java:86) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.MiloClientConsumer.doStart(MiloClientConsumer.java:57) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3701) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:4019) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3954) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3874) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3638) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3490) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:208) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3249) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3245) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3268) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3245) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3168) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) [camel-spring-2.20.2.jar:2.20.2]
    at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:174) [camel-spring-2.20.2.jar:2.20.2]
    at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at de.dentrassi.bcx18.opcua.Application.main(Application.java:19) [classes/:na]
Caused by: org.eclipse.milo.opcua.stack.core.UaException: status=Bad_SessionClosed, description=The session was closed by the client.
    at org.eclipse.milo.opcua.stack.core.util.FutureUtils.failedUaFuture(FutureUtils.java:100) ~[stack-core-0.2.1.jar:0.2.1]
    at org.eclipse.milo.opcua.stack.core.util.FutureUtils.failedUaFuture(FutureUtils.java:88) ~[stack-core-0.2.1.jar:0.2.1]
    at org.eclipse.milo.opcua.sdk.client.session.states.Inactive.<init>(Inactive.java:28) ~[sdk-client-0.2.1.jar:0.2.1]
    at org.eclipse.milo.opcua.sdk.client.session.SessionFsm.<init>(SessionFsm.java:69) ~[sdk-client-0.2.1.jar:0.2.1]
    at org.eclipse.milo.opcua.sdk.client.OpcUaClient.<init>(OpcUaClient.java:159) ~[sdk-client-0.2.1.jar:0.2.1]
    at org.apache.camel.component.milo.client.internal.SubscriptionManager.performConnect(SubscriptionManager.java:447) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    ... 36 common frames omitted

{code}

And no more connections are possible.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-22 11:02:54.916,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 23 14:50:04 UTC 2018,,,,,,,0|i3qgrr:,9223372036854775807,Regression,,,,,,,,,22/Feb/18 11:02;ancosen;[~ctron] can you please take a look?,"22/Feb/18 11:54;ctron;I am already on it. I think a few things changed here (to the better), but it broke the integration.

I will submit a PR for this next week. I am currently at BCX and will be able to test the PR I am currently creating.",22/Feb/18 12:00;ancosen;Thanks a lot.,"23/Feb/18 13:58;githubbot;ctron opened a new pull request #2233: CAMEL-12286: Fix camel-milo client component
URL: https://github.com/apache/camel/pull/2233
 
 
   This change adapts the client to the changed behavior of
   Eclipse Milo 0.2.x. It does an explicit call to connect and also allows
   to configure the allowed security policies in order to still support
   anonymous access when no keys are used.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Feb/18 13:58;githubbot;GitHub user ctron opened a pull request:

    https://github.com/apache/camel/pull/2233

    CAMEL-12286: Fix camel-milo client component

    This change adapts the client to the changed behavior of
    Eclipse Milo 0.2.x. It does an explicit call to connect and also allows
    to configure the allowed security policies in order to still support
    anonymous access when no keys are used.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ctron/camel feature/fix_issue_12286_1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2233.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2233
    
----
commit e92e8e73b4997026a5c28859569e767da8dcdb15
Author: Jens Reimann <jreimann@...>
Date:   2018-02-22T11:55:38Z

    CAMEL-12286: Fix camel-milo client component
    
    This change adapts the client to the changed behavior of
    Eclipse Milo 0.2.x. It does an explicit call to connect and also allows
    to configure the allowed security policies in order to still support
    anonymous access when no keys are used.

----
","23/Feb/18 14:05;githubbot;oscerd closed pull request #2233: CAMEL-12286: Fix camel-milo client component
URL: https://github.com/apache/camel/pull/2233
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-milo/src/main/docs/milo-client-component.adoc b/components/camel-milo/src/main/docs/milo-client-component.adoc
index a911e3f306f..eb3e2b5db37 100644
--- a/components/camel-milo/src/main/docs/milo-client-component.adoc
+++ b/components/camel-milo/src/main/docs/milo-client-component.adoc
@@ -95,7 +95,7 @@ with the following path and query parameters:
 | *endpointUri* | *Required* The OPC UA server endpoint |  | String
 |===
 
-==== Query Parameters (22 parameters):
+==== Query Parameters (23 parameters):
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
 |===
@@ -108,6 +108,7 @@ with the following path and query parameters:
 | *exceptionHandler* (consumer) | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored. |  | ExceptionHandler
 | *exchangePattern* (consumer) | Sets the exchange pattern when the consumer creates an exchange. |  | ExchangePattern
 | *synchronous* (advanced) | Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported). | false | boolean
+| *allowedSecurityPolicies* (client) | A set of allowed security policy URIs. Default is to accept all and use the highest. |  | String
 | *applicationName* (client) | The application name | Apache Camel adapter for Eclipse Milo | String
 | *applicationUri* (client) | The application URI | http://camel.apache.org/EclipseMilo/Client | String
 | *channelLifetime* (client) | Channel lifetime in milliseconds |  | Long
@@ -161,6 +162,15 @@ However Camel allows to wrap the actual value inside `RAW(…)`, which makes esc
 milo-client://user:password@localhost:12345?node=RAW(nsu=http://foo.bar;s=foo/bar)
 ------------------------
 
+==== Security policies
+
+When setting the allowing security policies is it possible to use the well known OPC UA URIs (e.g. `http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15`)
+or to use the Milo enum literals (e.g. `None`). Specifying an unknown security policy URI or enum is an error.
+
+The known security policy URIs and enum literals are can be seen here: https://github.com/eclipse/milo/blob/master/opc-ua-stack/stack-core/src/main/java/org/eclipse/milo/opcua/stack/core/security/SecurityPolicy.java[SecurityPolicy.java] 
+
+**Note:** In any case security policies are considered case sensitive.
+
 === See Also
 
 * Configuring Camel
diff --git a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java
index 8f1e1847961..1a78648a93c 100644
--- a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java
+++ b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java
@@ -18,10 +18,13 @@
 
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.HashSet;
+import java.util.Set;
 
 import org.apache.camel.component.milo.KeyStoreLoader;
 import org.apache.camel.spi.UriParam;
 import org.apache.camel.spi.UriParams;
+import org.eclipse.milo.opcua.stack.core.security.SecurityPolicy;
 
 @UriParams
 public class MiloClientConfiguration implements Cloneable {
@@ -79,6 +82,9 @@
     @UriParam(label = ""client"", secret = true)
     private String keyPassword;
 
+    @UriParam(label = ""client"", javaType = ""java.lang.String"")
+    private Set<String> allowedSecurityPolicies = new HashSet<>();
+
     public MiloClientConfiguration() {
     }
 
@@ -88,6 +94,7 @@ public MiloClientConfiguration(final MiloClientConfiguration other) {
         this.applicationName = other.applicationName;
         this.productUri = other.productUri;
         this.requestTimeout = other.requestTimeout;
+        this.allowedSecurityPolicies = allowedSecurityPolicies != null ? new HashSet<>(other.allowedSecurityPolicies) : null;
     }
 
     public void setEndpointUri(final String endpointUri) {
@@ -263,6 +270,55 @@ public String getKeyPassword() {
         return this.keyPassword;
     }
 
+    /**
+     * A set of allowed security policy URIs. Default is to accept all and use
+     * the highest.
+     */
+    public void setAllowedSecurityPolicies(final Set<String> allowedSecurityPolicies) {
+        this.allowedSecurityPolicies = allowedSecurityPolicies;
+    }
+
+    public void setAllowedSecurityPolicies(final String allowedSecurityPolicies) {
+
+        // check if we are reset or set
+
+        if (allowedSecurityPolicies == null) {
+            // resetting to null
+            this.allowedSecurityPolicies = null;
+            return;
+        }
+
+        // split and convert
+
+        this.allowedSecurityPolicies = new HashSet<>();
+        final String[] policies = allowedSecurityPolicies.split("","");
+        for (final String policy : policies) {
+
+            String adding = null;
+            try {
+                adding = SecurityPolicy.fromUri(policy).getSecurityPolicyUri();
+            } catch (Exception e) {
+            }
+            if (adding == null) {
+                try {
+                    adding = SecurityPolicy.valueOf(policy).getSecurityPolicyUri();
+                } catch (Exception e) {
+                }
+            }
+
+            if (adding == null) {
+                throw new RuntimeException(""Unknown security policy: "" + policy);
+            }
+
+            this.allowedSecurityPolicies.add(adding);
+        }
+
+    }
+
+    public Set<String> getAllowedSecurityPolicies() {
+        return allowedSecurityPolicies;
+    }
+
     @Override
     public MiloClientConfiguration clone() {
         return new MiloClientConfiguration(this);
diff --git a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java
index 877bf084df8..f2d31025a4b 100644
--- a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java
+++ b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java
@@ -23,6 +23,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutionException;
@@ -31,6 +32,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.function.Consumer;
+import java.util.function.Predicate;
 
 import org.apache.camel.component.milo.NamespaceId;
 import org.apache.camel.component.milo.PartialNodeId;
@@ -445,6 +447,7 @@ private Connected performConnect() throws Exception {
         cfg.setEndpoint(endpoint);
 
         final OpcUaClient client = new OpcUaClient(cfg.build());
+        client.connect().get();
 
         try {
             final UaSubscription manager = client.getSubscriptionManager().createSubscription(1_000.0).get();
@@ -493,8 +496,23 @@ private synchronized void triggerReconnect(final boolean immediate) {
     }
 
     private EndpointDescription findEndpoint(final EndpointDescription[] endpoints) {
+
+        final Predicate<String> allowed;
+        final Set<String> uris = this.configuration.getAllowedSecurityPolicies();
+
+        if (this.configuration.getAllowedSecurityPolicies() == null || this.configuration.getAllowedSecurityPolicies().isEmpty()) {
+            allowed = uri -> true;
+        } else {
+            allowed = uris::contains;
+        }
+
         EndpointDescription best = null;
         for (final EndpointDescription ep : endpoints) {
+
+            if (!allowed.test(ep.getSecurityPolicyUri())) {
+                continue;
+            }
+
             if (best == null || ep.getSecurityLevel().compareTo(best.getSecurityLevel()) > 0) {
                 best = ep;
             }
diff --git a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java
index b653f8b6836..cd194aa1384 100644
--- a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java
+++ b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java
@@ -16,6 +16,7 @@
  */
 package org.apache.camel.component.milo.client.springboot;
 
+import java.util.Set;
 import javax.annotation.Generated;
 import org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon;
 import org.springframework.boot.context.properties.ConfigurationProperties;
@@ -169,6 +170,11 @@ public void setResolvePropertyPlaceholders(
          * The key password
          */
         private String keyPassword;
+        /**
+         * A set of allowed security policy URIs. Default is to accept all and
+         * use the highest.
+         */
+        private Set allowedSecurityPolicies;
 
         public String getEndpointUri() {
             return endpointUri;
@@ -289,5 +295,13 @@ public String getKeyPassword() {
         public void setKeyPassword(String keyPassword) {
             this.keyPassword = keyPassword;
         }
+
+        public Set getAllowedSecurityPolicies() {
+            return allowedSecurityPolicies;
+        }
+
+        public void setAllowedSecurityPolicies(Set allowedSecurityPolicies) {
+            this.allowedSecurityPolicies = allowedSecurityPolicies;
+        }
     }
 }
\ No newline at end of file


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Feb/18 14:05;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2233
","23/Feb/18 14:05;githubbot;oscerd commented on issue #2233: CAMEL-12286: Fix camel-milo client component
URL: https://github.com/apache/camel/pull/2233#issuecomment-368017694
 
 
   This time I was faster than @davsclaus 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Feb/18 14:05;githubbot;oscerd commented on issue #2233: CAMEL-12286: Fix camel-milo client component
URL: https://github.com/apache/camel/pull/2233#issuecomment-368017714
 
 
   Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Feb/18 14:47;githubbot;ctron commented on issue #2233: CAMEL-12286: Fix camel-milo client component
URL: https://github.com/apache/camel/pull/2233#issuecomment-368029151
 
 
   Thanks again for the quick merge!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Feb/18 14:50;githubbot;oscerd commented on issue #2233: CAMEL-12286: Fix camel-milo client component
URL: https://github.com/apache/camel/pull/2233#issuecomment-368029846
 
 
   Thanks for your help!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,
rest-dsl - Inlined route has route id wrongly assigned,CAMEL-12282,13139845,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Feb/18 09:21,21/Feb/18 10:34,13/Mar/19 22:20,21/Feb/18 10:34,,,,,,,,,,,,,,,,2.21.0,,,,,camel-core,,,,,,0,,,,Id is wrongly assigned on the first output instead of the route element itself.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-02-21 09:21:06.0,,,,,,,0|i3qetb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jsonpath - Should allow to load jackson adapter in OSGi,CAMEL-12278,13139446,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Feb/18 14:33,19/Feb/18 14:38,13/Mar/19 22:20,19/Feb/18 14:38,2.20.1,,,,,,,,,,,,,,,2.20.3,2.21.0,,,,camel-jsonpath,,,,,,0,,,,Reported on user forum,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-02-19 14:33:57.0,,,,,,,0|i3qccn:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"RemoteFileProducer stopped instead of being released to the pool when ""interceptSendToEndpoint"" is used",CAMEL-12244,13137160,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,kszafran,kszafran,08/Feb/18 14:27,14/Feb/18 14:34,13/Mar/19 22:20,14/Feb/18 14:34,2.19.0,,,,,,,,,,,,,,,2.21.0,,,,,,,,,,,0,,,,"In our application we're using an SFTP producer with ""fileExist=Move"" and a specific ""moveExisting"" expression. I encountered a problem where this would sometimes work, and sometimes not (i.e. there would be no "".archived"" file). Upon further investigation I found the problem and it seems to be a bug in Camel.

Our SFTP endpoint looks like this:
{code:none}
sftp://...:.../...?username=...&privateKeyPassphrase=...&privateKeyFile=...&useUserKnownHostsFile=false&jschLoggingLevel=ERROR&fileExist=Move&moveExisting=${file:name}.archived${date:now:yyyyMMddHHmmssSSS}
{code}

We also have an interceptor:
{code:none}
route.interceptSendToEndpoint(""sftp://.*"").process(exchange -> LOG.info(""Sending file {} to {}"", ...));
{code}

As I discovered, using the interceptor wraps the RemoteFileProducer with InterceptSendToEndpoint. This however changes the behavior of the ProducerCache:
{code}
public boolean doInAsyncProducer(...) {
    ...
    return producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, doneSync -> {
        ...
        if (producer instanceof ServicePoolAware) {
            // release back to the pool
            pool.release(endpoint, producer);
        } else if (!producer.isSingleton()) {
            // stop and shutdown non-singleton producers as we should not leak resources
            try {
                ServiceHelper.stopAndShutdownService(producer);
            } catch (Exception e) {
                ...
            }
        }
        ...
    });
    ...
}
{code}

RemoteFileProducer implements ServicePoolAware so it would normally go back to the pool, but InterceptSendToEndpoint _does not_. As a result, our producers keep getting stopped (note that RemoteFileProducer#isSingleton always returns false).

What's more, somehow they _are_ being reused and in the end we run into situations, where one thread is closing a producer, while another thread is trying to write with it.

I set up some breakpoints that log the thread name and System#identityHashCode of the producer:
{code}
2018-02-08 15:05:25.070 TRACE o.a.c.c.file.remote.RemoteFileProducer     : Starting producer: RemoteFileProducer[...]
2018-02-08 15:05:25.073 TRACE o.a.c.c.file.remote.RemoteFileProducer     : Processing file: [my_file] for exchange: ...
2018-02-08 15:05:25.073 DEBUG o.a.c.c.file.remote.RemoteFileProducer     : Not already connected/logged in. Connecting to: ...
doStop(), time: 1518098725112,  thread [Camel (camel-1) thread #35 - CamelInvocationHandler], producer: 889747012
	at org.apache.camel.component.file.remote.RemoteFileProducer.doStop(RemoteFileProducer.java:175)
	at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102)
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:142)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.stop(InterceptSendToEndpoint.java:196)
	at org.apache.camel.support.ServiceSupport.shutdown(ServiceSupport.java:164)
	at org.apache.camel.util.ServiceHelper.stopAndShutdownService(ServiceHelper.java:211)
	at org.apache.camel.impl.ProducerCache.lambda$doInAsyncProducer$2(ProducerCache.java:450)
	at org.apache.camel.processor.SendProcessor$2$1.done(SendProcessor.java:178)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.process(InterceptSendToEndpoint.java:171)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:436)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:695)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:623)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:247)
	at org.apache.camel.processor.Splitter.process(Splitter.java:114)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:47)
	at org.apache.camel.impl.DeferProducer.process(DeferProducer.java:72)
	at org.apache.camel.component.bean.AbstractCamelInvocationHandler$1.call(AbstractCamelInvocationHandler.java:192)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.util.concurrent.Executors$RunnableAdapter.call$$$capture(Executors.java:511)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
2018-02-08 15:05:25.966 DEBUG o.a.c.c.file.remote.RemoteFileProducer     : Connected and logged in to: ...
2018-02-08 15:05:25.966 DEBUG o.a.c.c.file.remote.RemoteFileProducer     : Disconnecting from: ...
2018-02-08 15:05:25.973 TRACE o.a.c.c.file.remote.RemoteFileProducer     : About to write [my_file] to [...] from exchange [...]
2018-02-08 15:05:25.974 TRACE o.a.c.c.file.remote.RemoteFileProducer     : Stopping producer: RemoteFileProducer[...]
2018-02-08 15:05:25.974 DEBUG o.a.c.c.file.remote.RemoteFileProducer     : Starting
2018-02-08 15:05:25.974 TRACE o.a.c.c.file.remote.RemoteFileProducer     : Starting producer: RemoteFileProducer[...]
2018-02-08 15:05:25.977 TRACE o.a.c.c.file.remote.RemoteFileProducer     : Processing file: [another_file] for exchange: Exchange[...]
2018-02-08 15:05:25.977 DEBUG o.a.c.c.file.remote.RemoteFileProducer     : Not already connected/logged in. Connecting to: ...
handleFailedWrite(), time: 1518098726072, thread [Camel (camel-1) thread #37 - CamelInvocationHandler], producer: 889747012
	at org.apache.camel.component.file.remote.RemoteFileProducer.handleFailedWrite(RemoteFileProducer.java:81)
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:227)
	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:58)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.process(InterceptSendToEndpoint.java:167)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:436)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:695)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:623)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:247)
	at org.apache.camel.processor.Splitter.process(Splitter.java:114)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:47)
	at org.apache.camel.impl.DeferProducer.process(DeferProducer.java:72)
	at org.apache.camel.component.bean.AbstractCamelInvocationHandler$1.call(AbstractCamelInvocationHandler.java:192)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.util.concurrent.Executors$RunnableAdapter.call$$$capture(Executors.java:511)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: [my_directory]
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:596)
	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:584)
	at org.apache.camel.component.file.remote.SftpOperations.storeFile(SftpOperations.java:830)
	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:277)
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:165)
	... 39 more
Caused by: 4:
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:359)
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:594)
	... 43 more
Caused by: java.io.IOException: Pipe closed
	at java.io.PipedInputStream.read(PipedInputStream.java:307)
	at com.jcraft.jsch.Channel$MyPipedInputStream.updateReadSide(Channel.java:362)
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:337)
	... 44 more
2018-02-08 15:05:26.186 DEBUG o.a.c.c.file.remote.RemoteFileProducer     : Exception occurred during stopping: Cannot change directory to: [my_directory]
{code}
So thread #35 stopped the producer, while thread #37 was trying to use it.

One more ugly thing about it is that when SftpOperations fail due to a closed pipe, by the time we get to RemoteFileProducer#handleFailedWrite:
{code}
public void handleFailedWrite(...) throws Exception {
    ...
    if (isStopping() || isStopped()) {
        // if we are stopping then ignore any exception during a poll
        log.debug(""Exception occurred during stopping: "" + exception.getMessage());
    } else {
        log.warn(""Writing file failed with: "" + exception.getMessage());
        ...
        throw exception;
    }
}
{code}
the producer is already stopped, *so the exception is logged on DEBUG and not rethrown*.

Note that I'm writing multiple files in parallel (three in my case), I'm using this to send data to the route ending in the SFTP endpoint:
{code}
@Produce(uri = ""direct:myDir"")
private MyDir myDir;
...
myDir.sendAsync(...)
{code}
where
{code}
public interface MyDir {
    Future<?> sendAsync(...);
}
{code}

We're using Camel 2.19.0, but so far that I've looked at the github repository, the issue is most likely present in the current version too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-14 14:34:56.928,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 14 14:34:56 UTC 2018,,,,,,,0|i3py8v:,9223372036854775807,,,,,,,,,,14/Feb/18 14:34;davsclaus;Thanks for reporting and diving into the source code and finding the problem.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-JMS: transferExchange - send ExchangeProperties can not be accessed before first endpoint in route,CAMEL-12249,13137401,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pascalschumacher,pascalschumacher,09/Feb/18 10:27,13/Feb/18 17:24,13/Mar/19 22:20,13/Feb/18 15:26,2.20.2,,,,,,,,,,,,,,,2.21.0,,,,,came-jms,,,,,,0,,,,"I am using Camel 2.20.2 and ActiveMQ 5.14.5 with the _transferExchange_ option enabled. When I read a message from a queue the send custom _ExchangeProperties_ are not set. After the exchange is routed to the first endpoint the send _ExchangeProperties_ are set.

Unittest to replicate:

{code:java}
public class JmsTransferExchangeAccessExchangePropertiesBeforeFirstEndpointTest extends CamelTestSupport {

    @Test
    public void testSendExchangeAndAccessExchangePropertiesBeforeFirstEndpoint() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedBodiesReceived(""Hello World"");
        mock.expectedPropertyReceived(""bar"", 123);

        template.send(""direct:start"", new Processor() {

            public void process(Exchange exchange) throws Exception {
                exchange.getIn().setBody(""Hello World"");
                exchange.setProperty(""bar"", 123);
            }
        });

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                from(""direct:start"").to(getUri());
                from(getUri())
                        // .to(""log:debug"") this line has uncommented to make the test pass
                        .choice().when(exchangeProperty(""bar"").isEqualTo(123)).to(""mock:result"");
            }
        };
    }
    
    protected String getUri() {
        return ""activemq:queue:foo?transferExchange=true"";
    }

    protected CamelContext createCamelContext() throws Exception {
        CamelContext camelContext = super.createCamelContext();

        ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory();
        camelContext.addComponent(""activemq"", jmsComponentAutoAcknowledge(connectionFactory));
        return camelContext;
    }
}
{code}

The test fails, but if I uncomment the _.to(""log:debug"")_ line it passes.

The test also fails with current master of camel.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-13 14:40:05.717,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 13 17:24:34 UTC 2018,,,,,,,0|i3pzqf:,9223372036854775807,,,,,,,,,,13/Feb/18 14:40;davsclaus;You need then to turn on eagerLoadingOfProperties=true,"13/Feb/18 15:22;davsclaus;Okay just looked in the source that option only triggers the headers, and the transferExchange is unmarshalled when accessing the body, so will get that improved so the eager option works for that too.","13/Feb/18 17:24;pascalschumacher;Thank you very much, Claus!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
use configured readTimeout for initial message,CAMEL-12258,13137930,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hqstevenson,hqstevenson,hqstevenson,12/Feb/18 18:32,12/Feb/18 22:35,13/Mar/19 22:20,12/Feb/18 22:35,,,,,,,,,,,,,,,,2.21.0,,,,,camel-mllp,,,,,,0,,,,"The camel-mllp component checks for load balancer probes by using a slightly different Runnable for processing the first message.  This runnable uses a short receiveTimeout as is should.  However, it should use the configured readTimeout.  Failure to use this configured timeout causes large messages to fail when they are the first messages received on the TCP Socket, and the camel-mllp component subsequently resets the TCP connection - so messages can never flow.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 12 22:35:47 UTC 2018,,,,,,,0|i3q2zz:,9223372036854775807,,,,,,,,,,"12/Feb/18 22:35;hqstevenson;Resolved w/commit 5884ab755731d40a1d3d00153cc776fb0c068936.

Also improved the logging to make it easier to diagnose issues with the initial read/validation Runnable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MongoDB Tailable cursor consumer fails to stop on shutdown,CAMEL-11977,13115382,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,Igorko,Igorko,01/Nov/17 15:17,12/Feb/18 11:23,13/Mar/19 22:20,12/Feb/18 10:54,2.20.0,,,,,,,,,,,,,,,2.20.3,2.21.0,,,,camel-mongodb,camel-mongodb3,,,,,0,,,,"MongoDB Tailable cursor consumer fails to stop on shutdown(when using Ctrl+C) if collection is not empty. Routes are described in xml file.

[Camel (...) thread #8 - ShutdownTask] INFO  o.a.c.c.m.MongoDbTailingProcess - Stopping MongoDB Tailable Cursor consumer, bound to collection: db: ..., col: ... 
[Camel (...) thread #8 - ShutdownTask] INFO  o.a.c.c.m.MongoDbTailingProcess - Going to wait for stopping

When collection is empty, all is ok and I see next line
[Camel (...) thread #8 - ShutdownTask] INFO  o.a.c.c.m.MongoDbTailingProcess - Stopped MongoDB Tailable Cursor consumer, bound to collection: db: ..., col: ...
","Windows 10, Java 1.8",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-02 12:25:54.125,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 12 11:23:52 UTC 2018,,,,,,,0|i3m9qv:,9223372036854775807,,,,,,,,,,02/Nov/17 12:25;davsclaus;You are welcome to try to work on a fix for this.,"02/Nov/17 16:24;githubbot;igorko opened a new pull request #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075
 
 
   cursor.hasNaxt() locks thread and waits for new object. Camel mongodb component uses loop to get new cursor objects, so we can just try if next is present without waiting for new object. tryNext() is what we need in this casre.
   
   According to mongoBD documentation:
   [](http://api.mongodb.com/java/current/com/mongodb/client/MongoCursor.html)
   tryNext() A special next() case that returns the next element in the iteration if available or null.
   
   So after exit hook injection. when java will call MongoDbTailingProcess.stop(), there will be no lock at  MongoDbTailingProcess.run(). so MongoDbTailingProcess instance will be stopped.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Nov/17 16:24;githubbot;GitHub user igorko opened a pull request:

    https://github.com/apache/camel/pull/2075

    CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown

    cursor.hasNaxt() locks thread and waits for new object. Camel mongodb component uses loop to get new cursor objects, so we can just try if next is present without waiting for new object. tryNext() is what we need in this casre.
    
    According to mongoBD documentation:
    [](http://api.mongodb.com/java/current/com/mongodb/client/MongoCursor.html)
    tryNext() A special next() case that returns the next element in the iteration if available or null.
    
    So after exit hook injection. when java will call MongoDbTailingProcess.stop(), there will be no lock at  MongoDbTailingProcess.run(). so MongoDbTailingProcess instance will be stopped.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igorko/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2075.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2075
    
----
commit ba667d7aece178bf9e0d1c0cd69b2d1afd96cecd
Author: Igor Paliychuk <mansonigor@gmail.com>
Date:   2017-11-02T16:16:39Z

    CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown

----
","02/Nov/17 18:14;githubbot;davsclaus commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341512401
 
 
   Thanks do you mind look in camel-mongodb3 if it has the same bug?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Nov/17 07:26;githubbot;davsclaus commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341636112
 
 
   Isn't this a problem if the while loop now with `tryNext` keeps returning false because there is no data, but its not being stopped, then the while loop keeps running, and calling `tryNext` again and again endlessly which could eat up CPU cycles. In other words is this code change not causing CPU burden when there is no data to retrieve but the while loop keeps running.
   
   Ideally Mongodb should have had a next with timeout, so you can timeout every second or so and then check if you should shutdown or not.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Nov/17 10:10;githubbot;igorko commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341663355
 
 
   If tryNext() will return null, execution will leave while loop. Does this answer your question?
   
   Mongodb3 has the same issue, yes

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Nov/17 10:27;githubbot;davsclaus commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341666846
 
 
   Even so it leaves the method it goes back to run method, that then close the curors, and re-create it, which is expensive operations. eg in normal situation where you do NOT shutdown. 
   
   In other words we cannot do this because normal operation will suffer from CPU burning and endless cursors closing/re-creation

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Nov/17 10:41;githubbot;igorko commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341669680
 
 
   Lets add some timeout then, it will be better then deadlock.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Nov/17 10:41;githubbot;igorko commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341669680
 
 
   Lets add some configurable timeout then, it will be better then deadlock.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Nov/17 14:26;githubbot;igorko commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341718238
 
 
   I see that this bug had been found earlier https://issues.apache.org/jira/browse/CAMEL-9826 and fix was committed. But it has not fixed the issue. I will look into mongodb driver cursor logic.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Nov/17 16:00;Igorko;I have found some info about this topic. Some time ago mongodb java driver team reworked hasNext() to wait for tailable cursors. https://jira.mongodb.org/browse/JAVA-1091 And added tryNext() to allow old behavior https://jira.mongodb.org/browse/JAVA-1255. As you see in current driver code 


{code:java}
    public boolean hasNext() {
        if (closed) {
            throw new IllegalStateException(""Cursor has been closed"");
        }

        if (nextBatch != null) {
            return true;
        }

        if (limitReached()) {
            return false;
        }

        while (serverCursor != null) {
            getMore();
            if (nextBatch != null) {
                return true;
            }
        }

        return false;
    }
{code}

hasNext() has infinite loop, which also is bad for performance, as in case we would use tryNext() and open/close cursor each time on camel side. I propose to request another ""is closed"" check inside loop before getMore() to mongodb driver team. Thjis should allow to exit from hasNext() when we will close cursor from another thread. If this solution sounds ok, I will request change on driver side.","03/Nov/17 16:44;githubbot;igorko closed pull request #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java b/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java
index 6192949c8ef..d7018a72ccc 100644
--- a/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java
+++ b/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java
@@ -158,8 +158,8 @@ private void doRun() {
         boolean persistRegularly = persistRecords > 0;
         // while the cursor has more values, keepRunning is true and the cursorId is not 0, which symbolizes that the cursor is dead
         try {
-            while (cursor.hasNext() && keepRunning) { //cursor.getCursorId() != 0 &&
-                DBObject dbObj = cursor.next();
+            DBObject dbObj = null;
+            while ((dbObj = cursor.tryNext()) != null && keepRunning) { //cursor.getCursorId() != 0 &&
                 Exchange exchange = endpoint.createMongoDbExchange(dbObj);
                 try {
                     if (LOG.isTraceEnabled()) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Nov/17 16:44;githubbot;Github user igorko closed the pull request at:

    https://github.com/apache/camel/pull/2075
",04/Nov/17 09:48;davsclaus;Yes this sounds good solution to have that improved in the mongodb-driver.,"13/Nov/17 11:18;Igorko;mongodb driver team applied fix to driver so when cursor closing was requested, hasNext will throw exception(instead of returning) https://jira.mongodb.org/browse/JAVA-2651 maybe this is better then returning, but for camel it is bad because camel cursor still doesn't want to stop. This time I think there should be made some fix(maybe try/catch) on camel side.","13/Nov/17 11:54;githubbot;igorko opened a new pull request #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090
 
 
   Is it still possible to include this fix into v2.20.1. It would be very good if so.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Nov/17 11:54;githubbot;GitHub user igorko opened a pull request:

    https://github.com/apache/camel/pull/2090

    CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown

    Is it still possible to include this fix into v2.20.1. It would be very good if so.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igorko/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2090.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2090
    
----
commit 2923c85347f8ae03185d12a4b5c23a8978f2f020
Author: Igor Paliychuk <mansonigor@gmail.com>
Date:   2017-11-13T11:53:58Z

    CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown

----
","13/Nov/17 12:05;githubbot;oscerd commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-343899533
 
 
   No, 2.20.1 is alreay under vote after cut, it will be in 2.20.2. Thanks :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Nov/17 12:09;githubbot;oscerd closed pull request #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java b/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java
index 6192949c8ef..3030c2d4231 100644
--- a/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java
+++ b/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java
@@ -180,6 +180,8 @@ private void doRun() {
             if (keepRunning) {
                 LOG.debug(""Cursor not found exception from MongoDB, will regenerate cursor. This is normal behaviour with tailable cursors."", e);
             }
+        } catch (IllegalStateException e) {
+            // do nothing
         }
 
         // the loop finished, persist the lastValue just in case we are shutting down


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Nov/17 12:09;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2090
","13/Nov/17 12:13;githubbot;oscerd commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-343901229
 
 
   Thanks for the PR. It has been merged on master and 2.20.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Nov/17 12:14;githubbot;igorko commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-343901339
 
 
   SHould I create another pull request for branch or no?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Nov/17 12:14;githubbot;igorko commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-343901339
 
 
   SHould I create another pull request for branch or no?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Nov/17 12:16;githubbot;oscerd commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-343901740
 
 
   No need for a PR on the other branch. We usually ask for PR on master and we cherry-pick commit on old branches.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Dec/17 13:50;githubbot;igorko commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-352430701
 
 
   @oscerd Could you merge changes to 2.20.x ? I see that they are not present in branch.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Feb/18 09:43;githubbot;igorko commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-352430701
 
 
   @oscerd Could you merge changes to 2.20.x ? I see that they are not present in branch.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Feb/18 09:49;ancosen;It has been reverted here 

 

[https://github.com/apache/camel/commit/793062481d37b0da4d9890f9bd897cec76e0e2c0]

 

[~davsclaus] was it reverted because we were under release vote?",12/Feb/18 10:17;Igorko;Second pull request (final) was not applied to 2.20.2 but defect is marked as fixed... Also fix is not present in 2.20.x Can anyone look into that?,"12/Feb/18 10:30;Igorko;Forgot to notice: first pull request was reverted, because it was bad code change. But second one (correct) was never applied. So I guess someone should just apply second patch to 2.20.x branch","12/Feb/18 10:54;ancosen;On 2.20.x done here:

https://github.com/apache/camel/commit/8a9f5338229289e2ec4fd86a81bf1203a4eb61ad",12/Feb/18 11:10;Igorko;Strange. Why it's not in 2.20.2 release then? Isn't 2.20.2 supposed to be forked from 2.20.x ?,12/Feb/18 11:16;ancosen;It will be in 2.20.3 as you may see from the commit. I backported it today.,"12/Feb/18 11:23;Igorko;Now I see, I have looked only at commit date, not at backport date. Thanks!"
camel-swagger-java - Body parameter fails to output type,CAMEL-12255,13137700,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Feb/18 12:31,11/Feb/18 12:37,13/Mar/19 22:20,11/Feb/18 12:37,2.20.2,,,,,,,,,,,,,,,2.20.3,2.21.0,,,,camel-swagger,,,,,,0,,,,"See SO

[https://stackoverflow.com/questions/48452734/swagger-yaml-generated-by-camel-not-compatible-with-swagger-editor-and-ui?noredirect=1#comment84416840_48452734]

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-02-11 12:31:33.0,,,,,,,0|i3q1kv:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
New AsciiDoc documentation has many broken links,CAMEL-12246,13137197,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,fbolton,fbolton,08/Feb/18 17:12,10/Feb/18 09:42,13/Mar/19 22:20,09/Feb/18 13:26,2.21.0,,,,,,,,,,,,,,,2.21.0,,,,,documentation,,,,,,0,,,,"There are a fair number of broken links in the new AsciiDoc documentation (in the main Camel repo). In other words, links like {{link:LINKNAME.html[Link Text]}} ought to have a matching target ID, {{[[LINKNAME]]}}, in the AsciiDoc source. But I found 245 LINKNAMEs in links that have no corresponding target ID defined.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-09 12:56:02.218,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sat Feb 10 09:42:12 UTC 2018,,,,,,,0|i3pyh3:,9223372036854775807,,,,,,,,,,"09/Feb/18 12:56;githubbot;fbolton opened a new pull request #2215: CAMEL-12246 Fix broken links
URL: https://github.com/apache/camel/pull/2215
 
 
   @davsclaus and @oscerd, here are the changes to the AsciiDoc linking that we discussed. Here's a summary of what was done:
   
   * Resolve the duplicate IDs (can't do any harm, and is actually required for our downstream builds)
   * Take into account the -eip suffix, which might reduce the number of unresolved links.
   * All resolvable links to be transformed to AsciiDoc cross-reference format, as follows:
   ```
   link:LINKNAME.html[Text of Link]  =>  <<LINKNAME, Text of Link>>
   ```
     Where, in some cases, `LINKNAME` might be augmented by a `-component`, `-dataformat`, `-language`, or `-eip` suffix.
   * Identify the broken EIP links and leave them alone. These will continue to show up as broken links, but we can easily fix them later.
   * All other unresolved links will be removed. Probably do this by replacing:
   ```
   link:LINKNAME.html[Text of Link]   =>  Text of Link
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Feb/18 12:56;githubbot;GitHub user fbolton opened a pull request:

    https://github.com/apache/camel/pull/2215

    CAMEL-12246 Fix broken links

    @davsclaus and @oscerd, here are the changes to the AsciiDoc linking that we discussed. Here's a summary of what was done:
    
    * Resolve the duplicate IDs (can't do any harm, and is actually required for our downstream builds)
    * Take into account the -eip suffix, which might reduce the number of unresolved links.
    * All resolvable links to be transformed to AsciiDoc cross-reference format, as follows:
    ```
    link:LINKNAME.html[Text of Link]  =>  <<LINKNAME, Text of Link>>
    ```
      Where, in some cases, `LINKNAME` might be augmented by a `-component`, `-dataformat`, `-language`, or `-eip` suffix.
    * Identify the broken EIP links and leave them alone. These will continue to show up as broken links, but we can easily fix them later.
    * All other unresolved links will be removed. Probably do this by replacing:
    ```
    link:LINKNAME.html[Text of Link]   =>  Text of Link
    ```

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fbolton/camel fix-broken-links

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2215.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2215
    
----
commit 9641a6edb74138dc8313deba80a0a46d4236a6e4
Author: Fintan Bolton <fbolton@...>
Date:   2018-02-08T17:13:29Z

    CAMEL-12246 Fixed a duplicate ID in the AsciiDoc source

commit b61b7a18999594a32c67061eb41c3d6762db756a
Author: Fintan Bolton <fbolton@...>
Date:   2018-02-09T10:56:09Z

    CAMEL-12246 Replaced file links with AsciiDoc internal cross references

commit 5b6d0a8fcb2c36216d812d8c0bac77262f9fe743
Author: Fintan Bolton <fbolton@...>
Date:   2018-02-09T12:18:06Z

    CAMEL-12246 Replaced file links that were split over two lines (manually)

commit 8b850266f845e42901005cee568c68f73ed58661
Author: Fintan Bolton <fbolton@...>
Date:   2018-02-09T12:38:18Z

    CAMEL-12246 Replaced bad links with plain text, except for the files in camel-core/src/main/docs/eips/, which will be fixed later

----
","09/Feb/18 13:25;githubbot;oscerd commented on issue #2215: CAMEL-12246 Fix broken links
URL: https://github.com/apache/camel/pull/2215#issuecomment-364432933
 
 
   Thanks for the PR :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Feb/18 13:34;githubbot;oscerd commented on issue #2215: CAMEL-12246 Fix broken links
URL: https://github.com/apache/camel/pull/2215#issuecomment-364434924
 
 
   This will work once the docs will be generated, but actually with this the link won't work in Github.
   
   @davsclaus do we have to revert?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Feb/18 13:54;githubbot;fbolton commented on issue #2215: CAMEL-12246 Fix broken links
URL: https://github.com/apache/camel/pull/2215#issuecomment-364439529
 
 
   @oscerd yes, but I have the impression that most links were already broken in GitHub anyway. For example, if you look at the camel-http doc page in the commit *before* this PR was merged:
   https://github.com/apache/camel/blob/ee26d31bcc10fad113fa46cbf0bf4b36f9f0cfbc/components/camel-http/src/main/docs/http-component.adoc
   
   Search for the link to ""Jetty Component"". When you click on it, you get a 404. My impression is that this is fairly typical of the links that were already there.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Feb/18 13:57;githubbot;oscerd commented on issue #2215: CAMEL-12246 Fix broken links
URL: https://github.com/apache/camel/pull/2215#issuecomment-364440428
 
 
   Yeah, true. You're right.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Feb/18 09:42;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2215
",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-undertow not compatible with ahc-version 2.3.0,CAMEL-12247,13137258,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,tcunning,tcunning,08/Feb/18 20:54,09/Feb/18 06:39,13/Mar/19 22:20,09/Feb/18 06:39,,,,,,,,,,,,,,,,2.21.0,,,,,camel-undertow,,,,,,0,,,,"camel-undertow isn't compatible with the new ahc-version (2.3.0) configured here 

[https://github.com/apache/camel/commit/684ef5786838e051cece2f510d9dafabdc310d02]

Getting a lot of compile errors trying to build it - multiple classes WebSocketByteListener, WebSocketTextListener have been removed, the WebSocketListener interface has different methods, etc
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.6.1:testCompile (default-testCompile) on project camel-undertow: Compilation failure: Compilation failure:
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java:[31,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketByteListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java:[32,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java:[123,51] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: class TestClient
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java:[123,74] error: cannot find symbol
[ERROR] symbol:   class WebSocketByteListener
[ERROR] location: class TestClient
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointSendToAllHeaderTest.java:[29,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java:[43,29] error: cannot find symbol
[ERROR] symbol:   class DefaultWebSocketListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteRestartTest.java:[32,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWssRouteTest.java:[47,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesTest.java:[29,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointTest.java:[28,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteTest.java:[33,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.6.1:testCompile (default-testCompile) on project camel-undertow: Compilation failure
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: org.apache.maven.plugin.compiler.CompilationFailureException: Compilation failure
	at org.apache.maven.plugin.compiler.AbstractCompilerMojo.execute(AbstractCompilerMojo.java:1029)
	at org.apache.maven.plugin.compiler.TestCompilerMojo.execute(TestCompilerMojo.java:170)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
	... 20 more
[ERROR] 
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] 
[http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException]
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :camel-undertow",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-09 04:52:09.043,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 09 06:39:02 UTC 2018,,,,,,,0|i3pyun:,9223372036854775807,,,,,,,,,,"09/Feb/18 04:52;githubbot;cunningt opened a new pull request #2214: [CAMEL-12247] camel-undertow not compatible with ahc-version 2.3.0
URL: https://github.com/apache/camel/pull/2214
 
 
   https://issues.apache.org/jira/browse/CAMEL-12247

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Feb/18 04:52;githubbot;GitHub user cunningt opened a pull request:

    https://github.com/apache/camel/pull/2214

    [CAMEL-12247] camel-undertow not compatible with ahc-version 2.3.0

    https://issues.apache.org/jira/browse/CAMEL-12247

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cunningt/camel CAMEL-12247

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2214.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2214
    
----
commit b70dfdceae0abe6070e25a15f02da0d647c4264f
Author: Tom Cunningham <tcunning@...>
Date:   2018-02-09T04:50:45Z

    [CAMEL-12247] camel-undertow not compatible with ahc-version 2.3.0

----
","09/Feb/18 06:37;githubbot;oscerd closed pull request #2214: [CAMEL-12247] camel-undertow not compatible with ahc-version 2.3.0
URL: https://github.com/apache/camel/pull/2214
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java
index b2d5a89a7b5..7a235a1ac64 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java
@@ -28,8 +28,7 @@
 import org.asynchttpclient.AsyncHttpClientConfig;
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketByteListener;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -69,11 +68,11 @@ public void connect() throws InterruptedException, ExecutionException, IOExcepti
     }
 
     public void sendTextMessage(String message) {
-        websocket.sendMessage(message);
+        websocket.sendTextFrame(message);
     }
 
     public void sendBytesMessage(byte[] message) {
-        websocket.sendMessage(message);
+        websocket.sendBinaryFrame(message);
     }
 
     public boolean await(int secs) throws InterruptedException {
@@ -116,11 +115,11 @@ public void reset(int count) {
     }
     
     public void close() throws IOException {
-        websocket.close();
+        websocket.sendCloseFrame();
         client.close();
     }
 
-    private class TestWebSocketListener implements WebSocketTextListener, WebSocketByteListener {
+    private class TestWebSocketListener implements WebSocketListener {
 
         @Override
         public void onOpen(WebSocket websocket) {
@@ -128,8 +127,8 @@ public void onOpen(WebSocket websocket) {
         }
 
         @Override
-        public void onClose(WebSocket websocket) {
-            LOG.info(""[ws] closed"");
+        public void onClose(WebSocket websocket, int code, String reason) {
+            LOG.info(""[ws] closed, code "" + code + "" reason "" + reason);
         }
 
         @Override
@@ -138,15 +137,14 @@ public void onError(Throwable t) {
         }
 
         @Override
-        public void onMessage(byte[] message) {
+        public void onBinaryFrame(byte[] message, boolean finalFragment, int rsv) {
             received.add(message);
             LOG.info(""[ws] received bytes --> "" + Arrays.toString(message));
             latch.countDown();
         }
 
-        
         @Override
-        public void onMessage(String message) {
+        public void onTextFrame(String message, boolean finalFragment, int rsv) {
             received.add(message);
             LOG.info(""[ws] received --> "" + message);
             latch.countDown();
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java
index b1df0a47d01..94a96d0a081 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java
@@ -40,7 +40,7 @@
 import org.apache.camel.converter.IOConverter;
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.DefaultAsyncHttpClient;
-import org.asynchttpclient.ws.DefaultWebSocketListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocket;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.Assert;
@@ -56,13 +56,21 @@ public void wsClientSingleText() throws Exception {
         AsyncHttpClient c = new DefaultAsyncHttpClient();
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/app1"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new DefaultWebSocketListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
 
                     @Override
-                    public void onMessage(String message) {
+                    public void onTextFrame(String message, boolean finalFragment, int rsv) {
                         System.out.println(""got message "" + message);
                     }
 
+                    @Override
+                    public void onOpen(WebSocket webSocket) {
+                    }
+
+                    @Override
+                    public void onClose(WebSocket webSocket, int code, String reason) {
+                    }
+
                     @Override
                     public void onError(Throwable t) {
                         t.printStackTrace();
@@ -73,12 +81,12 @@ public void onError(Throwable t) {
         MockEndpoint result = getMockEndpoint(""mock:result1"");
         result.expectedBodiesReceived(""Test"");
 
-        websocket.sendMessage(""Test"");
+        websocket.sendTextFrame(""Test"");
 
         result.await(60, TimeUnit.SECONDS);
         result.assertIsSatisfied();
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
@@ -87,13 +95,21 @@ public void wsClientSingleTextStreaming() throws Exception {
         AsyncHttpClient c = new DefaultAsyncHttpClient();
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/app2"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new DefaultWebSocketListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
 
                     @Override
-                    public void onMessage(String message) {
+                    public void onTextFrame(String message, boolean finalFragment, int rsv) {
                         System.out.println(""got message "" + message);
                     }
 
+                    @Override
+                    public void onOpen(WebSocket webSocket) {
+                    }
+
+                    @Override
+                    public void onClose(WebSocket webSocket, int code, String reason) {
+                    }
+
                     @Override
                     public void onError(Throwable t) {
                         t.printStackTrace();
@@ -104,7 +120,7 @@ public void onError(Throwable t) {
         MockEndpoint result = getMockEndpoint(""mock:result2"");
         result.expectedMessageCount(1);
 
-        websocket.sendMessage(""Test"");
+        websocket.sendTextFrame(""Test"");
 
         result.await(60, TimeUnit.SECONDS);
         List<Exchange> exchanges = result.getReceivedExchanges();
@@ -114,7 +130,7 @@ public void onError(Throwable t) {
         Reader r = (Reader) body;
         Assert.assertEquals(""Test"", IOConverter.toString(r));
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
@@ -123,7 +139,15 @@ public void wsClientSingleBytes() throws Exception {
         AsyncHttpClient c = new DefaultAsyncHttpClient();
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/app1"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new DefaultWebSocketListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
+
+                    @Override
+                    public void onOpen(WebSocket webSocket) {
+                    }
+
+                    @Override
+                    public void onClose(WebSocket webSocket, int code, String reason) {
+                    }
 
                     @Override
                     public void onError(Throwable t) {
@@ -131,7 +155,7 @@ public void onError(Throwable t) {
                     }
 
                     @Override
-                    public void onMessage(byte[] message) {
+                    public void onBinaryFrame(byte[] message, boolean finalFragment, int rsv) {
                         System.out.println(""got byte[] message"");
                     }
                 }).build()).get();
@@ -140,11 +164,11 @@ public void onMessage(byte[] message) {
         final byte[] testmessage = ""Test"".getBytes(""utf-8"");
         result.expectedBodiesReceived(testmessage);
 
-        websocket.sendMessage(testmessage);
+        websocket.sendBinaryFrame(testmessage);
 
         result.assertIsSatisfied();
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
@@ -153,13 +177,21 @@ public void wsClientSingleBytesStreaming() throws Exception {
         AsyncHttpClient c = new DefaultAsyncHttpClient();
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/app2"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new DefaultWebSocketListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
 
                     @Override
-                    public void onMessage(byte[] message) {
+                    public void onBinaryFrame(byte[] message, boolean finalFragment, int rsv) {
                         System.out.println(""got message "" + message);
                     }
 
+                    @Override
+                    public void onOpen(WebSocket webSocket) {
+                    }
+
+                    @Override
+                    public void onClose(WebSocket webSocket, int code, String reason) {
+                    }
+
                     @Override
                     public void onError(Throwable t) {
                         t.printStackTrace();
@@ -171,7 +203,7 @@ public void onError(Throwable t) {
         result.expectedMessageCount(1);
 
         final byte[] testmessage = ""Test"".getBytes(""utf-8"");
-        websocket.sendMessage(testmessage);
+        websocket.sendBinaryFrame(testmessage);
 
         result.await(60, TimeUnit.SECONDS);
         List<Exchange> exchanges = result.getReceivedExchanges();
@@ -181,7 +213,7 @@ public void onError(Throwable t) {
         InputStream in = (InputStream) body;
         Assert.assertArrayEquals(testmessage, IOConverter.toBytes(in));
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
@@ -190,13 +222,21 @@ public void wsClientMultipleText() throws Exception {
         AsyncHttpClient c1 = new DefaultAsyncHttpClient();
 
         WebSocket websocket1 = c1.prepareGet(""ws://localhost:"" + getPort() + ""/app1"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new DefaultWebSocketListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
 
                     @Override
-                    public void onMessage(String message) {
+                    public void onTextFrame(String message, boolean finalFragment, int rsv) {
                         System.out.println(""got message "" + message);
                     }
 
+                    @Override
+                    public void onOpen(WebSocket webSocket) {
+                    }
+
+                    @Override
+                    public void onClose(WebSocket webSocket, int code, String reason) {
+                    }
+
                     @Override
                     public void onError(Throwable t) {
                         t.printStackTrace();
@@ -206,13 +246,21 @@ public void onError(Throwable t) {
         AsyncHttpClient c2 = new DefaultAsyncHttpClient();
 
         WebSocket websocket2 = c2.prepareGet(""ws://localhost:"" + getPort() + ""/app1"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new DefaultWebSocketListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
 
                     @Override
-                    public void onMessage(String message) {
+                    public void onTextFrame(String message, boolean finalFragment, int rsv) {
                         System.out.println(""got message "" + message);
                     }
 
+                    @Override
+                    public void onOpen(WebSocket webSocket) {
+                    }
+
+                    @Override
+                    public void onClose(WebSocket webSocket, int code, String reason) {
+                    }
+
                     @Override
                     public void onError(Throwable t) {
                         t.printStackTrace();
@@ -223,8 +271,8 @@ public void onError(Throwable t) {
         MockEndpoint result = getMockEndpoint(""mock:result1"");
         result.expectedMessageCount(2);
 
-        websocket1.sendMessage(""Test1"");
-        websocket2.sendMessage(""Test2"");
+        websocket1.sendTextFrame(""Test1"");
+        websocket2.sendTextFrame(""Test2"");
 
         result.await(60, TimeUnit.SECONDS);
         result.assertIsSatisfied();
@@ -234,8 +282,8 @@ public void onError(Throwable t) {
         actual.add(exchanges.get(1).getIn().getBody(String.class));
         Assert.assertEquals(new HashSet<String>(Arrays.asList(""Test1"", ""Test2"")), actual);
 
-        websocket1.close();
-        websocket2.close();
+        websocket1.sendCloseFrame();
+        websocket2.sendCloseFrame();
         c1.close();
         c2.close();
     }
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteRestartTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteRestartTest.java
index 3f45f827fc0..e625c9b2bbc 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteRestartTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteRestartTest.java
@@ -29,7 +29,7 @@
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.Test;
 
@@ -69,9 +69,9 @@ private void doTestWSHttpCall() throws Exception {
         AsyncHttpClient c = new DefaultAsyncHttpClient();
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/shop"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener() {
-                    @Override
-                    public void onMessage(String message) {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
+					@Override
+                    public void onTextFrame(String message, boolean finalFragment, int rsv) {
                         received.add(message);
                         log.info(""received --> "" + message);
                         latch.countDown();
@@ -82,7 +82,7 @@ public void onOpen(WebSocket websocket) {
                     }
 
                     @Override
-                    public void onClose(WebSocket websocket) {
+                    public void onClose(WebSocket websocket, int code, String reason) {
                     }
 
                     @Override
@@ -101,7 +101,7 @@ public void onError(Throwable t) {
         assertTrue(r instanceof String);
         assertEquals(""Beer on stock at Apache Mall"", r);
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
 
     }
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteTest.java
index f089813f6ba..e33896191bc 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteTest.java
@@ -4,6 +4,7 @@
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the ""License""); you may not use this file except in compliance with
+
  * the License.  You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
@@ -30,7 +31,7 @@
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.Test;
 
@@ -47,10 +48,10 @@ public void testWSHttpCall() throws Exception {
         final List<Object> received = Collections.synchronizedList(new ArrayList<Object>());
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/shop"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
 
                     @Override
-                    public void onMessage(String message) {
+                    public void onTextFrame(String message, boolean finalFragment, int rsv) {
                         received.add(message);
                         log.info(""received --> "" + message);
                         latch.countDown();
@@ -61,7 +62,7 @@ public void onOpen(WebSocket websocket) {
                     }
 
                     @Override
-                    public void onClose(WebSocket websocket) {
+                    public void onClose(WebSocket websocket, int code, String reason) {
                     }
 
                     @Override
@@ -80,7 +81,7 @@ public void onError(Throwable t) {
         assertTrue(r instanceof String);
         assertEquals(""Beer on stock at Apache Mall"", r);
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesTest.java
index cf091c89dd3..475fbd341e0 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesTest.java
@@ -26,7 +26,7 @@
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.Test;
 
@@ -42,9 +42,9 @@ public void testWSHttpCallEcho() throws Exception {
             final AsyncHttpClient c = new DefaultAsyncHttpClient();
             final WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/bar"").execute(
                 new WebSocketUpgradeHandler.Builder()
-                    .addWebSocketListener(new WebSocketTextListener() {
+                    .addWebSocketListener(new WebSocketListener() {
                         @Override
-                        public void onMessage(String message) {
+                        public void onTextFrame(String message, boolean finalFragment, int rsv) {
                             received.add(message);
                             log.info(""received --> "" + message);
                             latch.countDown();
@@ -55,7 +55,7 @@ public void onOpen(WebSocket websocket) {
                         }
 
                         @Override
-                        public void onClose(WebSocket websocket) {
+                        public void onClose(WebSocket websocket, int code, String reason) {
                         }
 
                         @Override
@@ -64,13 +64,13 @@ public void onError(Throwable t) {
                         }
                     }).build()).get();
 
-            websocket.sendMessage(""Beer"");
+            websocket.sendTextFrame(""Beer"");
             assertTrue(latch.await(10, TimeUnit.SECONDS));
 
             assertEquals(1, received.size());
             assertEquals(""The bar has Beer"", received.get(0));
 
-            websocket.close();
+            websocket.sendCloseFrame();
             c.close();
         }
 
@@ -82,9 +82,9 @@ public void onError(Throwable t) {
             final AsyncHttpClient c = new DefaultAsyncHttpClient();
             final WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/pub"").execute(
                     new WebSocketUpgradeHandler.Builder()
-                            .addWebSocketListener(new WebSocketTextListener() {
+                            .addWebSocketListener(new WebSocketListener() {
                                 @Override
-                                public void onMessage(String message) {
+                                public void onTextFrame(String message, boolean finalFragment, int rsv) {
                                     received.add(message);
                                     log.info(""received --> "" + message);
                                     latch.countDown();
@@ -96,7 +96,7 @@ public void onOpen(WebSocket websocket) {
                                 }
 
                                 @Override
-                                public void onClose(WebSocket websocket) {
+                                public void onClose(WebSocket websocket, int code, String reason) {
                                 }
 
                                 @Override
@@ -105,13 +105,13 @@ public void onError(Throwable t) {
                                 }
                             }).build()).get();
 
-            websocket.sendMessage(""wine"");
+            websocket.sendTextFrame(""wine"");
             assertTrue(latch.await(10, TimeUnit.SECONDS));
 
             assertEquals(1, received.size());
             assertEquals(""The pub has wine"", received.get(0));
 
-            websocket.close();
+            websocket.sendCloseFrame();
             c.close();
         }
 
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointSendToAllHeaderTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointSendToAllHeaderTest.java
index 3b67a8a878e..0235ad2b69c 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointSendToAllHeaderTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointSendToAllHeaderTest.java
@@ -26,7 +26,7 @@
 import org.apache.camel.component.undertow.UndertowConstants;
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.Test;
 
@@ -44,9 +44,9 @@ public void testWSHttpCallEcho() throws Exception {
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/bar"").execute(
                 new WebSocketUpgradeHandler.Builder()
-                        .addWebSocketListener(new WebSocketTextListener() {
+                        .addWebSocketListener(new WebSocketListener() {
                             @Override
-                            public void onMessage(String message) {
+                            public void onTextFrame(String message, boolean finalFragment, int rsv) {
                                 received.add(message);
                                 log.info(""received --> "" + message);
                                 latch.countDown();
@@ -57,7 +57,7 @@ public void onOpen(WebSocket websocket) {
                             }
 
                             @Override
-                            public void onClose(WebSocket websocket) {
+                            public void onClose(WebSocket websocket, int code, String reason) {
                             }
 
                             @Override
@@ -66,7 +66,7 @@ public void onError(Throwable t) {
                             }
                         }).build()).get();
 
-        websocket.sendMessage(""Beer"");
+        websocket.sendTextFrame(""Beer"");
         assertTrue(latch.await(10, TimeUnit.SECONDS));
 
         assertEquals(2, received.size());
@@ -75,7 +75,7 @@ public void onError(Throwable t) {
         assertTrue(received.contains(""The bar has Beer""));
         assertTrue(received.contains(""Broadcasting to Bar""));
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointTest.java
index f6e1ed0a226..d1a3b29a3ae 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointTest.java
@@ -25,7 +25,7 @@
 import org.apache.camel.component.undertow.BaseUndertowTest;
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.Test;
 
@@ -43,9 +43,9 @@ public void testWSHttpCallEcho() throws Exception {
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/bar"").execute(
                 new WebSocketUpgradeHandler.Builder()
-                        .addWebSocketListener(new WebSocketTextListener() {
+                        .addWebSocketListener(new WebSocketListener() {
                             @Override
-                            public void onMessage(String message) {
+                            public void onTextFrame(String message, boolean finalFragment, int rsv) {
                                 received.add(message);
                                 log.info(""received --> "" + message);
                                 latch.countDown();
@@ -56,7 +56,7 @@ public void onOpen(WebSocket websocket) {
                             }
 
                             @Override
-                            public void onClose(WebSocket websocket) {
+                            public void onClose(WebSocket websocket, int code, String reason) {
                             }
 
                             @Override
@@ -65,7 +65,7 @@ public void onError(Throwable t) {
                             }
                         }).build()).get();
 
-        websocket.sendMessage(""Beer"");
+        websocket.sendTextFrame(""Beer"");
         assertTrue(latch.await(10, TimeUnit.SECONDS));
 
         assertEquals(2, received.size());
@@ -74,7 +74,7 @@ public void onError(Throwable t) {
         assertTrue(received.contains(""The bar has Beer""));
         assertTrue(received.contains(""Broadcasting to Bar""));
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWssRouteTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWssRouteTest.java
index bd4152d6b15..413ae5ff631 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWssRouteTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWssRouteTest.java
@@ -44,7 +44,7 @@
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.DefaultAsyncHttpClientConfig;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -105,7 +105,7 @@ protected AsyncHttpClient createAsyncHttpSSLClient() throws IOException, General
                 .trustManager(InsecureTrustManagerFactory.INSTANCE)
                 .build();
         builder.setSslContext(sslContext);
-        builder.setAcceptAnyCertificate(true);
+        builder.setUseInsecureTrustManager(true);
         config = builder.build();
         c = new DefaultAsyncHttpClient(config);
 
@@ -120,9 +120,9 @@ public void testWSHttpCall() throws Exception {
         AsyncHttpClient c = createAsyncHttpSSLClient();
         WebSocket websocket = c.prepareGet(""wss://localhost:"" + getPort() + ""/test"").execute(
                 new WebSocketUpgradeHandler.Builder()
-                        .addWebSocketListener(new WebSocketTextListener() {
+                        .addWebSocketListener(new WebSocketListener() {
                             @Override
-                            public void onMessage(String message) {
+                            public void onTextFrame(String message, boolean finalFragment, int rsv) {
                                 received.add(message);
                                 log.info(""received --> "" + message);
                                 latch.countDown();
@@ -133,7 +133,7 @@ public void onOpen(WebSocket websocket) {
                             }
 
                             @Override
-                            public void onClose(WebSocket websocket) {
+                            public void onClose(WebSocket websocket, int code, String reason) {
                             }
 
                             @Override
@@ -144,7 +144,7 @@ public void onError(Throwable t) {
 
         getMockEndpoint(""mock:client"").expectedBodiesReceived(""Hello from WS client"");
 
-        websocket.sendMessage(""Hello from WS client"");
+        websocket.sendTextFrame(""Hello from WS client"");
         assertTrue(latch.await(10, TimeUnit.SECONDS));
 
         assertMockEndpointsSatisfied();
@@ -154,7 +154,7 @@ public void onError(Throwable t) {
             assertEquals("">> Welcome on board!"", received.get(i));
         }
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Feb/18 06:38;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2214
","09/Feb/18 06:38;githubbot;oscerd commented on issue #2214: [CAMEL-12247] camel-undertow not compatible with ahc-version 2.3.0
URL: https://github.com/apache/camel/pull/2214#issuecomment-364348819
 
 
   Thanks for the PR :-) Merged!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",09/Feb/18 06:39;ancosen;Thanks Tom for the PR!,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-AWS SWF: Region is not set during client creation,CAMEL-12236,13136802,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,07/Feb/18 09:54,07/Feb/18 10:02,13/Mar/19 22:20,07/Feb/18 10:02,,,,,,,,,,,,,,,,2.21.0,,,,,camel-aws,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-02-07 09:54:56.0,,,,,,,0|i3pw1b:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Print command fails in case of multiple copies,CAMEL-12228,13136223,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,rvanderhallen,rvanderhallen,05/Feb/18 09:24,06/Feb/18 06:50,13/Mar/19 22:20,06/Feb/18 06:50,2.18.1,2.19.0,2.20.0,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-printer,,,,,,0,,,,"When the printer component is configured to print multiple copies, two print jobs are created. The first one runs OK, the second one fails.

{code}
lpr://localhost/printer?copies=2&mediaSize=ISO_A4&flavor=DocFlavor.INPUT_STREAM
{code}

{code}
org.apache.camel.component.printer.PrinterOperations DEBUG Issuing Job 0 to Printer: printer
org.apache.camel.component.printer.PrinterOperations DEBUG Issuing Job 1 to Printer: printer
ERROR ID-47935-1516954952584-8-4
java.io.IOException: error=1 running: '/usr/bin/lpr' '-Pprinter' '-J file.pdf' '-#2' '-o media=A4 sides=one-sided' '/opt/tomcat/temp/javaprint7376295310894617090'
               /usr/bin/lpr: No file in print request.
javax.print.PrintException: java.io.IOException: error=1 running: '/usr/bin/lpr' '-PBriefing' '-J file.pdf' '-#2' '-o media=A4 sides=one-sided' '/opt/tomcat/temp/javaprint7376295310894617090'
               /usr/bin/lpr: No file in print request.
       at sun.print.UnixPrintJob$PrinterSpooler.run(UnixPrintJob.java:1017)
       at java.security.AccessController.doPrivileged(Native Method)
       at sun.print.UnixPrintJob.print(UnixPrintJob.java:608)
       at org.apache.camel.component.printer.PrinterOperations.print(PrinterOperations.java:109)
       at org.apache.camel.component.printer.PrinterOperations.print(PrinterOperations.java:99)
       at org.apache.camel.component.printer.PrinterProducer.print(PrinterProducer.java:57)
       at org.apache.camel.component.printer.PrinterProducer.process(PrinterProducer.java:51)
       at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
       at org.apache.camel.processor.SendDynamicProcessor$1.doInAsyncProducer(SendDynamicProcessor.java:124)
       at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:436)
       at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:119)
       at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
       at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
       at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
       at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
       at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
       at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
       at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
       at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
       at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
       at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
       at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
       at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
       at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
       at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:827)
       at org.apache.camel.processor.MulticastProcessor.access$200(MulticastProcessor.java:85)
       at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:320)
       at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:305)
       at java.util.concurrent.FutureTask.run(FutureTask.java:266)
       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
       at java.lang.Thread.run(Thread.java:745)
{code}

The second job should not be created because the -#2 parameter in the lpr command already schedules the desired number of copies.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-05 17:16:31.237,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 06 06:50:42 UTC 2018,,,,,,,0|i3pshb:,9223372036854775807,,,,,,,,,,"05/Feb/18 17:16;dmvolod;Yes, thanks [~rvanderhallen] for reporting. It's a bug, the [PrinterOperations.print|https://github.com/apache/camel/blob/664130ece8e23e137118e974158282d570d169c8/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterOperations.java#L70] creates printing jobs which are equivalent to number of copies with -# num-copies parameters inside.

But we need to decide which strategy to use for fix: pass num of copies in a single job parameter or schedule a set of jobs as copies count with a num-copies=1. And this issue unable to reproduce without real or virtual PDF printer setup. [~davsclaus] what do you think about this?

 ","05/Feb/18 17:30;rvanderhallen;[~dmvolod] In our use case, we need a single job with x number of copies. This defines a single unit of work and has to appear as one task on the print queue.","05/Feb/18 20:12;davsclaus;I would rather let the printer know the number of copies in one job. That is how I see it would work normally. I wasn't aware of this loop. Also if we loop then we have the ""streaming problem"" where the message body may only be readable once. ","05/Feb/18 20:32;githubbot;dmvolod opened a new pull request #2208: CAMEL-12228: Print command fails in case of multiple copies
URL: https://github.com/apache/camel/pull/2208
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Feb/18 20:32;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2208

    CAMEL-12228: Print command fails in case of multiple copies

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12228

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2208.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2208
    
----
commit 834679911b817fcc7c81e43b521e486a73dee637
Author: Dmitry Volodin <dmvolod@...>
Date:   2018-02-05T20:30:44Z

    CAMEL-12228: Print command fails in case of multiple copies

----
","06/Feb/18 06:50;githubbot;oscerd commented on issue #2208: CAMEL-12228: Print command fails in case of multiple copies
URL: https://github.com/apache/camel/pull/2208#issuecomment-363327696
 
 
   Thanks for the PR. It has been merged on master,2.20.x and 2.19.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Feb/18 06:50;githubbot;oscerd closed pull request #2208: CAMEL-12228: Print command fails in case of multiple copies
URL: https://github.com/apache/camel/pull/2208
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterConfiguration.java b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterConfiguration.java
index 85cbd550535..5e7aecf2914 100644
--- a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterConfiguration.java
+++ b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterConfiguration.java
@@ -28,7 +28,7 @@
 import org.apache.camel.spi.UriParam;
 import org.apache.camel.spi.UriParams;
 import org.apache.camel.spi.UriPath;
-import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.StringHelper;
 import org.apache.camel.util.URISupport;
 
 @UriParams
@@ -85,8 +85,8 @@ public void parseURI(URI uri) throws Exception {
 
         // use path as printer name, but without any leading slashes
         String path = uri.getPath();
-        path = ObjectHelper.removeStartingCharacters(path, '/');
-        path = ObjectHelper.removeStartingCharacters(path, '\\');
+        path = StringHelper.removeStartingCharacters(path, '/');
+        path = StringHelper.removeStartingCharacters(path, '\\');
         setPrintername(path);
 
         Map<String, Object> printSettings = URISupport.parseParameters(uri);
diff --git a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterOperations.java b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterOperations.java
index 20750028627..bed8be27ab7 100644
--- a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterOperations.java
+++ b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterOperations.java
@@ -45,7 +45,7 @@
     private PrintRequestAttributeSet printRequestAttributeSet;
     private Doc doc;
 
-    public PrinterOperations() throws PrintException {        
+    public PrinterOperations() throws PrintException {
         printService = PrintServiceLookup.lookupDefaultPrintService();
         if (printService == null) {
             throw new PrintException(""Printer lookup failure. No default printer set up for this host"");
@@ -63,46 +63,42 @@ public PrinterOperations(PrintService printService, DocFlavor flavor, PrintReque
         this.setPrintRequestAttributeSet(printRequestAttributeSet);
     }
 
-    public void print(Doc doc, int copies, boolean sendToPrinter, String mimeType, String jobName) throws PrintException {
+    public void print(Doc doc, boolean sendToPrinter, String mimeType, String jobName) throws PrintException {
         LOG.trace(""Print Service: "" + this.printService.getName());
-        LOG.trace(""About to print "" + copies + "" copy(s)"");
-        
-        for (int i = 0; i < copies; i++) {
-            if (!sendToPrinter) {
-                LOG.debug(""Print flag is set to false. This job will not be printed until this setting remains in effect.""
-                        + "" Please set the flag to true or remove the setting."");
-
-                File file;
-                if (mimeType.equalsIgnoreCase(""GIF"") || mimeType.equalsIgnoreCase(""RENDERABLE_IMAGE"")) {
-                    file = new File(""./target/TestPrintJobNo"" + i + ""_"" + UUID.randomUUID() + "".gif"");
-                } else if (mimeType.equalsIgnoreCase(""JPEG"")) {
-                    file = new File(""./target/TestPrintJobNo"" + i + ""_"" + UUID.randomUUID() + "".jpeg"");
-                } else if (mimeType.equalsIgnoreCase(""PDF"")) {
-                    file = new File(""./target/TestPrintJobNo"" + i + ""_"" + UUID.randomUUID() + "".pdf"");
-                } else {
-                    file = new File(""./target/TestPrintJobNo"" + i + ""_"" + UUID.randomUUID() + "".txt"");
-                }
-
-                LOG.debug(""Writing print job to file: "" + file.getAbsolutePath());
-                try {
-                    InputStream in = doc.getStreamForBytes();
-                    FileOutputStream fos = new FileOutputStream(file);
-                    IOHelper.copyAndCloseInput(in, fos);
-                    IOHelper.close(fos);
-                } catch (Exception e) {
-                    throw new PrintException(""Error writing Document to the target file "" + file.getAbsolutePath());
-                }    
+
+        if (!sendToPrinter) {
+            LOG.debug(""Print flag is set to false. This job will not be printed until this setting remains in effect."" + "" Please set the flag to true or remove the setting."");
+
+            File file;
+            if (mimeType.equalsIgnoreCase(""GIF"") || mimeType.equalsIgnoreCase(""RENDERABLE_IMAGE"")) {
+                file = new File(""./target/PrintOutput_"" + UUID.randomUUID() + "".gif"");
+            } else if (mimeType.equalsIgnoreCase(""JPEG"")) {
+                file = new File(""./target/PrintOutput_"" + UUID.randomUUID() + "".jpeg"");
+            } else if (mimeType.equalsIgnoreCase(""PDF"")) {
+                file = new File(""./target/PrintOutput_"" + UUID.randomUUID() + "".pdf"");
             } else {
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug(""Issuing Job {} to Printer: {}"", i, this.printService.getName());
-                }
-                print(doc, jobName);
+                file = new File(""./target/PrintOutput_"" + UUID.randomUUID() + "".txt"");
+            }
+
+            LOG.debug(""Writing print job to file: "" + file.getAbsolutePath());
+            try {
+                InputStream in = doc.getStreamForBytes();
+                FileOutputStream fos = new FileOutputStream(file);
+                IOHelper.copyAndCloseInput(in, fos);
+                IOHelper.close(fos);
+            } catch (Exception e) {
+                throw new PrintException(""Error writing Document to the target file "" + file.getAbsolutePath());
             }
+        } else {
+            if (LOG.isDebugEnabled()) {
+                LOG.debug(""Issuing Job to Printer: {}"", this.printService.getName());
+            }
+            print(doc, jobName);
         }
     }
-        
+
     public void print(Doc doc, String jobName) throws PrintException {
-        // we need create a new job for each print 
+        // we need create a new job for each print
         DocPrintJob job = getPrintService().createPrintJob();
         PrintRequestAttributeSet attrs = new HashPrintRequestAttributeSet(printRequestAttributeSet);
         attrs.add(new JobName(jobName, Locale.getDefault()));
@@ -116,7 +112,7 @@ public PrintService getPrintService() {
     public void setPrintService(PrintService printService) {
         this.printService = printService;
     }
-    
+
     public DocFlavor getFlavor() {
         return flavor;
     }
diff --git a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java
index ea8fd99c872..7e69aa7759b 100644
--- a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java
+++ b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java
@@ -53,8 +53,8 @@ public void process(Exchange exchange) throws Exception {
     
     private void print(InputStream body, String jobName) throws PrintException { 
         if (printerOperations.getPrintService().isDocFlavorSupported(printerOperations.getFlavor())) {
-            PrintDocument printDoc = new PrintDocument(body, printerOperations.getFlavor());        
-            printerOperations.print(printDoc, config.getCopies(), config.isSendToPrinter(), config.getMimeType(), jobName); 
+            PrintDocument printDoc = new PrintDocument(body, printerOperations.getFlavor());
+            printerOperations.print(printDoc, config.isSendToPrinter(), config.getMimeType(), jobName); 
         }
     }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Feb/18 06:50;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2208
",,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Dropbox /search and /get are not working,CAMEL-12176,13132780,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,eximius,eximius,22/Jan/18 16:06,02/Feb/18 14:36,13/Mar/19 22:20,02/Feb/18 09:51,2.20.1,,,,,,,,,,,,,,,2.20.3,2.21.0,,,,camel-dropbox,,,,,,0,,,,"First of all, [documentation|https://github.com/apache/camel/blob/master/components/camel-dropbox/src/main/docs/dropbox-component.adoc] states that ""query"" property in ""search"" operation is not mandatory, but:
{code:java}
from(""direct:dropboxSearch"").to(""dropbox://search?remotePath=/&accessToken={{dropbox.key}}""){code}
throws:
{code:java}
java.lang.IllegalArgumentException: Required value for 'query' is null
 at com.dropbox.core.v2.files.SearchArg.<init>(SearchArg.java:59) ~[dropbox-core-sdk-3.0.4.jar:na]
 at com.dropbox.core.v2.files.SearchArg.<init>(SearchArg.java:93) ~[dropbox-core-sdk-3.0.4.jar:na]
 at com.dropbox.core.v2.files.DbxUserFilesRequests.search(DbxUserFilesRequests.java:2416) ~[dropbox-core-sdk-3.0.4.jar:na]
 at org.apache.camel.component.dropbox.core.DropboxAPIFacade.search(DropboxAPIFacade.java:270) ~[camel-dropbox-2.20.1.jar:2.20.1]
 at org.apache.camel.component.dropbox.integration.producer.DropboxSearchProducer.process(DropboxSearchProducer.java:43) ~[camel-dropbox-2.20.1.jar:2.20.1]
 at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) ~[camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148) ~[camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) ~[camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:138) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:370) [camel-core-2.20.1.jar:2.20.1]{code}
On the other hand, when I put query=* like this:
{code:java}
from(""direct:dropboxSearch"").to(""dropbox://search?remotePath=/&query=*&accessToken={{dropbox.key}}""){code}
it throws:
{code:java}
org.apache.camel.component.dropbox.util.DropboxException: / does not exist or can't obtain metadata
 at org.apache.camel.component.dropbox.core.DropboxAPIFacade.search(DropboxAPIFacade.java:283) ~[camel-dropbox-2.20.1.jar:2.20.1]
 at org.apache.camel.component.dropbox.integration.producer.DropboxSearchProducer.process(DropboxSearchProducer.java:43) ~[camel-dropbox-2.20.1.jar:2.20.1]
 at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) ~[camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148) ~[camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) ~[camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:138) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:370) [camel-core-2.20.1.jar:2.20.1]
 
{code}
 

Additionally, the same exception is thrown when I try to download *anything* using:
{code:java}
from(""direct:dropboxGet"")
 .to(""dropbox://get?remotePath=/&accessToken={{dropbox.key}}"");{code}
 

Dropbox:put is working without any problems...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-02 09:51:35.616,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 02 14:36:58 UTC 2018,,,,,,,0|i3p7a7:,9223372036854775807,,,,,,,,,,"02/Feb/18 09:51;davsclaus;Maybe you cannot use the root path for remotePath. I have added the caused exception in the stacktrace in the future so you can see the error from dropbox itself.

The doc has been fixed also.","02/Feb/18 13:41;eximius;[~davsclaus], what I learnt from using pure dropbox API is that indeed, you can not use ""/"", but you can access ""root"" using empty string """".

Therefore I'm using this simple method just before I pass path to Dropbox:
{code:java}
private String cleanPath(final String path) {
   return ""/"".equals(path) ? StringUtils.EMPTY : path; //dropbox workaround
}
{code}
I think it would be much better to use this approach instead of force users to wonder ""how the heck I can access root folder""","02/Feb/18 14:36;davsclaus;Kamil, ah thanks.

If  you want to try you are welcome to provide this code in a github PR

[http://camel.apache.org/contributing]

If not then we can also fix it ourselves, but its a good way to learn how to  contribute to Apache Camel if you want to try.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RabbitConsumer could hang when RabbitMQ connection is lost and autoAck=false.,CAMEL-11996,13116710,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jmongard,jmongard,07/Nov/17 15:33,02/Feb/18 08:53,13/Mar/19 22:20,02/Feb/18 08:53,2.18.0,2.19.0,2.20.0,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-rabbitmq,,,,,,0,,,,"When the connection is lost to a RabbitMQ server and later restored there is the possibility that the RabbitConsumer hangs. The only way around this that I found is to restart my application. 

I have experienced this problem in my testing environment running camel 2.18.3 where my RabbitMQ installation is not stable causing every consumer thread to hang on _lock.acquire()_ .

The problem has been introduced in version 2.18.0 commit 7ee0977c9f5c327a95122f5b80202dc5dd872e40
A possible fix could be to include the statement _if (!channel.isOpen()) return;_ in the try-finally block below it.



{code:title=JUnit test}
package org.apache.camel.component.rabbitmq;

import org.junit.Test;
import org.mockito.Mockito;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;

public class RabbitConsumerTest {
  private RabbitMQConsumer consumer = Mockito.mock(RabbitMQConsumer.class);
  private RabbitMQEndpoint endpoint = Mockito.mock(RabbitMQEndpoint.class);
  private Connection conn = Mockito.mock(Connection.class);
  private Channel channel = Mockito.mock(Channel.class);
     
  @Test(timeout=5000)
  public void testHandleDelivery_ShouldNotHangForeverIfChanelWasClosed() throws Exception {  
    Mockito.when(consumer.getEndpoint()).thenReturn(endpoint);  
    Mockito.when(consumer.getConnection()).thenReturn(conn);
    Mockito.when(conn.createChannel()).thenReturn(channel);
    Mockito.when(channel.isOpen()).thenReturn(false).thenReturn(true);
    
    RabbitConsumer rabbitConsumer = new RabbitConsumer(consumer);
    
    rabbitConsumer.handleDelivery(null, null, null, null);
    rabbitConsumer.handleDelivery(null, null, null, null);
    rabbitConsumer.stop();
  }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11480,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-07 15:45:11.443,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 02 08:46:50 UTC 2018,,,,,,,0|i3mhx3:,9223372036854775807,,,,,,,,,,"07/Nov/17 15:45;davsclaus;You are welcome to provide a fix as github PR if you want to try doing that
http://camel.apache.org/contributing",12/Jan/18 08:43;davsclaus;Can you try with latest code from master or 2.20.1 release as we have had some fixes to this component,02/Feb/18 08:46;davsclaus;Thanks I reproduced the issue with your unit test and have a fix,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XML Signature: '#' missing in ObjectReference attribute of XADES element DataObjectFormat,CAMEL-12181,13133052,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,forsthofer,forsthofer,forsthofer,23/Jan/18 13:32,01/Feb/18 09:02,13/Mar/19 22:20,01/Feb/18 09:02,2.18.5,2.19.4,2.20.1,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-xmlsecurity,,,,,,0,,,,"If you create an XML Signature with a XADES element DataObjectFormat then you get currently an XML which is similar as shown in the following snippet:

<ds:Reference Id=""_1a612e6b-0da6-4695-a8f7-d189a47a7e05"" URI=""#_4dccda23-2c67-487b-b7f2-30188bb089f7"">
...
 </ds:Reference>

...

{color:#000000}<etsi:DataObjectFormat ObjectReference=""_1a612e6b-0da6-4695-a8f7-d189a47a7e05"">{color}

{color:#000000}        …{color}

{color:#000000}</etsi:DataObjectFormat>{color}

 

{color:#000000}The ObjectReference value ""_1a612e6b-0da6-4695-a8f7-d189a47a7e05"" is not a valid URI. The  character '#' is missing at the beginning of the value{color}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-01-31 06:58:02.25,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 01 08:53:40 UTC 2018,,,,,,,0|i3p8yf:,9223372036854775807,,,,,,,,,,"31/Jan/18 06:58;githubbot;GitHub user forsthofer opened a pull request:

    https://github.com/apache/camel/pull/2203

    CAMEL-12181: XML Signature: '#' missing in ObjectReference attribute 

    of XADES element DataObjectFormat

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/forsthofer/camel CAMEL-12181

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2203.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2203
    
----
commit e983854ebae91beabaf6b6c969bc76a53692d14d
Author: Franz Forsthofer <franz.forsthofer@...>
Date:   2018-01-31T06:56:23Z

    CAMEL-12181: XML Signature: '#' missing in ObjectReference attribute of
    XADES element DataObjectFormat

----
","01/Feb/18 08:53;githubbot;davsclaus closed pull request #2203: CAMEL-12181: XML Signature: '#' missing in ObjectReference attribute 
URL: https://github.com/apache/camel/pull/2203
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java b/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java
index 06ef1c7c9e3..da263dd9847 100644
--- a/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java
+++ b/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java
@@ -740,7 +740,7 @@ protected String addDataObjectFormat(Element signedDataObjectProperties, Documen
         Element dataObjectFormat = createElement(""DataObjectFormat"", doc, input);
         signedDataObjectProperties.appendChild(dataObjectFormat);
         String contentReferenceId = ""_"" + UUID.randomUUID().toString();
-        setAttribute(dataObjectFormat, ""ObjectReference"", contentReferenceId);
+        setAttribute(dataObjectFormat, ""ObjectReference"", ""#"" + contentReferenceId);
 
         if (getDataObjectFormatDescription() != null && !getDataObjectFormatDescription().isEmpty()) {
             Element description = createElement(""Description"", doc, input);
diff --git a/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XAdESSignaturePropertiesTest.java b/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XAdESSignaturePropertiesTest.java
index 5a75256c0b0..eb64c1afd3c 100644
--- a/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XAdESSignaturePropertiesTest.java
+++ b/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XAdESSignaturePropertiesTest.java
@@ -223,6 +223,7 @@ public void envelopingAllParameters() throws Exception {
         //DataObjectFormat
         checkXpath(doc, pathToDataObjectProperties + ""etsi:DataObjectFormat/etsi:Description/text()"", prefix2Namespace, ""invoice"");
         checkXpath(doc, pathToDataObjectProperties + ""etsi:DataObjectFormat/etsi:MimeType/text()"", prefix2Namespace, ""text/xml"");
+        checkXpath(doc, pathToDataObjectProperties + ""etsi:DataObjectFormat/@ObjectReference"", prefix2Namespace, ""#"", true);
         checkXpath(doc, pathToDataObjectProperties + ""etsi:DataObjectFormat/etsi:ObjectIdentifier/etsi:Identifier/text()"",
                 prefix2Namespace, ""1.2.840.113549.1.9.16.6.2"");
         checkXpath(doc, pathToDataObjectProperties + ""etsi:DataObjectFormat/etsi:ObjectIdentifier/etsi:Identifier/@Qualifier"",
@@ -834,11 +835,18 @@ private void validateAgainstSchema(Document doc) throws Exception {
 
     static void checkXpath(Document doc, String xpathString, final Map<String, String> prefix2Namespace, String expectedResult)
         throws XPathExpressionException {
+        checkXpath(doc, xpathString, prefix2Namespace, expectedResult, false);
+    }
+        
+   static void checkXpath(Document doc, String xpathString, final Map<String, String> prefix2Namespace, String expectedResult, boolean startsWith)
+            throws XPathExpressionException {
 
         XPathExpression expr = getXpath(xpathString, prefix2Namespace);
         String result = (String) expr.evaluate(doc, XPathConstants.STRING);
         assertNotNull(""The xpath "" + xpathString + "" returned a null value"", result);
-        if (NOT_EMPTY.equals(expectedResult)) {
+        if (startsWith) {
+            assertTrue(result.startsWith(expectedResult));
+        } else if (NOT_EMPTY.equals(expectedResult)) {
             assertTrue(""Not empty result for xpath "" + xpathString + "" expected"", !result.isEmpty());
         } else {
             assertEquals(expectedResult, result);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Feb/18 08:53;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2203
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mock endpoint - message().body().matches().simple - Does not work,CAMEL-12196,13133992,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Jan/18 11:57,26/Jan/18 13:03,13/Mar/19 22:20,26/Jan/18 13:03,2.19.4,2.20.1,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-core,,,,,,0,,,,"Reported on gitter

https://gitter.im/apache/apache-camel?at=5a6604ab5ade18be39aa9ca7",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-01-26 11:57:28.0,,,,,,,0|i3peqn:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ThrowException DSL should support no-arg constructors,CAMEL-12193,13133625,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Jan/18 08:46,25/Jan/18 09:05,13/Mar/19 22:20,25/Jan/18 09:05,,,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-core,,,,,,0,,,,"If you do 

<throwException exceptionType=""java.lang.IllegalArgumentException""/>

Then it because a null exception",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-01-25 08:46:32.0,,,,,,,0|i3pchb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Websocket Karaf feature installs bundles with different version of Jetty (9.4 and 9.3),CAMEL-12157,13131880,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,18/Jan/18 13:20,18/Jan/18 13:31,13/Mar/19 22:20,18/Jan/18 13:31,,,,,,,,,,,,,,,,2.21.0,,,,,karaf,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-01-18 13:20:08.0,,,,,,,0|i3p2av:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failed to invoke camel cxfrs client due to Content-Type header couldn't be retrieved and passed,CAMEL-12149,13131489,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,xldai,xldai,17/Jan/18 07:46,18/Jan/18 09:55,13/Mar/19 22:20,18/Jan/18 09:55,2.19.4,2.20.1,,,,,,,,,,,,,,2.19.5,2.20.2,2.21.0,,,camel-cxfrs,,,,,,0,,,,"As of Camel 2.19.x, async support is added by default in the CxfRsProducer. Considering this simple rsClient:
{code:java}
<camel-cxf:rsClient id=""restClient""
        address=""http://localhost:8040/services/eventlogging/events"" serviceClass=""org.talend.esb.eventlogging.sender.rest.EventLogging""
        loggingFeatureEnabled=""true"">
    <camel-cxf:providers>
        <ref component-id=""jsonProvider"" />
    </camel-cxf:providers>

    <camel-cxf:headers>
         <entry key=""Content-Encoding"" value=""UTF-8"" />
         <entry key=""Content-Type"" value=""application/json"" />
    </camel-cxf:headers>
</camel-cxf:rsClient>

<camel:camelContext>

    <camel:route>
        <camel:from uri=""timer://foo?repeatCount=1"" />

        <camel:process ref=""marshallingPreparationProcessor"" />

        <camel:to uri=""cxfrs://bean://restClient"" />
    </camel:route>

</camel:camelContext>{code}
It works well with the right Content-Type setting in Camel 2.17.x/Camel.2.18.x, but the Content-Type will be wildcard and ""No message body writer has been found ..."" will be thrown when invoke the restClient in Camel 2.19.x/2.20.x.
{code:java}
----------------------------
ID: 1
Address: http://localhost:8040/services/eventlogging/events
Http-Method: POST
Content-Type: */*
Headers: {Content-Encoding=[UTF-8], Content-Type=[*/*], Content-Language=[en_US], Accept=[*/*]}
--------------------------------------
[mel-1) thread #0 - timer://foo] CxfRsProducer                  ERROR Failed request
javax.ws.rs.ProcessingException: No message body writer has been found for class org.talend.esb.eventlogging.sender.rest.EventList
, ContentType: */*
        at org.apache.cxf.jaxrs.client.AbstractClient.reportMessageHandlerProblem(AbstractClient.java:810)
        at org.apache.cxf.jaxrs.client.AbstractClient.writeBody(AbstractClient.java:497)
        at org.apache.cxf.jaxrs.client.WebClient$BodyWriter.doWriteBody(WebClient.java:1178)
        at org.apache.cxf.jaxrs.client.AbstractClient$AbstractBodyWriter.handleMessage(AbstractClient.java:1174)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)
        at org.apache.cxf.jaxrs.client.AbstractClient.doRunInterceptorChain(AbstractClient.java:677)
        at org.apache.cxf.jaxrs.client.WebClient.doInvokeAsync(WebClient.java:952)
        at org.apache.cxf.jaxrs.client.WebClient.doInvokeAsyncCallback(WebClient.java:915)
        at org.apache.cxf.jaxrs.client.WebClient$AsyncInvokerImpl.method(WebClient.java:1440)
        at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.invokeAsyncHttpClient(CxfRsProducer.java:175)
        at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.process(CxfRsProducer.java:116){code}
([https://github.com/xldai/test/tree/master/test-cxfrs] is created for easily reproduce this issue)

A PR is created for fixing this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-01-17 07:49:37.016,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 18 09:55:42 UTC 2018,,,,,,,0|i3ozwv:,9223372036854775807,,,,,,,,,,"17/Jan/18 07:49;githubbot;xldai opened a new pull request #2179: fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved
URL: https://github.com/apache/camel/pull/2179
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Jan/18 07:49;githubbot;GitHub user xldai opened a pull request:

    https://github.com/apache/camel/pull/2179

    fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xldai/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2179.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2179
    
----
commit 7cb52a1c658439ce9b1f46199db005ee3a98efc2
Author: xldai <xldai@...>
Date:   2018-01-17T07:47:46Z

    fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved

----
","17/Jan/18 07:52;githubbot;davsclaus commented on a change in pull request #2179: fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved
URL: https://github.com/apache/camel/pull/2179#discussion_r161976364
 
 

 ##########
 File path: components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
 ##########
 @@ -164,6 +164,12 @@ protected void invokeAsyncHttpClient(Exchange exchange, final AsyncCallback call
         setupClientMatrix(client, exchange);
         setupClientQueryAndHeaders(client, exchange);
 
+        // ensure the CONTENT_TYPE header can be retrieved
 
 Review comment:
   We have the `null` on the other side as out standard with the Apache Camel code. Do you mind flipping them around.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Jan/18 07:57;githubbot;oscerd commented on issue #2179: fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved
URL: https://github.com/apache/camel/pull/2179#issuecomment-358225657
 
 
   Can't we use ObjectHelper?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Jan/18 07:59;githubbot;davsclaus commented on issue #2179: fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved
URL: https://github.com/apache/camel/pull/2179#issuecomment-358226089
 
 
   Yeah ObjectHelper.isEmpty would also check for an empty string, however not sure if you would have a Content-Type header that would be a `""""`. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Jan/18 02:20;githubbot;xldai commented on issue #2179: fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved
URL: https://github.com/apache/camel/pull/2179#issuecomment-358516398
 
 
   Claus, I made minor changes by using ObjectHelper, is that OK? or other concerns you may have?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Jan/18 09:52;githubbot;davsclaus closed pull request #2179: fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved
URL: https://github.com/apache/camel/pull/2179
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
index 50aece0fd8c..4a1d3d333ca 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
@@ -164,6 +164,12 @@ protected void invokeAsyncHttpClient(Exchange exchange, final AsyncCallback call
         setupClientMatrix(client, exchange);
         setupClientQueryAndHeaders(client, exchange);
 
+        // ensure the CONTENT_TYPE header can be retrieved
+        if (ObjectHelper.isEmpty(inMessage.getHeader(Exchange.CONTENT_TYPE, String.class)) &&
+                ObjectHelper.isNotEmpty(client.getHeaders().get(Exchange.CONTENT_TYPE))) {
+            inMessage.setHeader(Exchange.CONTENT_TYPE, client.getHeaders().get(Exchange.CONTENT_TYPE).get(0));
+        }
+
         //Build message entity
         Entity<Object> entity = binding.bindCamelMessageToRequestEntity(body, inMessage, exchange);
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Jan/18 09:52;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2179
",18/Jan/18 09:55;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,
spring-boot: two camel contexts created when using xml configuration,CAMEL-12134,13129821,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,10/Jan/18 11:14,11/Jan/18 07:35,13/Mar/19 22:20,10/Jan/18 13:21,2.20.0,2.20.1,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-spring-boot,,,,,,0,,,,"When running the camel-example-spring-boot-xml, or any spring-boot camel application using xml route definition, camel seems to create 2 contexts.

It seems to happen only when using spring xml routes.

The second one has no routes. Camel fails to register it to jmx and adds a ""-1"" to its name.

{code}
a.c.m.DefaultManagementLifecycleStrategy : This CamelContext(SampleCamel) will be registered using the name: SampleCamel-1 due to clash with an existing name already registered in MBeanServer.
{code}

The relevant parts of the trace:

{code}
2018-01-10 12:00:26.538  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.21.0-SNAPSHOT (CamelContext: SampleCamel) is starting
2018-01-10 12:00:26.539  INFO 11245 --- [           main] o.a.c.m.ManagedManagementStrategy        : JMX is enabled
2018-01-10 12:00:26.700  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2018-01-10 12:00:26.740  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: hello started and consuming from: timer://hello?period=2000
2018-01-10 12:00:26.742  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Total 1 routes, of which 1 are started
2018-01-10 12:00:26.743  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.21.0-SNAPSHOT (CamelContext: SampleCamel) started in 0.204 seconds
2018-01-10 12:00:26.757  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.21.0-SNAPSHOT (CamelContext: SampleCamel) is starting
2018-01-10 12:00:26.757  INFO 11245 --- [           main] o.a.c.m.ManagedManagementStrategy        : JMX is enabled
2018-01-10 12:00:26.757  WARN 11245 --- [           main] a.c.m.DefaultManagementLifecycleStrategy : This CamelContext(SampleCamel) will be registered using the name: SampleCamel-1 due to clash with an existing name already registered in MBeanServer.
2018-01-10 12:00:26.762  INFO 11245 --- [           main] o.a.c.i.converter.DefaultTypeConverter   : Type converters loaded (core: 193, classpath: 1)
2018-01-10 12:00:26.770  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2018-01-10 12:00:26.770  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Total 0 routes, of which 0 are started
2018-01-10 12:00:26.770  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.21.0-SNAPSHOT (CamelContext: SampleCamel) started in 0.013 seconds
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-01-10 14:07:06.435,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 11 07:35:12 UTC 2018,,,,,,,0|i3oqh3:,9223372036854775807,,,,,,,,,,"10/Jan/18 12:57;nferraro;This was probably introduced with CAMEL-11752, in https://github.com/apache/camel/blob/4f65a942465d82acea52a5012c00bec81d1183e6/components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java#L452-L463.

We call the configurer from within the context creation, but if the configurer finds CamelContextAware beans in the registry, the CamelBeanPostProcessor looks up the CamelContext from the registry again, resulting in another creation.

Splitting creation from initialization may solve the issue.","10/Jan/18 14:07;kalusn;We experienced the same issue at our organization, and I came here to make the issue until I found out someone had already created it. Nice!

The issue showed itself to us when injecting a ProducerTemplate in a bean after injecting a CamelContext. The ProducerTemplate would then have a reference to the wrong (contextName-1) camelContext. Ironically, making sure that the CamelContext is injected *after* the ProducerTemplate solves the issue when working with Camel 2.20.1.

I'll try out your patch and ensure it solves the issue.","10/Jan/18 14:38;kalusn;I can confirm that the patch solves the problem with a ProducerTemplate having a ""dead"" CamelContext attached.",11/Jan/18 07:35;nferraro;Thank you [~kalusn]! Version 2.20.2 is expected to be released shortly (next week most probably).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reconnect doesn't work if camel is started with rabbit broker initially inaccessible and automaticRecoveryEnabled=true or not set,CAMEL-12111,13128065,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jisikoff,jisikoff,02/Jan/18 20:09,06/Jan/18 12:03,13/Mar/19 22:20,06/Jan/18 12:03,2.20.1,,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-rabbitmq,,,,,,0,,,,"Starting a camel rabbit consumer with the rabbitmq broker down and then bringing the broker up used to work before 2.20.1 with automaticRecoveryEnabled=true.  

The logic added in line 298 of the RabbitConsumer and line 301 now only will recover in the case if automaticRecoveryEnabled=false by allowing it through to line 303 and opening a connection for the FIRST TIME.  

 In addition line 298 null pointers on '&& null' if automaticRecoveryEnabled wasn't specified at all.

https://github.com/apache/camel/blob/bad9ed4bb2ce1e258039d96ac80c71a746b0520d/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitConsumer.java#L298

As of now you can not have automaticRecoveryEnabled either not set or true and handle have camel work in the startup with broker down and then up use case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-01-03 11:32:48.46,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sat Jan 06 12:03:55 UTC 2018,,,,,,,0|i3ofpb:,9223372036854775807,,,,,,,,,,"03/Jan/18 11:32;davsclaus;You are welcome to work on a fix/patch, such as a github PR
http://camel.apache.org/contributing","04/Jan/18 15:28;githubbot;jisikoff opened a new pull request #2164: CAMEL-12111: Fix reconnect if broker is down on startup.  Also fix so…
URL: https://github.com/apache/camel/pull/2164
 
 
   … channels share connections again.  Also fix consumers getting started twice on reconnect at startup.  Also fix null pointers if automaticRecoveryEnabled is not set on the endpoint.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Jan/18 15:28;githubbot;GitHub user jisikoff opened a pull request:

    https://github.com/apache/camel/pull/2164

    CAMEL-12111: Fix reconnect if broker is down on startup.  Also fix so…

    … channels share connections again.  Also fix consumers getting started twice on reconnect at startup.  Also fix null pointers if automaticRecoveryEnabled is not set on the endpoint.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cinch-financial/camel feature/CAMEL-12111-reconnect-on-start

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2164.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2164
    
----
commit 17216a11c6996992a64e3f254c48a5e82b50c12d
Author: Jeremy Isikoff <jisikoff@...>
Date:   2018-01-04T14:42:37Z

    CAMEL-12111: Fix reconnect if broker is down on startup.  Also fix so channels share connections again.  Also fix consumers getting started twice on reconnect at startup.  Also fix null pointers if automaticRecoveryEnabled is not set on the endpoint.

----
","06/Jan/18 12:02;githubbot;davsclaus closed pull request #2164: CAMEL-12111: Fix reconnect if broker is down on startup.  Also fix so…
URL: https://github.com/apache/camel/pull/2164
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitConsumer.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitConsumer.java
index e96367c6e2f..ffef62d003c 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitConsumer.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitConsumer.java
@@ -295,10 +295,10 @@ public void reconnect() throws IOException, TimeoutException {
         if (isChannelOpen()) {
             // The connection is good, so nothing to do
             return;
-        } else if (!isChannelOpen() && this.consumer.getEndpoint().getAutomaticRecoveryEnabled()) {
+        } else if (channel != null && !channel.isOpen() && isAutomaticRecoveryEnabled()) {
             // Still need to wait for channel to re-open
             throw new IOException(""Waiting for channel to re-open."");
-        } else if (!this.consumer.getEndpoint().getAutomaticRecoveryEnabled()) {
+        } else if (channel == null || !isAutomaticRecoveryEnabled()) {
             log.info(""Attempting to open a new rabbitMQ channel"");
             Connection conn = consumer.getConnection();
             channel = openChannel(conn);
@@ -307,6 +307,11 @@ public void reconnect() throws IOException, TimeoutException {
         }
     }
 
+    private boolean isAutomaticRecoveryEnabled() {
+        return this.consumer.getEndpoint().getAutomaticRecoveryEnabled() != null
+            && this.consumer.getEndpoint().getAutomaticRecoveryEnabled();
+    }
+
     private boolean isChannelOpen() {
         return channel != null && channel.isOpen();
     }
diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConsumer.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConsumer.java
index 95a660925ee..c0aaa6d5d03 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConsumer.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConsumer.java
@@ -74,7 +74,7 @@ protected synchronized Connection getConnection() throws IOException, TimeoutExc
         if (this.conn == null) {
             openConnection();
             return this.conn;
-        } else if (!this.conn.isOpen() && this.endpoint.getAutomaticRecoveryEnabled()) {
+        } else if (this.conn.isOpen() || (!this.conn.isOpen() && isAutomaticRecoveryEnabled())) {
             return this.conn;
         } else {
             log.debug(""The existing connection is closed"");
@@ -83,16 +83,24 @@ protected synchronized Connection getConnection() throws IOException, TimeoutExc
         }
     }
 
-
+    private boolean isAutomaticRecoveryEnabled() {
+        return this.endpoint.getAutomaticRecoveryEnabled() != null
+            && this.endpoint.getAutomaticRecoveryEnabled();
+    }
     /**
-     * Add a consumer thread for given channel
+     * Create the consumers but don't start yet
      */
-    private void startConsumers() throws IOException {
-
+    private void createConsumers() throws IOException {
         // Create consumers but don't start yet
         for (int i = 0; i < endpoint.getConcurrentConsumers(); i++) {
             createConsumer();
         }
+    }
+
+    /**
+     * Start the consumers (already created)
+     */
+    private void startConsumers() {
 
         // Try starting consumers (which will fail if RabbitMQ can't connect)
         try {
@@ -160,6 +168,7 @@ protected void doResume() throws Exception {
     protected void doStart() throws Exception {
         executor = endpoint.createExecutor();
         log.debug(""Using executor {}"", executor);
+        createConsumers();
         startConsumers();
     }
 
@@ -211,9 +220,6 @@ public Void call() throws Exception {
                     Thread.sleep(connectionRetryInterval);
                 }
             }
-            if (!connectionFailed) {
-                startConsumers();
-            }
             stop();
             return null;
         }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Jan/18 12:02;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2164
",06/Jan/18 12:03;davsclaus;Thanks for reporting and the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,
ErrorHandler is closed after failure in RoutingSlip ,CAMEL-12120,13128293,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sycyhy,sycyhy,03/Jan/18 19:04,05/Jan/18 11:41,13/Mar/19 22:20,04/Jan/18 18:52,2.18.0,2.18.1,2.18.2,2.18.3,2.18.4,2.18.5,2.19.0,2.19.1,2.19.2,2.19.3,2.19.4,2.19.5,2.20.0,2.20.1,2.20.2,2.21.0,,,,,camel-core,,,,,,0,,,,"It seems that if further down the line after {{RoutingSlip}} or {{DynamicRouter}} there is a failure in a Route {{ErrorHandler}} always will be closed. 

This results in a situation where if similar route defined in the same place will fail - there won't be any errorHandler opened and we will get 

{{New exception occurred during processing by the DeadLetterChannel due SendProcessor has not been started: sendTo(mock://result)}}

Test case which shows the problems in attachment.
 
Problem started occurring after release 2.18.0 - responsible commit {{7c4dd0b4f6ecd4840e4ccdbf1d7c28f2e8cb5691}} 

I was looking for some workarounds/solutions but nothing comes to mind yet so any ideas are welcomed :)

",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10048,,,,,03/Jan/18 18:46;sycyhy;TestCase.java;https://issues.apache.org/jira/secure/attachment/12904444/TestCase.java,,,,1.0,,,,,,,,,,,,,,,,,,,2018-01-04 18:52:47.572,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 05 11:41:14 UTC 2018,,,,,,,0|i3oh3j:,9223372036854775807,,,,,,,,,,"04/Jan/18 18:52;davsclaus;Thanks for reporting and the test-case.

This took a bit longer to fix but we now have a better solution. As its a bit of code change we will keep this change for master branch only.","05/Jan/18 08:59;sycyhy;No problem  [~davsclaus]  and thanks for such a fast fix.

So I'm assuming it's only gonna be in release 2.21.0 because it's only on master. It is expected for Q1 2018 as far I can see :) - do you guys have any specific month in mind?:)
",05/Jan/18 11:41;davsclaus;Not yet its to early to tell. When we get closer to a release its discussed on the Camel @dev mailing list.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Combination of path param and query param does not work,CAMEL-12097,13126285,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,cipous,cipous,20/Dec/17 13:14,03/Jan/18 13:41,13/Mar/19 22:20,03/Jan/18 13:36,2.20.1,,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-restlet,,,,,,0,,,,"If in route are used both path parameter and query parameter:

{code:java}
restlet:{{data.access.url}}/v2/users/{userId}?projection=full
{code}

then because of commit :
https://github.com/apache/camel/commit/4da8d0ad4472e69a5728f67fa121b3b4150fdc33#diff-470ee30498bbf9ea5b6ea223650c0e1c

on lines 216-219 are escaped ""{"" ""}"" so userId in my example is never replaced.

Escaping is done in URISupport.appendParametersToURI on line:

{code:java}
URI uri = new URI(normalizeUri(originalURI));
{code}


There is workaround to use Exchange.HTTP_QUERY header for query parameter and path must not contain query parameters.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-20 13:36:30.626,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 03 13:41:03 UTC 2018,,,,,,,0|i3o4qn:,9223372036854775807,,,,,,,,,,20/Dec/17 13:17;cipous;I guess that newly added lines 216-219 can be placed after path parameters are processed... ,"20/Dec/17 13:36;davsclaus;You are welcome to provide a patch file or as github PR
http://camel.apache.org/contributing",28/Dec/17 11:29;abbasdgr8;I would like to take this up as and fix this via a Pull Request. Shall I assign this to myself?,"28/Dec/17 12:03;davsclaus;Abbas, its fine to comment first.

When users have contributed a number of work first, then we can admin in JIRA to make users self-assign tickets.","02/Jan/18 15:14;githubbot;onders86 opened a new pull request #2158: CAMEL-12097- handle if both path and query params set and supress wit…
URL: https://github.com/apache/camel/pull/2158
 
 
   …h the value in the path

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Jan/18 15:14;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/2158

    CAMEL-12097- handle if both path and query params set and supress wit…

    …h the value in the path

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-12097

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2158.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2158
    
----
commit 0464c5e640c75c9a3bb6abe023e3d907856fde89
Author: onders86 <ondersezgin@...>
Date:   2018-01-02T15:12:44Z

    CAMEL-12097- handle if both path and query params set and supress with the value in the path

----
","03/Jan/18 11:40;githubbot;onders86 closed pull request #2158: CAMEL-12097- handle if both path and query params set and supress wit…
URL: https://github.com/apache/camel/pull/2158
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java b/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java
index 47c02936131..b4c3b2549bf 100644
--- a/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java
+++ b/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java
@@ -211,10 +211,6 @@ private static String buildUri(RestletEndpoint endpoint, Exchange exchange) thro
         if (uri == null) {
             uri = endpoint.getProtocol() + ""://"" + endpoint.getHost() + "":"" + endpoint.getPort() + endpoint.getUriPattern();
         }
-        // include any query parameters if needed
-        if (endpoint.getQueryParameters() != null) {
-            uri = URISupport.appendParametersToURI(uri, endpoint.getQueryParameters());
-        }
 
         // substitute { } placeholders in uri and use mandatory headers
         LOG.trace(""Substituting '{value}' placeholders in uri: {}"", uri);
@@ -235,6 +231,11 @@ private static String buildUri(RestletEndpoint endpoint, Exchange exchange) thro
             // we replaced uri so reset and go again
             matcher.reset(uri);
         }
+        
+        // include any query parameters if needed
+        if (endpoint.getQueryParameters() != null) {
+            uri = URISupport.appendParametersToURI(uri, endpoint.getQueryParameters());
+        }
 
         // rest producer may provide an override query string to be used which we should discard if using (hence the remove)
         String query = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY);
diff --git a/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerTest.java b/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerTest.java
index 34ccd059ad2..f2e68282831 100644
--- a/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerTest.java
+++ b/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerTest.java
@@ -32,6 +32,12 @@ public void testRestletProducerGet() throws Exception {
         assertEquals(""123;Donald Duck"", out);
     }
     
+    @Test
+    public void testRestletProducerGetWithPathQueryParams() throws Exception {
+        String out = template.requestBodyAndHeader(""direct:startWithPathQueryParams"", null, ""id"", 123, String.class);
+        assertEquals(""1235;Donald Duck"", out);
+    }
+    
     @Test
     public void testRestletProducerDelete() throws Exception {
         String out = template.requestBodyAndHeader(""direct:delete"", null, ""id"", 123, String.class);
@@ -45,6 +51,8 @@ protected RouteBuilder createRouteBuilder() throws Exception {
             public void configure() throws Exception {
                 from(""direct:start"").to(""restlet:http://localhost:"" + portNum + ""/users/{id}/basic"").to(""log:reply"");
                 
+                from(""direct:startWithPathQueryParams"").to(""restlet:http://localhost:"" + portNum + ""/users/{id}/basic?id=1235"").to(""log:reply"");
+                
                 from(""direct:delete"").to(""restlet:http://localhost:"" + portNum + ""/users/{id}/basic?restletMethod=DELETE"");
 
                 from(""restlet:http://localhost:"" + portNum + ""/users/{id}/basic?restletMethods=GET,DELETE"")


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Jan/18 11:40;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/2158
","03/Jan/18 13:41;onders;Thanks [~davsclaus]. I am bugged all day, could not log jira. Thanks for doing it.",,,,,,,,,,,,,,,,,,,,,,,,
camel-olingo2 - Missing encoding for query params,CAMEL-12057,13122266,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,_przem,_przem,01/Dec/17 20:27,03/Jan/18 11:34,13/Mar/19 22:20,03/Jan/18 11:34,2.20.1,,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-olingo2,,,,,,0,,,,"Hi guys,
i've a problem with making camel-olingo2 to work with $filter query parameter
Here is my RouteBuilder situation

{code:java}
rest(""/olingo2"")
                .get(""tickets"").to(""direct:olingo2/tickets"");

        from(""direct:olingo2/tickets"")
                .setHeader(""CamelOlingo2.$filter"", simple(""ReporterEmail eq 'user@company.com'""))
                .setHeader(""CamelOlingo2.$select"", simple(""ID,Name""))
                .to(""olingo2://read/ServiceRequestCollection"")
{code}


I get an exception while parsing endpoint URI (a space in uri)

{{URISyntaxException: Illegal character in query at index 107: https://myXXXXXX.crm.ondemand.com/sap/c4c/odata/v1/c4codata/ServiceRequestCollection/?$filter=ReporterEmail eq 'user@company.com'&$select=ID,Name
}}

It comes basically from Olingo2AppImpl:224
I tried with
{{ .setHeader(""CamelOlingo2.$filter"", simple(""ReporterEmail%20eq%20%27user@company.com%27""))
}}but then it fails in Olingo2AppImpl:222 while parsing filter expression.

As a conclusion, at Olingo2AppImpl:224 queryParams should be encoded.

here is my patch https://github.com/przem/camel/commit/e239645cadd7130b27cb85bd713cb71140872865",spring-boot,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12084,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-01 20:33:15.927,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 26 08:35:34 UTC 2017,,,Patch Available,,,,0|i3ng3z:,9223372036854775807,,,,,,,,,,"01/Dec/17 20:33;githubbot;przem opened a new pull request #2126: CAMEL-12057 Fixed missing encoding for query params
URL: https://github.com/apache/camel/pull/2126
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Dec/17 20:33;githubbot;GitHub user przem opened a pull request:

    https://github.com/apache/camel/pull/2126

    CAMEL-12057 Fixed missing encoding for query params

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/przem/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2126.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2126
    
----
commit e239645cadd7130b27cb85bd713cb71140872865
Author: Przemek Kubicki <przemek.kubicki@gmail.com>
Date:   2017-12-01T20:14:35Z

    Fixed missing encoding for query params

----
",03/Dec/17 21:06;dmvolod;Need to be fixed in camel-olingo4 also,"04/Dec/17 08:08;githubbot;oscerd commented on issue #2126: CAMEL-12057 Fixed missing encoding of query params
URL: https://github.com/apache/camel/pull/2126#issuecomment-348888455
 
 
   Thanks the PR has been merged. Can you do the same also on camel-olingo4 component? Thanks.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Dec/17 08:09;githubbot;oscerd closed pull request #2126: CAMEL-12057 Fixed missing encoding of query params
URL: https://github.com/apache/camel/pull/2126
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-olingo2/camel-olingo2-api/src/main/java/org/apache/camel/component/olingo2/api/impl/Olingo2AppImpl.java b/components/camel-olingo2/camel-olingo2-api/src/main/java/org/apache/camel/component/olingo2/api/impl/Olingo2AppImpl.java
index f4423b75f0a..f1198a0a26d 100644
--- a/components/camel-olingo2/camel-olingo2-api/src/main/java/org/apache/camel/component/olingo2/api/impl/Olingo2AppImpl.java
+++ b/components/camel-olingo2/camel-olingo2-api/src/main/java/org/apache/camel/component/olingo2/api/impl/Olingo2AppImpl.java
@@ -23,6 +23,7 @@
 import java.io.UnsupportedEncodingException;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.net.URLEncoder;
 import java.nio.charset.Charset;
 import java.nio.charset.UnsupportedCharsetException;
 import java.util.ArrayList;
@@ -221,7 +222,7 @@ public void close() {
 
         final UriInfoWithType uriInfo = parseUri(edm, resourcePath, queryParams);
 
-        execute(new HttpGet(createUri(resourcePath, queryParams)), getResourceContentType(uriInfo),
+        execute(new HttpGet(createUri(resourcePath, encodeQueryParams(queryParams))), getResourceContentType(uriInfo),
             endpointHttpHeaders, new AbstractFutureCallback<T>(responseHandler) {
 
                 @Override
@@ -242,7 +243,7 @@ public void uread(final Edm edm, final String resourcePath, final Map<String, St
 
         final UriInfoWithType uriInfo = parseUri(edm, resourcePath, queryParams);
 
-        execute(new HttpGet(createUri(resourcePath, queryParams)), getResourceContentType(uriInfo),
+        execute(new HttpGet(createUri(resourcePath, encodeQueryParams(queryParams))), getResourceContentType(uriInfo),
             endpointHttpHeaders, new AbstractFutureCallback<InputStream>(responseHandler) {
 
                 @Override
@@ -255,6 +256,17 @@ public void onCompleted(HttpResponse result) throws IOException {
             });
     }
 
+    private Map<String, String> encodeQueryParams(Map<String, String> queryParams) {
+        Map<String, String> encodedQueryParams = queryParams;
+        if (queryParams != null) {
+            encodedQueryParams = new HashMap<String, String>(queryParams.size());
+            for (Map.Entry<String, String> entry : queryParams.entrySet()) {
+                encodedQueryParams.put(entry.getKey(), URLEncoder.encode(entry.getValue()));
+            }
+        }
+        return encodedQueryParams;
+    }
+
     private ContentType getResourceContentType(UriInfoWithType uriInfo) {
         ContentType resourceContentType;
         switch (uriInfo.getUriType()) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Dec/17 08:09;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2126
",04/Dec/17 08:09;ancosen;Thanks the PR has been merged. Can you do the same also on camel-olingo4 component? Thanks.,"26/Dec/17 08:35;dmvolod;Sorry, camel-olingo4 doesn't requires this fix. I've added test case in  CAMEL-12084",,,,,,,,,,,,,,,,,,,,,,,,,
Camel unable to shutdown gracefully because Netty4 consumer keep receiving and adding inflight exchanges,CAMEL-12103,13127355,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,yihtserns,yihtserns,27/Dec/17 09:36,03/Jan/18 08:57,13/Mar/19 22:20,03/Jan/18 08:57,2.15.2,,,,,,,,,,,,,,,2.21.0,,,,,camel-netty4,,,,,,0,,,,"I'm using this URI: {{netty4:tcp://localhost:8888?sync=false&textline=true}}

And I have this issue when initiating Camel shutdown using {{DefaultShutdownStrategy}}:
# Camel suspends {{NettyConsumer}} ({{SingleTCPNettyServerBootstrapFactory}}), which only stops the ""main"" Netty channel, but _not_ the other Netty channels (i.e. socket connections)
# Camel waits for routes to be empty of inflight & pending exchanges
# (!) Those other Netty channels kept receiving data, which are turned into new exchanges
** As long as the TCP clients keep sending data into the channels + exchanges completing slower than send rate, routes will _never_ be empty of inflight & pending exchanges
# Forced shutdown after 5 minutes (timed out)

h2. To simulate the issue
# Run the attached [^tcp-server.camel] Groovy script: {{groovy tcp-server.camel}}
# After that has started, run the attached [^tcp-client.groovy]: {{groovy tcp-client.groovy}}
# After tcp-client starts sending data over, stop the tcp-server (CTRL+C in Windows)
# You should see something like this:
{panel:title=cmd}
INFO  - Apache Camel 2.15.2 (CamelContext: camel-1) started in 1.015 seconds
INFO  - Hey 0
INFO  - Hey 1
INFO  - Hey 2
INFO  - Hey 3
INFO  - Apache Camel 2.15.2 (CamelContext: camel-1) is shutting down
INFO  - Starting to graceful shutdown 1 routes (timeout 300 seconds)
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 300 seconds.
INFO  - Hey 4
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 299 seconds.
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 298 seconds.
INFO  - Hey 5
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 297 seconds.
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 296 seconds.
INFO  - Hey 6
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 295 seconds.
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 294 seconds.
...
{panel}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27/Dec/17 09:32;yihtserns;tcp-client.groovy;https://issues.apache.org/jira/secure/attachment/12903780/tcp-client.groovy,27/Dec/17 09:32;yihtserns;tcp-server.camel;https://issues.apache.org/jira/secure/attachment/12903781/tcp-server.camel,,,2.0,,,,,,,,,,,,,,,,,,,2018-01-03 08:50:25.298,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 03 08:50:25 UTC 2018,,,,,,,0|i3obbr:,9223372036854775807,,,,,,,,,,"27/Dec/17 09:47;yihtserns;I just [read|http://camel.apache.org/support.html] that I'm not supposed to create a JIRA ticket directly.

Sorry for the faux pas. :/

","03/Jan/18 08:50;davsclaus;Okay reproduced this with your sample code, thanks.

And have a fix

The client is sending:
{code}
davsclaus:/Users/davsclaus/Downloads/$ groovy tcp-client.groovy
Sent 0
Sent 1
Sent 2
Sent 3
Sent 4
Sent 5
Caught: java.net.SocketException: Broken pipe (Write failed)
java.net.SocketException: Broken pipe (Write failed)
	at tcp-client$_run_closure1_closure2.doCall(tcp-client.groovy:6)
	at tcp-client$_run_closure1.doCall(tcp-client.groovy:2)
	at tcp-client.run(tcp-client.groovy:1)
{code}

And the server is being stopped:
{code}
INFO  - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-1) is starting
INFO  - JMX is enabled
INFO  - Type converters loaded (core: 193, classpath: 11)
INFO  - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
INFO  - ServerBootstrap binding to localhost:8888
INFO  - Netty consumer bound to: localhost:8888
INFO  - Route: route1 started and consuming from: tcp://localhost:8888
INFO  - Total 1 routes, of which 1 are started
INFO  - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-1) started in 0.573 seconds
INFO  - Hey 0
INFO  - Hey 1
INFO  - Hey 2
^CINFO  - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-1) is shutting down
INFO  - Starting to graceful shutdown 1 routes (timeout 300 seconds)
INFO  - ServerBootstrap unbinding from localhost:8888
INFO  - Netty consumer unbound from: localhost:8888
INFO  - Route: route1 shutdown complete, was consuming from: tcp://localhost:8888
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 300 seconds. Inflights per route: [route1 = 1]
INFO  - There are 1 inflight exchanges:
	InflightExchange: [exchangeId=ID-davsclaus-pro-local-1514969347001-0-3, fromRouteId=route1, routeId=route1, nodeId=process1, elapsed=0, duration=345]
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 299 seconds. Inflights per route: [route1 = 1]
INFO  - There are 1 inflight exchanges:
	InflightExchange: [exchangeId=ID-davsclaus-pro-local-1514969347001-0-3, fromRouteId=route1, routeId=route1, nodeId=process1, elapsed=0, duration=1351]
INFO  - Graceful shutdown of 1 routes completed in 2 seconds
INFO  - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-1) uptime 11.935 seconds
INFO  - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-1) is shutdown in 2.058 seconds
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel hystrix does not handle exceptions properly,CAMEL-11279,13071809,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,anton_k11,anton_k11,14/May/17 13:15,21/Dec/17 16:44,13/Mar/19 22:20,16/May/17 10:50,2.18.2,2.18.3,2.19.0,,,,,,,,,,,,,2.18.4,2.19.1,2.20.0,,,camel-hystrix,,,,,,0,,,,"Exceptions in the route executed by Hystrix are not propagated to Hystrix itself and main features such as ""circuit open"" are not available, when errors pack up. The scenario was working with fallbackEnabled=""true"" in 2.18.1. 
I have prepared a JUnit test: https://github.com/anton-k11/camel/blob/cffa13cb8106731ba94aaff85a9dd81715315306/components/camel-hystrix/src/test/java/org/apache/camel/component/hystrix/processor/HystrixCircutExceptionTest.java
The test works fine if the IOException on line 110 is comment out and instead a Thread.sleep is used to simulate timeout.",spring boot 1.4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-14 13:24:36.834,,,no_permission,,Unknown,,,,Patch,,,,,,,,,9223372036854775807,,,Thu Dec 21 15:00:29 UTC 2017,,,Patch Available,,,,0|i3ey1z:,9223372036854775807,Regression,,,,,,,,,"14/May/17 13:24;githubbot;GitHub user anton-k11 opened a pull request:

    https://github.com/apache/camel/pull/1694

    CAMEL-11279 test and fix

    Fix and JUnit test for https://issues.apache.org/jira/browse/CAMEL-11279

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anton-k11/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1694.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1694
    
----
commit 758c5a0e5a0b070f0ade5dd1716fc50301e0751d
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T12:09:18Z

    Camel-hystrix test, which checks if the Hystrix in the route is
    short-circuited after some errors.

commit cffa13cb8106731ba94aaff85a9dd81715315306
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T12:51:21Z

    Fixing source stile

commit c15a0cf0f538ef774c877764b3081d98cb9be8db
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T13:21:43Z

    Fixing Camel hystrix issue:
    https://issues.apache.org/jira/browse/CAMEL-11279

----
","14/May/17 13:29;anton_k11;Hi, 

I have created PR #1694 containing a fix and a test.

Regards, Anton",16/May/17 10:50;davsclaus;Thanks for the PR,"19/May/17 16:55;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1694
","21/Dec/17 15:00;HuminiO;I believe that exceptions are still not handled correctly (at least in 2.19.4)
Circuit breaker should be transparent when `closed` - so until it is `open` all exceptions should be passed through not wrapped as it happening now (when fallback is disabled)

Current implementation always wraps original exception in `HystrixRuntimeException` - this way it is neither transparent nor compatible with Java use with annotations.

For clarification: hystrix library always wraps cause with `HystrixRuntimeException` but Java aspect is implementation unwraps it and in result annotation based hystrix in Java is transparent.
And it should behave same way in Camel.

I actually raised story CAMEL-12100",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Service call definition - Simple language expresion in uri is not being evaluated ,CAMEL-12086,13125258,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,xcvljk,xcvljk,15/Dec/17 15:25,21/Dec/17 16:33,13/Mar/19 22:20,21/Dec/17 16:32,2.20.1,,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-core,,,,,,0,,,,"I'm facing some problems with service call definition. 

A route is supposed to send some get requests to a specific endpoint. The endpoint requires a parameter in the url path - {noformat}GET <host>:<port>/api/.../<id>{noformat}

Route definition:

{noformat}
  routebuilder.from(""direct:getSomeEntity"")
	.setHeader(Exchange.HTTP_METHOD, constant(HttpMethod.GET))
	.serviceCall()
	.name(""test"")
	.uri(""test/api/.../${fid}"")
	.end()
        ...
{noformat}

This route did not work and the {noformat}${fid}{noformat} parameter was never resolved despite the javadoc states that the uri may contain simple language expressions 

See - {noformat}https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/model/cloud/ServiceCallDefinition.java#L187{noformat}

Route execution:

{noformat}
camelContext.createFluentProducerTemplate()
	.withHeader(""fid"", id)
	.to(""direct:getSomeEntity"")
        ...
{noformat}

Eventually i got it work with following workaround

{noformat}

.serviceCall()
	.name(""test"")
	.expression()		
	.simple(""http4://${header.CamelServiceCallServiceHost}:${header.CamelServiceCallServicePort}/api/.../${fid}"")
	.end()

{noformat}


",Spring boot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-15 15:35:59.985,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 21 16:33:07 UTC 2017,,,,,,,0|i3nygf:,9223372036854775807,,,,,,,,,,"15/Dec/17 15:35;lb;Should't it be 

{code}
${header.fid}
{code}

instead of plain 

{code}
${fid}
{code}
","18/Dec/17 08:24;xcvljk;[~lb] Tried that as well. ${in.header.fid} ${header.fid} ${headers.fid} ${fid}. According to documentation all expressions should work in the first example, but none of them actually worked.","21/Dec/17 10:48;davsclaus;Yes its a bug, it used to be that when I created the initial service call eip, but it has been heavily refactored and then we have this bug now.","21/Dec/17 16:33;davsclaus;So with this fix, you should be able to use 
{code}
${header.fid}
{code}

 in your first example",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel Kafka producer: Specified topic is ignored (""No topic key set"" error) when KafkaConfiguration is used",CAMEL-12076,13124120,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,pointless2006,pointless2006,11/Dec/17 12:28,14/Dec/17 10:13,13/Mar/19 22:20,14/Dec/17 10:13,2.20.1,,,,,,,,,,,,,,,2.21.0,,,,,camel-kafka,,,,,,0,,,,"Specified topic is ignored (""No topic key set"" error) when KafkaConfiguration is used. When topic is set inside KafkaConfiguration then no error occurs.

<spring-boot.version>1.5.8.RELEASE</spring-boot.version>
<camel.version>2.20.1</camel.version>

{code}
        from(""direct:sendToKafka"")
                .setBody(constant(""Message from Camel to Kafka""))
                .setHeader(KafkaConstants.KEY, constant(""Camel""))
                .to(""kafka:TESTTOPIC?configuration=#kafkaConfiguration"");
{code}

{code}
2017-12-11 14:16:35.466 ERROR 12048 --- [ad #1 - WireTap] CamelRouter                              : Exchange[ExchangePattern: InOnly, BodyType: String, Body: Message from Camel to Kafka, CaughtExceptionType: org.apache.camel.CamelExchangeException, CaughtExcept
ionMessage: No topic key set. Exchange[ID-5CG7383K6H00BA-1512994577303-0-3], StackTrace: org.apache.camel.CamelExchangeException: No topic key set. Exchange[ID-5CG7383K6H00BA-1512994577303-0-3]
        at org.apache.camel.component.kafka.KafkaProducer.createRecorder(KafkaProducer.java:149)
        at org.apache.camel.component.kafka.KafkaProducer.process(KafkaProducer.java:251)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
        at org.apache.camel.processor.SendDynamicProcessor$1.doInAsyncProducer(SendDynamicProcessor.java:132)
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:445)
        at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:127)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
        at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:158)
        at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:153)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-14 09:50:11.202,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 14 10:12:59 UTC 2017,,,,,,,0|i3nrgn:,9223372036854775807,,,,,,,,,,"14/Dec/17 09:50;githubbot;dmvolod opened a new pull request #2147: CAMEL-12076: Specified topic is ignored when KafkaConfiguration is used
URL: https://github.com/apache/camel/pull/2147
 
 
   If topic property was not received from configuration or header parameters take it from the remaining URI. Also some minor code style fixes are applied.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Dec/17 09:50;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2147

    CAMEL-12076: Specified topic is ignored when KafkaConfiguration is used

    If topic property was not received from configuration or header parameters take it from the remaining URI. Also some minor code style fixes are applied.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12076

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2147.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2147
    
----
commit ed9d4d6fe5f4ccc9975c62b89a145beebf079ef2
Author: Dmitry Volodin <dmvolod@gmail.com>
Date:   2017-12-14T09:43:50Z

    CAMEL-12076: Specified topic is ignored when KafkaConfiguration is used

----
","14/Dec/17 10:10;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2147
","14/Dec/17 10:12;githubbot;oscerd commented on issue #2147: CAMEL-12076: Specified topic is ignored when KafkaConfiguration is used
URL: https://github.com/apache/camel/pull/2147#issuecomment-351666831
 
 
   Thanks the PR has been merged on master. There was a little error on tests compilation. Fixed now.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Dec/17 10:12;githubbot;oscerd commented on issue #2147: CAMEL-12076: Specified topic is ignored when KafkaConfiguration is used
URL: https://github.com/apache/camel/pull/2147#issuecomment-351667236
 
 
   Since we changed to DefaultComponent this fix can be only on 2.21.0, backporting to 2.20.x can be a breaking change for users.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel route commands should set the TCCL when working with local camel context,CAMEL-12082,13124901,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jpoth,jpoth,jpoth,14/Dec/17 09:27,14/Dec/17 09:40,13/Mar/19 22:20,14/Dec/17 09:39,2.20.1,,,,,,,,,,,,,,,2.20.2,2.21.0,,,,,,,,,,0,,,,"This causes class not found issues in Karaf when restarting routes for example:

{code}
13:33:50.734 WARN [pipe-camel:route-start websocket camel-context] unavailable
java.lang.RuntimeException: Unable to load org.eclipse.jetty.websocket.server.WebSocketServerFactory
	at org.eclipse.jetty.websocket.servlet.WebSocketServletFactory$Loader.load(WebSocketServletFactory.java:53) ~[?:?]
	at org.eclipse.jetty.websocket.servlet.WebSocketServlet.init(WebSocketServlet.java:138) ~[?:?]
	at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[34:javax.servlet-api:3.1.0]
	at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:640) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:419) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:892) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.eclipse.jetty.servlet.ServletHandler.updateMappings(ServletHandler.java:1596) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.eclipse.jetty.servlet.ServletHandler.setServletMappings(ServletHandler.java:1684) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.eclipse.jetty.servlet.ServletHandler.addServletWithMapping(ServletHandler.java:1027) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.eclipse.jetty.servlet.ServletContextHandler.addServlet(ServletContextHandler.java:437) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.apache.camel.component.websocket.WebsocketComponent.createServlet(WebsocketComponent.java:457) [226:org.apache.camel.camel-websocket:2.21.0]
	at org.apache.camel.component.websocket.WebsocketComponent.addServlet(WebsocketComponent.java:439) [226:org.apache.camel.camel-websocket:2.21.0]
	at org.apache.camel.component.websocket.WebsocketComponent.connect(WebsocketComponent.java:214) [226:org.apache.camel.camel-websocket:2.21.0]
	at org.apache.camel.component.websocket.WebsocketEndpoint.connect(WebsocketEndpoint.java:123) [226:org.apache.camel.camel-websocket:2.21.0]
	at org.apache.camel.component.websocket.WebsocketProducer.doStart(WebsocketProducer.java:84) [226:org.apache.camel.camel-websocket:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.deferStartService(DefaultCamelContext.java:1558) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:1475) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:1445) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:576) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:168) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:248) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1472) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:44) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:31) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:160) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:62) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:1172) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:80) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:370) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:196) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:145) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3947) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3854) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3899) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.startRouteService(DefaultCamelContext.java:3753) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1176) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.commands.AbstractLocalCamelController.startRoute(AbstractLocalCamelController.java:341) [53:org.apache.camel.camel-commands-core:2.21.0]
	at org.apache.camel.commands.RouteStartCommand.executeOnRoute(RouteStartCommand.java:32) [53:org.apache.camel.camel-commands-core:2.21.0]
	at org.apache.camel.commands.AbstractRouteCommand.execute(AbstractRouteCommand.java:56) [53:org.apache.camel.camel-commands-core:2.21.0]
	at org.apache.camel.karaf.commands.RouteStart.execute(RouteStart.java:30) [67:org.apache.camel.karaf.camel-karaf-commands:2.21.0]
	at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:84) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:68) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:86) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:571) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:497) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:386) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.felix.gogo.runtime.Pipe.doCall(Pipe.java:417) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:229) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:59) [144:org.apache.karaf.shell.core:4.2.0]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:?]
	at java.lang.Thread.run(Thread.java:745) [?:?]
Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.websocket.server.WebSocketServerFactory
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[?:?]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[?:?]
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[?:?]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[?:?]
	at java.lang.Class.forName0(Native Method) ~[?:?]
	at java.lang.Class.forName(Class.java:348) ~[?:?]
	at org.eclipse.jetty.websocket.servlet.WebSocketServletFactory$Loader.load(WebSocketServletFactory.java:47) ~[?:?]
	... 76 more
{code}

I'll push a PR",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-14 09:31:04.321,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 14 09:40:11 UTC 2017,,,,,,,0|i3nw9r:,9223372036854775807,,,,,,,,,,"14/Dec/17 09:31;githubbot;johnpoth opened a new pull request #2146: [CAMEL-12082] Set the TCCL to the application classloader when execut…
URL: https://github.com/apache/camel/pull/2146
 
 
   …ing local route commands
   
   https://issues.apache.org/jira/browse/CAMEL-12082
   
   This is similar to what's being done in [AbstractContexCommand](https://github.com/apache/camel/blob/792ce5c5cc0af486b39471cf68206a2e95d3a037/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractContextCommand.java#L63) and [DefaultCamelContext](https://github.com/apache/camel/blob/bb39dc44d9603c0e6fce2460ddf35a7b94ca30d4/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java#L3264)
   
   Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Dec/17 09:31;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/2146

    [CAMEL-12082] Set the TCCL to the application classloader when execut…

    …ing local route commands
    
    https://issues.apache.org/jira/browse/CAMEL-12082
    
    This is similar to what's being done in [AbstractContexCommand](https://github.com/apache/camel/blob/792ce5c5cc0af486b39471cf68206a2e95d3a037/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractContextCommand.java#L63) and [DefaultCamelContext](https://github.com/apache/camel/blob/bb39dc44d9603c0e6fce2460ddf35a7b94ca30d4/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java#L3264)
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-12082

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2146.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2146
    
----
commit 0572728f52a2d546cb7c0208c84108c8556643fe
Author: jpoth <poth.john@gmail.com>
Date:   2017-12-13T17:00:56Z

    [CAMEL-12082] Set the TCCL to the application classloader when executing local route commands

----
","14/Dec/17 09:36;githubbot;oscerd closed pull request #2146: [CAMEL-12082] Set the TCCL to the application classloader when execut…
URL: https://github.com/apache/camel/pull/2146
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractRouteCommand.java b/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractRouteCommand.java
index 74611e8b703..d0da95c57bf 100644
--- a/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractRouteCommand.java
+++ b/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractRouteCommand.java
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.camel.CamelContext;
 import org.apache.camel.commands.internal.RegexUtil;
 
 /**
@@ -53,12 +54,36 @@ public Object execute(CamelController camelController, PrintStream out, PrintStr
         for (Map<String, String> row : camelRoutes) {
             String camelContextName = row.get(""camelContextName"");
             String routeId = row.get(""routeId"");
-            executeOnRoute(camelController, camelContextName, routeId, out, err);
+            if (camelController instanceof LocalCamelController) {
+                executeLocal((LocalCamelController) camelController, camelContextName, routeId, out, err);
+            } else {
+                executeOnRoute(camelController, camelContextName, routeId, out, err);
+            }
         }
 
         return null;
     }
 
+    private void executeLocal(LocalCamelController camelController, String camelContextName, String routeId, PrintStream out, PrintStream err) throws Exception {
+        CamelContext camelContext = camelController.getLocalCamelContext(context);
+        if (camelContext == null) {
+            err.println(""Camel context "" + context + "" not found."");
+            return;
+        }
+
+        // Setting thread context classloader to the bundle classloader to enable legacy code that relies on it
+        ClassLoader oldClassloader = Thread.currentThread().getContextClassLoader();
+        ClassLoader applicationContextClassLoader = camelContext.getApplicationContextClassLoader();
+        if (applicationContextClassLoader  != null) {
+            Thread.currentThread().setContextClassLoader(applicationContextClassLoader);
+        }
+        try {
+            executeOnRoute(camelController, camelContextName, routeId, out, err);
+        } finally {
+            Thread.currentThread().setContextClassLoader(oldClassloader);
+        }
+    }
+
     public abstract void executeOnRoute(CamelController camelController, String contextName, String routeId, PrintStream out, PrintStream err) throws Exception;
 
     /**


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Dec/17 09:36;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2146
","14/Dec/17 09:36;githubbot;oscerd commented on issue #2146: [CAMEL-12082] Set the TCCL to the application classloader when execut…
URL: https://github.com/apache/camel/pull/2146#issuecomment-351657908
 
 
   Thanks for the PR it has been merged into master. I'll backport on 2.20.x too
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Dec/17 09:40;githubbot;johnpoth commented on issue #2146: [CAMEL-12082] Set the TCCL to the application classloader when execut…
URL: https://github.com/apache/camel/pull/2146#issuecomment-351658775
 
 
   Thanks @oscerd !

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Piling up of threads in iterating splitter in pararllel processing,CAMEL-12075,13124064,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,forsthofer,forsthofer,11/Dec/17 07:43,13/Dec/17 09:16,13/Mar/19 22:20,13/Dec/17 09:16,2.18.5,2.19.4,2.20.1,,,,,,,,,,,,,2.19.5,2.20.2,2.21.0,,,camel-core,,,,,,0,,,,"If you have a custom interating splitter which runs in parallel processing and which throws a RuntimeException either in the ""hasNext"" or ""next"" method after an aggregation thread was created then the aggregation thread will never finish.

Therefore if the error occurs mulitple times the aggregatgor threads pile up.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-11 08:10:03.735,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 13 09:15:56 UTC 2017,,,Patch Available,,,,0|i3nr47:,9223372036854775807,,,,,,,,,,"11/Dec/17 07:44;forsthofer;I will provide a GitHup pull request for the master branch.

If this request is accepted, I can make the patches for the older versions 2.20.2 and 2.19.5.","11/Dec/17 08:10;githubbot;forsthofer opened a new pull request #2142: CAMEL-12075: aggregator thread does not finish in iterating splitter
URL: https://github.com/apache/camel/pull/2142
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Dec/17 08:10;githubbot;GitHub user forsthofer opened a pull request:

    https://github.com/apache/camel/pull/2142

    CAMEL-12075: aggregator thread does not finish in iterating splitter

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/forsthofer/camel CAMEL-12075

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2142.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2142
    
----
commit 09fb208e22a61c3feaacec9022575080c4b1a9d7
Author: Franz Forsthofer <franz.forsthofer@sap.com>
Date:   2017-12-11T08:06:59Z

    CAMEL-12075: aggregator thread does not finish in iterating splitter

----
","13/Dec/17 09:15;githubbot;davsclaus closed pull request #2142: CAMEL-12075: aggregator thread does not finish in iterating splitter
URL: https://github.com/apache/camel/pull/2142
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java
index f924561a588..90a6f7b9013 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java
@@ -301,56 +301,62 @@ protected void doProcessParallel(final Exchange original, final AtomicExchange r
             final AtomicBoolean aggregationTaskSubmitted = new AtomicBoolean();
 
             LOG.trace(""Starting to submit parallel tasks"");
-
-            while (it.hasNext()) {
-                final ProcessorExchangePair pair = it.next();
-                // in case the iterator returns null then continue to next
-                if (pair == null) {
-                    continue;
-                }
-
-                final Exchange subExchange = pair.getExchange();
-                updateNewExchange(subExchange, total.intValue(), pairs, it);
-
-                completion.submit(new Callable<Exchange>() {
-                    public Exchange call() throws Exception {
-                        // start the aggregation task at this stage only in order not to pile up too many threads
-                        if (aggregationTaskSubmitted.compareAndSet(false, true)) {
-                            // but only submit the aggregation task once
-                            aggregateExecutorService.submit(aggregateOnTheFlyTask);
-                        }
-
-                        if (!running.get()) {
-                            // do not start processing the task if we are not running
-                            return subExchange;
-                        }
-
-                        try {
-                            doProcessParallel(pair);
-                        } catch (Throwable e) {
-                            subExchange.setException(e);
-                        }
-
-                        // Decide whether to continue with the multicast or not; similar logic to the Pipeline
-                        Integer number = getExchangeIndex(subExchange);
-                        boolean continueProcessing = PipelineHelper.continueProcessing(subExchange, ""Parallel processing failed for number "" + number, LOG);
-                        if (stopOnException && !continueProcessing) {
-                            // signal to stop running
-                            running.set(false);
-                            // throw caused exception
-                            if (subExchange.getException() != null) {
-                                // wrap in exception to explain where it failed
-                                CamelExchangeException cause = new CamelExchangeException(""Parallel processing failed for number "" + number, subExchange, subExchange.getException());
-                                subExchange.setException(cause);
+            
+            try {
+                while (it.hasNext()) {
+                    final ProcessorExchangePair pair = it.next();
+                    // in case the iterator returns null then continue to next
+                    if (pair == null) {
+                        continue;
+                    }
+    
+                    final Exchange subExchange = pair.getExchange();
+                    updateNewExchange(subExchange, total.intValue(), pairs, it);
+    
+                    completion.submit(new Callable<Exchange>() {
+                        public Exchange call() throws Exception {
+                            // start the aggregation task at this stage only in order not to pile up too many threads
+                            if (aggregationTaskSubmitted.compareAndSet(false, true)) {
+                                // but only submit the aggregation task once
+                                aggregateExecutorService.submit(aggregateOnTheFlyTask);
+                            }
+    
+                            if (!running.get()) {
+                                // do not start processing the task if we are not running
+                                return subExchange;
+                            }
+    
+                            try {
+                                doProcessParallel(pair);
+                            } catch (Throwable e) {
+                                subExchange.setException(e);
+                            }
+    
+                            // Decide whether to continue with the multicast or not; similar logic to the Pipeline
+                            Integer number = getExchangeIndex(subExchange);
+                            boolean continueProcessing = PipelineHelper.continueProcessing(subExchange, ""Parallel processing failed for number "" + number, LOG);
+                            if (stopOnException && !continueProcessing) {
+                                // signal to stop running
+                                running.set(false);
+                                // throw caused exception
+                                if (subExchange.getException() != null) {
+                                    // wrap in exception to explain where it failed
+                                    CamelExchangeException cause = new CamelExchangeException(""Parallel processing failed for number "" + number, subExchange, subExchange.getException());
+                                    subExchange.setException(cause);
+                                }
                             }
+    
+                            LOG.trace(""Parallel processing complete for exchange: {}"", subExchange);
+                            return subExchange;
                         }
-
-                        LOG.trace(""Parallel processing complete for exchange: {}"", subExchange);
-                        return subExchange;
-                    }
-                });
-
-                total.incrementAndGet();
+                    });
+    
+                    total.incrementAndGet();
+                }
+            } catch (RuntimeException e) {
+                // The methods it.hasNext and it.next can throw RuntimeExceptions when custom iterators are implemented.
+                // We have to catch the exception here otherwise the aggregator threads would pile up.
+                executionException.set(e);
             }
 
             // signal all tasks has been submitted
diff --git a/camel-core/src/test/java/org/apache/camel/issues/SplitterParallelRuntimeExceptionInHasNextOrNext.java b/camel-core/src/test/java/org/apache/camel/issues/SplitterParallelRuntimeExceptionInHasNextOrNext.java
new file mode 100644
index 00000000000..948aada23e2
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/issues/SplitterParallelRuntimeExceptionInHasNextOrNext.java
@@ -0,0 +1,155 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.issues;
+
+import java.io.Closeable;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.Exchange;
+import org.apache.camel.builder.RouteBuilder;
+import org.junit.Test;
+
+public class SplitterParallelRuntimeExceptionInHasNextOrNext extends ContextTestSupport {
+
+    /**
+     * Tests that only one aggregator thread is created if a RuntimeException in
+     * the hasNext method of a custom iterator occurs.
+     */
+    @Test
+    public void testSplitErrorInHasNext() throws Exception {
+
+        execute(""direct:errorInHasNext"");
+    }
+
+    /**
+     * Tests that only one aggregator thread is created if a RuntimeException in
+     * the next method of a custom iterator occurs.
+     */
+    @Test
+    public void testSplitErrorInNext() throws Exception {
+
+        execute(""direct:errorInNext"");
+    }
+
+    private void execute(String from) throws InterruptedException {
+        for (int i = 0; i < 10; i++) {
+            try {
+                template.sendBody(from, ""some content"");
+            } catch (Exception e) {
+                // expected due to runtime exception in hasNext method
+                assertTrue(e.getMessage().startsWith(""Exception occurred""));
+            }
+            assertMockEndpointsSatisfied();
+        }
+        List<Thread> aggregatorThreads = getAggregatorThreads();
+        assertEquals(1, aggregatorThreads.size());
+    }
+
+    private List<Thread> getAggregatorThreads() {
+        List<Thread> result = new ArrayList<>();
+        for (Thread t : Thread.getAllStackTraces().keySet()) {
+            if (t.getName().endsWith(""Splitter-AggregateTask"")) {
+                result.add(t);
+            }
+        }
+        return result;
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+
+                from(""direct:errorInHasNext"").split().method(SplitterImpl.class, ""errorInHasNext"").streaming().parallelProcessing(true).to(""mock:split1"");
+
+                from(""direct:errorInNext"").split().method(SplitterImpl.class, ""errorInNext"").streaming().parallelProcessing(true).to(""mock:split2"");
+
+            }
+        };
+    }
+
+    public static class SplitterImpl {
+
+        public Iterator<String> errorInHasNext(InputStream request, Exchange exchange) {
+
+            return new CustomIterator(exchange, request, true);
+        }
+
+        public Iterator<String> errorInNext(InputStream request, Exchange exchange) {
+
+            return new CustomIterator(exchange, request, false);
+        }
+
+    }
+
+    static class CustomIterator implements Iterator<String>, Closeable {
+
+        private int index = 0;
+        private InputStream request;
+        private boolean errorInHasNext;
+
+        CustomIterator(Exchange exchange, InputStream request, boolean errorInHasNext) {
+
+            this.request = request;
+            this.errorInHasNext = errorInHasNext;
+
+        }
+
+        @Override
+        public boolean hasNext() {
+            if (index < 7) {
+                return true;
+            }
+            if (errorInHasNext) {
+                throw new RuntimeException(""Exception thrown"");
+            } else {
+                return false;
+            }
+        }
+
+        @Override
+        public String next() {
+            index++;
+
+            if (index < 7) {
+                return ""<a>"" + index + ""</a>"";
+            }
+            if (!errorInHasNext) {
+                throw new RuntimeException(""Exception thrown"");
+            } else {
+                return ""<a>"" + index + ""</a>"";
+            }
+        }
+
+        @Override
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public void close() throws IOException {
+            request.close();
+        }
+    }
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Dec/17 09:15;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2142
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Netty version in Camel 2.20.0+ not comptatable with Netty in camel-etcd component,CAMEL-12072,13123472,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,bobpaulin,bobpaulin,07/Dec/17 13:59,10/Dec/17 09:53,13/Mar/19 22:20,10/Dec/17 09:53,2.20.0,2.20.1,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-etcd,,,,,,0,,,," I'm trying to use camel-etcd which uses etcd4j 2.13.0 in apache camel 2.20.1.  Unfortunately the netty versions are incompatible due to a breaking change in io.netty.resolver.dns.DnsAddressResolverGroup
exception is
Caused by: java.lang.NoSuchMethodError: io.netty.resolver.dns.DnsAddressResolverGroup.(Ljava/lang/Class;Lio/netty/resolver/dns/DnsServerAddresses;)V

It appears that the Netty version in the master branch of etcd4j would fix this issue once the maintainers cut a new release.  Requested here:
https://github.com/jurmous/etcd4j/pull/146

Once that's done will need to update camel-etcd with the new version.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-07 14:04:15.649,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 08 15:05:08 UTC 2017,,,,,,,0|i3nngv:,9223372036854775807,,,,,,,,,,07/Dec/17 14:04;ancosen;With [~lb] we are looking at releasing a new version. I'll take care of this once it's released. Thanks for spotting this [~bobpaulin],08/Dec/17 15:05;bobpaulin;+1 Thank you so much for the quick work!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
aws-sqs queue creation does not support FIFO queues,CAMEL-12071,13123424,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,Pyves,Pyves,07/Dec/17 10:30,07/Dec/17 14:08,13/Mar/19 22:20,07/Dec/17 14:08,2.21.0,,,,,,,,,,,,,,,2.21.0,,,,,camel-aws,,,,,,0,,,,"CAMEL-11224 added support for new FIFO queues. 

Nevertheless the _createQueue_ method of the _SqsEndpoint_ class doesn't seem to support the creation of FIFO queues. The [AWS documentation|http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_CreateQueue.html] regarding the CreateQueue API states that the following attributes should be set:
- FifoQueue (needed otherwise AWS will fail the queue name validation, ""Can only include alphanumeric characters, hyphens, or underscores. 1 to 80 in length"")
- ContentBasedDeduplication (defaults to false if omitted)

We intend to submit a pull request to fix this with [~slukes].
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-07 14:02:54.977,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 07 14:08:27 UTC 2017,,,,,,,0|i3nn67:,9223372036854775807,,,,,,,,,,"07/Dec/17 14:02;githubbot;GitHub user PyvesB opened a pull request:

    https://github.com/apache/camel/pull/2140

    Camel 12071 aws-sqs queue creation does not support FIFO queues

    We have addressed the issues described in [Camel 12071](https://issues.apache.org/jira/browse/CAMEL-12071).
    
    Thanks to @slukes for pairing with me on this piece of work. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bbc/camel CAMEL-12071

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2140.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2140
    
----
commit 27ee0225b8914f26c73a76b5ea45b2526bd8d4da
Author: PyvesB <pierre-yves.bigourdan@bbc.co.uk>
Date:   2017-12-07T11:41:54Z

    CAMEL-12071 aws-sqs queue creation does not support FIFO queues

commit 3f8b9f87be82928af940831eb049f17d6ae4e9fd
Author: PyvesB <pierre-yves.bigourdan@bbc.co.uk>
Date:   2017-12-07T11:56:57Z

    CAMEL-12071 improved unit tests for createQueue

commit e96115a7239594b93038437f2a42631b25e038e0
Author: PyvesB <pierre-yves.bigourdan@bbc.co.uk>
Date:   2017-12-07T13:59:48Z

    CAMEL-12071 made unit tests fail in expected way

----
","07/Dec/17 14:08;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2140
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ActiveMQ/JMS component: transferExchange option does not transfer exchange properties anymore,CAMEL-12069,13123226,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,06/Dec/17 16:07,06/Dec/17 22:26,13/Mar/19 22:20,06/Dec/17 22:26,2.19.0,2.20.1,,,,,,,,,,,,,,2.19.5,2.20.2,2.21.0,,,camel-activemq,camel-jms,,,,,0,,,,"The ActiveMQ/JMS component documenation generated from the _JMSComponent#setTransferExchange_ javadoc states:

{quote}
You can transfer the exchange over the wire instead of just the body and headers. 
The following fields are transferred: In body, Out body, Fault body, In headers, Out headers, Fault headers, exchange properties, exchange exception.
{quote}

But exchange properties are *not* transfered.

I debuged into this and noticed that _JMSBinding#createJmsMessage_ calls _DefaultExchangeHolder.marshal(exchange, false, endpoint.isAllowSerializedHeaders())_ when _transferExchange_ is _true_. The _false_ parameter is the reason that the exchange properties are not included in the JMS message.

This should either be fixed or the documentation should be updated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-06 20:01:25.55,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 06 22:19:54 UTC 2017,,,,,,,0|i3nlyf:,9223372036854775807,Regression,,,,,,,,,06/Dec/17 16:16;pascalschumacher;Looks like this was unintentionally broken by https://github.com/apache/camel/commit/5dd59162e4ac9335e497934b8d662f598cb779d1,"06/Dec/17 20:01;githubbot;PascalSchumacher opened a new pull request #2139: CAMEL-12069: ActiveMQ/JMS component: transferExchange option does not…
URL: https://github.com/apache/camel/pull/2139
 
 
   … transfer exchange properties
   
   TransferExchange now includes exchange properties again. This restores the previous behavior accidentally broken by 5dd59162e4ac9335e497934b8d662f598cb779d1.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Dec/17 20:01;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/2139

    CAMEL-12069: ActiveMQ/JMS component: transferExchange option does not…

    … transfer exchange properties
    
    TransferExchange now includes exchange properties again. This restores the previous behavior accidentally broken by 5dd59162e4ac9335e497934b8d662f598cb779d1.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel CAMEL-12069-transferExchange-should-include-exchange-properties

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2139.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2139
    
----
commit 86b94fc4d937eff3d7e1031fc95477c3042579b2
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2017-12-06T19:58:02Z

    CAMEL-12069: ActiveMQ/JMS component: transferExchange option does not transfer exchange properties
    
    TransferExchange now includes exchange properties again. This restores the previous behavior accidentally broken by 5dd59162e4ac9335e497934b8d662f598cb779d1.

----
","06/Dec/17 20:24;githubbot;oscerd commented on issue #2139: CAMEL-12069: ActiveMQ/JMS component: transferExchange option does not…
URL: https://github.com/apache/camel/pull/2139#issuecomment-349763311
 
 
   Go for it @PascalSchumacher :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Dec/17 22:19;githubbot;asfgit closed pull request #2139: CAMEL-12069: ActiveMQ/JMS component: transferExchange option does not…
URL: https://github.com/apache/camel/pull/2139
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java
index 9ebe7047f77..0de72fe4395 100644
--- a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java
+++ b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java
@@ -518,7 +518,7 @@ protected Message createJmsMessage(Exchange exchange, Object body, Map<String, O
         // special for transferExchange
         if (endpoint != null && endpoint.isTransferExchange()) {
             LOG.trace(""Option transferExchange=true so we use JmsMessageType: Object"");
-            Serializable holder = DefaultExchangeHolder.marshal(exchange, false, endpoint.isAllowSerializedHeaders());
+            Serializable holder = DefaultExchangeHolder.marshal(exchange, true, endpoint.isAllowSerializedHeaders());
             Message answer = session.createObjectMessage(holder);
             // ensure default delivery mode is used by default
             answer.setJMSDeliveryMode(Message.DEFAULT_DELIVERY_MODE);
diff --git a/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsInOutTransferExchangeTest.java b/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsInOutTransferExchangeTest.java
index f7efd684f63..cc4721a0307 100644
--- a/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsInOutTransferExchangeTest.java
+++ b/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsInOutTransferExchangeTest.java
@@ -67,6 +67,8 @@ public void process(Exchange exchange) throws Exception {
                 map.put(""double"", new Double(1.23));
 
                 exchange.getIn().setHeaders(map);
+
+                exchange.setProperty(""PropertyName"", ""PropertyValue"");
             }
         });
 
@@ -88,6 +90,7 @@ public void process(Exchange exchange) throws Exception {
         assertEquals((Long) 123L, exchange.getIn().getHeader(""long"", Long.class));
         assertEquals((Double) 1.23, exchange.getIn().getHeader(""double"", Double.class));
         assertEquals(""hello"", exchange.getIn().getHeader(""string"", String.class));
+        assertEquals(""PropertyValue"", exchange.getProperty(""PropertyName""));
         
         Exchange resultExchange = result.getExchanges().get(0);
         assertTrue(resultExchange.getIn() instanceof JmsMessage);
@@ -103,6 +106,7 @@ public void process(Exchange exchange) throws Exception {
         assertEquals((Long) 123L, exchange.getIn().getHeader(""long"", Long.class));
         assertEquals((Double) 1.23, exchange.getIn().getHeader(""double"", Double.class));
         assertEquals(""hello"", exchange.getIn().getHeader(""string"", String.class));
+        assertEquals(""PropertyValue"", exchange.getProperty(""PropertyName""));
     }
 
     @Override
diff --git a/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsTransferExchangeTest.java b/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsTransferExchangeTest.java
index 71d25e88341..1aa15721b35 100644
--- a/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsTransferExchangeTest.java
+++ b/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsTransferExchangeTest.java
@@ -62,6 +62,7 @@ public void testSendExchange() throws Exception {
         MockEndpoint mock = getMockEndpoint(""mock:result"");
         mock.expectedBodiesReceived(""Hello World"");
         mock.expectedHeaderReceived(""foo"", ""cheese"");
+        mock.expectedPropertyReceived(""bar"", 123);
 
         template.send(""direct:start"", new Processor() {
             public void process(Exchange exchange) throws Exception {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Dec/17 22:19;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2139
","06/Dec/17 22:19;githubbot;PascalSchumacher commented on issue #2139: CAMEL-12069: ActiveMQ/JMS component: transferExchange option does not…
URL: https://github.com/apache/camel/pull/2139#issuecomment-349793964
 
 
   @oscerd Thanks for the review! :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,
File idempotent repository is always initialized with default 1000 cache size,CAMEL-12037,13120666,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,zurkin,zurkin,24/Nov/17 17:18,25/Nov/17 17:05,13/Mar/19 22:20,25/Nov/17 16:08,2.20.0,,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-core,,,,,,0,,,,"http://camel.465427.n5.nabble.com/File-idempotent-repository-problem-since-2-20-td5815760.html

So far we've been using file idempotent repository which was defined like 
this: 

<bean id=""download repository"" 
class=""of.apache.camel.processor.idempotent.FileIdempotentRepository""> 
  <property name=""fileStore"" value=""work/.downloadStore.dat"" /> 
  <property name=""cacheSize"" value=""5000"" /> 
</bean> 

However since Camel version 2.20 I can see that in 
FileIdempotentRepository.java there is a cache initialization in method 
doStart(): 

protected void doStart() throws Exception { 
 ... 
 this.cache = LRUCacheFactory.newLRUCache(1000); 
 ... 

} 

which always overrides our cacheSize definition with default value, because 
doStart method is always invoked just after bean initialization (if the 
init-method=""start"" was specified in bean definition) or during camel 
context initialization. 

As a consequence our idempotent stores always have a default 1000 cache 
size limit. 

Shuldn't the doStart method check the cache instance first before 
initializing it with default cache size e.g. 

protected void doStart() throws Exception { 
... 
if (this.cache == null) { 
  this.cache = LRUCacheFactory.newLRUCache(1000); 
} 
... 

} 
",,,,,,,,,,600,600,,0%,600,600,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-25 08:36:48.743,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Sat Nov 25 17:05:07 UTC 2017,,,Patch Available,,,,0|i3n69b:,9223372036854775807,,,,,,,,,,25/Nov/17 08:36;davsclaus;Contributions is welcome with a patch to fix this,"25/Nov/17 11:15;zurkin;Yes I will patch it today. I need to set up environment.
Thanks.","25/Nov/17 16:07;githubbot;zurkin opened a new pull request #2118: CAMEL-12037 Idempotent repository cache initialization fix.
URL: https://github.com/apache/camel/pull/2118
 
 
   Also consider moving this initalization block to a default constructor.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Nov/17 16:07;githubbot;GitHub user zurkin opened a pull request:

    https://github.com/apache/camel/pull/2118

    CAMEL-12037 Idempotent repository cache initialization fix.

    Also consider moving this initalization block to a default constructor.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zurkin/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2118.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2118
    
----
commit 9c002bf387d9687234aa41abe084763a4cbdf388
Author: Krzysztof Holdanowicz <holdanowicz@gmail.com>
Date:   2017-11-25T15:42:04Z

    CAMEL-12037 Idempotent repository cache initialization fix.

----
","25/Nov/17 17:05;githubbot;davsclaus closed pull request #2118: CAMEL-12037 Idempotent repository cache initialization fix.
URL: https://github.com/apache/camel/pull/2118
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java b/camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java
index f452346dc80..01796f2ba35 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java
@@ -334,8 +334,11 @@ protected void loadStore() throws IOException {
     protected void doStart() throws Exception {
         ObjectHelper.notNull(fileStore, ""fileStore"", this);
 
-        // default use a 1st level cache
-        this.cache = LRUCacheFactory.newLRUCache(1000);
+        //CAMEL-12037
+        if (this.cache == null) {
+        	// default use a 1st level cache
+        	this.cache = LRUCacheFactory.newLRUCache(1000);
+        }
 
         // init store if not loaded before
         if (init.compareAndSet(false, true)) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Nov/17 17:05;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2118
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible Intermittent failures in ReactorStreamsServiceTest,CAMEL-12025,13120404,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,23/Nov/17 07:47,24/Nov/17 11:59,13/Mar/19 22:20,23/Nov/17 12:46,,,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-reactor,,,,,,0,,,,"The copy of the test we have in WildFly Camel fails intermittently - see https://github.com/wildfly-extras/wildfly-camel/issues/2320

The fix available in https://github.com/wildfly-extras/wildfly-camel/pull/2324 just needs to be ported back to Camel.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-23 08:51:58.04,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 24 11:59:32 UTC 2017,,,,,,,0|i3n4nb:,9223372036854775807,,,,,,,,,,"23/Nov/17 08:51;githubbot;ppalaga opened a new pull request #2110: CAMEL-12025: Possible Intermittent failures in ReactorStreamsServiceTest
URL: https://github.com/apache/camel/pull/2110
 
 
   @lburgazzoli this is the backport from https://github.com/wildfly-extras/wildfly-camel/pull/2324

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Nov/17 08:51;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2110

    CAMEL-12025: Possible Intermittent failures in ReactorStreamsServiceTest

    @lburgazzoli this is the backport from https://github.com/wildfly-extras/wildfly-camel/pull/2324

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-12025

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2110.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2110
    
----
commit adc1cb0cdc45572bdad8eee838c2d24cc460aa1d
Author: Peter Palaga <ppalaga@redhat.com>
Date:   2017-11-23T08:50:32Z

    CAMEL-12025: Possible Intermittent failures in ReactorStreamsServiceTest

----
","24/Nov/17 09:38;githubbot;davsclaus commented on issue #2110: CAMEL-12025: Possible Intermittent failures in ReactorStreamsServiceTest
URL: https://github.com/apache/camel/pull/2110#issuecomment-346784838
 
 
   Thanks for the PR it has been merged. Do you mind closing this?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Nov/17 11:59;githubbot;ppalaga closed pull request #2110: CAMEL-12025: Possible Intermittent failures in ReactorStreamsServiceTest
URL: https://github.com/apache/camel/pull/2110
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-reactor/src/test/java/org/apache/camel/component/reactor/engine/ReactorStreamsServiceTest.java b/components/camel-reactor/src/test/java/org/apache/camel/component/reactor/engine/ReactorStreamsServiceTest.java
index 19a1f5ce997..9b9df6b3a30 100644
--- a/components/camel-reactor/src/test/java/org/apache/camel/component/reactor/engine/ReactorStreamsServiceTest.java
+++ b/components/camel-reactor/src/test/java/org/apache/camel/component/reactor/engine/ReactorStreamsServiceTest.java
@@ -16,6 +16,10 @@
  */
 package org.apache.camel.component.reactor.engine;
 
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Set;
+import java.util.TreeSet;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -35,7 +39,7 @@
 import reactor.core.publisher.Flux;
 
 public class ReactorStreamsServiceTest extends ReactorStreamsServiceTestSupport {
-    
+
     // ************************************************
     // Setup
     // ************************************************
@@ -287,70 +291,74 @@ public void configure() {
     public void testTo() throws Exception {
         context.start();
 
-        AtomicInteger value = new AtomicInteger(0);
-        CountDownLatch latch = new CountDownLatch(1);
+        Set<String> values = Collections.synchronizedSet(new TreeSet<>());
+        CountDownLatch latch = new CountDownLatch(3);
 
         Flux.just(1, 2, 3)
             .flatMap(e -> crs.to(""bean:hello"", e, String.class))
-            .doOnNext(res -> Assert.assertEquals(""Hello "" + value.incrementAndGet(), res))
+            .doOnNext(res -> values.add(res))
             .doOnNext(res -> latch.countDown())
             .subscribe();
 
         Assert.assertTrue(latch.await(2, TimeUnit.SECONDS));
+        Assert.assertEquals(new TreeSet<>(Arrays.asList(""Hello 1"", ""Hello 2"", ""Hello 3"")), values);
     }
 
     @Test
     public void testToWithExchange() throws Exception {
         context.start();
 
-        AtomicInteger value = new AtomicInteger(0);
-        CountDownLatch latch = new CountDownLatch(1);
+        Set<String> values = Collections.synchronizedSet(new TreeSet<>());
+        CountDownLatch latch = new CountDownLatch(3);
 
         Flux.just(1, 2, 3)
             .flatMap(e -> crs.to(""bean:hello"", e))
             .map(e -> e.getOut())
             .map(e -> e.getBody(String.class))
-            .doOnNext(res -> Assert.assertEquals(""Hello "" + value.incrementAndGet(), res))
+            .doOnNext(res -> values.add(res))
             .doOnNext(res -> latch.countDown())
             .subscribe();
 
         Assert.assertTrue(latch.await(2, TimeUnit.SECONDS));
+        Assert.assertEquals(new TreeSet<>(Arrays.asList(""Hello 1"", ""Hello 2"", ""Hello 3"")), values);
     }
 
     @Test
     public void testToFunction() throws Exception {
         context.start();
 
-        AtomicInteger value = new AtomicInteger(0);
-        CountDownLatch latch = new CountDownLatch(1);
+        Set<String> values = Collections.synchronizedSet(new TreeSet<>());
+        CountDownLatch latch = new CountDownLatch(3);
         Function<Object, Publisher<String>> fun = crs.to(""bean:hello"", String.class);
 
         Flux.just(1, 2, 3)
             .flatMap(fun)
-            .doOnNext(res -> Assert.assertEquals(""Hello "" + value.incrementAndGet(), res))
+            .doOnNext(res -> values.add(res))
             .doOnNext(res -> latch.countDown())
             .subscribe();
 
         Assert.assertTrue(latch.await(2, TimeUnit.SECONDS));
+        Assert.assertEquals(new TreeSet<>(Arrays.asList(""Hello 1"", ""Hello 2"", ""Hello 3"")), values);
     }
 
     @Test
     public void testToFunctionWithExchange() throws Exception {
         context.start();
 
-        AtomicInteger value = new AtomicInteger(0);
-        CountDownLatch latch = new CountDownLatch(1);
+        Set<String> values = Collections.synchronizedSet(new TreeSet<>());
+        CountDownLatch latch = new CountDownLatch(3);
         Function<Object, Publisher<Exchange>> fun = crs.to(""bean:hello"");
 
         Flux.just(1, 2, 3)
             .flatMap(fun)
             .map(e -> e.getOut())
             .map(e -> e.getBody(String.class))
-            .doOnNext(res -> Assert.assertEquals(""Hello "" + value.incrementAndGet(), res))
+            .doOnNext(res -> values.add(res))
             .doOnNext(res -> latch.countDown())
             .subscribe();
 
         Assert.assertTrue(latch.await(2, TimeUnit.SECONDS));
+        Assert.assertEquals(new TreeSet<>(Arrays.asList(""Hello 1"", ""Hello 2"", ""Hello 3"")), values);
     }
 
     // ************************************************


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Nov/17 11:59;githubbot;Github user ppalaga closed the pull request at:

    https://github.com/apache/camel/pull/2110
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flink requires internals to be visible by TCCL,CAMEL-12028,13120480,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,23/Nov/17 13:39,23/Nov/17 14:52,13/Mar/19 22:20,23/Nov/17 14:52,,,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-flink,,,,,,0,,,,CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/2318,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-23 13:57:10.385,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 23 14:52:12 UTC 2017,,,,,,,0|i3n547:,9223372036854775807,,,,,,,,,,"23/Nov/17 13:57;githubbot;tdiesler opened a new pull request #2111: [CAMEL-12028] Flink requires internals to be visible by TCCL
URL: https://github.com/apache/camel/pull/2111
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Nov/17 13:57;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/2111

    [CAMEL-12028] Flink requires internals to be visible by TCCL

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-12028

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2111.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2111
    
----
commit c17ad70055a33faaad512b517029299fd2e70fd3
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-11-23T13:51:18Z

    [CAMEL-12028] Flink requires internals to be visible by TCCL

----
","23/Nov/17 14:52;githubbot;oscerd commented on issue #2111: [CAMEL-12028] Flink requires internals to be visible by TCCL
URL: https://github.com/apache/camel/pull/2111#issuecomment-346637884
 
 
   Thanks, merged on 2.20.x and master.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Nov/17 14:52;githubbot;oscerd closed pull request #2111: [CAMEL-12028] Flink requires internals to be visible by TCCL
URL: https://github.com/apache/camel/pull/2111
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-flink/src/main/java/org/apache/camel/component/flink/DataSetFlinkProducer.java b/components/camel-flink/src/main/java/org/apache/camel/component/flink/DataSetFlinkProducer.java
index 054180dd1d9..e3051579256 100644
--- a/components/camel-flink/src/main/java/org/apache/camel/component/flink/DataSetFlinkProducer.java
+++ b/components/camel-flink/src/main/java/org/apache/camel/component/flink/DataSetFlinkProducer.java
@@ -35,13 +35,21 @@ public void process(Exchange exchange) throws Exception {
         Object body = exchange.getIn().getBody();
 
         Object result;
-        if (body instanceof List) {
-            List list = (List) body;
-            Object[] array = list.toArray(new Object[list.size()]);
-            result = dataSetCallback.onDataSet(ds, array);
-        } else {
-            result = dataSetCallback.onDataSet(ds, body);
+        
+        ClassLoader tccl = Thread.currentThread().getContextClassLoader();
+        try {
+            Thread.currentThread().setContextClassLoader(DataSet.class.getClassLoader());
+            if (body instanceof List) {
+                List list = (List) body;
+                Object[] array = list.toArray(new Object[list.size()]);
+                result = dataSetCallback.onDataSet(ds, array);
+            } else {
+                result = dataSetCallback.onDataSet(ds, body);
+            }
+        } finally {
+            Thread.currentThread().setContextClassLoader(tccl);
         }
+        
         collectResults(exchange, result);
     }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Nov/17 14:52;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2111
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProducerTemplate.requestBody with responseType throw a InvalidPayloadException instead of original exception (wrapped in a CamelExecutionException),CAMEL-12021,13119970,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,thopap,thopap,21/Nov/17 15:11,23/Nov/17 07:56,13/Mar/19 22:20,22/Nov/17 18:18,2.20.1,,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-core,,,,,,0,,,,"I try to upgrade from camel 2.19.3 to camel 2.20.1 and the behavior of {{org.apache.camel.ProducerTemplate.requestBody(String, Object, Class<T>)}} seems to be broken in case of exceptions.

From the API the exception behavior is documented as ""CamelExecutionException if the processing of the exchange failed""
--> in camel 2.19 it works without any issues
--> since camel 2.20.1 the underlying exception is lost and instead a InvalidPayloadException is thrown. 

A first analyze looks like the internal camel processing in 2.20 try to convert the exchange in body to the given response type. But i don't think this is make sense in case of a exception. Using the requestBody without the response type work correctly - here the unterlying exception is correctly propagated back as a wrapped CamelExecutionException.

I was not able to find the root cause, so I could not provide a patch here - but I have attached a junit test to reproduce the issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21/Nov/17 15:11;thopap;camel-issue.patch;https://issues.apache.org/jira/secure/attachment/12898672/camel-issue.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2017-11-22 18:18:38.633,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 23 07:56:31 UTC 2017,,,,,,,0|i3n1zb:,9223372036854775807,,,,,,,,,,21/Nov/17 15:12;thopap;Attaching a patch containing a Junit test for showing the issue (DefaultProducerTemplateTest.testExceptionOnRequestBodyWithResponseType),22/Nov/17 18:18;davsclaus;Thanks for reporting and the unit test.,"23/Nov/17 07:56;thopap;Looks good, thank you for providing a fix. 

[~davsclaus]:
Just for my understanding: The ConvertBodyProcessor where you have done the fix, looks the same in Camel 2.19 and 2.20. Why is the behavior different in both releases? Which change or fix in 2.20 has broken the behavior?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid Pool Exhausted error on camel-netty4,CAMEL-12016,13119605,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,dvor4x,dvor4x,20/Nov/17 10:12,20/Nov/17 12:07,13/Mar/19 22:20,20/Nov/17 12:06,2.17.4,2.18.0,2.19.0,2.20.0,2.20.1,,,,,,,,,,,2.18.6,2.19.5,2.20.2,2.21.0,,camel-netty4,,,,,,0,,,,"Hey guys,

Since camel 2.17.4, our application who made some ""ping request"" brings a ""Pool exhausted"" error after 100 trying.

After analysis, since 2.17.4, when camel-netty4 try to connect to a down host, the connection (ChannelFuture) stay in the pool.

Here is the code to show you :

{code:java}
import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
 
import java.util.NoSuchElementException;
 
public class main {
    public static void main(String args[]) throws Exception {
        CamelContext context = new DefaultCamelContext();
        context.addRoutes(new RouteBuilder() {
            public void configure() {
                onException(NoSuchElementException.class).process(exchange -> {
                    System.out.println(exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class));
                });
 
                from(""timer://myTimer?period=2000"").
                    setBody()
                        .simple(""Trying to connect to localhost:12345"")
                    .to(""stream:out"")
                    .to(""netty4:tcp://localhost:12345?producerPoolMaxActive=4"");
            }
        });
        context.start();
        Thread.sleep(8000000);
    }
}
{code}

The producerPoolMaxActive is set to 4 to bring the error faster.

*The output in 2.17.3 just bellow (all work perfectly)*

_Trying to connect to localhost:12345
Trying to connect to localhost:12345
Trying to connect to localhost:12345
Trying to connect to localhost:12345
Trying to connect to localhost:12345
...._

*But in version > 2.17.3, we've got this : *

_Trying to connect to localhost:12345
Trying to connect to localhost:12345
Trying to connect to localhost:12345
Trying to connect to localhost:12345
Trying to connect to localhost:12345
java.util.NoSuchElementException: Pool exhausted
Trying to connect to localhost:12345
java.util.NoSuchElementException: Pool exhausted
Trying to connect to localhost:12345
java.util.NoSuchElementException: Pool exhausted
Trying to connect to localhost:12345
java.util.NoSuchElementException: Pool exhausted
_

I've made a pull request to fix it.

Thanks for your help !","Same behaviour on : Linux, Windows 7, AIX
Using Intelli-J",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-20 10:18:27.632,,,no_permission,,Novice,,,,Important,,,,,,,,,9223372036854775807,,,Mon Nov 20 12:07:16 UTC 2017,,,,,,,0|i3mzqn:,9223372036854775807,Regression,,,,,,,,,"20/Nov/17 10:18;githubbot;dvor4x opened a new pull request #2101: CAMEL-12016 : ChannelFuture is not clearly erased from the pool on connection error
URL: https://github.com/apache/camel/pull/2101
 
 
   * Since 2.17.4, ChannelFuture was never release when a connection error occurs.
   https://issues.apache.org/jira/browse/CAMEL-12016

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/17 10:18;githubbot;GitHub user dvor4x opened a pull request:

    https://github.com/apache/camel/pull/2101

    CAMEL-12016 : ChannelFuture is not clearly erased from the pool on connection error

    * Since 2.17.4, ChannelFuture was never release when a connection error occurs.
    https://issues.apache.org/jira/browse/CAMEL-12016

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dvor4x/camel bugfix/camelNetty4ReleaseChannelFutureOnConnectionError

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2101.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2101
    
----
commit 436cd46724b94406b0c83a2678b06577eced1b50
Author: dvor4x <dvor4x@hackerzvoice.net>
Date:   2017-11-18T13:54:54Z

    * Since 2.16.3, ChannelFuture was never release when a connection error occurs. The fact is, pool.borrowObject(); (L224) didn't throw connection exception anymore.

----
","20/Nov/17 11:57;githubbot;oscerd closed pull request #2101: CAMEL-12016 : ChannelFuture is not clearly erased from the pool on connection error
URL: https://github.com/apache/camel/pull/2101
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/NettyProducer.java b/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/NettyProducer.java
index a3756818233..cd3d12afcb2 100644
--- a/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/NettyProducer.java
+++ b/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/NettyProducer.java
@@ -642,6 +642,7 @@ public void operationComplete(ChannelFuture future) {
                 }
                 exchange.setException(cause);
                 callback.done(false);
+                releaseChannel(future);
                 return;
             }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/17 11:57;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2101
","20/Nov/17 12:07;githubbot;oscerd commented on issue #2101: CAMEL-12016 : ChannelFuture is not clearly erased from the pool on connection error
URL: https://github.com/apache/camel/pull/2101#issuecomment-345677314
 
 
   Thanks for the PR. It has been merged on master and backported to 2.20.x, 2.19.x and 2.18.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot create queue/message for Azure,CAMEL-11999,13117192,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,09/Nov/17 06:41,13/Nov/17 14:10,13/Mar/19 22:20,10/Nov/17 08:11,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-azure,,,,,,0,,,,"The Azure Storage Queue API may have changed unnoticed since the component was incepted. 
Currently it is broken in multiple places.

CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/1819",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-09 08:40:55.965,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 13 14:10:33 UTC 2017,,,,,,,0|i3mkvr:,9223372036854775807,,,,,,,,,,"09/Nov/17 08:40;githubbot;tdiesler opened a new pull request #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Nov/17 08:40;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/2087

    [CAMEL-11999] Cannot create queue/message for Azure

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11999

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2087.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2087
    
----
commit 517be1c23e3b5a9c00182953357d921a34df6d2a
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-11-09T05:55:27Z

    [CAMEL-11999] Cannot create queue/message for Azure

----
","10/Nov/17 07:09;githubbot;oscerd commented on issue #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087#issuecomment-343392201
 
 
   @davsclaus can we pull this one in 2.20.x before the 2.20.1 cut or do we have to wait?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Nov/17 07:29;githubbot;davsclaus commented on issue #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087#issuecomment-343395613
 
 
   @onders86 +1 to backport

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Nov/17 07:37;githubbot;davsclaus commented on issue #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087#issuecomment-343396880
 
 
   Also seems like you need to fix checkstyle

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Nov/17 08:11;githubbot;oscerd commented on issue #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087#issuecomment-343404194
 
 
   Thanks for the PR.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Nov/17 08:11;githubbot;oscerd closed pull request #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-azure/pom.xml b/components/camel-azure/pom.xml
index d8e94daca95..1e7c7aacdb1 100644
--- a/components/camel-azure/pom.xml
+++ b/components/camel-azure/pom.xml
@@ -62,6 +62,11 @@
       <artifactId>camel-test-spring</artifactId>
       <scope>test</scope>
     </dependency>
+    <dependency>
+        <groupId>org.slf4j</groupId>
+        <artifactId>slf4j-log4j12</artifactId>
+        <scope>test</scope>
+    </dependency>
   </dependencies>
 
 </project>
diff --git a/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceComponent.java b/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceComponent.java
index 42bd47df930..572989c6333 100644
--- a/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceComponent.java
+++ b/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceComponent.java
@@ -42,15 +42,20 @@ protected Endpoint createEndpoint(String uri, String remaining, Map<String, Obje
         if (remaining != null) {
             parts = remaining.split(""/""); 
         }
-        if (parts == null || parts.length < 2) {
-            throw new IllegalArgumentException(""The account and queue names must be specified."");
-        }
-        if (parts.length > 2) {
+        if (parts == null || parts.length < 1) 
+            throw new IllegalArgumentException(""The account name must be specified."");
+
+        QueueServiceOperations operation = configuration.getOperation();
+        if (operation != null && operation != QueueServiceOperations.listQueues && parts.length < 2) 
+            throw new IllegalArgumentException(""The queue name must be specified."");
+
+        if (parts.length > 2) 
             throw new IllegalArgumentException(""Only the account and queue names must be specified."");
-        }
         
         configuration.setAccountName(parts[0]);
-        configuration.setQueueName(parts[1]);
+        
+        if (parts.length > 1)
+            configuration.setQueueName(parts[1]);
         
         checkCredentials(configuration);
         
diff --git a/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceConfiguration.java b/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceConfiguration.java
index e85cd2c029f..699e013762c 100644
--- a/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceConfiguration.java
+++ b/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceConfiguration.java
@@ -16,11 +16,12 @@
  */
 package org.apache.camel.component.azure.queue;
 
-import com.microsoft.azure.storage.queue.CloudQueue;
 import org.apache.camel.component.azure.common.AbstractConfiguration;
 import org.apache.camel.spi.UriParam;
 import org.apache.camel.spi.UriParams;
 
+import com.microsoft.azure.storage.queue.CloudQueue;
+
 @UriParams
 public class QueueServiceConfiguration extends AbstractConfiguration {
 
diff --git a/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceUtil.java b/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceUtil.java
index 6f094184cfd..9669dbe762c 100644
--- a/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceUtil.java
+++ b/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceUtil.java
@@ -31,19 +31,12 @@ private QueueServiceUtil() {
     }
     
     public static URI prepareStorageQueueUri(QueueServiceConfiguration cfg) {
-        return prepareStorageQueueUri(cfg, true);
-    }
-
-    public static URI prepareStorageQueueUri(QueueServiceConfiguration cfg, boolean isForMessages) {
         StringBuilder uriBuilder = new StringBuilder();
         uriBuilder.append(""https://"")
             .append(cfg.getAccountName())
             .append(QueueServiceConstants.SERVICE_URI_SEGMENT)
-            .append(""/"")
-            .append(cfg.getQueueName());
-        if (isForMessages) {
-            uriBuilder.append(""/messages"");
-        }
+            .append(""/"" + cfg.getQueueName());
+        
         return URI.create(uriBuilder.toString());
     }
     
@@ -73,7 +66,9 @@ public static StorageCredentials getAccountCredentials(QueueServiceConfiguration
     public static void retrieveMessage(Exchange exchange, QueueServiceConfiguration cfg) throws Exception {
         CloudQueue client = createQueueClient(cfg);
         QueueServiceRequestOptions opts = getRequestOptions(exchange);  
-        CloudQueueMessage message = client.retrieveMessage(cfg.getMessageVisibilityDelay(),
+        int visibilityTimeout = cfg.getMessageVisibilityDelay();
+        visibilityTimeout = visibilityTimeout != 0 ? visibilityTimeout : 30;
+        CloudQueueMessage message = client.retrieveMessage(visibilityTimeout,
                                opts.getRequestOpts(), opts.getOpContext());
         ExchangeUtil.getMessageForResponse(exchange).setBody(message);
     }
diff --git a/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceComponentConfigurationTest.java b/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceComponentConfigurationTest.java
index ac3e3c165d5..111812d03d9 100644
--- a/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceComponentConfigurationTest.java
+++ b/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceComponentConfigurationTest.java
@@ -136,10 +136,10 @@ public void testTooManyPathSegments() throws Exception {
     public void testTooFewPathSegments() throws Exception {
         QueueServiceComponent component = new QueueServiceComponent(context);
         try {
-            component.createEndpoint(""azure-queue://camelazure"");
+            component.createEndpoint(""azure-queue://camelazure?operation=addMessage"");
             fail();
         } catch (IllegalArgumentException ex) {
-            assertEquals(""The account and queue names must be specified."", ex.getMessage());
+            assertEquals(""The queue name must be specified."", ex.getMessage());
         }
     }
     
diff --git a/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceProducerTest.java b/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceProducerTest.java
new file mode 100644
index 00000000000..bc3107f80a6
--- /dev/null
+++ b/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceProducerTest.java
@@ -0,0 +1,116 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.azure.queue;
+
+import java.util.Hashtable;
+import java.util.Iterator;
+import java.util.Properties;
+
+import javax.naming.Context;
+import javax.naming.InitialContext;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.impl.DefaultCamelContext;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Assert;
+import org.junit.Assume;
+import org.junit.Test;
+
+import com.microsoft.azure.storage.OperationContext;
+import com.microsoft.azure.storage.StorageCredentials;
+import com.microsoft.azure.storage.StorageCredentialsAccountAndKey;
+import com.microsoft.azure.storage.queue.CloudQueue;
+import com.microsoft.azure.storage.queue.CloudQueueMessage;
+
+public class QueueServiceProducerTest {
+
+    private static final String AZURE_STORAGE_QUEUE = ""AZURE_STORAGE_QUEUE"";
+
+    @Test
+    public void testAppendQueue() throws Exception {
+
+        StorageCredentials creds = getStorageCredentials(""camelqueue"", System.getenv(AZURE_STORAGE_QUEUE));
+        Assume.assumeNotNull(""Credentials not null"", creds);
+
+        OperationContext.setLoggingEnabledByDefault(true);
+        
+        CamelContext camelctx = createCamelContext(creds);
+        camelctx.addRoutes(new RouteBuilder() {
+            public void configure() throws Exception {
+                from(""direct:createQueue"")
+                .to(""azure-queue://camelqueue/queue1?credentials=#creds&operation=createQueue"");
+
+                from(""direct:listQueues"")
+                .to(""azure-queue://camelqueue?credentials=#creds&operation=listQueues"");
+
+                from(""direct:deleteQueue"")
+                .to(""azure-queue://camelqueue/queue1?credentials=#creds&operation=deleteQueue"");
+
+                from(""direct:addMessage"")
+                .to(""azure-queue://camelqueue/queue1?credentials=#creds&operation=addMessage"");
+
+                from(""direct:retrieveMessage"")
+                .to(""azure-queue://camelqueue/queue1?credentials=#creds&operation=retrieveMessage"");
+            }
+        });
+
+        camelctx.start();
+        try {
+            ProducerTemplate producer = camelctx.createProducerTemplate();
+            
+            Iterator<?> it = producer.requestBody(""direct:listQueues"", null, Iterable.class).iterator();
+            Assert.assertFalse(""No more queues"", it.hasNext());
+
+            producer.sendBody(""direct:addMessage"", ""SomeMsg"");
+            
+            it = producer.requestBody(""direct:listQueues"", null, Iterable.class).iterator();
+            Assert.assertTrue(""Has queues"", it.hasNext());
+            CloudQueue queue = (CloudQueue) it.next();
+            Assert.assertEquals(""queue1"", queue.getName());
+            Assert.assertFalse(""No more queues"", it.hasNext());
+            
+            try {
+                CloudQueueMessage msg = producer.requestBody(""direct:retrieveMessage"", null, CloudQueueMessage.class);
+                Assert.assertNotNull(""Retrieve a message"", msg);
+                Assert.assertEquals(""SomeMsg"", msg.getMessageContentAsString());
+            } finally {
+                queue.delete();
+            }
+            
+        } finally {
+            camelctx.stop();
+        }
+    }
+
+    private StorageCredentials getStorageCredentials(String account, String key) {
+        return key != null ? new StorageCredentialsAccountAndKey(account, key) : null;
+    }
+
+    private CamelContext createCamelContext(StorageCredentials credentials) throws Exception {
+        JndiRegistry registry = new JndiRegistry(createJndiContext());
+        registry.bind(""creds"", credentials);
+        return new DefaultCamelContext(registry);
+    }
+
+    private Context createJndiContext() throws Exception {
+        Properties properties = new Properties();
+        properties.put(""java.naming.factory.initial"", ""org.apache.camel.util.jndi.CamelInitialContextFactory"");
+        return new InitialContext(new Hashtable<Object, Object>(properties));
+    }
+}
\ No newline at end of file
diff --git a/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceUtilTest.java b/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceUtilTest.java
index 40bf2a4d0f2..85a7216433f 100644
--- a/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceUtilTest.java
+++ b/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceUtilTest.java
@@ -32,42 +32,34 @@
     @Test
     public void testPrepareUri() throws Exception {
         registerCredentials();
-        
+
         QueueServiceComponent component = new QueueServiceComponent(context);
-        QueueServiceEndpoint endpoint = 
-            (QueueServiceEndpoint) component.createEndpoint(""azure-queue://camelazure/testqueue?credentials=#creds"");
-        URI uri = 
-            QueueServiceUtil.prepareStorageQueueUri(endpoint.getConfiguration());
-        assertEquals(""https://camelazure.queue.core.windows.net/testqueue/messages"", uri.toString());
+        QueueServiceEndpoint endpoint = (QueueServiceEndpoint) component.createEndpoint(""azure-queue://camelazure/testqueue?credentials=#creds"");
+        URI uri = QueueServiceUtil.prepareStorageQueueUri(endpoint.getConfiguration());
+        assertEquals(""https://camelazure.queue.core.windows.net/testqueue"", uri.toString());
     }
 
     @Test
     public void testGetConfiguredClient() throws Exception {
-        CloudQueue client = 
-            new CloudQueue(URI.create(""https://camelazure.queue.core.windows.net/testqueue/messages""),
-                           newAccountKeyCredentials());
-        
+        CloudQueue client = new CloudQueue(URI.create(""https://camelazure.queue.core.windows.net/testqueue""), newAccountKeyCredentials());
         JndiRegistry registry = (JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry();
         registry.bind(""azureQueueClient"", client);
-        
+
         QueueServiceComponent component = new QueueServiceComponent(context);
-        QueueServiceEndpoint endpoint = 
-            (QueueServiceEndpoint) component.createEndpoint(""azure-queue://camelazure/testqueue?azureQueueClient=#azureQueueClient"");
+        QueueServiceEndpoint endpoint = (QueueServiceEndpoint) component.createEndpoint(""azure-queue://camelazure/testqueue?azureQueueClient=#azureQueueClient"");
         assertSame(client, QueueServiceUtil.getConfiguredClient(endpoint.getConfiguration()));
     }
+
     @Test
     public void testGetConfiguredClientUriMismatch() throws Exception {
-        CloudQueue client = 
-            new CloudQueue(URI.create(""https://camelazure.queue.core.windows.net/testqueue""),
-                           newAccountKeyCredentials());
-        
+        CloudQueue client = new CloudQueue(URI.create(""https://camelazure.queue.core.windows.net/testqueue""), newAccountKeyCredentials());
+
         JndiRegistry registry = (JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry();
         registry.bind(""azureQueueClient"", client);
-        
+
         QueueServiceComponent component = new QueueServiceComponent(context);
-        QueueServiceEndpoint endpoint = 
-            (QueueServiceEndpoint) component.createEndpoint(""azure-queue://camelazure/testqueue2?azureQueueClient=#azureQueueClient"");
-        
+        QueueServiceEndpoint endpoint = (QueueServiceEndpoint) component.createEndpoint(""azure-queue://camelazure/testqueue2?azureQueueClient=#azureQueueClient"");
+
         try {
             QueueServiceUtil.getConfiguredClient(endpoint.getConfiguration());
             fail();
@@ -82,7 +74,6 @@ private void registerCredentials() {
     }
 
     private StorageCredentials newAccountKeyCredentials() {
-        return new StorageCredentialsAccountAndKey(""camelazure"", 
-                                                   Base64.encode(""key"".getBytes()));
+        return new StorageCredentialsAccountAndKey(""camelazure"", Base64.encode(""key"".getBytes()));
     }
 }
diff --git a/components/camel-azure/src/test/resources/log4j.properties b/components/camel-azure/src/test/resources/log4j.properties
new file mode 100644
index 00000000000..6b2698af632
--- /dev/null
+++ b/components/camel-azure/src/test/resources/log4j.properties
@@ -0,0 +1,36 @@
+###
+# #%L
+# Wildfly Camel :: Testsuite
+# %%
+# Copyright (C) 2013 - 2014 RedHat
+# %%
+# Licensed under the Apache License, Version 2.0 (the ""License"");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#      http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# #L%
+###
+
+# Root logger option
+log4j.rootLogger=DEBUG, file, console
+ 
+# Direct log messages to a log file
+log4j.appender.file=org.apache.log4j.FileAppender
+log4j.appender.file.file=target/test.log
+log4j.appender.file.layout=org.apache.log4j.PatternLayout
+log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p [%c] (%t) - %m%n
+log4j.appender.file.threshold=DEBUG
+ 
+# Direct log messages to console
+log4j.appender.console=org.apache.log4j.ConsoleAppender
+log4j.appender.console.target=System.out
+log4j.appender.console.layout=org.apache.log4j.PatternLayout
+log4j.appender.console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p [%c] (%t) - %m%n
+log4j.appender.console.threshold=WARN


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Nov/17 08:11;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2087
","13/Nov/17 13:40;githubbot;onders86 commented on issue #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087#issuecomment-343921649
 
 
   @davsclaus i guess i missed your message. I will cherry-pick. Thanks.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Nov/17 14:10;githubbot;oscerd commented on issue #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087#issuecomment-343929732
 
 
   I guess the message was for me. I already cherry picked and backported. Thanks @onders86 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,
cluster-service : only the first event listener is notified about cluster events,CAMEL-11900,13108901,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,12/Oct/17 12:24,11/Nov/17 11:42,13/Mar/19 22:20,12/Oct/17 13:13,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-core,,,,,,0,clustering,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-10-12 12:24:50.0,,,,,,,0|i3l6q7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot create a component based on the SqlComponent,CAMEL-12001,13117329,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,kstam,kstam,09/Nov/17 16:52,10/Nov/17 08:44,13/Mar/19 22:20,10/Nov/17 08:44,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-sql,,,,,,0,,,,"I created a the following component

https://github.com/KurtStam/connectors/blob/sql-connector/connectors/sql/sql-connector/src/main/java/io/syndesis/connector/sql/SqlConnectorComponent.java

and this route just never gets executed

https://github.com/KurtStam/connectors/blob/sql-connector/connectors/sql/sql-connector/src/test/java/io/syndesis/connector/sql/SqlConnectorComponentTest.java#L107

And not any of the getBefore/AfterProducer methods are called either, which I think had to do with the fact that the SqlComponent is not a DefaultComponent.

I tried with v2.20.0 as well as v2.21.0-SNAPSHOT",any,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-10 05:52:50.729,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 10 08:44:19 UTC 2017,,,,,,,0|i3mlq7:,9223372036854775807,,,,,,,,,,10/Nov/17 05:52;lb;[~gzurowski] any chance to recut 2.20.1 so it includes this one ?,"10/Nov/17 08:30;gzurowski;@[~lb]: Sure, not a problem.  I will cut another RC for 2.20.1 after this issue is resolved.","10/Nov/17 08:44;lb;[~gzurowski] thx, done",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MQTT Connection loop,CAMEL-11628,13092122,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fabryprog,fabryprog,03/Aug/17 08:34,04/Nov/17 13:20,13/Mar/19 22:20,04/Nov/17 09:45,2.17.0,,,,,,,,,,,,,,,2.19.5,2.20.1,2.21.0,,,camel-mqtt,,,,,,1,,,,"Hello everyone, i found an particular bug situation

I have same mqtt producer with high volume traffic. When my application losts tcp connection to mqtt server i have follow connection loop error. This bug is sometime verified because it depend by multiple factors (load machine, load mqtt server, payload, etc)

I am reading source code and i suppose that the bug is introduced by volatile variable connected (it isn't thread-safe)

To resolve this bug you must refactoring all MQTTEndpoint connection code.


[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-11 01:54:33.77,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sat Nov 04 13:20:22 UTC 2017,,,,,,,0|i3id3j:,9223372036854775807,,,,,,,,,,11/Aug/17 01:54;davsclaus;Was there some code changes contributed as PR that fixes this?,"11/Aug/17 08:22;fabryprog;No.

I tried to fix it but the bug is on the fuse library!!!!",12/Sep/17 12:54;davsclaus;Have you been able to re-produce this? Also there is camel-paho as MQTT component which possible is a better library to use than camel-mqtt.,"09/Oct/17 19:22;bapowell;I, too, could really use a fix for this bug.

By the way, camel-paho isn't always an option, due to things like the lack of ability to dynamically specify the topic for a producer endpoint. With the mqtt component this is possible via the CamelMQTTPublishTopic header.

As for reproducing this bug:

1. Use the route listed below.
2. Start an MQTT broker.
    2.a. I've tried Mosquitto 1.4.14 under RHEL 7.2 as well as Mosquitto 1.4.11 under Windows 7.
3. Start the route.
4. After a few seconds, kill the MQTT broker.
5. Wait roughly 30 seconds, at which point you'll start gettting ""Failed delivery..."" errors (and ""camel:route-list"" will start showing failed exchanges).
6. Start the MQTT broker back up.
7. Bug shows up:

Camel log starts outputting tons of the following messages:
    INFO  | spatch-DEFAULT-1 | MQTTEndpoint                     | 153 - org.apache.camel.camel-mqtt - 2.17.0 | MQTT Connection connected to tcp://localhost:1883

Mosquitto repeatedly outputs the following set of message:
    New client connected from 127.0.0.1 as tmr2mqttClient (c1, k30).
    Sending CONNACK to tmr2mqttClient (0, 0)
    New connection from 127.0.0.1 on port 1883.
    Client tmr2mqttClient already connected, closing old connection.
    Client tmr2mqttClient disconnected.

Mosquitto's behavior is indicative of an MQTT client process (Camel in this case) using the same clientID to establish a new connection, when a connection using that same clientID already exists. Per MQTT spec, Mosquitto will disconnect the current connection with that clientID, and then accept the new connection.

+Route to use+

{code:xml}
  <camelContext id=""blueprint-ctx-for-mqtt"" xmlns=""http://camel.apache.org/schema/blueprint"">
    <route id=""timerToMqtt"">
      <from uri=""timer:toMqtt?period=1000""/>
      <setHeader headerName=""CamelMQTTPublishTopic"">
          <simple>camelTopic-${date:now:ss}</simple>
      </setHeader>
      <setBody>
          <simple>${date:now:yyyyMMdd-HH:mm:ss.SSS}</simple>
      </setBody>
      <log message=""The message contains ${body}""/>
      <to uri=""mqtt://tmr2mqttPublisher?host=tcp://localhost:1883&amp;clientId=tmr2mqttClient&amp;cleanSession=true&amp;qualityOfService=AtMostOnce&amp;connectWaitInSeconds=5&amp;reconnectAttemptsMax=5&amp;reconnectDelay=500&amp;reconnectDelayMax=5000""/>
    </route>
  </camelContext>
{code}
",03/Nov/17 10:24;davsclaus;In Camel 2.21 you can now use a header to override the topic in camel-paho,"03/Nov/17 15:37;bapowell;That's good to know, Claus. Thanks for the inform.

The Fusesource MQTT client still seems to be a bit more ""robust"" than paho, after rudimentary testing on my part, but I suspect the paho component is the one we should focus on using going forward, as it has the full Eclipse IoT effort behind it.","03/Nov/17 15:42;bapowell;I investigated this bug, found what I believe is the culprit, fixed it, and tested successfully.

I'll submit a PR with the fix.

But in a nutshell, the fix was to add this at the top of the MQTTEndpoint createConnection() method:


{code:java}
    protected void createConnection() {
        if (connection != null) {
            // In connect(), in the connection.connect() callback, onFailure() doesn't seem to ever be called, so forcing the disconnect here.
            // Without this, the fusesource MQTT client seems to be holding the old connection object, and connection contention can ensue.
            connection.disconnect(null);
        }
{code}
    	
","03/Nov/17 16:42;githubbot;bapowell opened a new pull request #2077: CAMEL-11628: camel-mqtt - Fix in MQTTEndpoint for connection loop bug.
URL: https://github.com/apache/camel/pull/2077
 
 
   https://issues.apache.org/jira/browse/CAMEL-11628

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Nov/17 16:42;githubbot;GitHub user bapowell opened a pull request:

    https://github.com/apache/camel/pull/2077

    CAMEL-11628: camel-mqtt - Fix in MQTTEndpoint for connection loop bug.

    https://issues.apache.org/jira/browse/CAMEL-11628

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bapowell/camel camel-2.17.x-mqtt-fix-11628

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2077.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2077
    
----
commit f88506c28585ede9eec6ed5eccc82f1eb977597f
Author: Brad Powell <bapowell@sbcglobal.net>
Date:   2017-11-03T16:36:56Z

    CAMEL-11628: camel-mqtt - Fix in MQTTEndpoint for connection loop bug.

----
",04/Nov/17 09:45;davsclaus;Thanks for the PR,"04/Nov/17 09:46;githubbot;davsclaus commented on issue #2077: CAMEL-11628: camel-mqtt - Fix in MQTTEndpoint for connection loop bug.
URL: https://github.com/apache/camel/pull/2077#issuecomment-341884407
 
 
   Thanks for the PR it has been merged. Do you mind closing this?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Nov/17 13:20;githubbot;bapowell closed pull request #2077: CAMEL-11628: camel-mqtt - Fix in MQTTEndpoint for connection loop bug.
URL: https://github.com/apache/camel/pull/2077
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java b/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java
index d0797782997..c9b38701041 100644
--- a/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java
+++ b/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java
@@ -230,6 +230,12 @@ protected void doStart() throws Exception {
     }
 
     protected void createConnection() {
+        if (connection != null) {
+            // In connect(), in the connection.connect() callback, onFailure() doesn't seem to ever be called, so forcing the disconnect here.
+            // Without this, the fusesource MQTT client seems to be holding the old connection object, and connection contention can ensue.
+            connection.disconnect(null);
+        }
+    	
         connection = configuration.callbackConnection();
 
         connection.listener(new Listener() {
@@ -328,7 +334,7 @@ public void onFailure(Throwable value) {
 
             }
 
-            public void onFailure(Throwable value) {
+            public void onFailure(Throwable value) {  // this doesn't appear to ever be called
                 LOG.warn(""Failed to connect to "" + configuration.getHost() + "" due "" + value.getMessage());
                 promise.onFailure(value);
                 connection.disconnect(null);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Nov/17 13:20;githubbot;Github user bapowell closed the pull request at:

    https://github.com/apache/camel/pull/2077
",,,,,,,,,,,,,,,,,,,,
camel-jetty - Problem with latest Spring Boot 1.5.8,CAMEL-11988,13115870,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Nov/17 09:37,03/Nov/17 09:38,13/Mar/19 22:20,03/Nov/17 09:38,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-jetty,,,,,,0,,,,"See user forum
http://camel.465427.n5.nabble.com/camel-jetty-and-jetty-version-9-4-7-v20170914-td5814774.html

Also it causes camel-ribbon-starter tests to fail",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-11-03 09:37:27.0,,,,,,,0|i3mcr3:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-karaf-commands deployment failed on karaf 4.0,CAMEL-11894,13108530,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,frouleau,frouleau,11/Oct/17 08:38,01/Nov/17 13:22,13/Mar/19 22:20,12/Oct/17 08:32,2.19.3,,,,,,,,,,,,,,,2.19.4,2.20.1,2.21.0,,,camel-core,,,,,,0,,,,"When deploying on karaf 4.0, there ar an unresolved dependencies on the following packages preventing camel-karaf-commands to be deployed:
 - org.apache.karaf.shell.api.action.lifecycle [4.1,5)
 - org.apache.karaf.shell.api.console [4.1,5)",Karaf 4.0.x,,,,,,,,,,,,,,,,,,,,,CAMEL-11974,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-11 08:43:38.377,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 12 09:18:38 UTC 2017,,,,,,,0|i3l4fz:,9223372036854775807,,,,,,,,,,"11/Oct/17 08:43;githubbot;GitHub user frouleau opened a pull request:

    https://github.com/apache/camel/pull/2022

    CAMEL-11894: camel-karaf-commands deployment failed on karaf 4.0

    Fix OSGi's version range for the missing package

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/frouleau/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2022.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2022
    
----
commit 0caa69cb030646210ff71cfa030a314a9b9b5621
Author: Frédérik Rouleau <frouleau@prosodie.com>
Date:   2017-10-11T08:39:53Z

    CAMEL-11894: camel-karaf-commands deployment failed on karaf 4.0

----
","12/Oct/17 09:18;githubbot;Github user frouleau closed the pull request at:

    https://github.com/apache/camel/pull/2022
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
onCompletion does not trigger on failure if split is in route,CAMEL-11045,13058140,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dermoritz,dermoritz,22/Mar/17 08:20,01/Nov/17 12:44,13/Mar/19 22:20,01/Nov/17 12:44,,,,,,,,,,,,,,,,2.19.4,2.20.1,2.21.0,,,camel-core,,,,,,1,,,,"I created a test to reproduce the problem:

{code}
import org.apache.camel.CamelExecutionException;
import org.apache.camel.Endpoint;
import org.apache.camel.EndpointInject;
import org.apache.camel.RoutesBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

import java.util.Arrays;

public class OnCompletionTest extends CamelTestSupport{

    @EndpointInject(uri = ""direct:in"")
    private Endpoint in;
    @EndpointInject(uri = ""mock:completion"")
    private MockEndpoint mockComp;
    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint mockOut;

    @Test
    public void good() throws InterruptedException {
        mockComp.setExpectedMessageCount(1);
        mockOut.setExpectedMessageCount(2);
        //
        context.createProducerTemplate().sendBody(in, Arrays.asList(""1"",""2""));
        //
        assertMockEndpointsSatisfied();
    }

    @Test
    public void exception() throws InterruptedException {
        mockComp.setExpectedMessageCount(1);
        mockOut.setExpectedMessageCount(2);

        //
        mockOut.whenAnyExchangeReceived(exchange -> {throw new IllegalArgumentException("""");});
        try {
            context.createProducerTemplate().sendBody(in, Arrays.asList(""1"",""2""));
            fail();
        } catch (CamelExecutionException e){

        }
        //
        mockOut.assertIsSatisfied();
        mockComp.assertIsSatisfied();
    }


    @Override
    public boolean isUseRouteBuilder() {
        return true;
    }

    @Override
    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                // @formatter:off
                from(in)
                        .onCompletion().to(mockComp).end()
                        .split().body()
                            //.stopOnException()
                            //.shareUnitOfWork()
                .to(mockOut)
                ;
                // @formatter:on
            }
        };
    }
}
{code}

I would expect that both tests pass. In case of exception the onCompletion is not triggered. Documentation says it should trigger in all cases. ""onFailureOnly()"" doesn't help either. I also tried ""stopOnException()"" and ""shareUnitOfWork()"" in some combinations with no avail.

If this works as intended there should be at least a hint in the documentation.
For the sake of completeness i also asked here for a solution/ workaround: http://stackoverflow.com/questions/42928208/camel-oncompletion-not-working-on-exception-after-a-split-bug",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-01 12:44:53.22,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 01 12:44:53 UTC 2017,,,,,,,0|i3cmd3:,9223372036854775807,,,,,,,,,,"01/Nov/17 12:44;davsclaus;Thanks for reporting, and sorry for the delay at looking into this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Uri matching does not match request type,CAMEL-11951,13112351,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,robert.hillier,robert.hillier,26/Oct/17 17:44,31/Oct/17 19:00,13/Mar/19 22:20,31/Oct/17 10:24,2.20.0,,,,,,,,,,,,,,,2.19.4,2.20.1,2.21.0,,,camel-http-common,,,,,,0,,,,"I had previously described the problem here:
https://stackoverflow.com/questions/46936348/apache-camel-rest-dsl-405-method-not-allowed

It appears that the problem is down to a possible bug in the way URIs are matched (not to mention my rather obscure use-case)

I have a number of REST-DSL endpoints with the same URI but different request types (POST, PUT, GET, DELETE).  In my case, the URI is getting selected by
HttpServletResolveConsumerStrategy.resolve (in addition to these, I have some specific endpoints with wildcards in them)

This method matches the URI, but not the request type.  When I send a GET request, it returns the first consumer candidate it finds which, in my case, always seems to be PUT.  Later, when CamelContinuationServlet.doService checks that the request type and cadidate type match, they don't.  It then returns 405 Method Not Allowed.

I believe that the HttpServletResolveConsumerStrategy.resolve method IN camel-hhtp-common should check the request type as well as the URI.","camel-spring, camel-jetty
OS - RHEL",,,,,,,,,,,,,,,,,,,,,,,,,,,,,30/Oct/17 17:30;robert.hillier;camel-bug-demo.zip;https://issues.apache.org/jira/secure/attachment/12894799/camel-bug-demo.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-10-28 08:58:22.932,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 31 19:00:36 UTC 2017,,,,,,,0|i3lr2f:,9223372036854775807,,,,,,,,,,28/Oct/17 08:58;davsclaus;Its the rest based HttpRestServletResolveConsumerStrategy that should be in-use as it cater for HTTP methods as well,28/Oct/17 09:00;davsclaus;Can you post a sample project to github or attach a .zip,"30/Oct/17 12:37;robert.hillier;As requested, Camel Bug Demo project attached.

To start the project, run:
mvn clean install camel:run

The project contains a number of routes which make http calls to a dummy server running on a Heroku instance.  There are two REST calls which demonstrate the problem:

http://{{serverAddr}}/integration/api/v1/customer/123456/devices

http://{{serverAddr}}/integration/api/v1/customer/123456/detail

The ""devices"" request is a specific uri, which performs some simple aggregation.  It contains a variable part in it's URI, used in subsequent calls.  This one is working fine

The ""detail"" request should be simply proxied through to the other server.  However, this call returns a 405 Method Not Allowed.

Furthermore, if you comment out the ""devices"" request and restart, the proxied ""detail"" call then works fine.","30/Oct/17 15:43;vrlgohel;Hi Robert, 

Your attached reproducer is missing, mandatory 'location' attribute in <propertyPlaceholder> in your route file. Can you make the changes and upload the reproducer so that we can check ? Which is the property file you are referring in the reproducer ?

{code:java}
<propertyPlaceholder id=""properties"">
			<propertiesLocation resolver=""classpath""
				path=""mobile-gateway.properties"" optional=""true"" />
			<propertiesLocation resolver=""classpath"" path=""info""
				optional=""false"" />
		</propertyPlaceholder>
{code}
","30/Oct/17 17:31;robert.hillier;Apologies, the properties aren't used in this demo, and can be removed.  I have updated the source and attached a zip file.

Many thanks,

Rob","31/Oct/17 09:41;davsclaus;The attached sample code does NOT have the ""detail"" REST service, there is only devices.","31/Oct/17 09:51;davsclaus;It works fine when I do

{code}
      <get uri=""/v1/customer/{custId}/devices"" consumes=""application/json"" produces=""application/json"">
        <description>Queries all devices for a single customer</description>
        <to uri=""direct:getCustomerDevices"" />
      </get>
      <get uri=""/v1/customer/{custId}/detail"" consumes=""application/json"" produces=""application/json"">
        <description>Customer detail</description>
        <to uri=""direct:getCustomer"" />
      </get>
{code}

And then just make those routes log
{code}
    <route id=""getCustomer"">
      <description>Queries the customer details from the heroku server</description>
      <from uri=""direct:getCustomer"" />
      <log message=""getCustomer detail ${header.custId}""/>
    </route>
    
    <route id=""getDevice"">
      <description>Queries the device details from heroku server</description>
      <from uri=""direct:getDevice"" />
      <log message=""getCustomer device ${header.custId}""/>
    </route>
{code}

And then I call Camel via these 2 curls
{code}
davsclaus:/Users/davsclaus/Downloads/camel-bug-demo/$ curl http://localhost:8078/integration/api/v1/customer/123456/devices
davsclaus:/Users/davsclaus/Downloads/camel-bug-demo/$ curl http://localhost:8078/integration/api/v1/customer/999999/detail
{code}

Then I can see it calls different rest-dsl operation

{code}
[INFO ] 2017-10-31 10:49:23.692 [qtp1739303520-24] getCustomerDevices:159 - getCustomer devices 123456
[INFO ] 2017-10-31 10:49:40.139 [qtp1739303520-19] getCustomer:159 - getCustomer detail 999999
{code}
","31/Oct/17 09:52;robert.hillier;Claus,

That's correct.  The ""detail"" request gets proxied through to the backend service by one of the four proxy REST services.  These are the ones with the ""/v1?matchOnUriPrefix=true&amp;chunked=false"" uri.  But it is not selecting the correct service, as described above.

When I stepped through the code, I noticed that it is selecting the best matching URI, but it selects the first one it finds (which always seems to be ""put"").  When it later checks the restriction against the incoming request type, it rejects with 405.

Thanks,

Rob","31/Oct/17 10:01;robert.hillier;Claus,

As described, the ""detail"" request needs to be handled by one of the proxy requests, and not a specific request.  The proxy works fine, until I add REST services that contain variable parameters.  If you comment out the ""detail"" request, you'll find that the requests are proxied successfully.  When they are enabled, proxied requests return 405.

Thanks,

Rob","31/Oct/17 10:05;davsclaus;Ah good it, yeah reproduced the bug and working on a fix","31/Oct/17 10:09;davsclaus;Got it fixed

Sending these requests
{code}
davsclaus:/Users/davsclaus/Downloads/camel-bug-demo/$ curl http://localhost:8078/integration/api/v1/customer/999999/detail
davsclaus:/Users/davsclaus/Downloads/camel-bug-demo/$ curl http://localhost:8078/integration/api/v1/customer/123456/devices
davsclaus:/Users/davsclaus/Downloads/camel-bug-demo/$ curl http://localhost:8078/integration/api/v1/customer/123456/detail
davsclaus:/Users/davsclaus/Downloads/camel-bug-demo/$ curl -XPUT http://localhost:8078/integration/api/v1/customer/123456/detail
{code}

And it logs now

{code}
[INFO ] 2017-10-31 11:08:09.257 [qtp810576909-21] proxyOutbound:159 - Proxied call GET - /customer/999999/detail
[INFO ] 2017-10-31 11:08:17.556 [qtp810576909-16] getCustomerDevices:159 - getCustomer devices 123456
[INFO ] 2017-10-31 11:08:24.964 [qtp810576909-18] proxyOutbound:159 - Proxied call GET - /customer/123456/detail
[INFO ] 2017-10-31 11:08:44.232 [qtp810576909-18] proxyOutbound:159 - Proxied call PUT - /customer/123456/detail
{code}","31/Oct/17 10:37;robert.hillier;Claus,

Many thanks for this, and very nicely done too.

What's the process for getting a fixed version?  Will I need to wait for 2.20.1?  Also, should I close the issue?

Regards,

Rob",31/Oct/17 12:47;davsclaus;Yes wait for the release,"31/Oct/17 13:04;robert.hillier;Final question is of course, when will that be?
Thanks,
Rob","31/Oct/17 16:09;davsclaus;Keep an eye on
http://camel.465427.n5.nabble.com/Next-round-of-patch-releases-Camel-2-19-4-and-2-20-1-td5814926.html",31/Oct/17 19:00;robert.hillier;Will do.  Thanks once again for your help.,,,,,,,,,,,,,,,,,
camel-spring-boot - Actuator endpoints for MVC should only trigger if web application,CAMEL-11963,13112826,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Oct/17 15:50,28/Oct/17 15:56,13/Mar/19 22:20,28/Oct/17 15:56,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-spring-boot,,,,,,0,,,,"You can get errors like
{code}
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'healthChecksMvcEndpoint' defined in class path resource [org/apache/camel/spring/boot/actuate/endpoint/CamelHealthCheckEndpointAutoConfiguration.class]: Post-processing of merged bean definition failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/http/ResponseEntity
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:526) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]
	at com.camelinaction.ClientApplication.main(ClientApplication.java:10) [classes!/:na]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-10-28 15:50:41.0,,,,,,,0|i3ltzj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistent jar versions with apache curator,CAMEL-11950,13112345,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,26/Oct/17 16:57,27/Oct/17 06:50,13/Mar/19 22:20,27/Oct/17 06:50,,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-zookeeper,,,,,,0,,,,CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/2243,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-26 16:58:47.312,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 27 06:50:46 UTC 2017,,,,,,,0|i3lr13:,9223372036854775807,,,,,,,,,,"26/Oct/17 16:58;githubbot;tdiesler opened a new pull request #2063: [CAMEL-11950] Inconsistent jar versions with apache curator
URL: https://github.com/apache/camel/pull/2063
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Oct/17 16:58;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/2063

    [CAMEL-11950] Inconsistent jar versions with apache curator

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11950

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2063.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2063
    
----
commit e5cf6131ea79b4ee5b9c17bbaa6ec6d1830334d5
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-10-26T16:58:10Z

    [CAMEL-11950] Inconsistent jar versions with apache curator

----
","26/Oct/17 17:02;githubbot;oscerd commented on issue #2063: [CAMEL-11950] Inconsistent jar versions with apache curator
URL: https://github.com/apache/camel/pull/2063#issuecomment-339732540
 
 
   I'll merge tomorrow

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Oct/17 06:50;githubbot;oscerd commented on issue #2063: [CAMEL-11950] Inconsistent jar versions with apache curator
URL: https://github.com/apache/camel/pull/2063#issuecomment-339888257
 
 
   Thanks @tdiesler the PR has been merged on 2.20.x and master. I'm closing this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Oct/17 06:50;githubbot;oscerd closed pull request #2063: [CAMEL-11950] Inconsistent jar versions with apache curator
URL: https://github.com/apache/camel/pull/2063
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-zookeeper/pom.xml b/components/camel-zookeeper/pom.xml
index 7be8c696576..31cc161656e 100644
--- a/components/camel-zookeeper/pom.xml
+++ b/components/camel-zookeeper/pom.xml
@@ -71,10 +71,14 @@
 
     <dependency>
       <groupId>org.apache.curator</groupId>
+      <artifactId>curator-client</artifactId>
+      <version>${curator-version}</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.curator</groupId>
       <artifactId>curator-framework</artifactId>
       <version>${curator-version}</version>
     </dependency>
-
     <dependency>
       <groupId>org.apache.curator</groupId>
       <artifactId>curator-recipes</artifactId>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Oct/17 06:50;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2063
",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - CamelContextConfiguration afterApplicationStart should trigger later,CAMEL-11945,13111923,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Oct/17 09:59,25/Oct/17 10:03,13/Mar/19 22:20,25/Oct/17 10:03,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-spring-boot,,,,,,0,,,,"Due the change of startup behaviour in Camel 2.20 with regards to Spring then we should let afterApplicationStart be called later.

Also document this API to be more clear when its called.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 25 10:00:57 UTC 2017,,,,,,,0|i3lofj:,9223372036854775807,Regression,,,,,,,,,"25/Oct/17 10:00;davsclaus;See SO
https://stackoverflow.com/questions/46906221/empty-routeservice-with-apache-camel-2-20-0/46929440#46929440",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Atmos component fails to load atmos.properties in a modular class loading environment ,CAMEL-11925,13110661,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,19/Oct/17 12:51,24/Oct/17 08:50,13/Mar/19 22:20,24/Oct/17 08:49,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-atmos,,,,,,0,,,,"The atmos component has a AtmosPropertyManager class which attempts to do:

{code}
AtmosPropertyManager.class.getResource(""/atmos.properties"");
{code}

This assumes the resource is available to the ClassLoader of AtmosPropertyManager. This may not be the case in OSGi or JavaEE containers.

I see there's a [TODO comment|https://github.com/apache/camel/blob/master/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/util/AtmosPropertyManager.java#L26] at the top of this class. So maybe we remove this class and make it so we configure these properties on the component instead?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-20 09:32:17.402,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 24 08:50:10 UTC 2017,,,,,,,0|i3lgo7:,9223372036854775807,,,,,,,,,,20/Oct/17 09:32;davsclaus;Yeah sure you are welcome to work on a patch,"24/Oct/17 08:38;githubbot;jamesnetherton opened a new pull request #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056
 
 
   https://issues.apache.org/jira/browse/CAMEL-11925

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Oct/17 08:38;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/2056

    CAMEL-11925: Migrate atmos properties file configuration to component properties

    https://issues.apache.org/jira/browse/CAMEL-11925

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-11925

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2056.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2056
    
----
commit 1cdd53706431f4fdbfac6294f1e2a2373ba2cc37
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2017-10-24T07:37:32Z

    CAMEL-11925: Migrate atmos properties file configuration to component properties

----
","24/Oct/17 08:39;githubbot;oscerd commented on issue #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056#issuecomment-338917306
 
 
   LGTM

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Oct/17 08:42;githubbot;oscerd commented on issue #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056#issuecomment-338918118
 
 
   Thanks the PR has been merged. I'm closing this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Oct/17 08:42;githubbot;oscerd closed pull request #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-atmos/src/main/docs/atmos-component.adoc b/components/camel-atmos/src/main/docs/atmos-component.adoc
index 9dcbd371756..1db769c8a43 100644
--- a/components/camel-atmos/src/main/docs/atmos-component.adoc
+++ b/components/camel-atmos/src/main/docs/atmos-component.adoc
@@ -15,7 +15,19 @@ from(""atmos:foo/get?remotePath=/path"").to(""mock:test"");
 
 
 // component options: START
-The Atmos component has no options.
+The Atmos component supports 5 options which are listed below.
+
+
+
+[width=""100%"",cols=""2,5,^1,2"",options=""header""]
+|===
+| Name | Description | Default | Type
+| *fullTokenId* (security) | The token id to pass to the Atmos client |  | String
+| *secretKey* (security) | The secret key to pass to the Atmos client |  | String
+| *uri* (advanced) | The URI of the server for the Atmos client to connect to |  | String
+| *sslValidation* (security) | Whether the Atmos client should perform SSL validation | false | boolean
+| *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
+|===
 // component options: END
 
 
diff --git a/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosComponent.java b/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosComponent.java
index 19e8233c9ea..95125fb60c2 100644
--- a/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosComponent.java
+++ b/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosComponent.java
@@ -18,19 +18,32 @@
 
 import java.util.Map;
 
-import org.apache.camel.Endpoint;
+import org.apache.camel.CamelContext;
 import org.apache.camel.component.atmos.util.AtmosOperation;
-import org.apache.camel.component.atmos.util.AtmosPropertyManager;
 import org.apache.camel.component.atmos.validator.AtmosConfigurationValidator;
 import org.apache.camel.impl.UriEndpointComponent;
+import org.apache.camel.spi.Metadata;
 
 public class AtmosComponent extends UriEndpointComponent {
 
+    @Metadata(label = ""security"")
+    private String fullTokenId;
+    @Metadata(label = ""security"")
+    private String secretKey;
+    @Metadata(label = ""advanced"")
+    private String uri;
+    @Metadata(label = ""security"")
+    private boolean sslValidation;
+
     public AtmosComponent() {
         super(AtmosEndpoint.class);
     }
 
-    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
+    public AtmosComponent(CamelContext context) {
+        super(context, AtmosEndpoint.class);
+    }
+
+    protected AtmosEndpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
         AtmosConfiguration configuration = new AtmosConfiguration();
 
         String name = null;
@@ -46,19 +59,19 @@ protected Endpoint createEndpoint(String uri, String remaining, Map<String, Obje
 
         // set options from component
         configuration.setUri(parameters.get(""uri"") == null
-                ? AtmosPropertyManager.getInstance().getProperty(""uri"")
+                ? this.uri
                 : (String) parameters.get(""uri""));
         configuration.setSecretKey(parameters.get(""secretKey"") == null
-                ? AtmosPropertyManager.getInstance().getProperty(""secretKey"")
+                ? this.secretKey
                 : (String) parameters.get(""secretKey""));
         configuration.setLocalPath((String) parameters.get(""localPath""));
         configuration.setRemotePath((String) parameters.get(""remotePath""));
         configuration.setNewRemotePath((String) parameters.get(""newRemotePath""));
         configuration.setQuery((String) parameters.get(""query""));
         configuration.setFullTokenId(parameters.get(""fullTokenId"") == null
-                ? AtmosPropertyManager.getInstance().getProperty(""fullTokenId"")
+                ? this.fullTokenId
                 : (String) parameters.get(""fullTokenId""));
-        configuration.setEnableSslValidation(Boolean.parseBoolean(AtmosPropertyManager.getInstance().getProperty(""sslValidation"")));
+        configuration.setEnableSslValidation(this.sslValidation);
 
         //pass validation test
         AtmosConfigurationValidator.validate(configuration);
@@ -66,8 +79,50 @@ protected Endpoint createEndpoint(String uri, String remaining, Map<String, Obje
         // and then override from parameters
         setProperties(configuration, parameters);
 
-        Endpoint endpoint = new AtmosEndpoint(uri, this, configuration);
-        return endpoint;
+        return new AtmosEndpoint(uri, this, configuration);
+    }
+
+    public String getFullTokenId() {
+        return fullTokenId;
+    }
+
+    /**
+     * The token id to pass to the Atmos client
+     */
+    public void setFullTokenId(String fullTokenId) {
+        this.fullTokenId = fullTokenId;
+    }
+
+    public String getSecretKey() {
+        return secretKey;
     }
 
+    /**
+     * The secret key to pass to the Atmos client
+     */
+    public void setSecretKey(String secretKey) {
+        this.secretKey = secretKey;
+    }
+
+    public String getUri() {
+        return uri;
+    }
+
+    /**
+     * The URI of the server for the Atmos client to connect to
+     */
+    public void setUri(String uri) {
+        this.uri = uri;
+    }
+
+    public boolean isSslValidation() {
+        return sslValidation;
+    }
+
+    /**
+     * Whether the Atmos client should perform SSL validation
+     */
+    public void setSslValidation(boolean sslValidation) {
+        this.sslValidation = sslValidation;
+    }
 }
diff --git a/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/util/AtmosPropertyManager.java b/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/util/AtmosPropertyManager.java
deleted file mode 100644
index b510064861c..00000000000
--- a/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/util/AtmosPropertyManager.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the ""License""); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.camel.component.atmos.util;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URL;
-import java.util.Properties;
-
-public final class AtmosPropertyManager {
-
-    // TODO: this is wrong, this should be configured on the component instead
-    // and no static code please!
-
-    private static Properties properties;
-    private static AtmosPropertyManager instance;
-
-    private AtmosPropertyManager() { }
-
-    public static synchronized AtmosPropertyManager getInstance() throws Exception {
-        if (instance == null) {
-            instance = new AtmosPropertyManager();
-            properties = loadProperties();
-        }
-        return instance;
-    }
-
-    public String getProperty(String key) {
-        return properties.getProperty(key);
-    }
-
-
-    private static Properties loadProperties() throws Exception {
-        URL url = AtmosPropertyManager.class.getResource(""/atmos.properties"");
-        InputStream inStream;
-        try {
-            inStream = url.openStream();
-        } catch (IOException e) {
-            throw new AtmosException(""atmos.properties could not be found"");
-        }
-        properties = new Properties();
-        try {
-            properties.load(inStream);
-        } catch (IOException e) {
-            throw new AtmosException(""atmos.properties can't be read"");
-        }
-        return properties;
-    }
-}
diff --git a/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosComponentTest.java b/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosComponentTest.java
new file mode 100644
index 00000000000..5d341d90ab9
--- /dev/null
+++ b/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosComponentTest.java
@@ -0,0 +1,85 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.atmos;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.util.URISupport;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.runners.MockitoJUnitRunner;
+import static org.junit.Assert.assertEquals;
+
+@RunWith(MockitoJUnitRunner.class)
+public class AtmosComponentTest {
+
+    private static final String FAKE_REMOTE_PATH = ""/remote"";
+    private static final String FAKE_SECRET = ""fake-secret"";
+    private static final String FAKE_TOKEN = ""fake-token"";
+    private static final String FAKE_URI = ""http://fake/uri"";
+
+    @Mock
+    private CamelContext context;
+
+    @Test
+    public void testComponentOptions() throws Exception {
+        AtmosComponent component = new AtmosComponent(context);
+        component.setFullTokenId(FAKE_TOKEN);
+        component.setSecretKey(FAKE_SECRET);
+        component.setSslValidation(false);
+        component.setUri(FAKE_URI);
+
+        Map<String, Object> parameters = new HashMap<>();
+        parameters.put(""remotePath"", FAKE_REMOTE_PATH);
+
+        AtmosEndpoint endpoint = component.createEndpoint(""atmos://foo?remotePath=/remote"", ""foo/get"", parameters);
+        AtmosConfiguration configuration = endpoint.getConfiguration();
+
+        assertEquals(FAKE_TOKEN, configuration.getFullTokenId());
+        assertEquals(FAKE_SECRET, configuration.getSecretKey());
+        assertEquals(false, configuration.isEnableSslValidation());
+        assertEquals(FAKE_URI, configuration.getUri());
+    }
+
+    @Test
+    public void testUriParamsOverrideComponentOptions() throws Exception {
+        AtmosComponent component = new AtmosComponent(context);
+        component.setFullTokenId(""fakeTokenToBeOverridden"");
+        component.setSecretKey(""fakeSecretToBeOverridden"");
+        component.setSslValidation(true);
+        component.setUri(""http://fake/uri/to/be/overridden"");
+
+        Map<String, Object> parameters = new HashMap<>();
+        parameters.put(""remotePath"", FAKE_REMOTE_PATH);
+        parameters.put(""fullTokenId"", FAKE_TOKEN);
+        parameters.put(""secretKey"", FAKE_SECRET);
+        parameters.put(""enableSslValidation"", false);
+        parameters.put(""uri"", FAKE_URI);
+
+        String uri = URISupport.appendParametersToURI(""atmos://foo"", parameters);
+        AtmosEndpoint endpoint = component.createEndpoint(uri, ""foo/get"", parameters);
+        AtmosConfiguration configuration = endpoint.getConfiguration();
+
+        assertEquals(FAKE_TOKEN, configuration.getFullTokenId());
+        assertEquals(FAKE_SECRET, configuration.getSecretKey());
+        assertEquals(false, configuration.isEnableSslValidation());
+        assertEquals(FAKE_URI, configuration.getUri());
+    }
+}
diff --git a/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosConsumerTest.java b/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosConsumerTest.java
index 3bf9b7c7b25..cb587a45a03 100644
--- a/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosConsumerTest.java
+++ b/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosConsumerTest.java
@@ -17,6 +17,7 @@
 package org.apache.camel.component.atmos;
 
 import org.apache.camel.Consumer;
+import org.apache.camel.EndpointInject;
 import org.apache.camel.builder.RouteBuilder;
 import org.apache.camel.component.atmos.integration.consumer.AtmosScheduledPollGetConsumer;
 import org.apache.camel.test.junit4.CamelTestSupport;
@@ -25,25 +26,23 @@
 
 public class AtmosConsumerTest extends CamelTestSupport {
 
+    @EndpointInject(uri = ""atmos:foo/get?remotePath=/path&fullTokenId=fakeToken&secretKey=fakeSecret&uri=https://fake/uri"")
+    private AtmosEndpoint atmosEndpoint;
+
     @Override
     protected RouteBuilder createRouteBuilder() throws Exception {
         return new RouteBuilder() {
             @Override
             public void configure() throws Exception {
-                from(""atmos:foo/get?remotePath=/path"").to(""mock:test"");
+                from(atmosEndpoint)
+                    .to(""mock:test"");
             }
         };
     }
 
     @Test
     public void shouldCreateGetConsumer() throws Exception {
-        // Given
-        AtmosEndpoint atmosEndpoint = context.getEndpoint(""atmos:foo/get?remotePath=/path"", AtmosEndpoint.class);
-
-        // When
         Consumer consumer = atmosEndpoint.createConsumer(null);
-
-        // Then
         Assert.assertTrue(consumer instanceof AtmosScheduledPollGetConsumer);
         assertEquals(""foo"", atmosEndpoint.getConfiguration().getName());
     }
diff --git a/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/integration/AtmosTestSupport.java b/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/integration/AtmosTestSupport.java
index 8a9a1934a31..80dbdac3514 100644
--- a/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/integration/AtmosTestSupport.java
+++ b/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/integration/AtmosTestSupport.java
@@ -16,40 +16,29 @@
  */
 package org.apache.camel.component.atmos.integration;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URL;
 import java.util.Properties;
 
+import org.apache.camel.CamelContext;
+import org.apache.camel.component.atmos.AtmosComponent;
 import org.apache.camel.test.junit4.CamelTestSupport;
 
 
 public class AtmosTestSupport extends CamelTestSupport {
 
-    protected final Properties properties;
-
-    protected AtmosTestSupport() throws Exception {
-        URL url = getClass().getResource(""/test-options.properties"");
-
-        InputStream inStream;
-        try {
-            inStream = url.openStream();
-        } catch (IOException e) {
-            e.printStackTrace();
-            throw new IllegalAccessError(""test-options.properties could not be found"");
-        }
-
-        properties = new Properties();
-        try {
-            properties.load(inStream);
-        } catch (IOException e) {
-            e.printStackTrace();
-            throw new IllegalAccessError(""test-options.properties could not be found"");
-        }
-    }
+    @Override
+    protected CamelContext createCamelContext() throws Exception {
+        CamelContext camelContext = super.createCamelContext();
+
+        Properties properties = new Properties();
+        properties.load(getClass().getResourceAsStream(""/atmos.properties""));
+
+        AtmosComponent component = new AtmosComponent();
+        component.setFullTokenId(properties.getProperty(""fullTokenId""));
+        component.setSecretKey(properties.getProperty(""secretKey""));
+        component.setUri(properties.getProperty(""uri""));
+        component.setSslValidation(Boolean.parseBoolean(properties.getProperty(""sslValidation"")));
+        context.addComponent(""atmos"", component);
 
-    protected String getAuthParams() {
-        return ""accessToken="" + properties.get(""accessToken"")
-                + ""&clientIdentifier="" + properties.get(""clientIdentifier"");
+        return camelContext;
     }
 }
diff --git a/components/camel-atmos/src/test/resources/atmos.properties b/components/camel-atmos/src/test/resources/atmos.properties
index 24eafb84ecd..28a0eb34140 100644
--- a/components/camel-atmos/src/test/resources/atmos.properties
+++ b/components/camel-atmos/src/test/resources/atmos.properties
@@ -17,6 +17,5 @@
 
 fullTokenId=<Subtentant_ID/UID>
 secretKey=<UID_shared_secret>
-# The uri need to valide value
-uri=http://atmos_host
-sslValidation=<true|false>
+uri=https://atmos_host
+sslValidation=true
diff --git a/platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/AtmosComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/AtmosComponentConfiguration.java
index 6ccf0bb04a4..6683196bf59 100644
--- a/platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/AtmosComponentConfiguration.java
+++ b/platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/AtmosComponentConfiguration.java
@@ -32,12 +32,60 @@
             ComponentConfigurationPropertiesCommon {
 
     /**
+     * The token id to pass to the Atmos client
+     */
+    private String fullTokenId;
+    /**
+     * The secret key to pass to the Atmos client
+     */
+    private String secretKey;
+    /**
+     * The URI of the server for the Atmos client to connect to
+     */
+    private String uri;
+    /**
+     * Whether the Atmos client should perform SSL validation
+     */
+    private Boolean sslValidation = false;
+    /**
      * Whether the component should resolve property placeholders on itself when
      * starting. Only properties which are of String type can use property
      * placeholders.
      */
     private Boolean resolvePropertyPlaceholders = true;
 
+    public String getFullTokenId() {
+        return fullTokenId;
+    }
+
+    public void setFullTokenId(String fullTokenId) {
+        this.fullTokenId = fullTokenId;
+    }
+
+    public String getSecretKey() {
+        return secretKey;
+    }
+
+    public void setSecretKey(String secretKey) {
+        this.secretKey = secretKey;
+    }
+
+    public String getUri() {
+        return uri;
+    }
+
+    public void setUri(String uri) {
+        this.uri = uri;
+    }
+
+    public Boolean getSslValidation() {
+        return sslValidation;
+    }
+
+    public void setSslValidation(Boolean sslValidation) {
+        this.sslValidation = sslValidation;
+    }
+
     public Boolean getResolvePropertyPlaceholders() {
         return resolvePropertyPlaceholders;
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Oct/17 08:42;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2056
","24/Oct/17 08:43;githubbot;oscerd commented on issue #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056#issuecomment-338918377
 
 
   @davsclaus I guess it would be useful to backport to 2.20.x too. WDYT?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Oct/17 08:44;githubbot;davsclaus commented on issue #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056#issuecomment-338918692
 
 
   Yeah sure the old code is clunky

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Oct/17 08:50;githubbot;oscerd commented on issue #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056#issuecomment-338920242
 
 
   Backported to 2.20.x too

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,
Fix syntax for Atomix component,CAMEL-11936,13111340,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,apupier,apupier,23/Oct/17 09:01,23/Oct/17 10:37,13/Mar/19 22:20,23/Oct/17 10:37,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-atomix,,,,,,0,,,,"it seems that there is an isseu with several atomix component:
atomix-value resourceName atomix-value:valueName
atomix-queue resourceName atomix-queue:queueName
atomix-map resourceName atomix-map:mapName
atomix-multimap resourceName atomix-multimap:multiMapName
atomix-messaging resourceName atomix-messaging:group",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-23 09:24:07.499,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 23 10:36:48 UTC 2017,,,,,,,0|i3lkv3:,9223372036854775807,,,,,,,,,,"23/Oct/17 09:24;githubbot;apupier opened a new pull request #2053: CAMEL-11936 - Fix syntax for Atomix component
URL: https://github.com/apache/camel/pull/2053
 
 
   Signed-off-by: Aurélien Pupier <apupier@redhat.com>

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Oct/17 09:24;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/2053

    CAMEL-11936 - Fix syntax for Atomix component

    Signed-off-by: Aurélien Pupier <apupier@redhat.com>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-11936-camel-2.20.x-FixAtomixSyntax

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2053.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2053
    
----
commit d19bd9d2ce767a64dd6d5ddf694d099fbaab3324
Author: Aurélien Pupier <apupier@redhat.com>
Date:   2017-10-23T09:21:39Z

    CAMEL-11936 - Fix syntax for Atomix component
    
    Signed-off-by: Aurélien Pupier <apupier@redhat.com>

----
","23/Oct/17 09:35;githubbot;lburgazzoli commented on issue #2053: CAMEL-11936 - Fix syntax for Atomix component
URL: https://github.com/apache/camel/pull/2053#issuecomment-338602950
 
 
   you should rebuild the module so that the doc get updated

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Oct/17 10:02;githubbot;apupier commented on issue #2053: CAMEL-11936 - Fix syntax for Atomix component
URL: https://github.com/apache/camel/pull/2053#issuecomment-338610278
 
 
   > you should rebuild the module so that the doc get updated
   
   PR updated to include the regenerated doc

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Oct/17 10:35;githubbot;oscerd closed pull request #2053: CAMEL-11936 - Fix syntax for Atomix component
URL: https://github.com/apache/camel/pull/2053
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-atomix/src/main/docs/atomix-map-component.adoc b/components/camel-atomix/src/main/docs/atomix-map-component.adoc
index 25e16cc1d0b..63707ba8c2a 100644
--- a/components/camel-atomix/src/main/docs/atomix-map-component.adoc
+++ b/components/camel-atomix/src/main/docs/atomix-map-component.adoc
@@ -44,7 +44,7 @@ The Atomix Map component supports 5 options which are listed below.
 The Atomix Map endpoint is configured using URI syntax:
 
 ----
-atomix-map:mapName
+atomix-map:resourceName
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-atomix/src/main/docs/atomix-messaging-component.adoc b/components/camel-atomix/src/main/docs/atomix-messaging-component.adoc
index d267d069997..25603de38a9 100644
--- a/components/camel-atomix/src/main/docs/atomix-messaging-component.adoc
+++ b/components/camel-atomix/src/main/docs/atomix-messaging-component.adoc
@@ -43,7 +43,7 @@ The Atomix Messaging component supports 5 options which are listed below.
 The Atomix Messaging endpoint is configured using URI syntax:
 
 ----
-atomix-messaging:group
+atomix-messaging:resourceName
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-atomix/src/main/docs/atomix-multimap-component.adoc b/components/camel-atomix/src/main/docs/atomix-multimap-component.adoc
index b1abaef929f..3ea98e5026d 100644
--- a/components/camel-atomix/src/main/docs/atomix-multimap-component.adoc
+++ b/components/camel-atomix/src/main/docs/atomix-multimap-component.adoc
@@ -43,7 +43,7 @@ The Atomix MultiMap component supports 5 options which are listed below.
 The Atomix MultiMap endpoint is configured using URI syntax:
 
 ----
-atomix-multimap:multiMapName
+atomix-multimap:resourceName
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-atomix/src/main/docs/atomix-queue-component.adoc b/components/camel-atomix/src/main/docs/atomix-queue-component.adoc
index 956d8a32f2c..f6ce996547d 100644
--- a/components/camel-atomix/src/main/docs/atomix-queue-component.adoc
+++ b/components/camel-atomix/src/main/docs/atomix-queue-component.adoc
@@ -43,7 +43,7 @@ The Atomix Queue component supports 5 options which are listed below.
 The Atomix Queue endpoint is configured using URI syntax:
 
 ----
-atomix-queue:queueName
+atomix-queue:resourceName
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-atomix/src/main/docs/atomix-set-component.adoc b/components/camel-atomix/src/main/docs/atomix-set-component.adoc
index e0051c5da2f..ae84e0dc8ca 100644
--- a/components/camel-atomix/src/main/docs/atomix-set-component.adoc
+++ b/components/camel-atomix/src/main/docs/atomix-set-component.adoc
@@ -43,7 +43,7 @@ The Atomix Set component supports 5 options which are listed below.
 The Atomix Set endpoint is configured using URI syntax:
 
 ----
-atomix-set:setName
+atomix-set:resourceName
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-atomix/src/main/docs/atomix-value-component.adoc b/components/camel-atomix/src/main/docs/atomix-value-component.adoc
index 325fe80659a..97dd2232dcf 100644
--- a/components/camel-atomix/src/main/docs/atomix-value-component.adoc
+++ b/components/camel-atomix/src/main/docs/atomix-value-component.adoc
@@ -43,7 +43,7 @@ The Atomix Value component supports 5 options which are listed below.
 The Atomix Value endpoint is configured using URI syntax:
 
 ----
-atomix-value:valueName
+atomix-value:resourceName
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/map/AtomixMapEndpoint.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/map/AtomixMapEndpoint.java
index fd566cbf80e..7d8f198b522 100644
--- a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/map/AtomixMapEndpoint.java
+++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/map/AtomixMapEndpoint.java
@@ -31,7 +31,7 @@
     firstVersion = ""2.20.0"",
     scheme = ""atomix-map"",
     title = ""Atomix Map"",
-    syntax = ""atomix-map:mapName"",
+    syntax = ""atomix-map:resourceName"",
     consumerClass = AtomixMapConsumer.class,
     label = ""clustering"")
 class AtomixMapEndpoint extends AbstractAtomixClientEndpoint<AtomixMapComponent, AtomixMapConfiguration> {
diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/messaging/AtomixMessagingEndpoint.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/messaging/AtomixMessagingEndpoint.java
index 6f37c41664e..d218d90398c 100644
--- a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/messaging/AtomixMessagingEndpoint.java
+++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/messaging/AtomixMessagingEndpoint.java
@@ -31,7 +31,7 @@
     firstVersion = ""2.20.0"",
     scheme = ""atomix-messaging"",
     title = ""Atomix Messaging"",
-    syntax = ""atomix-messaging:group"",
+    syntax = ""atomix-messaging:resourceName"",
     consumerClass = AtomixMessagingConsumer.class,
     label = ""clustering"")
 final class AtomixMessagingEndpoint extends AbstractAtomixClientEndpoint<AtomixMessagingComponent, AtomixMessagingConfiguration> {
diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/multimap/AtomixMultiMapEndpoint.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/multimap/AtomixMultiMapEndpoint.java
index 0206fdc715d..9c800e48339 100644
--- a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/multimap/AtomixMultiMapEndpoint.java
+++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/multimap/AtomixMultiMapEndpoint.java
@@ -29,7 +29,7 @@
     firstVersion = ""2.20.0"",
     scheme = ""atomix-multimap"",
     title = ""Atomix MultiMap"",
-    syntax = ""atomix-multimap:multiMapName"",
+    syntax = ""atomix-multimap:resourceName"",
     consumerOnly = true,
     label = ""clustering"")
 final class AtomixMultiMapEndpoint extends AbstractAtomixClientEndpoint<AtomixMultiMapComponent, AtomixMultiMapConfiguration> {
diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/queue/AtomixQueueEndpoint.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/queue/AtomixQueueEndpoint.java
index 3ac4a714f97..a3c053e58f7 100644
--- a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/queue/AtomixQueueEndpoint.java
+++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/queue/AtomixQueueEndpoint.java
@@ -31,7 +31,7 @@
     firstVersion = ""2.20.0"",
     scheme = ""atomix-queue"",
     title = ""Atomix Queue"",
-    syntax = ""atomix-queue:queueName"",
+    syntax = ""atomix-queue:resourceName"",
     consumerClass = AtomixQueueConsumer.class,
     label = ""clustering"")
 final class AtomixQueueEndpoint extends AbstractAtomixClientEndpoint<AtomixQueueComponent, AtomixQueueConfiguration> {
diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/set/AtomixSetEndpoint.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/set/AtomixSetEndpoint.java
index f0f91f2dccd..93d5372df19 100644
--- a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/set/AtomixSetEndpoint.java
+++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/set/AtomixSetEndpoint.java
@@ -31,7 +31,7 @@
     firstVersion = ""2.20.0"",
     scheme = ""atomix-set"",
     title = ""Atomix Set"",
-    syntax = ""atomix-set:setName"",
+    syntax = ""atomix-set:resourceName"",
     consumerClass = AtomixSetConsumer.class,
     label = ""clustering"")
 final class AtomixSetEndpoint extends AbstractAtomixClientEndpoint<AtomixSetComponent, AtomixSetConfiguration> {
diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueEndpoint.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueEndpoint.java
index 152dc92f85a..12e8758d0fd 100644
--- a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueEndpoint.java
+++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueEndpoint.java
@@ -31,7 +31,7 @@
     firstVersion = ""2.20.0"",
     scheme = ""atomix-value"",
     title = ""Atomix Value"",
-    syntax = ""atomix-value:valueName"",
+    syntax = ""atomix-value:resourceName"",
     consumerClass = AtomixValueConsumer.class,
     label = ""clustering"")
 final class AtomixValueEndpoint extends AbstractAtomixClientEndpoint<AtomixValueComponent, AtomixValueConfiguration> {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Oct/17 10:35;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2053
","23/Oct/17 10:36;githubbot;oscerd commented on issue #2053: CAMEL-11936 - Fix syntax for Atomix component
URL: https://github.com/apache/camel/pull/2053#issuecomment-338618304
 
 
   Thanks for the PR.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,
Persistent tail tracking picks random tail tracker from mongoDB collection,CAMEL-11922,13110218,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,Igorko,Igorko,18/Oct/17 08:13,20/Oct/17 11:15,13/Mar/19 22:20,20/Oct/17 11:06,2.20.0,,,,,,,,,,,,,,,2.19.4,2.20.1,2.21.0,,,camel-mongodb,camel-mongodb3,,,,,0,,,,"Hello. issue partially was fixed in https://issues.apache.org/jira/browse/CAMEL-8063

This was fixed in initialize() but still present in persistToStore() function
Bson updateObj = Updates.set(config.field, lastVal);
dbCol.updateOne(trackingObj, updateObj);
trackingObj = dbCol.find().first();
If more then one tracker is present in one collection, after storing lastVal, each trackingObj will replaced by first one from collection. Should be
trackingObj = dbCol.find(filter).first();
Issue present in version 2.20 in both mongodb and mongodb3 component.",,,,,,,,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-18 08:54:33.512,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 20 11:15:10 UTC 2017,,,,,,,0|i3lec7:,9223372036854775807,,,,,,,,,,18/Oct/17 08:54;davsclaus;You are welcome to provide a fix as github PR,"19/Oct/17 08:32;githubbot;GitHub user igorko opened a pull request:

    https://github.com/apache/camel/pull/2049

    CAMEL-11922: Persistent tail tracking picks random tail tracker from …

    …mongoDB collection

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igorko/camel camel-2.20.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2049.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2049
    
----
commit 34b671575461bca64013af5d8f4ab5ff88e4e1ec
Author: Igor Paliychuk <mansonigor@gmail.com>
Date:   2017-10-19T08:30:33Z

    CAMEL-11922: Persistent tail tracking picks random tail tracker from mongoDB collection

----
","20/Oct/17 11:15;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2049
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Dropbox validator regex is too restrictive and fails for common paths,CAMEL-11912,13109650,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,thagg1975,thagg1975,16/Oct/17 08:43,20/Oct/17 10:44,13/Mar/19 22:20,20/Oct/17 10:44,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-dropbox,,,,,,0,easyfix,,,"Most operations on the new Dropbox component (compliant to v2 API of Dropbox) has a dropbox path validator. It uses this regex (see below). 

{noformat}
/*?(\S+)/*?
{noformat} 

This regex fails in the following paths:

* ""/path with spaces/file"" - part of the test suite
* ""/Web Projects/caesars entertainment - us/#ops/one/campaigns/archive/20170919/REN_BIG_PULL_WEEKEND_20170907.csv"" - a real path that in the previous camel version (2.18.2) - v1 API was working.


It seems that modifying the regex to this one below,  (again regex form, not java) makes both paths above get a match.

{noformat}
/*?(\S+)*.+/*?
{noformat}

Please check (http://fiddle.re/f1c4fd) and let me know, patch can be provided if needed.
",all,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-16 09:17:04.038,,,no_permission,,Novice,,,,Important,,,,,,,,,9223372036854775807,,,Fri Oct 20 10:44:33 UTC 2017,,,,,,,0|i3lauf:,9223372036854775807,,,,,,,,,,16/Oct/17 09:17;davsclaus;Just wonder why we have a regular exp validator in the first place?,"16/Oct/17 09:20;davsclaus;If its to report problems if you use a windows path style, why not just normalize the path in unix style with slashes.",20/Oct/17 10:44;davsclaus;Remove the reg exp and made a simpler check for windows path separators,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
close JMXConnector on shutdown of JMXConsumer in camel-jmx,CAMEL-11926,13110865,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,shiggs,shiggs,20/Oct/17 03:09,20/Oct/17 07:44,13/Mar/19 22:20,20/Oct/17 07:43,,,,,,,,,,,,,,,,2.19.4,2.20.1,2.21.0,,,camel-jmx,,,,,,0,,,,"Close the JMXConnector when shutting down the JMXConsumer to avoid the following in an OSGi environment (jboss-cli-client fragment bundle for jmx-remoting protocol):


{code}

Caused by: java.lang.ClassNotFoundException: Unable to load class 'org.jboss.remoting3.spi.AbstractHandleableCloseable$2' because the bundle wiring for com.example.mybundle is no longer valid.

{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-20 03:22:06.475,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 20 07:44:01 UTC 2017,,,Patch Available,,,,0|i3lhxj:,9223372036854775807,,,,,,,,,,"20/Oct/17 03:22;githubbot;GitHub user sjhiggs opened a pull request:

    https://github.com/apache/camel/pull/2052

    CAMEL-11926: close JMXConnector on shutdown of JMXConsumer in camel-jmx

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sjhiggs/camel camel-11926

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2052.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2052
    
----
commit 752b48bae25437429da5ec87e0663fc452320815
Author: Stephen Higgs <shiggs@redhat.com>
Date:   2017-10-20T02:43:28Z

    CAMEL-11926: close JMXConnector on shutdown of JMXConsumer in camel-jmx

----
","20/Oct/17 07:44;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2052
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hdfs2 not working in osgi using documented HdfsOsgiHelper,CAMEL-11920,13110041,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,valdar,valdar,17/Oct/17 17:01,18/Oct/17 10:23,13/Mar/19 22:20,18/Oct/17 06:25,2.20.0,,,,,,,,,,,,,,,2.19.4,2.20.1,2.21.0,,,camel-hdfs2,,,,,,0,,,,"Step to reproduce (an osgi environment like karaf or fuse is needed):
#     Unzip hdfs2-issue.zip to folder HDFS2_ISSUE_ROOT
#     mvn clean package
#     Run osgi environment (bin/karaf)
#     feature:install camel-hdfs2 (adding a feature repo might be needed)
#     install -s file:HDFS2_ISSUE_ROOT/target/generic-issue-1.jar
#     See the exception in log: 
{code:java}
2017-08-01 16:38:04,367 | ERROR | nt Dispatcher: 1 | BlueprintCamelContext            | 49 - org.apache.camel.camel-blueprint - 2.20.0.fuse-000052 | Error occurred during starting Camel Context  hdfs2-test
java.io.IOException: No FileSystem for scheme: hdfs
	at org.apache.hadoop.fs.FileSystem.getFileSystemClass(FileSystem.java:2644) [238:org.apache.servicemix.bundles.hadoop-client:2.7.2.1]
	at org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2651) [238:org.apache.servicemix.bundles.hadoop-client:2.7.2.1]
	at org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:92) [238:org.apache.servicemix.bundles.hadoop-client:2.7.2.1]
	at org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2687) [238:org.apache.servicemix.bundles.hadoop-client:2.7.2.1]
	at org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2669) [238:org.apache.servicemix.bundles.hadoop-client:2.7.2.1]
	at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:371) [238:org.apache.servicemix.bundles.hadoop-client:2.7.2.1]
	at org.apache.camel.component.hdfs2.HdfsInfo.<init>(HdfsInfo.java:36) [226:org.apache.camel.camel-hdfs2:2.20.0.fuse-000052]
	at org.apache.camel.component.hdfs2.HdfsOutputStream.createOutputStream(HdfsOutputStream.java:49) [226:org.apache.camel.camel-hdfs2:2.20.0.fuse-000052]
	at org.apache.camel.component.hdfs2.HdfsProducer.setupHdfs(HdfsProducer.java:143) [226:org.apache.camel.camel-hdfs2:2.20.0.fuse-000052]
	at org.apache.camel.component.hdfs2.HdfsProducer.doStart(HdfsProducer.java:104) [226:org.apache.camel.camel-hdfs2:2.20.0.fuse-000052]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DeferServiceStartupListener.onCamelContextStarted(DeferServiceStartupListener.java:49) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3723) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3502) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3357) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:204) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3116) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3112) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3135) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3112) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3050) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:244) [49:org.apache.camel.camel-blueprint:2.20.0.fuse-000052]
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:284) [49:org.apache.camel.camel-blueprint:2.20.0.fuse-000052]
	at org.apache.camel.blueprint.BlueprintCamelContext.blueprintEvent(BlueprintCamelContext.java:177) [49:org.apache.camel.camel-blueprint:2.20.0.fuse-000052]
	at org.apache.aries.blueprint.container.BlueprintEventDispatcher$4.call(BlueprintEventDispatcher.java:201) [41:org.apache.aries.blueprint.core:1.8.2]
	at org.apache.aries.blueprint.container.BlueprintEventDispatcher$4.call(BlueprintEventDispatcher.java:199) [41:org.apache.aries.blueprint.core:1.8.2]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:?]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:?]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:?]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:?]
	at java.lang.Thread.run(Thread.java:748) [?:?]
{code}


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,17/Oct/17 17:06;valdar;hdfs2-issue.zip;https://issues.apache.org/jira/secure/attachment/12892647/hdfs2-issue.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-10-17 17:13:12.392,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 18 10:23:43 UTC 2017,,,,,,,0|i3ld93:,9223372036854775807,,,,,,,,,,"17/Oct/17 17:13;githubbot;GitHub user valdar opened a pull request:

    https://github.com/apache/camel/pull/2044

    CAMEL-11920: camel-hdfs2 not working in osgi using documented HdfsOsg…

    …iHelper

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/valdar/camel CAMEL-11920

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2044.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2044
    
----
commit d9b6db9ff9be33f9c99cbcdfd5fb653c7c70df1f
Author: Andrea Tarocchi <atarocch@redhat.com>
Date:   2017-10-17T17:11:40Z

    CAMEL-11920: camel-hdfs2 not working in osgi using documented HdfsOsgiHelper

----
","18/Oct/17 10:23;githubbot;Github user valdar closed the pull request at:

    https://github.com/apache/camel/pull/2044
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Kie assumes that the TCCL can load its services,CAMEL-11889,13107968,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,09/Oct/17 12:59,16/Oct/17 09:16,13/Mar/19 22:20,16/Oct/17 09:16,,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-optaplanner,,,,,,0,,,,"The recent update of optaplanner comes with kit-7.3.0.final, which relies on the TCCL

https://github.com/kiegroup/droolsjbpm-knowledge/blob/7.3.0.Final/kie-api/src/main/java/org/kie/api/internal/utils/ServiceDiscoveryImpl.java#L163

Perhaps, this can be fixed at the camel-optaplanner  component level. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-09 15:23:32.978,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 13 11:19:42 UTC 2017,,,,,,,0|i3l10n:,9223372036854775807,,,,,,,,,,"09/Oct/17 15:23;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/2014

    [CAMEL-11889] Kie assumes that the TCCL can load its services

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11889

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2014.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2014
    
----
commit 20eadbe7572e660fb04d7dd7fc7a52790ccce08f
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-10-09T15:22:56Z

    [CAMEL-11889] Kie assumes that the TCCL can load its services

----
","10/Oct/17 04:17;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/2014
","11/Oct/17 07:19;davsclaus;Thomas, you closed the PR so is there another PR coming or did the PR not work etc?","11/Oct/17 07:29;tdiesler;The PR is working, but I haven't decided yet whether the correct classloader to use should be that of the Optaplaner component, the Kie API or even that of the user deployment. 

Kie caches classloaders that are associated with an arbitrary thread. This is of course highly problematic in a modular environment, where the same instance of Kie may be used by multiple modules and even multiple deployments.

Only if that what is cached is part of some static configuration (i.e. independent of deployment content) it can (reluctantly) be done at all. 
I'll revisit this at my leisure and for now agree with you, that it is not critical.","13/Oct/17 08:15;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/2034

    [CAMEL-11889] Kie assumes that the TCCL can load its services

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11889

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2034.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2034
    
----
commit a790d2535e13aec3896e97cd86645bb4336450ed
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-10-09T15:22:56Z

    [CAMEL-11889] Kie assumes that the TCCL can load its services

----
","13/Oct/17 11:19;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/2034
",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-catalog-maven - Cannot load out of the box components,CAMEL-11909,13109435,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Oct/17 12:23,16/Oct/17 09:14,13/Mar/19 22:20,16/Oct/17 09:14,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-catalog,,,,,,0,,,,If you add camel-catalog-maven as the version manager then it cannot load the OOTB components.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-10-14 12:23:33.0,,,,,,,0|i3l9uv:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cluster-service : FileLockClusterView should not always return local member as leader,CAMEL-11902,13108975,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,12/Oct/17 16:50,12/Oct/17 17:04,13/Mar/19 22:20,12/Oct/17 17:04,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-core,,,,,,0,clustering,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-10-12 16:50:59.0,,,,,,,0|i3l76n:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SpringWebserviceConsumer and class cast exception,CAMEL-11892,13108510,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,r.groote@beinformed.com,r.groote@beinformed.com,11/Oct/17 06:59,12/Oct/17 14:35,13/Mar/19 22:20,12/Oct/17 13:47,2.19.0,2.20.0,,,,,,,,,,,,,,2.19.4,2.20.1,,,,camel-spring-ws,,,,,,0,,,,"The org.apache.camel.component.spring.ws.SpringWebserviceConsumer.populateExchangeWithBreadcrumbFromMessageContext(MessageContext, Exchange) does a cast to SaajSoapMessage. But there are more implementation of the org.springframework.ws.WebServiceMessage. In our case it's a AxiomSoapMessage",Camel version 2.19.3 (but due to CAMEL-8351 i think it will also fail on 2.19.0),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-11 07:16:43.644,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 12 14:35:07 UTC 2017,,,,,,,0|i3l4br:,9223372036854775807,,,,,,,,,,"11/Oct/17 07:16;davsclaus;Thanks for reporting, you are welcome to work on a github PR with a fix
http://camel.apache.org/contributing","11/Oct/17 13:50;githubbot;GitHub user richardgroote opened a pull request:

    https://github.com/apache/camel/pull/2026

    Update because of class cast

    See CAMEL-11892

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/richardgroote/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2026.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2026
    
----
commit 5aefbf8072d161dedfea647b53aede0c57b3d278
Author: richardgroote <32516488+richardgroote@users.noreply.github.com>
Date:   2017-10-11T13:49:58Z

    Update because of class cast
    
    See CAMEL-11892

----
","12/Oct/17 07:20;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/2028

    CAMEL-11892 - breadcrumbId class cast failure if other than SAAJ used…

    … as WebServiceMessage impl

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11892

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2028.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2028
    
----
commit 9da7b627f56a5cbbc10bcfe3f50fc0187ec78f8e
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2017-10-12T07:19:33Z

    CAMEL-11892 - breadcrumbId class cast failure if other than SAAJ used as WebServiceMessage impl

----
","12/Oct/17 13:50;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/2028
","12/Oct/17 14:35;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2026
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-ws - Attachments are lost,CAMEL-11898,13108850,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,r.groote@beinformed.com,r.groote@beinformed.com,12/Oct/17 09:22,12/Oct/17 14:00,13/Mar/19 22:20,12/Oct/17 14:00,2.19.3,,,,,,,,,,,,,,,2.19.4,2.20.1,2.21.0,,,camel-spring-ws,,,,,,0,,,,"The below scenario is failing in 2.19.3 and was working 2.14.0.
May be we're doing something wrong but i cannot find out where the problem is originated.
Any help would be appreciated 

*Some debug information*
* I've debugged the code in 2.14.0 and 2.19.3 in the 'old' ConvertBodyProcessor the out was put back on the DefaultMessage
* In the SpringWebserviceConsumer (2.19.3) there is no out message after the processor. The in message is present including the attachments.
* In the BasicMessageFilter#filterConsumer(2.19.3) the out is read without checking hasOut(). I think the solution is to look if there is out available, when not available using the in message


*Scenario*
* Sending a request to a soap service in this case the spring-ws component
* A bean is responsible for retrieving some information and attachments
* The soap response no longer contains the attachment
 

*Below is part of spring configuration*
<camel:from uri=""spring-ws:uri:/contextPath/soapServices?endpointMapping=#endpointMapping""/>
<camel:to uri=""bean:someBean?method=onMessage('myMethod')"" />
<camel:convertBodyTo type=""java.lang.String""/>

*Snippet of the bean*

{code:java}
exchange.getOut().copyFrom(exchange.getIn());
exchange.getOut().setHeader(Exchange.CHARSET_NAME, CamelConstants.DEFAULT_CHARACTER_SET);
exchange.getOut().setBody(response.getResponse());
exchange.getOut().addAttachment(id, attachment.getAttachment());

{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-12 09:25:04.558,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 12 14:00:53 UTC 2017,,,,,,,0|i3l6ev:,9223372036854775807,,,,,,,,,,12/Oct/17 09:25;davsclaus;Yeah you are welcome to provide a github PR with a fix in that BasicMessageFilter to check for hasOut,"12/Oct/17 09:33;githubbot;GitHub user richardgroote opened a pull request:

    https://github.com/apache/camel/pull/2030

    CAMEL-11898: Attachment are not in the response

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/richardgroote/camel patch-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2030.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2030
    
----
commit 808168a6f89d5f3fddca97e45b1671b98bbf5f80
Author: richardgroote <32516488+richardgroote@users.noreply.github.com>
Date:   2017-10-12T09:33:35Z

    CAMEL-11898: Attachment are not in the response

----
","12/Oct/17 14:00;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2030
",12/Oct/17 14:00;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Queue/Exchange parameters need to be numeric when declaring in RabbitMQ,CAMEL-11881,13107030,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hveiga,hveiga,04/Oct/17 18:55,06/Oct/17 08:32,13/Mar/19 22:20,06/Oct/17 08:32,2.19.3,,,,,,,,,,,,,,,2.19.4,2.20.0,,,,camel-rabbitmq,,,,,,0,,,," I am having a small issue with camel-rabbitmq component. I am trying to add a ttl to the declaration of my queue by adding the option arg.queue.x-message-ttl=5000 to the URI. That seems fine, however it seems camel parses 5000 as a String instead of an Integer and therefore I am getting an error when doing the declaration: 

reply-code=406, reply-text=PRECONDITION_FAILED - invalid arg 'x-message-ttl' for queue 'XXXX' in vhost '/': {unacceptable_type,longstr}, class-id=50, method-id=10)

We should add some special code to turn those values from String to Long before declaring. I will compile the list, add it here and work on a patch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-05 07:08:04.909,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 06 08:32:09 UTC 2017,,,,,,,0|i3kvrb:,9223372036854775807,,,,,,,,,,"04/Oct/17 23:38;hveiga;I have found three of them and they only apply to queues:
* x-max-length
* x-message-ttl
* x-expires

I think we should do the check in this line: https://github.com/apache/camel/blob/a558f54ec070e400167af366d3e973f806634760/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQDeclareSupport.java#L63

[~davsclaus] what do you think?","05/Oct/17 07:08;davsclaus;Thanks for checking. 

Yeah we can add that special logic there, where we grab those three keys from that map, and convert their value to a long type, and then leave the rest as-is.

You are very welcome to work on a PR
http://camel.apache.org/contributing","06/Oct/17 00:27;githubbot;GitHub user hveiga opened a pull request:

    https://github.com/apache/camel/pull/2010

    CAMEL-11881: Handling special arguments when declaring queues

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hveiga/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2010.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2010
    
----
commit b57737e236dabf0ebf620ee9de6af9831cfe043e
Author: Veiga Ortiz, Héctor <hector.veiga-ortiz@here.com>
Date:   2017-10-06T00:16:32Z

    CAMEL-11881: Handling special arguments when declaring queues

----
","06/Oct/17 00:34;hveiga;[~davsclaus] let me know if this is sufficient or I should add more checks, thanks","06/Oct/17 08:30;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2010
",06/Oct/17 08:32;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,
ServiceDefinition.metadata not passed to RibbonServiceLoadBalancer,CAMEL-11882,13107154,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,05/Oct/17 07:59,05/Oct/17 14:30,13/Mar/19 22:20,05/Oct/17 14:30,,,,,,,,,,,,,,,,2.20.0,,,,,camel-ribbon,,,,,,0,,,,"I tried to write a Ribbon Load Balancer test that would send requests to two application paths on the same server and port. Because {{org.apache.camel.cloud.ServiceDefinition}} has no notion of context path, I used the {{ServiceDefinition.metadata}} to define it and in the {{serviceCall}} I used an expression {{.expression().simple(""jetty:http://${header.CamelServiceCallServiceHost}:${header.CamelServiceCallServicePort}/${header.CamelServiceCallServiceMeta[contextPath]}"")}} to use it.
However, the test is not passing because {{RibbonServiceLoadBalancer.RibbonServerList.asRibbonServerList(List<ServiceDefinition>)}} is not passing the medata map to {{RibbonServiceDefinition}}. The test passes as expected when {{RibbonServerList.asRibbonServerList()}} is fixed.

Here is the test:

{code}

package org.apache.camel.component.ribbon.cloud;

import java.util.Collections;

import org.apache.camel.RoutesBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.ribbon.RibbonConfiguration;
import org.apache.camel.impl.cloud.StaticServiceDiscovery;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class RibbonServiceCallRouteMetadataTest extends CamelTestSupport {
    @Test
    public void testServiceCall() throws Exception {
        getMockEndpoint(""mock:app1"").expectedMessageCount(1);
        getMockEndpoint(""mock:app2"").expectedMessageCount(1);
        getMockEndpoint(""mock:result"").expectedMessageCount(2);

        String out = template.requestBody(""direct:start"", null, String.class);
        String out2 = template.requestBody(""direct:start"", null, String.class);
        assertEquals(""app2"", out);
        assertEquals(""app1"", out2);

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                // setup a static ribbon server list with these 2 servers to start with
                StaticServiceDiscovery servers = new StaticServiceDiscovery();
                servers.addServer(""myService"", ""localhost"", 9090, Collections.singletonMap(""contextPath"", ""app1""));
                servers.addServer(""myService"", ""localhost"", 9090, Collections.singletonMap(""contextPath"", ""app2""));

                RibbonConfiguration configuration = new RibbonConfiguration();
                RibbonServiceLoadBalancer loadBalancer = new RibbonServiceLoadBalancer(configuration);

                from(""direct:start"")
                    .serviceCall()
                        .name(""myService"")
                        .expression().simple(""jetty:http://${header.CamelServiceCallServiceHost}:${header.CamelServiceCallServicePort}/${header.CamelServiceCallServiceMeta[contextPath]}"")
                        .loadBalancer(loadBalancer)
                        .serviceDiscovery(servers)
                        .end()
                    .to(""mock:result"");
                from(""jetty:http://localhost:9090/app1"")
                    .to(""mock:app1"")
                    .transform().constant(""app1"");
                from(""jetty:http://localhost:9090/app2"")
                    .to(""mock:app2"")
                    .transform().constant(""app2"");
            }
        };
    }
}

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-05 08:01:05.511,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 05 08:13:53 UTC 2017,,,,,,,0|i3kwiv:,9223372036854775807,,,,,,,,,,"05/Oct/17 08:01;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2005

    CAMEL-11882: ServiceDefinition.metadata not passed to

    RibbonServiceLoadBalancer
    
    https://issues.apache.org/jira/browse/CAMEL-11882

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-11882

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2005.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2005
    
----
commit f6f16086d52b21a8a623efc44511fb836135fe6a
Author: Peter Palaga <ppalaga@redhat.com>
Date:   2017-10-05T08:00:09Z

    CAMEL-11882: ServiceDefinition.metadata not passed to
    RibbonServiceLoadBalancer

----
","05/Oct/17 08:13;githubbot;Github user ppalaga closed the pull request at:

    https://github.com/apache/camel/pull/2005
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when stopping Salesforce component that failed to start,CAMEL-11884,13107202,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,05/Oct/17 11:23,05/Oct/17 11:26,13/Mar/19 22:20,05/Oct/17 11:26,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-salesforce,,,,,,0,,,,In {{SalesforceComponent::doStop}} we reference {{config}} that could be {{null}} if the component was configured without it and {{SalesforceComponent::createEndpoint}} was never invoked.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-10-05 11:23:25.0,,,,,,,0|i3kwtb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stomp component should not modify the destination name,CAMEL-11871,13106366,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,02/Oct/17 09:30,04/Oct/17 08:08,13/Mar/19 22:20,04/Oct/17 07:59,,,,,,,,,,,,,,,,2.20.0,,,,,camel-stomp,,,,,,0,,,,"Stomp Camel Component modifies the destination name passed via endpoint URI by prepending a slash to it and by replacing ':' with '/' [1]. This turns out to be problematic when targeting an ActiveMQ Artemis instance embedded in WildFly. For whatever reason, it expects queue names to start with ""jms.queue."" without the initial slash.

There is a WildFly Camel integration test demonstrating the issue: [2]

StompComponent should not assume anything about the naming scheme, because it has no control over the decisions made on the broker side.


[1] https://github.com/apache/camel/blob/98b3d7eae9959645c4bc023bf4896d036ce75642/components/camel-stomp/src/main/java/org/apache/camel/component/stomp/StompComponent.java#L57

[2] https://github.com/ppalaga/wildfly-camel/commit/15e3e6098b3976cb057f4208565296ea6bd54017#diff-bf122ce705f9ef0b3920d968d1f13f2a

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-02 09:36:12.377,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 04 08:08:31 UTC 2017,,,,,,,0|i3krpj:,9223372036854775807,,,,,,,,,,"02/Oct/17 09:36;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/1989

    CAMEL-11871: Stomp component should not modify the destination name

    https://issues.apache.org/jira/browse/CAMEL-11871

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-11871

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1989.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1989
    
----
commit c7c5ba04dc4a3b22de6ae2c9b4ce9cc9808a731d
Author: Peter Palaga <ppalaga@redhat.com>
Date:   2017-10-02T09:33:32Z

    CAMEL-11871: Stomp component should not modify the destination name

----
","02/Oct/17 10:59;dejanb;The proposed change breaks unit tests written against ActiveMQ 5.x, which expects destinations names with /topic/ or /queue/ prefixes. 
We can see how to provide more flexibility to destination name mapping. BTW. Which version of Artemis are you using? I'm guessing 1.x, as in 2.x there is a flexible address model which should eliminate this problem.","03/Oct/17 09:11;ppalaga;bq. The proposed change breaks unit tests written against ActiveMQ 5.x, which expects destinations names with /topic/ or /queue/ prefixes. 

Good to know, but I still wonder whether the initial slash cannot be passed via route URI? 

bq. Which version of Artemis are you using? I'm guessing 1.x, as in 2.x there is a flexible address model which should eliminate this problem.

Yes, both WildFly 10 and 11 embed Artemis 1.x.

","03/Oct/17 09:35;dejanb;I think at this point the best thing would be to introduce another configuration parameter that can turn this off, so we can keep backward compatibility and support other addressing schemes.","03/Oct/17 11:49;davsclaus;Yeah good idea Dejan. However coming up with a good name for such an option can be tricky. 
And can we get this tested with Artemis 2.x. to see if that works OOTB as-is.

Then we would know the option is only needed for Artemis 1.x support","03/Oct/17 13:22;ppalaga;bq. proposed change breaks unit tests written against ActiveMQ 5.x

In b81e09d [1] I checked that the stomp unit tests can be fixed to work with the proposed fix.

Backwards compatibility is a valid concern as long as the old behavior can be called correct. The old behavior is rather incorrect because it does not properly cover the whole range of the applicability of the stomp protocol. Keeping the incorrect behavior a default and making the correct behavior optional is doable but sounds strange.

[1] https://github.com/apache/camel/pull/1989/commits/b81e09da51eff29d4b17a392a9d4a4ca564d6d88","04/Oct/17 07:59;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1989
","04/Oct/17 08:08;ppalaga;For the record, why this was actually accepted:

The STOMP spec [1] says 

bq. The STOMP protocol treats destinations as opaque string and their syntax is server implementation specific.

The user knows with which STOMP broker is he speaking, hence the user should know the proper naming scheme. To the very opposite, the stomp Camel component has no info which specific stomp implementation is on the other side. Stomp Camel component can thus make no assumptions about the naming scheme.

[1] https://stomp.github.io/stomp-specification-1.2.html",,,,,,,,,,,,,,,,,,,,,,,,,
camel-bom needs <distributionManagement/>,CAMEL-11867,13106099,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,tcunning,tcunning,29/Sep/17 17:53,03/Oct/17 09:52,13/Mar/19 22:20,03/Oct/17 09:52,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,build system,,,,,,0,,,,"camel-bom needs a <distributionManagement/> section - getting an error trying to deploy camel :

[ERROR] Failed to execute goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.7:deploy (default-cli) on project camel-bom: Deployment failed: repository element was not specified in the POM inside distributionManagement element or in -DaltDeploymentRepository=id::layout::url parameter -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.7:deploy (default-cli) on project camel-bom: Deployment failed: repository element was not specified in the POM inside distributionManagement element or in -DaltDeploymentRepository=id::layout::url parameter
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: org.apache.maven.plugin.MojoExecutionException: Deployment failed: repository element was not specified in the POM inside distributionManagement element or in -DaltDeploymentRepository=id::layout::url parameter
	at org.sonatype.nexus.maven.staging.deploy.strategy.AbstractDeployStrategy.getDeploymentRepository(AbstractDeployStrategy.java:257)
	at org.sonatype.nexus.maven.staging.deploy.strategy.DeferredDeployStrategy.deployPerModule(DeferredDeployStrategy.java:52)
	at org.sonatype.nexus.maven.staging.deploy.DeployMojo.execute(DeployMojo.java:192)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
	... 20 more
[ERROR] 
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :camel-bom
[Pipeline] }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-03 08:13:10.846,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 03 09:47:49 UTC 2017,,,,,,,0|i3kq27:,9223372036854775807,,,,,,,,,,"03/Oct/17 08:13;davsclaus;Nicola, can you take a look at this","03/Oct/17 08:13;davsclaus;Tom, can you tell a bit more about what you do, what deployment are you doing and how do you get this error?","03/Oct/17 09:41;nferraro;Yeah, I've talked with Tom in chat few days ago. We built a parentless BOM but it needs some distribution management from the org.apache:apache parent or from the org.apache.camel:camel project.
Tom is probably using a custom pipeline, but we need this also to publish the artifact to maven central in the 2.20 release.","03/Oct/17 09:47;nferraro;I think we can let the BOM inherit from org.apache.camel:camel, because it doesn't contain dependency/dependencyManagement sections and it just declares build/release plugins other than common info about the project.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassNotFoundException when configuring camel-docker SSL options,CAMEL-11842,13105071,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,26/Sep/17 12:43,27/Sep/17 07:06,13/Mar/19 22:20,27/Sep/17 07:06,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-docker,,,,,,0,,,,"We had the idea in CAMEL-11256 to switch to using Netty as the docker-java CmdExecFactory. As part of this work the transitive Jersey libraries from the docker-java library were excluded.

Unfortunately, it seems docker-java still depends on Jersey stuff, even when configured to use Netty. If I try to configure SSL options, I get:

{code}
Caused by: java.lang.NoClassDefFoundError: org/glassfish/jersey/SslConfigurator
	at com.github.dockerjava.core.LocalDirectorySSLConfig.getSSLContext(LocalDirectorySSLConfig.java:56)
	at com.github.dockerjava.netty.NettyDockerCmdExecFactory$InetSocketInitializer.initSsl(NettyDockerCmdExecFactory.java:340)
	at com.github.dockerjava.netty.NettyDockerCmdExecFactory$InetSocketInitializer.connect(NettyDockerCmdExecFactory.java:322)
	at com.github.dockerjava.netty.NettyDockerCmdExecFactory.connect(NettyDockerCmdExecFactory.java:220)
	at com.github.dockerjava.netty.NettyDockerCmdExecFactory.connect(NettyDockerCmdExecFactory.java:213)
	at com.github.dockerjava.netty.NettyDockerCmdExecFactory.access$000(NettyDockerCmdExecFactory.java:157)
	at com.github.dockerjava.netty.NettyDockerCmdExecFactory$1.getChannel(NettyDockerCmdExecFactory.java:183)
	at com.github.dockerjava.netty.InvocationBuilder.getChannel(InvocationBuilder.java:213)
	at com.github.dockerjava.netty.InvocationBuilder.get(InvocationBuilder.java:196)
	at com.github.dockerjava.netty.InvocationBuilder.get(InvocationBuilder.java:187)
	at com.github.dockerjava.netty.exec.ListImagesCmdExec.execute(ListImagesCmdExec.java:41)
	at com.github.dockerjava.netty.exec.ListImagesCmdExec.execute(ListImagesCmdExec.java:16)
	at com.github.dockerjava.netty.exec.AbstrSyncDockerCmdExec.exec(AbstrSyncDockerCmdExec.java:21)
	at com.github.dockerjava.core.command.AbstrDockerCmd.exec(AbstrDockerCmd.java:35)
	at org.apache.camel.component.docker.producer.DockerProducer.process(DockerProducer.java:115)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	... 46 more
Caused by: java.lang.ClassNotFoundException: org.glassfish.jersey.SslConfigurator
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:335)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 62 more 
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-26 12:46:20.153,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 27 07:06:37 UTC 2017,,,,,,,0|i3kjrr:,9223372036854775807,,,,,,,,,,26/Sep/17 12:46;davsclaus;Can you try to report this to the docker-java library,"26/Sep/17 12:49;jamesnetherton;As a short-term fix for standalone camel / Spring Boot, maybe we remove the Jersey exclusions from the camel-docker POM. 

The camel-docker OSGi feature should continue still work OK for non SSL usage and we could perhaps fix the SSL functionality in a future release.
",26/Sep/17 13:02;jamesnetherton;I raised: https://github.com/docker-java/docker-java/issues/922,"26/Sep/17 13:04;davsclaus;Yeah that sounds like a plan, you are welcome to provide a PR","26/Sep/17 14:46;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1963

    CAMEL-11842: CNFE when configuring camel-docker TLS options

    https://issues.apache.org/jira/browse/CAMEL-11842

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-11842

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1963.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1963
    
----
commit 89e2ba937934bfd10eb1064f3efd393d14c888d0
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2017-09-26T13:47:44Z

    CAMEL-11842: CNFE when configuring camel-docker TLS options

----
","26/Sep/17 15:07;githubbot;Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/1963
",27/Sep/17 07:06;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - Recent change in startup behaviour can cause camel-test-spring problems,CAMEL-11814,13104499,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,davsclaus,davsclaus,23/Sep/17 10:51,26/Sep/17 12:55,13/Mar/19 22:20,26/Sep/17 12:55,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-spring,camel-spring-boot,,,,,0,,,,"Creating this ticket up front as I was testing CiA2 source code with 2.20.0-SNAPSHOT and have issues with a camel spring boot app, that caused the test method to be executed without CamelContext been started prior - this works fine on 2.19.x and older versions.

Its very likely the new startup/shutdown change in camel-spring / camel-spring-boot that is causing a regression problem. A bit weird our own set of unit tests at Apache Camel hasn't triggered this.

Doing some more testing on CiA2 before posting more information here.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-25 11:03:04.691,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 26 12:55:20 UTC 2017,,,,,,,0|i3kg93:,9223372036854775807,,,,,,,,,,"25/Sep/17 08:41;davsclaus;There are 2 examples that fails with 2.20.0 upgrade

https://github.com/camelinaction/camelinaction2/tree/master/chapter10/camel-cxf-rest-spring-boot
https://github.com/camelinaction/camelinaction2/tree/master/chapter12/xa","25/Sep/17 09:02;davsclaus;Found an issue with ActiveMQ and I logged a ticket
https://issues.apache.org/jira/browse/AMQ-6822","25/Sep/17 09:10;davsclaus;Okay got the XA problem fixed, now its only the spring boot testing problem.","25/Sep/17 11:03;zregvart;I have found that if the {{NO_START}} flag in {{SpringCamelContext}} is not thread-local, but global the tests pass, I'll run all tests to see if this breaks anything but it seems to be a solution.",26/Sep/17 06:21;davsclaus;[~zregvart] how goes?,"26/Sep/17 08:40;zregvart;I've changed the {{NO_START}} flag to be a global (static) {{AtomicBoolean}} this will help with race conditions between {{CamelMainRunController}} and {{SpringCamelContext/CamelContextFactoryBean}} on different threads.

This fix conditions itself upon different {{(Spring)CamelContexts}} being in different classloaders to work. As far as I'm aware this is true for {{wildfly-camel}}; and integration tests support makes sure to manage the flag in single thread.","26/Sep/17 08:51;zregvart;I've discussed this change with the {{wildfly-camel}} team, a single classloader is used for SpringCamelContext, we need to use {{ThreadLocal}} and we need to control {{CamelMainRunController}} based on that.
","26/Sep/17 10:04;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1961

    CAMEL-11814: makes NO_START a ThreadLocal, and ...

    ...changes the way CamelMainRunController is started
    
    We need to change NO_START flag back to ThreadLocal as there is a use
    case when it's used from a single classloader outside of the tests in
    wildfly-camel.
    
    CamelMainRunController would atempt to start CamelContext from a thread
    that does not have the NO_START flag defined (it's a ThreadLocal), so
    it can only run when CamelContext is started. It's main purpose is to
    prevent the SpringBoot application JVM from terminating so having it
    run when the CamelContext is started doesn't prevent that.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-11814

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1961.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1961
    
----
commit b53773853e8fff5cad3854ed096812b844086080
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-09-26T10:03:12Z

    CAMEL-11814: makes NO_START a ThreadLocal, and ...
    
    ...changes the way CamelMainRunController is started
    
    We need to change NO_START flag back to ThreadLocal as there is a use
    case when it's used from a single classloader outside of the tests in
    wildfly-camel.
    
    CamelMainRunController would atempt to start CamelContext from a thread
    that does not have the NO_START flag defined (it's a ThreadLocal), so
    it can only run when CamelContext is started. It's main purpose is to
    prevent the SpringBoot application JVM from terminating so having it
    run when the CamelContext is started doesn't prevent that.

----
","26/Sep/17 12:53;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1961
","26/Sep/17 12:55;zregvart;I've merged from [PR#1961|https://github.com/apache/camel/pull/1961] into {{master}}, this way the ThreadLocal NO_START flag is preserved, and the issue with CamelMainRunController trying to start CamelContext in parallel was diverted by having the CamelMainRunController thread start after CamelContext is started (from a StartupListener).",,,,,,,,,,,,,,,,,,,,,,,
SSLContextParameters settings are not properly copied to SslContextFactory,CAMEL-11482,13083446,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Rovo,Rovo,29/Jun/17 12:10,26/Sep/17 12:54,13/Mar/19 22:20,26/Sep/17 12:54,2.19.0,2.19.1,,,,,,,,,,,,,,2.19.4,2.20.0,,,,camel-jetty,,,,,,0,,,,"Jetty 9.3+ excludes unsecure ciphers which end on either MD5, SHA or SHA1 by default now. This will however remove all ciphers that are used by either TLSv1 or TLSv1.1 and thus no ciphers remain in order to agree on a cipher for TLSv1 or TLSv1.1 connection attempts. (Further reading: https://github.com/eclipse/jetty.project/issues/860)

The Jetty 9 SSL configuration documentation (https://www.eclipse.org/jetty/documentation/9.3.x/configuring-ssl.html) states that this exclusion cipher suites can be customized by providing an own exclusion list. On specifying SSLContextParameters like below however will not correctly propagate this exclution cipher suites to the SslContextFactory of Jetty and thus use the default setting which prevents TLSv1 and TLSv1.1 connections.

{code:title=SSLContextParameters Spring Config|borderStyle=solid}
  @Bean(name = ""sslContextParameters"")
  public SSLContextParameters sslContextParameters() {
    String keyStore = env.getProperty(""ssl.keyStore.resource"");
    URL keyStoreUrl = this.getClass().getResource(keyStore);

    // http://camel.apache.org/jetty.html
    KeyStoreParameters ksp = new KeyStoreParameters();
    ksp.setResource(keyStoreUrl.getPath());
    ksp.setPassword(env.getProperty(""ssl.keyStore.password""));

    KeyManagersParameters kmp = new KeyManagersParameters();
    kmp.setKeyStore(ksp);
    kmp.setKeyPassword(env.getProperty(""ssl.key.password""));

    SSLContextParameters scp = new SSLContextParameters();
    scp.setKeyManagers(kmp);

    // Jetty 9.3+ support only TLSv1.2 by default hence clients not supporting this protocol will fail
    List<String> supportedSslProtocols = Arrays.asList(""TLSv1"", ""TLSv1.1"", ""TLSv1.2"");
    SecureSocketProtocolsParameters protocolsParameters = new SecureSocketProtocolsParameters();
    protocolsParameters.setSecureSocketProtocol(supportedSslProtocols);
    scp.setSecureSocketProtocols(protocolsParameters);

    // TLS 1.0 / 1.1 have been disabled by jetty 9.3
    // this is a first attempt to re-enable them
    // see
    // - https://www.eclipse.org/jetty/documentation/9.3.x/configuring-ssl.html
    // - https://github.com/eclipse/jetty.project/issues/860
    // - http://camel.apache.org/camel-configuration-utilities.html
    FilterParameters cipherParameters = new FilterParameters();
    cipherParameters.getInclude().add("".*"");
    cipherParameters.getExclude().add(""^.*_(MD5|SHA1)$"");
    scp.setCipherSuitesFilter(cipherParameters);

    return scp;
  }
{code}

A workaround is to use a custom JettyHttpComponent9 implementation that sets the excludedCipherSuites manually like depicted below:

{code:title=Workaround|borderStyle=solid}
  /**
   * A custom jetty http component which explicitly sets the excludedCipherSuites during creation of
   * the jetty connector.
   *
   * Why? It seems camel does not push included/excluded cipherSuites from {@link
   * SSLContextParameters} to the {@link SslContextFactory} nor does push explicitly listed cipher
   * suites (i.e. like <em>TLS_RSA_WITH_AES_256_CBC_SHA</em>) to the Jetty SSL context factory.
   */
  public static class HackedJettyHttpComponent extends JettyHttpComponent9 {

    @Override
    protected AbstractConnector createConnectorJettyInternal(Server server,
                                                             JettyHttpEndpoint endpoint,
                                                             SslContextFactory sslcf) {

      sslcf.setExcludeCipherSuites(""^.*_(MD5|SHA1)$"");
      return super.createConnectorJettyInternal(server, endpoint, sslcf);
    }
  }
{code}","Max OS X, Java 8 Update 131
Ubuntu 14.04 LTS, Java 8 Update 111
Camel 2.19.0
Jetty9 9.4.5v20170502 and 9.3.14.v20161028",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-01 07:24:50.023,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 26 12:54:47 UTC 2017,,,,,,,0|i3gw5b:,9223372036854775807,,,,,,,,,,01/Jul/17 07:24;davsclaus;Are you working on a patch / github PR?,"03/Jul/17 09:12;Rovo;Have to see if I am able to find some time, but our upcoming release has higher priorities.","04/Jul/17 17:49;Rovo;Just a quick headsup on this issue. I've started to work on a fix (https://github.com/RovoMe/camel/commit/952175559110babf0ee7224f8045c1270dad5aa7) though I'm not sure if the code has to support Java 7 (or even 6). Also, there are probably a couple other settings that aren't copied to the SslContextFactory which I have not yet included either. What should be the strategy on these? Continue work on that issue and copy over all settings or leave them to those who need them and ask them to provide a fix/PR?

Will also check how to setup unit-tests therefore, though as the method is private I guess I have to test it within createConnector(Server, JettyHttpEndpoint) and/or createHttpClient(JettyHttpEndpoint, Integer, SSLContextParameters) which use the updated method.","05/Jul/17 07:21;onders;2.16.X is EOL. 2.17.X is EOL.

I guess Java 6 and 7 support is not needed. 

for the setting to copy, IMHO i would suppose the nicer way would be to have full default copying all configurations to SSLContextFactory and also have configurable base strategy(which may be pluggable via SPI) and where you can choose which settings to copy and put to SSLContextFactory.",25/Jul/17 13:06;davsclaus;How is it going?,"08/Sep/17 12:43;davsclaus;Roman, are you working on this?","26/Sep/17 11:07;davsclaus;I am working on this, and we now set those ciphers and protocols filters from the ssl context configuration. 

Camel will log at INFO level the configuration, such as the default ones as shown
{code}
Connector on por:t 23003 is using excludeChiperSuites: [[^.*_(MD5|SHA|SHA1)$]] excludeProtocols: [[SSL, SSLv2, SSLv2Hello, SSLv3]]
{code}","26/Sep/17 11:17;Rovo;Thanks for taking over as I'm currently not having enough time lately. I've some (WIP) tests for the changes I had in my branch if you are interested. They basically test that TLSv1 or TLSv1.1 connections work as they should via Java's HttpUrlConnection. The only thing that bugs me, is, that I am not able to retrieve the server certificate but I'm not sure if this is related to self-signed certificates.",26/Sep/17 11:32;davsclaus;Yeah you are welcome to contribute your unit tests that would help surely.,"26/Sep/17 12:14;Rovo;Test for exclusion pattern. Both tests are green though you might notice a stacktrace on executing testHelloEndpoint as no server certificate is obtainable:

https://github.com/RovoMe/camel/blob/fix/CAMEL-11482_SSLContextParameters_settings_are_not_properly_copied_to_SslContextFactory/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/HttpsRouteSslContextParametersInUriTest_TLSv1SupportWithExclusionPattern.java

Test for defining explicite ciphers to support. Though as it turns out Jettys exclusion patterns seem to kick in before and hence remove all of the TLSv1/1.1 ciphers:

https://github.com/RovoMe/camel/blob/fix/CAMEL-11482_SSLContextParameters_settings_are_not_properly_copied_to_SslContextFactory/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/HttpsRouteSslContextParametersInUriTest_TLSv1SupportWithInclusionPattern.java

HTH",26/Sep/17 12:54;davsclaus;Thanks those SSL tests are extreme and they are hard to test as different platforms and JDKs and whatnot have different ciphers supported etc.,,,,,,,,,,,,,,,,,,,,,,
RabbitMQ Producer/Consumer does not recover if exchange/queue is deleted manually,CAMEL-11791,13103393,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hveiga,hveiga,19/Sep/17 21:48,26/Sep/17 06:35,13/Mar/19 22:20,26/Sep/17 06:35,2.19.2,,,,,,,,,,,,,,,2.19.4,2.20.0,,,,camel-rabbitmq,,,,,,0,,,,"While trying different recovering scenarios with camel-rabbitmq we tried to delete the exchange where the producer was sending RabbitMQ messages to.

We observed that the exchange was never recreated again as well as no new channel were created in the channel pool. Every time a channel was used to send a non-existent exchange, the channel was closed and we got a log saying ""Got a closed channel from the pool"". Once it ran out of channels in the pool, we keep getting the same exception when a new message tries to be sent to the exchange:

{noformat}
Caused by: java.util.NoSuchElementException: Timeout waiting for idle object
at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1174) ~[commons-pool-1.6.jar:1.6]
{noformat}

We are using a InOnly producer and the options we are using are: 
{noformat}
rabbitmq://somehose:someport/some_exchange?username=SomeApp&password=SomeApp&skipQueueDeclare=true&exchangeType=headers&automaticRecoveryEnabled=true&topologyRecoveryEnabled=true
{noformat}

It seems the code never catches a Exception thrown by channel.basicPublish(...) in RabbitMQMessagePublisher. Maybe we could catch if the issue is that the exchange got deleted and run the exchange declaration again?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-20 09:21:17.847,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 26 06:35:00 UTC 2017,,,,,,,0|i3k9fr:,9223372036854775807,,,,,,,,,,"20/Sep/17 09:21;davsclaus;Yeah sure we love contributions, so you are welcome to dive into the source code and try to improve this
http://camel.apache.org/contributing",21/Sep/17 21:29;hveiga;Thanks [~davsclaus] . I am working on the enhancement and see if I can provide a pull request in github in the coming days.,"25/Sep/17 18:51;githubbot;GitHub user hveiga opened a pull request:

    https://github.com/apache/camel/pull/1957

    CAMEL-11791: Enhanced reconnection for rabbitmq consumer and producer…

    … (including queue/exchange deletion)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hveiga/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1957.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1957
    
----
commit 79dadaa8ec98c3ab23dbb5b17bae3ade816bbf52
Author: Veiga Ortiz, Héctor <hector.veiga-ortiz@here.com>
Date:   2017-09-25T18:47:18Z

    CAMEL-11791: Enhanced reconnection for rabbitmq consumer and producer (including queue/exchange deletion)

----
",25/Sep/17 20:24;hveiga;I would appreciate if this could become part of release 2.19.4. Please let me know if I missed anything.,"26/Sep/17 06:34;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1957
",26/Sep/17 06:35;davsclaus;Thanks for reporting and the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,
[camel-box] missing Karaf feature dependency,CAMEL-11472,13083083,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,amarkevich,amarkevich,28/Jun/17 09:58,26/Sep/17 01:00,13/Mar/19 22:20,28/Jun/17 11:19,2.18.4,,,,,,,,,,,,,,,2.18.5,,,,,camel-box,,,,,,0,,,,"{noformat}
karaf@root()> repo-add mvn:org.apache.camel.karaf/apache-camel/2.18.4/xml/features
Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.18.4/xml/features
karaf@root()> feature:install camel-box
Error executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-box; type
=karaf.feature; version=""[2.18.4,2.18.4]""; filter:=""(&(osgi.identity=camel-box)(type=karaf.feature)(version>=2.18.4)(ver
sion<=2.18.4))"" [caused by: Unable to resolve camel-box/2.18.4: missing requirement [camel-box/2.18.4] osgi.identity; os
gi.identity=org.apache.camel.camel-box; type=osgi.bundle; version=""[2.18.4,2.18.4]""; resolution:=mandatory [caused by: U
nable to resolve org.apache.camel.camel-box/2.18.4: missing requirement [org.apache.camel.camel-box/2.18.4] osgi.wiring.
package; filter:=""(osgi.wiring.package=com.gargoylesoftware.htmlunit)"" [caused by: Unable to resolve org.apache.servicem
ix.bundles.htmlunit/2.22.0.1: missing requirement [org.apache.servicemix.bundles.htmlunit/2.22.0.1] osgi.wiring.package;
 filter:=""(&(osgi.wiring.package=org.eclipse.jetty.websocket.api)(version>=9.2.0)(!(version>=10.0.0)))"" [caused by: Unab
le to resolve org.eclipse.jetty.websocket.api/9.3.14.v20161028: missing requirement [org.eclipse.jetty.websocket.api/9.3
.14.v20161028] osgi.identity; osgi.identity=pax-jetty-condition-pax_http_whiteboard; type=karaf.feature; version=""[9.3.1
4.v20161028,9.3.14.v20161028]""; resolution:=mandatory [caused by: Unable to resolve pax-jetty-condition-pax_http_whitebo
ard/9.3.14.v20161028: missing requirement [pax-jetty-condition-pax_http_whiteboard/9.3.14.v20161028] osgi.identity; osgi
.identity=pax-http-whiteboard; type=karaf.feature; condition:=true]]]]]{noformat}

workaround:
{noformat}
karaf@root()> feature:install pax-http-whiteboard
karaf@root()> feature:install camel-box
{noformat}
",Karaf 4.1.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28/Jun/17 11:17;amarkevich;camel-box.patch;https://issues.apache.org/jira/secure/attachment/12874852/camel-box.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2017-06-28 10:00:09.213,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 28 11:19:21 UTC 2017,,,Patch Available,,,,0|i3gtwv:,9223372036854775807,,,,,,,,,,28/Jun/17 10:00;ancosen;We don't release 2.17.x camel anymore. The last one was 2.17.7,28/Jun/17 10:59;amarkevich;Reported version is same as used in local project; 2.18 also affected,28/Jun/17 11:17;amarkevich;Patch update to reffer to standard Karaf feature,28/Jun/17 11:19;ancosen;Thanks for the patch. Applied.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-websocket - Static resource returns empty body,CAMEL-11838,13104790,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Sep/17 13:57,25/Sep/17 13:59,13/Mar/19 22:20,25/Sep/17 13:59,,,,,,,,,,,,,,,,2.19.4,2.20.0,,,,camel-websocket,,,,,,0,,,,See CAMEL-11831,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-09-25 13:57:11.0,,,,,,,0|i3ki1j:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Connector API assumes flat classpath,CAMEL-11798,13103826,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,21/Sep/17 06:21,22/Sep/17 09:32,13/Mar/19 22:20,21/Sep/17 07:24,2.19.3,,,,,,,,,,,,,,,2.19.4,2.20.0,,,,camel-connector,,,,,,0,,,,"The ConnectorModel assumes that it can load the user's ConnectorComponent from its own class loader.

CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/1874",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-21 06:29:41.319,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 22 09:32:40 UTC 2017,,,,,,,0|i3kc47:,9223372036854775807,,,,,,,,,,"21/Sep/17 06:29;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1945

    [CAMEL-11798] Connector API assumes flat classpath

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11798

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1945.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1945
    
----
commit 414eb298f21ce3cf5e643a57854e7c8735b4b240
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-09-21T06:22:36Z

    [CAMEL-11798] Connector API assumes flat classpath

----
","21/Sep/17 07:24;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1945
","21/Sep/17 12:31;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1947

    [CAMEL-11798] Connector API assumes flat classpath (fix typo)

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11798m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1947.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1947
    
----
commit 201ff4185bc9aa92afd9ed55b009837d456327dd
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-09-21T12:31:03Z

    [CAMEL-11798] Connector API assumes flat classpath (fix typo)

----
","22/Sep/17 09:32;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1947
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-example-spring-cloud-servicecall doesn't work out of the box,CAMEL-11711,13097935,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,ancosen,ancosen,28/Aug/17 11:27,20/Sep/17 12:11,13/Mar/19 22:20,20/Sep/17 12:11,,,,,,,,,,,,,,,,2.20.0,,,,,examples,,,,,,0,,,,"Currently when you try to use the serviceCall (following the provided steps) it fails with

{code}
org.apache.camel.http.common.HttpOperationFailedException: HTTP operation failed invoking http://localhost:9021/ with statusCode: 404
at org.apache.camel.component.undertow.UndertowClientCallback.lambda$setupResponseListener$2(UndertowClientCallback.java:232)
at org.apache.camel.component.undertow.UndertowClientCallback$ErrorHandlingClientCallback.completed(UndertowClientCallback.java:86)
 at io.undertow.client.http.HttpClientExchange.setResponse(HttpClientExchange.java:125)
at io.undertow.client.http.HttpClientConnection$ClientReadListener.handleEvent(HttpClientConnection.java:642)
at io.undertow.client.http.HttpClientConnection$ClientReadListener.handleEvent(HttpClientConnection.java:511)
at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92)
at org.xnio.conduits.ReadReadyHandler$ChannelListenerHandler.readReady(ReadReadyHandler.java:66)
at org.xnio.nio.NioSocketConduit.handleReady(NioSocketConduit.java:88)
at org.xnio.nio.WorkerThread.run(WorkerThread.java:561)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-12 13:44:37.438,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 12 13:51:33 UTC 2017,,,,,,,0|i3jch3:,9223372036854775807,,,,,,,,,,"12/Sep/17 13:44;davsclaus;Yeah I reproduced it as well

However if you call the services directly via
{code}
curl http://localhost:9011/
curl http://localhost:9021/
{code}
you get a response
",12/Sep/17 13:44;davsclaus;I remember trying this example in the past where it worked,12/Sep/17 13:51;lb;Will have a look as son as possible,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-box component occasionally hangs,CAMEL-11793,13103530,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fjollberg,fjollberg,20/Sep/17 08:12,20/Sep/17 10:31,13/Mar/19 22:20,20/Sep/17 08:55,2.19.2,,,,,,,,,,,,,,,2.20.0,,,,,camel-box,,,,,,0,,,,"I'd like to update the Box Java SDK on which the camel-box component is built to the newly released version 2.8.1. Bug/Improvement borderline case.

This is due to the fix to https://github.com/box/box-java-sdk/issues/466 included in this version which allows a user to set timeouts to avoid blocking threads due to network issues. This is an issue which does occur in our production environment.

Pull request will follow shortly.

NOTE: I do not have access to a proper Box test site against which I can run all integration tests. I've contacted Box.com to see if that is possible, but thus far I've only done semi-manual testing of the user manager parts of the component which I am using.

This seems fine so far, but I obviously needed to change a call in the file manager part to get the code to compile. A minor change, but a change I've thus not tested properly, as I've not been able to regression test any of the other functionality yet.

I hope someone else have access to such an integration test environment and can run the tests properly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-20 08:17:28.963,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 20 10:31:40 UTC 2017,,,,,,,0|i3kaa7:,9223372036854775807,,,,,,,,,,"20/Sep/17 08:17;githubbot;GitHub user fjollberg opened a pull request:

    https://github.com/apache/camel/pull/1943

    CAMEL-11793: Update Box Java SDK to version 2.8.1

    This is in order to be able to set timeouts properly for the Box client to avoid hanging threads due to network issues.
    
    See https://github.com/box/box-java-sdk/issues/466

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fjollberg/camel box-com-sdk-281

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1943.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1943
    
----
commit cb80dc1512c59e9258a2f1a34beeba29dba477d2
Author: Fredrik Jönsson <fjo@kth.se>
Date:   2017-09-20T08:13:29Z

    CAMEL-11793: Update Box Java SDK to version 2.8.1

----
",20/Sep/17 08:55;davsclaus;Thanks for the PR,"20/Sep/17 10:31;githubbot;Github user fjollberg closed the pull request at:

    https://github.com/apache/camel/pull/1943
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QuartzScheduledPollConsumerScheduler causes trigger misfires on each application start,CAMEL-11632,13092458,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,oceansize,oceansize,04/Aug/17 11:55,12/Sep/17 12:44,13/Mar/19 22:20,12/Sep/17 12:44,2.19.0,,,,,,,,,,,,,,,2.18.5,2.19.4,2.20.0,,,camel-quartz2,,,,,,0,,,,"Recently I noticed that on application start Quartz founds and triggers misfired triggers:
{code:java}
INFO o.s.s.q.LocalDataSourceJobStore - Handling 1 trigger(s) that missed their scheduled fire-time.
{code}
That wasn't not the realistic case in my scenario - since I could see in a database that NEXT_FIRE_TIME is much ahead of the current time.

After digging a little I found the issue in the *QuartzScheduledPollConsumerScheduler*:
{code:java}
 // Ensure the cron schedule is updated
CronTrigger newTrigger = existingTrigger.getTriggerBuilder().withSchedule(CronScheduleBuilder.cronSchedule(getCron()).inTimeZone(getTimeZone())).build();

quartzScheduler.rescheduleJob(triggerKey, newTrigger);
{code}

There 2 issues here:
1. Job is rescheduled even if nothing has been changed (i.e. cron expression, cron timezone)
2.  *existingTrigger.getTriggerBuilder()* returns trigger builder with START_TIME of existing trigger which, surely, is the past. This is causing the described bug - NEXT_FIRE_TIME is calculated based on the old START_TIME and is in the past also. So rescheduled trigger becomes misfired trigger immediately.

Proposal:
1. Do not reschedule job if nothing has been changed.
2. If job needs to be rescheduled - make sure to set START_TIME to a current date.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-07 06:18:21.062,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 12 10:59:07 UTC 2017,,,,,,,0|i3if5j:,9223372036854775807,,,,,,,,,,07/Aug/17 06:18;davsclaus;You are welcome to work on a contribution,12/Sep/17 10:59;davsclaus;The existing quartz consumer already does that by checking of the cron/tz was changed and then only does a reschedule if needed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
S3 Consumer does not close S3 Object Input Streams and this causes HTTP connection leaks,CAMEL-11698,13096968,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,mvlakh,mvlakh,23/Aug/17 09:12,12/Sep/17 07:52,13/Mar/19 22:20,12/Sep/17 07:52,2.14.3,2.19.2,,,,,,,,,,,,,,2.18.5,2.19.4,2.20.0,,,camel-aws,,,,,,0,,,,"It looks like S3Consumer does nothing to prevent HTTP Connection leaks that can easily happen if some exception is thrown while it is generates a batch of exchanges and sends them for processing. Also we can lose HTTP Connections if our route does not close S3 Object Input Streams which can easily happen.

Due to this issue s3 consumer may works some time and then start failing with the following exceptions:
{code}
com.amazonaws.AmazonClientException: Unable to execute HTTP request: Timeout waiting for connection from pool
	at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:544)
	at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:273)
	at com.amazonaws.services.s3.AmazonS3Client.invoke(AmazonS3Client.java:3660)
	at com.amazonaws.services.s3.AmazonS3Client.getObject(AmazonS3Client.java:1133)
	at com.amazonaws.services.s3.AmazonS3EncryptionClient.access$201(AmazonS3EncryptionClient.java:65)
	at com.amazonaws.services.s3.AmazonS3EncryptionClient$S3DirectImpl.getObject(AmazonS3EncryptionClient.java:524)
	at com.amazonaws.services.s3.internal.crypto.S3CryptoModuleAE.getObjectSecurely(S3CryptoModuleAE.java:106)
	at com.amazonaws.services.s3.internal.crypto.CryptoModuleDispatcher.getObjectSecurely(CryptoModuleDispatcher.java:114)
	at com.amazonaws.services.s3.AmazonS3EncryptionClient.getObject(AmazonS3EncryptionClient.java:427)
	at com.amazonaws.services.s3.AmazonS3Client.getObject(AmazonS3Client.java:1005)
	at org.apache.camel.component.aws.s3.S3Consumer.createExchanges(S3Consumer.java:112)
	at org.apache.camel.component.aws.s3.S3Consumer.poll(S3Consumer.java:93)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}

I found 3 week points in the way S3Consumer is implemented:
1. It does not handle exceptions in the poll() method where it reads a single s3 object which means that s3 object stream can be left opened forever in case of some fault;
2. It also does not handle exceptions in the createExchanges method where it populates a list of exchanges based on the list of s3 objects available in the bucket. If for example we want to consumer 10 files in a pool and getObject call for the file 10 failed due to whatever reason steams for 9 objects that are already opened will be lost;
3. In order to make sure that we always close all the streams and to not force user to do this all the time the implementation of the processBatch method should be also improved to close all the opened streams in the finally block.

In order to resolve issues 2 and 3 in my current project (the issue 1 is not affecting me because I do not use that feature) I implemented a custom extension of the native S3Consumer that I want to share with you. It will give you the idea of the required changes that need to be applied to fix these issues. I hope it will be useful.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,23/Aug/17 09:14;mvlakh;CustomS3Consumer.java;https://issues.apache.org/jira/secure/attachment/12883296/CustomS3Consumer.java,,,,1.0,,,,,,,,,,,,,,,,,,,2017-08-23 12:15:08.469,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 12 07:52:00 UTC 2017,,,,,,,0|i3j6jr:,9223372036854775807,,,,,,,,,,"23/Aug/17 12:15;ancosen;We add this in the past 

https://issues.apache.org/jira/browse/CAMEL-11697

With the autocloseBody option true we close the s3Object when the exchange is complete:

{code}
    public Exchange createExchange(ExchangePattern pattern, S3Object s3Object) {
        LOG.trace(""Getting object with key [{}] from bucket [{}]..."", s3Object.getKey(), s3Object.getBucketName());

        ObjectMetadata objectMetadata = s3Object.getObjectMetadata();

        LOG.trace(""Got object [{}]"", s3Object);

        Exchange exchange = super.createExchange(pattern);
        Message message = exchange.getIn();

        if (configuration.isIncludeBody()) {
            message.setBody(s3Object.getObjectContent());
        } else {
            message.setBody(null);
        }

        message.setHeader(S3Constants.KEY, s3Object.getKey());
        message.setHeader(S3Constants.BUCKET_NAME, s3Object.getBucketName());
        message.setHeader(S3Constants.E_TAG, objectMetadata.getETag());
        message.setHeader(S3Constants.LAST_MODIFIED, objectMetadata.getLastModified());
        message.setHeader(S3Constants.VERSION_ID, objectMetadata.getVersionId());
        message.setHeader(S3Constants.CONTENT_TYPE, objectMetadata.getContentType());
        message.setHeader(S3Constants.CONTENT_MD5, objectMetadata.getContentMD5());
        message.setHeader(S3Constants.CONTENT_LENGTH, objectMetadata.getContentLength());
        message.setHeader(S3Constants.CONTENT_ENCODING, objectMetadata.getContentEncoding());
        message.setHeader(S3Constants.CONTENT_DISPOSITION, objectMetadata.getContentDisposition());
        message.setHeader(S3Constants.CACHE_CONTROL, objectMetadata.getCacheControl());
        message.setHeader(S3Constants.S3_HEADERS, objectMetadata.getRawMetadata());
        message.setHeader(S3Constants.SERVER_SIDE_ENCRYPTION, objectMetadata.getSSEAlgorithm());

        /**
         * If includeBody != true, it is safe to close the object here.  If includeBody == true,
         * the caller is responsible for closing the stream and object once the body has been fully consumed.
         * As of 2.17, the consumer does not close the stream or object on commit.
         */
        if (!configuration.isIncludeBody()) {
            try {
                s3Object.close();
            } catch (IOException e) {
            }
        } else {
            if (configuration.isAutocloseBody()) {
                exchange.addOnCompletion(new SynchronizationAdapter() {
                    @Override
                    public void onDone(Exchange exchange) {
                        try {
                            s3Object.close();
                        } catch (IOException e) {
                        }
                    }
                });
            }
        }

        return exchange;
{code}

We need to improve error handling somewhere by the way","23/Aug/17 12:17;ancosen;By the way you're welcome to work on a PR or a patch for improving this.
http://camel.apache.org/contributing.html","24/Aug/17 11:18;stevel@apache.org;Don't know if its relevant here, but in Hadoop s3a we decide whether to abort or close the connection based on the amount of remaining data. In close() then AWS s3 client will read() to the end of the data, to recycle the HTTP1.1 connection. This is OK for small files, but not multi-GB files where you are closing things to jump around in seek",12/Sep/17 07:52;davsclaus;Thanks. I added the suggestion of closing the s3 objects in that create exchanges method. The autoClose option that Andreas talk about is default enabled and will ensure the s3 object is closed for each exchange being routed by Camel.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hazelcast-starter : hazelcast customizer have been deleted,CAMEL-11769,13101224,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,11/Sep/17 10:41,11/Sep/17 11:22,13/Mar/19 22:20,11/Sep/17 11:22,,,,,,,,,,,,,,,,2.20.0,,,,,camel-spring-boot-starters,,,,,,0,,,,"This commit has removed all the *Customizers associated to the camel-hazelcast-starter:

    https://github.com/apache/camel/commit/c51fe42eb5e407aa7473abee71ce941e0553f233

Such classes are manually added to the starter.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-09-11 10:41:14.0,,,,,,,0|i3jw7z:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-itest-karaf - CamelDockerTest fails,CAMEL-11768,13101132,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,11/Sep/17 03:08,11/Sep/17 07:52,13/Mar/19 22:20,11/Sep/17 07:52,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-docker,karaf,tests,,,,0,,,,"{code}
$ ./run-tests.sh CamelDockerTest
...
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 10.596 sec <<< FAILURE! - in org.apache.camel.itest.karaf.CamelDockerTest
test(org.apache.camel.itest.karaf.CamelDockerTest)  Time elapsed: 10.445 sec  <<< ERROR!
org.ops4j.pax.exam.WrappedTestContainerException: [test(org.apache.camel.itest.karaf.CamelDockerTest): Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-docker; type=karaf.feature; version=""[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]""; filter:=""(&(osgi.identity=camel-docker)(type=karaf.feature)(version>=2.20.0.SNAPSHOT)(version<=2.20.0.SNAPSHOT))"" [caused by: Unable to resolve camel-docker/2.20.0.SNAPSHOT: missing requirement [camel-docker/2.20.0.SNAPSHOT] osgi.identity; osgi.identity=org.apache.camel.camel-docker; type=osgi.bundle; version=""[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-docker/2.20.0.SNAPSHOT: missing requirement [org.apache.camel.camel-docker/2.20.0.SNAPSHOT] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.github.dockerjava.api.async)(version>=3.0.0)(!(version>=4.0.0)))"" [caused by: Unable to resolve org.apache.servicemix.bundles.docker-java/3.0.13.1: missing requirement [org.apache.servicemix.bundles.docker-java/3.0.13.1] osgi.wiring.package; filter:=""(&(osgi.wiring.package=javax.annotation)(version>=1.2.0)(!(version>=2.0.0)))""]]]]
	at org.apache.felix.resolver.ResolutionError.toException(ResolutionError.java:42)
	at org.apache.felix.resolver.ResolverImpl.doResolve(ResolverImpl.java:389)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:375)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:347)
	at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:218)
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:291)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1233)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1132)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)


Results :

Tests in error: 
  CamelDockerTest.test » WrappedTestContainer [test(org.apache.camel.itest.karaf...

Tests run: 1, Failures: 0, Errors: 1, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 15.983 s
[INFO] Finished at: 2017-09-11T11:15:12+09:00
[INFO] Final Memory: 41M/2875M
[INFO] ------------------------------------------------------------------------
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-11 03:24:20.979,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 11 06:53:48 UTC 2017,,,,,,,0|i3jvnj:,9223372036854775807,,,,,,,,,,"11/Sep/17 03:24;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1931

    CAMEL-11768: camel-itest-karaf - CamelDockerTest fails

    https://issues.apache.org/jira/browse/CAMEL-11768

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-11768

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1931.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1931
    
----
commit df02468efac34bb05a7e75e73892d2578fbce262
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-09-11T03:23:13Z

    CAMEL-11768: camel-itest-karaf - CamelDockerTest fails

----
","11/Sep/17 06:53;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1931
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
REST DSL/component method Uppercase,CAMEL-11624,13091886,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,poloche,poloche,02/Aug/17 13:32,08/Sep/17 13:38,13/Mar/19 22:20,08/Sep/17 13:38,2.19.1,,,,,,,,,,,,,,,2.19.4,2.20.0,,,,rest,,,,,,0,,,,"when we are using rest component we need to set the method in uppercase otherwise this will return error 405

bad example : String requestResponse = testProducer.requestBody(""rest:get:health?host=$activityHost:$activityPort"", null, String.class)

working example
String requestResponse = testProducer.requestBody(""rest:GET:health?host=$activityHost:$activityPort"", null, String.class)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-07 06:10:49.144,,"String requestResponse = testProducer.requestBody(""rest:GET:health?host=$activityHost:$activityPort"", null, String.class)",no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 05 17:17:26 UTC 2017,,,,,,,0|i3ibnb:,9223372036854775807,,,,,,,,,,"07/Aug/17 06:10;davsclaus;What rest component are you using? As it may depend on which component that does the actual rest call about the upper case thing. 

But yeah we should make it work with regardless how you type it",05/Sep/17 17:17;davsclaus;Can you tell us what component you are using?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-undertow - Consumer adds duplicate headers,CAMEL-11765,13100806,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Sep/17 13:10,08/Sep/17 13:37,13/Mar/19 22:20,08/Sep/17 13:37,,,,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-undertow,,,,,,0,,,,"You get HTTP_METHOD with [GET, GET] or its duplicate",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-09-08 13:10:29.0,,,,,,,0|i3jtlr:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-itest-karaf - CamelNagiosTest fails,CAMEL-11759,13100349,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,07/Sep/17 02:34,07/Sep/17 07:26,13/Mar/19 22:20,07/Sep/17 06:45,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-nagios,karaf,tests,,,,0,,,,"{code}
$ ./run-tests.sh CamelNagiosTest
...
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 7.425 sec <<< FAILURE! - in org.apache.camel.itest.karaf.CamelNagiosTest
test(org.apache.camel.itest.karaf.CamelNagiosTest)  Time elapsed: 7.33 sec  <<< ERROR!
java.lang.ClassNotFoundException: org.bouncycastle.crypto.BlockCipher not found by wrap_file__Users_tasato_.m2_repository_com_github_jsendnsca_jsendnsca_2.1.1_jsendnsca-2.1.1.jar [82]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1550)
	at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:79)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1958)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at com.googlecode.jsendnsca.encryption.Encryption.<clinit>(Encryption.java:42)
	at org.apache.camel.component.nagios.NagiosConfiguration.<init>(NagiosConfiguration.java:52)
	at org.apache.camel.component.nagios.NagiosComponent.<init>(NagiosComponent.java:36)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at java.lang.Class.newInstance(Class.java:442)
	at org.apache.camel.util.ObjectHelper.newInstance(ObjectHelper.java:1736)
	at org.apache.camel.util.ReflectionInjector.newInstance(ReflectionInjector.java:32)
	at org.apache.camel.impl.DefaultInjector.newInstance(DefaultInjector.java:45)
	at org.apache.camel.impl.osgi.Activator$BaseResolver.createInstance(Activator.java:544)
	at org.apache.camel.impl.osgi.Activator$BaseResolver.createInstance(Activator.java:514)
	at org.apache.camel.impl.osgi.Activator$BundleComponentResolver.resolveComponent(Activator.java:292)
	at org.apache.camel.core.osgi.OsgiComponentResolver.getComponent(OsgiComponentResolver.java:58)
	at org.apache.camel.blueprint.BlueprintComponentResolver.resolveComponent(BlueprintComponentResolver.java:66)
	at org.apache.camel.impl.DefaultCamelContext.initComponent(DefaultCamelContext.java:517)
	at org.apache.camel.impl.DefaultCamelContext.lambda$getComponent$0(DefaultCamelContext.java:468)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:468)
	at org.apache.camel.test.karaf.AbstractFeatureTest.testComponent(AbstractFeatureTest.java:201)
	at org.apache.camel.test.karaf.AbstractFeatureTest.testComponent(AbstractFeatureTest.java:188)
	at org.apache.camel.itest.karaf.CamelNagiosTest.test(CamelNagiosTest.java:30)


Results :

Tests in error: 
  CamelNagiosTest.test:30->AbstractFeatureTest.testComponent:188->AbstractFeatureTest.testComponent:201 » ClassNotFound

Tests run: 1, Failures: 0, Errors: 1, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 11.545 s
[INFO] Finished at: 2017-09-07T11:33:10+09:00
[INFO] Final Memory: 41M/2875M
[INFO] ------------------------------------------------------------------------
{code}",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11653,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-07 03:10:57.22,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 07 07:26:41 UTC 2017,,,,,,,0|i3jqsf:,9223372036854775807,,,,,,,,,,07/Sep/17 02:57;tadayosi;Probably it's related to CAMEL-11653.,"07/Sep/17 03:10;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1920

    CAMEL-11759: camel-itest-karaf - CamelNagiosTest fails

    https://issues.apache.org/jira/browse/CAMEL-11759

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-11759

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1920.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1920
    
----
commit 689d72a9aa8391be686713853c2c63f499413458
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-09-07T03:10:00Z

    CAMEL-11759: camel-itest-karaf - CamelNagiosTest fails

----
","07/Sep/17 07:26;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/1920
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-itest-karaf - CamelServicenowTest fails,CAMEL-11760,13100354,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,07/Sep/17 03:25,07/Sep/17 07:26,13/Mar/19 22:20,07/Sep/17 06:45,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-servicenow,karaf,tests,,,,0,,,,"{code}
$ ./run-tests.sh CamelServicenowTest
...
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 8.451 sec <<< FAILURE! - in org.apache.camel.itest.karaf.CamelServicenowTest
test(org.apache.camel.itest.karaf.CamelServicenowTest)  Time elapsed: 8.357 sec  <<< ERROR!
org.ops4j.pax.exam.WrappedTestContainerException: [test(org.apache.camel.itest.karaf.CamelServicenowTest): Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-servicenow; type=karaf.feature; version=""[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]""; filter:=""(&(osgi.identity=camel-servicenow)(type=karaf.feature)(version>=2.20.0.SNAPSHOT)(version<=2.20.0.SNAPSHOT))"" [caused by: Unable to resolve camel-servicenow/2.20.0.SNAPSHOT: missing requirement [camel-servicenow/2.20.0.SNAPSHOT] osgi.identity; osgi.identity=org.apache.camel.camel-servicenow; type=osgi.bundle; version=""[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-servicenow/2.20.0.SNAPSHOT: missing requirement [org.apache.camel.camel-servicenow/2.20.0.SNAPSHOT] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.fasterxml.jackson.datatype.jdk8)(version>=2.8.0)(!(version>=3.0.0)))""]]]
	at org.apache.felix.resolver.ResolutionError.toException(ResolutionError.java:42)
	at org.apache.felix.resolver.ResolverImpl.doResolve(ResolverImpl.java:389)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:375)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:347)
	at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:218)
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:285)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1170)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1069)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)


Results :

Tests in error: 
  CamelServicenowTest.test » WrappedTestContainer [test(org.apache.camel.itest.k...

Tests run: 1, Failures: 0, Errors: 1, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 12.999 s
[INFO] Finished at: 2017-09-07T12:24:28+09:00
[INFO] Final Memory: 41M/2875M
[INFO] ------------------------------------------------------------------------
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-07 04:07:22.899,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 07 07:26:21 UTC 2017,,,,,,,0|i3jqtj:,9223372036854775807,,,,,,,,,,"07/Sep/17 04:07;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1921

    CAMEL-11760: camel-itest-karaf - CamelServicenowTest fails

    https://issues.apache.org/jira/browse/CAMEL-11760

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-11760

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1921.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1921
    
----
commit b151b44c5f4af3b6044b23a3d5acd2dd71a885d1
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-09-07T04:06:17Z

    CAMEL-11760: camel-itest-karaf - CamelServicenowTest fails

----
","07/Sep/17 07:26;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/1921
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Spring : unable to mix xml and java routes,CAMEL-11715,13097984,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,lb,lb,28/Aug/17 14:55,06/Sep/17 10:16,13/Mar/19 22:20,06/Sep/17 10:16,,,,,,,,,,,,,,,,2.20.0,,,,,camel-spring,camel-spring-boot,,,,,0,,,,"I camel 2.19 it was possible to mix routes from Spring XML and Spring boot but that does not work anymore with camel 2.20.x.

A sample project can be found here: https://github.com/lburgazzoli/camel-spring-xml so if you switch camel version, you'd see that the java route is not more loaded.",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11261,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-03 08:06:20.498,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 06 10:15:55 UTC 2017,,,,,,,0|i3jcrz:,9223372036854775807,Regression,,,,,,,,,03/Sep/17 08:06;davsclaus;I wonder if we can build an unit test in camel-spring-boot that can reproduce this?,"03/Sep/17 19:58;zregvart;I have a test/fix but I want to run the full tests to see if anything has been broken by the fix, I'll update in a bit.",05/Sep/17 07:28;zregvart;The fix I have causes deadlock (probably route not started) in {{camel-spring-cloud}} (_org.apache.camel.spring.cloud.CamelSpringCloudServiceCallRibbonTest_) test. I need to investigate that case. It's quite common to make a change in one part of our Spring support and cause an issue in another :(,"05/Sep/17 07:48;zregvart;I think I found the issue, again, it's simple ordering of RoutesCollector, CamelContextFactoryBean and SpringCamelContext. Running all tests to confirm.",05/Sep/17 13:53;zregvart;I've pushed a fix for this [~lb] would you mind verifying it works with your example? Thanks (y),"06/Sep/17 10:15;lb;seems to work, will close the issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,
WorkerPool is null in DefaultCamelReactiveStreamsService,CAMEL-11615,13091046,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,qabbasi,qabbasi,30/Jul/17 14:47,04/Sep/17 12:04,13/Mar/19 22:20,04/Sep/17 11:53,2.19.1,,,,,,,,,,,,,,,2.19.3,2.20.0,,,,camel-reactive-streams,,,,,,0,,,,"In https://github.com/qabbasi/reactive-camel-demo I'm using the camel-reactive-streams-starter project to create a application based on RxJava2. Currently I'm getting a NPE during runtime.

I also tried to test the sample route inside https://github.com/apache/camel/tree/master/examples/camel-example-reactive-streams, but unfortunately this also results in the same exception:

java.lang.NullPointerException: null
        at org.apache.camel.component.reactive.streams.engine.CamelSubscription.checkAndFlush(CamelSubscription.java:123) ~[camel-reactive-streams-2.19.1.jar:2.19.1]
        at org.apache.camel.component.reactive.streams.engine.CamelSubscription.publish(CamelSubscription.java:247) ~[camel-reactive-streams-2.19.1.jar:2.19.1]
        at org.apache.camel.component.reactive.streams.engine.CamelPublisher.publish(CamelPublisher.java:100) ~[camel-reactive-streams-2.19.1.jar:2.19.1]
        at org.apache.camel.component.reactive.streams.engine.DefaultCamelReactiveStreamsService.sendCamelExchange(DefaultCamelReactiveStreamsService.java:123) ~[camel-reactive-streams-2.19.1.jar:2.19.1]
        at org.apache.camel.component.reactive.streams.ReactiveStreamsProducer.process(ReactiveStreamsProducer.java:44) ~[camel-reactive-streams-2.19.1.jar:2.19.1]
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145) ~[camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77) ~[camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541) ~[camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:120) ~[camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:83) ~[camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:197) [camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:79) [camel-core-2.19.1.jar:2.19.1]
        at java.util.TimerThread.mainLoop(Timer.java:555) [na:1.8.0_141]
        at java.util.TimerThread.run(Timer.java:505) [na:1.8.0_141]
","OS: OSX 10.11.6
JDK: Oracle 1.8.0_141
MVN: 3.5.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-01 20:11:20.457,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 04 12:04:46 UTC 2017,,,,,,,0|i3i6hb:,9223372036854775807,,,,,,,,,,31/Jul/17 08:36;qabbasi;[~davsclaus] I tested it just out on 2.20.0-SNAPSHOT: still getting a NPE.,"01/Aug/17 20:11;davsclaus;Yeah thanks for testing. Its because the reactive stream component is not started before the @PostConstruct code is run, where you call the subscribe method, which then runs the flow - where the thread pool is null because its not started yet.

I guess it may be nicer to let the subscribe method ""remember"" it should start only after the component has been started, so it startup after all the other stuff such as Camel has been started.

This is more safter as you can have a race condition where the stream flow will trigger some stream events you then route into camel which then happens to be starting up at the same time.
","05/Aug/17 13:40;qabbasi;Thanks for the nice writeup of the underlying issue. If there's no one already working on this issue I'd would willingly try to help here. Likewise it would be helpful if you could roughly point to interesting parts of the processing which I could then examine.

Food for thought:
Idk if it's a misuse or overkill: maybe we could notify the final processing component (i.e. code where the subscribe method is defined) via Spring application events that everything is ""hooked up""?","06/Aug/17 07:30;davsclaus;Yeah I thought a bit on the same line to look at CamelSubscription so its subscribe method would only start after camel context has been started. There is ways to hook into this. 

Take a look at
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/StartupListener.java

And then see how its used in other Camel components and see if you can find out how to hook that into this component/subscriber.","09/Aug/17 18:40;qabbasi;After digging through the codebase I've a proposal which I wanted to discuss with you before I go out for the actual implementation and testing of it.

Currently there's no way to stop clients calling the CamelReactiveStreamsService#fromStream static factory method right after instantiating the CamelReactiveStreamsService, i.e. not waiting for the actual bootstrapping of the service. (One could also provide a kind of callback method, which would be executed when the bootstrapping is done. But that would look rather unusual in my POV) TBH I think the client shouldn't be bothered with the internals of the service. Long story short: I'd propose that we enqueue all fromStream()-calls inside the service and would execute them right after when CamelReactiveStreamsService#doStart is called. Otherwise – as you already pointed out – we would never have a backed ThreadPool inside the created publisher & subscribers.

Regarding the StartupListener: this would not work for services but rather for components, as you may know. I think, CamelReactiveStreamsService#doStart provides the same mimic/mechanism for this synchronisation-logic. What do you say?",18/Aug/17 09:23;qabbasi;[~davsclaus] What do you say? Any alternative suggestion?,"22/Aug/17 00:12;davsclaus;I am traveling and dont have time to look into this, I will be back start of next month","04/Sep/17 11:53;davsclaus;Yeah the component has been improved from 2.20 onwards so it works better there. 

The best solution is to create the thread pool in the constructor which is now what we do.",04/Sep/17 12:04;qabbasi;Creating the TP directly inside the ctor is of course a lot easier then I originally thought :),,,,,,,,,,,,,,,,,,,,,,,,
Atmosphere framework has changed initialisation API,CAMEL-11725,13098258,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,pkletsko,pkletsko,29/Aug/17 12:59,31/Aug/17 06:41,13/Mar/19 22:20,31/Aug/17 06:41,2.19.1,,,,,,,,,,,,,,,2.20.0,,,,,camel-atmosphere-websocket,,,,,,0,,,,"Atmosphere framework has changed initialisation API.

In Atmosphere version 2.4.9 new class for initialisation AtmosphereFrameworkInitializer should be used. 

Thus component should be modified according to a new init procedure. 

More information about problems with current implementation of the component :
https://github.com/pkletsko/spring-boot-camel-atmosphere-websocket/issues/1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-29 13:04:14.209,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 31 06:41:32 UTC 2017,,,,,,,0|i3jefj:,9223372036854775807,,,,,,,,,,29/Aug/17 13:04;ancosen;Please stop changing priority to blocker.,"29/Aug/17 13:19;pkletsko;I have a solution already, just need to fix tests","30/Aug/17 13:46;githubbot;GitHub user pkletsko opened a pull request:

    https://github.com/apache/camel/pull/1908

    CAMEL-11725 applied a new way of Atmosphere Framework initialization

    This commit will fix the problem with initialisation of Atmosphere framework and gives ability to use this component with combination of spring boot. It is important for now to keep version of atmosphere 2.4.10

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pkletsko/camel CAMEL-11725-new-atmosphere-ws-init

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1908.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1908
    
----
commit 181c741d09d22b1b6e8e4598cc509bd979532d0d
Author: Pavlo Kletsko <pavlo.kletsko@greenbird.com>
Date:   2017-08-30T13:44:08Z

    CAMEL-11725 applied a new way of Atmosphere Framework initialization

----
","31/Aug/17 06:41;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1908
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
error in handling return parameters in db functions,CAMEL-11716,13098003,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,valdar,valdar,28/Aug/17 15:41,29/Aug/17 12:17,13/Mar/19 22:20,29/Aug/17 08:37,2.19.1,,,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-sql,,,,,,0,,,,"Let's consider for instance the following db function:
{code}
create or replace function sum_two_numbers_function

  (a in number, b in number)

return number deterministic is

begin

 return a + b;

end;
{code}

One might think to run this camel route in order to call the mentioned db function:
{code}
sql-store:sum_two_numbers_function(INTEGER ${body[0]}, INTEGER ${body[1]})?function=true
{code}
but SqlCall build incorect query:
{code}
? = call sum_two_numbers_function(?)
{code}
which fail on wrong number of arguments. After an investigation is found out that first parameter was skipped for function calls.
https://github.com/spring-projects/spring-framework/blob/v4.3.3.RELEASE/spring-jdbc/src/main/java/org/springframework/jdbc/object/SqlCall.java#L135
So one might try to add one parameter which should be used as output for return statement. But the only valid format of parameter (for db functions) seems to be {{InputParameter}} which is not possible to use as output for result.
{code}
sql-store:sum_two_numbers_function(INTEGER ${body[2]}, INTEGER ${body[0]}, INTEGER ${body[1]})?function=true
{code}
If {{OutputParameter}} are used than this https://github.com/apache/camel/blob/master/components/camel-sql/src/main/java/org/apache/camel/component/sql/stored/TemplateStoredProcedure.java#L77 will force to create SQL procedure call (instead of a function one), for instance this:
{code}
sql-store:sum_two_numbers_function(OUT INTEGER result, INTEGER ${body[0]}, INTEGER ${body[1]})?function=true
{code}
results in this query call:
{code}
call sum_two_numbers_function(?, ?, ?)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-29 12:17:08.229,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 29 12:17:08 UTC 2017,,,,,,,0|i3jcvj:,9223372036854775807,,,,,,,,,,28/Aug/17 15:54;valdar;Created a PR for this: https://github.com/apache/camel/pull/1902,"29/Aug/17 12:17;githubbot;Github user valdar closed the pull request at:

    https://github.com/apache/camel/pull/1902
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Milo component cannot write to newer server versions,CAMEL-11709,13097631,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,dennis.pries,dennis.pries,25/Aug/17 15:00,27/Aug/17 14:57,13/Mar/19 22:20,27/Aug/17 10:00,2.19.2,,,,,,,,,,,,,,,2.19.3,2.20.0,,,,camel-milo,,,,,,0,newbie,patch,,Newer OPC UA Server implementations (for example: opcuaserver.com:48010) forbit setting sourceTime and serverTime in DataValue.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,25/Aug/17 15:00;dennis.pries;camel-milo.patch;https://issues.apache.org/jira/secure/attachment/12883751/camel-milo.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2017-08-27 10:00:41.94,,,no_permission,,Novice,,,,Patch,,,,,,,,,9223372036854775807,,,Sun Aug 27 14:57:54 UTC 2017,,,Patch Available,,,,0|i3jalr:,9223372036854775807,,,,,,,,,,27/Aug/17 10:00;ancosen;Thanks for the patch.,27/Aug/17 14:57;dennis.pries;You're welcome,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Caffeine: ExpireAfterAccess set two times instead of ExpireAfterWrite,CAMEL-11705,13097523,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,25/Aug/17 08:30,25/Aug/17 08:47,13/Mar/19 22:20,25/Aug/17 08:47,,,,,,,,,,,,,,,,2.20.0,,,,,camel-caffeine,,,,,,0,,,,"In both CaffeineCache and CaffeineLoadCache we have

{code}
builder.expireAfterAccess(configuration.getExpireAfterAccessTime(), TimeUnit.SECONDS);
builder.expireAfterAccess(configuration.getExpireAfterWriteTime(), TimeUnit.SECONDS);
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-08-25 08:30:06.0,,,,,,,0|i3j9xz:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
S3 Consumer: If maxMessagesPerPoll is greater than 50 consumer fails to poll objects from bucket,CAMEL-11697,13096962,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,mvlakh,mvlakh,23/Aug/17 08:54,24/Aug/17 06:39,13/Mar/19 22:20,23/Aug/17 13:25,2.14.3,2.19.2,,,,,,,,,,,,,,2.20.0,,,,,camel-aws,,,,,,0,,,,"It is possible to configure S3 consumer to process several s3 objects in a single poll using the maxMessagesPerPoll property. 

If this property contains a small number, less than 50, everything works fine but if user tries to consume more files then s3 consumer simply fails all the time. It cannot poll files because there are not enough HTTP connections to open streams for all the requested files at once. The exception looks like this:
{code}
com.amazonaws.AmazonClientException: Unable to execute HTTP request: Timeout waiting for connection from pool
	at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:544)
	at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:273)
	at com.amazonaws.services.s3.AmazonS3Client.invoke(AmazonS3Client.java:3660)
	at com.amazonaws.services.s3.AmazonS3Client.getObject(AmazonS3Client.java:1133)
	at com.amazonaws.services.s3.AmazonS3EncryptionClient.access$201(AmazonS3EncryptionClient.java:65)
	at com.amazonaws.services.s3.AmazonS3EncryptionClient$S3DirectImpl.getObject(AmazonS3EncryptionClient.java:524)
	at com.amazonaws.services.s3.internal.crypto.S3CryptoModuleAE.getObjectSecurely(S3CryptoModuleAE.java:106)
	at com.amazonaws.services.s3.internal.crypto.CryptoModuleDispatcher.getObjectSecurely(CryptoModuleDispatcher.java:114)
	at com.amazonaws.services.s3.AmazonS3EncryptionClient.getObject(AmazonS3EncryptionClient.java:427)
	at com.amazonaws.services.s3.AmazonS3Client.getObject(AmazonS3Client.java:1005)
	at org.apache.camel.component.aws.s3.S3Consumer.createExchanges(S3Consumer.java:112)
	at org.apache.camel.component.aws.s3.S3Consumer.poll(S3Consumer.java:93)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}

The issue happens because by default AmazonS3Client uses HTTP client with limited number of connections in the pool - 50. 

Since S3 consumer provides a possibility to consume any number of s3 objects in a single pool and because it is quite common case that someone needs to process 50 or more files in a single pool I think s3 consumer should handle this case properly. It should automatically change HTTP connections pool size to be able to handle requested number of objects. This can be done like this:
{code}
ClientConfiguration s3Config = new ClientConfiguration();
/*
+20 we need to allocate a bit more to be sure that we always can do additional API calls when we already hold maxMessagesPerPoll s3 object streams opened
*/
s3Config.setMaxConnections(maxMessagesPerPoll + 20); 

AmazonS3Client client = new AeAmazonS3Client(awsCreds, s3Config );
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-23 12:53:31.182,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 24 06:39:12 UTC 2017,,,,,,,0|i3j6if:,9223372036854775807,,,,,,,,,,23/Aug/17 12:53;ancosen;We'll need to add a new options to the S3 configuration.,"23/Aug/17 13:28;ancosen;Now you have a maxConnections options in the S3Configuration and you can tune it as you want, by default is 50.

https://github.com/apache/camel/blob/master/components/camel-aws/src/main/docs/aws-s3-component.adoc

Since this is a new option it will be available in Camel 2.20.0","23/Aug/17 13:43;mvlakh;Hello [~ancosen], thank you for a quick response. 
I am not sure if this is the best way to fix this issue since user of the s3 consumer in this case should know how many connections the consumer needs. And since it is not obvious that all s3 objects will be opened simultaneously user will most likely ignore that setting until he/she gets a fault in run time.
I think the consumer should calculate a default value for this setting based on the value of the maxMessagesPerPoll  property to make sure that it always has enough connections unless user decided to use custom value. Do you agree?

Also I am looking at the s3 consumer code and I do not understand why the consumer opens all the objects right away. Why cannot it open one object at a time when it actually initiates an exchange for it? This seems more efficient and requires only 1 connection at a time. What do you think?","23/Aug/17 13:49;ancosen;We can add an information on the documentation about having at least maxConnections >= maxMessagePerPoll. In my opinion forcing the maxConnection to be related to maxMessagePerPoll value (something like maxMessagePerPoll + 20) is not a good choice. Another solution is setting the maxConnections value equals to maxMessagePerPoll to be sure the connection pool is big enough.

For the second question I need to take a more deeper look to the code, by the way as I say on the other issue opened by you, we love contributions, so feel free to open a PR or submit a patch.","23/Aug/17 13:59;mvlakh;[~ancosen] I suggested to add a little bit more connections to the pool to make sure that S3 consumer is able to perform some other S3 API calls when it already holds all the maxMessagePerPoll s3 objects opened. Otherwise all additional API call will fail since the pool will be empty at that point. If no additional API calls are expected then it is perfectly fine to have exacrt maxMessagePerPoll connections in the pool.

Yes, I saw your proposition to contribute. If I find some free time I will take a look at the code once again and try to prepare a fix suggestion as a patch. But it would be nice to understand if there is any real reason to open all the objects before sending exchanges for processing. Because if this was intentional then there is no point to try change this code without knowing about that. 

Thank you!","24/Aug/17 06:39;ancosen;Ok, now the pool is equals to 50 (the default) + maxMessagesPerPoll.

I'll take a look at the code to answer the other questions.",,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Hazelcast Queue Cosumer implementation,CAMEL-11666,13094109,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,Batter,Batter,11/Aug/17 14:28,23/Aug/17 11:45,13/Mar/19 22:20,23/Aug/17 11:45,,,,,,,,,,,,,,,,2.20.0,,,,,camel-hazelcast,,,,,,0,documentation,features,,"Guys, 
i have following concern / question about Hazelcast Queue Consumer:

# I do understand why Topic is build based on CamelItemListener as ItemListener in HazelcastTopicConsumer. But the same behavior in HazelcastQueueConsumer doesn't look meaningful:
## Unlike Topic, Queue has state and someone subscribed to Queue and didn't process it (any reason here) no one will take it from queue (Event Already happened and will not happen again). Message will be stuck there. Until you explicitly poll it, which Camel-Hazelcast doesn't support (as consumer). I had to do Polling via Camel-Timer as workaround.
## Another problem is that ItemListener doesn't actually drain the Queue. It just listens to events. As for me it doesn't make any sense to receive message from Queue and don't have it removed from Queue. In current implementation you'll have to inject queue in Processor to actually Poll the message after ADD Event. 

If you won't change the code just please warn user here (http://camel.apache.org/hazelcast-component.html#HazelcastComponent-queue) that Queue consumer doesn't drain the queue. And Processor should actually drain it.
If node has failed to process message it should be explicitly polled to drain the queue via for example Timer.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-11 14:53:10.575,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 23 07:19:43 UTC 2017,,,,,,,0|i3ip2v:,9223372036854775807,,,,,,,,,,11/Aug/17 14:53;ancosen;If this is a discussion about the design maybe it's better to start a thread on users/dev mailing list,"11/Aug/17 15:13;Batter;I think it's a design bug IMHO. 

But if you consider not as a bug (but rather a feature) that messages are not drained from Queue - it can be moved/closed with 'Works As Designed' Resolution.","21/Aug/17 11:49;ancosen;I'm not sure I'm completely following the problem. The Hazelcast Queue Consumer is designed to consume events on a specific queue. So for example if you add an entry, the consumer will create an ADD event message to consume and if you remove an entry you'll have a REMOVE event message to consume.

If you want to perform operation on your queue you need to use the Hazelcast Queue Producer. Using it you'll be able to do what you want:
https://github.com/apache/camel/blob/master/components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/queue/HazelcastQueueProducer.java","21/Aug/17 14:12;Batter;Ok, let me give you scenario:

# We have *one* of boxes which will be receiving some messages
# Once it has received it should publish message to queue 
# Once messages in Queue now work will be distributed among all hosts participating in Hazelcast cluster.
# Each message is processed* only once* (by single host)

Now how it would look like if i would choose any JMS provider (Active MQ for example):
# First host is picking up messages and puts into the queue.
# Any hosts which are listening to the queue will pick up message and process it (Just One host processing One message)

In case of current Camel Hazelcast implementation:
# First host is picking up messages and puts into the queue.
# *All* hosts which are subscribed to the queue will pick up message event:
# Now you have to:
## Lock object in memory to avoid duplicated processing on all hosts (*One message All hosts*)
## *Poll message* from queue (because message listener doesn't remove item from queue)
# If for some reason host didn't perform ""Poll message from queue"" (any reason: restart, failure). Message will be stuck in queue until whole cluster rebooted and message will be lost.

But in case above how it differs from Topic? Absolutely the same implementation. No need to have queue.
Topic and Queue can't have the same implementation.
Topic = Subscription
Queue = Polling",21/Aug/17 14:18;ancosen;This is more clear now. I'll take a look tomorrow. It waan't clear you were talking from the cluster perspective. Btw now it's clear,"22/Aug/17 09:01;lb;Maybe a solution would be to have a way to configure how the queue is ""consumed"" :

# *ConsumerMode.SNIFF* the consumer uses a listener to receive events, no remove is performed (_default to preserve behavior_)
# *ConsumerMode.POLL* the consumer polls the queue so elements are removed

Thoughts ?",22/Aug/17 09:03;ancosen;Fine to me.,"22/Aug/17 14:10;Batter;Just please add to documentation:
# SNIFF = Subscribe which doesn't remove item from Queue and only listens for events. Object received by consumer will be com.hazelcast.core.ItemEvent.<Object>.
# POLL = Poll. Not sure if there will be any parameters (didn't find any here: http://camel.apache.org/activemq.html) like polling delay/period, Object received by consumer will be original object (or some wrapper).
Thanks","22/Aug/17 14:17;lb;POLL will have a timeout as IQueue#poll(timeout, timeUnit)",22/Aug/17 22:28;davsclaus;Is SNIFF a term used by hazeclast? Otherwise Isn't PEAK a more common term?,"23/Aug/17 07:19;lb;No it is not an hazelcast term, it's the first thing that I had in mind to describe the functionality.

The current implementation listens for events on the queue so it gets notified about elements being added or removed so maybe LISTEN is a better name. PEEK would be confusing as it is not supposed to handle removal of elements.",,,,,,,,,,,,,,,,,,,,,,
ensure transport endpoint configuration will be take into account when create JettyRestHttpBinding from REST DSL,CAMEL-11688,13096650,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,22/Aug/17 06:38,22/Aug/17 08:07,13/Mar/19 22:20,22/Aug/17 08:07,,,,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-jetty,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-08-22 06:38:06.0,,,,,,,0|i3j4lz:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Couchbase client is never shut down,CAMEL-11674,13095105,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,jamesnetherton,jamesnetherton,16/Aug/17 19:11,21/Aug/17 08:38,13/Mar/19 22:20,21/Aug/17 08:37,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,,,,,,,0,,,,"I'm testing couchbase while it's running within a container (WildFly). If my camel-couchbase application is terminated, I still see client connections being attempted. I guess there's a background thread that's still operational.

The client has a {{shutdown()}} method, so we should probably make use of that somewhere.

Server logs are full of errors like:
{code}
2017-08-16 19:59:56.074 WARN com.couchbase.client.vbucket.ConfigurationProviderHTTP:  Connection problems with URI http://localhost:8091/pools ...skipping
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
    at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
    at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
    at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
    at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
    at java.net.Socket.connect(Socket.java:589)
    at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
    at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
    at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
    at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
    at sun.net.www.http.HttpClient.New(HttpClient.java:339)
    at sun.net.www.http.HttpClient.New(HttpClient.java:357)
    at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1202)
    at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1138)
    at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1032)
    at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:966)
    at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1546)
    at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1474)
    at com.couchbase.client.vbucket.ConfigurationProviderHTTP.readToString(ConfigurationProviderHTTP.java:420)
    at com.couchbase.client.vbucket.ConfigurationProviderHTTP.readPools(ConfigurationProviderHTTP.java:206)
    at com.couchbase.client.vbucket.ConfigurationProviderHTTP.getBucketConfiguration(ConfigurationProviderHTTP.java:143)
    at com.couchbase.client.vbucket.provider.BucketConfigurationProvider.bootstrapHttp(BucketConfigurationProvider.java:352)
    at com.couchbase.client.vbucket.provider.BucketConfigurationProvider.bootstrap(BucketConfigurationProvider.java:128)
    at com.couchbase.client.vbucket.provider.BucketConfigurationProvider.signalOutdated(BucketConfigurationProvider.java:521)
    at com.couchbase.client.vbucket.provider.BucketConfigurationProvider.reloadConfig(BucketConfigurationProvider.java:545)
    at com.couchbase.client.CouchbaseConnection.queueReconnect(CouchbaseConnection.java:369)
    at net.spy.memcached.MemcachedConnection.lostConnection(MemcachedConnection.java:634)
    at net.spy.memcached.MemcachedConnection.handleIO(MemcachedConnection.java:703)
    at net.spy.memcached.MemcachedConnection.handleIO(MemcachedConnection.java:436)
    at com.couchbase.client.CouchbaseConnection.run(CouchbaseConnection.java:325)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-21 08:38:04.826,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 21 08:38:04 UTC 2017,,,,,,,0|i3iv67:,9223372036854775807,,,,,,,,,,21/Aug/17 08:38;ancosen;I added a shutdown invocation in both Consumer/Producer doStop methods. Can you give it a try with your use case?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JPAMessageIdRepository Not Releasing Connections,CAMEL-11630,13092229,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mary.mistretta@gmail.com,mary.mistretta@gmail.com,03/Aug/17 15:50,12/Aug/17 23:55,13/Mar/19 22:20,12/Aug/17 23:55,2.19.1,,,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-jpa,,,,,,0,,,,When using the JpaMessageIdRepository for an idempotent repo for file processing it holds onto connections and does not release them unless you manually flush the connection pool.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-12 23:55:58.576,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sat Aug 12 23:55:58 UTC 2017,,,,,,,0|i3idqv:,9223372036854775807,,,,,,,,,,"03/Aug/17 15:51;mary.mistretta@gmail.com;I'm not sure i see a way to assign this to myself, but i plan on completing it. See this issue https://issues.jboss.org/browse/ENTESB-7169",10/Aug/17 19:59;mary.mistretta@gmail.com;PR up https://github.com/apache/camel/pull/1883,12/Aug/17 23:55;davsclaus;Thanks for reporting and the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade dozer to 6.1,CAMEL-11652,13093249,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,garethahealy,garethahealy,08/Aug/17 17:32,09/Aug/17 07:16,13/Mar/19 22:20,09/Aug/17 05:58,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-dozer,,,,,,0,,,,"Dozer 6.1 has been released. The following doc explains the changes required:
- https://github.com/DozerMapper/dozer/blob/master/docs/asciidoc/migration/v6-to-v61.adoc",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-08 17:32:56.037,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 09 07:16:01 UTC 2017,,,,,,,0|i3ijz3:,9223372036854775807,,,,,,,,,,"08/Aug/17 17:32;githubbot;GitHub user garethahealy opened a pull request:

    https://github.com/apache/camel/pull/1878

    Upgraded dozer to 6.1

    https://issues.apache.org/jira/browse/CAMEL-11652

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/garethahealy/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1878.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1878
    
----
commit 5fae1d7ffd4fdf0c72dccb944a3547ac4fc85ecf
Author: Gareth Healy <garethahealy@gmail.com>
Date:   2017-08-08T17:29:33Z

    Upgraded dozer to 6.1

----
","09/Aug/17 07:16;githubbot;Github user garethahealy closed the pull request at:

    https://github.com/apache/camel/pull/1878
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SupervisingRouteController - Routes may be started in wrong order,CAMEL-11588,13089301,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,davsclaus,davsclaus,23/Jul/17 08:44,08/Aug/17 11:33,13/Mar/19 22:20,08/Aug/17 11:33,,,,,,,,,,,,,,,,2.20.0,,,,,camel-core,,,,,,0,route-controller,,,"If you run the example and turn off the supervising

Then the routes are started correct order
{code}
2017-07-23 10:40:37.825  INFO 33034 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: bar started and consuming from: timer://bar?period=5s
2017-07-23 10:40:37.825  INFO 33034 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: foo started and consuming from: timer://foo?period=5s
2017-07-23 10:40:37.830  INFO 33034 --- [           main] o.a.c.c.undertow.DefaultUndertowHost     : Starting Undertow server on http://localhost:9011
2017-07-23 10:40:37.877  INFO 33034 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: undertow started and consuming from: http://localhost:9011
{code}

eg with lowest startup order first, 1,2, (no number).

But if you turn on supervising, then they are started: (no number), 1, 2
{code}
2017-07-23 10:37:39.266  INFO 32985 --- [           main] o.a.c.c.undertow.DefaultUndertowHost     : Starting Undertow server on http://localhost:9011
2017-07-23 10:37:39.311  INFO 32985 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: undertow started and consuming from: http://localhost:9011
2017-07-23 10:37:39.313  INFO 32985 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: bar started and consuming from: timer://bar?period=5s
2017-07-23 10:37:39.314  INFO 32985 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: foo started and consuming from: timer://foo?period=5s
{code}

eg the undertow route is the (no number) and should therefore be started last (it will have auto assigned number 1001).

eg we need to use the RouteStartupOrder that can tell the correct order.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-04 14:24:41.729,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 04 14:24:41 UTC 2017,,,,,,,0|i3hw53:,9223372036854775807,,,,,,,,,,"23/Jul/17 18:29;davsclaus;I looked briefly at this and its a bit harder to do. So its okay for this to be a known issue, but down the road we should ideally have this new way of starting up routes support all existing ways, so it in the future can be the new default way.","04/Aug/17 14:24;lb;As workaround I've added an additional counter to keep track of the order of which routes are initialized so the rule is now:

- compare startup order
- if not defined compare using the initialization order

So assuming we have:

{code:java}
from(""undertow:http://localhost:9013"")
    .id(""undertow-9013"")
    .log(""From undertow ..."");

from(""timer:foo?period=5s"")
    .id(""foo"")
    .startupOrder(2)
    .log(""From timer (foo) ..."");

from(""timer:bar?period=5s"")
    .id(""bar"")
    .startupOrder(1)
    .log(""From timer (bar) ..."");

from(""undertow:http://localhost:9011"")
    .id(""undertow-9011"")
    .log(""From undertow ..."");

from(""undertow:http://localhost:9010"")
    .id(""undertow-9010"")
    .log(""From undertow ..."");
{code}

The startup order will be:

- bar
- foo
- undertow-9013
- undertow-9011
- undertow-9010
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Paho Missiong reconnect logic,CAMEL-11631,13092441,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,fabryprog,fabryprog,fabryprog,04/Aug/17 10:52,04/Aug/17 13:18,13/Mar/19 22:20,04/Aug/17 12:32,2.19.2,,,,,,,,,,,,,,,2.20.0,,,,,camel-paho,,,,,,0,,,,"When it loses the connection, it is not restored.

You have to write the reconnection logic

{noformat}
[thread #2 - seda://sendToMqtt2] SedaConsumer                   WARN  Error processing exchange. Exchange[]. Caused by: [org.eclipse.paho.client.mqttv3.MqttException - Client is not connected]
Client is not connected (32104)
	at org.eclipse.paho.client.mqttv3.internal.ExceptionHelper.createMqttException(ExceptionHelper.java:31)
	at org.eclipse.paho.client.mqttv3.internal.ClientComms.sendNoWait(ClientComms.java:166)
	at org.eclipse.paho.client.mqttv3.MqttAsyncClient.publish(MqttAsyncClient.java:1027)
	at org.eclipse.paho.client.mqttv3.MqttClient.publish(MqttClient.java:399)
	at org.apache.camel.component.paho.PahoProducer.process(PahoProducer.java:43)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-04 12:32:15.987,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 04 13:18:39 UTC 2017,,,,,,,0|i3if1z:,9223372036854775807,,,,,,,,,,"04/Aug/17 12:32;githubbot;GitHub user Fabryprog opened a pull request:

    https://github.com/apache/camel/pull/1870

    CAMEL-11631, Camel-Paho Missiong reconnect logic

    https://issues.apache.org/jira/browse/CAMEL-11631

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Fabryprog/camel CAMEL-11631

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1870.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1870
    
----
commit f3472922a694473115377e676bd84e39d5e9ba0f
Author: Fabrizio Spataro <fabrizio.spataro@bizmate.it>
Date:   2017-08-04T12:30:10Z

    CAMEL-11631, Camel-Paho Missiong reconnect logic

----
","04/Aug/17 13:18;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1870
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LevelDB Java implementation wont be tried on Errors,CAMEL-11623,13091852,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,kartasevm,kartasevm,02/Aug/17 10:38,03/Aug/17 10:13,13/Mar/19 22:20,03/Aug/17 10:13,2.19.2,,,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-leveldb,,,,,,0,,,,"For a bit of background, we have been running into a problem with the LevelDB JNI drivers for AggregationRepositories, which prevents startup when using routes for which we require persistent aggregation. This, however, is not the main topic of this issue.

In the latest version (2.19.2) the following issue has implemented a Java specific leveldb factory:

 https://issues.apache.org/jira/browse/CAMEL-11427

The relevant part of the Error on startup is as follows: 

java.lang.UnsatisfiedLinkError: Could not load library. Reasons: [no leveldbjni64-1.8 in java.library.path, no leveldbjni-1.8 in java.library.path, no leveldbjni in java.library.path, C:\Users\atos\AppData\Local\Temp\leveldbjni-64-1-794362262645531032.8: Can't find dependent libraries] 
at org.fusesource.hawtjni.runtime.Library.doLoad(Library.java:182) 
at org.fusesource.hawtjni.runtime.Library.load(Library.java:140) 
at org.fusesource.leveldbjni.JniDBFactory.(JniDBFactory.java:48) 
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 
at java.lang.reflect.Constructor.newInstance(Constructor.java:423) 
at java.lang.Class.newInstance(Class.java:442) 
at org.apache.camel.component.leveldb.LevelDBFile.getFactory(LevelDBFile.java:189) 
at org.apache.camel.component.leveldb.LevelDBFile.start(LevelDBFile.java:174) 


The way that I understand the code added in issue 11427, is that the LevelDBFile class getFactory() method (line 181) will first try to initiate with the JNI drivers and if that fails, will turn to the pure Java implementation. This is done by catching an Exception which is then ignored incase the JNI driver fails.

However, when we look at the code we see that UnstatisfiedLinkError does not extend Exception, it extends Error.

This Error is therefore not caught by the application and thus the Java implementation for LevelDB is never even attempted to be initialized as the method execution ends exceptionally at that point.

So the main two questions are: 
1) Was the code intended to catch this UnsatisfiedLinkageError (I know Errors are often considered a bad thing to catch) as a means to substitute the JNI driver, incase it fails?
2) If it is not supposed to catch this error, how can I use the pure Java implementation in this case? I expect that trying to exclude relevant packages also wont work as it will directly try to initiate the the JNI implementation by its name, which would fail also with an Error.


So, in summary:
Is line 194 in class LevelDBFile in the camel-leveldb component supposed to catch an Error or more generally a Throwable instead of Exception?

",,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11427,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-02 10:43:47.354,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 03 10:06:51 UTC 2017,,,,,,,0|i3ibfr:,9223372036854775807,,,,,,,,,,"02/Aug/17 10:43;kartasevm;I assume this problem would be present in the 2.17.x, 2.18.x and 2.20.x branches as well, but they have not actually been released yet, so I am not sure how to mark the affects versions (see 11427 in regards to wrong version in Jira)","02/Aug/17 10:43;davsclaus;Yes catch Throwable. You are welcome to work on a patch or better yet a github PR
http://camel.apache.org/contributing","02/Aug/17 11:22;kartasevm;I will start working on a PR.

It looks as If I can't assign the task to myself on my own. Should it be assigned to me?","02/Aug/17 11:33;davsclaus;Mart, yeah its fine with a comment.

We can grant rights to self assign tickets, but we tend to do this with users whom have worked on Camel a little bit more and shown interrest on helping out with many different things. 
","02/Aug/17 11:33;davsclaus;You can just do the github PR against master branch, then we backport to the older branches.",03/Aug/17 08:18;davidkarlsen;Handling Throwable is usually not a good practice (would catch OutOfMemoryError for instance) - maybe better and clearer to narrow to multicatch of UnsatisfiedLinkageError | Exception ?,"03/Aug/17 08:49;kartasevm;I agree that in most cases it would be a bad practice and you might be correct that it is here as well. I would like to discuss a little first, though.

I think that there are multiple types of Errors that might be relevant to catch here. For example NoClassDefFoundError, might be relevant as the fusesource JNI implementation is an optional include according to the POM, as is the iq80 java implementation. So technically we could exclude either of them and expecting to end up with an IllegalStateException instead.

Say for example that we manually exclude fusesource packages entirely. Would we want it to fail with NoClassDefFoundError or have it catched and try the iq80 implementation?

So my point is, are we trying to make sure that we try the Java implementation always, or only during the UnsatisfiedLinkageError?

The point about the OutOfMemoryError is inarguably a sound one however... and catching throwable might hide some other odd problems, especially without logging.
","03/Aug/17 08:53;kartasevm;LinkageError is a superclass of both NoClassDefFoundError and UnsatisfiedLinkageError..

I am thinking that maybe specifying LinkageError as a more specific subset of Error might be relevant to this case?","03/Aug/17 08:55;kartasevm;I am not sure if ClassCircularity is something we want to catch here but many other subclasses of Linkage Error seem relevant though.
",03/Aug/17 08:57;davidkarlsen;It's probably close enough. I am nitpicking a bit anyways - catching LinkageError will narrow it quite a bit to what was originally thought.,"03/Aug/17 08:58;davsclaus;We catch throwable in many other places - this is fine as this is about loading the implementation on startup, and not while runtime routing. So I am +1 for the throwable.","03/Aug/17 09:27;kartasevm;Well I had already submitted the PR as catching a Throwable before David's comment. I could change it though.

What would be preferable?",03/Aug/17 09:29;ancosen;Since we do the same in other places I guess it's ok to catch Throwable. Can you add the issue number to commit message?,"03/Aug/17 09:31;kartasevm;I just saw your comment in GitHub. I am already doing so, no problem.","03/Aug/17 10:06;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1866
",,,,,,,,,,,,,,,,,,
Camel-Undertow doesn't work in OSGi,CAMEL-11627,13092096,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,03/Aug/17 07:20,03/Aug/17 07:31,13/Mar/19 22:20,03/Aug/17 07:31,,,,,,,,,,,,,,,,2.20.0,,,,,camel-undertow,,,,,,0,,,,"Actually camel-undertow doesn't work in OSGi.

{code}
java.lang.IllegalArgumentException: UT001031: Unknown scheme in URI http://localhost:8010/test
	at io.undertow.client.UndertowClient.getClientProvider(UndertowClient.java:163) [26:io.undertow.core:1.4.18.Final]
{code}

Because it is using

{code}
UndertowClient.getInstance(getCamelContext().getApplicationContextClassLoader())
{code}

and it cannot find its providers. We should use 

{code}
UndertowClient.getInstance()
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-08-03 07:20:26.0,,,,,,,0|i3icxr:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ServiceNowException is printing ""%d"" (not replacing value)",CAMEL-11626,13092085,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,apupier,apupier,03/Aug/17 06:36,03/Aug/17 06:59,13/Mar/19 22:20,03/Aug/17 06:59,2.19.0,,,,,,,,,,,,,,,2.19.3,2.20.0,,,,camel-servicenow,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-03 06:41:07.9,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 03 06:58:04 UTC 2017,,,,,,,0|i3icvj:,9223372036854775807,,,,,,,,,,"03/Aug/17 06:41;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/1865

    CAMEL-11626 - Provide a value for the %d in String format

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-11626-FixExceptionName

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1865.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1865
    
----
commit d00a20e066e562441342cd02f1ae6f14fb5d15f8
Author: Aurélien Pupier <apupier@redhat.com>
Date:   2017-08-03T06:39:23Z

    CAMEL-11626 - Provide a value for the %d in String format

----
","03/Aug/17 06:54;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1865
",03/Aug/17 06:58;lb;Not relevant for camel 2.18.x,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-leveldb does not work on Solaris -- no native code library and no Java fallback,CAMEL-11427,13081028,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gzres,gzres,gzres,20/Jun/17 07:23,02/Aug/17 10:45,13/Mar/19 22:20,20/Jun/17 07:53,2.17.7,2.18.4,2.19.0,,,,,,,,,,,,,2.18.5,2.19.2,2.20.0,,,camel-leveldb,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-02 10:39:18.014,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 02 10:45:43 UTC 2017,,,,,,,0|i3gh93:,9223372036854775807,,,,,,,,,,"20/Jun/17 07:52;gzres;Fixed [here|https://github.com/apache/camel/commit/75498ab1ef70bb3694b84647f2e9d23d43268f9b] in master
Fixed [here|https://github.com/apache/camel/commit/5e679431094627981d8df55beb54b9f8998e0d1e] in camel-2.19.x
Fixed [here|https://github.com/apache/camel/commit/2ba4c00ca93a81930e8354f97379fac91f99ba39] in camel-2.18.x","27/Jun/17 06:12;gzres;Improved logging [here|https://github.com/apache/camel/commit/2feec9d29308272dfe9f6c31331763f51ac0b892] in master
Improved logging [here|https://github.com/apache/camel/commit/fc3647c210bceb9ca51e750cc7ccee06136b9c94] in camel-2.19.x
Improved logging [here|https://github.com/apache/camel/commit/c25149322dd8db1a7d8c1f333ac4a7c80a1868ce] in camel-2.18.x","02/Aug/17 10:39;kartasevm;I would like to note that this issue is marked as 2.19.1. But It is not a part of 2.19.1. It was released in 2.19.2, but as I suspect it was incorrectly versioned here, it was not a part of 2.19.2 documentation. Should this be updated?",02/Aug/17 10:44;davsclaus;Yeah moved it to 2.19.2,"02/Aug/17 10:45;ancosen;Yeah,

{code}
> git tag --contains=""5e679431094627981d8df55beb54b9f8998e0d1e""
camel-2.19.2
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-univocity-parsers: marshaller not thread safe,CAMEL-11609,13090448,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,derdb,derdb,27/Jul/17 08:15,01/Aug/17 13:02,13/Mar/19 22:20,01/Aug/17 11:33,2.19.1,,,,,,,,,,,,,,,2.20.0,,,,,camel-csv,,,,,,0,,,,"org.apache.camel.dataformat.univocity.Marshaller.java is not thread safe.

When this.adaptheaders is true, this.headers is modified in the wirteRow() method. This can lead to ConcurrentModificationExceptions (see below) and jumbled headers, occasionally.

I use a {{UnivocityCsvDataFormat}} for marshalling CSV in a route which is called in parallel. The DataFormat creates a Marshaller with adaptheaders == true when headers are not specified in the format.

{code}java.util.ConcurrentModificationException: null
            at java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:719)
            at java.util.LinkedHashMap$LinkedKeyIterator.next(LinkedHashMap.java:742)
            at org.apache.camel.dataformat.univocity.Marshaller.writeRow(Marshaller.java:95)
            at org.apache.camel.dataformat.univocity.Marshaller.marshal(Marshaller.java:67)
            at org.apache.camel.dataformat.univocity.AbstractUniVocityDataFormat.marshal(AbstractUniVocityDataFormat.java:94)
            at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:69)
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
            at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
            at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
            at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
            at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
            at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
            at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
            at org.apache.camel.processor.SendDynamicProcessor$1.doInAsyncProducer(SendDynamicProcessor.java:124)
            at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:436)
            at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:119)
            at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
            at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
            at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:137)
            at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:133)
            at java.util.concurrent.FutureTask.run(FutureTask.java:266)
            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
            at java.lang.Thread.run(Thread.java:748)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-27 08:27:04.518,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 01 13:02:51 UTC 2017,,,,,,,0|i3i2tj:,9223372036854775807,,,,,,,,,,"27/Jul/17 08:27;onders;Failing unit test would be helpful

by the stacktrace i see you have such a route where you wireTapped to a direct endpoint. Hard to imagine beyond.

","27/Jul/17 08:32;derdb;Providing a unit test is difficult; we have one integration test which fails in about 1 in 100 cases due to this issue.

Given that the Marshaller holds and modifies a state in this.headers, it is obvious that it is not thread safe, though.","27/Jul/17 08:42;onders;I did not mean to argue it is obvious or not.

As you can see;

https://github.com/apache/camel/blob/master/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/Marshaller.java#L38

LinkedHashMap is not thread-safe.

What i wanted to understand your routing structure, maybe to help you suggest a workaround.

PR is much welcome with maybe with just {{Collections.synchronizedMap(this.headers);}}.
Camel loves contribution.


","27/Jul/17 08:54;derdb;We have a workaround because in this case, we can specify fixed headers (which leads to this.adaptheaders == false, i.e. headers are not modified, so no issue).

Our routing structure is roughly as follows.  There is a ""direct:persistCSV"" route which uses marshal(univocityCsvDataFormat). This route may be called in parallel by multiple other routes (via to(""direct:persistCSV"")), these use split() and streaming(). Unfortunately I don't know much about camel and its threading model as I'm new to this project, so it is entirely possible that we are doing something wrong. So the question remains if this Marshaller is supposed to work in a multi-threaded environment at all - if it is, then this is an issue.

Simply using a synchronizedMap would rule out ConcurrentModificationException as far as I can tell, but in order to not get jumbled headers, they should not be kept and updated in the Marshaller instance at all I think - either always read the headers from this.headers and never change it, or read headers from the map into a local variable in the adaptheaders == true case. I don't know why changing headers would need to be kept as Marshaller state.","27/Jul/17 20:56;onders;As far as i can understand field matching is through the reconstruction of {{this.headers}}. so it is important part.
so my view currently, if you don't have frequently changing headers, it should not be problem. If it is to match the fields it seems lock on the resource getting updated seems to be a price to pay. in such sence providing a simple PR.","27/Jul/17 21:01;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1855

    CAMEL-11609:thread-safety if headers get modified on the fly

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11609

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1855.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1855
    
----
commit d6ae2bfd0ba2bb7826e7b342094406a3daf4a85b
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-07-27T20:54:18Z

    CAMEL-11609:thread-safety if headers get modified on the fly

----
","28/Jul/17 08:34;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1855
","28/Jul/17 08:46;ancosen;I guess the fix must be reverted, the headers should stay immutable. We were discussing with [~zregvart] too.","28/Jul/17 08:46;derdb;This is not going to fix the problem. You're only syncing on the write access. You need to synchronize both read and write. But this is not even necessary - why keep the headers as marshaller state if they are adapted on every writeRow in the first place. There is no sync needed here. I'm at work now, maybe i can provide a PR when I'm free this weekend",28/Jul/17 08:47;derdb;See my comment above,"28/Jul/17 08:56;onders;if headers are immutable, is not this already existing UT is wrong?

Reverted already..

{code}

    /**
     * Tests that the marshalling adds new columns on the fly and keep its order
     */
    @Test
    public void shouldMarshalAndAddNewColumns() throws Exception {
        template.sendBody(""direct:default"", Arrays.asList(
                asMap(""A"", ""1"", ""B"", ""2""),
                asMap(""C"", ""three"", ""A"", ""one"", ""B"", ""two"")
        ));

        result.expectedMessageCount(1);
        result.assertIsSatisfied();

        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody());
        assertEquals(join(""1,2"", ""one,two,three""), body);
    }

{code}","28/Jul/17 08:59;onders;if you sync read access, i guess there is potential performance issue and your threading will possibly degrade.
maybe there is CopyOnWriteXXX collection or such specific implementation may be needed..","01/Aug/17 09:30;githubbot;GitHub user dbaldes opened a pull request:

    https://github.com/apache/camel/pull/1859

    CAMEL-11609:thread-safety if headers get modified on the fly

    This synchronized write and read on the headers when an adaption is needed. Unit tests are successful.
    
    Potential performance drawback due to synchronization.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dbaldes/camel CAMEL-11609

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1859.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1859
    
----
commit c213d80977cb49c7467d80a378ee50a7fe8a5db8
Author: Daniel Baldes <daniel@baldes.name>
Date:   2017-08-01T09:24:46Z

    CAMEL-11609:thread-safety if headers get modified on the fly

----
","01/Aug/17 13:02;githubbot;Github user dbaldes closed the pull request at:

    https://github.com/apache/camel/pull/1859
",,,,,,,,,,,,,,,,,,,
UnsatisfiedDependencyException: Error creating bean with name 'openTracingEventNotifier',CAMEL-11610,13090473,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,objectiser,objectiser,27/Jul/17 09:33,27/Jul/17 14:17,13/Mar/19 22:20,27/Jul/17 14:17,2.19.2,2.20.0,,,,,,,,,,,,,,2.19.2,2.20.0,,,,,,,,,,0,,,,"When testing the 2nd 2.19.2 release candidate, got the following when starting up 'service1' in the camel-example-opentracing example. This service started with no problems in the first release candidate, so not sure what has changed - but from the initial messages it appears that something is still being started up, i.e. ""BeanCurrentlyInCreationException: Error creating bean with name 'camelContext': Requested bean is currently in creation: Is there an unresolvable circular reference?""

{noformat}
2017-07-27 10:24:18.314  INFO 3829 --- [           main] sample.camel.Service1Application         : Starting Service1Application on localhost.localdomain with PID 3829 (/home/gbrown/testing/apache/apache-camel-2.19.2/examples/camel-example-opentracing/service1/target/classes started by gbrown in /home/gbrown/testing/apache/apache-camel-2.19.2/examples/camel-example-opentracing/service1)
2017-07-27 10:24:18.316  INFO 3829 --- [           main] sample.camel.Service1Application         : No active profile set, falling back to default profiles: default
2017-07-27 10:24:18.347  INFO 3829 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@311592f: startup date [Thu Jul 27 10:24:18 BST 2017]; root of context hierarchy
2017-07-27 10:24:19.098  WARN 3829 --- [           main] s.c.a.AnnotationConfigApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cacheAutoConfigurationValidatorPostProcessor' defined in class path resource [org/apache/camel/component/http/springboot/HttpComponentSSLAutoConfiguration.class]: Unsatisfied dependency expressed through method 'cacheAutoConfigurationValidatorPostProcessor' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.CamelContext]: Factory method 'camelContext' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: target must be specified
Related cause: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'openTracingEventNotifier' defined in org.apache.camel.opentracing.starter.OpenTracingAutoConfiguration: Unsatisfied dependency expressed through method 'openTracingEventNotifier' parameter 0; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'camelContext': Requested bean is currently in creation: Is there an unresolvable circular reference?
2017-07-27 10:24:19.102 ERROR 3829 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Destroy method on bean with name 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory' threw an exception

java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.context.annotation.AnnotationConfigApplicationContext@311592f: startup date [Thu Jul 27 10:24:18 BST 2017]; root of context hierarchy
	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:414) [spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) [spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) [spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) [spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) [spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.destroySingletons(FactoryBeanRegistrySupport.java:230) [spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) [spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) [spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:556) [spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at sample.camel.Service1Application.main(Service1Application.java:37) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:527) [spring-boot-maven-plugin-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]

2017-07-27 10:24:19.107  INFO 3829 --- [           main] utoConfigurationReportLoggingInitializer : 

Error starting ApplicationContext. To display the auto-configuration report re-run your application with 'debug' enabled.
2017-07-27 10:24:19.110 ERROR 3829 --- [           main] o.s.boot.SpringApplication               : Application startup failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cacheAutoConfigurationValidatorPostProcessor' defined in class path resource [org/apache/camel/component/http/springboot/HttpComponentSSLAutoConfiguration.class]: Unsatisfied dependency expressed through method 'cacheAutoConfigurationValidatorPostProcessor' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.CamelContext]: Factory method 'camelContext' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: target must be specified
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:174) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at sample.camel.Service1Application.main(Service1Application.java:37) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:527) [spring-boot-maven-plugin-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.CamelContext]: Factory method 'camelContext' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: target must be specified
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	... 24 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.CamelContext]: Factory method 'camelContext' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: target must be specified
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	... 37 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: target must be specified
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:519) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:508) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1186) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.apache.camel.spring.boot.CamelAutoConfiguration.getSingleBeanOfType(CamelAutoConfiguration.java:449) ~[camel-spring-boot-2.19.2.jar:2.19.2]
	at org.apache.camel.spring.boot.CamelAutoConfiguration.afterPropertiesSet(CamelAutoConfiguration.java:414) ~[camel-spring-boot-2.19.2.jar:2.19.2]
	at org.apache.camel.spring.boot.CamelAutoConfiguration.camelContext(CamelAutoConfiguration.java:199) ~[camel-spring-boot-2.19.2.jar:2.19.2]
	at org.apache.camel.spring.boot.CamelAutoConfiguration$$EnhancerBySpringCGLIB$$b01df009.CGLIB$camelContext$8(<generated>) ~[camel-spring-boot-2.19.2.jar:2.19.2]
	at org.apache.camel.spring.boot.CamelAutoConfiguration$$EnhancerBySpringCGLIB$$b01df009$$FastClassBySpringCGLIB$$64f95473.invoke(<generated>) ~[camel-spring-boot-2.19.2.jar:2.19.2]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.apache.camel.spring.boot.CamelAutoConfiguration$$EnhancerBySpringCGLIB$$b01df009.camelContext(<generated>) ~[camel-spring-boot-2.19.2.jar:2.19.2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	... 38 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: target must be specified
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	... 62 common frames omitted
Caused by: java.lang.IllegalArgumentException: target must be specified
	at org.apache.camel.util.ObjectHelper.notNull(ObjectHelper.java:313) ~[camel-core-2.19.2.jar:2.19.2]
	at org.apache.camel.util.IntrospectionSupport.getProperties(IntrospectionSupport.java:252) ~[camel-core-2.19.2.jar:2.19.2]
	at org.apache.camel.model.rest.springboot.RestConfigurationDefinitionAutoConfiguration.configureRestConfigurationDefinition(RestConfigurationDefinitionAutoConfiguration.java:60) ~[camel-core-starter-2.19.2.jar:2.19.2]
	at org.apache.camel.model.rest.springboot.RestConfigurationDefinitionAutoConfiguration$$EnhancerBySpringCGLIB$$4827afa9.CGLIB$configureRestConfigurationDefinition$0(<generated>) ~[camel-core-starter-2.19.2.jar:2.19.2]
	at org.apache.camel.model.rest.springboot.RestConfigurationDefinitionAutoConfiguration$$EnhancerBySpringCGLIB$$4827afa9$$FastClassBySpringCGLIB$$53cce885.invoke(<generated>) ~[camel-core-starter-2.19.2.jar:2.19.2]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.apache.camel.model.rest.springboot.RestConfigurationDefinitionAutoConfiguration$$EnhancerBySpringCGLIB$$4827afa9.configureRestConfigurationDefinition(<generated>) ~[camel-core-starter-2.19.2.jar:2.19.2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	... 63 common frames omitted
{noformat}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-07-27 09:33:04.0,,,,,,,0|i3i2z3:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid accept header,CAMEL-11605,13090299,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,giger,giger,26/Jul/17 18:58,27/Jul/17 11:10,13/Mar/19 22:20,27/Jul/17 09:42,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-olingo4,,,,,,0,,,,"Commit 958f7f33fa40868dec6a878f1c97f6d7339a9b3b introduced a regression
to olingo4 (maybe olingo2 is also affected, not tested).
The ACCEPT header doesn't include the subtype anymore: 
ACCEPT: application

Should be ACCEPT: application/json for example.

Patch for olingo4 attached.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26/Jul/17 19:03;giger;accept-header.diff;https://issues.apache.org/jira/secure/attachment/12879027/accept-header.diff,,,,1.0,,,,,,,,,,,,,,,,,,,2017-07-27 07:51:02.935,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 27 11:10:33 UTC 2017,,,Patch Available,,,,0|i3i1wn:,9223372036854775807,Regression,,,,,,,,,"27/Jul/17 07:51;dmvolod;[~giger], thanks for patch, PR submitted!","27/Jul/17 07:52;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/1854

    CAMEL-11605: Invalid accept header

    This is regression introduced in CAMEL-11423

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-11605

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1854.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1854
    
----
commit 87fef368ebf8cf93401bd4b594313bfd4ed31cd8
Author: Dmitry Volodin <dmvolod@gmail.com>
Date:   2017-07-27T07:43:03Z

    CAMEL-11605: Invalid accept header

----
","27/Jul/17 11:10;githubbot;Github user dmvolod closed the pull request at:

    https://github.com/apache/camel/pull/1854
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-AWS: Camel-Kinesis needs Jackson Dataformat CBOR to work in OSGi,CAMEL-11608,13090427,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,27/Jul/17 06:29,27/Jul/17 07:02,13/Mar/19 22:20,27/Jul/17 07:02,,,,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-aws,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-07-27 06:29:51.0,,,,,,,0|i3i2ov:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Global rest configuration gets overridden by default,CAMEL-11593,13089879,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Jul/17 13:41,25/Jul/17 18:53,13/Mar/19 22:20,25/Jul/17 18:53,2.19.1,,,,,,,,,,,,,,,2.19.3,2.20.0,,,,camel-core,rest,,,,,0,,,,If you use for example spring-boot and configure rest-dsl globally there then its configuration gets overridden by default empty configuration in the RestComponent when it does merges.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-07-25 13:41:18.0,,,,,,,0|i3hzbj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassNotFound: javax.servlet.ServletOutputStream in opentracing example client,CAMEL-11591,13089815,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,objectiser,objectiser,25/Jul/17 09:36,25/Jul/17 11:56,13/Mar/19 22:20,25/Jul/17 11:56,2.19.2,,,,,,,,,,,,,,,2.19.3,2.20.0,,,,camel-opentracing,,,,,,0,,,,"When testing 2.19.2 release candidate, I tried the examples/camel-example-opentracing - started up the service1 and service2, but when running the client I had a number of exceptions:

{noformat}
Caused by: java.lang.ClassNotFoundException: javax.servlet.ServletOutputStream
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[?:1.8.0_131]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[?:1.8.0_131]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[?:1.8.0_131]
	at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:397) ~[camel-http-2.19.2.jar:2.19.2]
	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:98) ~[camel-http-2.19.2.jar:2.19.2]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) ~[camel-core-2.19.
{noformat}

On inspection of the dependencies from 2.19.1:

{noformat}
[INFO] +- org.apache.camel:camel-http:jar:2.19.1:compile
[INFO] |  +- org.apache.camel:camel-http-common:jar:2.19.1:compile
[INFO] |  |  \- javax.servlet:javax.servlet-api:jar:3.1.0:compile
[INFO] |  +- commons-httpclient:commons-httpclient:jar:3.1:compile
[INFO] |  |  \- commons-logging:commons-logging:jar:1.2:compile
[INFO] |  \- commons-codec:commons-codec:jar:1.10:compile
{noformat}

but for 2.19.2:

{noformat}
[INFO] +- org.apache.camel:camel-http:jar:2.19.2:compile
[INFO] |  +- org.apache.camel:camel-http-common:jar:2.19.2:compile
[INFO] |  +- commons-httpclient:commons-httpclient:jar:3.1:compile
[INFO] |  |  \- commons-logging:commons-logging:jar:1.2:compile
[INFO] |  \- commons-codec:commons-codec:jar:1.10:compile
{noformat}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-25 10:41:02.201,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 25 10:41:02 UTC 2017,,,,,,,0|i3hyxb:,9223372036854775807,,,,,,,,,,"25/Jul/17 10:41;davsclaus;Its all of these that should have the servlet-api added
{code}
camel-ahc/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-cxf/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-http-common/pom.xml:  <artifactId>camel-http-common</artifactId>
camel-http-common/src/test/resources/log4j2.properties:appender.file.fileName = target/camel-http-common-test.log
camel-http/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-http4/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-http4/src/main/java/org/apache/camel/component/http4/HttpMethodsConverter.java: * To convert between camel-http4 and camel-http-common for the http methods enums
camel-netty4-http/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-restlet/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-swagger/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-undertow/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-urlrewrite/pom.xml:      <artifactId>camel-http-common</artifactId>
{code}

And then keep it as provided for camel-servlet, and camel-jetty may likely come with servlet-api as well
{code}
camel-jetty-common/pom.xml:            <artifactId>camel-http-common</artifactId>
camel-jetty9/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-servlet/pom.xml:      <artifactId>camel-http-common</artifactId>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Automatic transform String to DBObject after previous conversion error,CAMEL-11455,13082478,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fabryprog,fabryprog,26/Jun/17 11:03,23/Jul/17 11:39,13/Mar/19 22:20,23/Jul/17 11:39,2.19.1,,,,,,,,,,,,,,,2.19.3,2.20.0,,,,camel-mongodb,camel-mongodb3,,,,,0,,,,"Hello,

i found a bug. To reproduce it you can execute the code (see attachment file).

The bug is simple:

After an invalid conversion, the automatic String -> JSON transformation used to put a document into MongoDB collection, fail!

Application flow:
# First document can be convert to JSON, Mongodb create a document (correct)
# Second document has an error, Mongodb cannot create a document (correct)
# Third document can be convert to JSON but Mongodb cannot create a document into collection because automatic conversion is broken!!!  (BUG)

Kings regards",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26/Jun/17 11:03;fabryprog;jsonFormatterDisappear.zip;https://issues.apache.org/jira/secure/attachment/12874479/jsonFormatterDisappear.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-06-27 08:25:45.887,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sun Jul 23 09:45:57 UTC 2017,,,,,,,0|i3gq6v:,9223372036854775807,,,,,,,,,,26/Jun/17 11:04;fabryprog;The source code,"27/Jun/17 08:25;davsclaus;Can you try to modify the type converters in camel-mongodb3 / camel-mongodb to not use try .. catch but throw an exception if conversion fails. They should not really do this.

","28/Jun/17 13:09;fabryprog;[~davsclaus] now it is work fine.

I am fixing test files and i am going to send the github PR.

Thanks","29/Jun/17 11:39;davsclaus;Thanks Fabrizio, looking forward to the PR","20/Jul/17 08:01;davsclaus;Did you get a chance to send a PR, as we will work on a Camel 2.19.2 release early next month then we need to get this fixed fairly soon",21/Jul/17 12:05;davsclaus;This is a little bit bigger problem due how bad those type converters was written from the beginning. So some of the tests was just passing even if there was type conversion errors that was just ignored and WARN logged.,23/Jul/17 09:45;fabryprog;sorry guys but i cannot fix it before 1st August!,,,,,,,,,,,,,,,,,,,,,,,,,,
Component name mismatch: https4 or http4s,CAMEL-11575,13089043,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,antoine.dessaigne,antoine.dessaigne,21/Jul/17 13:29,22/Jul/17 07:47,13/Mar/19 22:20,22/Jul/17 07:46,,,,,,,,,,,,,,,,2.19.2,2.20.0,,,,camel-http4,,,,,,0,,,,"I noticed a mismatch for the https protocol handling of {{camel-http4}}.

Sometimes it's named {{https4}} like in:
* {{org.apache.camel.component.http4.HttpComponent}}
* {{components\camel-http4\src\main\resources\META-INF\services\org\apache\camel\component\https4}}

Sometimes it's named {{http4s}} like in:
* {{components\camel-http4\src\main\resources\META-INF\services\org\apache\camel\cloud\http4s-service-expression}}
* {{org.apache.camel.component.http4.HttpEndpoint}} for {{@UriEndpoint}} annotatation
* {{org.apache.camel.impl.cloud.DefaultServiceCallExpression}}

I noticed that it breaks the {{camel-catalog}} as the definition is incorrect.

I think that it should be named {{https4}} but I wanted to be sure before providing a pull request that update all erroneous call to {{http4s}}.

What do you think ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-21 16:33:59.488,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sat Jul 22 07:47:46 UTC 2017,,,,,,,0|i3hujz:,9223372036854775807,,,,,,,,,,"21/Jul/17 16:33;davsclaus;Yes it should be named like the file in the META-INF/services folder. So it should be named: https4

A PR is much welcome",21/Jul/17 16:36;davsclaus;Also there is a name problem in that new cloud stuff (that is not a component) but we should ideally have it the same name as the component with https4-service-expression,21/Jul/17 16:42;antoine.dessaigne;I'll try to update the new cloud stuff but I don't know how to test it. Do you have info or docs to give me ? Thanks.,"21/Jul/17 17:00;lb;The cloud stuff simple search for :

{code}
${scheme-of-the-component}-service-expression.
{code}

I do not think there is a test for such variations so please raise a jira to add them.","21/Jul/17 20:05;githubbot;GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/1841

    CAMEL-11575 - Rename http4s into https4 which is the real component name

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-11575

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1841.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1841
    
----
commit 62476324ac4a1be12a4a44c7df5cd980dd3e719c
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2017-07-21T20:04:54Z

    CAMEL-11575 - Rename http4s into https4 which is the real component name

----
",22/Jul/17 07:46;davsclaus;Thanks for the PR,"22/Jul/17 07:47;githubbot;Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/1841
",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-catalog is not generating camel-stream URI properly,CAMEL-11576,13089067,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,antoine.dessaigne,antoine.dessaigne,21/Jul/17 14:47,21/Jul/17 16:38,13/Mar/19 22:20,21/Jul/17 16:32,,,,,,,,,,,,,,,,2.19.2,2.20.0,,,,camel-catalog,,,,,,0,,,,"The endpoint URI generation in {{camel-catalog}} doesn't work for the {{camel-stream}} component. Here is an extract of the {{camel-stream.json}} file with only relevant information for this bug
{code}
{
 ""component"": {
    ""syntax"": ""stream:kind"",
  },
  ""properties"": {
    ""kind"": { ""kind"": ""path"", ""enum"": [ ""in"", ""out"", ""err"", ""header"", ""file"", ""url"" ] },
    ""url"": { ""kind"": ""parameter"" },
  }
}
{code}

The key point is that one of the value for the {{kind}} property that is in the path is {{url}} which is also query parameter.

For instance the following code
{code}
Map<String, String> map = new LinkedHashMap<>();
map.put(""kind"", ""url"");
map.put(""url"", ""http://camel.apache.org"");
String uri = catalog.asEndpointUri(""stream"", map, false);
{code}
will return
{code}
stream:http://camel.apache.org
{code}
instead of
{code}
stream:url?url=http://camel.apache.org
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-21 14:50:11.611,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 21 16:38:09 UTC 2017,,,Patch Available,,,,0|i3hupb:,9223372036854775807,,,,,,,,,,"21/Jul/17 14:50;githubbot;GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/1840

    CAMEL-11576 - Refactor endpoint syntax handling in order to support camel-stream component

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-11576

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1840.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1840
    
----
commit 3bc2ef81352a925fdbf38365f6e889cc7deafd14
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2017-07-21T14:48:30Z

    CAMEL-11576 - Refactor endpoint syntax handling in order to support camel-stream component

----
",21/Jul/17 16:32;davsclaus;Thanks for the PR,"21/Jul/17 16:38;githubbot;Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/1840
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-lumberjack component doesn't restart,CAMEL-11572,13089033,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,antoine.dessaigne,antoine.dessaigne,21/Jul/17 12:34,21/Jul/17 16:25,13/Mar/19 22:20,21/Jul/17 16:25,,,,,,,,,,,,,,,,2.18.5,2.19.2,2.20.0,,,,,,,,,0,,,,"Hello.
There's an issue in the {{camel-lumberjack}} component lifecycle preventing it from restarting.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-21 12:37:08.12,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 21 16:25:51 UTC 2017,,,Patch Available,,,,0|i3huhr:,9223372036854775807,,,,,,,,,,"21/Jul/17 12:37;githubbot;GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/1838

    CAMEL-11572 - Fix camel-lumberjack component lifecycle

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-11572

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1838.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1838
    
----
commit 6492e714c92189d75f48af9d5f1988e086524ca4
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2017-07-21T12:35:56Z

    CAMEL-11572 - Fix camel-lumberjack component lifecycle

----
","21/Jul/17 16:25;githubbot;Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/1838
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
avoid ClassCastException when the gzip is enabled for the cxf endpoint with camel destination,CAMEL-11564,13088630,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,20/Jul/17 03:30,20/Jul/17 03:36,13/Mar/19 22:20,20/Jul/17 03:36,,,,,,,,,,,,,,,,2.18.5,2.19.2,2.20.0,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-07-20 03:30:10.0,,,,,,,0|i3hs0f:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot set content type with parameters without specifying charset,CAMEL-11509,13084528,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,sflor,sflor,04/Jul/17 12:04,14/Jul/17 23:40,13/Mar/19 22:20,14/Jul/17 23:40,2.19.0,2.19.1,,,,,,,,,,,,,,2.19.2,2.20.0,,,,camel-http4,,,,,,0,,,,"When setting a content type that does not contain a charset parameter, for example this:

{noformat}
.setHeader(""Content-Type"", constant(""application/json;odata=verbose""))
{noformat}

the route will fail with the following exception:

{noformat}
java.lang.IllegalArgumentException: MIME type may not contain reserved characters
	at org.apache.http.util.Args.check(Args.java:36)
	at org.apache.http.entity.ContentType.create(ContentType.java:206)
	at org.apache.http.entity.ContentType.create(ContentType.java:218)
	at org.apache.camel.component.http4.HttpProducer.createRequestEntity(HttpProducer.java:511)
{noformat}

although this is clearly a valid content type according to the RFC: https://tools.ietf.org/html/rfc2045#section-5.1

This only affects version 2.19+, because in version 4.4.6 of the httpcomponents-core library, they changed the behavior of {{create}} to check the mime type for semicolons, which it previously didn't. If we, however, also use a charset parameter, you will call the {{parse}} method instead:

{noformat}
if (contentTypeString != null) {
    if (contentTypeString.indexOf(""charset"") > 0) {
        contentType = ContentType.parse(contentTypeString);
    } else {
        contentType = ContentType.create(contentTypeString);
    }
}
{noformat}

There can be all kind of different parameters, though. Instead of checking for charset, it should rather check for the existence of a semicolon. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-04 12:12:53.447,,,no_permission,,Moderate,,https://issues.apache.org/jira/browse/HTTPCORE-476,https://issues.apache.org/jira/browse/HTTPCORE-476,,,,,,,,,,9223372036854775807,,,Fri Jul 14 23:40:55 UTC 2017,,,Patch Available,,,,0|i3h2sv:,9223372036854775807,,,,,,,,,,"04/Jul/17 12:12;davsclaus;You are welcome to provide a patch or better as a github PR with a fix
http://camel.apache.org/contributing","04/Jul/17 12:58;sflor;No idea what to do really, because there seems to be a workaround for something (according to the comments):

{noformat}
//Check the contentType is valid or not, If not it throws an exception.
//When ContentType.parse parse method parse ""multipart/form-data;boundary=---------------------------j2radvtrk"",
//it removes ""boundary"" from Content-Type; I have to use contentType.create method.
if (contentTypeString != null) {
    // using ContentType.parser for charset
    if (contentTypeString.indexOf(""charset"") > 0) {
        contentType = ContentType.parse(contentTypeString);
    } else {
        contentType = ContentType.create(contentTypeString);
    }
}
{noformat}

which, then again, shouldn't work anymore, because {{ContentType.create}} will now throw an exception for any content type containing a semicolon.","04/Jul/17 13:03;sflor;See also https://issues.apache.org/jira/browse/CAMEL-7886

Maybe we can now use only use {{parse}} instead without any checks. ","05/Jul/17 13:09;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1805

    CAMEL-11509 - check for semicolon added to call ContentType.create

    As mentioned in the issue when ContentType.create is called for such cases, it breaks HttpProducerContentTypeTest.java.
    if not, the issue is up.
    
    As a workaround issue, simple check is added.
    We may need to check why ContentType.create fails whereas ContentType.parse not as @WillemJiang commented on https://issues.apache.org/jira/browse/CAMEL-7886
    and fixed in the issue like 
    
    `
    //Check the contentType is valid or not, If not it throws an exception.
    //When ContentType.parse parse method parse ""multipart/form-data;boundary=---------------------------j2radvtrk"",
    //it removes ""boundary"" from Content-Type; I have to use contentType.create method.
    if (contentTypeString != null) {
        // using ContentType.parser for charset
        if (contentTypeString.indexOf(""charset"") > 0) {
            contentType = ContentType.parse(contentTypeString);
        } else {
            contentType = ContentType.create(contentTypeString);
        }
    }
    `
    
    I will also try to catch up with httpcomponents and revisit the issue.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11509

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1805.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1805
    
----
commit 3a5551a4188c53bb3b9cce06f64078fb647a7aa5
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-07-05T12:33:27Z

    CAMEL-11509 - httpcomponents-core 4.4.6 ContentType.create changed. so use ContentType.parse instead

----
","05/Jul/17 13:15;onders;even if you pass like this,

{noformat}
.setHeader(""Content-Type"", constant(""application/json;odata=verbose""))
{noformat}

the endpoint sees the content-type like ""application/json; odata=verbose"".

please notice the space after ;

that's why there is a trick in this line;

https://github.com/apache/camel/pull/1805#discussion-diff-125638439R92","13/Jul/17 13:27;onders;[~sflor] please see Oleg's comment's in the issue https://issues.apache.org/jira/browse/HTTPCORE-476

{code}
.setHeader(""Content-Type"", constant(""application/json;odata=verbose""))
{code}

seems to be wrong.
Apart from that the fix in the PR will help for other cases where {{ContentType#create}} fails with the header you may provide like 
{code}
multipart/form-data;boundary=---------------------------j2radvtrk
{code}

and if containing ';' char, parse will be called.

I will check-in PR to master and backport to camel-2.19.x soon.

Cheers","14/Jul/17 23:40;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1805
",,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong syntax definitions in camel catalog,CAMEL-11529,13086047,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lhein,lhein,10/Jul/17 18:31,10/Jul/17 20:27,13/Mar/19 22:20,10/Jul/17 20:27,2.19.1,,,,,,,,,,,,,,,2.19.2,2.20.0,,,,camel-catalog,,,,,,0,,,,"The following syntax strings in the catalog are not correct:

|| Component || Current Syntax || Supposed correct Syntax ||
| couchbase | couchbase:url | couchbase:protocol:hostname |
| ignite-events | ignite-events:[endpointId] | ignite-events:endpointId |
| ignite-messaging | ignite-messaging:[topic] | ignite-messaging:topic |
| ignite-queue | ignite-queue:[name] | ignite-queue:name |
| ignite-compute | ignite-compute:[endpointId] | ignite-compute:endpointId |
| ignite-idgen | ignite-idgen:[name] | ignite-idgen:name |
| ignite-cache | ignite-cache:[cacheName] |  ignite-cache:cacheName |
| ignite-set | ignite-set:[name] | ignite-set:name |

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-10 20:27:38.316,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 10 20:27:38 UTC 2017,,,,,,,0|i3hc4n:,9223372036854775807,,,,,,,,,,"10/Jul/17 20:27;davsclaus;Thanks Lars for spotting.

The couchbase was missing the port as well so its

couchbase:protocol:hostname:port

where port is optional and has a default value.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
spring-boot - routes not loaded when setting a management.port,CAMEL-11476,13083151,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,nferraro,nferraro,28/Jun/17 14:17,29/Jun/17 12:34,13/Mar/19 22:20,29/Jun/17 12:34,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-spring-boot,,,,,,0,,,,"This is a really weird bug. If you set:

{code}
management.port=8081
{code}

On the application.properties file of any spring-boot application using actuator, then camel routes created through RouteBuilders are not loaded (""Total 0 routes, of which 0 are started.""). 

I've found it in (all) the fabric8 basic quickstarts, but it happens also in the ""camel-example-spring-boot"" bundled with Apache Camel. Everything works in 2.19.x.

Setting a different management port is a best practice. 

[~zregvart], [~cibsen@e-ma.net], [~lb] any idea?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-28 15:00:38.397,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 29 12:34:03 UTC 2017,,,,,,,0|i3gubz:,9223372036854775807,,,,,,,,,,28/Jun/17 15:00;zregvart;I wonder if the change I did in CAMEL-11261 had any influence on this.,28/Jun/17 16:41;davsclaus;Just to be sure this is only a problem on the master branch of Camel ?,"28/Jun/17 18:21;zregvart;[~davsclaus] yes, and I think [~nferraro] alluded to that in the description, but I verified, with 2.19.1 {{camel-example-spring-boot}} and {{management.port=8081}} finds the {{RouteBuilder}} route, with 2.20.0-SNAPSHOT it does not.","28/Jun/17 19:14;zregvart;I've found the issue and a possible solution, I'm running tests to see if the solution caused any other issues.

The problem is that the equality check in [RoutesCollector.java#L81|https://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java#L81] does not pass when {{management.port=8081}} is set. And this in turn is because [EndpointWebMvcAutoConfiguration.java#L144|https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java#L144] instantiates a new {{ApplicationContext}} instance if the management port is customized.

So previously {{RoutesCollector} would start {{CamelContext}} but now {{CamelContext}} is started by {{ContextRefreshedEvent}}, and it is started on the first {{ContextRefreshedEvent}} for the first {{ApplicationContext}}, and as {{RoutesCollector}} checks if its a part of that {{AppplicationContext}} it won't add {{RouteBuilders}}, and the second {{ContextRefreshedEvent}} from the second {{ApplicationContext}} does not load any {{RouteBuilders}} as at that point {{CamelContext}} is already started and the second check in  [RoutesCollector.java#L86|https://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java#L86] will not pass.
","29/Jun/17 08:48;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1797

    CAMEL-11476: spring-boot - routes not loaded when setting a management.port

    @nicolaferraro would you mind taking a look, thanks 👍 
    
    Fixes `RouteBuilder` (Java DSL) based routes not loading when setting `management.port` Spring Boot property by removing the 'same application context' check.
    
    Also removes `maybeStart` method to start the Camel context from `RoutesCollector`, startup is now handled in `SpringCamelContext`.
    
    When customizing the `management.port` configuration option Spring Boot creates a new `ApplicationContext` instance which when started emits a `ContextRefreshedEvent` that is different from the `ApplicationContext` the `RoutesCollector` is initialized with.
    
    Due to change in CAMEL-11261, `SpringCamelContext` is started via the same `ContextRefreshedEvent`, at the point the second `ContextRefreshedEvent` emited from the `ApplicationContext`, that `RoutesCollector` is initialized with, `SpringCamelContext` is already started and no Java DSL routes are added to Camel context.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-11476

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1797.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1797
    
----
commit 3ab5ce9c61daf2d50f2f33ac78dfa189aa2cd1a8
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-06-29T08:42:07Z

    CAMEL-11476: spring-boot - routes not loaded wh...
    
    ...en setting a management.port
    
    Fixes `RouteBuilder` (Java DSL) based routes not loading when setting
    `management.port` Spring Boot property by removing the 'same application
    context' check.
    
    Also removes `maybeStart` method to start the Camel context from
    `RoutesCollector`, startup is now handled in `SpringCamelContext`.
    
    When customizing the `management.port` configuration option Spring Boot
    creates a new `ApplicationContext` instance which when started emits a
    `ContextRefreshedEvent` that is different from the `ApplicationContext`
    the `RoutesCollector` is initialized with.
    
    Due to change in CAMEL-11261, `SpringCamelContext` is started via the
    same `ContextRefreshedEvent`, at the point the second
    `ContextRefreshedEvent` emited from the `ApplicationContext`, that
    `RoutesCollector` is initialized with, `SpringCamelContext` is already
    started and no Java DSL routes are added to Camel context.

----
","29/Jun/17 12:32;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1797
",29/Jun/17 12:34;zregvart;Merged to {{master}} from [PR#1797|https://github.com/apache/camel/pull/1797],,,,,,,,,,,,,,,,,,,,,,,,,,
Can not override isUseAdviceWith in CamelBlueprintTestSupport,CAMEL-11477,13083368,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,saravanakumar,saravanakumar,29/Jun/17 05:57,29/Jun/17 11:43,13/Mar/19 22:20,29/Jun/17 11:37,2.18.4,2.19.1,,,,,,,,,,,,,,2.18.5,2.19.2,2.20.0,,,camel-blueprint,,,,,,0,,,,"There is an issue while using use advice with in unit tests that extends CamelBlueprintTestSupport..

It is impossible to override isUseAdviceWith method while working with CamelBlueprintTestSupport.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-29 06:03:00.909,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 29 11:43:50 UTC 2017,,,,,,,0|i3gvnz:,9223372036854775807,,,,,,,,,,"29/Jun/17 06:03;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/1796

    CAMEL-11477: Can not override isUseAdviceWith in CamelBlueprintTestSu…

    …pport
    
    PR for https://issues.apache.org/jira/browse/CAMEL-11477
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1796.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1796
    
----
commit 3785332ea4d9f8fc7fba2b5792f174ee4880b6e0
Author: Saravanakumar Selvaraj <ssaravan@ssaravan.pnq.csb>
Date:   2017-06-29T05:03:43Z

    CAMEL-11477: Can not override isUseAdviceWith in CamelBlueprintTestSupport

----
",29/Jun/17 11:37;davsclaus;Thanks for the PR,"29/Jun/17 11:43;githubbot;Github user saravanakumar1987 closed the pull request at:

    https://github.com/apache/camel/pull/1796
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to update the cron details from Quartz scheduler MBean,CAMEL-11471,13083074,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,28/Jun/17 09:08,29/Jun/17 00:25,13/Mar/19 22:20,28/Jun/17 15:52,2.19.1,,,,,,,,,,,,,,,2.20.0,,,,,camel-quartz2,,,,,,0,,,,"On Karaf container, if you try to change the cron expression in a camel-quartz2 endpoint (like below) from a JMX console such as hawtio, update fails to persist.
{code:xml}
    <route>
      <from uri=""quartz2://myGroup/myTimer?cron=0/1 * * * * ?"" />
      [...]
    </route>
{code}

It's because Quartz2 requires runtime dependency back to {{org.apache.camel.component.quartz2}} but the default quartz bundle (of course) doesn't have it in {{Import-Package}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-28 09:14:48.182,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 29 00:25:27 UTC 2017,,,,,,,0|i3gtuv:,9223372036854775807,,,,,,,,,,"28/Jun/17 09:14;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1794

    CAMEL-11471: Unable to update the cron details from Quartz scheduler MBean

    https://issues.apache.org/jira/browse/CAMEL-11471

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-11471

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1794.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1794
    
----
commit eaced59ff64322f4e5eb8d979fc205a24f54f42b
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-06-28T09:12:56Z

    CAMEL-11471: Unable to update the cron details from Quartz scheduler MBean

----
",28/Jun/17 15:52;davsclaus;Thanks for the PR,"29/Jun/17 00:25;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/1794
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE caused by IrcMessage,CAMEL-11465,13082862,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jamesnetherton,jamesnetherton,27/Jun/17 15:58,28/Jun/17 16:40,13/Mar/19 22:20,28/Jun/17 16:40,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-irc,,,,,,0,,,,"The {{IrcEndpoint}} has a number of methods like {{createOnPrivmsgExchange}}, {{createOnNickExchange}} etc, where an instance of {{IrcMessage}} is created. When the constructor is called, it results in:

{code}
16:49:55,426 ERROR [stderr] (Thread-97) Exception in thread ""Thread-97"" java.lang.NullPointerException
16:49:55,427 ERROR [stderr] (Thread-97) 	at org.apache.camel.impl.MessageSupport.setBody(MessageSupport.java:122)
16:49:55,427 ERROR [stderr] (Thread-97) 	at org.apache.camel.component.irc.IrcMessage.<init>(IrcMessage.java:50)
16:49:55,427 ERROR [stderr] (Thread-97) 	at org.apache.camel.component.irc.IrcEndpoint.createOnPrivmsgExchange(IrcEndpoint.java:71)
16:49:55,427 ERROR [stderr] (Thread-97) 	at org.apache.camel.component.irc.IrcConsumer$FilteredIRCEventAdapter.onPrivmsg(IrcConsumer.java:203)
16:49:55,427 ERROR [stderr] (Thread-97) 	at org.schwering.irc.lib.IRCConnection.get(IRCConnection.java:430)
16:49:55,428 ERROR [stderr] (Thread-97) 	at org.schwering.irc.lib.IRCConnection.run(IRCConnection.java:373)
{code}

Seems there's now a dependency on the CamelContext in [MessageSupport.setBody|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java#L122] and the {{IrcMessage}} constructor calls {{setBody}} before the CamelContext has been provided to it (it's currently set after the constructor is called).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-06-27 15:58:10.0,,,,,,,0|i3gsjr:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nashorn javascript library can not be found  in OSGi,CAMEL-11462,13082801,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,27/Jun/17 12:39,27/Jun/17 15:19,13/Mar/19 22:20,27/Jun/17 15:19,,,,,,,,,,,,,,,,2.20.0,,,,,camel-script,osgi,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,FELIX-5659,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-27 12:48:14.04,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 27 15:19:07 UTC 2017,,,,,,,0|i3gs67:,9223372036854775807,,,,,,,,,,"27/Jun/17 12:48;ancosen;Maybe this one too is related:

https://issues.apache.org/jira/browse/KARAF-4603","27/Jun/17 12:57;gnt;Well, that would be related, but different issue.",27/Jun/17 15:19;gnt;https://github.com/apache/camel/commit/a60fc014015cc8fbbc446660adf917e4774ce7ff,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Infinispan: If a Default Configuration is not provided then a DefaultCacheName must be provided,CAMEL-11460,13082770,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,ancosen,ancosen,27/Jun/17 09:57,27/Jun/17 10:04,13/Mar/19 22:20,27/Jun/17 10:04,,,,,,,,,,,,,,,,2.20.0,,,,,camel-infinispan,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-06-27 09:57:19.0,,,,,,,0|i3grzb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix camel-box feature,CAMEL-11453,13082449,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,jpoth,jpoth,26/Jun/17 08:54,26/Jun/17 09:02,13/Mar/19 22:20,26/Jun/17 09:02,2.19.1,,,,,,,,,,,,,,,2.19.2,2.20.0,,,,camel-box,,,,,,0,,,,"Some dependencies from mvn:com.box/box-java-sdk are missing in the camel-box feature. This happens when using the default authentication type (APP_USER_AUTHENTICATION). Below are some stack traces. I cam provide a PR:

{code}
Caused by: java.lang.NoClassDefFoundError: org/bouncycastle/openssl/PEMParser
	at com.box.sdk.BoxDeveloperEditionAPIConnection.decryptPrivateKey(BoxDeveloperEditionAPIConnection.java:366) ~[?:?]
	at com.box.sdk.BoxDeveloperEditionAPIConnection.constructJWTAssertion(BoxDeveloperEditionAPIConnection.java:327) ~[?:?]
	at com.box.sdk.BoxDeveloperEditionAPIConnection.authenticate(BoxDeveloperEditionAPIConnection.java:237) ~[?:?]
	at com.box.sdk.BoxDeveloperEditionAPIConnection.tryRestoreUsingAccessTokenCache(BoxDeveloperEditionAPIConnection.java:305) ~[?:?]
	at com.box.sdk.BoxDeveloperEditionAPIConnection.getAppUserConnection(BoxDeveloperEditionAPIConnection.java:212) ~[?:?]
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createAppUserAuthenticatedConnection(BoxConnectionHelper.java:238) ~[?:?]
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createConnection(BoxConnectionHelper.java:89) ~[?:?]
	at org.apache.camel.component.box.BoxComponent.doStart(BoxComponent.java:85) ~[?:?]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3555) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:3561) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3295) ~[?:?]
{code}

{code}
Caused by: java.lang.NoClassDefFoundError: org/jose4j/lang/JoseException
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createAppUserAuthenticatedConnection(BoxConnectionHelper.java:238) ~[?:?]
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createConnection(BoxConnectionHelper.java:89) ~[?:?]
	at org.apache.camel.component.box.BoxComponent.doStart(BoxComponent.java:85) ~[?:?]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3555) ~[?:?]
{code}

{code}
Caused by: java.lang.ClassNotFoundException: com.eclipsesource.json.JsonObject not found by wrap_file__home_jpoth_.m2_repository_com_box_box-java-sdk_2.1.1_box-java-sdk-2.1.1.jar [413]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1550) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:79) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1958) ~[?:?]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[?:?]
	at com.box.sdk.BoxAPIConnection.authenticate(BoxAPIConnection.java:149) ~[?:?]
	at com.box.sdk.BoxAPIConnection.<init>(BoxAPIConnection.java:98) ~[?:?]
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createStandardAuthenticatedConnection(BoxConnectionHelper.java:202) ~[?:?]
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createConnection(BoxConnectionHelper.java:91) ~[?:?]
	at org.apache.camel.component.box.BoxComponent.doStart(BoxComponent.java:85) ~[?:?]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3555) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:3561) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3295) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:203) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3106) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3102) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3125) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3102) ~[?:?]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3040) ~[?:?]
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:244) ~[?:?]
{code}",Karaf 4.1.1 (latest at time of writing),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-26 08:55:24.374,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 26 08:58:01 UTC 2017,,,,,,,0|i3gq0f:,9223372036854775807,,,,,,,,,,"26/Jun/17 08:55;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1784

    CAMEL-11453 fix camel-box feature

    https://issues.apache.org/jira/browse/CAMEL-11453
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-11453

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1784.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1784
    
----
commit b612a50bcb3afa15da3b2b3da212fb038b0dbb7b
Author: jpoth <poth.john@gmail.com>
Date:   2017-06-26T08:54:37Z

    CAMEL-11453 fix camel-box feature

----
","26/Jun/17 08:58;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1784
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-infinispan - InfinispanRoutePolicy issue with locking from remote server,CAMEL-11388,13078515,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,davsclaus,davsclaus,09/Jun/17 06:10,22/Jun/17 20:39,13/Mar/19 22:20,22/Jun/17 17:09,2.19.0,,,,,,,,,,,,,,,2.19.2,2.20.0,,,,camel-infinispan,,,,,,0,,,,"It seems there is a problem that the route policy seems to grant locks to both or keep changing between them, so we have competing consumers being active at the same time.

The issue can be reproduced by following the readme file from
https://github.com/camelinaction/camelinaction2/tree/master/chapter17/cluster-file-infinispan

You can see errors like
{code}
Caused by: org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: /Users/davsclaus/workspace/camelinaction2/chapter17/cluster-file-infinispan/target/inbox/WebSpherePackageScanClassResolver.java (No such file or directory)
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1756)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1355)
	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:60)
	at org.apache.camel.component.file.GenericFileConverter.convertTo(GenericFileConverter.java:97)
	at sun.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1351)
	at org.apache.camel.impl.converter.StaticMethodFallbackTypeConverter.convertTo(StaticMethodFallbackTypeConverter.java:62)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:346)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:181)
	... 41 more
Caused by: java.io.FileNotFoundException: /Users/davsclaus/workspace/camelinaction2/chapter17/cluster-file-infinispan/target/inbox/WebSpherePackageScanClassResolver.java (No such file or directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at org.apache.camel.converter.IOConverter.toInputStream(IOConverter.java:78)
	at org.apache.camel.converter.IOConverter.toByteArray(IOConverter.java:266)
	at sun.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1351)
	... 50 more
2017-06-09 08:04:41,396 [://target/inbox] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileDeleteProcessStrategy@160cecbb for file: GenericFile[WebSpherePackageScanClassResolver.java]
2017-06-09 08:04:42,126 [spanRoutePolicy] INFO  InfinispanRoutePolicy          - Leadership lost (map=myLock, key=myLockKey val=myLockValue)
2017-06-09 08:04:42,127 [spanRoutePolicy] INFO  InfinispanRoutePolicy          - Leadership taken (map=myLock, key=myLockKey, val=myLockValue)
2017-06-09 08:05:07,710 [29c8fac7da04e40] INFO  InfinispanRoutePolicy          - Leadership lost (map=myLock, key=myLockKey val=myLockValue)
2017-06-09 08:05:07,715 [29c8fac7da04e40] INFO  InfinispanRoutePolicy          - Leadership taken (map=myLock, key=myLockKey, val=myLockValue)
{code}

Where as the hazelcast example which is similar works fine.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-22 17:12:26.467,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 22 20:39:15 UTC 2017,,,,,,,0|i3g2m7:,9223372036854775807,,,,,,,,,,"09/Jun/17 06:10;davsclaus;Luca, I wonder if you mind taking a look and see what could be the problem?","09/Jun/17 06:12;davsclaus;Also I wonder if we can make this easier to configure from client point of view for remote. Maybe if you can have a hotrod-client.properties file which you can then easily specify and load automatic, so you dont have to add that bunch of java code to setup a remote infinispan connection.

See for example how the JCache example does it (yeah I know its using JCache API but notice its only 2 lines of code)
https://github.com/camelinaction/camelinaction2/blob/master/chapter17/cluster-jcache/src/main/java/camelinaction/ServerBar.java

","22/Jun/17 17:12;lb;[~davsclaus] 

sent a PR against CIA2 (https://github.com/camelinaction/camelinaction2/pull/73) to fix the example. 
will work on make it easier to configure the policy in a separate JIRA",22/Jun/17 20:33;lb; [~davsclaus] forgot to mention that CIA2 examples need camel 2.19.2 in addition to my PR,"22/Jun/17 20:39;davsclaus;Thanks Luka, I added a TODO in the pom of the CiA source code",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to use camel-box in OSGI environment ,CAMEL-11433,13081357,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jpoth,jpoth,21/Jun/17 08:51,21/Jun/17 10:43,13/Mar/19 22:20,21/Jun/17 10:28,2.19.0,,,,,,,,,,,,,,,2.19.2,2.20.0,,,,camel-box,,,,,,0,,,,"Using Karaf 4.1.1:

{code}
 Unresolved requirements: osgi.wiring.package; (osgi.wiring.package=org.apache.camel.component.box)]
	at org.apache.karaf.shell.support.MultiException.throwIf(MultiException.java:61) ~[143:org.apache.karaf.shell.core:4.1.1]
	at org.apache.karaf.bundle.command.Install.execute(Install.java:131) [23:org.apache.karaf.bundle.core:4.1.1]
	at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:84) [143:org.apache.karaf.shell.core:4.1.1]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:68) [143:org.apache.karaf.shell.core:4.1.1]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:86) [143:org.apache.karaf.shell.core:4.1.1]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:560) [143:org.apache.karaf.shell.core:4.1.1]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-21 08:54:03.06,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 21 10:43:42 UTC 2017,,,,,,,0|i3gja7:,9223372036854775807,,,,,,,,,,"21/Jun/17 08:54;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1777

    CAMEL-11433 Add OSGI export package and service headers to camel-box

    https://issues.apache.org/jira/browse/CAMEL-11433
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-11433

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1777.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1777
    
----
commit c0cca9bf83a2fc271409e5c0d323656d367534e9
Author: jpoth <poth.john@gmail.com>
Date:   2017-06-21T08:53:20Z

    CAMEL-11433 Add OSGI export package and service headers to camel-box

----
",21/Jun/17 10:28;davsclaus;Thanks for the PR,"21/Jun/17 10:43;githubbot;Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1777
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-box is not assigning default configuration values,CAMEL-11429,13081041,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,jpoth,jpoth,20/Jun/17 08:22,20/Jun/17 08:36,13/Mar/19 22:20,20/Jun/17 08:32,2.19.0,,,,,,,,,,,,,,,2.19.2,2.20.0,,,,camel-box,,,,,,0,,,,"camel-box is not assigning default configuration values:

{code}
org.apache.camel.RuntimeCamelException: Box API connection failed: Authentication type not specified in configuration
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createConnection(BoxConnectionHelper.java:82) [259:org.apache.camel.camel-box:2.20.0.SNAPSHOT]
	at org.apache.camel.component.box.BoxComponent.doStart(BoxComponent.java:85) [259:org.apache.camel.camel-box:2.20.0.SNAPSHOT]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [69:org.apache.camel.camel-core:2.20.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3555) [69:org.apache.camel.camel-core:2.20.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:3561) [69:org.apache.camel.camel-core:2.20.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3295) [69:org.apache.camel.camel-core:2.20.0.SNAPSHOT]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-20 08:24:20.849,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 20 08:36:03 UTC 2017,,,,,,,0|i3ghbz:,9223372036854775807,,,,,,,,,,"20/Jun/17 08:24;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1774

    CAMEL-11429 Assign default values to BoxConfiguration

    https://issues.apache.org/jira/browse/CAMEL-11429
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-11429

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1774.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1774
    
----
commit 4a07a665941db5949c5d3999a9021343ff53901d
Author: jpoth <poth.john@gmail.com>
Date:   2017-06-20T08:23:42Z

    CAMEL-11429 Assign default values to BoxConfiguration

----
","20/Jun/17 08:36;githubbot;Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1774
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-opentracing loggingtracer needs to build before client,CAMEL-11407,13079640,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,tcunning,tcunning,14/Jun/17 04:08,15/Jun/17 13:31,13/Mar/19 22:20,14/Jun/17 07:44,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-opentracing,,,,,,0,,,,[ERROR] Failed to execute goal on project camel-example-opentracing-client: Could not resolve dependencies for project org.apache.camel.example:camel-example-opentracing-client:jar:2.20.0.fuse-000038: Could not find artifact org.apache.camel:camel-example-opentracing-loggingtracer:jar:2.20.0.fuse-000038 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/) -> [Help 1],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-14 04:13:49.343,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 15 13:31:55 UTC 2017,,,,,,,0|i3g8pb:,9223372036854775807,,,,,,,,,,"14/Jun/17 04:13;githubbot;GitHub user cunningt opened a pull request:

    https://github.com/apache/camel/pull/1757

    CAMEL-11407 camel-opentracing loggingtracer needs to build before client

    https://issues.apache.org/jira/browse/CAMEL-11407

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cunningt/camel CAMEL-11407

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1757.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1757
    
----
commit a68e868902af860059591d4fc43476863ce39a91
Author: Tom Cunningham <tcunning@redhat.com>
Date:   2017-06-14T04:11:58Z

    CAMEL-11407 camel-opentracing loggingtracer needs to build before client

----
",14/Jun/17 04:14;tcunning;PR : https://github.com/apache/camel/pull/1757,14/Jun/17 07:44;zregvart;Merged to {{master}} from [PR#1757|https://github.com/apache/camel/pull/1757].,"15/Jun/17 13:31;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1757
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Undertow endpoint option REUSE_ADDRESS is configured using the value for TCP_NO_DELAY,CAMEL-11394,13078838,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bhkho,bhkho,10/Jun/17 06:48,10/Jun/17 07:12,13/Mar/19 22:20,10/Jun/17 07:12,2.18.4,,,,,,,,,,,,,,,2.18.5,2.19.1,2.20.0,,,camel-undertow,,,,,,0,,,,"The undertow endpoint configuration for the REUSE_ADDRESS option is set using the option value for TCP_NO_DELAY instead of the value for REUSE_ADDRESS.



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-10 06:53:20.111,,,no_permission,,Unknown,,,,Patch,,,,,,,,,9223372036854775807,,,Sat Jun 10 07:12:55 UTC 2017,,,Patch Available,,,,0|i3g4lz:,9223372036854775807,,,,,,,,,,"10/Jun/17 06:53;githubbot;GitHub user abracadabrasimsalabimhocuspocus opened a pull request:

    https://github.com/apache/camel/pull/1750

    CAMEL-11394: REUSE_ADDRESSES options is set using the value for TCP_NO_DELAY intea…

    The undertow endpoint configuration for the REUSE_ADDRESS option is set using the option value for TCP_NO_DELAY instead of the value for REUSE_ADDRESS.
    
    This makes it impossible to configure it separately from value for the tcpNoDelay.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/abracadabrasimsalabimhocuspocus/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1750.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1750
    
----
commit 30428dd7837f4adaacad3114a0bc08730a28113d
Author: Bhun Kho <bhun.kho@ictu.nl>
Date:   2017-06-10T06:42:51Z

    REUSE_ADDRESSES options is set using the value for TCP_NO_DELAY intead of REUSE_ADDRESSES

----
",10/Jun/17 07:12;davsclaus;Thanks for the PR,"10/Jun/17 07:12;githubbot;Github user abracadabrasimsalabimhocuspocus closed the pull request at:

    https://github.com/apache/camel/pull/1750
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
String to ByteBuffer conversion causes overflow due to multibyte chars,CAMEL-11392,13078662,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bhkho,bhkho,09/Jun/17 16:29,09/Jun/17 17:13,13/Mar/19 22:20,09/Jun/17 17:13,2.18.4,,,,,,,,,,,,,,,2.18.5,2.19.1,2.20.0,,,camel-undertow,,,,,,0,,,,The NIOConverter uses String.length() to allocate a ByteBuffer which may not match the actual encoded byte length if the String contains multibyte chars.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-09 16:30:14.846,,,no_permission,,Unknown,,,,Important,Patch,,,,,,,,9223372036854775807,,,Fri Jun 09 17:13:42 UTC 2017,,,Patch Available,,,,0|i3g3iv:,9223372036854775807,,,,,,,,,,"09/Jun/17 16:30;githubbot;GitHub user abracadabrasimsalabimhocuspocus opened a pull request:

    https://github.com/apache/camel/pull/1748

    CAMEL-11392: String to ByteBuffer conversion causes overflow due to multibyte chars

    The NIOConverter uses String.length() to allocate a ByteBuffer which may not match the actual encoded byte length if the String contains multibyte chars.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/abracadabrasimsalabimhocuspocus/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1748.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1748
    
----
commit 36f7de9fa42cbbb14d7aa490251c39e9902cc19d
Author: Bhun Kho <bhun.kho@ictu.nl>
Date:   2017-06-09T16:22:45Z

    Actual number of bytes can be greater than the string length due to multibyte chars

----
","09/Jun/17 17:13;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1748
",09/Jun/17 17:13;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't allow Salesforce HTTP client to stop with outstanding requests,CAMEL-11212,13067352,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,27/Apr/17 12:34,08/Jun/17 13:04,13/Mar/19 22:20,28/Apr/17 16:01,,,,,,,,,,,,,,,,2.19.0,,,,,camel-salesforce,,,,,,0,,,,"The Salesforce component uses Jetty asynchronous client throughout. There is a race condition that might occur if the component's HTTP client is stopped while one or more requests are still in progress. The result of which could be inconsistencies in execution.
This was seen in the implementation of the connectivity validation in the ping check which creates the {{SalesforceHttpClient}} and {{DefaultRestClient}} and starts/stops then in a small time frame.
",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11386,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-27 12:42:07.335,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 28 15:56:28 UTC 2017,,,,,,,0|i3e6kn:,9223372036854775807,,,,,,,,,,"27/Apr/17 12:42;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1666

    CAMEL-11212 Don't allow Salesforce HTTP client to stop with outstanding requests

    Submitted for review, it seems trivial but could have repercussions if I missed the locking semantics.
    Thank you for taking a look 🥇  
    
    This introduces a `Phaser` to await for any in-flight requests to complete before the client is allowed to stop.
    
    This should not block as long as the `BufferingResponseListener::onComplete` is invoked at the end of every request. And that is guaranteed by the `CompleteListener::onComplete` contract.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-11212

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1666.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1666
    
----
commit e5b137d4b2ec9371a6f8a0a7fca3849730127302
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-04-27T12:40:18Z

    CAMEL-11212 Don't allow Salesforce HTTP client ...
    
    ...to stop with outstanding requests
    
    This introduces a `Phaser` to await for any in-flight requests to
    complete before the client is allowed to stop.
    
    This should not block as long as the
    `BufferingResponseListener::onComplete` is invoked at the end of every
    request. And that is guaranteed by the `CompleteListener::onComplete`
    contract.

----
","28/Apr/17 15:56;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1666
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot-starter generator paste incorrect default value,CAMEL-11369,13075872,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,dmvolod,dmvolod,30/May/17 16:02,02/Jun/17 11:03,13/Mar/19 22:20,02/Jun/17 11:03,2.20.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-spring-boot-starters,tooling,,,,,0,,,,"I've created a new data component and submit it via PR
https://github.com/apache/camel/pull/1729
The spring-bootstarter *DataFormatConfiguration class contains incorrectly defined default value:
private String contentTypeFormat = String.binary;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-31 08:06:22.746,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 02 11:01:55 UTC 2017,,,,,,,0|i3fn3b:,9223372036854775807,,,,,,,,,,"31/May/17 08:06;davsclaus;Ah thanks, yeah for string, and possible int types, we should generate this a bit different. 

Its down here we need to improve the code to check the type and deal with a bit different when its a String, int/long type and then use another initializer code
https://github.com/apache/camel/blob/master/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java#L332

Mind that the code is repeated in several other places as well so do the same code changes there also. Maybe refactor into a reusable method as the enum generation code is more complicated than the simpler types.

I wonder if you want to take a stab at fixing this?","02/Jun/17 07:49;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/1734

    CAMEL-11369: camel-spring-boot-starter generator paste incorrect default value

    @davsclaus, the problem was in type comparison, not in enum processing at all
    Other code looks like working fine, but need to be reviewed for better understanding, join reusable methods, common type comparison and using constants (classes) instead of string values 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-11369

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1734.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1734
    
----
commit 838676fe6a92756a666d2907ae08cfaa75abd6df
Author: Dmitry Volodin <dmvolod@gmail.com>
Date:   2017-06-02T07:42:40Z

    CAMEL-11369: camel-spring-boot-starter generator paste incorrect default
    value

----
","02/Jun/17 11:01;githubbot;Github user dmvolod closed the pull request at:

    https://github.com/apache/camel/pull/1734
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
duplicated/missing logs when camel-paxlogging work with pax-logging-log4j2,CAMEL-11352,13075473,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,xldai,xldai,28/May/17 14:02,01/Jun/17 07:13,13/Mar/19 22:20,30/May/17 07:08,2.17.6,2.19.0,,,,,,,,,,,,,,2.19.1,2.20.0,,,,,,,,,,0,,,,"This problem is found after switch to the karaf 4.1.x, which using pax-logging-log4j2 insteadof pax-logging-service.

I created a small test case project for reproduce this issue. https://github.com/xldai/test/tree/master/test-paxlogging-camel

The findings from me is that, when PaxLoggingConsumer class [1] work together with pax-logging-service (karaf 4.0.x), it creates new threads to process the incoming PaxLoggingEvent and using MDC to filter the possible duplicated logs from PaxAppenderProxy class [2].

but when PaxLoggingConsumer class work together with pax-logging-log4j2, the multi thread mechanism for processing the PaxLoggingEvent will lead to duplicated/missing logs output to the camel Exchange.

Since the L63 from [3] fixed the possible duplicated logs come from PaxAppenderProxy class, I found that the multi thread mechanism and MDC checking can be removed from PaxLoggingConsumer class, then it works again as expected from my test result.

[1] https://github.com/apache/camel/blob/master/components/camel-paxlogging/src/main/java/org/apache/camel/component/paxlogging/PaxLoggingConsumer.java#L58
[2] https://github.com/ops4j/org.ops4j.pax.logging/blob/logging-1.9.1/pax-logging-service/src/main/java/org/ops4j/pax/logging/service/internal/PaxAppenderProxy.java#L63
[3] https://github.com/ops4j/org.ops4j.pax.logging/blob/logging-1.9.1/pax-logging-log4j2/src/main/java/org/ops4j/pax/logging/log4j2/internal/PaxAppenderProxy.java#L63",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-28 14:45:38.506,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 01 07:13:33 UTC 2017,,,,,,,0|i3fkmn:,9223372036854775807,,,,,,,,,,28/May/17 14:45;davsclaus;So are you saying its a issue that is fixed in pax-logging. ,"29/May/17 12:11;xldai;Claus, from my test result, the pax-logging-service bundle (support log4j 1.x) sent duplicated log entries sometimes, so I think that's why the doAppend() of PaxLoggingConsumer made multi thread/add MDC checking to avoid these situation from camel side. but with pax-logging-log4j2 bundle installed, I don't see duplicated log entries any longer from it, but the new problem is, we got a lot duplicated logs from camel-paxlogging side.

For example the logs from my test case above:
{code}
Apache Camel 2.19.0 (CamelContext: camel-1) started in 0.234 seconds
Apache Camel 2.19.0 (CamelContext: camel-1) started in 0.234 seconds
Apache Camel 2.19.0 (CamelContext: camel-1) started in 0.234 seconds
Started bundle: file:/G:/download/apache-karaf-4.1.1/deploy/test-paxlogging-camel-1.0.0.jar
{code}

the original logs from pax-logging-log4j2 are (as expected):
{code}
Route: route1 started and consuming from: Endpoint[paxlogging://mylog]
Total 1 routes, of which 1 are started.
Apache Camel 2.17.6 (CamelContext: camel-1) started in 0.234 seconds
Started bundle: file:/G:/download/apache-karaf-4.1.1/deploy/test-paxlogging-camel-1.0.0.jar
{code}",29/May/17 12:18;davsclaus;Well you are welcome to provide a github PR to fix this in camel-paxlogging,"30/May/17 06:58;githubbot;GitHub user xldai opened a pull request:

    https://github.com/apache/camel/pull/1727

    fix CAMEL-11352

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xldai/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1727.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1727
    
----
commit 2689846973276af9d9105924e8299bba10fc7b73
Author: xldai <xldai@talend.com>
Date:   2017-05-30T06:56:47Z

    fix CAMEL-11352

----
",30/May/17 07:08;davsclaus;Thanks for the PR,"01/Jun/17 07:13;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1727
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Kafka component commits offsets in case of exceptions,CAMEL-11215,13067537,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rogerhill01234,rogerhill01234,27/Apr/17 21:57,25/May/17 12:38,13/Mar/19 22:20,25/May/17 12:38,2.18.3,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,camel-kafka,,,,,,0,,,,"My processor in the router throws an exception but the Kafka component still commits the offsets. 

My route: (heavily redacted and modified)
{code:title=Route|borderStyle=solid}
from( ""kafka://blah-blah"" ).routeId(""MyRoute"")
                .convertBodyTo( MyData.class )
                .process( ""MyProcessor"" )
                .to( ""DestinationProcessor"" );
{code}
The exception I get: 
{code:title=Exception|borderStyle=solid}
        at com.mycompany.MyProcessor.process(MyProcessor.java:152)
        at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:103)
        at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:71)
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
        at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:117)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
        at org.apache.camel.component.kafka.KafkaConsumer$KafkaFetchRecords.run(KafkaConsumer.java:140)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.sql.SQLException: Exception occurred while getting connection: oracle.ucp.UniversalConnectionPoolException: Cannot get Connection from Datasource: java.sql.SQLException: Listener refused the connection with the following error:
ORA-12514, TNS:listener does not currently know of service requested in connect descriptor
{code}
Here is the corresponding Kafka component code:(KafkaConsumer.java) -This part of the code does not seem to handle the exception. The exception handler simply eats up the exception and the fall through code happily commits the offsets. Is this a bug? or am I missing something?

{code:title=KafkaConsumer.java|borderStyle=solid}
while (isRunAllowed() && !isStoppingOrStopped() && !isSuspendingOrSuspended()) {
                    ConsumerRecords<Object, Object> allRecords = consumer.poll(pollTimeoutMs);
                    for (TopicPartition partition : allRecords.partitions()) {
                        List<ConsumerRecord<Object, Object>> partitionRecords = allRecords
                            .records(partition);
                        for (ConsumerRecord<Object, Object> record : partitionRecords) {
                            if (LOG.isTraceEnabled()) {
                                LOG.trace(""partition = {}, offset = {}, key = {}, value = {}"", record.partition(), record.offset(), record.key(), record.value());
                            }
                            Exchange exchange = endpoint.createKafkaExchange(record);
                            try {
                                processor.process(exchange);
                            } catch (Exception e) {
                                getExceptionHandler().handleException(""Error during processing"", exchange, e);
                            }
                        }
                        // if autocommit is false
                        if (endpoint.getConfiguration().isAutoCommitEnable() != null
                            && !endpoint.getConfiguration().isAutoCommitEnable()) {
                            long partitionLastoffset = partitionRecords.get(partitionRecords.size() - 1).offset();
                            consumer.commitSync(Collections.singletonMap(
                                partition, new OffsetAndMetadata(partitionLastoffset + 1)));
                        }
                    }
                }
{code}

Any insights are appreciated.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-15 10:09:38.551,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue May 23 13:07:29 UTC 2017,,,,,,,0|i3e7pr:,9223372036854775807,,,,,,,,,,"15/May/17 10:09;davsclaus;We should introduce an option to break out on first exception, then users can turn this on | off.

Just mind about poison message problem if the same message keeps failing, then the offset wont advance. So you need some way of dealing with that.","15/May/17 11:02;davsclaus;And btw you can use Camel's error handler to try to handle such errors with retries, then you can possible resolve intermediate errors.","16/May/17 07:23;davsclaus;I created a branch with a potential fix
https://github.com/apache/camel/tree/CAMEL-11215

You are welcome to checkout and build JARs from this branch and test on your system. You need to set the option breakOnFirstError=true on your Camel kafka endpoint uris to turn this functionality on. ",16/May/17 07:25;davsclaus;When an unhandled exception is thrown the consumer will now now re-connect with one poll timeout as delay in between (default 5 sec). This allows a bit of backoff between retries. Also the last good offset is synced beforehand so the consumer should start with the failed message again,"16/May/17 20:20;rogerhill01234;Thanks Claus!
We will checkout that branch and test it.
When will this be available on the release? 
","23/May/17 12:16;davsclaus;Roger, did you get a chance to test this?

It will only be in a new release if it has been tested and we get some feedback on this.","23/May/17 13:07;rogerhill01234;Claus,
No. We have not got a chance to test it yet. We had changed our architecture to bypass this problem. We will get to this sometime in the future. Thanks for providing the fix quickly.
Roger",,,,,,,,,,,,,,,,,,,,,,,,,,
"[OSGi, camel-jpa] Problems with mapping idempotent.jpa.MessageProcessed with Aries + Hibernate",CAMEL-11317,13074475,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gzres,gzres,gzres,24/May/17 11:13,24/May/17 11:50,13/Mar/19 22:20,24/May/17 11:22,2.17.7,2.18.3,2.19.0,,,,,,,,,,,,,2.18.5,2.19.1,2.20.0,,,camel-jpa,osgi,,,,,0,,,,"When JPA idempotent JpaMessageIdRepository is used in blueprint, with Hibernate JPA Provider we may end up with:
{noformat}
2017-05-16 13:23:38,739 | ERROR | {pool-28-thread-1} [org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer] (JavassistLazyInitializer.java:166) | 236 - org.hibernate.core - 4.2.22.Final | HHH000142: Javassist Enhancement failed: org.apache.camel.processor.idempotent.jpa.MessageProcessed
java.lang.RuntimeException: by java.lang.NoClassDefFoundError: org/hibernate/proxy/HibernateProxy
    at javassist.util.proxy.ProxyFactory.createClass3(ProxyFactory.java:515)[157:javassist:3.19.0.GA]
    at javassist.util.proxy.ProxyFactory.createClass2(ProxyFactory.java:492)[157:javassist:3.19.0.GA]
    at javassist.util.proxy.ProxyFactory.createClass1(ProxyFactory.java:428)[157:javassist:3.19.0.GA]
    at javassist.util.proxy.ProxyFactory.createClass(ProxyFactory.java:400)[157:javassist:3.19.0.GA]
    at org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer.getProxyFactory(JavassistLazyInitializer.java:163)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.proxy.pojo.javassist.JavassistProxyFactory.postInstantiate(JavassistProxyFactory.java:66)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.tuple.entity.PojoEntityTuplizer.buildProxyFactory(PojoEntityTuplizer.java:229)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.tuple.entity.AbstractEntityTuplizer.<init>(AbstractEntityTuplizer.java:212)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.tuple.entity.PojoEntityTuplizer.<init>(PojoEntityTuplizer.java:82)[236:org.hibernate.core:4.2.22.Final]
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.8.0_131]
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)[:1.8.0_131]
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.8.0_131]
    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)[:1.8.0_131]
    at org.hibernate.tuple.entity.EntityTuplizerFactory.constructTuplizer(EntityTuplizerFactory.java:135)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.tuple.entity.EntityTuplizerFactory.constructDefaultTuplizer(EntityTuplizerFactory.java:188)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.tuple.entity.EntityMetamodel.<init>(EntityMetamodel.java:341)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.persister.entity.AbstractEntityPersister.<init>(AbstractEntityPersister.java:506)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.persister.entity.SingleTableEntityPersister.<init>(SingleTableEntityPersister.java:146)[236:org.hibernate.core:4.2.22.Final]
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.8.0_131]
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)[:1.8.0_131]
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.8.0_131]
    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)[:1.8.0_131]
    at org.hibernate.persister.internal.PersisterFactoryImpl.create(PersisterFactoryImpl.java:163)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:135)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:398)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1854)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.ejb.EntityManagerFactoryImpl.<init>(EntityManagerFactoryImpl.java:96)[237:org.hibernate.entitymanager:4.2.22.Final]
    at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:915)[237:org.hibernate.entitymanager:4.2.22.Final]
    at org.hibernate.osgi.OsgiPersistenceProvider.createContainerEntityManagerFactory(OsgiPersistenceProvider.java:99)[238:org.hibernate.osgi:4.2.22.Final]
    at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.createEntityManagerFactories(EntityManagerFactoryManager.java:432)[166:org.apache.aries.jpa.container:1.0.4]
    at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.registerEntityManagerFactories(EntityManagerFactoryManager.java:292)[166:org.apache.aries.jpa.container:1.0.4]
    at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.access$000(EntityManagerFactoryManager.java:74)[166:org.apache.aries.jpa.container:1.0.4]
    at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager$1.call(EntityManagerFactoryManager.java:203)[166:org.apache.aries.jpa.container:1.0.4]
    at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager$1.call(EntityManagerFactoryManager.java:199)[166:org.apache.aries.jpa.container:1.0.4]
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_131]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_131]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_131]
    at java.lang.Thread.run(Thread.java:748)[:1.8.0_131]
Caused by: javassist.CannotCompileException: by java.lang.NoClassDefFoundError: org/hibernate/proxy/HibernateProxy
    at javassist.util.proxy.FactoryHelper.toClass(FactoryHelper.java:170)[157:javassist:3.19.0.GA]
    at javassist.util.proxy.ProxyFactory.createClass3(ProxyFactory.java:507)[157:javassist:3.19.0.GA]
    ... 37 more
Caused by: java.lang.NoClassDefFoundError: org/hibernate/proxy/HibernateProxy
    at java.lang.ClassLoader.defineClass1(Native Method)[:1.8.0_131]
    at java.lang.ClassLoader.defineClass(ClassLoader.java:763)[:1.8.0_131]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_131]
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_131]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_131]
    at java.lang.reflect.Method.invoke(Method.java:498)[:1.8.0_131]
    at javassist.util.proxy.FactoryHelper.toClass2(FactoryHelper.java:182)[157:javassist:3.19.0.GA]
    at javassist.util.proxy.FactoryHelper.toClass(FactoryHelper.java:164)[157:javassist:3.19.0.GA]
    ... 38 more
Caused by: java.lang.ClassNotFoundException: org.hibernate.proxy.HibernateProxy not found by org.apache.camel.camel-jpa [180]
    at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1556)
    at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:77)
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1993)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)[:1.8.0_131]
    ... 46 more
{noformat}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-24 11:39:04.348,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed May 24 11:43:08 UTC 2017,,,,,,,0|i3fegv:,9223372036854775807,,,,,,,,,,"24/May/17 11:22;gzres;Fixed in master branch [here|https://github.com/apache/camel/commit/12d4f2d108b5d771e286135827e70bd5f0471f90]
Fixed in camel-2.19.x branch [here|https://github.com/apache/camel/commit/894a54f255528e32ce75572288bfdcfa3a558d07]",24/May/17 11:39;davsclaus;Should we backport to 2.18.x branch also?,24/May/17 11:40;gzres;No problem,24/May/17 11:42;gzres;Fixed in camel-2.18.x [here|https://github.com/apache/camel/commit/7471bacec53927a35c6197ef371ecac1f2679e7a],"24/May/17 11:43;davsclaus;Thanks its 2.18.5, as .4 is in VOTE now to be released soon",,,,,,,,,,,,,,,,,,,,,,,,,,,,
OpenTracing trace context should cope with Hystrix using separate thread,CAMEL-11198,13066713,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,garybrown,garybrown,25/Apr/17 14:50,23/May/17 12:23,13/Mar/19 22:20,23/May/17 12:23,2.19.0,,,,,,,,,,,,,,,2.19.0,2.20.0,,,,camel-hystrix,,,,,,0,,,,"When using OpenTracing with Hystrix, the default Hystrix configuration uses a separate thread for the outbound request.

Currently the trace context from the route is not carried across to this new thread, causing the outbound request to be recorded in a separate trace instance.

Need to ensure that the trace context is carried to the new thread/exchange.

As a workaround, the Hystrix configuration property {{executionIsolationStrategy}} should be set to ""SEMAPHORE"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-26 16:58:12.986,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue May 23 12:23:32 UTC 2017,,,,,,,0|i3e2mn:,9223372036854775807,,,,,,,,,,"26/Apr/17 16:58;githubbot;GitHub user objectiser opened a pull request:

    https://github.com/apache/camel/pull/1662

    CAMEL-11198 Fix issue with propagating the trace context when using h…

    …ystrix

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/objectiser/camel CAMEL-11198

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1662.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1662
    
----
commit 667c38992dad2475866bfdd9d492f4df382c5a9e
Author: Gary Brown <gary@brownuk.com>
Date:   2017-04-26T16:37:52Z

    CAMEL-11198 Fix issue with propagating the trace context when using hystrix

----
","26/Apr/17 17:03;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1662
","26/Apr/17 17:03;davsclaus;Fixed on master, need to merge to 2.19.x branch after the release",23/May/17 12:23;davsclaus;We re-cut the release,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rest DSL Producer HTTP ignores http verb from uri,CAMEL-11293,13072858,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,owain,owain,17/May/17 16:20,23/May/17 12:13,13/Mar/19 22:20,23/May/17 12:13,2.19.0,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,camel-http4,rest,,,,,0,,,,"As per http://camel.465427.n5.nabble.com/2-19-0-Rest-Producer-DSL-http4-support-for-PUT-workaround-td5799706.html

https://github.com/apache/camel/blob/camel-2.19.x/components/camel-http4/src/main/java/org/apache/camel/component/http4/helper/HttpMethodHelper.java#L64

The createMethod function does not take the http verb from the URI, PUT is transformed to a POST since there is a payload.  Resulting in an incorrect http request being formed.  The verb from the URI should take precedence.  

There is a workaround of setting Exchange.HTTP_METHOD header as per:

      .setHeader(Exchange.HTTP_METHOD, constant(HttpMethods.PUT))
      .to(""rest:put:api/resource/{{resource.id}}"")

HttpHelperTest is lacking coverage of http verbs other than GET and POST
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-05-17 16:20:44.0,,,,,,,0|i3f4hj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using chmodDirectory with full paths makes file producer to created directories relative to source,CAMEL-11298,13073126,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Stabbz,Stabbz,18/May/17 12:48,23/May/17 10:55,13/Mar/19 22:20,23/May/17 09:48,2.18.2,2.19.0,,,,,,,,,,,,,,2.18.5,2.19.1,2.20.0,,,camel-core,,,,,,0,,,,"Tried using the chmodDirectory property on a file producer that writes to full system paths and noticed that with the chmodDirectory property the directories get created relative to the source/project.

Without using the property the files get properly created using the full path that is given to them.

I ran a debugger and found the source of the problem:

Code is from org.apache.camel.component.file.FileOperations 
in buildDirectory method
at lines 97 - 118

{code}
if (permissions == null || permissions.isEmpty()) {
            return dir.mkdirs();
        }

        // create directory one part of a time and set permissions
        try {
            String[] parts = dir.getPath().split(""\\"" + File.separatorChar);
            File base = new File(""."");
            for (String part : parts) {
                File subDir = new File(base, part);
                if (!subDir.exists()) {
                    if (subDir.mkdir()) {
                        if (LOG.isTraceEnabled()) {
                            LOG.trace(""Setting chmod: {} on directory: {} "", PosixFilePermissions.toString(permissions), subDir);
                        }
                        Files.setPosixFilePermissions(subDir.toPath(), permissions);
                    } else {
                        return false;
                    }
                }
                base = new File(base, subDir.getName());
            }
        }
{code}

Base File used to create all the folders and set their permissions is initialized with new File("".""), effectively this always creates the directories given to it, relative to the source, and will not handle full system paths.

Is there a reason I'm unaware of that this is implemented this way?

I tested running folder creation code with new File("""") as a base and it worked fine, would that be enough to handle the issue if it indeed is an issue?

I can do this my self by issuing a pull request, let me know.

Thanks.
",Arch Linux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-19 17:15:48.188,,,no_permission,,Moderate,,,,,,,,,,,,,9223372036854775807,,,Tue May 23 10:55:13 UTC 2017,,,,,,,0|i3f653:,9223372036854775807,,,,,,,,,,19/May/17 17:15;davsclaus;Can you provide an example with the uri configuration to better explain this,"19/May/17 19:15;Stabbz;Sure, this route below will produce an exception that illustrates the problem, the chmodDirectory property will create the directory relative to the source but the file producer will look for that directory in its system path resulting in a FileNotFoundException.

{code}
@Component
public class TestRouter extends RouteBuilder {

    @Override
    public void configure() throws Exception {

        String outputFileDir = ""/home/damyan/Desktop/test/test2/"";

        from(""timer://foo?fixedRate=true&period=10000"")
                .setBody(simple (""Hello World""))
                .to(""file://"" + outputFileDir + ""?chmodDirectory=777"");
    }
}
{code}",21/May/17 07:19;davsclaus;Yeah a PR is welcome we love contributions,"22/May/17 07:39;Stabbz;I'm not sure which branch to use for such a PR, can you give me some direction? Thanks.","22/May/17 07:40;davsclaus;Always master, then the Camel team cherry-pick to older branches if necessary.","22/May/17 14:48;githubbot;GitHub user Stabbz opened a pull request:

    https://github.com/apache/camel/pull/1707

    CAMEL-11298: Fix, allowing usage of absolute and relative paths with chmodDirectory option

    Reused the absolute boolean flag to handle absolute paths when using chmodDirectory option. Previously using absolute paths produced an exception.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Stabbz/camel chmod-dir-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1707.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1707
    
----
commit 995ff7e1640fe285eb66c948d8f487c918991c26
Author: Damyan Damyanov <damyan.damyanov@scalefocus.com>
Date:   2017-05-22T11:41:34Z

    CAMEL-11298: Minor change to file constructor used in chmodDirectory. Should fix the issue.

commit b91e1d21e3e0b50e95e12b793610c956ce1e7950
Author: Damyan Damyanov <damyan.damyanov@scalefocus.com>
Date:   2017-05-22T14:43:49Z

    CAMEL-11298: Added additional logic to handle absolute and relative paths when using chmodDirectory.

----
","23/May/17 10:55;githubbot;Github user Stabbz closed the pull request at:

    https://github.com/apache/camel/pull/1707
",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Rest DSL Does Not Creating OPTIONS routes for defined routes,CAMEL-11299,13073231,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,leoloko,leoloko,18/May/17 19:40,22/May/17 14:03,13/Mar/19 22:20,22/May/17 14:03,2.19.0,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,camel-jetty,camel-servlet,,,,,0,,,,"Camel does not generating the options answer for all routes defined using component servlet, ex:
{code}
restConfiguration().component(""servlet"").bindingMode(RestBindingMode.json)

rest(""/v1/customers"")
   .get()
      .produces(""application/json"")
      .to(""direct:listAll"")
   .get(""/{id}"")
      .produces(""application/json"")
      .to(""direct:findOne"")
{code}
For /v1/customers the request OPTIONS return 200 OK but for /v1/customers/1 the request OPTIONS return 404 not found.",Windows 7 JDK 8 Spring Boot 1.5.3,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11312,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-22 12:16:31.464,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon May 22 12:16:31 UTC 2017,,,,,,,0|i3f6sf:,9223372036854775807,,,,,,,,,,22/May/17 12:16;davsclaus;This is also a problem with camel-jetty,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple Language: AmbiguousMethodCallException when calling method implemented by super class when method is defined by interface and abstract class,CAMEL-11235,13069892,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pascalschumacher,pascalschumacher,08/May/17 07:23,21/May/17 17:00,13/Mar/19 22:20,20/May/17 13:55,2.19.0,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,camel-core,,,,,,0,,,,"After updating from 2.18.3 to 2.19.0 the following simple expression:

{code}${headers.materialnumbers.size} != 0{code}

(materialnumbers is a LinkedHashSet) fails with:

{noformat}
2017-05-08 09:10:17,143 ERR [main] org.apache.camel.processor.DefaultErrorHandler - Failed delivery for (MessageId: ID-RDDE102Y-57877-1494227416153-0-1 on ExchangeId: ID-RDDE102Y-57877-1494227416153-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: size on null due to: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int java.util.Set.size(), public abstract int java.util.AbstractCollection.size()]. Exchange[]

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId    ProcessorId          Processor                                                                        Elapsed (ms)
[Read TB ] [Read TB           ] [                                                                              ] [        67]
[Read TB ] [choice1           ] [when[simple{Simple: ${headers.materialnumbers.size} != 0}]choice[]            ] [        62]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: size on null due to: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int java.util.Set.size(), public abstract int java.util.AbstractCollection.size()]. Exchange[]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:327)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:115) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:139) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:2490) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.BinaryPredicateSupport.matchesReturningFailureMessage(BinaryPredicateSupport.java:60) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.BinaryPredicateSupport.matches(BinaryPredicateSupport.java:50) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.simple.ast.BinaryExpression$5.evaluate(BinaryExpression.java:233) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:37) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:85) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:529) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:497) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:365) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:497) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:209) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:139) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:374) [camel-core-2.19.0.jar:2.19.0]
Caused by: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int java.util.Set.size(), public abstract int java.util.AbstractCollection.size()]. Exchange[]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:278) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:189) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:160) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:69) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:212) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:323) ~[camel-core-2.19.0.jar:2.19.0]
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11240,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-08 07:54:51.528,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sun May 21 17:00:57 UTC 2017,,,,,,,0|i3em8v:,9223372036854775807,Regression,,,,,,,,,"08/May/17 07:41;pascalschumacher;As a workaround I tried to use this simple expression:

{code}${headers.materialnumbers.isEmpty()} != true{code}

This fails with:

{noformat}2017-05-08 09:32:07,322 ERR [main] org.apache.camel.processor.DefaultErrorHandler - Failed delivery for (MessageId: ID-RDDE102Y-62492-1494228726331-0-1 on ExchangeId: ID-RDDE102Y-62492-1494228726331-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: isEmpty() on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: [89784409, 89784410] of type: com.google.common.collect.RegularImmutableSet. Exchange[]

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[Read Textbaustein ] [Read Textbaustein ] [                                                                              ] [        67]
[Read Textbaustein ] [choice1           ] [when[simple{Simple: ${headers.Materialnummern.isEmpty()} != true}]choice[]    ] [        62]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: isEmpty() on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: [89784409, 89784410] of type: com.google.common.collect.RegularImmutableSet. Exchange[]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:327) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:115) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:139) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:2490) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.BinaryPredicateSupport.matchesReturningFailureMessage(BinaryPredicateSupport.java:60) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.BinaryPredicateSupport.matches(BinaryPredicateSupport.java:50) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.simple.ast.BinaryExpression$5.evaluate(BinaryExpression.java:233) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:37) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:85) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:529) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:497) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:365) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:497) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:209) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:139) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:374) [camel-core-2.19.0.jar:2.19.0]
Caused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: [89784409, 89784410] of type: com.google.common.collect.RegularImmutableSet. Exchange[]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:273) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:189) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:160) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:69) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:212) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:323) ~[camel-core-2.19.0.jar:2.19.0]
{noformat}

but com.google.common.collect.RegularImmutableSet has an isEmpty method (inherited from java.util.AbstractCollection).
","08/May/17 07:54;davsclaus;Thanks for reporting. 

We had 2 RCs of 2.19.0. I suggest next time you spend time testing those ahead of time.
","08/May/17 07:55;davsclaus;And can you build a unit test / sample project that reproduce this, as it seems you use some special map classes.","08/May/17 08:25;pascalschumacher;Sorry, I missed that the problem does not seem to occur with java.util collections. But it occurs for guava collections (which are pretty popular imho).

To reproduce use:

{code:xml}
<dependency>
    <groupId>com.google.guava</groupId>
    <artifactId>guava</artifactId>
    <version>21.0</version>
</dependency>
{code}

{code:java}
import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

import com.google.common.collect.ImmutableSet;

public class AmbiguousMethodCallExceptionTest extends CamelTestSupport {

    public static class AmbiguousMethodCallExceptionRoute extends RouteBuilder {

        @Override
        public void configure() throws Exception {
            from(""seda:in"").choice().when(simple(""${headers.set.size} != 0"")).to(""mock:out"");
        }
    }

    @Produce(uri = ""seda:in"")
    private ProducerTemplate in;

    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint out;

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new AmbiguousMethodCallExceptionRoute();
    }

    @Test
    public void ambiguousMethodCallException() throws Exception {
        out.expectedMessageCount(1);

        ExchangeBuilder exchangeBuilder = new ExchangeBuilder(context).withHeader(""set"", ImmutableSet.of(""a""));
        in.send(exchangeBuilder.build());

        out.assertIsSatisfied();
    }
}
{code}

{code:java}
import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

import com.google.common.collect.ImmutableSet;

public class MethodNotFoundExceptionTest extends CamelTestSupport {

    public static class MethodNotFoundExceptionRoute extends RouteBuilder {

        @Override
        public void configure() throws Exception {
            from(""seda:in"").choice().when(simple(""${headers.set.isEmpty()} != true"")).to(""mock:out"");
        }
    }

    @Produce(uri = ""seda:in"")
    private ProducerTemplate in;

    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint out;

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new MethodNotFoundExceptionRoute();
    }

    @Test
    public void methodNotFoundExceptionException() throws Exception {
        out.expectedMessageCount(1);

        ExchangeBuilder exchangeBuilder = new ExchangeBuilder(context).withHeader(""set"", ImmutableSet.of(""a""));
        in.send(exchangeBuilder.build());

        out.assertIsSatisfied();
    }
}{code}
","08/May/17 17:44;pascalschumacher;This issue can also be replicated with java.util classes, e.g. using LinkedHashSet:

{code}
package test;

import java.util.LinkedHashSet;
import java.util.Set;

import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class AmbiguousMethodCallExceptionTest extends CamelTestSupport {

  public static class AmbiguousMethodCallExceptionRoute extends RouteBuilder {

    @Override
    public void configure() throws Exception {
      from(""seda:in"").choice().when(simple(""${headers.set.size} != 0"")).to(""mock:out"");
    }
  }

  @Produce(uri = ""seda:in"")
  private ProducerTemplate in;

  @EndpointInject(uri = ""mock:out"")
  private MockEndpoint out;

  @Override
  protected RouteBuilder createRouteBuilder() {
    return new AmbiguousMethodCallExceptionRoute();
  }

  @Test
  public void ambiguousMethodCallException() throws Exception {
    out.expectedMessageCount(1);

    Set<String> set = new LinkedHashSet<>();
    set.add(""a"");
    ExchangeBuilder exchangeBuilder = new ExchangeBuilder(context).withHeader(""set"", set);
    in.send(exchangeBuilder.build());

    out.assertIsSatisfied();
  }
}
{code}

{code}
package test;

import java.util.LinkedHashSet;
import java.util.Set;

import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class MethodNotFoundExceptionTest extends CamelTestSupport {

    public static class MethodNotFoundExceptionRoute extends RouteBuilder {

        @Override
        public void configure() throws Exception {
            from(""seda:in"").choice().when(simple(""${headers.set.isEmpty()} != true"")).to(""mock:out"");
        }
    }

    @Produce(uri = ""seda:in"")
    private ProducerTemplate in;

    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint out;

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new MethodNotFoundExceptionRoute();
    }

    @Test
    public void methodNotFoundExceptionException() throws Exception {
        out.expectedMessageCount(1);

        Set<String> set = new LinkedHashSet<>();
        set.add(""a"");
        ExchangeBuilder exchangeBuilder = new ExchangeBuilder(context).withHeader(""set"", set);
        in.send(exchangeBuilder.build());

        out.assertIsSatisfied();
    }
}
{code}",08/May/17 19:06;pascalschumacher;Seems like this was caused by https://github.com/apache/camel/commit/8889b827193d6c5b08c801a4dbb457a43af2f958 / [CAMEL-10396]. When I revert this commit it works again.,08/May/17 20:39;pascalschumacher;I created a new issue for the MethodNotFoundException: https://issues.apache.org/jira/browse/CAMEL-11240,"08/May/17 21:06;pascalschumacher;Simplified example:

{code:java}
package test;

import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class AmbiguousMethodCallExceptionTestSimplified extends CamelTestSupport {

    public static interface InterfaceSize {
        int size();
    }

    public static abstract class AbstractClassSize {
        public abstract int size();
    }

    public static class SuperClazz extends AbstractClassSize implements InterfaceSize {
        public int size() {
            return 1;
        }
    }

    public static class Clazz extends SuperClazz {
    }

    public static class AmbiguousMethodCallExceptionRoute extends RouteBuilder {

        @Override
        public void configure() throws Exception {
            from(""seda:in"").choice().when(simple(""${headers.bean.size} != 0"")).to(""mock:out"");
        }
    }

    @Produce(uri = ""seda:in"")
    private ProducerTemplate in;

    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint out;

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new AmbiguousMethodCallExceptionRoute();
    }

    @Test
    public void ambiguousMethodCallException() throws Exception {
        out.expectedMessageCount(1);

        ExchangeBuilder exchangeBuilder = new ExchangeBuilder(context).withHeader(""bean"", new Clazz());
        in.send(exchangeBuilder.build());

        out.assertIsSatisfied();
    }
}
{code}

fails with:

{noformat}
23:05:37.056 [Camel (camel-1) thread #0 - seda://in] ERROR org.apache.camel.processor.DefaultErrorHandler - Failed delivery for (MessageId: ID-Redhawk-THINK-50474-1494277535444-0-3 on ExchangeId: ID-Redhawk-THINK-50474-1494277535444-0-4). Exhausted after delivery attempt: 1 caught: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: size on null due to: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int test.AmbiguousMethodCallExceptionTestSimplified$InterfaceSize.size(), public abstract int test.AmbiguousMethodCallExceptionTestSimplified$AbstractClassSize.size()]. Exchange[]

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [seda://in                                                                     ] [      1027]
[route1            ] [choice1           ] [when[simple{Simple: ${headers.bean.size} != 0}]choice[]                       ] [        35]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: size on null due to: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int test.AmbiguousMethodCallExceptionTestSimplified$InterfaceSize.size(), public abstract int test.AmbiguousMethodCallExceptionTestSimplified$AbstractClassSize.size()]. Exchange[]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:327)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:115)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:139)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118)
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:2490)
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.builder.BinaryPredicateSupport.matchesReturningFailureMessage(BinaryPredicateSupport.java:60)
	at org.apache.camel.builder.BinaryPredicateSupport.matches(BinaryPredicateSupport.java:50)
	at org.apache.camel.language.simple.ast.BinaryExpression$5.evaluate(BinaryExpression.java:233)
	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:37)
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:85)
	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int test.AmbiguousMethodCallExceptionTestSimplified$InterfaceSize.size(), public abstract int test.AmbiguousMethodCallExceptionTestSimplified$AbstractClassSize.size()]. Exchange[]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:278)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:189)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:160)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:69)
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:212)
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:323)
	... 22 common frames omitted
23:05:37.057 [Camel (camel-1) thread #0 - seda://in] WARN org.apache.camel.component.seda.SedaConsumer - Error processing exchange. Exchange[]. Caused by: [org.apache.camel.language.bean.RuntimeBeanExpressionException - Failed to invoke method: size on null due to: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int test.AmbiguousMethodCallExceptionTestSimplified$InterfaceSize.size(), public abstract int test.AmbiguousMethodCallExceptionTestSimplified$AbstractClassSize.size()]. Exchange[]]
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: size on null due to: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int test.AmbiguousMethodCallExceptionTestSimplified$InterfaceSize.size(), public abstract int test.AmbiguousMethodCallExceptionTestSimplified$AbstractClassSize.size()]. Exchange[]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:327)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:115)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:139)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118)
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:2490)
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.builder.BinaryPredicateSupport.matchesReturningFailureMessage(BinaryPredicateSupport.java:60)
	at org.apache.camel.builder.BinaryPredicateSupport.matches(BinaryPredicateSupport.java:50)
	at org.apache.camel.language.simple.ast.BinaryExpression$5.evaluate(BinaryExpression.java:233)
	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:37)
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:85)
	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int test.AmbiguousMethodCallExceptionTestSimplified$InterfaceSize.size(), public abstract int test.AmbiguousMethodCallExceptionTestSimplified$AbstractClassSize.size()]. Exchange[]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:278)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:189)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:160)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:69)
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:212)
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:323)
	... 22 common frames omitted
{noformat}","20/May/17 11:28;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1703

    CAMEL-11235: Proposal to fix an issue where a method inherited from a superclass overrides a superinterface method

    This PR proposes a fix for [CAMEL-11235](https://issues.apache.org/jira/browse/CAMEL-11235).
    
    Basically, the `BeanInfo` introspection mechanism traverses the single rooted class hierarchy collecting overrides first, and then proceed with interfaces.
    I've also created a new overload of `ObjectHelper.isOverridingMethod(...)` to deal with the case where a method inherited from a class [overrides a superinterface method](https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.8.1).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1703.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1703
    
----
commit 0ddb6a7baf2e092304ec7644b655371bdac28cd5
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-05-20T10:18:57Z

    CAMEL-11235: Resolved an issue where a method inherited from a superclass overrides a superinterface method

commit 3ec1b9e7e302031212794138ea7d977d90e40594
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-05-20T11:13:15Z

    CAMEL-11235: Used the new override from getMethodInfo(...)

----
","20/May/17 13:55;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1703
",20/May/17 14:22;pascalschumacher;Thank you very much for fixing this!,"21/May/17 17:00;davsclaus;Yeah thanks to contribution by
https://github.com/aldettinger",,,,,,,,,,,,,,,,,,,,,
Simple Language: MethodNotFoundException when calling interface method implemented by super class,CAMEL-11240,13070151,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pascalschumacher,pascalschumacher,08/May/17 20:37,20/May/17 13:55,13/Mar/19 22:20,20/May/17 13:55,2.19.0,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,camel-core,,,,,,0,,,,"After updating from 2.18.3 to 2.19.0 this test fails:

{code:java}
package test;

import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class MethodNotFoundExceptionTestSimplified extends CamelTestSupport {

    public static interface InterfaceEmpty {
        boolean isEmpty();
    }

    public static class SuperClazz {
        public boolean isEmpty() {
            return true;
        }
    }

    public static class Clazz extends SuperClazz implements InterfaceEmpty {
    }

    public static class MethodNotFoundExceptionRoute extends RouteBuilder {

        @Override
        public void configure() throws Exception {
            from(""seda:in"").choice().when(simple(""${headers.bean.isEmpty()}"")).to(""mock:out"");
        }
    }

    @Produce(uri = ""seda:in"")
    private ProducerTemplate in;

    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint out;

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new MethodNotFoundExceptionRoute();
    }

    @Test
    public void methodNotFoundExceptionException() throws Exception {
        out.expectedMessageCount(1);

        ExchangeBuilder exchangeBuilder = new ExchangeBuilder(context).withHeader(""bean"", new Clazz());
        in.send(exchangeBuilder.build());

        out.assertIsSatisfied();
    }
}{code}

with:

{noformat}
22:35:38.069 [Camel (camel-1) thread #0 - seda://in] ERROR org.apache.camel.processor.DefaultErrorHandler - Failed delivery for (MessageId: ID-Redhawk-THINK-50332-1494275736472-0-3 on ExchangeId: ID-Redhawk-THINK-50332-1494275736472-0-4). Exhausted after delivery attempt: 1 caught: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: isEmpty() on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: test.MethodNotFoundExceptionTestSimplified$Clazz@61a86839 of type: test.MethodNotFoundExceptionTestSimplified$Clazz. Exchange[]

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [seda://in                                                                     ] [      1025]
[route1            ] [choice1           ] [when[simple{Simple: ${headers.bean.isEmpty()}}]choice[]                       ] [        33]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: isEmpty() on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: test.MethodNotFoundExceptionTestSimplified$Clazz@61a86839 of type: test.MethodNotFoundExceptionTestSimplified$Clazz. Exchange[]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:327)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:115)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:139)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118)
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:2490)
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.support.ExpressionSupport.matches(ExpressionSupport.java:32)
	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:35)
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:85)
	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: test.MethodNotFoundExceptionTestSimplified$Clazz@61a86839 of type: test.MethodNotFoundExceptionTestSimplified$Clazz. Exchange[]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:273)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:189)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:160)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:69)
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:212)
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:323)
	... 20 common frames omitted
22:35:38.070 [Camel (camel-1) thread #0 - seda://in] WARN org.apache.camel.component.seda.SedaConsumer - Error processing exchange. Exchange[]. Caused by: [org.apache.camel.language.bean.RuntimeBeanExpressionException - Failed to invoke method: isEmpty() on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: test.MethodNotFoundExceptionTestSimplified$Clazz@61a86839 of type: test.MethodNotFoundExceptionTestSimplified$Clazz. Exchange[]]
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: isEmpty() on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: test.MethodNotFoundExceptionTestSimplified$Clazz@61a86839 of type: test.MethodNotFoundExceptionTestSimplified$Clazz. Exchange[]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:327)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:115)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:139)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118)
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:2490)
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.support.ExpressionSupport.matches(ExpressionSupport.java:32)
	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:35)
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:85)
	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: test.MethodNotFoundExceptionTestSimplified$Clazz@61a86839 of type: test.MethodNotFoundExceptionTestSimplified$Clazz. Exchange[]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:273)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:189)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:160)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:69)
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:212)
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:323)
	... 20 common frames omitted
{noformat}

This is a simplified example, a real example are java.util.LinkedHashSet#isEmpty and isEmpty methods of guava collection classes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-05-08 20:37:44.0,,,,,,,0|i3enuf:,9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-grpc producer incorrectly called async services,CAMEL-11288,13072502,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,dmvolod,dmvolod,16/May/17 15:53,17/May/17 07:38,13/Mar/19 22:20,17/May/17 07:30,2.19.0,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,camel-grpc,,,,,,0,,,,Error occurs when calling procedures with async (stream incoming and outgoing parameters). This is not handled as expected.   ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-16 16:24:56.12,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed May 17 07:38:05 UTC 2017,,,,,,,0|i3f2br:,9223372036854775807,,,,,,,,,,"16/May/17 16:24;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/1699

    CAMEL-11288: camel-grpc producer incorrectly called async services

    The unit-tests are also completely rewritten

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-11288

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1699.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1699
    
----
commit 98ed3f8460fcaf70b5f843fdb019b35b2c123e56
Author: Dmitry Volodin <dmvolod@gmail.com>
Date:   2017-05-16T16:09:09Z

    CAMEL-11288: camel-grpc producer incorrectly called async services

----
",16/May/17 16:28;dmvolod;It would be nice to backport this issue to the 2.19.1 after merge,"17/May/17 07:38;githubbot;Github user dmvolod closed the pull request at:

    https://github.com/apache/camel/pull/1699
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MDC routeId value is lost after calling a direct route from a transacted route,CAMEL-11287,13072475,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/May/17 14:44,16/May/17 14:53,13/Mar/19 22:20,16/May/17 14:53,2.18.3,,,,,,,,,,,,,,,2.18.4,2.19.1,2.20.0,,,camel-core,,,,,,0,,,,There is a little bug in MDCUnitOfWork that causes this problem,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-05-16 14:44:05.0,,,,,,,0|i3f25r:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hystrix-starter - The circuitBreakerForceClose option is default true which should be false,CAMEL-11283,13072374,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/May/17 09:33,16/May/17 10:50,13/Mar/19 22:20,16/May/17 10:50,2.19.0,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,camel-hystrix,camel-spring-boot-starters,,,,,0,,,,It was a wrong default value,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue May 16 09:34:27 UTC 2017,,,,,,,0|i3f1jb:,9223372036854775807,,,,,,,,,,16/May/17 09:34;davsclaus;This is the spring boot starter that has the wrong default which it reads from the model and is generated as part of its starter source code,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring is not usable in an osgi-context,CAMEL-11281,13071950,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,guyv,guyv,15/May/17 11:20,16/May/17 09:46,13/Mar/19 22:20,16/May/17 08:42,2.18.0,2.18.1,2.18.2,2.18.3,2.19.0,,,,,,,,,,,2.18.4,2.19.1,2.20.0,,,camel-spring,,,,,,0,,,,"When using camel-spring in an osgi-context with xml-based spring config, following exception occurs: 

org.springframework.beans.factory.BeanDefinitionStoreException: Failed to create the JAXB binder; nested exception is javax.xml.bind.JAXBException: Provider com.sun.xml.internal.bind.v2.ContextFactory could not be instantiated: javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index
 - with linked exception:
[javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index]
	at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:380) ~[?:?]
	at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:85) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:61) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:74) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1411) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1401) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:168) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:138) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:94) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:508) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:392) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:217) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:188) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.eclipse.gemini.blueprint.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:170) ~[?:?]
	at org.eclipse.gemini.blueprint.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:140) ~[?:?]
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129) ~[64:org.apache.servicemix.bundles.spring-context:4.2.6.RELEASE_1]
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:609) ~[64:org.apache.servicemix.bundles.spring-context:4.2.6.RELEASE_1]
	at org.eclipse.gemini.blueprint.context.support.AbstractDelegatedExecutionApplicationContext.access$800(AbstractDelegatedExecutionApplicationContext.java:60) ~[58:org.eclipse.gemini.blueprint.core:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.context.support.AbstractDelegatedExecutionApplicationContext$3.run(AbstractDelegatedExecutionApplicationContext.java:242) ~[58:org.eclipse.gemini.blueprint.core:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85) ~[58:org.eclipse.gemini.blueprint.core:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:220) ~[58:org.eclipse.gemini.blueprint.core:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:224) [49:org.eclipse.gemini.blueprint.extender:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:177) [49:org.eclipse.gemini.blueprint.extender:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:157) [58:org.eclipse.gemini.blueprint.core:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.extender.internal.activator.LifecycleManager$1.run(LifecycleManager.java:207) [49:org.eclipse.gemini.blueprint.extender:2.0.0.RELEASE]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:?]
	at java.lang.Thread.run(Thread.java:745) [?:?]
Caused by: javax.xml.bind.JAXBException: Provider com.sun.xml.internal.bind.v2.ContextFactory could not be instantiated: javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:146) ~[?:?]
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:356) ~[?:?]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:431) ~[?:?]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:394) ~[?:?]
	at org.apache.camel.impl.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:31) ~[?:?]
	at org.apache.camel.spring.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:217) ~[?:?]
	at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:378) ~[?:?]
	... 30 more
Caused by: javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index
	at com.sun.xml.internal.bind.v2.ContextFactory.createContext(ContextFactory.java:266) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:?]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:171) ~[?:?]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:131) ~[?:?]
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:356) ~[?:?]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:431) ~[?:?]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:394) ~[?:?]
	at org.apache.camel.impl.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:31) ~[?:?]
	at org.apache.camel.spring.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:217) ~[?:?]
	at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:378) ~[?:?]
	... 30 moresun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:?]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:171) ~[?:?]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:131) ~[?:?]
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:356) ~[?:?]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:431) ~[?:?]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:394) ~[?:?]
	at org.apache.camel.impl.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:31) ~[?:?]
	at org.apache.camel.spring.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:217) ~[?:?]
	at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:378) ~[?:?]
	... 30 more


The reason is the fact that not all packages defined in:

org.apache.camel.model.Constants.JAXB_CONTEXT_PACKAGES

are listed as Import-Package in the MANIFEST.MF",osgi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-15 11:33:37.985,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Tue May 16 09:46:42 UTC 2017,,,,,,,0|i3eyxb:,9223372036854775807,,,,,,,,,,15/May/17 11:33;davsclaus;spring-dm is dead and should not be used.,"15/May/17 11:45;guyv;We are not using spring-dm at all, but blueprint with additional spring-config","15/May/17 11:57;davsclaus;Okay then try to create a PR where you add all the model packages as imports to the pom.xml
https://github.com/apache/camel/blob/master/components/camel-spring/pom.xml#L36","15/May/17 13:24;githubbot;GitHub user guyv opened a pull request:

    https://github.com/apache/camel/pull/1698

    CAMEL-11281: added org.apache.camel.model.Constants.JAXB_CONTEXT_PACK…

    …AGES to Import-Package osgi header

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/guyv/camel CAMEL-11281

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1698.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1698
    
----

----
",15/May/17 13:26;guyv;Thanks! Done: https://github.com/apache/camel/pull/1698,"16/May/17 08:34;davsclaus;Thanks they are imported now
{code}
org.apache.camel.model.config                │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
org.apache.camel.model.dataformat            │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
org.apache.camel.model.language              │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
org.apache.camel.model.loadbalancer          │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
org.apache.camel.model.remote                │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
org.apache.camel.model.rest                  │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
org.apache.camel.model                       │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
{code}","16/May/17 08:38;davsclaus;And for 2.19.x there are more packages
{code}
org.apache.camel.model.cloud                 │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.config                │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.dataformat            │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.language              │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.loadbalancer          │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.rest                  │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.transformer           │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.validator             │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model                       │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
{code}","16/May/17 09:46;githubbot;Github user guyv closed the pull request at:

    https://github.com/apache/camel/pull/1698
",,,,,,,,,,,,,,,,,,,,,,,,,
camel-twitter : hard-coded component scheme,CAMEL-11280,13071928,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,15/May/17 09:08,15/May/17 11:42,13/Mar/19 22:20,15/May/17 09:33,,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,camel-twitter,,,,,,0,,,,"The camel twitter component parses the uri assuming the component has twitter as as scheme which is correct in most of the cases but could fail if one would pre-configure a number of twitter components:

{code:xml}
<bean id=""tw-account-1"" class=""rg.apache.camel.component.twitter.TwitterComponent"">
  <property name=""accessToken"" value=""tokenForAccount1""/>
</bean>

<bean id=""tw-account-2"" class=""rg.apache.camel.component.twitter.TwitterComponent"">
  <property name=""accessToken"" value=""tokenForAccount2""/>
</bean>

<camelContext>
  <route>
    <from uri=""tw-account-1:search""/>  
    ...
  </rute>
  <route>
    <from uri=""tw-account-2:timeline/mentions""/>  
    ...
  </rute>
<camelContext/>
{code}

Relevant code:
- https://github.com/apache/camel/blob/master/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/TwitterHelper.java#L43-L44
- https://github.com/apache/camel/blob/master/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/TwitterHelper.java#L156-L161
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-05-15 09:08:55.0,,,,,,,0|i3eysf:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jpa consumer fails to poll after database connection is lost,CAMEL-11197,13066658,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jamestr,jamestr,25/Apr/17 11:45,13/May/17 09:02,13/Mar/19 22:20,13/May/17 09:02,2.17.1,,,,,,,,,,,,,,,2.17.7,2.18.4,2.19.0,,,camel-jpa,,,,,,0,,,,"Under a Hibernate JPA implementation with a Tomcat Connection pool set to test connections ""on borrow"", the camel-jpa consumer would poll normally until the underlying database connection was lost and then continue to report a PersistenceException at each poll.

The entityManager instance in camel-jpa needs to be closed and rebuilt in order to force a new connection to be obtained from the connection pool.

",Hibernate JPA with Tomcat Connection Pool data source,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-26 17:09:09.961,,,no_permission,,Unknown,,,,Patch,,,,,,,,,9223372036854775807,,,Sat May 13 09:02:06 UTC 2017,,,Patch Available,,,,0|i3e2af:,9223372036854775807,,,,,,,,,,25/Apr/17 11:45;jamestr;Patch available:  https://github.com/apache/camel/pull/1658,25/Apr/17 11:53;jamestr;Discussion and stack trace at http://camel.465427.n5.nabble.com/camel-jpa-and-PersistenceException-tp5795205.html,26/Apr/17 17:09;davsclaus;Need to merge to 2.19.x branch after the release,26/Apr/17 17:13;davsclaus;Thanks for the PR,"26/Apr/17 18:00;githubbot;Github user jamesET closed the pull request at:

    https://github.com/apache/camel/pull/1658
",13/May/17 09:02;davsclaus;We re-cut 2.19.0 so its included.,,,,,,,,,,,,,,,,,,,,,,,,,,,
URISupport sanitizeUri partial support for RAW(),CAMEL-11269,13071545,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,paolo.antinori,paolo.antinori,paolo.antinori,12/May/17 14:07,13/May/17 08:26,13/Mar/19 22:20,13/May/17 08:10,2.19.0,,,,,,,,,,,,,,,2.17.7,2.18.4,2.19.1,2.20.0,,camel-core,,,,,,0,,,,"The usage of {{&}} symbol in a password wrapped by {{RAW()}} function breaks the masking of the password.

The result of this is a partial leak of the clear text password.

See this example:

{{password=RAW(abc&SUFFIX)}} is translated into {{password=xxxxxx&SUFFIX}}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-12 14:12:09.842,,,no_permission,,Unknown,,,https://issues.jboss.org/browse/ENTESB-6796,,,,,,,,,,9223372036854775807,,,Sat May 13 08:26:07 UTC 2017,,,Patch Available,,,,0|i3ewfb:,9223372036854775807,,,,,,,,,,"12/May/17 14:12;githubbot;GitHub user paoloantinori opened a pull request:

    https://github.com/apache/camel/pull/1690

    CAMEL-11269 - fix for URISupport and masking secrets

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paoloantinori/camel CAMEL-11269

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1690.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1690
    
----
commit 84ed271308af0d4d624a3636d85071f70c62c762
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2017-05-12T14:09:52Z

    CAMEL-11269 - fix for URISupport and masking secrets

----
","13/May/17 08:26;githubbot;Github user paoloantinori closed the pull request at:

    https://github.com/apache/camel/pull/1690
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Infinite recursion if exception happens inside exception handler,CAMEL-11229,13069149,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chris@die-schneider.net,chris@die-schneider.net,04/May/17 14:00,11/May/17 20:30,13/Mar/19 22:20,11/May/17 20:30,2.18.3,,,,,,,,,,,,,,,2.18.4,2.19.1,2.20.0,,,camel-core,,,,,,0,,,,"Use an onException handler like this:

onException(Throwable.class).to(""direct:handle_er"");
from(""direct:handle_er"")..throwException(new RuntimeException());

If the main route throws an exception then this will create an infinite recursion of exceptions.

I would expect that camel handles the exception inside an onException handler differently. So the onException is not called again.

",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11255,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-11 11:22:12.923,,,no_permission,,Advanced,,,,,,,,,,,,,9223372036854775807,,,Thu May 11 11:22:12 UTC 2017,,,,,,,0|i3ehnz:,9223372036854775807,,,,,,,,,,"11/May/17 11:22;davsclaus;Thanks Christian for the initial work and reporting.

It was a bit of rare issue since it has been working list this in Camel for many many years, so its a combo when you did as you did.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Curcular dependency from buildtools to buildtools via license-plugin,CAMEL-11251,13070434,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,09/May/17 14:27,09/May/17 22:32,13/Mar/19 22:20,09/May/17 22:32,,,,,,,,,,,,,,,,,,,,,build system,,,,,,0,,,,"With CAMEL-11194 a circular dependency from buildtools to buildtools via license-plugin has been introduced.

Can be observed when running {{mvn -X compile}} in {{buildingtools}}:

{code}
[DEBUG] Populating class realm plugin>com.mycila:license-maven-plugin:3.0
[DEBUG]   Included: com.mycila:license-maven-plugin:jar:3.0
[DEBUG]   Included: org.apache.camel:camel-buildtools:jar:2.20.0-SNAPSHOT
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue May 09 22:32:24 UTC 2017,,,,,,,0|i3eplb:,9223372036854775807,,,,,,,,,,09/May/17 22:32;zregvart;Mycila Maven license plugin moved to separate profile to remove the circular dependency.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock in component creation ,CAMEL-11225,13068672,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,03/May/17 07:45,09/May/17 11:14,13/Mar/19 22:20,09/May/17 11:14,,,,,,,,,,,,,,,,2.18.4,2.19.1,2.20.0,,,camel-core,camel-spring,,,,,0,,,,"There are circumstances in which the component creation could enter in a deadlock, let's have a look at the following spring example:  

{code:xml}
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
 
  <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
    <route id=""twitter-route"">
      <from id=""twitter"" uri=""twitter://timeline/home?type=polling""/>
      <log id=""route-log"" message=""Got ${body}""/>
    </route>
  </camelContext>
 
</beans>
{code}

The critical part is:

{code:xml}
  <from id=""twitter"" uri=""twitter://timeline/home?type=polling""/>
{code}

What happens is that:
- because there is an id, camel registers a CamelEndpointFactoryBean to the spring application contex
- the endpoint is then resolved which involve the  instantiation of the component (twitter in this case) which invoke CamelContext.getComponent
- when the component is being created it then uses the component resolver which goes down to the registry to find out if the requested component is already there
- as in the registry there is a bean factory with the same name as the component we want to create, spring invokes the factory which then goes down to CamelContext.getComponent
- then deadlock ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-05-03 07:45:05.0,,,,,,,0|i3eepz:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple expression colon in sql-stored component,CAMEL-11227,13068789,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,snurmine,snurmine,03/May/17 14:36,08/May/17 14:26,13/Mar/19 22:20,08/May/17 12:35,,,,,,,,,,,,,,,,2.18.4,2.19.1,2.20.0,,,camel-sql,,,,,,0,,,,"Simple expression in sql-stored does not support colon
See for details 
https://stackoverflow.com/questions/43607569/simple-expression-in-sql-stored-component",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-08 12:35:57.634,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon May 08 14:26:48 UTC 2017,,,,,,,0|i3effz:,9223372036854775807,,,,,,,,,,04/May/17 15:01;snurmine;https://github.com/apache/camel/pull/1673,08/May/17 12:35;davsclaus;Thanks for the PR,"08/May/17 14:26;githubbot;Github user snurmine closed the pull request at:

    https://github.com/apache/camel/pull/1673
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-netty4-http cannot have a URL larger than 409 bytes by default, rather than the assumed 4096 byte limit",CAMEL-11221,13068083,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,wayne.gilbert,wayne.gilbert,01/May/17 06:44,08/May/17 13:04,13/Mar/19 22:20,08/May/17 12:47,2.18.3,,,,,,,,,,,,,,,2.18.4,2.19.1,2.20.0,,,camel-netty4-http,,,,,,0,,,,"https://github.com/apache/camel/blob/camel-2.19.x/components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/HttpServerSharedInitializerFactory.java

In function ""initChannel"" the call to new request decoder

pipeline.addLast(""decoder"", new HttpRequestDecoder(409, configuration.getMaxHeaderSize(), 8192));

409, should probably be 4096,

This is set when using the init-method start on the bean below:

	<spring:bean id=""httpServer"" class=""org.apache.camel.component.netty4.http.DefaultNettySharedHttpServer""
          init-method=""start"" destroy-method=""stop"">
		<spring:property name=""nettyServerBootstrapConfiguration"" ref=""configuration""/>
	</spring:bean>",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-04 13:47:06.601,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Mon May 08 13:04:25 UTC 2017,,,,,,,0|i3eb33:,9223372036854775807,,,,,,,,,,"01/May/17 06:56;wayne.gilbert;Just to add more detail to this, basically when the URL is large, then it attempts to match the URL, it ends up matching on a URL of /bad-request vs the routes in the context, so never matches and returns a 404.","04/May/17 13:47;davsclaus;Yes it should be 4096. You are welcome to provide a fix as a github PR
https://github.com/apache/camel/","08/May/17 08:39;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1677

    CAMEL-11221- fix typo

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11221

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1677.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1677
    
----
commit 57247f888158fb39d29c569f161d6674cce997a6
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-08T08:38:18Z

    CAMEL-11221- fix typo

----
",08/May/17 12:47;davsclaus;Thanks for reporting and the PR,"08/May/17 13:04;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1677
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-reactive-streams - Cannot create service in spring-boot,CAMEL-11201,13067013,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,26/Apr/17 10:34,04/May/17 14:05,13/Mar/19 22:20,04/May/17 14:05,2.19.0,,,,,,,,,,,,,,,2.19.0,,,,,camel-reactive-streams,,,,,,0,,,,"I've tried to run a reactive streams application on the preview of v. 2.19.0 and found a deadlock while instantiating the reactive-streams service (the starter code and the CamelReactiveStreams class wait one for the other).

It's strange, since the reactive streams examples are based on spring-boot. I'm investigating. This may require a new release of camel 2.19.0.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu May 04 14:05:12 UTC 2017,,,,,,,0|i3e4hb:,9223372036854775807,,,,,,,,,,"26/Apr/17 13:04;nferraro;The problem happens whenever the user decide not to use the CamelReactiveStreamService, i.e. not injecting it in any managed bean. The examples worked because it was Autowired somewhere in the code. Even if it's injected in the code, sometimes (depending on the creation order of beans in the registry) it is not created in the expected order and prevents the application startup.  

This has been fixed in the master branch, but I think it's important to have it in 2.19.0.",04/May/17 14:05;nferraro;The fix is present in the 2.19.0 CR.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CoAP component starts redundant server instance,CAMEL-11177,13065525,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,jamesnetherton,jamesnetherton,20/Apr/17 12:57,21/Apr/17 07:20,13/Mar/19 22:20,21/Apr/17 07:20,2.18.3,2.19.0,,,,,,,,,,,,,,2.19.0,,,,,camel-coap,,,,,,0,,,,"If I configure a simple camel-coap consumer endpoint like:

{code}
from(""coap://localhost:8080/foo"")
{code}

Logging reveals that two server instances were started:

{code}
[org.eclipse.californium.core.network.CoapEndpoint] (pool-3-thread-1) Stopping endpoint at address 0.0.0.0/0.0.0.0:52697
[org.eclipse.californium.core.network.CoapEndpoint] (pool-3-thread-1) Stopping endpoint at address 0.0.0.0/0.0.0.0:8080 
{code}

[This|https://github.com/apache/camel/blob/master/components/camel-coap/src/main/java/org/apache/camel/coap/CoAPComponent.java#L148-L153] appears to be the logic that causes the behaviour. 

Do we need it? It seems to be a duplicate of what already happens in {{createConsumer()}}. Also, the creation of a default server can easily be done in the {{createServer()}} method, I don't think we need it in {{doStart()}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-20 13:46:39.593,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 21 07:19:07 UTC 2017,,,,,,,0|i3dvb3:,9223372036854775807,,,,,,,,,,"20/Apr/17 13:46;davsclaus;Yeah that code seems odd, you are welcome to provide a PR","20/Apr/17 15:55;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1647

    CAMEL-11177: CoAP component starts redundant server instance

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-11177

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1647.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1647
    
----
commit 0ff5785a9e6034d8452cb1021b054211955ccebb
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2017-04-20T15:31:54Z

    CAMEL-11177: CoAP component starts redundant server instance

----
","21/Apr/17 07:19;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1647
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Integration tests for camel-restdsl-swagger-plugin fail on JDK 9,CAMEL-11173,13065437,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,20/Apr/17 08:31,20/Apr/17 18:03,13/Mar/19 22:20,20/Apr/17 18:03,2.19.0,,,,,,,,,,,,,,,2.19.0,,,,,tooling,,,,,,0,,,,"The integration tests when run on JDK 9 fail with:
{code}
[INFO] --- maven-invoker-plugin:2.0.0:verify (integration-test) @ camel-restdsl-swagger-plugin ---
[INFO] -------------------------------------------------
[INFO] Build Summary:
[INFO]   Passed: 0, Failed: 2, Errors: 0, Skipped: 0
[INFO] -------------------------------------------------
[ERROR] The following builds failed:
[ERROR] *  simple/pom.xml
[ERROR] *  customized/pom.xml
{code}

See [build 185|https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.notest.java9/185/org.apache.camel$camel-restdsl-swagger-plugin/console]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 20 18:03:40 UTC 2017,,,,,,,0|i3durj:,9223372036854775807,Unit Test Broken,,,,,,,,,"20/Apr/17 08:44;zregvart;This is OK on in my environment, I run:
{code}
$ docker run -it -v $HOME/.m2:/tmp/.m2:z -v `pwd`:/w:z -u $(id -u):$(id -u):$(id -g) -e HOME=/tmp -e USER=$(whoami) -e MAVEN_OPTS=""-Xms3072m -Xmx3072m -Dmaven.artifact.threads=5 -Duser.home=/tmp"" docker.io/maven:3.5.0-jdk-9 bash
I have no name!@...:/$ cd /w/tooling/maven/camel-restdsl-swagger-plugin
I have no name!@...:/w/tooling/maven/camel-restdsl-swagger-plugin$ mvn clean verify
{code}

Let's wait for the CI to pass to resolve this.",20/Apr/17 18:03;zregvart;Fixed and verified in CI (see [build 189|https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.notest.java9/189/org.apache.camel$camel-restdsl-swagger-plugin/console]),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassNotFoundException may silently be ignored in InProducer,CAMEL-11139,13063455,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,12/Apr/17 12:18,13/Apr/17 08:46,13/Mar/19 22:20,12/Apr/17 19:02,2.18.3,,,,,,,,,,,,,,,2.17.7,2.18.4,2.19.0,,,camel-core,,,,,,0,,,,"[ProducerCache.doInProducer()|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java#L348] may be called with null exchange. 

The javadoc says

{code}
    /**
     * Sends an exchange to an endpoint using a supplied callback, using the synchronous processing.
     * <p/>
     * If an exception was thrown during processing, it would be set on the given Exchange
     *
     * @param endpoint  the endpoint to send the exchange to
     * @param exchange  the exchange, can be <tt>null</tt> if so then create a new exchange from the producer
     * @param pattern   the exchange pattern, can be <tt>null</tt>
     * @param callback  the callback
     * @return the response from the callback
     * @see #doInAsyncProducer(org.apache.camel.Endpoint, org.apache.camel.Exchange, org.apache.camel.ExchangePattern, org.apache.camel.AsyncCallback, org.apache.camel.AsyncProducerCallback)
     */
    public <T> T doInProducer(Endpoint endpoint, Exchange exchange, ExchangePattern pattern, ProducerCallback<T> callback) {
{code}

The exchange is however never created, which may result in a null return from ProducerTemplate and a possible exception silently being ignored.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-12 13:13:42.65,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 13 08:46:05 UTC 2017,,,,,,,0|i3dj4v:,9223372036854775807,,,,,,,,,,"12/Apr/17 13:13;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1618

    [CAMEL-11139] ClassNotFoundException may silently be ignored in InPro…

    …ducer

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11139

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1618.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1618
    
----
commit e321440dd1b68c93293958343cbcce722c6b0943
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-04-12T12:43:39Z

    [CAMEL-11139] ClassNotFoundException may silently be ignored in InProducer

----
","12/Apr/17 13:14;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1619

    [CAMEL-11139] ClassNotFoundException may silently be ignored in InPro…

    …ducer

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11139m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1619.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1619
    
----
commit a8ff1af635ef982facdba7863c22a0d113153edb
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-04-12T12:43:39Z

    [CAMEL-11139] ClassNotFoundException may silently be ignored in InProducer

----
",12/Apr/17 19:02;davsclaus;Thanks for the PR,"13/Apr/17 08:45;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1619
","13/Apr/17 08:46;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1618
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConsumerTemplate - If cache is full then polling consumer should be stopped to not leak resources,CAMEL-11138,13063438,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Apr/17 10:25,12/Apr/17 11:00,13/Mar/19 22:20,12/Apr/17 11:00,2.17.6,2.18.3,,,,,,,,,,,,,,2.17.7,2.18.4,2.19.0,,,camel-core,,,,,,0,,,,"When using consumer template with polling consumer and when you are done using it, its put back into the cache, but if the cache is full, then we should stop the consumer so it does not dangle and its resources are not released, such as threads etc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-04-12 10:25:23.0,,,,,,,0|i3dj13:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http4 - Unable to configure https4 properties in spring-boot,CAMEL-11134,13063208,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,11/Apr/17 14:15,11/Apr/17 16:17,13/Mar/19 22:20,11/Apr/17 16:17,,,,,,,,,,,,,,,,2.19.0,,,,,camel-http4,,,,,,0,,,,"The https4 component is not published in the registry, so the configuration added through application.properties does not change the component behavior.

There are two tests in camel-jetty9-starter and camel-netty4-http-starter currently @Ignored because of this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 11 16:17:58 UTC 2017,,,,,,,0|i3dhlz:,9223372036854775807,,,,,,,,,,"11/Apr/17 16:17;nferraro;There was a issue in the mojo and also the metadata were reporting the schema being ""http4s"". The correct schema is ""https4"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timer consumer - Should call start/stop of the processor,CAMEL-11131,13062884,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Apr/17 12:49,10/Apr/17 13:53,13/Mar/19 22:20,10/Apr/17 13:53,2.17.6,2.18.3,,,,,,,,,,,,,,2.17.7,2.18.4,2.19.0,,,camel-core,,,,,,0,,,,Because it does some special logic as part of start/stop it forgets to do a super call so the processor lifecycle is called as well.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-04-10 12:49:24.0,,,,,,,0|i3dfmn:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot parse CSV record starting with separator character,CAMEL-11065,13058945,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,livthomas,livthomas,24/Mar/17 16:36,09/Apr/17 08:27,13/Mar/19 22:20,09/Apr/17 08:27,2.18.3,,,,,,,,,,,,,,,2.18.4,2.19.0,,,,camel-bindy,,,,,,0,,,,"Camel Bindy is not able to parse a CSV file where one value starts with a separator character. Example of such a record:

{code}
'text1',',text2',3
{code}

And the Java class used:

{code:title=Bar.java|borderStyle=solid}
@CsvRecord(separator = "","", quote = ""'"")
public class Record {

    @DataField(pos = 1)
    private String text1;

    @DataField(pos = 2)
    private String text2;

    @DataField(pos = 3, pattern = ""########.##"")
    private BigDecimal number;

}
{code}

You will get an exception like this:
{code}
java.lang.IllegalArgumentException: Parsing error detected for field defined at the position: 3, line: 1
	at org.apache.camel.dataformat.bindy.BindyCsvFactory.bind(BindyCsvFactory.java:213)
	at org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat.unmarshal(BindyCsvDataFormat.java:173)
	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:69)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:681)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:609)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:238)
	at org.apache.camel.processor.Splitter.process(Splitter.java:108)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:460)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:227)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:191)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:175)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:102)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.NumberFormatException: null
	at java.math.BigDecimal.<init>(BigDecimal.java:494)
	at java.math.BigDecimal.<init>(BigDecimal.java:383)
	at java.math.BigDecimal.<init>(BigDecimal.java:806)
	at org.apache.camel.dataformat.bindy.format.factories.BigDecimalPatternFormatFactory$BigDecimalPatternFormat.parse(BigDecimalPatternFormatFactory.java:66)
	at org.apache.camel.dataformat.bindy.format.factories.BigDecimalPatternFormatFactory$BigDecimalPatternFormat.parse(BigDecimalPatternFormatFactory.java:49)
	at org.apache.camel.dataformat.bindy.BindyCsvFactory.bind(BindyCsvFactory.java:209)
	... 37 common frames omitted
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-28 08:34:25.714,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sun Apr 09 08:27:35 UTC 2017,,,,,,,0|i3crbz:,9223372036854775807,,,,,,,,,,28/Mar/17 08:34;davsclaus;Contributions is welcome to try to fix this,"06/Apr/17 19:02;githubbot;GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/1605

    CAMEL-11065 Cannot parse CSV record starting with separator character

    Changed Camel Bindy BindyCsvDataFormat#unquoteTokens function.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-11065

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1605.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1605
    
----
commit 6fd52ca300ec041e481773d675828521ce3d21a0
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2017-04-06T18:57:57Z

    CAMEL-11065 Cannot parse CSV record starting with separator character
    Changed Camel Bindy BindyCsvDataFormat#unquoteTokens function.

----
",09/Apr/17 07:58;davsclaus;Thanks for reporting and the PR,"09/Apr/17 07:58;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1605
",09/Apr/17 08:27;davsclaus;Thanks the PR has been merged,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel catalog's asEndpointUri mangles endpoint URIs for unequal number of tokens,CAMEL-11113,13061732,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,05/Apr/17 13:17,06/Apr/17 11:08,13/Mar/19 22:20,06/Apr/17 11:01,,,,,,,,,,,,,,,,2.19.0,,,,,camel-catalog,camel-core,,,,,0,,,,"When used with unequal number of tokens vs parameters the CamelCatalog {{asEndpointUri}} can drop extra of the tokens.

For instance if used with {{rest}} component and {{uriTemplate}} containing template placeholders, expected endpoint URI should be:

{code:java}
""rest:GET:/path:/template/{param}""
{code}

but it ends up being:
{code:java}
""rest:GET:/path:/template/{param""
{code}

as the number of tokens ({{:}}, {{:/}}, {{:/}}, {{&#123;}}, {{&#125;}}) is 5, and the number of properties specified ({{rest}}, {{GET}}, {{/path}}, {{/template/&#123;param&#125;}}) is 4
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-05 14:03:37.779,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 06 11:08:30 UTC 2017,,,,,,,0|i3d8iv:,9223372036854775807,,,,,,,,,,"05/Apr/17 14:03;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1598

    CAMEL-11113 Camel catalog's asEndpointUri mangles endpoint URIs for unequal number of tokens

    **Work in progress, please don't merge**
    
    This illustrates a number of issues when constructing the endpoint URI from Camel catalog.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-11113

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1598.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1598
    
----
commit 9780195a4da306373d874552e92f9b0c80e8e3c5
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-04-05T14:01:33Z

    CAMEL-11113 added unit tests

----
",06/Apr/17 09:51;davsclaus;Thanks for the test case I am working on a fix,"06/Apr/17 11:01;davsclaus;There is a fix now, and I added a TODO to revisit the logic in the future","06/Apr/17 11:08;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1598
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sql - allow using the $simple{} syntax for query arguments,CAMEL-11106,13061422,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,04/Apr/17 12:46,05/Apr/17 14:21,13/Mar/19 22:20,05/Apr/17 14:21,2.18.3,,,,,,,,,,,,,,,2.18.4,,,,,camel-sql,,,,,,0,,,,"The $simple{} syntax is useful to avoid clash with spring property placeholders. The camel-sql component does not recognize it, so when users create endpoints like:

{code}
<to id=""_to1"" uri=""sql:select * from accounts where customerid = :#${header.xxx}?dataSource=dataSource""/>
{code}

I.e. use the id field and the ""${header.xxx}"" syntax, spring tries to find a property named ""header.xxx"" and crashes.

We should allow writing:
{code}
<to id=""_to1"" uri=""sql:select * from accounts where customerid = :#$simple{header.xxx}?dataSource=dataSource""/>
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-04-04 12:46:53.0,,,,,,,0|i3d6lz:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FacebookEndpointConfiguration bean not taken into account as a UriParam,CAMEL-11098,13060715,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,jpoth,jpoth,31/Mar/17 15:42,05/Apr/17 11:39,13/Mar/19 22:20,31/Mar/17 19:31,,,,,,,,,,,,,,,,2.19.0,,,,,camel-facebook,,,,,,0,,,,[FacebookEndpointConfiguration|https://github.com/apache/camel/blob/e3ec108c871058c840f99a7fcfd06d8807b6da85/components/camel-facebook/src/main/java/org/apache/camel/component/facebook/FacebookEndpoint.java#L67] is not taken into account when specified as a UriParam. I can provide a PR.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-31 15:46:10.246,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 05 11:39:22 UTC 2017,,,,,,,0|i3d28v:,9223372036854775807,,,,,,,,,,"31/Mar/17 15:46;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1588

    CAMEL-11098: lets make FacebookEndpointConfiguration UriParam work by…

    … adding a setter for the field
    
    https://issues.apache.org/jira/browse/CAMEL-11098

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-11098

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1588.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1588
    
----
commit 13ca9ba293572502d0e0462c5110673076a85bca
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-31T15:44:09Z

    CAMEL-11098: lets make FacebookEndpointConfiguration UriParam work by adding a setter for the field

----
",31/Mar/17 19:31;zregvart;Merged into {{master}} from https://github.com/apache/camel/pull/1588.,"05/Apr/17 11:39;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1588
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
REST component host parameter handling,CAMEL-11110,13061677,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,05/Apr/17 09:33,05/Apr/17 09:38,13/Mar/19 22:20,05/Apr/17 09:38,2.19.0,,,,,,,,,,,,,,,2.19.0,,,,,camel-core,,,,,,0,,,,"The REST component tries to resolve the {{host}} parameter as a reference even if it's not in reference syntax, i.e. concrete value. So if set to {{http://...}} the component tries to resolve a bean reference with name {{http://...}}..",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 05 09:38:28 UTC 2017,,,,,,,0|i3d86n:,9223372036854775807,,,,,,,,,,05/Apr/17 09:38;zregvart;Using {{getAndRemoveOrResolveReferenceParameter}} instead of {{resolveAndRemoveReferenceParameter}} fixes this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when defaultValueProvider not given,CAMEL-11093,13060323,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,30/Mar/17 10:29,31/Mar/17 08:00,13/Mar/19 22:20,31/Mar/17 08:00,,,,,,,,,,,,,,,,2.19.0,,,,,camel-core,camel-rabbitmq,,,,,0,,,,"{code}
Caused by: java.lang.NullPointerException
	at org.apache.camel.impl.DefaultMessage.getHeader(DefaultMessage.java:71)
	at org.apache.camel.impl.DefaultMessage.getHeader(DefaultMessage.java:126)
	at org.apache.camel.component.rabbitmq.RabbitMQProducer.processInOnly(RabbitMQProducer.java:248)
	at org.apache.camel.component.rabbitmq.RabbitMQProducer.process(RabbitMQProducer.java:190)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-30 11:00:05.834,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 31 08:00:40 UTC 2017,,,,,,,0|i3cztr:,9223372036854775807,,,,,,,,,,"30/Mar/17 11:00;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1584

    [CAMEL-11093] NPE when defaultValueProvider not given

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11093

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1584.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1584
    
----
commit b5b3cbd1d539749c6823dfab91b166151ec154e5
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-03-30T10:58:46Z

    [CAMEL-11093] NPE when defaultValueProvider not given

----
","31/Mar/17 08:00;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1584
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to load Schematron XSLT templates on windows,CAMEL-11074,13059418,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,27/Mar/17 14:48,27/Mar/17 16:05,13/Mar/19 22:20,27/Mar/17 15:56,2.18.3,2.19.0,,,,,,,,,,,,,,2.17.7,2.18.4,2.19.0,,,camel-schematron,,,,,,0,,,,"Similar to CAMEL-8504. {{ClassPathURIResolver}} does:

{code}
InputStream stream = ClassPathURIResolver.class.getClassLoader()      
    .getResourceAsStream(rulesDir.concat(File.separator).concat(href));
{code}

Depending on the ClassLoader implementation, platform dependent paths for resource lookups are not guaranteed to work (which arguably could be considered a bug in the ClassLoader impl).

Looking at the git history, it seems this code has swapped between using {{File.separator}} and {{""/""}} a few times now. However, I see no clear reason why we need to use {{File.separator}} in the resource lookup. {{""/""}} should work perfectly fine in all cases. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-27 15:45:55.3,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 27 16:05:23 UTC 2017,,,,,,,0|i3cu93:,9223372036854775807,,,,,,,,,,"27/Mar/17 15:45;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1578

    CAMEL-11074: Unable to load Schematron XSLT templates on windows

    https://issues.apache.org/jira/browse/CAMEL-11074

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-11074

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1578.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1578
    
----
commit 6bd6eec5a6d12174d745bd7ddefbf4abb83cab69
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2017-03-27T15:19:07Z

    CAMEL-11074: Unable to load Schematron XSLT templates on windows

----
","27/Mar/17 16:05;githubbot;Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/1578
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spark-rest - Adds duplicate content-type,CAMEL-11028,13056715,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,adamdougal,adamdougal,16/Mar/17 16:19,27/Mar/17 13:03,13/Mar/19 22:20,26/Mar/17 08:08,2.18.3,,,,,,,,,,,,,,,2.18.4,2.19.0,,,,rest,,,,,,0,,,,"This is essentially the same as https://issues.apache.org/jira/browse/CAMEL-9613 . When I send a request containing a 'content-type' header it will get sent with duplicate values. E.g. Content-Type: \[application/json, application/json\].

My RouteBuilder is very simple at the moment:
{code}
restConfiguration().component(""spark-rest"").port(8585);

rest(""/"").post(""/charges"").to(""direct:charges"");

from(""direct:charges"").to(""http://localhost:8080/charges?bridgeEndpoint=true&throwExceptionOnFailure=false"");
{code}

Having looked at the code I can see it being added in two places:
https://github.com/apache/camel/blob/master/components/camel-spark-rest/src/main/java/org/apache/camel/component/sparkrest/DefaultSparkBinding.java#L73

https://github.com/apache/camel/blob/master/components/camel-spark-rest/src/main/java/org/apache/camel/component/sparkrest/DefaultSparkBinding.java#L109

Is this intended behaviour? If so, how would I disable it? Thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-16 18:43:56.185,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 27 13:03:48 UTC 2017,,,,,,,0|i3cdkf:,9223372036854775807,,,,,,,,,,"16/Mar/17 18:43;davsclaus;Ah yeah the 2nd does an append.

We could add those standard headers from the top at the end, and maybe only put if not already exists an header with that key.

You are welcome to work on a github PR
http://camel.apache.org/contributing","24/Mar/17 10:48;githubbot;GitHub user jbridger opened a pull request:

    https://github.com/apache/camel/pull/1568

    CAMEL-11028: Avoid duplicating content-type headers for camel-spark-rest

    Fix for: https://issues.apache.org/jira/browse/CAMEL-11028
    
    Fix is as suggested in the Jira issue. Additionally, we changed the `DefaultSparkBindingTest.java` to exclude the `Content-Type` header when adding request headers to the camel headers map.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sky-uk/camel CAMEL-11028

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1568.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1568
    
----
commit ca175b9344113fef2bc3960611cf24513ae26afa
Author: Charlie McNeill, Karthikeyan Gurunathan and Jonathan Bridger <jonathan.bridger@sky.uk>
Date:   2017-03-23T14:35:35Z

    CAMEL-11028: Avoid duplicating content-type headers for camel-spark-rest

----
","26/Mar/17 08:08;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1568
","27/Mar/17 08:23;barmybuckle;Hi, Thanks for looking at this and getting this merged back in so quickly. Do you know when version 2.18.4 will be released? Thanks",27/Mar/17 13:03;davsclaus;That would take some time as 2.18.3 was just recently released. Keep an eye on the @dev mailing list for updates,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PGP Decryptor does not make Integrity check,CAMEL-11063,13058884,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,forsthofer,forsthofer,forsthofer,24/Mar/17 13:12,24/Mar/17 13:32,13/Mar/19 22:20,24/Mar/17 13:32,,,,,,,,,,,,,,,,2.17.7,2.18.4,2.19.0,,, camel-crypto,,,,,,0,,,,A PGP Message can contain a Modification Code Detection Packet (MDC) which contains a hash value of the clear text data. This hash value can be used to check the integrity of the clear text data. Currently this check is not executed in the unmarshall method of the PGP Data Formater.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-03-24 13:12:37.0,,,,,,,0|i3cqyf:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Jetty Producer always uses ""Transfer-Encoding: chunked"" header",CAMEL-11048,13058221,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,mluckam,mluckam,22/Mar/17 13:22,23/Mar/17 14:36,13/Mar/19 22:20,23/Mar/17 09:20,2.17.6,2.18.3,,,,,,,,,,,,,,2.18.4,2.19.0,,,,camel-jetty,,,,,,0,camel-jetty,,,"The JettyHttpProducer is always sending requests with the header ""Transfer-Encoding: chunked"" even if the request received by the producer contains a Content-Length header.  This is due to the JettyHttpProducer setting the request content as an InputStreamContentProvider which is hardcoded to always return -1 as its length.  With the content set as an InputStreamContentProvider, when the content.getLength() is called in org.eclipse.jetty.client.HttpConnection ln 120, it is returned as -1.  This causes the ""Transfer-Encoding: chunked"" header to be added at ln 129.  Again in the org.eclipse.jetty.http.HttpGenerator class getLength() is called on the InputStreamContentProvider and since it is -1, the Content-Length header is not added to the request to be sent out. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-22 13:31:37.795,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 23 14:36:23 UTC 2017,,,Patch Available,,,,0|i3cmv3:,9223372036854775807,,,,,,,,,,"22/Mar/17 13:31;githubbot;GitHub user mluckam opened a pull request:

    https://github.com/apache/camel/pull/1557

    CAMEL-11048 Jetty Producer always uses ""Transfer-Encoding: chunked"" header

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mluckam/camel jettyProducerChunking

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1557.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1557
    
----

----
","22/Mar/17 13:36;githubbot;Github user mluckam closed the pull request at:

    https://github.com/apache/camel/pull/1557
","22/Mar/17 13:39;githubbot;GitHub user mluckam opened a pull request:

    https://github.com/apache/camel/pull/1558

    CAMEL-11048 Jetty Producer always uses ""Transfer-Encoding: chunked"" header

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mluckam/camel CAMEL-11048

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1558.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1558
    
----
commit 58abf94b8da0feb5eb187f94caa24d040dc32b1f
Author: Matthew Luckam <matthew.luckam@solers.com>
Date:   2016-02-19T19:43:19Z

    CAMEL-11048 Jetty Producer always uses ""Transfer-Encoding: chunked"" header
    
    Change-Id: Icc12a11b9b2886affb0f6b6d4a874de11c0338bd

----
","23/Mar/17 09:48;davsclaus;Andrea there is build error on 2.17.x
https://builds.apache.org/job/Camel.2.17.x.notest/195/consoleText

Can you revert the commit on this branch. That branch is becoming EOL and we should avoid jetty changes as Jetty is always ""causing trouble"".","23/Mar/17 09:49;ancosen;I was pushing the revert. I forget about camel-jetty8 on 2.17.x.

Done! :-)","23/Mar/17 14:36;githubbot;Github user mluckam closed the pull request at:

    https://github.com/apache/camel/pull/1558
",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Use default ("""") exchange for reply-to messages",CAMEL-11031,13056938,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hauler,hauler,17/Mar/17 09:16,23/Mar/17 06:08,13/Mar/19 22:20,22/Mar/17 20:35,2.18.3,,,,,,,,,,,,,,,2.18.4,2.19.0,,,,camel-rabbitmq,,,,,,0,,,,"I'm sending request-reply with:

{noformat}
Object reply = rabbitTemplate.convertSendAndReceive(""testexch"", ""test"", ""Ping!"");
{noformat}

And consuming with:
{noformat}
from(""rabbitmq://localhost:5672/testexch?routingKey=test"")
        .transform(body().append("" Pong!""));
{noformat}

And I'm not getting any reply because camel-rabbitmq publishes replies to specified ""testexch"" exchange instead of default one ("""") as stated in [https://www.rabbitmq.com/direct-reply-to.html]:

bq. The RPC server will then see a reply-to property with a generated name. *It should publish to the default exchange ("""")* with the routing key set to this value.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-23 06:08:55.207,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 23 06:08:55 UTC 2017,,,,,,,0|i3cexz:,9223372036854775807,,,,,,,,,,17/Mar/17 09:19;hauler;Proposed changes to fix the issue https://github.com/apache/camel/pull/1545,"23/Mar/17 06:08;githubbot;Github user hauler closed the pull request at:

    https://github.com/apache/camel/pull/1545
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
STARTTLS broken with camel-mail,CAMEL-11047,13058188,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,siano,siano,siano,22/Mar/17 11:12,22/Mar/17 13:14,13/Mar/19 22:20,22/Mar/17 13:14,2.17.6,2.18.3,,,,,,,,,,,,,,2.17.7,2.18.4,2.19.0,,,camel-mail,,,,,,0,,,,"A to URI like
{noformat}
smtp://xxx:25?mail.smtp.starttls.enable=true&sslContextParameters=#sslContextParameters
{noformat}

will create an exception when trying to connect to the SMTP server. The error message is

{noformat}
javax.mail.MessagingException: Could not connect to SMTP host: xxx, port: 25;
  nested exception is:
      javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?
      at com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:2102)
      at com.sun.mail.smtp.SMTPTransport.protocolConnect(SMTPTransport.java:699)
      at javax.mail.Service.connect(Service.java:366)
      at org.apache.camel.component.mail.DefaultJavaMailSender.send(DefaultJavaMailSender.java:112)
      at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:63)
      at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
      at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)
      at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:341)
      at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)
      at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)
      at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
      at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
      at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
      at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
      at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
      at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:68)
      at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:412)
      at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
      at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:270)
      at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:380)
      at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:221)
      at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
      at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:110)
      at com.sap.esb.camel.mail.endpoint.configurator.mail.impl.MailRouteSendingTest.testSendMail(MailRouteSendingTest.java:36)
      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
      at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
      at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
      at java.lang.reflect.Method.invoke(Method.java:606)
      at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
      at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
      at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
      at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
      at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
      at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
      at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
      at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
      at org.junit.rules.RunRules.evaluate(RunRules.java:20)
      at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
      at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
      at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
      at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
      at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
      at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
      at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
      at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
      at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
      at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
      at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
      at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
      at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
      at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
      at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
      at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?
      at sun.security.ssl.InputRecord.handleUnknownRecord(InputRecord.java:671)
      at sun.security.ssl.InputRecord.read(InputRecord.java:504)
      at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:934)
      at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1332)
      at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1359)
      at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1343)
      at com.sun.mail.util.SocketFetcher.configureSSLSocket(SocketFetcher.java:598)
      at com.sun.mail.util.SocketFetcher.createSocket(SocketFetcher.java:372)
      at com.sun.mail.util.SocketFetcher.getSocket(SocketFetcher.java:217)
      at com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:2066)
      ... 52 more
{noformat}

The problem is that the fix introduced with CAMEL-8163 makes matters worse. The SSLSocketConnectionFactory is used for the connection to the SMTP server, not for the socket upgrade to TLS.

The fix would be to set the properties mail.[protocol].ssl.socketFactory instead of mail.[protocol].socketFactory.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 22 13:13:29 UTC 2017,,,,,,,0|i3cmnr:,9223372036854775807,Regression,,,,,,,,,"22/Mar/17 13:13;siano;unfortunately we cannot unit-test this issue. The mock-javamail implementation we use for unit tests does not use any transport, so SSL options will have no effect on the tests. The existing unit tests only test that a specific socket factory is defined, not that it works.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Authentication : provide a way to use refresh_token mode in addition to password method,CAMEL-11040,13057535,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ajaira,ajaira,20/Mar/17 13:55,20/Mar/17 15:44,13/Mar/19 22:20,20/Mar/17 14:34,2.19.0,,,,,,,,,,,,,,,2.19.0,,,,,camel-salesforce,,,,,,0,,,,"The validate() method in SalesforceLoginConfig class, there is a buggy test at the line 181: 
 Type of authentication should be refreshToken only when the refreshToken is present.
line 181 should read
if ( *! hasRefreshToken* && keystore == null)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-20 14:34:06.563,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 20 15:44:02 UTC 2017,,,,,,,0|i3cimv:,9223372036854775807,Regression,,,,,,,,,20/Mar/17 14:34;davsclaus;Yeah I fixed this today,"20/Mar/17 14:50;ajaira;Buh has fixed by commit commit 1735a5b7d0adc18e68d50839dfa24a8dfc13c6b0 (davsclaus)
","20/Mar/17 15:44;ajaira;Thanks for you.
Is what it is already on the 2.19.0-snapshot ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Kubernetes consumers do not close watchers,CAMEL-11020,13056356,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ancosen,jamesnetherton,jamesnetherton,15/Mar/17 17:04,16/Mar/17 12:21,13/Mar/19 22:20,16/Mar/17 12:21,2.18.3,2.19.0,,,,,,,,,,,,,,2.18.4,2.19.0,,,,camel-kubernetes,,,,,,0,,,,"I've been experimenting with camel-kubernetes and noticed some odd behaviour after my camel context is shut down. It seems that not everything is cleaned up and there are still some background threads running.

I wrote a [unit test|https://github.com/jamesnetherton/wildfly-camel/blob/camel-kube/itests/camel/src/test/java/org/wildfly/camel/test/camel/kubernetes/KubernetesConsumerTest.java] that can help to replicate the problem. 

Run the test, then wait for the camel context to shut down. Afterwards, the thread will sleep for 5 minutes. During this time, stop the Kubernetes cluster and you'll see the following exception thrown (or something like it):

{code}
java.io.IOException: closed
	at okhttp3.internal.ws.WebSocketWriter.writeControlFrameSynchronized(WebSocketWriter.java:119)
	at okhttp3.internal.ws.WebSocketWriter.writeClose(WebSocketWriter.java:111)
	at okhttp3.internal.ws.RealWebSocket.close(RealWebSocket.java:168)
	at io.fabric8.kubernetes.client.dsl.internal.WatchConnectionManager$1.onClose(WatchConnectionManager.java:256)
	at okhttp3.internal.ws.RealWebSocket.peerClose(RealWebSocket.java:197)
	at okhttp3.internal.ws.RealWebSocket.access$200(RealWebSocket.java:38)
	at okhttp3.internal.ws.RealWebSocket$1$2.execute(RealWebSocket.java:84)
	at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}

Which indicates that the pod watcher was still active and connected to the k8s cluster, despite camel having been shutdown. This is not ideal when Camel is run within an OSGI or JavaEE container.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-15 17:08:19.606,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 15 17:08:19 UTC 2017,,,,,,,0|i3cbcn:,9223372036854775807,,,,,,,,,,15/Mar/17 17:08;ancosen;I'll tale a look. Thanks for the heads up about this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RestletProducer should allow multiple values in HTTP Accept header,CAMEL-11026,13056635,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,16/Mar/17 12:06,16/Mar/17 12:19,13/Mar/19 22:20,16/Mar/17 12:19,2.19.0,,,,,,,,,,,,,,,2.19.0,,,,,camel-restlet,,,,,,0,,,,If there are multiple values to the HTTP {{Accept}} header RestletProducer sets the {{Accept}} header value to {{**/**}}. RestletProducer should honour the set {{Accept}} header and set the HTTP header accordingly.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-03-16 12:06:40.0,,,,,,,0|i3cd2n:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bindy csv doesn't populate with defaultValue on marshal,CAMEL-11012,13055915,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,igarashitm,igarashitm,igarashitm,14/Mar/17 12:02,14/Mar/17 13:34,13/Mar/19 22:20,14/Mar/17 13:02,,,,,,,,,,,,,,,,2.17.7,2.18.4,2.19.0,,,camel-bindy,,,,,,0,,,,http://camel.465427.n5.nabble.com/Bindy-DefaultValue-is-not-working-Need-help-td5795402.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-14 12:42:36.334,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 14 13:34:00 UTC 2017,,,,,,,0|i3c8mn:,9223372036854775807,,,,,,,,,,"14/Mar/17 12:42;githubbot;GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1539

    CAMEL-11012 bindy csv doesn't populate with defaultValue on marshal

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-11012

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1539.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1539
    
----
commit 13dc096fe88f713b22a198405f4fb29f798714e6
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-03-14T12:40:55Z

    CAMEL-11012 bindy csv doesn't populate with defaultValue on marshal

----
","14/Mar/17 13:34;githubbot;Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1539
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dump JMX stats for null timestamps should not use 1970-1-1 as date,CAMEL-13296,13220123,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,07/Mar/19 08:21,08/Mar/19 10:10,13/Mar/19 22:20,08/Mar/19 10:10,,,,,,,,,,,,,,,,3.0.0,3.0.0-M2,,,,jmx,,,,,,0,,,,"Noticed this
lastExchangeFailureTimestamp=""1970-01-01T00:59:59.999+0100"" ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,2019-03-07 08:21:49.0,,,,,,,0|z00fx4:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-package-maven-plugin:3.0.0-SNAPSHOT fails on generate-jaxb-list goal,CAMEL-13080,13210366,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,onders,onders,18/Jan/19 12:30,01/Mar/19 13:40,13/Mar/19 22:20,18/Jan/19 13:43,,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,build system,,,,,,0,,,,"Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 11: jar:file:C:\Users\sezgin\.m2\repository\org\apache\camel\spi-annotations\3.0.0-SNAPSHOT\spi-annotations-3.0.0-SNAPSHOT.jar!/
 at java.net.URI.create (URI.java:852)
 at org.apache.camel.maven.packaging.PackageJaxbMojo.asFolder (PackageJaxbMojo.java:172)
 at java.util.stream.ReferencePipeline$3$1.accept (ReferencePipeline.java:193)
 at java.util.ArrayList$ArrayListSpliterator.forEachRemaining (ArrayList.java:1382)
 at java.util.stream.AbstractPipeline.copyInto (AbstractPipeline.java:481)
 at java.util.stream.AbstractPipeline.wrapAndCopyInto (AbstractPipeline.java:471)
 at java.util.stream.ForEachOps$ForEachOp.evaluateSequential (ForEachOps.java:151)
 at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential (ForEachOps.java:174)
 at java.util.stream.AbstractPipeline.evaluate (AbstractPipeline.java:234)
 at java.util.stream.ReferencePipeline.forEach (ReferencePipeline.java:418)
 at org.apache.camel.maven.packaging.PackageJaxbMojo.createIndex (PackageJaxbMojo.java:161)
 at org.apache.camel.maven.packaging.PackageJaxbMojo.execute (PackageJaxbMojo.java:111)
 at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:134)",- windows,"onderson commented on pull request #2718: CAMEL-13080 - fix URI creation for windows builds
URL: https://github.com/apache/camel/pull/2718
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/19 12:39;githubbot;600","onderson commented on pull request #2718: CAMEL-13080 - fix URI creation for windows builds
URL: https://github.com/apache/camel/pull/2718
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/19 13:41;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,2019-01-18 12:30:48.0,,,,,,,0|yi02c0:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesfoce ignores resolveProperty Placeholders ,CAMEL-13196,13215556,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,13/Feb/19 17:55,01/Mar/19 13:39,13/Mar/19 22:20,13/Feb/19 18:22,,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,camel-salesforce,,,,,,0,,,,camel-salesforce ignores the global option resolvePropertyPlaceholders as SalesforceComponent.doStart does not invoke the parent method.,,"lburgazzoli commented on pull request #2769: CAMEL-13196: camel-salesfoce ignores resolveProperty Placeholders
URL: https://github.com/apache/camel/pull/2769
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Feb/19 18:22;githubbot;600",,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-02-13 17:55:57.0,,,,,,,0|yi0y9c:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Proxy/Bridge - Premature end of Content-Length delimited message body,CAMEL-13004,13204479,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,vitorvr,vitorvr,14/Dec/18 13:37,26/Feb/19 11:21,13/Mar/19 22:20,25/Feb/19 12:38,2.22.0,,,,,,,,,,,,,,,2.22.0,,,,,camel-http4,camel-undertow,,,,,1,,,,"I'm using Camel Rest DSL to build endpoints to use as proxies between different networks.

I have created 2 endpoints. Below the code:

First:
{code:java}
restConfiguration().host(""localhost"").component(""undertow"").bindingMode(RestBindingMode.off); rest(""/endpoint?{1param}&{2param}"") .get(""/"") .route().routeId(""Ednpoint1"") .autoStartup(true) .setProperty(""uri"", simple(""http4://0.0.0.0:8080/endpoint?1param=${header.1param}&2param=${header.2param}"")) .setHeader(Exchange.HTTP_METHOD, constant(""GET"")) .removeHeaders(""CamelHttp*"") .toD(""${header.uri}"").endRest().responseMessage().message(""${body}"");{code}
 

Second:
{code:java}
restConfiguration().host(""localhost"").component(""undertow"").bindingMode(RestBindingMode.off); rest(""/endpoint?{param1}&{param2}"") .get(""/"") .route().routeId(""Endpoint2"") .autoStartup(true) .setProperty(""uri"", simple(""http4://endpoint-destionation/service?dhi=${header.param1}&dhf=${header.param2}"")) .setHeader(Exchange.HTTP_METHOD, constant(""GET"")) .removeHeaders(""*"") .toD(""${header.uri}"").endRest().responseMessage().message(""${body}"");{code}
 

I'm currently getting the following error:
{code:java}
org.apache.http.ConnectionClosedException: Premature end of Content-Length delimited message body (expected: 146541; received: 54482 at org.apache.http.impl.io.ContentLengthInputStream.read(ContentLengthInputStream.java:180) at org.apache.http.conn.EofSensorInputStream.read(EofSensorInputStream.java:137) at org.apache.http.conn.EofSensorInputStream.read(EofSensorInputStream.java:150) at org.apache.camel.util.IOHelper.copy(IOHelper.java:219) at org.apache.camel.util.IOHelper.copy(IOHelper.java:174) at org.apache.camel.util.IOHelper.copy(IOHelper.java:170) at org.apache.camel.component.http4.HttpProducer.doExtractResponseBodyAsStream(HttpProducer.java:414) at org.apache.camel.component.http4.HttpProducer.extractResponseBody(HttpProducer.java:397) at org.apache.camel.component.http4.HttpProducer.populateResponse(HttpProducer.java:242) at org.apache.camel.component.http4.HttpProducer.process(HttpProducer.java:203) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.processor.SendDynamicProcessor$1.doInAsyncProducer(SendDynamicProcessor.java:178) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:445) at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:160) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) at org.apache.camel.processor.Pipeline.process(Pipeline.java:138) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) at org.apache.camel.component.undertow.UndertowConsumer.handleRequest(UndertowConsumer.java:126) at io.undertow.server.Connectors.executeRootHandler(Connectors.java:360) at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830) at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35) at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1985) at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1487) at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1378) at java.lang.Thread.run(Thread.java:748){code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-21 02:14:57.778,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 26 11:21:38 UTC 2019,,,,,,,0|s01j00:,9223372036854775807,,,,,,,,,,"21/Feb/19 02:14;gilvansfilho;I think I'm having same issue. I have a route camel which uses camel-undertow and camel-http4 to be used as gateway between two distinct web applications.
The route works fine when last endpoint response has small size. However when last endpoint response has large size I receive truncated data.

*Example of correct response:*
{code:java}
{ 
    ""field1"": ""something"", 
    ""field2"": ""something"", 
    ""field3"": ""something"" 
}
{code}
*Example of incorrect (truncated) response:*
{code:java}
{ 
    ""field1"": ""something"", 
    ""field2"": ""something"", 
    ""field3"": ""something"", 
    ""fiel
{code}
*This is my route:*
{code:java}
from(""undertow://0.0.0.0:8080/mec?httpMethodRestrict=POST,GET"") //receive only POST and GET http methods
.to(""http4://something/endpoint?bridgeEndpoint=true&throwExceptionOnFailure=false&copyHeaders=false"");{code}
The endpoint ""http4://something/endpoint"" response an JSON. As I already said, when response of ""http4://something/endpoint"" is small everything works fine. However when is large the route broke.

I appended a "".log"" after "".to(""http4://..."")"" and get (in log) complete response but when I make a request in a client (like postman) I receive truncated response.

 ","21/Feb/19 11:51;vitorvr;Hi Gilvan, 

I found the issue.
In my case, I use Wildfly 13 to deploy my Camel Routes.
The problem is on the field Send Buffer inside HTTP Listener Undertow component.
 # Configuration⇒Subsystems⇒Web (Undertow)⇒Server ⇒default-server 
 # Listener⇒HTTP Listener

I change to value to 10000000, and now is working fine.

I don't know if this applies for your scenario, but can help you to solve it.","26/Feb/19 11:21;gilvansfilho;Hi Vitor, I am using spring boot and undertow. In undertow component docs [https://github.com/apache/camel/blob/master/components/camel-undertow/src/main/docs/undertow-component.adoc] i see this option *camel.component.undertow.host-options.buffer-size* to be used in application properties, I changed it but has no effect.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
mock endpoint - Small glitch in logging excepted failure,CAMEL-13236,13216890,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Feb/19 11:39,21/Feb/19 11:52,13/Mar/19 22:20,21/Feb/19 11:52,2.22.3,2.23.1,,,,,,,,,,,,,,2.23.2,2.24.0,3.0.0,,,camel-core,,,,,,0,,,,"We do
log.info(""Caught expected failure: {}"", e);

You cannot do {} with an exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 20 11:39:50 UTC 2019,,,,,,,0|yi16fc:,9223372036854775807,,,,,,,,,,"20/Feb/19 11:39;davsclaus;You end up with
{code}
2019-02-20 12:37:53,662 [main           ] INFO  MockEndpoint                   - Caught expected failure: {}
java.lang.AssertionError: Gap detected: last: 2 current: 4
	at org.junit.Assert.fail(Assert.java:88)
	at camelinaction.GapJava8Test.lambda$null$3(GapJava8Test.java:86)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error starting SQS consumer due to config option missing that's required for producer only,CAMEL-13230,13216773,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,strelok1,strelok1,19/Feb/19 23:38,20/Feb/19 14:47,13/Mar/19 22:20,20/Feb/19 14:21,2.21.0,,,,,,,,,,,,,,,2.22.4,2.23.2,2.24.0,3.0.0,,camel-aws,,,,,,0,,,,"Currently if you consume from an SQS queue that is a FIFO queue and do not specify a *messageGroupIdStrategy* option the consumer fails to start with an error:

{{Failed to resolve endpoint: aws-sqs://queue.name.fifo?accessKey=xxx&maxMessagesPerPoll=1&region=AP_SOUTHEAST_2&secretKey=xxx&visibilityTimeout=60 due to: messageGroupIdStrategy must be set for FIFO queues}}

This parameter is used for *producing* only to set the GroupId on the messages sent to the queue and should not be checked as part of general endpoint configuration check. It should be checked in the producer, perhaps in +org.apache.camel.component.aws.sqs.SqsProducer#configureFifoAttributes+ or in the constructor.

 ",,"strelok1 commented on pull request #2788: CAMEL-13230: Error starting SQS consumer due to config option missing that's required for producer only
URL: https://github.com/apache/camel/pull/2788
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Feb/19 05:04;githubbot;600","oscerd commented on pull request #2788: CAMEL-13230: Error starting SQS consumer due to config option missing that's required for producer only
URL: https://github.com/apache/camel/pull/2788
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Feb/19 14:47;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2019-02-19 23:38:24.0,,,,,,,0|yi15pc:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-restdsl-swagger xml generation can't find required method allowableValues(String),CAMEL-13171,13214556,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,08/Feb/19 08:50,15/Feb/19 08:06,13/Mar/19 22:20,15/Feb/19 08:06,2.23.1,,,,,,,,,,,,,,,2.22.4,2.23.2,2.24.0,3.0.0,,tooling,,,,,,0,,,,"Reported on SO
https://stackoverflow.com/questions/54405868/camel-restdsl-swagger-xml-generation-cant-find-required-method-allowablevalues?noredirect=1#comment95906957_54405868

Look at the provided sample project on github and see if we can reproduce the issue and find out whats the issue is",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,2019-02-08 08:50:05.0,,,,,,,0|yi0s3k:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Underlying File for StreamCache gets deleted too early with direct-vm,CAMEL-13168,13214343,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,siano,siano,siano,07/Feb/19 10:42,07/Feb/19 13:42,13/Mar/19 22:20,07/Feb/19 13:42,2.23.1,,,,,,,,,,,,,,,2.22.4,2.23.2,2.24.0,3.0.0,,camel-core,,,,,,0,,,,"If one route calls a different route via direct-vm endpoint and the second route creates a StreamCache based for a file in the called route but the payload is propagated back to the calling route, this route will not be able to call the file because it is already deleted.

The issue is actually the same as for CAMEL-7787. As the multicast processor the direct-vm processor creates a copy of the exchange and does perform the further processing with this exchange till the route comes back. The stream cache will create a synchronization on this second exchange to delete the file when the exchange is done, but the StreamCache as an entity (then without underlying file) might be handed back to the original exchange.

The fix is actually the same as for CAMEL-7787, set the exchange property Exchange.STREAM_CACHE_UNIT_OF_WORK to the LUW of the initial exchange.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-07 13:05:08.564,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 07 13:13:13 UTC 2019,,,,,,,0|yi0qso:,9223372036854775807,,,,,,,,,,07/Feb/19 13:05;davsclaus;We also need this to be fixed on master which has the direct-vm component in the components folder. The unit test are stil in core/camel-core.,"07/Feb/19 13:13;siano;Yes, I am working on it. Can the tests in core/camel-core use direct-vm endpoints or do I have to move the test for that?

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayBlockingQueueFactory ignores capacity argument,CAMEL-13166,13214281,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,bedla,bedla,06/Feb/19 23:56,07/Feb/19 08:30,13/Mar/19 22:20,07/Feb/19 08:29,2.23.1,,,,,,,,,,,,,,,2.23.2,2.24.0,3.0.0,,,camel-core,,,,,,0,,,,ArrayBlockingQueueFactory#create(int) uses defaultCapacity instead of passed capacity.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,06/Feb/19 23:57;bedla;CAMEL-13166__ArrayBlockingQueueFactoryuses_defaultCapacity_instead_of_passed_capacity.patch;https://issues.apache.org/jira/secure/attachment/12957844/CAMEL-13166__ArrayBlockingQueueFactoryuses_defaultCapacity_instead_of_passed_capacity.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2019-02-07 08:30:01.006,,,no_permission,,Unknown,,,,Patch,,,,,,,,,9223372036854775807,,,Thu Feb 07 08:30:01 UTC 2019,,,Patch Available,,,,0|yi0qew:,9223372036854775807,,,,,,,,,,07/Feb/19 08:30;ancosen;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-spring-boot-master running error,CAMEL-13154,13213519,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,03/Feb/19 01:25,03/Feb/19 09:08,13/Mar/19 22:20,03/Feb/19 01:40,2.23.0,2.23.1,,,,,,,,,,,,,,2.23.2,3.0.0,,,,,,,,,,0,,,,"When running the spring-boot-master, as we use the spring-boot-web-starter by default,  I get the port is ready bound error when I start another instance.

As the example doesn't use the web server anymore, the fix could we just remove the spring-boot-web-starter. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-03 08:30:09.35,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sun Feb 03 09:03:33 UTC 2019,,,,,,,0|yi0lq0:,9223372036854775807,,,,,,,,,,03/Feb/19 01:40;njiang;Applied the patch into master and camel-2.23.x branches.,03/Feb/19 08:30;ancosen;Can you please backport on camel-2.x branch too? It's the main maintenance branch for 2.x now,"03/Feb/19 09:03;njiang;Sure, [~ancosen] I just backported it to camel-2.x branch.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Output of route-profile is empty if there are same route-id for multiple camel-contexts.,CAMEL-13093,13210821,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,chandrashekharpandey,chandrashekharpandey,21/Jan/19 17:35,21/Jan/19 19:35,13/Mar/19 22:20,21/Jan/19 19:35,2.17.1,2.21.3,2.23.1,,,,,,,,,,,,,2.21.5,2.22.3,2.23.2,2.24.0,3.0.0,karaf,,,,,,0,,,,"* Unzip the attached reproducer.
 * Build it using 'mvn clean install'.
 * Deploy it in Fuse with command 'bundle:install -s mvn:com.mycompany/camel-blueprint-cbr/1.0.0-SNAPSHOT'.
 * If we execute route-profile command, we find that output is empty or no output.

karaf@root()> route-profile cbr-example-context1 1-route Profile Camel Context: cbr-example-context1 Id Count Last (ms) Delta (ms) Mean (ms) Min (ms) Max (ms) Total (ms) Self (ms) karaf@root()>",ALL,"1984shekhar commented on pull request #2724: CAMEL-13093
URL: https://github.com/apache/camel/pull/2724
 
 
   karaf route-profile command improvement
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Jan/19 17:37;githubbot;600","davsclaus commented on pull request #2724: CAMEL-13093
URL: https://github.com/apache/camel/pull/2724
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Jan/19 19:32;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,21/Jan/19 17:33;chandrashekharpandey;TestProjectWithDirect.zip;https://issues.apache.org/jira/secure/attachment/12955682/TestProjectWithDirect.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2019-01-21 19:35:30.632,,,no_permission,,Moderate,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 21 19:35:30 UTC 2019,,,,,,,0|yi054w:,9223372036854775807,,,,,,,,,,21/Jan/19 17:46;chandrashekharpandey;Working on this,21/Jan/19 19:35;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Route coverage: When and otherwise are not marked as covered,CAMEL-12974,13202040,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,apupier,apupier,03/Dec/18 16:07,30/Dec/18 10:15,13/Mar/19 22:20,30/Dec/18 10:15,2.21.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,tooling,,,,,,0,,,,"- use a route with a choice with when and otherwise inside.
- launch mvn test camel:route-coverage
- when and otherwise are marked with a 0 count even if they were used

examples of the CBR examples available in Eclipse Fuse Tooling:
{noformat}Route:	cbr-route

  Line #      Count   Route
  ------      -----   -----
      33          5   from
      34          5     log
      35          5     choice
      36          0       when
      38          2         log
      39          2         to
      41          0       when
      43          2         log
      44          2         to
      46          0       otherwise
      47          1         log
      48          1         to
      51          5     log

Coverage: 10 out of 13 (76.9%){noformat}

we can notice that elements inside when and otherwise are well counted but when and otherwise are at 0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-05 13:11:10.248,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sun Dec 30 10:11:13 UTC 2018,,,,,,,0|s01440:,9223372036854775807,,,,,,,,,,05/Dec/18 13:11;davsclaus;Its a bit by design as they are just placeholders to build up the route structure with the indention. ,"05/Dec/18 13:17;apupier;I think it is a bug because when using the failOnError config, the build is failing although all paths are covered.",05/Dec/18 20:38;davsclaus;Ah good point if that option causes it to fail,"30/Dec/18 10:03;davsclaus;The Java DSL does not include when/otherwise etc
{code}
[INFO] Discovered 1 routes
[INFO] Route coverage summary:

Class:	sample.camel.MyCamelRouter
Route:	hello

  Line #      Count   Route
  ------      -----   -----
      32          2   from
      33          2     transform
      34          2     choice
      36          1       to
      38          1       to
      41          2     to

Coverage: 6 out of 6 (100.0%)
{code}","30/Dec/18 10:05;davsclaus;But the XML DSL includes them
{code}
[INFO] Route coverage summary:

File:	my-camel.xml
Route:	hello

  Line #      Count   Route
  ------      -----   -----
      28          1   from
      29          1     transform
      32          1     choice
      33          0       when
      35          0         to
      37          0       otherwise
      38          1         to
      41          1     to

Coverage: 5 out of 8 (62.5%)
{code}","30/Dec/18 10:11;davsclaus;Okay made the XML and Java DSL similar with the CBR
{code}
[INFO] Route coverage summary:

File:	my-camel.xml
Route:	hello

  Line #      Count   Route
  ------      -----   -----
      28          1   from
      29          1     transform
      32          1     choice
      35          0       to
      38          1       to
      41          1     to

Coverage: 5 out of 6 (83.3%)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-restlet - sending PATCH operation should include body,CAMEL-13022,13205723,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Dec/18 13:34,20/Dec/18 13:45,13/Mar/19 22:20,20/Dec/18 13:45,2.23.0,,,,,,,,,,,,,,,2.22.3,2.23.1,2.24.0,3.0.0,,camel-restlet,,,,,,0,,,,We currently only include body for PUT and POST. But we should include the body for PATCH as well.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-12-20 13:34:10.0,,,,,,,0|u006vs:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sftp : on windows stepwise = true change directory fails to change directory,CAMEL-12848,13188779,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,onders,onders,02/Oct/18 08:32,19/Dec/18 19:45,13/Mar/19 22:20,02/Oct/18 13:41,,,,,,,,,,,,,,,,2.23.0,,,,,camel-sftp,,,,,,0,,,,"2018-10-02 11:18:34,692 [main ] INFO SftpSimpleConsumeRecursiveTest - ********************************************************************************
2018-10-02 11:18:34,692 [main ] INFO SftpSimpleConsumeRecursiveTest - Testing: testSftpSimpleConsumeRecursive(org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeRecursiveTest)
2018-10-02 11:18:34,692 [main ] INFO SftpSimpleConsumeRecursiveTest - ********************************************************************************
2018-10-02 11:18:34,697 [main ] INFO DefaultCamelContext - Apache Camel 2.23.0-SNAPSHOT (CamelContext: camel-3) is starting
2018-10-02 11:18:34,698 [main ] INFO DefaultManagementStrategy - JMX is disabled
2018-10-02 11:18:34,703 [main ] INFO DefaultTypeConverter - Type converters loaded (core: 195, classpath: 1)
2018-10-02 11:18:34,712 [main ] INFO DefaultCamelContext - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2018-10-02 11:18:34,716 [main ] INFO DefaultCamelContext - Skipping starting of route foo as its configured with autoStartup=false
2018-10-02 11:18:34,716 [main ] INFO DefaultCamelContext - Total 1 routes, of which 0 are started
2018-10-02 11:18:34,716 [main ] INFO DefaultCamelContext - Apache Camel 2.23.0-SNAPSHOT (CamelContext: camel-3) started in 0.019 seconds
2018-10-02 11:18:34,732 [main ] INFO SftpOperations - Known host file not configured, using user known host file: target/user-home/.ssh/known_hosts
2018-10-02 11:18:34,835 []-nio2-thread-1] INFO ServerUserAuthService - Session admin@/127.0.0.1:55121 authenticated
2018-10-02 11:18:34,871 [main ] INFO DefaultCamelContext - Route: foo started and consuming from: sftp://localhost:21000/target/res/home?delay=10s&disconnect=true&password=xxxxxx&recursive=true&username=admin
2018-10-02 11:18:34,871 [main ] INFO MockEndpoint - Asserting: mock://result is satisfied
2018-10-02 11:18:35,975 [target/res/home] WARN ilePollingConsumerPollStrategy - Trying to recover by force disconnecting from remote server and re-connecting at next poll: sftp://admin@localhost:21000
2018-10-02 11:18:35,976 [target/res/home] WARN SftpConsumer - Consumer SftpConsumer[sftp://localhost:21000/target/res/home?delay=10s&disconnect=true&password=xxxxxx&recursive=true&username=admin] failed polling endpoint: sftp://localhost:21000/target/res/home?delay=10s&disconnect=true&password=xxxxxx&recursive=true&username=admin. Will try again at next poll. Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - Cannot change directory to: C:]
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: C:
 at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:644) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:632) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpOperations.changeToParentDirectory(SftpOperations.java:658) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpConsumer.pollSubDirectory(SftpConsumer.java:98) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpConsumer.doPollDirectory(SftpConsumer.java:177) ~[classes/:?]
 at org.apache.camel.component.file.remote.RemoteFileConsumer.doSafePollSubDirectory(RemoteFileConsumer.java:261) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpConsumer.pollSubDirectory(SftpConsumer.java:95) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpConsumer.doPollDirectory(SftpConsumer.java:177) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:86) ~[classes/:?]
 at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:128) ~[camel-core-2.23.0-SNAPSHOT.jar:2.23.0-SNAPSHOT]
 at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174) [camel-core-2.23.0-SNAPSHOT.jar:2.23.0-SNAPSHOT]
 at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101) [camel-core-2.23.0-SNAPSHOT.jar:2.23.0-SNAPSHOT]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_161]
 at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [?:1.8.0_161]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_161]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [?:1.8.0_161]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_161]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_161]
 at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
Caused by: com.jcraft.jsch.SftpException: Invalid filename
 at com.jcraft.jsch.ChannelSftp.throwStatusError(ChannelSftp.java:2873) ~[jsch-0.1.54.jar:?]
 at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:2367) ~[jsch-0.1.54.jar:?]
 at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:342) ~[jsch-0.1.54.jar:?]
 at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:642) ~[classes/:?]
 ... 18 more
2018-10-02 11:18:44,873 [main ] INFO SftpSimpleConsumeRecursiveTest - ********************************************************************************
2018-10-02 11:18:44,873 [main ] INFO SftpSimpleConsumeRecursiveTest - Testing done: testSftpSimpleConsumeRecursive(org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeRecursiveTest)
2018-10-02 11:18:44,873 [main ] INFO SftpSimpleConsumeRecursiveTest - Took: 10.157 seconds (10157 millis)
2018-10-02 11:18:44,873 [main ] INFO SftpSimpleConsumeRecursiveTest - ********************************************************************************
2018-10-02 11:18:44,874 [main ] INFO DefaultCamelContext - Apache Camel 2.23.0-SNAPSHOT (CamelContext: camel-3) is shutting down
2018-10-02 11:18:44,874 [main ] INFO DefaultShutdownStrategy - Starting to graceful shutdown 1 routes (timeout 10 seconds)
2018-10-02 11:18:44,875 [ - ShutdownTask] INFO DefaultShutdownStrategy - Route: foo shutdown complete, was consuming from: sftp://localhost:21000/target/res/home?delay=10s&disconnect=true&password=xxxxxx&recursive=true&username=admin
2018-10-02 11:18:44,876 [main ] INFO DefaultShutdownStrategy - Graceful shutdown of 1 routes completed in 0 seconds
2018-10-02 11:18:44,878 [main ] INFO DefaultCamelContext - Apache Camel 2.23.0-SNAPSHOT (CamelContext: camel-3) uptime 10.181 seconds
2018-10-02 11:18:44,878 [main ] INFO DefaultCamelContext - Apache Camel 2.23.0-SNAPSHOT (CamelContext: camel-3) is shutdown in 0.004 seconds",Windows,,,,,,,,,,,,,,,,,,,,,,CAMEL-13017,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-02 09:22:26.596,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 02 13:38:51 UTC 2018,,,,,,,0|i3ypxr:,9223372036854775807,Unit Test Broken,,,,,,,,,"02/Oct/18 09:22;githubbot;onderson opened a new pull request #2544: CAMEL-12848 - handle differently on windows for fa
URL: https://github.com/apache/camel/pull/2544
 
 
   iling test case

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 09:22;githubbot;GitHub user onderson opened a pull request:

    https://github.com/apache/camel/pull/2544

    CAMEL-12848 - handle differently on windows for fa

    iling test case

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel CAMEL-12848

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2544.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2544
    
----
commit bdbef1835b25de7b8b426bbf4cfda97b29fcc068
Author: önder sezgin <onders@...>
Date:   2018-10-02T09:22:17Z

    CAMEL-12848 - handle differently on windows for fa
    
    iling test case

----
","02/Oct/18 09:28;githubbot;onderson commented on issue #2544: CAMEL-12848 - handle differently on windows for fa
URL: https://github.com/apache/camel/pull/2544#issuecomment-426208891
 
 
   guys, please wait before merging.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 12:55;githubbot;onderson commented on issue #2544: CAMEL-12848 - handle differently on windows for fa
URL: https://github.com/apache/camel/pull/2544#issuecomment-426262525
 
 
   ok, i though there was a side affect in full tests. i could not reproduce. so it is ok to merge. sorry for another noise :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 13:38;githubbot;onderson closed pull request #2544: CAMEL-12848 - handle differently on windows for fa
URL: https://github.com/apache/camel/pull/2544
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 13:38;githubbot;Github user onderson closed the pull request at:

    https://github.com/apache/camel/pull/2544
",,,,,,,,,,,,,,,,,,,,,,,,,,,
xquery syntax problem in SpringDSL with spring-boot,CAMEL-12994,13203930,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,W.Y,W.Y,12/Dec/18 08:55,18/Dec/18 20:02,13/Mar/19 22:20,17/Dec/18 12:42,2.21.0,2.22.0,,,,,,,,,,,,,,2.22.3,2.23.1,2.24.0,,,camel-saxon,,,,,,0,,,,"this JAVADSL sytnax does not exist / supported in SpringDSL 
setHeader(""myHeader"").xquery(""resource:classpath:myxquery.txt"", String.class)


It will cause the problem if return type is String instead of DomReulst or xmlString for xquery, when we use SpringDSL instead of JAVADSL

 we tried all version >= 2.22, same problem ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,13/Dec/18 16:13;W.Y;XqueryTest.zip;https://issues.apache.org/jira/secure/attachment/12951695/XqueryTest.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2018-12-12 09:10:59.706,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 18 20:02:46 UTC 2018,,,,,,,0|s01fm0:,9223372036854775807,,,,,,,,,,"12/Dec/18 09:10;davsclaus;Try with

{code}
<xquery type=""String"">resource:classpath:myxquery.txt</xquery>
{code}
",12/Dec/18 09:12;ancosen;This is not a problem at first sight,"12/Dec/18 10:54;jiad4701;If I use a syntax like below
{code:xml}
<to uri=""xquery:xquery/myXquery.xq"" />
{code}
and my Xquery return plain text, then I got error:

*HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted.*

When I use a syntax like:
{code:xml}
<transform>
	<xquery type=""String"">""resource:classpath:xquery/myXquery.xq""</xquery>
</transform>
{code}
Then I got error: 
 *java.lang.IllegalArgumentException: Misdeclaration of xmlns namespace*

 

With inline xquery like this I also got the error: *Misdeclaration of xmlns namespace*
{code:xml}
<transform>
<xquery>//*[text()]/text()</xquery>
</transofrm>
{code}

Did I something wrong here?","12/Dec/18 13:41;davsclaus;You can also do 

<to uri=""xquery:xquery/myXquery.xq?resultType=String"" />

But please use user mailing list, gitter chat, stackoverflow etc. to ask for help on using Camel. The JIRA tracker is for actual bugs, ideas for improvements or new features etc.
See support page:
http://camel.apache.org/support.html","13/Dec/18 08:04;W.Y;this problem only existing in SpringBoot autoconfig, (route file  has no camel context).

with normal Spring +Camel it is ok 

 

According to [http://camel.apache.org/spring-boot.html] , route xml should not contain

camelContext 

 

but  this example , it puts camel context into route xml file

[https://github.com/apache/camel/edit/master/examples/camel-example-spring-boot-xml/src/main/resources/my-camel.xml] 

 

it is quite confusing and confilcting for me ","13/Dec/18 08:47;ancosen;The official doc is here:

[https://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/docs/spring-boot.adoc]

 

The old documentation is deprecated/not updated anymore. There is a message on top of all pages.","13/Dec/18 09:08;W.Y;then in my opinion ,  it is a bug for xquery  when using SpringDSL @ SpringBoot AutoConfig ","13/Dec/18 11:15;davsclaus;Can you create a sample project and attach as either .zip file to this JIRA or put it on github for others to take a look at.
","13/Dec/18 16:13;W.Y;[^XqueryTest.zip]

 

 

mvn spring-boot:run

copy input.xml from input to input/data

You will see below exception

---------------------------------------------------------------------------------------------------------------------------------------
RouteId ProcessorId Processor Elapsed (ms)
[Route1 ] [Route1 ] [file://input/data?moveFailed=.error ] [ 84]
[Route1 ] [convertBodyTo1 ] [convertBodyTo[java.lang.String] ] [ 17]
[Route1 ] [log1 ] [log ] [ 25]
[Route1 ] [transform1 ] [transform[xquery\{XQuery[null]}] ] [ 31]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------

org.apache.camel.RuntimeExpressionException: java.lang.IllegalArgumentException: Misdeclaration of xmlns namespace
 at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:155) ~[camel-saxon-2.22.1.jar:2.22.1]
 at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:120) ~[camel-saxon-2.22.1.jar:2.22.1]
 at org.apache.camel.processor.TransformProcessor.process(TransformProcessor.java:50) ~[camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) ~[camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:138) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:454) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:223) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:187) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101) [camel-core-2.22.1.jar:2.22.1]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_181]
 at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [na:1.8.0_181]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_181]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [na:1.8.0_181]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
 at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: java.lang.IllegalArgumentException: Misdeclaration of xmlns namespace
 at net.sf.saxon.query.StaticQueryContext.declareNamespace(StaticQueryContext.java:719) ~[Saxon-HE-9.8.0-12.jar:na]
 at org.apache.camel.component.xquery.XQueryBuilder.initialize(XQueryBuilder.java:721) ~[camel-saxon-2.22.1.jar:2.22.1]
 at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsString(XQueryBuilder.java:208) ~[camel-saxon-2.22.1.jar:2.22.1]
 at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:130) ~[camel-saxon-2.22.1.jar:2.22.1]
 ... 19 common frames omitted

 ","17/Dec/18 12:14;davsclaus;Its a issue/change in Saxon library
https://stackoverflow.com/questions/50581191/camel-saxon-xquery-misdeclaration-of-xmlns-namespace","17/Dec/18 12:35;davsclaus;We need to skip some specific xml prefixes according to the query spec which Saxon now complains about
https://www.w3.org/TR/xquery-31/#id-namespace-declaration","17/Dec/18 12:38;davsclaus;Okay found the issue in camel-saxon and have it fixed now.
{code}
2018-12-17 13:38:14.213  INFO 13698 --- [le://input/data] Route1                                   : #### Body Before XQ Execution : ####
 <?xml version=""1.0"" encoding=""UTF-8""?>
<Envelope>
   <Header/>
   <Body>
      <getEmployee>
         <EmpId>123</EmpId>
      </getEmployee>
   </Body>
</Envelope>
2018-12-17 13:38:14.510  INFO 13698 --- [le://input/data] Route1                                   : #### Body After XQ Execution : ####
 123TestConcat
{code}

You need to set the result type to String in the XML DSL
{code}
		<transform>
			<xquery type=""String"">concat(/Envelope/Body/getEmployee/EmpId/text(),""TestConcat"")</xquery>
		</transform>
{code}","18/Dec/18 20:02;W.Y;When the fix version 2.22.3 will be available ?

or Where could I download the bug fix release 2.22.3 now?

Thanks!",,,,,,,,,,,,,,,,,,,,
MockEndpoint.expectedHeaderReceived should fail when no exchange received,CAMEL-12947,13199834,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ramu11,AntoineWils,AntoineWils,21/Nov/18 13:07,14/Dec/18 15:59,13/Mar/19 22:20,14/Dec/18 15:59,2.22.1,,,,,,,,,,,,,,,2.24.0,3.0.0,,,,camel-test,,,,,,0,,,,"When expecting headers to be passed to a MockEndpoint that is never called the test should fail if the MockEndpoint was never called.

However it is succeeding.

Here an example of Junit 4 test succeeding when it should fail


{code:java}

import org.apache.camel.EndpointInject;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class Test extends CamelTestSupport {

  @EndpointInject(uri = ""mock:direct:foo"")
  private MockEndpoint fooProducerMock;

  @Override
  public RouteBuilder createRouteBuilder() throws Exception {

    return new RouteBuilder() {

      @Override
      public void configure() throws Exception {}
    };
  }

  @Test
  public void failWhenHeaderAbsent() throws InterruptedException {
    fooProducerMock.expectedHeaderReceived(""ghost"", ""you should be visible"");
    MockEndpoint.assertIsSatisfied(context);
  }
}
{code}",,"ramu11 opened a new pull request #2669: CAMEL-12947:MockEndpoint.expectedHeaderReceived should fail when no e…
URL: https://github.com/apache/camel/pull/2669
 
 
   …xchange received
   
   CAMEL-12947:MockEndpoint.expectedHeaderReceived should fail when no exchange received

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Dec/18 09:05;githubbot;600","davsclaus closed pull request #2669: CAMEL-12947:MockEndpoint.expectedHeaderReceived should fail when no e…
URL: https://github.com/apache/camel/pull/2669
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java b/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java
index 6bb30e4ca5c..1681bfa07e2 100644
--- a/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java
+++ b/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java
@@ -517,6 +517,9 @@ public void expectedMinimumMessageCount(int expectedCount) {
      * <b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)}
      */
     public void expectedHeaderReceived(final String name, final Object value) {
+        if (expectedCount == -1) {
+            expectedMessageCount(1);
+        }
         if (expectedHeaderValues == null) {
             expectedHeaderValues = getCamelContext().getHeadersMapFactory().newMap();
             // we just wants to expects to be called once
diff --git a/components/camel-test/src/test/java/org/apache/camel/test/patterns/MockEndpointFailNoHeaderTest.java b/components/camel-test/src/test/java/org/apache/camel/test/patterns/MockEndpointFailNoHeaderTest.java
new file mode 100644
index 00000000000..931a472b01c
--- /dev/null
+++ b/components/camel-test/src/test/java/org/apache/camel/test/patterns/MockEndpointFailNoHeaderTest.java
@@ -0,0 +1,62 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.test.patterns;
+
+import org.apache.camel.EndpointInject;
+import org.apache.camel.Produce;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Test;
+public class MockEndpointFailNoHeaderTest extends CamelTestSupport {
+
+    @EndpointInject(uri = ""mock:result"")
+    protected MockEndpoint resultEndpoint;
+
+    @Produce(uri = ""direct:start"")
+    protected ProducerTemplate template;
+
+    @Override
+    public boolean isDumpRouteCoverage() {
+        return true;
+    }
+
+    @Test
+    public void withHeaderTestCase() throws InterruptedException {
+        String expectedBody = ""<matched/>"";
+        resultEndpoint.expectedHeaderReceived(""foo"", ""bar"");
+        template.sendBodyAndHeader(expectedBody, ""foo"", ""bar"");
+        resultEndpoint.assertIsSatisfied();
+    }
+    
+    
+    @Test
+    public void noHeaderTestCase() throws InterruptedException {
+        resultEndpoint.expectedHeaderReceived(""foo"", ""bar"");
+        resultEndpoint.assertIsNotSatisfied();
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() {
+        return new RouteBuilder() {
+            public void configure() {
+                from(""direct:start"").filter(header(""foo"").isEqualTo(""bar"")).to(""mock:result"");
+            }
+        };
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Dec/18 10:54;githubbot;600",,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-07 06:43:31.261,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 11 06:34:41 UTC 2018,,,,,,,0|s00qk0:,9223372036854775807,,,,,,,,,,07/Dec/18 06:43;davsclaus;You should tell that 1 message is expected,"09/Dec/18 20:16;AntoineWils;[~davsclaus] it make sense but then the assertion is on the missing message in the count. In other word, you have to know that you forgot to assert the message count. The error did come from a less experienced developer that did not figure out that his mock was not injected in the route.
Isn't it logic that any assertion verifies its prerequisites and fails if they are not met? That was my assumption at least. ","10/Dec/18 07:59;davsclaus;Yeah I think it makes sense to defer that 1 message would arrive when you only set that header expected, like you can do with body today. So its a good improvement.

","10/Dec/18 08:00;davsclaus;Contributions is welcome
https://github.com/apache/camel/blob/master/CONTRIBUTING.md",11/Dec/18 06:34;ramu11;I am looking into it,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Example documentation and feature not using new bundle artifactId,CAMEL-12999,13204247,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,miroslav@mibesis.si,miroslav@mibesis.si,13/Dec/18 14:18,13/Dec/18 14:41,13/Mar/19 22:20,13/Dec/18 14:41,,,,,,,,,,,,,,,,2.24.0,3.0.0,,,,documentation,,,,,,0,,,,"Example sub projects are not using changed groupId, most cases feature.xml is wrong, has to be changed from org.apache.camel to org.apache.camel.example.

 

I've pushed to Camel fork on GitHub, located at:

[https://github.com/mibesis/camel]

 

-I've not seen any Pull request on Camel GitHub page, so I do not know if you take pull requests or not. I can create pull request if you accept.-  (dont mine this, it was long day, and I've missed look existing PRs on GitHub ).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-12-13 14:18:27.0,,,,,,,0|s01hkg:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SftpEndpoint does not allow to use custom process strategy,CAMEL-12991,13203680,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kolas,kolas,11/Dec/18 10:45,12/Dec/18 09:32,13/Mar/19 22:20,12/Dec/18 09:32,2.23.0,,,,,,,,,,,,,,,2.23.1,2.24.0,3.0.0,,,camel-ftp,,,,,,0,,,,"SftpEndpoint always create generic file strategy even processStrategy object is set in endpoint, same code is used in FtpEndpoint so it's not working also
{code:java}
@Override
protected RemoteFileConsumer<SftpRemoteFile> buildConsumer(Processor processor) {
    return new SftpConsumer(this, processor, createRemoteFileOperations(), createGenericFileStrategy());
}{code}
it is working in FileEnpoint
{code:java}
protected FileConsumer newFileConsumer(Processor processor, GenericFileOperations<File> operations) {
    return new FileConsumer(this, processor, operations, processStrategy != null ? processStrategy : createGenericFileStrategy());
}{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-11 13:16:20.414,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 12 09:32:30 UTC 2018,,,,,,,0|s01e3k:,9223372036854775807,,,,,,,,,,11/Dec/18 13:16;davsclaus;You are welcome to provide a PR with a fix,"11/Dec/18 15:30;githubbot;swalendzik opened a new pull request #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Dec/18 15:41;githubbot;onderson commented on a change in pull request #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665#discussion_r240663382
 
 

 ##########
 File path: components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerProcessStrategyTest.java
 ##########
 @@ -0,0 +1,93 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFile;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.GenericFileProcessStrategy;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Test;
+
+/**
+ * @author Seweryn Walendzik on 12/11/18.
 
 Review comment:
   please remove

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Dec/18 15:41;githubbot;onderson commented on a change in pull request #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665#discussion_r240663223
 
 

 ##########
 File path: components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpConsumerProcessStrategyTest.java
 ##########
 @@ -0,0 +1,96 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote.sftp;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFile;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.GenericFileProcessStrategy;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Test;
+
+/**
+ * @author Seweryn Walendzik on 12/11/18.
 
 Review comment:
   please remove

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Dec/18 15:41;githubbot;onderson commented on issue #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665#issuecomment-446248024
 
 
   LGTM

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Dec/18 17:10;githubbot;swalendzik commented on a change in pull request #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665#discussion_r240705851
 
 

 ##########
 File path: components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpConsumerProcessStrategyTest.java
 ##########
 @@ -0,0 +1,96 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote.sftp;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFile;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.GenericFileProcessStrategy;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Test;
+
+/**
+ * @author Seweryn Walendzik on 12/11/18.
 
 Review comment:
   removed

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Dec/18 17:10;githubbot;swalendzik commented on a change in pull request #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665#discussion_r240705944
 
 

 ##########
 File path: components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerProcessStrategyTest.java
 ##########
 @@ -0,0 +1,93 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFile;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.GenericFileProcessStrategy;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Test;
+
+/**
+ * @author Seweryn Walendzik on 12/11/18.
 
 Review comment:
   removed

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Dec/18 09:19;githubbot;davsclaus closed pull request #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java
index 22a72ca61dc..51a590c9ae7 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java
@@ -96,7 +96,7 @@ public String getScheme() {
     @Override
     protected RemoteFileConsumer<FTPFile> buildConsumer(Processor processor) {
         try {
-            return new FtpConsumer(this, processor, createRemoteFileOperations(), createGenericFileStrategy());
+            return new FtpConsumer(this, processor, createRemoteFileOperations(), processStrategy != null ? processStrategy : createGenericFileStrategy());
         } catch (Exception e) {
             throw new FailedToCreateConsumerException(this, e);
         }
diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java
index 069dfa7411d..41456f5d25b 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java
@@ -62,7 +62,7 @@ public void setConfiguration(GenericFileConfiguration configuration) {
 
     @Override
     protected RemoteFileConsumer<SftpRemoteFile> buildConsumer(Processor processor) {
-        return new SftpConsumer(this, processor, createRemoteFileOperations(), createGenericFileStrategy());
+        return new SftpConsumer(this, processor, createRemoteFileOperations(), processStrategy != null ? processStrategy : createGenericFileStrategy());
     }
 
     protected GenericFileProducer<SftpRemoteFile> buildProducer() {
diff --git a/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerProcessStrategyTest.java b/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerProcessStrategyTest.java
new file mode 100644
index 00000000000..13b2c45d9bb
--- /dev/null
+++ b/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerProcessStrategyTest.java
@@ -0,0 +1,90 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFile;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.GenericFileProcessStrategy;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Test;
+
+public class FtpConsumerProcessStrategyTest extends FtpServerTestSupport {
+
+    private MyStrategy myStrategy;
+
+    @Override
+    protected JndiRegistry createRegistry() throws Exception {
+        JndiRegistry jndi = super.createRegistry();
+        myStrategy = new MyStrategy();
+        jndi.bind(""myStrategy"", myStrategy);
+        return jndi;
+    }
+
+    private String getFtpUrl() {
+        return ""ftp://admin@localhost:"" + getPort() + ""/"" + FTP_ROOT_DIR + ""?password=admin&processStrategy=#myStrategy"";
+    }
+
+    @Test
+    public void testFtpConsume() throws Exception {
+        if (!canTest()) {
+            return;
+        }
+
+        sendFile(getFtpUrl(), ""Hello World"", ""hello.txt"");
+
+        String out = consumer.receiveBody(getFtpUrl(), 5000, String.class);
+        assertNotNull(out);
+        assertTrue(out.startsWith(""Hello World""));
+        assertEquals(""Begin should have been invoked 1 times"", 1, myStrategy.getInvoked());
+    }
+
+    private static class MyStrategy implements GenericFileProcessStrategy {
+
+        private volatile int invoked;
+
+        @Override
+        public void prepareOnStartup(GenericFileOperations operations, GenericFileEndpoint endpoint) throws Exception {
+            //noop
+        }
+
+        @Override
+        public boolean begin(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            return true;
+        }
+
+        @Override
+        public void abort(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            //noop
+        }
+
+        @Override
+        public void commit(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            invoked++;
+        }
+
+        @Override
+        public void rollback(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            //noop
+        }
+
+        int getInvoked() {
+            return invoked;
+        }
+    }
+}
\ No newline at end of file
diff --git a/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpConsumerProcessStrategyTest.java b/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpConsumerProcessStrategyTest.java
new file mode 100644
index 00000000000..d3147285b49
--- /dev/null
+++ b/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpConsumerProcessStrategyTest.java
@@ -0,0 +1,93 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote.sftp;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFile;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.GenericFileProcessStrategy;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Test;
+
+public class SftpConsumerProcessStrategyTest extends SftpServerTestSupport {
+
+    private MyStrategy myStrategy;
+
+    @Override
+    public boolean isUseRouteBuilder() {
+        return false;
+    }
+
+    @Override
+    protected JndiRegistry createRegistry() throws Exception {
+        JndiRegistry jndi = super.createRegistry();
+        myStrategy = new MyStrategy();
+        jndi.bind(""myStrategy"", myStrategy);
+        return jndi;
+    }
+
+    @Test
+    public void testSftpConsume() throws Exception {
+        if (!canTest()) {
+            return;
+        }
+
+        // create file using regular file
+        template.sendBodyAndHeader(""file://"" + FTP_ROOT_DIR, ""Hello World"", Exchange.FILE_NAME, ""hello.txt"");
+
+        String out = consumer.receiveBody(""sftp://localhost:"" + getPort() + ""/"" + FTP_ROOT_DIR + ""?username=admin&password=admin&processStrategy=#myStrategy"", 5000, String.class);
+        assertNotNull(out);
+        // Apache SSHD appends \u0000 at last byte in retrieved file
+        assertTrue(out.startsWith(""Hello World""));
+        assertEquals(""CustomProcessStrategy should have been invoked 1 times"", 1, myStrategy.getInvoked());
+    }
+
+    private static class MyStrategy implements GenericFileProcessStrategy {
+
+        private volatile int invoked;
+
+        @Override
+        public void prepareOnStartup(GenericFileOperations operations, GenericFileEndpoint endpoint) throws Exception {
+            //noop
+        }
+
+        @Override
+        public boolean begin(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            return true;
+        }
+
+        @Override
+        public void abort(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            //noop
+        }
+
+        @Override
+        public void commit(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            invoked++;
+        }
+
+        @Override
+        public void rollback(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            //noop
+        }
+
+        int getInvoked() {
+            return invoked;
+        }
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",12/Dec/18 09:32;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,
camel-core: WARN No CamelContext defined yet so cannot inject into bean,CAMEL-12087,13125420,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,16/Dec/17 14:56,03/Dec/18 16:34,13/Mar/19 22:20,09/Oct/18 15:54,2.20.3,2.21.1,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-spring-boot,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12975,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-17 18:10:24.242,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 09 15:12:41 UTC 2018,,,,,,,0|i3nzfz:,9223372036854775807,,,,,,,,,,17/Dec/17 18:10;davsclaus;I think this commit broke camel-netty-http-starter as it fails now,"18/Dec/17 07:19;lb;Fixed now, thx for report it","29/Jan/18 14:23;pascalschumacher;I still get this warning ({{WAR - DefaultCamelBeanPostProcessor - No CamelContext defined yet so cannot inject into bean: routesHealthCheckRepository)}} with camel 2.20.2 and spring-boot 1.5.9.

Is there information I can supply to help you getting this fixed?

 ",29/Jan/18 14:54;lb;Do you have an example that triggers the warning ?,"10/May/18 12:58;lb;
There are some cases where a bean of type CamelContextAware needs to be initialized before the camel context is configured, in particular this can happen with spring boot auto-configuration ordering so i.e. you want to provide a bean that CamelAutoConfiguration loads upon context configuration (such as HealthCheckRepository). 

In this case the camel post processor is not able to inject a camel context instance so I'd propose to add an annotation like @LazyContextBinding which can be used to instruct the post processor that it is ok not to inject a camel context if it is not found.

[~davsclaus] make sense ?
","15/May/18 13:38;davsclaus;Do we really see this problem still? I can understand the lifecycle circular issue you talk about, eg CamelContext is being created itself, and then some custom bean is inject that is supposely camel context aware that gets a null camel context as its not ready yet.

But that custom bean still need easy access to CamelContext. Passing in null would be bad. 

Maybe there is a way to register those beans on camelcontext in a temporary list that they should have camel context injected later. And then CamelContext will inject itself later in its doStart lifecycle.

 ","15/May/18 13:49;lb;Yeah this is basically what @LazyContextBinding or @DeferredContextBinding is meant, once the camel context is starting up, it search for bean of type CamelContextAware and set itself as camel context if they are annotated with one of the two annotations. The post processor then knows that it is ok not to set the camel context if it is not yet available.","15/May/18 13:51;davsclaus;Perfect

+1","09/Oct/18 14:06;githubbot;GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/2558

    CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-12087

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2558.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2558
    
----
commit fda0ce6d16f812b4f1f60a87a4b417786250b69f
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-10-09T14:06:13Z

    CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean

----
","09/Oct/18 14:09;githubbot;oscerd commented on issue #2558: CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean
URL: https://github.com/apache/camel/pull/2558#issuecomment-428206855
 
 
   @davsclaus, since this is a bug I'm thinking about backporting it on 2.21.x and 2.22.x. Does it work for you?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Oct/18 14:26;githubbot;davsclaus commented on issue #2558: CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean
URL: https://github.com/apache/camel/pull/2558#issuecomment-428213410
 
 
   +1
   
   Yeah sure although its a harmless WARN but would be nice to not show. 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Oct/18 14:30;githubbot;oscerd commented on issue #2558: CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean
URL: https://github.com/apache/camel/pull/2558#issuecomment-428214869
 
 
   Maybe it's better to change to debug?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Oct/18 15:04;githubbot;lburgazzoli commented on issue #2558: CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean
URL: https://github.com/apache/camel/pull/2558#issuecomment-428228640
 
 
   If there's no objection, I'm going to merge it. the log level can be changed later 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Oct/18 15:05;githubbot;oscerd commented on issue #2558: CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean
URL: https://github.com/apache/camel/pull/2558#issuecomment-428229004
 
 
   Go for it

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Oct/18 15:12;githubbot;lburgazzoli closed pull request #2558: CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean
URL: https://github.com/apache/camel/pull/2558
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/DeferredContextBinding.java b/camel-core/src/main/java/org/apache/camel/DeferredContextBinding.java
new file mode 100644
index 00000000000..1bf79272a0c
--- /dev/null
+++ b/camel-core/src/main/java/org/apache/camel/DeferredContextBinding.java
@@ -0,0 +1,36 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Used to indicate that if the target type is {@link CamelContextAware}, the
+ * context does not need to be mandatory injected during bean post processing but
+ * can be injected later on as example during Camel Context configuration.
+ *
+ * See <a href=""https://issues.apache.org/jira/browse/CAMEL-12087"">CAMEL-12087</a> for additional information.
+ */
+@Retention(RetentionPolicy.RUNTIME)
+@Documented
+@Target({ElementType.TYPE})
+public @interface DeferredContextBinding {
+}
diff --git a/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelBeanPostProcessor.java b/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelBeanPostProcessor.java
index 10966266521..63cf335b726 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelBeanPostProcessor.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelBeanPostProcessor.java
@@ -22,6 +22,7 @@
 import org.apache.camel.BeanInject;
 import org.apache.camel.CamelContext;
 import org.apache.camel.CamelContextAware;
+import org.apache.camel.DeferredContextBinding;
 import org.apache.camel.EndpointInject;
 import org.apache.camel.Produce;
 import org.apache.camel.PropertyInject;
@@ -64,7 +65,7 @@ public DefaultCamelBeanPostProcessor(CamelContext camelContext) {
      * initialization callbacks (like <code>afterPropertiesSet</code>
      * or a custom init-method). The bean will already be populated with property values.
      * The returned bean instance may be a wrapper around the original.
-     * 
+     *
      * @param bean the new bean instance
      * @param beanName the name of the bean
      * @return the bean instance to use, either the original or a wrapped one; if
@@ -84,10 +85,12 @@ public Object postProcessBeforeInitialization(Object bean, String beanName) thro
 
         if (bean instanceof CamelContextAware && canSetCamelContext(bean, beanName)) {
             CamelContextAware contextAware = (CamelContextAware)bean;
+            DeferredContextBinding deferredBinding = bean.getClass().getAnnotation(DeferredContextBinding.class);
             CamelContext context = getOrLookupCamelContext();
-            if (context == null) {
+
+            if (context == null && deferredBinding == null) {
                 LOG.warn(""No CamelContext defined yet so cannot inject into bean: {}"", beanName);
-            } else {
+            } else if (context != null) {
                 contextAware.setCamelContext(context);
             }
         }
@@ -100,7 +103,7 @@ public Object postProcessBeforeInitialization(Object bean, String beanName) thro
      * initialization callbacks (like <code>afterPropertiesSet</code>
      * or a custom init-method). The bean will already be populated with property values.
      * The returned bean instance may be a wrapper around the original.
-     * 
+     *
      * @param bean the new bean instance
      * @param beanName the name of the bean
      * @return the bean instance to use, either the original or a wrapped one; if
@@ -193,7 +196,7 @@ public void injectField(Field field, String endpointUri, String endpointRef, Str
                                Object bean, String beanName) {
         injectField(field, endpointUri, endpointRef, endpointProperty, bean, beanName, true);
     }
-    
+
     public void injectField(Field field, String endpointUri, String endpointRef, String endpointProperty,
                                Object bean, String beanName, boolean binding) {
         ReflectionHelper.setField(field, bean,
diff --git a/camel-core/src/main/java/org/apache/camel/impl/health/RoutesHealthCheckRepository.java b/camel-core/src/main/java/org/apache/camel/impl/health/RoutesHealthCheckRepository.java
index 637a805f9d6..7727b800919 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/health/RoutesHealthCheckRepository.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/health/RoutesHealthCheckRepository.java
@@ -29,11 +29,13 @@
 
 import org.apache.camel.CamelContext;
 import org.apache.camel.CamelContextAware;
+import org.apache.camel.DeferredContextBinding;
 import org.apache.camel.Route;
 import org.apache.camel.api.management.mbean.ManagedRouteMBean;
 import org.apache.camel.health.HealthCheck;
 import org.apache.camel.health.HealthCheckRepository;
 
+@DeferredContextBinding
 public class RoutesHealthCheckRepository implements CamelContextAware, HealthCheckRepository {
     private final ConcurrentMap<Route, HealthCheck> checks;
     private Set<String> blacklist;


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Oct/18 15:12;githubbot;Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/2558
",,,,,,,,,,,,,,,,,
Camel-AHC-WS: reconnect exception is not passed to exception handler,CAMEL-12951,13200051,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,jukka.aalto,jukka.aalto,22/Nov/18 11:17,27/Nov/18 10:15,13/Mar/19 22:20,27/Nov/18 10:15,2.22.2,,,,,,,,,,,,,,,2.24.0,,,,,camel-ahc-ws,,,,,,0,,,,"When WsEndPoint reconnect-method fails in line 172 to create connection it throws an exception which is logged but it should also be given to exception handler.

This kind of situation happens when server is shut down while connection is open. First client tries to reconnect but when reconnect fails, client stops trying.

I'm trying to implement a feature which tries continuously to reconnect to server when the server is down. Connection state (open, disconnected or trying to connect) should also be indicated.

If exception is passed to exception handler then it would be possible to register exception handler outside Camel. The purpose of this exception handler is to shut down Camel context and recreate it again in order to reconnect. With this kind of setup I can continuously try to reconnect and also figure out the current connection state.

 

[https://github.com/apache/camel/blob/master/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java]

 
{code:java}
@Override
public void onClose(WebSocket websocket, int code, String reason) {
   LOG.debug(""websocket closed - reconnecting"");
   try {
      reConnect();
   } catch (Exception e) {
      LOG.warn(""Error re-connecting to websocket"", e);
   }
}
{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-11-22 11:17:57.0,,,,,,,0|s00rvc:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-AHC-WS: does not send response to ping frame,CAMEL-12952,13200053,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,jukka.aalto,jukka.aalto,22/Nov/18 11:24,27/Nov/18 10:15,13/Mar/19 22:20,27/Nov/18 10:15,,,,,,,,,,,,,,,,2.24.0,,,,,camel-ahc-ws,,,,,,0,,,,"Websocket client should send response to ping frame. See document

[https://tools.ietf.org/html/rfc6455#page-37]

Client should send pong response.

The fix should be trivial because WsListener has empty default onPing-method. The implementation of this method should call webSocket sendPong.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-11-22 11:24:34.0,,,,,,,0|s00rvs:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-AHC-WS: Consumer parameters are not set,CAMEL-12932,13197808,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,jukka.aalto,jukka.aalto,12/Nov/18 14:04,15/Nov/18 08:54,13/Mar/19 22:20,15/Nov/18 08:54,2.22.1,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,camel-ahc-ws,,,,,,0,,,,"Trying to set bridgeErrorHandler with following url, ""ahc-ws://localhost?consumer.bridgeErrorHandler=true"", but it did not work.

 

There should probably be configureConsumer-method call in line 71

[https://github.com/apache/camel/blob/master/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-15 08:54:50.034,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 15 08:54:50 UTC 2018,,,,,,,0|s00e5k:,9223372036854775807,,,,,,,,,,12/Nov/18 14:19;jukka.aalto;I will try to fix this.,"15/Nov/18 08:54;ancosen;Since we want to release 2.23.0 probably the next weekend, I had to fix this. Thanks for reporting.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Action Request Converter is reseting ID on index request to header that is not set,CAMEL-12912,13195942,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,tim.sexton,tim.sexton,02/Nov/18 17:25,09/Nov/18 07:20,13/Mar/19 22:20,09/Nov/18 07:20,2.22.1,,,,,,,,,,,,,,,2.23.0,,,,,camel-elasticsearch-rest,,,,,,0,,,,"Currently, the code in the Action Request Converter for the toIndexRequest method has this: 
{code:java}
return createIndexRequest(document, exchange)
.id(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_ID, String.class));

{code}
when this method is used it will always set the ID to that header (which is not being set at an earlier time in the code) which will cause the ID to be null (which is a problem for external version types) 

 

This header either needs to be set earlier in the code or the id needs to be set a different way.  

Another way to handle this could be just to put in the documentation that if you want to set a custom id you will need to use this header. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-11-02 17:25:37.0,,,,,,,0|s002ns:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http4 - The sslContextParameters option should be documented on endpoint as well,CAMEL-12916,13196790,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,07/Nov/18 10:47,07/Nov/18 10:50,13/Mar/19 22:20,07/Nov/18 10:50,2.22.1,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,camel-http4,tooling,,,,,0,,,,"Reported on gitter
https://gitter.im/apache/apache-camel?at=5be0bcd7de33dd0c96d547b3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-11-07 10:47:40.0,,,,,,,0|s007vs:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Tracing is not working for route with redelivery strategy,CAMEL-12626,13170277,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,marvinstorage,marvinstorage,05/Jul/18 14:01,24/Oct/18 11:07,13/Mar/19 22:20,09/Jul/18 13:21,2.20.2,,,,,,,,,,,,,,,2.21.4,2.22.2,2.23.0,,,,,,,,,0,camel,"camel-core,",tracer,"Camel Tracing is not being executed if there is redelivery strategy defined.
 In our context we have switched on the camel Tracer with the following:
{code:java}
    public static void main(String[] args) throws Exception {
        DefaultCamelContext context = new DefaultCamelContext();
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {

                // If errorHandler with redelivery is removed then tracer output is visible again.
                errorHandler(new DefaultErrorHandlerBuilder().maximumRedeliveries(3).redeliveryDelay(2000L));

                from(""direct:start"").process(new Processor() {
                    public void process(Exchange exchange) throws Exception {
                        System.out.println(""PROCESSED"");
                    }
                });
            }
        });

        // Enable Tracer.
        context.setTracing(true);
        context.start();
        ProducerTemplate template = context.createProducerTemplate();
        template.sendBody(""direct:start"", ""foo"");
    }
{code}
We noticed that we were missing output from the tracer that we were excepting.
If you remove the errohandler with redelivery you can see the output we expected:

 
{code:java}
[main] INFO org.apache.camel.processor.interceptor.Tracer - ID-rmm-xxx-xxx-x-x >>> (route1) from(direct://start) --> Processor@0x130d63be <<< Pattern:InOnly, Headers:{breadcrumbId=ID-rmm-xxx-xxx-x-x}, BodyType:String, Body:foo
{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-09 12:49:31.216,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 24 11:07:05 UTC 2018,,,,,,,0|i3vkt3:,9223372036854775807,,,,,,,,,,09/Jul/18 12:49;davsclaus;CAMEL-11483 did some internal optimisation that cause this,"24/Oct/18 07:41;NickUK;Would it be possible to get this in one of the camel 2.21.x (pre spring boot 2) releases? 

We can no longer use the tracer as we have a re-delivery strategy defined.",24/Oct/18 10:01;davsclaus;Yeah I backported this,24/Oct/18 11:07;NickUK;Great (y),,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The camel-maven-package-plugin issue wrong short java type,CAMEL-12888,13191998,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,aldettinger,aldettinger,aldettinger,16/Oct/18 17:46,20/Oct/18 20:37,13/Mar/19 22:20,20/Oct/18 20:37,2.23.0,,,,,,,,,,,,,,,2.23.0,,,,,tooling,,,,,,0,,,,"For instance, [the seda component documentation |https://github.com/apache/camel/blob/master/camel-core/src/main/docs/seda-component.adoc] exhibits *Exchange>* as the type for the option *defaultQueueFactory* whereas we should issue *BlockingQueueFactory*.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-16 18:06:08.497,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 20 20:37:20 UTC 2018,,,,,,,0|i3z9nr:,9223372036854775807,,,,,,,,,,"16/Oct/18 18:06;githubbot;aldettinger opened a new pull request #2567: CAMEL-12888: Fixed the short java type generation in camel-package-ma…
URL: https://github.com/apache/camel/pull/2567
 
 
   …ven-plugin
   
   More details in [CAMEL-12888](https://issues.apache.org/jira/browse/CAMEL-12888).

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Oct/18 18:06;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/2567

    CAMEL-12888: Fixed the short java type generation in camel-package-ma…

    …ven-plugin
    
    More details in [CAMEL-12888](https://issues.apache.org/jira/browse/CAMEL-12888).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2567.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2567
    
----
commit fc76cae5634ae7961644f92cfa2222d0e475680a
Author: aldettinger <aldettinger@...>
Date:   2018-10-16T18:03:56Z

    CAMEL-12888: Fixed the short java type generation in camel-package-maven-plugin

----
","16/Oct/18 18:07;githubbot;aldettinger commented on issue #2567: CAMEL-12888: Fixed the short java type generation in camel-package-ma…
URL: https://github.com/apache/camel/pull/2567#issuecomment-430339540
 
 
   Could you please have a look ? If the approach fits, I would fix short java type in other parts of the camel-package-maven-plugin model classes.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Oct/18 19:57;githubbot;onderson commented on a change in pull request #2567: CAMEL-12888: Fixed the short java type generation in camel-package-ma…
URL: https://github.com/apache/camel/pull/2567#discussion_r225686902
 
 

 ##########
 File path: tooling/maven/camel-package-maven-plugin/src/test/java/org/apache/camel/maven/packaging/model/ComponentOptionModelTest.java
 ##########
 @@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.maven.packaging.model;
+
+import java.util.stream.Stream;
+
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import static org.junit.jupiter.params.provider.Arguments.arguments;
+
+public class ComponentOptionModelTest {
+
+    ComponentOptionModel componentOptionModelUnderTest;
+
+    @BeforeEach
+    public void setup() {
+        componentOptionModelUnderTest = new ComponentOptionModel();
+    }
+
+    static Stream<Arguments> getShortJavaTypeVarations() {
+        return Stream.of(
+                         arguments(""String"", ""String""),
+                         arguments(""String"", ""java.lang.String""),
+                         arguments(""List"", ""List<String>""),
+                         arguments(""List"", ""java.util.List<String>""),
+                         arguments(""List"", ""List<java.lang.String>""),
 
 Review comment:
   maybe such as of nesting generic types as the following
   `
   java.util.List<java.util.Map<java.lang.String,java.lang.Integer>>
   `
   can also be added?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Oct/18 06:19;githubbot;oscerd commented on a change in pull request #2567: CAMEL-12888: Fixed the short java type generation in camel-package-ma…
URL: https://github.com/apache/camel/pull/2567#discussion_r225791491
 
 

 ##########
 File path: tooling/maven/camel-package-maven-plugin/src/test/java/org/apache/camel/maven/packaging/model/ComponentOptionModelTest.java
 ##########
 @@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.maven.packaging.model;
+
+import java.util.stream.Stream;
+
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import static org.junit.jupiter.params.provider.Arguments.arguments;
+
+public class ComponentOptionModelTest {
+
+    ComponentOptionModel componentOptionModelUnderTest;
+
+    @BeforeEach
+    public void setup() {
+        componentOptionModelUnderTest = new ComponentOptionModel();
+    }
+
+    static Stream<Arguments> getShortJavaTypeVarations() {
+        return Stream.of(
+                         arguments(""String"", ""String""),
+                         arguments(""String"", ""java.lang.String""),
+                         arguments(""List"", ""List<String>""),
+                         arguments(""List"", ""java.util.List<String>""),
+                         arguments(""List"", ""List<java.lang.String>""),
 
 Review comment:
   Yeah, it would be great

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Oct/18 19:01;githubbot;aldettinger commented on issue #2567: CAMEL-12888: Fixed the short java type generation in camel-package-ma…
URL: https://github.com/apache/camel/pull/2567#issuecomment-430749645
 
 
   Nice catch, I will add this test indeed and apply the same kind of correction on other model classes from the camel-package-maven-plugin. Thanks @onderson and @oscerd.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Oct/18 19:01;githubbot;aldettinger closed pull request #2567: CAMEL-12888: Fixed the short java type generation in camel-package-ma…
URL: https://github.com/apache/camel/pull/2567
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/docs/seda-component.adoc b/camel-core/src/main/docs/seda-component.adoc
index d12159c8f1d..cdc99f3ef8d 100644
--- a/camel-core/src/main/docs/seda-component.adoc
+++ b/camel-core/src/main/docs/seda-component.adoc
@@ -48,7 +48,7 @@ The SEDA component supports 6 options, which are listed below.
 | Name | Description | Default | Type
 | *queueSize* (advanced) | Sets the default maximum capacity of the SEDA queue (i.e., the number of messages it can hold). | 1000 | int
 | *concurrentConsumers* (consumer) | Sets the default number of concurrent threads processing exchanges. | 1 | int
-| *defaultQueueFactory* (advanced) | Sets the default queue factory. |  | Exchange>
+| *defaultQueueFactory* (advanced) | Sets the default queue factory. |  | BlockingQueueFactory
 | *defaultBlockWhenFull* (producer) | Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default, an exception will be thrown stating that the queue is full. By enabling this option, the calling thread will instead block and wait until the message can be accepted. | false | boolean
 | *defaultOfferTimeout* (producer) | Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default, an exception will be thrown stating that the queue is full. By enabling this option, where a configured timeout can be added to the block case. Utilizing the .offer(timeout) method of the underlining java queue |  | long
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
diff --git a/camel-core/src/main/docs/stub-component.adoc b/camel-core/src/main/docs/stub-component.adoc
index eb112d36cd9..8f7840c9ba9 100644
--- a/camel-core/src/main/docs/stub-component.adoc
+++ b/camel-core/src/main/docs/stub-component.adoc
@@ -38,7 +38,7 @@ The Stub component supports 6 options, which are listed below.
 | Name | Description | Default | Type
 | *queueSize* (advanced) | Sets the default maximum capacity of the SEDA queue (i.e., the number of messages it can hold). | 1000 | int
 | *concurrentConsumers* (consumer) | Sets the default number of concurrent threads processing exchanges. | 1 | int
-| *defaultQueueFactory* (advanced) | Sets the default queue factory. |  | Exchange>
+| *defaultQueueFactory* (advanced) | Sets the default queue factory. |  | BlockingQueueFactory
 | *defaultBlockWhenFull* (producer) | Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default, an exception will be thrown stating that the queue is full. By enabling this option, the calling thread will instead block and wait until the message can be accepted. | false | boolean
 | *defaultOfferTimeout* (producer) | Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default, an exception will be thrown stating that the queue is full. By enabling this option, where a configured timeout can be added to the block case. Utilizing the .offer(timeout) method of the underlining java queue |  | long
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
diff --git a/camel-core/src/main/docs/vm-component.adoc b/camel-core/src/main/docs/vm-component.adoc
index 8e1c3a9128f..9b9279a8b0e 100644
--- a/camel-core/src/main/docs/vm-component.adoc
+++ b/camel-core/src/main/docs/vm-component.adoc
@@ -68,7 +68,7 @@ The VM component supports 6 options, which are listed below.
 | Name | Description | Default | Type
 | *queueSize* (advanced) | Sets the default maximum capacity of the SEDA queue (i.e., the number of messages it can hold). | 1000 | int
 | *concurrentConsumers* (consumer) | Sets the default number of concurrent threads processing exchanges. | 1 | int
-| *defaultQueueFactory* (advanced) | Sets the default queue factory. |  | Exchange>
+| *defaultQueueFactory* (advanced) | Sets the default queue factory. |  | BlockingQueueFactory
 | *defaultBlockWhenFull* (producer) | Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default, an exception will be thrown stating that the queue is full. By enabling this option, the calling thread will instead block and wait until the message can be accepted. | false | boolean
 | *defaultOfferTimeout* (producer) | Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default, an exception will be thrown stating that the queue is full. By enabling this option, where a configured timeout can be added to the block case. Utilizing the .offer(timeout) method of the underlining java queue |  | long
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
diff --git a/components/camel-ehcache/src/main/docs/ehcache-component.adoc b/components/camel-ehcache/src/main/docs/ehcache-component.adoc
index 05a787aa64c..f4cc6c81587 100644
--- a/components/camel-ehcache/src/main/docs/ehcache-component.adoc
+++ b/components/camel-ehcache/src/main/docs/ehcache-component.adoc
@@ -48,7 +48,7 @@ The Ehcache component supports 7 options, which are listed below.
 | *configuration* (advanced) | Sets the global component configuration |  | EhcacheConfiguration
 | *cacheManager* (common) | The cache manager |  | CacheManager
 | *cacheManager Configuration* (common) | The cache manager configuration |  | Configuration
-| *cacheConfiguration* (common) | The default cache configuration to be used to create caches. |  | CacheConfiguration<?,?>
+| *cacheConfiguration* (common) | The default cache configuration to be used to create caches. |  | CacheConfiguration
 | *cachesConfigurations* (common) | A map of caches configurations to be used to create caches. |  | Map
 | *cacheConfigurationUri* (common) | URI pointing to the Ehcache XML configuration file's location |  | String
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
diff --git a/components/camel-guava-eventbus/src/main/docs/guava-eventbus-component.adoc b/components/camel-guava-eventbus/src/main/docs/guava-eventbus-component.adoc
index 9f3eeebd403..cdf00cd26be 100644
--- a/components/camel-guava-eventbus/src/main/docs/guava-eventbus-component.adoc
+++ b/components/camel-guava-eventbus/src/main/docs/guava-eventbus-component.adoc
@@ -54,7 +54,7 @@ The Guava EventBus component supports 3 options, which are listed below.
 |===
 | Name | Description | Default | Type
 | *eventBus* (common) | To use the given Guava EventBus instance |  | EventBus
-| *listenerInterface* (common) | The interface with method(s) marked with the Subscribe annotation. Dynamic proxy will be created over the interface so it could be registered as the EventBus listener. Particularly useful when creating multi-event listeners and for handling DeadEvent properly. This option cannot be used together with eventClass option. |  | Class<?>
+| *listenerInterface* (common) | The interface with method(s) marked with the Subscribe annotation. Dynamic proxy will be created over the interface so it could be registered as the EventBus listener. Particularly useful when creating multi-event listeners and for handling DeadEvent properly. This option cannot be used together with eventClass option. |  | Class
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
 |===
 // component options: END
diff --git a/components/camel-milo/src/main/docs/milo-server-component.adoc b/components/camel-milo/src/main/docs/milo-server-component.adoc
index 696f00ccd99..da228426844 100644
--- a/components/camel-milo/src/main/docs/milo-server-component.adoc
+++ b/components/camel-milo/src/main/docs/milo-server-component.adoc
@@ -42,7 +42,7 @@ The OPC UA Server component supports 20 options, which are listed below.
 | *serverName* (common) | Server name |  | String
 | *hostname* (common) | Server hostname |  | String
 | *securityPolicies* (common) | Security policies |  | Set
-| *securityPoliciesById* (common) | Security policies by URI or name |  | String>
+| *securityPoliciesById* (common) | Security policies by URI or name |  | Collection
 | *userAuthentication Credentials* (common) | Set user password combinations in the form of user1:pwd1,user2:pwd2 Usernames and passwords will be URL decoded |  | String
 | *enableAnonymous Authentication* (common) | Enable anonymous authentication, disabled by default | false | boolean
 | *usernameSecurityPolicy Uri* (common) | Set the UserTokenPolicy used when |  | SecurityPolicy
@@ -50,7 +50,7 @@ The OPC UA Server component supports 20 options, which are listed below.
 | *buildInfo* (common) | Server build info |  | BuildInfo
 | *serverCertificate* (common) | Server certificate |  | Result
 | *certificateManager* (common) | Server certificate manager |  | CertificateManager
-| *certificateValidator* (common) | Validator for client certificates |  | CertificateValidator>
+| *certificateValidator* (common) | Validator for client certificates |  | Supplier
 | *defaultCertificate Validator* (common) | Validator for client certificates using default file based approach |  | File
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
 |===
diff --git a/tooling/maven/camel-package-maven-plugin/pom.xml b/tooling/maven/camel-package-maven-plugin/pom.xml
index 50afd0f6fc4..ed4a0b73fbc 100644
--- a/tooling/maven/camel-package-maven-plugin/pom.xml
+++ b/tooling/maven/camel-package-maven-plugin/pom.xml
@@ -172,6 +172,26 @@
       <groupId>org.apache.camel</groupId>
       <artifactId>spi-annotations</artifactId>
     </dependency>
+
+    <!-- testing -->
+    <dependency>
+      <groupId>org.junit.jupiter</groupId>
+      <artifactId>junit-jupiter-api</artifactId>
+      <version>${junit-jupiter-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.junit.jupiter</groupId>
+      <artifactId>junit-jupiter-engine</artifactId>
+      <version>${junit-jupiter-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.junit.jupiter</groupId>
+      <artifactId>junit-jupiter-params</artifactId>
+      <version>${junit-jupiter-version}</version>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
 
   <profiles>
diff --git a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/model/ComponentOptionModel.java b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/model/ComponentOptionModel.java
index d74f314510c..ba758a546ec 100644
--- a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/model/ComponentOptionModel.java
+++ b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/model/ComponentOptionModel.java
@@ -155,20 +155,8 @@ public String getShortJavaType() {
     }
 
     public String getShortJavaType(int watermark) {
-        if (javaType.startsWith(""java.util.Map"")) {
-            return ""Map"";
-        } else if (javaType.startsWith(""java.util.Set"")) {
-            return ""Set"";
-        } else if (javaType.startsWith(""java.util.List"")) {
-            return ""List"";
-        }
-
-        String text = javaType;
 
-        int pos = text.lastIndexOf(""."");
-        if (pos != -1) {
-            text = text.substring(pos + 1);
-        }
+        String text = javaType.replaceAll(""<.*>"", """").replaceAll("".*[.]([^.]+)"", ""$1"");
 
         // if its some kind of java object then lets wrap it as its long
         if (""object"".equals(type)) {
diff --git a/tooling/maven/camel-package-maven-plugin/src/test/java/org/apache/camel/maven/packaging/model/ComponentOptionModelTest.java b/tooling/maven/camel-package-maven-plugin/src/test/java/org/apache/camel/maven/packaging/model/ComponentOptionModelTest.java
new file mode 100644
index 00000000000..dc43fd7e3ef
--- /dev/null
+++ b/tooling/maven/camel-package-maven-plugin/src/test/java/org/apache/camel/maven/packaging/model/ComponentOptionModelTest.java
@@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.maven.packaging.model;
+
+import java.util.stream.Stream;
+
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import static org.junit.jupiter.params.provider.Arguments.arguments;
+
+public class ComponentOptionModelTest {
+
+    ComponentOptionModel componentOptionModelUnderTest;
+
+    @BeforeEach
+    public void setup() {
+        componentOptionModelUnderTest = new ComponentOptionModel();
+    }
+
+    static Stream<Arguments> getShortJavaTypeVarations() {
+        return Stream.of(
+                         arguments(""String"", ""String""),
+                         arguments(""String"", ""java.lang.String""),
+                         arguments(""List"", ""List<String>""),
+                         arguments(""List"", ""java.util.List<String>""),
+                         arguments(""List"", ""List<java.lang.String>""),
+                         arguments(""BlockingQueue"", ""java.util.concurrent.BlockingQueue<org.apache.camel.Exchange>""),
+                         arguments(""List"", ""java.util.List<Map<String,Integer>>""),
+                         arguments(""List"", ""java.util.List<Map<java.lang.String,Integer>>""),
+                         arguments(""List"", ""java.util.List<Map<String,java.lang.Integer>>""),
+                         arguments(""List"", ""java.util.List<Map<java.lang.String,java.lang.Integer>>""));
+    };
+
+    @ParameterizedTest
+    @MethodSource(""getShortJavaTypeVarations"")
+    public void getShortTypeShouldSucceed(String expectedShortJavaType, String javaType) {
+        componentOptionModelUnderTest.setJavaType(javaType);
+        Assertions.assertEquals(expectedShortJavaType, componentOptionModelUnderTest.getShortJavaType());
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",17/Oct/18 19:13;aldettinger;I've corrected the ComponentOptionModel part. I will report the same kind of fix for other parts of the model.,"20/Oct/18 20:37;aldettinger;Ok, all model classes have been fixed.",,,,,,,,,,,,,,,,,,,,,,,,
Camel Jms headers missing if producer endpoint has transferExchange=true,CAMEL-12882,13191709,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,15/Oct/18 20:33,16/Oct/18 07:30,13/Mar/19 22:20,16/Oct/18 07:30,2.21.0,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-jms,,,,,,0,,,,The JMS headers are not being extracted if you use transferExchange=true.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-16 04:56:27.242,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 16 06:09:50 UTC 2018,,,,,,,0|i3z7vr:,9223372036854775807,,,,,,,,,,16/Oct/18 04:56;ramu11;in my tests I do get Jms headers  in camel version 2.21.0.fuse-710018-redhat-00001,"16/Oct/18 05:04;ramu11;
{noformat}
<dependencies> <dependency> <groupId>org.apache.camel</groupId> <artifactId>camel-core</artifactId> <version>2.21.0.fuse-710018-redhat-00001</version> </dependency> <dependency> <groupId>org.apache.camel</groupId> <artifactId>camel-jms</artifactId> <version>2.21.0.fuse-710018-redhat-00001</version> </dependency> <dependency> <groupId>org.apache.camel</groupId> <artifactId>camel-spring</artifactId> <version>2.21.0.fuse-710018-redhat-00001</version> </dependency> <dependency> <groupId>org.fusesource</groupId> <artifactId>activemq-client</artifactId> <version>7.1.0.fuse-710018-redhat-00001</version> </dependency> <dependency> <groupId>org.fusesource</groupId> <artifactId>camel-activemq</artifactId> <version>7.1.0.fuse-710018-redhat-00001</version> </dependency>
{noformat}
","16/Oct/18 05:08;ramu11;
{code:java}
 <bean id=""amqRedeliveryPolicy"" class=""org.apache.activemq.RedeliveryPolicy"">
        <property name=""initialRedeliveryDelay"" value=""1000""/>
		<property name=""backOffMultiplier"" value=""5""/>
        <property name=""useExponentialBackOff"" value=""false""/>
        <property name=""maximumRedeliveries"" value=""3""/>
        <property name=""maximumRedeliveryDelay"" value=""-1""/>	
	
    </bean>
    
     <bean id=""jmsConnectionFactory"" class=""org.apache.activemq.ActiveMQConnectionFactory"">
         <property name=""brokerURL"" value=""failover:tcp://localhost:61616""/>
        <property name=""userName"" value=""admin""/>
        <property name=""password"" value=""admin""/>
        <property name=""trustAllPackages"" value=""true""/>
    </bean>

    <bean primary=""true"" id=""pooledConnectionFactory"" class=""org.apache.activemq.pool.PooledConnectionFactory"" init-method=""start"" destroy-method=""stop"">
        <property name=""maxConnections"" value=""10""/>
        <property name=""connectionFactory"" ref=""jmsConnectionFactory""/>
    </bean>

    <bean id=""jmsConfig"" class=""org.apache.activemq.camel.component.ActiveMQConfiguration"">
        <property name=""connectionFactory"" ref=""pooledConnectionFactory""/>
        <property name=""concurrentConsumers"" value=""2""/>
	   <!--  <property name=""acknowledgementModeName"" value=""CLIENT_ACKNOWLEDGE""/> -->
    </bean>

    <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
        <property name=""configuration"" ref=""jmsConfig""/>
    </bean>
    
    <bean id=""helloBean"" class=""com.mycompany.camel.activemq.HelloBean"">
		<property name=""say"" value=""hello how are you"" />
	</bean>
	
    
    <bean class=""com.mycompany.camel.activemq.HeaderProcessor"" id=""hproc""/>
    <bean class=""com.mycompany.camel.activemq.MyPrepareProcessor"" id=""myPrepare""/>
    <bean class=""com.mycompany.camel.activemq.MyExcProcessor"" id=""exc""/>
    <camelContext id=""camelContext-87aa5925-e951-425d-b911-1ce8c888bb6d"" xmlns=""http://camel.apache.org/schema/spring"">
        <errorHandler deadLetterUri=""activemq:dlq"" id=""dlc"" type=""DeadLetterChannel""/>
         
               <route id=""_route1"">
          	<from uri=""timer:foo?period=1000"" />
          	 <setBody>
				 <method ref=""helloBean"" method=""hello"" />
			</setBody>
          <to id=""_to1"" uri=""activemq:personnel.records?transferExchange=true""/>
           
        </route>  
        
        <route id=""_route3"">
            <from id=""_from3"" uri=""activemq:personnel.records?transferExchange=true""/>
           <!--  <log message=""===this is exchange.headers in _message-handling-receive-msg: ${headers}"" loggingLevel=""WARN"" /> -->
             <log message=""===this is exchange.headers in _message-handling-receive-msg: ${headers}""  />
            <log message=""===this is exchange.properties in _message-handling-receive-msg: ${exchange.properties}""/>
            <to id=""_to3"" uri=""activemq:queue:order.out""/>
        </route>
        
    </camelContext>
</beans>
{code}
",16/Oct/18 05:29;ancosen;This is upstream. It's not Fuse.,"16/Oct/18 06:09;davsclaus;Yeah not sure but there can maybe be some situatiuons where the headers get mapped. But I could reproduce this easily from one of the existing unit tests, and so looked at implementing a fix so they are always mapped.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Slack: Must configure Consumer before using it.,CAMEL-12867,13190041,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,ancosen,ancosen,08/Oct/18 09:33,08/Oct/18 09:37,13/Mar/19 22:20,08/Oct/18 09:37,,,,,,,,,,,,,,,,2.23.0,,,,,camel-slack,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-10-08 09:33:25.0,,,,,,,0|i3yxpb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContext Start command shouldn't start a Suspended context,CAMEL-12843,13188361,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ffang,ffang,ffang,30/Sep/18 01:28,08/Oct/18 02:05,13/Mar/19 22:20,08/Oct/18 02:05,2.21.0,2.22.0,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,karaf,,,,,,0,,,,"We found this problem in Karaf camel command, but think it should also exist in other camel command usecases.

In Karaf
{code:java}
karaf@root()> camel:context-list
 Context        Status              Total #       Failed #     Inflight #   Uptime         
 -------        ------              -------       --------     ----------   ------         
 camel-1        Started                   0              0              0   1.366 seconds  
karaf@root()> camel:context-suspend camel-1
karaf@root()> camel:context-list
 Context        Status              Total #       Failed #     Inflight #   Uptime         
 -------        ------              -------       --------     ----------   ------         
 camel-1        Suspended                 0              0              0   7.554 seconds  
karaf@root()> camel:context-start camel-1 
karaf@root()> camel:context-list
 Context        Status              Total #       Failed #     Inflight #   Uptime        
 -------        ------              -------       --------     ----------   ------        
 camel-1        Started                   0              0              0   2 minutes
{code}
So after start a suspended context, there is still one in context-list. But in JMX tree there are two camel-1 context. This mismatch should be addressed. Either improve ContextList command or if it's a suspended context, throw a RuntimeException and let users resume it other than starting it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30/Sep/18 01:30;ffang;CAMEL-12843.patch;https://issues.apache.org/jira/secure/attachment/12941847/CAMEL-12843.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2018-10-01 11:27:24.521,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 08 00:13:53 UTC 2018,,,,,,,0|i3yncv:,9223372036854775807,,,,,,,,,,"30/Sep/18 01:37;ffang;Attached a proposal fix.
[~davsclaus], is this change OK, would it affect other cases outside Karaf? Or instead of the RuntimeException, shall we just resume a suspended camelcontext when even users use  start command? 

Thanks!","01/Oct/18 11:27;davsclaus;Thanks Freeman.

Hmm it would imho be better that the command was smarter and be able to just resume instead of starting if the state is suspended.
","01/Oct/18 11:29;davsclaus;Okay I looked at how JMX is doing it, which I would suggest the Karaf command would do the same. See this class and then make the patch do like it does

org.apache.camel.management.mbean.ManagedCamelContext","08/Oct/18 00:13;ffang;Thanks [~davsclaus]!

Will revise accordingly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix unstable test PubNubPresenceTest,CAMEL-12852,13189100,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,apupier,apupier,03/Oct/18 09:10,03/Oct/18 17:05,13/Mar/19 22:20,03/Oct/18 09:30,,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,tests,,,,,,0,,,,"sometimes it is failing with
https://fusesource-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/job/camel.redhat.pipeline/job/2.21.x.redhat-7-0-x/18/testReport/junit/org.apache.camel.component.pubnub/PubNubPresenceTest/testPresence/

{quote}Error Message

mock://result Received message count. Expected: <1> but was: <2>

Stacktrace

java.lang.AssertionError: mock://result Received message count. Expected: <1> but was: <2>
	at org.apache.camel.component.pubnub.PubNubPresenceTest.testPresence(PubNubPresenceTest.java:53){quote}

the problem is that in fact a lot of exchanges are created.
In org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(long), it is waiting to reach at least the given expected number in the provided timeout.
As soon as it is reached, it is doing the assertion.
But between the assertion done in the line just after, a new message may arrive.

You can notice it by putting a Thread.sleep(1000) for instance before the assertEquals, with PubNubTest it wil lalways fail and there will be a lo tmore messages.

So 3 possibilities:
- the test should expect a minimum number of messages
- the route used in test should be modified to trigger a single message
- the camel product should not create several messages and in this case it is a product bug",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-03 09:17:45.761,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 03 17:05:32 UTC 2018,,,,,,,0|i3yrwn:,9223372036854775807,,,,,,,,,,"03/Oct/18 09:11;apupier;to help reproducing, here is the content of the method used:

{quote}protected void doAssertIsSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException {
        if (expectedCount == 0) {
            if (timeoutForEmptyEndpoints > 0) {
                LOG.debug(""Sleeping for: {} millis to check there really are no messages received"", timeoutForEmptyEndpoints);
                Thread.sleep(timeoutForEmptyEndpoints);
            }
            assertEquals(""Received message count"", expectedCount, getReceivedCounter());
        } else if (expectedCount > 0) {
        	waitForCompleteLatch();
            if (expectedCount != getReceivedCounter()) {
                waitForCompleteLatch();
            }
            Thread.sleep(1000);
            waitForCompleteLatch();
            assertEquals(""Incorrect received message count. Received exchanges are ""+ getReceivedExchanges(), expectedCount, getReceivedCounter());
        } else if (expectedMinimumCount > 0 && getReceivedCounter() < expectedMinimumCount) {
            waitForCompleteLatch();
        }

        if (expectedMinimumCount >= 0) {
            int receivedCounter = getReceivedCounter();
            assertTrue(""Received message count "" + receivedCounter + "", expected at least "" + expectedMinimumCount, expectedMinimumCount <= receivedCounter);
        }

        for (Runnable test : tests) {
            test.run();
        }

        for (Throwable failure : failures) {
            if (failure != null) {
                LOG.error(""Caught on "" + getEndpointUri() + "" Exception: "" + failure, failure);
                fail(""Failed due to caught exception: "" + failure);
            }
        }
    }{quote}","03/Oct/18 09:17;githubbot;apupier opened a new pull request #2548: CAMEL-12852 - use minimum expected message count
URL: https://github.com/apache/camel/pull/2548
 
 
   a lot of messages are generated, only the first oen is checked.
   
   please check comments on https://issues.apache.org/jira/browse/CAMEL-12852
   this PR is in case the tested routes is expected to generate several messages. If it is not normal, the fix will need to be different.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Oct/18 09:17;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/2548

    CAMEL-12852 - use minimum expected message count

    a lot of messages are generated, only the first oen is checked.
    
    please check comments on https://issues.apache.org/jira/browse/CAMEL-12852
    this PR is in case the tested routes is expected to generate several messages. If it is not normal, the fix will need to be different.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-12852-useMinimumMessageCount

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2548.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2548
    
----
commit 41b52a131356981f7260a7d9c14d3c770390f894
Author: Aurélien Pupier <apupier@...>
Date:   2018-10-03T09:16:10Z

    CAMEL-12852 - use minimum expected message count
    
    a lot of messages are generated, only the first oen is checked.
    
    Signed-off-by: Aurélien Pupier <apupier@redhat.com>

----
","03/Oct/18 09:30;githubbot;oscerd commented on issue #2548: CAMEL-12852 - use minimum expected message count
URL: https://github.com/apache/camel/pull/2548#issuecomment-426570871
 
 
   Thanks. Merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Oct/18 17:05;githubbot;oscerd closed pull request #2548: CAMEL-12852 - use minimum expected message count
URL: https://github.com/apache/camel/pull/2548
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-pubnub/src/test/java/org/apache/camel/component/pubnub/PubNubPresenceTest.java b/components/camel-pubnub/src/test/java/org/apache/camel/component/pubnub/PubNubPresenceTest.java
index dc83b819102..f89ebec2564 100644
--- a/components/camel-pubnub/src/test/java/org/apache/camel/component/pubnub/PubNubPresenceTest.java
+++ b/components/camel-pubnub/src/test/java/org/apache/camel/component/pubnub/PubNubPresenceTest.java
@@ -48,7 +48,7 @@ public void testPresence() throws Exception {
                           + ""{\""a\"":\""4\"",\""f\"":512,\""p\"":{\""t\"":\""14637536741726901\"",\""r\"":1},\""k\"":\""demo-36\"",\""c\"":\""mychannel-pnpres\"",\""d\"":{\""action\"": \""state-change\"", ""
                           + ""\""timestamp\"": 1463753674, \""data\"": {\""state\"": \""cool\""}, \""uuid\"": \""24c9bb19-1fcd-4c40-a6f1-522a8a1329ef\"", \""occupancy\"": 3},\""b\"":\""mychannel-pnpres\""}]}"")));
         context.startRoute(""presence-route"");
-        mockResult.expectedMessageCount(1);
+        mockResult.expectedMinimumMessageCount(1);
         mockResult.expectedHeaderReceived(PubNubConstants.CHANNEL, ""mychannel"");
         assertMockEndpointsSatisfied();
         PNPresenceEventResult presence = mockResult.getReceivedExchanges().get(0).getIn().getBody(PNPresenceEventResult.class);
@@ -67,7 +67,7 @@ public void testPresenceWithHereNowRefresh() throws Exception {
                           + ""\""d\"":{\""action\"": \""interval\"", \""timestamp\"": 1490124758, \""occupancy\"": 2, \""here_now_refresh\"": true, ""
                           + ""\""join\"": [\""2220E216-5A30-49AD-A89C-1E0B5AE26AD7\"", \""4262AE3F-3202-4487-BEE0-1A0D91307DEB\""]},\""b\"":\""mychannel-pnpres\""}]}"")));
         context.startRoute(""presence-route"");
-        mockResult.expectedMessageCount(1);
+        mockResult.expectedMinimumMessageCount(1);
         assertMockEndpointsSatisfied();
         PNPresenceEventResult presence = mockResult.getReceivedExchanges().get(0).getIn().getBody(PNPresenceEventResult.class);
         assertThat(presence.getHereNowRefresh(), equalTo(true));


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Oct/18 17:05;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2548
",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sftp : stepwise=false is not working on windows,CAMEL-12733,13179051,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,onders,onders,15/Aug/18 11:02,12/Sep/18 07:34,13/Mar/19 22:20,12/Sep/18 07:33,2.22.0,2.22.1,,,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-ftp,,,,,,0,,,,"[ERROR] Failures:
[ERROR] org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeNotStepwiseTest.testSftpSimpleConsume(org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeNotStepwiseTest)
[ERROR] Run 1: SftpSimpleConsumeNotStepwiseTest>SftpSimpleConsumeTest.testSftpSimpleConsume:47->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <1> but was: <0>
[ERROR] Run 2: SftpSimpleConsumeNotStepwiseTest>SftpSimpleConsumeTest.testSftpSimpleConsume:47->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <1> but was: <0>
[ERROR] Run 3: SftpSimpleConsumeNotStepwiseTest>SftpSimpleConsumeTest.testSftpSimpleConsume:47->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <1> but was: <0>
[INFO]
[ERROR] org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeRecursiveNotStepwiseTest.testSftpSimpleConsumeRecursive(org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeRecursiveNotStepwiseTest)
[ERROR] Run 1: SftpSimpleConsumeRecursiveNotStepwiseTest>SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive:46->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <4> but was: <0>
[ERROR] Run 2: SftpSimpleConsumeRecursiveNotStepwiseTest>SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive:46->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <4> but was: <0>
[ERROR] Run 3: SftpSimpleConsumeRecursiveNotStepwiseTest>SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive:46->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <4> but was: <0>
[INFO]
[ERROR] org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive(org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeRecursiveTest)
[ERROR] Run 1: SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive:46->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <4> but was: <0>
[ERROR] Run 2: SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive:46->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <4> but was: <0>
[ERROR] Run 3: SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive:46->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <4> but was: <0>
[INFO]
[ERROR] org.apache.camel.component.file.remote.sftp.SftpUseListFalseTest.testSftpUseListFalse(org.apache.camel.component.file.remote.sftp.SftpUseListFalseTest)
[ERROR] Run 1: SftpUseListFalseTest.testSftpUseListFalse:44->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <1> but was: <0>
[ERROR] Run 2: SftpUseListFalseTest.testSftpUseListFalse:44->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <1> but was: <0>
[ERROR] Run 3: SftpUseListFalseTest.testSftpUseListFalse:44->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <1> but was: <0>
[INFO]
[ERROR] Errors:
[ERROR] org.apache.camel.component.file.remote.sftp.SftpProducerFileWithPathNoStepwiseTest.testProducerFileWithPathNoStepwise(org.apache.camel.component.file.remote.sftp.SftpProducerFileWithPathNoStepwiseTest)
[ERROR] Run 1: SftpProducerFileWithPathNoStepwiseTest.testProducerFileWithPathNoStepwise:45 » CamelExecution
[ERROR] Run 2: SftpProducerFileWithPathNoStepwiseTest.testProducerFileWithPathNoStepwise:45 » CamelExecution
[ERROR] Run 3: SftpProducerFileWithPathNoStepwiseTest.testProducerFileWithPathNoStepwise:45 » CamelExecution
[INFO]
[ERROR] org.apache.camel.component.file.remote.sftp.SftpSimpleProduceNotStepwiseTest.testSftpSimpleProduce(org.apache.camel.component.file.remote.sftp.SftpSimpleProduceNotStepwiseTest)
[ERROR] Run 1: SftpSimpleProduceNotStepwiseTest.testSftpSimpleProduce:40 » CamelExecution Exc...
[ERROR] Run 2: SftpSimpleProduceNotStepwiseTest.testSftpSimpleProduce:40 » CamelExecution Exc...
[ERROR] Run 3: SftpSimpleProduceNotStepwiseTest.testSftpSimpleProduce:40 » CamelExecution Exc...
[INFO]
[ERROR] org.apache.camel.component.file.remote.sftp.SftpSimpleProduceNotStepwiseTest.testSftpSimpleSubPathProduce(org.apache.camel.component.file.remote.sftp.SftpSimpleProduceNotStepwiseTest)
[ERROR] Run 1: SftpSimpleProduceNotStepwiseTest.testSftpSimpleSubPathProduce:53 » CamelExecution
[ERROR] Run 2: SftpSimpleProduceNotStepwiseTest.testSftpSimpleSubPathProduce:53 » CamelExecution
[ERROR] Run 3: SftpSimpleProduceNotStepwiseTest.testSftpSimpleSubPathProduce:53 » CamelExecution
[INFO]
[ERROR] org.apache.camel.component.file.remote.sftp.SftpSimpleProduceNotStepwiseTest.testSftpSimpleTwoSubPathProduce(org.apache.camel.component.file.remote.sftp.SftpSimpleProduceNotStepwiseTest)
[ERROR] Run 1: SftpSimpleProduceNotStepwiseTest.testSftpSimpleTwoSubPathProduce:66 » CamelExecution
[ERROR] Run 2: SftpSimpleProduceNotStepwiseTest.testSftpSimpleTwoSubPathProduce:66 » CamelExecution
[ERROR] Run 3: SftpSimpleProduceNotStepwiseTest.testSftpSimpleTwoSubPathProduce:66 » CamelExecution
[INFO]
[INFO]",windows 10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-22 13:33:53.464,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 12 07:34:06 UTC 2018,,,,,,,0|i3x2c7:,9223372036854775807,,,,,,,,,,"22/Aug/18 13:33;davsclaus;Anyone with a windows system, able to take a look and have some idea what is the problem?","22/Aug/18 15:32;onders;Debugging through unit test, I was able to see channelsftp.cd method is ending up with invalid file. I am unable to test against real sftp server and windows client.","23/Aug/18 12:10;davsclaus;You can try to change the pathSeparator option to windows / unix etc. I guess its a bit unusual to run a SFTP server on windows, and also the unit tests is using a java library to act as sftp server so its not a real server we test against.","09/Sep/18 22:38;evilball;The problem is in method SftpOperations.buildDirectory(). We save an absolute path, then make cd to directory from route and then make cd to original directory in finally block.

 
{code:java}
  String originalDirectory = getCurrentDirectory();
  ...
  channel.cd(directory);
  ...
  if (originalDirectory != null) {
    changeCurrentDirectory(originalDirectory);
  }
{code}
 

Absolute path in Windows is not started from /, so we ended with cwd equals to originalDirectory + originalDirectory. Actually, we don't need to check if directory exist via cd, we can make it via ls. In this way, the following cd to original directory is unnecessary. I run the tests with this small fix on Windows and they all passed.",10/Sep/18 06:36;onders;welcome to create a PR.,"10/Sep/18 10:37;githubbot;evilball opened a new pull request #2515: CAMEL-12733. Check if directory exists via ls, so we don't need to re…
URL: https://github.com/apache/camel/pull/2515
 
 
   …turn back to original dir later.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Sep/18 10:37;githubbot;GitHub user evilball opened a pull request:

    https://github.com/apache/camel/pull/2515

    CAMEL-12733. Check if directory exists via ls, so we don't need to re…

    …turn back to original dir later.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/evilball/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2515.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2515
    
----
commit a3bc7af5fcff271f90d38b5aede7bebb02223f49
Author: evilball <evilball88@...>
Date:   2018-09-09T23:09:48Z

    CAMEL-12733. Check if directory exists via ls, so we don't need to return back to original dir later.

----
","10/Sep/18 21:58;githubbot;onderson commented on issue #2515: CAMEL-12733. Check if directory exists via ls, so we don't need to re…
URL: https://github.com/apache/camel/pull/2515#issuecomment-420075255
 
 
   All is good on windows.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Sep/18 07:34;githubbot;oscerd commented on issue #2515: CAMEL-12733. Check if directory exists via ls, so we don't need to re…
URL: https://github.com/apache/camel/pull/2515#issuecomment-420543763
 
 
   Merged on master and camel-2.22.x. Thanks @evilball 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Sep/18 07:34;githubbot;oscerd closed pull request #2515: CAMEL-12733. Check if directory exists via ls, so we don't need to re…
URL: https://github.com/apache/camel/pull/2515
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
index 265bac8fc91..958210c97f0 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
@@ -501,11 +501,10 @@ public synchronized boolean buildDirectory(String directory, boolean absolute) t
         // ignore absolute as all dirs are relative with FTP
         boolean success = false;
 
-        String originalDirectory = getCurrentDirectory();
         try {
             // maybe the full directory already exists
             try {
-                channel.cd(directory);
+                channel.ls(directory);
                 success = true;
             } catch (SftpException e) {
                 // ignore, we could not change directory so try to create it instead
@@ -523,17 +522,9 @@ public synchronized boolean buildDirectory(String directory, boolean absolute) t
                     success = buildDirectoryChunks(directory);
                 }
             }
-        } catch (IOException e) {
-            throw new GenericFileOperationFailedException(""Cannot build directory: "" + directory, e);
-        } catch (SftpException e) {
+        } catch (IOException | SftpException e) {
             throw new GenericFileOperationFailedException(""Cannot build directory: "" + directory, e);
-        } finally {
-            // change back to original directory
-            if (originalDirectory != null) {
-                changeCurrentDirectory(originalDirectory);
-            }
         }
-
         return success;
     }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Sep/18 07:34;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2515
",,,,,,,,,,,,,,,,,,,,,,
swagger-java - Provide more clear exception when model class is not visible to ClassResolver,CAMEL-12782,13183281,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bobpaulin,bobpaulin,06/Sep/18 02:55,08/Sep/18 07:56,13/Mar/19 22:20,08/Sep/18 07:56,2.18.5,2.20.4,2.21.2,2.22.0,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-swagger,,,,,,0,,,,"Within an OSGi the camel-swagger-java component be run within a different bundle than the routes and models required to generate the swagger document.  In this case the swagger code may not be able to read the model.  Currently this generates a Nullpointer Exception and the swagger document does not get rendered. 

Would prefer that the exception be more specific to help developers with debugging.  Also toyed with the idea of converting to a LOG statement instead of an exception but it may be better to fail fast.

 
{code:java}
org.apache.camel.camel-swagger-java - 2.22.0 | Error rendering Swagger API due null
java.lang.NullPointerException: null
    at org.apache.camel.swagger.RestModelConverters.readClass(RestModelConverters.java:32) ~[108:org.apache.camel.camel-swagger-java:2.22.0]
    at org.apache.camel.swagger.RestSwaggerReader.appendModels(RestSwaggerReader.java:755) ~[108:org.apache.camel.camel-swagger-java:2.22.0]
    at org.apache.camel.swagger.RestSwaggerReader.parse(RestSwaggerReader.java:227) ~[108:org.apache.camel.camel-swagger-java:2.22.0]
    at org.apache.camel.swagger.RestSwaggerReader.read(RestSwaggerReader.java:113) ~[108:org.apache.camel.camel-swagger-java:2.22.0]
    at org.apache.camel.swagger.RestSwaggerSupport.renderResourceListing(RestSwaggerSupport.java:210) ~[108:org.apache.camel.camel-swagger-java:2.22.0]
    at org.apache.camel.swagger.RestSwaggerProcessor.process(RestSwaggerProcessor.java:119) [108:org.apache.camel.camel-swagger-java:2.22.0]
    at org.apache.camel.component.rest.RestApiProducer.process(RestApiProducer.java:36) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:181) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.component.netty4.handlers.ServerChannelHandler.processAsynchronously(ServerChannelHandler.java:141) [105:org.apache.camel.camel-netty4:2.22.0]
    at org.apache.camel.component.netty4.handlers.ServerChannelHandler.channelRead0(ServerChannelHandler.java:112) [105:org.apache.camel.camel-netty4:2.22.0]
    at org.apache.camel.component.netty4.http.handlers.HttpServerChannelHandler.channelRead0(HttpServerChannelHandler.java:213) [106:org.apache.camel.camel-netty4-http:2.22.0]
    at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) [55:io.netty.transport:4.1.25.Final]
    at org.apache.camel.component.netty4.http.handlers.HttpServerMultiplexChannelHandler.channelRead0(HttpServerMultiplexChannelHandler.java:113) [106:org.apache.camel.camel-netty4-http:2.22.0]
    at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) [55:io.netty.transport:4.1.25.Final]
    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) [55:io.netty.transport:4.1.25.Final]
    at io.netty.channel.AbstractChannelHandlerContext.access$600(AbstractChannelHandlerContext.java:38) [55:io.netty.transport:4.1.25.Final]
    at io.netty.channel.AbstractChannelHandlerContext$7.run(AbstractChannelHandlerContext.java:353) [55:io.netty.transport:4.1.25.Final]
    at io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:66) [51:io.netty.common:4.1.25.Final]
    at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:884) [51:io.netty.common:4.1.25.Final]
    at java.lang.Thread.run(Thread.java:748) [?:?]{code}","Apache Karaf

Apache Camel (Rest DSL with Swagger)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-06 03:08:57.858,,,no_permission,,Unknown,,,,Patch,,,,,,,,,9223372036854775807,,,Sat Sep 08 07:56:54 UTC 2018,,,,,,,0|i3xs7j:,9223372036854775807,,,,,,,,,,"06/Sep/18 03:08;githubbot;bobpaulin opened a new pull request #2509: CAMEL-12782 - More specific error message for unresolved model classes.
URL: https://github.com/apache/camel/pull/2509
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Sep/18 03:08;githubbot;GitHub user bobpaulin opened a pull request:

    https://github.com/apache/camel/pull/2509

    CAMEL-12782 - More specific error message for unresolved model classes.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bobpaulin/camel CAMEL-12782

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2509.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2509
    
----
commit b15546c6c748fb678cea7e46e8e39c05679f9573
Author: Bob Paulin <bob@...>
Date:   2018-09-06T03:08:13Z

    CAMEL-12782 - More specific error message for unresolved model classes.

----
","06/Sep/18 05:15;githubbot;onderson commented on a change in pull request #2509: CAMEL-12782 - More specific error message for unresolved model classes.
URL: https://github.com/apache/camel/pull/2509#discussion_r215498161
 
 

 ##########
 File path: components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java
 ##########
 @@ -224,6 +224,9 @@ private void parse(Swagger swagger, RestDefinition rest, String camelContextId,
         // use annotation scanner to find models (annotated classes)
         for (String type : types) {
             Class<?> clazz = classResolver.resolveClass(type);
+            if (clazz == null) {
+                throw new RuntimeException(""The ClassResolver could not resolve the model class of type: "" + type);
 
 Review comment:
   i would suggest RuntimeCamelException

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Sep/18 06:40;githubbot;davsclaus commented on a change in pull request #2509: CAMEL-12782 - More specific error message for unresolved model classes.
URL: https://github.com/apache/camel/pull/2509#discussion_r215510721
 
 

 ##########
 File path: components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java
 ##########
 @@ -224,6 +224,9 @@ private void parse(Swagger swagger, RestDefinition rest, String camelContextId,
         // use annotation scanner to find models (annotated classes)
         for (String type : types) {
             Class<?> clazz = classResolver.resolveClass(type);
+            if (clazz == null) {
+                throw new RuntimeException(""The ClassResolver could not resolve the model class of type: "" + type);
 
 Review comment:
   I think there is a resolveMandatoryClass method that should be used instead

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Sep/18 14:32;githubbot;bobpaulin commented on a change in pull request #2509: CAMEL-12782 - More specific error message for unresolved model classes.
URL: https://github.com/apache/camel/pull/2509#discussion_r215648721
 
 

 ##########
 File path: components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java
 ##########
 @@ -224,6 +224,9 @@ private void parse(Swagger swagger, RestDefinition rest, String camelContextId,
         // use annotation scanner to find models (annotated classes)
         for (String type : types) {
             Class<?> clazz = classResolver.resolveClass(type);
+            if (clazz == null) {
+                throw new RuntimeException(""The ClassResolver could not resolve the model class of type: "" + type);
 
 Review comment:
   Agree resolveMandatoryClass provides what I'm looking for.  Will update.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/Sep/18 07:54;githubbot;davsclaus closed pull request #2509: CAMEL-12782 - More specific error message for unresolved model classes.
URL: https://github.com/apache/camel/pull/2509
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java b/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java
index cd3d58c70fa..c0631b4b778 100644
--- a/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java
+++ b/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java
@@ -97,8 +97,9 @@
      * @param config            the swagger configuration
      * @param classResolver     class resolver to use
      * @return the swagger model
+     * @throws ClassNotFoundException 
      */
-    public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {
+    public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {
         Swagger swagger = new Swagger();
 
         for (RestDefinition rest : rests) {
@@ -118,7 +119,7 @@ public Swagger read(List<RestDefinition> rests, String route, BeanConfig config,
         return swagger;
     }
 
-    private void parse(Swagger swagger, RestDefinition rest, String camelContextId, ClassResolver classResolver) {
+    private void parse(Swagger swagger, RestDefinition rest, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {
         List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs());
         // must sort the verbs by uri so we group them together when an uri has multiple operations
         Collections.sort(verbs, new VerbOrdering());
@@ -223,7 +224,7 @@ private void parse(Swagger swagger, RestDefinition rest, String camelContextId,
 
         // use annotation scanner to find models (annotated classes)
         for (String type : types) {
-            Class<?> clazz = classResolver.resolveClass(type);
+            Class<?> clazz = classResolver.resolveMandatoryClass(type);
             appendModels(clazz, swagger);
         }
 
diff --git a/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerArrayEnumTest.java b/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerArrayEnumTest.java
index e3276a03cac..6672215945a 100644
--- a/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerArrayEnumTest.java
+++ b/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerArrayEnumTest.java
@@ -36,7 +36,7 @@
 public class RestSwaggerArrayEnumTest {
 
     @Test
-    public void shouldGenerateEnumValuesForArraysAndNonArrays() {
+    public void shouldGenerateEnumValuesForArraysAndNonArrays() throws Exception {
         final RestSwaggerReader reader = new RestSwaggerReader();
 
         final RestDefinition restDefinition = new RestDefinition();


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/Sep/18 07:54;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2509
",08/Sep/18 07:56;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,
OPTIONS Http request on REST resource returns incorrect content of Allow header,CAMEL-12753,13181328,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Aug/18 12:34,27/Aug/18 14:08,13/Mar/19 22:20,27/Aug/18 14:08,,,,,,,,,,,,,,,,2.23.0,,,,,camel-undertow,,,,,,0,,,,"I have a REST resource which consumes multiple Http methods (for example GET, POST and PUT). If I send OPTIONS request to resource and I expect to receive Allow Http header with this content:
Allow: GET,POST,PUT,OPTIONS
That does not happen because I receive header which contains only two methods one of them is OPTIONS.
Allow: GET,OPTIONS
I have try multiple implementations and only camel-restlet works as I expect. These components contain bug:
camel-undertow
camel-servlet
camel-jetty
camel-netty4-http",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 27 12:59:34 UTC 2018,,,,,,,0|i3xgc7:,9223372036854775807,,,,,,,,,,27/Aug/18 12:59;davsclaus;Okay have a fix for camel-undertow. This requires a bit of component specific fix,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel bean component invokes cached instance of bean (that impl processor) in Registry,CAMEL-12610,13169403,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bedla,bedla,01/Jul/18 14:17,24/Aug/18 09:46,13/Mar/19 22:20,24/Aug/18 09:46,2.20.3,2.21.1,2.22.0,,,,,,,,,,,,,2.23.0,,,,,camel-core,,,,,,0,,,,"Related SO question: [https://stackoverflow.com/questions/51108913/camel-bean-component-invokes-cached-instance-of-named-dependent-bean]

Every invocation of bean component should query Registry for actual instance. Now it is cached in {{BeanProcessor#delegate}} variable, even if endpoint parameter {{cache=false}} specified.

This behavior breaks java-ee compliance: [https://docs.oracle.com/javaee/7/api/javax/enterprise/context/Dependent.html]
{quote}Every invocation of the [{{Context.get(Contextual, CreationalContext)}}|https://docs.oracle.com/javaee/7/api/javax/enterprise/context/spi/Context.html#get-javax.enterprise.context.spi.Contextual-javax.enterprise.context.spi.CreationalContext-] operation of the context object for the {{@Dependent}} scope returns a new instance of the given bean.
{quote}
Marking this as Major, because upgrading of Camel from 2.19.x to 2.2x.x leads to unpredictable results in CDI environment. Since this is tied to CDI environment, this issue is hard to notice even in well junit covered application and can result in major issues in pre-production or production environment.

Full reproducible project with unit test and deployable WAR package, which passes with 2.19.x and lower. Fails with 2.20.x and higher [on Github|https://github.com/bedlaj/camel-dependent-bean]. 

Attachments are based on version 2.21.1",N/A,,,,,,,,,,,,,,,,,,,,,,,,,,,,,01/Jul/18 17:07;bedla;Referring objects for originalInstance.png;https://issues.apache.org/jira/secure/attachment/12929877/Referring+objects+for+originalInstance.png,01/Jul/18 17:06;bedla;Stack during second invocation of SomeDependentBean.txt;https://issues.apache.org/jira/secure/attachment/12929875/Stack+during+second+invocation+of+SomeDependentBean.txt,,,2.0,,,,,,,,,,,,,,,,,,,2018-07-08 01:56:34.933,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 24 09:44:30 UTC 2018,,,,,,,0|i3vfev:,9223372036854775807,,,,,,,,,,"08/Jul/18 01:56;njiang;This issue is caused by the recent change of CAMEL-11375, camel always try to get the processor from bean instance and the processor is is cached no matter the ""cache"" option is set or not. The quick fix could be avoiding using processor usage when the cached option is set.","08/Jul/18 03:16;njiang;Applied patch into master, camel-2.22.x and camel-2.21.x branches.",08/Jul/18 03:20;njiang;The workaround could be let the bean don't implement the Processor interface.,09/Jul/18 08:06;davsclaus;This cause test failures. Please run a full test of camel-core next time before committing.,"09/Jul/18 08:07;davsclaus;The CI server also reports this error

https://builds.apache.org/job/Camel/job/master/455/","10/Jul/18 07:34;davsclaus;Okay so the problem is that this is only because of the bean implements Camel's Proccessor instance as Willem writes - you should not really do that - eithers its a POJO bean or its a processor with the .process EIP.

Going to revert this as this breaks stuff, and the reporter can fix his pojo bean",10/Jul/18 08:19;davsclaus;Okay had to revert to keep existing behaviour. ,"10/Jul/18 08:45;bedla;Understand [~davsclaus]. Thanks. Our application relies on that. We have implemented hundreds of plugins, which are called dynamically with dynamicRouter based on rules defined in database. Every plugin is CDI bean and implements Processor interface. Because of the dynamicRouter it is not so easy replace bean component with .process EIP. I was thinking about replacing .to(""bean:something"") with .to(""something""), as described in Processor documentation, but it invokes the same instance too.","10/Jul/18 09:07;njiang;I'm sorry the fix break the build(my bad), the issue is caused by the processor which is converted from bean should not be cached. If we set the cached option to false , it should get the new instance from the registry.  If we want to the POJO bean has nothing to do with the Processor converter, we may need to provide other way for use to inject their customer processor.

 ","10/Jul/18 09:52;njiang;Just found the current camel bean cached option is false by default ,  but it doesn't make sense that we keep the converted processor by default in AbstractBeanProcessor.  Can we set the default camel bean cached option to be true? ","10/Jul/18 12:41;njiang;When I changed the default cached option to true,  a very old bug of test org.apache.camel.spring.config.ErrorHandlerTest just came out. As there is no exceptionProcessor bean in the registry, the test should failed. But as the deadLetterErrorHandler uses the RegistryBean by default, it doesn't find out the bean lookup issue when the service is started.","22/Jul/18 17:16;bedla;I dont think, this is resolved. Specially when title and severity of this issue changed. Just telling, that Processor cannot be bean is IMHO only shortcut, not real solution. But if this is expected behavior, that Processor is suposed to be singleton scope, it should be at least mentioned in documentation/javadoc. Maybe in Release Notes too, because it has been changed suddenly without notice.","22/Jul/18 17:53;bedla;The next thing. Right now, it looks, there is no way of using process EIP (as suggested by Claus), with registry lookup and without cache. {{.processRef(""something"")}}, {{.process(""something"")}}, {{.to(""something"")}}, {{.toD(""${header.destination}"")}}, {{.recipientList(simple(${header.destination}))}} and {{dynamicRouter}}. All of these methods invokes cached bean instance with header {{destination=""something""}}. 

The {{.processRef(""something"")}} is recomended way in [Processor docs|http://camel.apache.org/processor.html] 
{quote}If you need to lookup the processor in the Registry then you should use the processRef DSL:{quote}
and it is deprecated in master, but the cache is there too.","24/Aug/18 08:39;davsclaus;Trying to see if we can get a fix for this, so if you set cache=true. We can make it a global option on bean component so you can configure it once.","24/Aug/18 09:44;davsclaus;Okay got a fix, and also adding a global option on bean component to explicit turn on|off cache",,,,,,,,,,,,,,,,,,
Some RabbitMQ channels are never started when target queue doesn't exist during component startup,CAMEL-12229,13136276,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,vbystricky,vbystricky,05/Feb/18 13:59,23/Aug/18 12:09,13/Mar/19 22:20,23/Aug/18 12:09,2.20.2,,,,,,,,,,,,,,,2.23.0,,,,,camel-rabbitmq,,,,,,0,,,,"Commit 8311af003ab888ca53a042ce5e9955b7cd5a845b reveals previously hidden bug.

*Steps to reproduce*:
 # configure rabbitmq consumer to connect to existing rabbitmq server but to non existing queue Q1
 # start rabbitmq consumer with several channels.
 # after some time create Q1 on target rabbitmq server

*Expected result*:

All channels are connected to  rabbitmq server and can consume messages from Q1

 

*Actual result*:

All channels are connected to  rabbitmq server and but only one channel can consume messages from Q1

 

Note:

Separation on channels creating and their starting causes that channels are not started in reconnect loop if  they were successfully created in createConsumer but not started in startConsumers().

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-07 08:42:10.398,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 23 12:09:10 UTC 2018,,,,,,,0|i3pst3:,9223372036854775807,,,,,,,,,,07/Feb/18 08:42;davsclaus;You are welcome to attempt to work on a patch for this which you can also test with your rabbit mq broker,09/Mar/18 08:18;davsclaus;Can you possible provide some details on how to create Q1 on the rabbitmq server. We have an instance running via Docker and the integration test suite we have runs automatic and have the queues auto-created. But if we can find a way to reproduce this either auto or manually it would be good to help track down and implement a fix for this.,"22/Aug/18 13:26;githubbot;davsclaus opened a new pull request #2491: CAMEL-12229: camel-rabbitmq consumer should be more resilient on star…
URL: https://github.com/apache/camel/pull/2491
 
 
   …ting. There may be a situation where a connection is created but cannot be started, and then the reconnect logic would reconnect but not start the consumer. Now we have logic that calls the start method, and we leverage Camels ServiceSupport for lifecycle of start/stop.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Aug/18 13:26;githubbot;GitHub user davsclaus opened a pull request:

    https://github.com/apache/camel/pull/2491

    CAMEL-12229: camel-rabbitmq consumer should be more resilient on star…

    …ting. There may be a situation where a connection is created but cannot be started, and then the reconnect logic would reconnect but not start the consumer. Now we have logic that calls the start method, and we leverage Camels ServiceSupport for lifecycle of start/stop.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-12229

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2491.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2491
    
----
commit f081f6328c9559a32f9d8ae88c06c7cb7d168e58
Author: Claus Ibsen <claus.ibsen@...>
Date:   2018-08-22T13:26:13Z

    CAMEL-12229: camel-rabbitmq consumer should be more resilient on starting. There may be a situation where a connection is created but cannot be started, and then the reconnect logic would reconnect but not start the consumer. Now we have logic that calls the start method, and we leverage Camels ServiceSupport for lifecycle of start/stop.

----
","22/Aug/18 13:26;davsclaus;Okay I looked at this a bit and have a potential fix in a PR
https://github.com/apache/camel/pull/2491

Feedback and review is welcome.","23/Aug/18 12:08;githubbot;davsclaus closed pull request #2491: CAMEL-12229: camel-rabbitmq consumer should be more resilient on star…
URL: https://github.com/apache/camel/pull/2491
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Aug/18 12:08;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2491
",23/Aug/18 12:09;davsclaus;We have tried to fix this,,,,,,,,,,,,,,,,,,,,,,,,,
No type converter from java.lang.String to java.math.BigInteger required for firstIndex,CAMEL-12410,13148171,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Viachaslau.Tsikhanovich,Viachaslau.Tsikhanovich,27/Mar/18 09:16,14/Aug/18 08:52,13/Mar/19 22:20,14/Aug/18 08:52,2.21.0,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-consul,,,,,,0,,,,"After CAMEL-12065 fix the type of _firstIndex_ parameter became _java.math.BigInteger_.
However _org.apache.camel.impl.converter.OptimisedTypeConverter_ has no converter from java.lang.String to java.math.BigInteger.
As result _firstIndex_ parameter fails to be set and enpoint creation fails with the following exception:
{quote}
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: consul://event?firstIndex=0&key=EVENT_ID1&url=http%3A%2F%2Fconsul-client%3A8500 due to: Could not find a suitable setter for property: firstIndex as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: java.math.BigInteger with value 0
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12065,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-28 08:24:00.299,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 14 08:52:43 UTC 2018,,,,,,,0|i3rtmf:,9223372036854775807,,,,,,,,,,"28/Mar/18 08:24;davsclaus;The firstIndex is 0 by default, so you dont need to set it to 0 as well. But yeah if you set it to some other value then there is no type converter.

 ",28/Mar/18 09:00;davsclaus;Thanks for reporting,"28/Mar/18 09:19;Viachaslau.Tsikhanovich;Thank you for your response. 0 was used just as an example of the issue.
Also I have doubts if firstIndex should have a default value.Seems it should be null to avoid filtering during the first grab of events - https://github.com/apache/camel/blob/camel-2.21.0/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java#L117","10/Aug/18 12:27;Viachaslau.Tsikhanovich;[Added logic|https://github.com/apache/camel/commit/13451671ffdcb748aeb708a46b3346521dea726c] for conversion to BigInteger doesn't work correctly. For example, for input string ""14350442579497085228"" it first will try to convert to Long and fail with NumberFormatException:
{quote}
Caused by: java.lang.NumberFormatException: For input string: ""14350442579497085228""
      at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
      at java.lang.Long.parseLong(Long.java:592)
      at java.lang.Long.valueOf(Long.java:803)
      at org.apache.camel.converter.ObjectConverter.toBigInteger(ObjectConverter.java:210)
{quote}","14/Aug/18 08:52;davsclaus;Thanks, fixed the string issue",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Type converter confusion when camel-cxf and camel-mail are in same classpath,CAMEL-12590,13166965,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,afbagwe@sandia.gov,afbagwe@sandia.gov,19/Jun/18 15:34,07/Aug/18 11:14,13/Mar/19 22:20,07/Aug/18 11:14,2.18.5,,,,,,,,,,,,,,,2.23.0,,,,,camel-cxf,camel-mail,,,,,0,,,,"The CxfRsProducer needs to find a converter to take the String body of an exchange message and turn it into an Object[]. However when camel-mail is present in the classpath the converter search method picks: 
 
 com.sun.mail.imap.SortTerm[] org.apache.camel.component.mail.MailConverters.toSortTerm(String msg) 
 
This causes the CxfRsProducer to bomb on a NoSuchMethodException. 
 
 If camel-mail is removed, the CxfRsProducer client works, finding the right String -> Object[] converter.

[Issue discussed here on Camel user mailing list|http://camel.465427.n5.nabble.com/Type-converter-misbehavior-with-camel-cxf-and-camel-mail-td5820546.html]

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-07 11:14:44.499,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 07 11:14:44 UTC 2018,,,,,,,0|i3v0mv:,9223372036854775807,,,,,,,,,,07/Aug/18 11:14;davsclaus;Thanks for reporting,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
servicenow: meta data serivce ignores tables without parent when retrieving table list,CAMEL-12701,13175817,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,31/Jul/18 12:04,31/Jul/18 12:49,13/Mar/19 22:20,31/Jul/18 12:05,,,,,,,,,,,,,,,,2.22.1,2.23.0,,,,camel-servicenow,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-07-31 12:04:35.0,,,,,,,0|i3wiof:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BreadcrumbId not required for aws-sqs aws-sns endpoints,CAMEL-12681,13174208,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,saravanakumar,saravanakumar,24/Jul/18 21:27,25/Jul/18 08:09,13/Mar/19 22:20,25/Jul/18 08:09,2.21.1,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-aws,,,,,,0,,,,"Currently in each message sent through aws-sqs aws-sns endpoints, there is an extra message attribute 'breadcrumbId' appears.

BreadcrumbId need not be passed to aws-sqs aws-sns producer endpoints.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-24 21:30:02.803,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 25 08:08:09 UTC 2018,,,,,,,0|i3w8rb:,9223372036854775807,,,,,,,,,,"24/Jul/18 21:30;githubbot;saravanakumar1987 opened a new pull request #2439: CAMEL-12681 : BreadcrumbId not required for aws-sqs aws-sns endpoints
URL: https://github.com/apache/camel/pull/2439
 
 
   PR for https://issues.apache.org/jira/browse/CAMEL-12681
   
   Thanks,
   Saravanakumar

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Jul/18 21:30;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/2439

    CAMEL-12681 : BreadcrumbId not required for aws-sqs aws-sns endpoints

    PR for https://issues.apache.org/jira/browse/CAMEL-12681
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2439.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2439
    
----
commit e9fa4ebce80a6dd8b02a519c7c2cb345ea63e616
Author: Saravanakumar Selvaraj <saravanakumar.java@...>
Date:   2018-07-24T21:26:57Z

    CAMEL-12681 : BreadcrumbId not required for aws-sqs aws-sns endpoints

----
","25/Jul/18 08:08;githubbot;oscerd commented on issue #2439: CAMEL-12681 : BreadcrumbId not required for aws-sqs aws-sns endpoints
URL: https://github.com/apache/camel/pull/2439#issuecomment-407670764
 
 
   Merged on master, 2.22.x and 2.21.x. Thanks

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Jul/18 08:08;githubbot;oscerd closed pull request #2439: CAMEL-12681 : BreadcrumbId not required for aws-sqs aws-sns endpoints
URL: https://github.com/apache/camel/pull/2439
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsHeaderFilterStrategy.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsHeaderFilterStrategy.java
index fb51835a5b4..1aa2e06b981 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsHeaderFilterStrategy.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsHeaderFilterStrategy.java
@@ -25,6 +25,6 @@ public SnsHeaderFilterStrategy() {
 
     protected void initialize() {
         // filter headers begin with ""Camel"" or ""org.apache.camel""
-        setOutFilterPattern(""(Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*""); 
+        setOutFilterPattern(""(breadcrumbId|Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*""); 
     }
 }
diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsHeaderFilterStrategy.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsHeaderFilterStrategy.java
index fb5f425ba2e..78fea47052f 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsHeaderFilterStrategy.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsHeaderFilterStrategy.java
@@ -25,6 +25,6 @@ public SqsHeaderFilterStrategy() {
 
     protected void initialize() {
         // filter headers begin with ""Camel"" or ""org.apache.camel""
-        setOutFilterPattern(""(Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*""); 
+        setOutFilterPattern(""(breadcrumbId|Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*""); 
     }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Jul/18 08:08;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2439
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
RabbitMQ Headers - Headers with null value are skipped.,CAMEL-12654,13172363,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dmvolod,Srivastav,Srivastav,16/Jul/18 10:34,24/Jul/18 11:07,13/Mar/19 22:20,24/Jul/18 11:07,2.21.1,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-rabbitmq,,,,,,0,headers,rabbitmq,,"Reference: Conversation with Claus Ibsen on [Stackoverflow|https://stackoverflow.com/questions/50583749/apache-camel-how-to-setheader-value-as-null]

org.apache.camel.component.rabbitmq.RabbitMQMessageConverter.buildProperties() skips the headers which have value null. The actual java client for RabbitMQ does not have this check. It accepts a basic Map<String,Object> which can accept null value. [Reference|https://rabbitmq.github.io/rabbitmq-java-client/api/current/com/rabbitmq/client/AMQP.BasicProperties.Builder.html] . Check the definition of headers() method

*The business scenario where we use it*. On the RabbitMQ, we accept messages from multiple sources. Depending on whether a specific header is null or not, we route these message downstream in our processing pipeline.

If required, I could provide a working example of rabbitmq java-client to demonstrate that the headers with null value are not skipped",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-16 12:12:29.454,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 24 09:11:02 UTC 2018,,,,,,,0|i3vxdz:,9223372036854775807,,,,,,,,,,16/Jul/18 12:12;dmvolod;[~Srivastav] you can check if the header not found this means it's a null. Could you please provide an example where null header values are required but header absence is not enough.,"20/Jul/18 14:39;Srivastav;Consider this scenario.

System A produces a message (For example Customer submitting his electric meter reading) to rabbitmq exchange. This message is passed in sequence through 3 systems
--> System 1 (performs a check if submitted through the Online interface)
     --> Adds header (Online : <online-case-id>/null)
--> System 2 (more checks...)
     --> Adds header (PreviousBalance : <some_id>/null)
--> System 3 (more chesks)
     --> Adds header (ClearByInvoiceService : <some_other_id>/null)
...
...
...
--> System B
    --> Does final processing

System B processes this message. If either of the headers is set, it does a microservice lookup to get more details to enrich the base message. This works fine until we started reading the message from another system C. System C can directly send this message to System B, but it needs to setup headers with a null value.

So far we have been using a set of POJO based rabbit-mq consumers and producers to read messages and do ETL operations. Now we have started porting many of our integrations to apache camel, but we are not able to use camel-rabbitmq component, because headers with null values are skipped. It would be good to have camel-rabbitmq not to filter out the header with null values like the original rabbitmq java-client does.

Another factor which adds to the complexity is, there are multiple systems similar to System A, owned by different IT teams (and different programming languages). Making changes to System B would mean breaking message structure for rest of the parties which is additional cost and effort.

We can actually fork the camel-rabbitmq component and fix the changes. But that would mean, we have to maintain this fork for all the versions that we would use.","20/Jul/18 14:51;dmvolod;[~Srivastav], thanks for explanation. Looks like this is useful feature, but it must be added as an option (allowNullHeaders or something else) to provide backward compatibility.","23/Jul/18 07:56;Srivastav;[~dmvolod] Yes I agree. Something like setNullHeader('headerName') should suffice. We don't need to pass any value, as it would be null anyway.","23/Jul/18 08:47;dmvolod;[~Srivastav] I've done some unit test with the headers (null and non-null values) and logger info if following:

AMQP.BasicProperties: #contentHeader<basic>(content-type=null, content-encoding=null, headers=\{breadcrumbId=ID-dvolodin-redhat-local-1532335144940-0-1, CustomHeader=customheader}, delivery-mode=null, priority=null, correlation-id=null, reply-to=null, expiration=null, message-id=null, timestamp=null, type=null, user-id=null, app-id=null, cluster-id=null)

You can see that's possible to pass null values in headers which are mapped to the AMQP properties, i.e. user-id, app-id, etc. but not custom headers or RabbitMQ specific headers, for example rabbitmq.EXCHANGE_NAME.

We will continue to work on unit tests and add allowNullHeaders to the endpoint property to implement your requirements.","23/Jul/18 10:17;Srivastav;[~dmvolod] Yes, actually I should have mentioned that specifically that this problem occurs for the custom headers. Proposal for allowNullHeaders looks good.","24/Jul/18 08:12;githubbot;dmvolod opened a new pull request #2436: CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped
URL: https://github.com/apache/camel/pull/2436
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Jul/18 08:12;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2436

    CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12654

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2436.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2436
    
----
commit fddedbc44de60ccc214c0c40be420dad7e1d13da
Author: Dmitry Volodin <dmvolod@...>
Date:   2018-07-24T08:08:45Z

    CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped

----
","24/Jul/18 08:16;githubbot;dmvolod commented on issue #2436: CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped
URL: https://github.com/apache/camel/pull/2436#issuecomment-407321828
 
 
   @oscerd what do you think about backport this component to 2.21 and 2.22. I've added a new option but it doesn't change the default behaviour? 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Jul/18 08:20;githubbot;oscerd commented on issue #2436: CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped
URL: https://github.com/apache/camel/pull/2436#issuecomment-407322949
 
 
   Should be fine if the behavior doesn't change it would be good.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Jul/18 08:21;githubbot;dmvolod commented on issue #2436: CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped
URL: https://github.com/apache/camel/pull/2436#issuecomment-407323263
 
 
   @oscerd , thanks. Will do it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Jul/18 08:26;githubbot;asfgit closed pull request #2436: CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped
URL: https://github.com/apache/camel/pull/2436
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-rabbitmq/src/main/docs/rabbitmq-component.adoc b/components/camel-rabbitmq/src/main/docs/rabbitmq-component.adoc
index e6e330c384e..823f22b7fbc 100644
--- a/components/camel-rabbitmq/src/main/docs/rabbitmq-component.adoc
+++ b/components/camel-rabbitmq/src/main/docs/rabbitmq-component.adoc
@@ -47,14 +47,14 @@ exchange name determines which exchange the queue will bind to.
 === Options
 
 // component options: START
-The RabbitMQ component supports 49 options, which are listed below.
+The RabbitMQ component supports 50 options, which are listed below.
 
 
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
 |===
 | Name | Description | Default | Type
-| *hostname* (common) | The hostname of the running rabbitmq instance or cluster. |  | String
+| *hostname* (common) | The hostname of the running RabbitMQ instance or cluster. |  | String
 | *portNumber* (common) | Port number for the host with the running rabbitmq instance or cluster. | 5672 | int
 | *username* (security) | Username in case of authenticated access | guest | String
 | *password* (security) | Password for authenticated access | guest | String
@@ -102,6 +102,7 @@ The RabbitMQ component supports 49 options, which are listed below.
 | *deadLetterQueue* (common) | The name of the dead letter queue |  | String
 | *deadLetterRoutingKey* (common) | The routing key for the dead letter exchange |  | String
 | *deadLetterExchangeType* (common) | The type of the dead letter exchange | direct | String
+| *allowNullHeaders* (producer) | Allow pass null values to header | false | boolean
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
 |===
 // component options: END
@@ -126,7 +127,7 @@ with the following path and query parameters:
 |===
 
 
-==== Query Parameters (61 parameters):
+==== Query Parameters (62 parameters):
 
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
@@ -163,6 +164,7 @@ with the following path and query parameters:
 | *exceptionHandler* (consumer) | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored. |  | ExceptionHandler
 | *exchangePattern* (consumer) | Sets the exchange pattern when the consumer creates an exchange. |  | ExchangePattern
 | *threadPoolSize* (consumer) | The consumer uses a Thread Pool Executor with a fixed number of threads. This setting allows you to set that number of threads. | 10 | int
+| *allowNullHeaders* (producer) | Allow pass null values to header | false | boolean
 | *bridgeEndpoint* (producer) | If the bridgeEndpoint is true, the producer will ignore the message header of rabbitmq.EXCHANGE_NAME and rabbitmq.ROUTING_KEY | false | boolean
 | *channelPoolMaxSize* (producer) | Get maximum number of opened channel in pool | 10 | int
 | *channelPoolMaxWait* (producer) | Set the maximum number of milliseconds to wait for a channel from the pool | 1000 | long
diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java
index 96c1ac8dfac..69a3e8ac34d 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java
@@ -81,6 +81,8 @@
     private String deadLetterQueue;
     @Metadata(label = ""common"", defaultValue = ""direct"", enums = ""direct,fanout,headers,topic"")
     private String deadLetterExchangeType = ""direct"";
+    @Metadata(label = ""producer"")
+    private boolean allowNullHeaders;
     @Metadata(label = ""security"")
     private String sslProtocol;
     @Metadata(label = ""security"")
@@ -241,6 +243,7 @@ protected RabbitMQEndpoint createEndpoint(String uri,
         endpoint.setDeadLetterExchangeType(getDeadLetterExchangeType());
         endpoint.setDeadLetterQueue(getDeadLetterQueue());
         endpoint.setDeadLetterRoutingKey(getDeadLetterRoutingKey());
+        endpoint.setAllowNullHeaders(isAllowNullHeaders());
         setProperties(endpoint, params);
 
         if (LOG.isDebugEnabled()) {
@@ -262,6 +265,8 @@ protected RabbitMQEndpoint createEndpoint(String uri,
         endpoint.getExchangeArgs().putAll(IntrospectionSupport.extractProperties(argsCopy, EXCHANGE_ARG_PREFIX));
         endpoint.getQueueArgs().putAll(IntrospectionSupport.extractProperties(argsCopy, QUEUE_ARG_PREFIX));
         endpoint.getBindingArgs().putAll(IntrospectionSupport.extractProperties(argsCopy, BINDING_ARG_PREFIX));
+        // Change null headers processing for message converter
+        endpoint.getMessageConverter().setAllowNullHeaders(endpoint.isAllowNullHeaders());
 
         return endpoint;
     }
@@ -271,7 +276,7 @@ public String getHostname() {
     }
 
     /**
-     * The hostname of the running rabbitmq instance or cluster.
+     * The hostname of the running RabbitMQ instance or cluster.
      */
     public void setHostname(String hostname) {
         this.hostname = hostname;
@@ -859,4 +864,14 @@ public void setDeadLetterExchangeType(String deadLetterExchangeType) {
         this.deadLetterExchangeType = deadLetterExchangeType;
     }
 
+    /**
+     * Allow pass null values to header
+     */
+    public boolean isAllowNullHeaders() {
+        return allowNullHeaders;
+    }
+
+    public void setAllowNullHeaders(boolean allowNullHeaders) {
+        this.allowNullHeaders = allowNullHeaders;
+    }
 }
diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java
index 837ca59def6..9cdbf341b98 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java
@@ -175,6 +175,8 @@
     private long publisherAcknowledgementsTimeout;
     @UriParam(label = ""producer"")
     private boolean guaranteedDeliveries;
+    @UriParam(label = ""producer"")
+    private boolean allowNullHeaders;
     // camel-jms supports this setting but it is not currently configurable in camel-rabbitmq
     private boolean useMessageIDAsCorrelationID = true;
     // camel-jms supports this setting but it is not currently configurable in camel-rabbitmq
@@ -999,6 +1001,17 @@ public void setExclusiveConsumer(boolean exclusiveConsumer) {
         this.exclusiveConsumer = exclusiveConsumer;
     }
 
+    /**
+     * Allow pass null values to header
+     */
+    public boolean isAllowNullHeaders() {
+        return allowNullHeaders;
+    }
+
+    public void setAllowNullHeaders(boolean allowNullHeaders) {
+        this.allowNullHeaders = allowNullHeaders;
+    }
+
     public boolean isPassive() {
         return passive;
     }
diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQMessageConverter.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQMessageConverter.java
index 6cb535e988e..07902ca14ee 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQMessageConverter.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQMessageConverter.java
@@ -37,6 +37,8 @@
 public class RabbitMQMessageConverter {
     protected static final Logger LOG = LoggerFactory.getLogger(RabbitMQMessageConverter.class);
 
+    private boolean allowNullHeaders;
+    
     /**
      * Will take an {@link Exchange} and add header values back to the {@link Exchange#getIn()}
      */
@@ -165,7 +167,8 @@ public void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properti
         for (Map.Entry<String, Object> header : headers.entrySet()) {
             // filter header values.
             Object value = getValidRabbitMQHeaderValue(header.getValue());
-            if (value != null) {
+            
+            if (value != null || isAllowNullHeaders()) {
                 filteredHeaders.put(header.getKey(), header.getValue());
             } else if (LOG.isDebugEnabled()) {
                 if (header.getValue() == null) {
@@ -305,4 +308,12 @@ private boolean hasHeaders(final AMQP.BasicProperties properties) {
     private Object isSerializeHeaderEnabled(final AMQP.BasicProperties properties) {
         return properties.getHeaders().get(RabbitMQEndpoint.SERIALIZE_HEADER);
     }
+
+    public boolean isAllowNullHeaders() {
+        return allowNullHeaders;
+    }
+
+    public void setAllowNullHeaders(boolean allowNullHeaders) {
+        this.allowNullHeaders = allowNullHeaders;
+    }
 }
diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/ReplyManagerSupport.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/ReplyManagerSupport.java
index 15b990a7c2c..1ddf056385e 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/ReplyManagerSupport.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/ReplyManagerSupport.java
@@ -224,6 +224,7 @@ protected void doStart() throws Exception {
         ObjectHelper.notNull(executorService, ""executorService"", this);
         ObjectHelper.notNull(endpoint, ""endpoint"", this);
 
+        messageConverter.setAllowNullHeaders(endpoint.isAllowNullHeaders());
         // timeout map to use for purging messages which have timed out, while waiting for an expected reply
         // when doing request/reply over JMS
         log.debug(""Using timeout checker interval with {} millis"", endpoint.getRequestTimeoutCheckerInterval());
diff --git a/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQComponentTest.java b/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQComponentTest.java
index 4b594432529..f732e6e38f5 100644
--- a/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQComponentTest.java
+++ b/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQComponentTest.java
@@ -45,6 +45,7 @@ public void testDefaultProperties() throws Exception {
         assertEquals(true, endpoint.isAutoDelete());
         assertEquals(true, endpoint.isDurable());
         assertEquals(false, endpoint.isExclusiveConsumer());
+        assertEquals(false, endpoint.isAllowNullHeaders());
         assertEquals(""direct"", endpoint.getExchangeType());
         assertEquals(ConnectionFactory.DEFAULT_CONNECTION_TIMEOUT, endpoint.getConnectionTimeout());
         assertEquals(ConnectionFactory.DEFAULT_CHANNEL_MAX, endpoint.getRequestedChannelMax());
@@ -70,6 +71,7 @@ public void testPropertiesSet() throws Exception {
         params.put(""requestedFrameMax"", 789);
         params.put(""requestedHeartbeat"", 321);
         params.put(""exclusiveConsumer"", true);
+        params.put(""allowNullHeaders"", true);
 
         RabbitMQEndpoint endpoint = createEndpoint(params);
 
@@ -89,6 +91,7 @@ public void testPropertiesSet() throws Exception {
         assertEquals(789, endpoint.getRequestedFrameMax());
         assertEquals(321, endpoint.getRequestedHeartbeat());
         assertEquals(true, endpoint.isExclusiveConsumer());
+        assertEquals(true, endpoint.isAllowNullHeaders());
     }
 
     private RabbitMQEndpoint createEndpoint(Map<String, Object> params) throws Exception {
diff --git a/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQProducerIntTest.java b/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQProducerIntTest.java
index 77bb1c1b321..d91bcc4bf73 100644
--- a/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQProducerIntTest.java
+++ b/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQProducerIntTest.java
@@ -18,7 +18,9 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.concurrent.TimeoutException;
 
 import com.rabbitmq.client.AMQP;
@@ -30,15 +32,22 @@
 import org.apache.camel.ProducerTemplate;
 import org.apache.camel.RuntimeCamelException;
 import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.util.ObjectHelper;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class RabbitMQProducerIntTest extends AbstractRabbitMQIntTest {
+    private static final Logger LOGGER = LoggerFactory.getLogger(RabbitMQProducerIntTest.class);
+    
     private static final String EXCHANGE = ""ex1"";
     private static final String ROUTE = ""route1"";
+    private static final String CUSTOM_HEADER = ""CustomHeader"";
     private static final String BASIC_URI_FORMAT = ""rabbitmq:localhost:5672/%s?routingKey=%s&username=cameltest&password=cameltest&skipQueueDeclare=true"";
     private static final String BASIC_URI = String.format(BASIC_URI_FORMAT, EXCHANGE, ROUTE);
+    private static final String ALLOW_NULL_HEADERS = BASIC_URI + ""&allowNullHeaders=true"";
     private static final String PUBLISHER_ACKNOWLEDGES_URI = BASIC_URI + ""&mandatory=true&publisherAcknowledgements=true"";
     private static final String PUBLISHER_ACKNOWLEDGES_BAD_ROUTE_URI = String.format(BASIC_URI_FORMAT, EXCHANGE, ""route2"") + ""&publisherAcknowledgements=true"";
     private static final String GUARANTEED_DELIVERY_URI = BASIC_URI + ""&mandatory=true&guaranteedDeliveries=true"";
@@ -47,6 +56,9 @@
 
     @Produce(uri = ""direct:start"")
     protected ProducerTemplate template;
+    
+    @Produce(uri = ""direct:start-allow-null-headers"")
+    protected ProducerTemplate templateAllowNullHeaders;
 
     @Produce(uri = ""direct:start-with-confirms"")
     protected ProducerTemplate templateWithConfirms;
@@ -73,6 +85,7 @@ protected RouteBuilder createRouteBuilder() throws Exception {
             @Override
             public void configure() throws Exception {
                 from(""direct:start"").to(BASIC_URI);
+                from(""direct:start-allow-null-headers"").to(ALLOW_NULL_HEADERS);
                 from(""direct:start-with-confirms"").to(PUBLISHER_ACKNOWLEDGES_URI);
                 from(""direct:start-with-confirms-bad-route"").to(PUBLISHER_ACKNOWLEDGES_BAD_ROUTE_URI);
                 from(""direct:start-with-guaranteed-delivery"").to(GUARANTEED_DELIVERY_URI);
@@ -105,6 +118,38 @@ public void producedMessageIsReceived() throws InterruptedException, IOException
 
         assertThatBodiesReceivedIn(received, ""new message"");
     }
+    
+    @Test
+    public void producedMessageWithNotNullHeaders() throws InterruptedException, IOException, TimeoutException {
+        final List<String> received = new ArrayList<>();
+        final Map<String, Object> receivedHeaders = new HashMap<String, Object>();
+        Map<String, Object> headers = new HashMap<String, Object>();
+        
+        headers.put(RabbitMQConstants.EXCHANGE_NAME, EXCHANGE);
+        headers.put(CUSTOM_HEADER, CUSTOM_HEADER.toLowerCase());
+        
+        channel.basicConsume(""sammyq"", true, new ArrayPopulatingConsumer(received, receivedHeaders));
+
+        template.sendBodyAndHeaders(""new message"", headers);
+
+        assertThatBodiesAndHeadersReceivedIn(receivedHeaders, headers, received, ""new message"");
+    }
+    
+    @Test
+    public void producedMessageAllowNullHeaders() throws InterruptedException, IOException, TimeoutException {
+        final List<String> received = new ArrayList<>();
+        final Map<String, Object> receivedHeaders = new HashMap<String, Object>();
+        Map<String, Object> headers = new HashMap<String, Object>();
+        
+        headers.put(RabbitMQConstants.EXCHANGE_NAME, null);
+        headers.put(CUSTOM_HEADER, null);
+        
+        channel.basicConsume(""sammyq"", true, new ArrayPopulatingConsumer(received, receivedHeaders));
+
+        templateAllowNullHeaders.sendBodyAndHeaders(""new message"", headers);
+
+        assertThatBodiesAndHeadersReceivedIn(receivedHeaders, headers, received, ""new message"");
+    }
 
     private void assertThatBodiesReceivedIn(final List<String> received, final String... expected) throws InterruptedException {
         Thread.sleep(500);
@@ -114,6 +159,25 @@ private void assertThatBodiesReceivedIn(final List<String> received, final Strin
             assertEquals(body, received.get(0));
         }
     }
+    
+    private void assertThatBodiesAndHeadersReceivedIn(Map<String, Object> receivedHeaders, Map<String, Object> expectedHeaders,
+                                                      final List<String> received, final String... expected) throws InterruptedException {
+        Thread.sleep(500);
+
+        assertListSize(received, expected.length);
+        for (String body : expected) {
+            assertEquals(body, received.get(0));
+        }
+        
+        for (Map.Entry<String, Object> headers : expectedHeaders.entrySet()) {
+            Object receivedValue = receivedHeaders.get(headers.getKey());
+            Object expectedValue = headers.getValue();
+            
+            assertTrue(""Header key "" + headers.getKey() + "" not found"", receivedHeaders.containsKey(headers.getKey()));
+            assertEquals(0, ObjectHelper.compare(receivedValue == null ? """" : receivedValue.toString(), expectedValue == null ? """" : expectedValue.toString()));
+        }
+        
+    }
 
     @Test
     public void producedMessageIsReceivedWhenPublisherAcknowledgementsAreEnabled() throws InterruptedException, IOException, TimeoutException {
@@ -162,10 +226,18 @@ public void shouldSuccessfullyProduceMessageWhenGuaranteedDeliveryIsActivatedOnA
 
     private class ArrayPopulatingConsumer extends DefaultConsumer {
         private final List<String> received;
+        private final Map<String, Object> receivedHeaders;
 
         ArrayPopulatingConsumer(final List<String> received) {
             super(RabbitMQProducerIntTest.this.channel);
             this.received = received;
+            receivedHeaders = new HashMap<String, Object>();
+        }
+        
+        ArrayPopulatingConsumer(final List<String> received, Map<String, Object> receivedHeaders) {
+            super(RabbitMQProducerIntTest.this.channel);
+            this.received = received;
+            this.receivedHeaders = receivedHeaders;
         }
 
         @Override
@@ -173,6 +245,9 @@ public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body) throws IOException {
+            LOGGER.info(""AMQP.BasicProperties: {}"", properties);
+            
+            receivedHeaders.putAll(properties.getHeaders());
             received.add(new String(body));
         }
     }
diff --git a/platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/RabbitMQComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/RabbitMQComponentConfiguration.java
index b2a40b24c3f..d9da3f6dde9 100644
--- a/platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/RabbitMQComponentConfiguration.java
+++ b/platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/RabbitMQComponentConfiguration.java
@@ -38,7 +38,7 @@
      */
     private Boolean enabled;
     /**
-     * The hostname of the running rabbitmq instance or cluster.
+     * The hostname of the running RabbitMQ instance or cluster.
      */
     private String hostname;
     /**
@@ -281,6 +281,10 @@
      * The type of the dead letter exchange
      */
     private String deadLetterExchangeType = ""direct"";
+    /**
+     * Allow pass null values to header
+     */
+    private Boolean allowNullHeaders = false;
     /**
      * Whether the component should resolve property placeholders on itself when
      * starting. Only properties which are of String type can use property
@@ -675,6 +679,14 @@ public void setDeadLetterExchangeType(String deadLetterExchangeType) {
         this.deadLetterExchangeType = deadLetterExchangeType;
     }
 
+    public Boolean getAllowNullHeaders() {
+        return allowNullHeaders;
+    }
+
+    public void setAllowNullHeaders(Boolean allowNullHeaders) {
+        this.allowNullHeaders = allowNullHeaders;
+    }
+
     public Boolean getResolvePropertyPlaceholders() {
         return resolvePropertyPlaceholders;
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Jul/18 08:26;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2436
","24/Jul/18 08:47;Srivastav;[~dmvolod]. Amazing work. Few questions?
* These updates would be available for which camel versions?
* Could you please provide quick steps on how to use this feature. I will update the original question on StackOverflow.","24/Jul/18 09:11;dmvolod;[~Srivastav], I will backport this feature to the 2.22.1 and 2.21.3 versions.

To be able pass null values to the headers the allowNullHeaders endpoint and component parameters were introduced.

Please see following test file as sample config [RabbitMQProducerIntTest.java|https://github.com/apache/camel/commit/fddedbc44de60ccc214c0c40be420dad7e1d13da#diff-24dcd05dc15db65884aaba68ed79880b]",,,,,,,,,,,,,,,,,,
ActiveMQ Artemis AMQP integration issue with topic prefix hardcode,CAMEL-12624,13170139,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dmvolod,open_matt_nz,open_matt_nz,04/Jul/18 21:44,18/Jul/18 03:44,13/Mar/19 22:20,13/Jul/18 15:29,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-amqp,,,,,,0,,,,"Currently we are running Camel AMQP component against Active MQ 5 (Amazon MQ) we want to move to an Artemis solution but this hasn't worked seamlessly.

In CAMEL-9204 I believe a hardcoded topic prefix of ""topic://"" was introduced I think for a workaround of an Active MQ 5 bug. 

In Artemis this means Camel connects to a topic named ""topic://example.topic.event"" instead of ""example.topic.event"" and therefore receives no events.

The only possible workaround is to manually create the connection factory which means then the topic prefix is not set. 

My believe is that the hardcoded topic prefix is a bug and should be removed or an option to override at the AMQP component level should be introduced.

Bug location: AMQPComponent.java line 59
{code}
@Override
protected void doStart() throws Exception {
    Set<AMQPConnectionDetails> connectionDetails = getCamelContext().getRegistry().findByType(AMQPConnectionDetails.class);
    if (connectionDetails.size() == 1) {
        AMQPConnectionDetails details = connectionDetails.iterator().next();
        JmsConnectionFactory connectionFactory = new JmsConnectionFactory(details.username(), details.password(), details.uri());
        connectionFactory.setTopicPrefix(""topic://"");
        setConnectionFactory(connectionFactory);
    }
    super.doStart();
}
{code}

Workaround:
{code}
@Bean
public ConnectionFactory amqpConnectionFactory() {
    return new JmsConnectionFactory(username, password, url);
}
{code}
 

 

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-13 10:21:39.782,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 18 03:44:00 UTC 2018,,,,,,,0|i3vjyf:,9223372036854775807,,,,,,,,,,"13/Jul/18 10:21;dmvolod;hardcoded topic prefix is not a bug and need for backward compatibility with ActiveMQ 5.

Yes, it's possible to add property to the AMQPConnectionDetails which will skip setTopicPrefix if needed.","13/Jul/18 15:00;githubbot;dmvolod opened a new pull request #2425: CAMEL-12624: ActiveMQ Artemis AMQP integration issue with topic prefix hardcoded
URL: https://github.com/apache/camel/pull/2425
 
 
   hardcode

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 15:00;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2425

    CAMEL-12624: ActiveMQ Artemis AMQP integration issue with topic prefix hardcoded

    hardcode

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12624

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2425.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2425
    
----

----
","13/Jul/18 15:19;githubbot;dmvolod commented on issue #2425: CAMEL-12624: ActiveMQ Artemis AMQP integration issue with topic prefix hardcoded
URL: https://github.com/apache/camel/pull/2425#issuecomment-404864833
 
 
   Thanks, @oscerd . Merged.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 15:19;githubbot;dmvolod closed pull request #2425: CAMEL-12624: ActiveMQ Artemis AMQP integration issue with topic prefix hardcoded
URL: https://github.com/apache/camel/pull/2425
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-amqp/pom.xml b/components/camel-amqp/pom.xml
index 28e85b0e000..92b3bf2fd15 100644
--- a/components/camel-amqp/pom.xml
+++ b/components/camel-amqp/pom.xml
@@ -96,6 +96,18 @@
       <artifactId>activemq-broker</artifactId>
       <scope>test</scope>
     </dependency>
+    <dependency>
+      <groupId>org.apache.activemq</groupId>
+      <artifactId>artemis-server</artifactId>
+      <version>${activemq-artemis-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.activemq</groupId>
+      <artifactId>artemis-amqp-protocol</artifactId>
+      <version>${activemq-artemis-version}</version>
+      <scope>test</scope>
+    </dependency>
     <dependency>
       <groupId>org.apache.activemq</groupId>
       <artifactId>activemq-amqp</artifactId>
diff --git a/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPComponent.java b/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPComponent.java
index 43aebab1d86..cc1bda660bb 100644
--- a/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPComponent.java
+++ b/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPComponent.java
@@ -56,7 +56,9 @@ protected void doStart() throws Exception {
         if (connectionDetails.size() == 1) {
             AMQPConnectionDetails details = connectionDetails.iterator().next();
             JmsConnectionFactory connectionFactory = new JmsConnectionFactory(details.username(), details.password(), details.uri());
-            connectionFactory.setTopicPrefix(""topic://"");
+            if (details.setTopicPrefix()) {
+                connectionFactory.setTopicPrefix(""topic://"");
+            }
             setConnectionFactory(connectionFactory);
         }
         super.doStart();
diff --git a/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPConnectionDetails.java b/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPConnectionDetails.java
index 029e17b781b..66732e6c1f9 100644
--- a/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPConnectionDetails.java
+++ b/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPConnectionDetails.java
@@ -28,17 +28,29 @@
     public static final String AMQP_USERNAME = ""AMQP_SERVICE_USERNAME"";
 
     public static final String AMQP_PASSWORD = ""AMQP_SERVICE_PASSWORD"";
+    
+    public static final String AMQP_SET_TOPIC_PREFIX = ""AMQP_SET_TOPIC_PREFIX"";
 
     private final String uri;
 
     private final String username;
 
     private final String password;
+    
+    private final boolean setTopicPrefix;
 
     public AMQPConnectionDetails(String uri, String username, String password) {
         this.uri = uri;
         this.username = username;
         this.password = password;
+        this.setTopicPrefix = true; 
+    }
+    
+    public AMQPConnectionDetails(String uri, String username, String password, boolean setTopicPrefix) {
+        this.uri = uri;
+        this.username = username;
+        this.password = password;
+        this.setTopicPrefix = setTopicPrefix;
     }
 
     public AMQPConnectionDetails(String uri) {
@@ -53,8 +65,9 @@ public static AMQPConnectionDetails discoverAMQP(CamelContext camelContext) {
             int port = Integer.parseInt(property(propertiesComponent, AMQP_PORT, ""5672""));
             String username = property(propertiesComponent, AMQP_USERNAME, null);
             String password = property(propertiesComponent, AMQP_PASSWORD, null);
+            boolean setTopicPrefix = Boolean.parseBoolean(property(propertiesComponent, AMQP_SET_TOPIC_PREFIX, ""true""));
 
-            return new AMQPConnectionDetails(""amqp://"" + host + "":"" + port, username, password);
+            return new AMQPConnectionDetails(""amqp://"" + host + "":"" + port, username, password, setTopicPrefix);
         } catch (Exception e) {
             throw new RuntimeException(e);
         }
@@ -71,6 +84,10 @@ public String username() {
     public String password() {
         return password;
     }
+    
+    public boolean setTopicPrefix() {
+        return setTopicPrefix;
+    }
 
     // Helpers
 
diff --git a/components/camel-amqp/src/test/java/org/apache/camel/component/amqp/artemis/AMQPEmbeddedBrokerTest.java b/components/camel-amqp/src/test/java/org/apache/camel/component/amqp/artemis/AMQPEmbeddedBrokerTest.java
new file mode 100644
index 00000000000..563aa466735
--- /dev/null
+++ b/components/camel-amqp/src/test/java/org/apache/camel/component/amqp/artemis/AMQPEmbeddedBrokerTest.java
@@ -0,0 +1,117 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.amqp.artemis;
+
+import org.apache.activemq.artemis.api.core.RoutingType;
+import org.apache.activemq.artemis.core.config.Configuration;
+import org.apache.activemq.artemis.core.config.CoreAddressConfiguration;
+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;
+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;
+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.EndpointInject;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.amqp.AMQPComponent;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.impl.JndiRegistry;
+import org.apache.camel.impl.PropertyPlaceholderDelegateRegistry;
+import org.apache.camel.test.AvailablePortFinder;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import static org.apache.camel.component.amqp.AMQPConnectionDetails.AMQP_PORT;
+import static org.apache.camel.component.amqp.AMQPConnectionDetails.AMQP_SET_TOPIC_PREFIX;
+import static org.apache.camel.component.amqp.AMQPConnectionDetails.discoverAMQP;
+
+public class AMQPEmbeddedBrokerTest extends CamelTestSupport {
+    
+    static int amqpPort = AvailablePortFinder.getNextAvailable();
+    
+    static EmbeddedActiveMQ server = new EmbeddedActiveMQ();
+    
+    @EndpointInject(uri = ""mock:result"")
+    MockEndpoint resultEndpoint;
+
+    String expectedBody = ""Hello there!"";
+
+    @BeforeClass
+    public static void beforeClass() throws Exception {
+        Configuration config = new ConfigurationImpl();
+        AddressSettings addressSettings = new AddressSettings();
+        // Disable auto create address to make sure that topic name is correct without prefix
+        addressSettings.setAutoCreateAddresses(false);
+        config.addAcceptorConfiguration(""amqp"", ""tcp://0.0.0.0:"" + amqpPort 
+                                        + ""?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=AMQP;useEpoll=true;amqpCredits=1000;amqpMinCredits=300"");
+        config.setPersistenceEnabled(false);
+        config.addAddressesSetting(""#"", addressSettings);
+        config.setSecurityEnabled(false);
+        
+        // Set explicit topic name
+        CoreAddressConfiguration pingTopicConfig = new CoreAddressConfiguration();
+        pingTopicConfig.setName(""topic.ping"");
+        pingTopicConfig.addRoutingType(RoutingType.MULTICAST);
+        
+        config.addAddressConfiguration(pingTopicConfig);
+        
+        server.setConfiguration(config);
+        server.start();
+        System.setProperty(AMQP_PORT, amqpPort + """");
+        System.setProperty(AMQP_SET_TOPIC_PREFIX, ""false"");
+    }
+
+    @AfterClass
+    public static void afterClass() throws Exception {
+        server.stop();
+    }
+    
+    @Test
+    public void testTopicWithoutPrefix() throws Exception {
+        resultEndpoint.expectedMessageCount(1);
+        template.sendBody(""direct:send-topic"", expectedBody);
+        resultEndpoint.assertIsSatisfied();
+    }
+    
+    @Override
+    protected JndiRegistry createRegistry() throws Exception {
+        JndiRegistry registry = super.createRegistry();
+        return registry;
+    }
+
+    protected CamelContext createCamelContext() throws Exception {
+        CamelContext camelContext = super.createCamelContext();
+        JndiRegistry registry = (JndiRegistry)((PropertyPlaceholderDelegateRegistry)camelContext.getRegistry()).getRegistry();
+        registry.bind(""amqpConnection"", discoverAMQP(camelContext));
+        camelContext.addComponent(""amqp-customized"", new AMQPComponent());
+        return camelContext;
+    }
+    
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            public void configure() throws Exception {
+                from(""direct:send-topic"")
+                    .to(""amqp-customized:topic:topic.ping"");
+                
+                from(""amqp-customized:topic:topic.ping"")
+                    .to(""log:routing"")
+                    .to(""mock:result"");
+            }
+        };
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jul/18 15:19;githubbot;Github user dmvolod closed the pull request at:

    https://github.com/apache/camel/pull/2425
",18/Jul/18 03:44;open_matt_nz;Thanks for the quick action [~dmvolod]. I do believe newer versions of Active MQ no longer need the topic prefix but agree that maintaining backwards compatibility is on balance more important than a seamless experience with the Artemis replacement.,,,,,,,,,,,,,,,,,,,,,,,,,,
MllpTcpServerConsumer logging failure to set HL7 headers even when setting HL7 headers is disabled,CAMEL-12659,13172647,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hqstevenson,hqstevenson,hqstevenson,17/Jul/18 13:25,17/Jul/18 19:50,13/Mar/19 22:20,17/Jul/18 19:50,2.20.3,2.21.1,2.22.0,,,,,,,,,,,,,2.20.4,2.21.2,2.22.1,2.23.0,,camel-mllp,,,,,,0,,,,"In the process of setting Camel message headers from the payload, the MllpTcpServerConsumer is logging an error when it fails to identify the MSH segment of the message.  This error is logged before the hl7Headers configuration option is checked, so the error is always logged - even if setting the HL7 headers is disabled (i.e. hl7Headers=false).

This is a minor issue, but it effects edge cases where non-HL7 payloads are sent with the MLLP protocol.

The logic should be changed such that if the hl7Headers option is false, don't do anything (i.e. no log statement).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 17 19:50:06 UTC 2018,,,,,,,0|i3vz53:,9223372036854775807,,,,,,,,,,"17/Jul/18 19:50;hqstevenson;Correct on master w/commit 130a42223171a39cbe3d77021b2ecf15a21036f8.

Back-ported to 2.22.x w/commit fc069058dbf283e5b72e58d6c3e3f438c8c34ec0
Back-ported to 2.21.x w/commit 9d8f7c662562f17ad9d0282fbfae7fb585fd4d11
Back-ported to 2.20.x w/commit b7281f1eda9c5a4dd7328c3e4d55142f45737a22",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-univocity-parsers: Upgrade to version 2.6.4 once released,CAMEL-12568,13165178,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,aldettinger,aldettinger,10/Jun/18 11:43,12/Jul/18 16:36,13/Mar/19 22:20,12/Jul/18 16:36,2.22.0,,,,,,,,,,,,,,,2.22.0,,,,,,,,,,,0,,,,Version 2.6.4 would contain a lot of bug fixes. And correct a regression that prevented the upgrade to univocity-parsers 2.4.0.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,https://github.com/uniVocity/univocity-parsers/issues/238,,,,,,,,,,9223372036854775807,,,2018-06-10 11:43:56.0,,,,,,,0|i3upcf:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential NPE in CamelEndpointDetails.hashCode method,CAMEL-12635,13171158,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,apupier,apupier,10/Jul/18 13:51,11/Jul/18 13:55,13/Mar/19 22:20,11/Jul/18 13:55,2.22.0,,,,,,,,,,,,,,,2.22.1,2.23.0,,,,tooling,,,,,,0,,,,"in case className is null, there is an NPE

 
{noformat}
java.lang.NullPointerException
at org.apache.camel.parser.model.CamelEndpointDetails.hashCode(CamelEndpointDetails.java:153)
at java.util.HashMap.hash(HashMap.java:338)
at java.util.HashMap.put(HashMap.java:611)
at com.github.cameltooling.lsp.internal.CamelTextDocumentService.didSave(CamelTextDocumentService.java:223){noformat}

it is also possible with endpointURi but i think that endpointURi is always not null (but maybe worth checking for non null in hashCode method",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-10 20:08:16.677,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 11 13:55:01 UTC 2018,,,,,,,0|i3vq5z:,9223372036854775807,,,,,,,,,,10/Jul/18 20:08;davsclaus;You are welcome to provide a PR,11/Jul/18 08:45;apupier;see https://github.com/apache/camel/pull/2419,"11/Jul/18 13:54;ancosen;[~onders] please update the Jira here with the commit ref and backport to 2.22.x too, when you have time. Thanks.",11/Jul/18 13:55;onders;[https://gitbox.apache.org/repos/asf?p=camel.git;a=commit;h=7c6e2da40dc9fc2fb20eddd384e08002d33d24ac],,,,,,,,,,,,,,,,,,,,,,,,,,,,,
When using Tokenizer skipFirst - java.util.NoSuchElementException if only one element,CAMEL-12607,13169169,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dmvolod,ssavenko,ssavenko,29/Jun/18 14:07,05/Jul/18 09:00,13/Mar/19 22:20,05/Jul/18 09:00,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"I use {{.split().tokenize(""\n"", 10000, true).streaming()}} to stream csv file with header row and skip first line.
 When file contains ONLY header row - {{java.util.NoSuchElementException}} is thrown in [https://github.com/apache/camel/blob/camel-2.21.1/camel-core/src/main/java/org/apache/camel/util/GroupTokenIterator.java#L158], because when it skips first line - it does not check if it has next line and just calls next().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-29 16:46:17.986,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 05 09:00:04 UTC 2018,,,,,,,0|i3vdz3:,9223372036854775807,,,,,,,,,,"29/Jun/18 16:46;githubbot;dmvolod opened a new pull request #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Jun/18 16:46;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2402

    CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12607

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2402.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2402
    
----
commit 6c634aa249c4ca788cda6f77ffe87d9b6ec48e9a
Author: Dmitry Volodin <dmvolod@...>
Date:   2018-06-29T16:43:12Z

    CAMEL-12607: When using Tokenizer skipFirst -
    java.util.NoSuchElementException if only one element

----
","29/Jun/18 17:14;githubbot;oscerd commented on issue #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402#issuecomment-401417881
 
 
   LGTM l'età wait for release

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Jun/18 17:14;githubbot;oscerd edited a comment on issue #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402#issuecomment-401417881
 
 
   LGTM lets wait for release

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Jun/18 17:17;githubbot;dmvolod commented on issue #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402#issuecomment-401418510
 
 
   Thanks, @oscerd , yes, will wait for release to avoid conflicts with build process

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Jul/18 09:13;githubbot;oscerd commented on issue #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402#issuecomment-402069131
 
 
   You can merge it, I guess.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Jul/18 09:22;githubbot;dmvolod commented on issue #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402#issuecomment-402073041
 
 
   @oscerd , thanks, merged.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Jul/18 09:22;githubbot;dmvolod closed pull request #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/util/GroupTokenIterator.java b/camel-core/src/main/java/org/apache/camel/util/GroupTokenIterator.java
index 0bfd2689a4b..2f05116d8f0 100644
--- a/camel-core/src/main/java/org/apache/camel/util/GroupTokenIterator.java
+++ b/camel-core/src/main/java/org/apache/camel/util/GroupTokenIterator.java
@@ -50,7 +50,7 @@
     private final ByteArrayOutputStream bos = new ByteArrayOutputStream();
     
     /**
-     * Creates a new token based group titerator
+     * Creates a new token based group iterator
      *
      * @param camelContext  the camel context
      * @param it            the iterator to group
@@ -155,7 +155,12 @@ private Object doNext() throws IOException, NoTypeConversionAvailableException {
             data = it.next();
 
             if (skipFirst && hasSkipFirst.compareAndSet(false, true)) {
-                data = it.next();
+                if (it.hasNext()) {
+                    data = it.next();
+                } else {
+                    // Content with header only which is marked to skip
+                    data = """";
+                }
             }
 
             // include token in between
diff --git a/camel-core/src/test/java/org/apache/camel/processor/SplitGroupSkipFirstTest.java b/camel-core/src/test/java/org/apache/camel/processor/SplitGroupSkipFirstTest.java
index d85cac27c21..5c09847c27e 100644
--- a/camel-core/src/test/java/org/apache/camel/processor/SplitGroupSkipFirstTest.java
+++ b/camel-core/src/test/java/org/apache/camel/processor/SplitGroupSkipFirstTest.java
@@ -31,6 +31,14 @@ public void testSplitSkipFirst() throws Exception {
 
         assertMockEndpointsSatisfied();
     }
+    
+    public void testSplitSkipFirstOnlyHeader() throws Exception {
+        getMockEndpoint(""mock:group"").expectedBodiesReceived("""");
+
+        template.sendBody(""direct:start"", ""##comment\n"");
+
+        assertMockEndpointsSatisfied();
+    }
 
     @Override
     protected RouteBuilder createRouteBuilder() throws Exception {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Jul/18 09:22;githubbot;Github user dmvolod closed the pull request at:

    https://github.com/apache/camel/pull/2402
",03/Jul/18 09:30;dmvolod;Waiting until camel-2.22.x branch will create,05/Jul/18 09:00;dmvolod;Thanks [~ssavenko] for reporting.,,,,,,,,,,,,,,,,,,,,,,
camel-bindy: DefaultFactoryRegistry.unregister throws ConcurrentModificationException,CAMEL-12601,13168630,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dmvolod,ssavenko,ssavenko,27/Jun/18 13:24,27/Jun/18 20:24,13/Mar/19 22:20,27/Jun/18 20:24,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-bindy,,,,,,0,,,,"When calling new DefaultFactoryRegistry().unregister(StringFormatFactory.class) - java.util.ConcurrentModificationException is thrown. 

Because remove on list is called while streaming this list.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-27 20:24:00.808,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 27 20:24:00 UTC 2018,,,,,,,0|i3vanj:,9223372036854775807,,,,,,,,,,"27/Jun/18 20:24;dmvolod;Thanks, [~ssavenko], fixed.

Please check.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-google-mail: Remove scopes from configuration. This option is never really used.,CAMEL-12581,13166281,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,ancosen,ancosen,15/Jun/18 07:29,15/Jun/18 07:46,13/Mar/19 22:20,15/Jun/18 07:46,,,,,,,,,,,,,,,,2.22.0,,,,,camel-google-mail,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-06-15 07:29:59.0,,,,,,,0|i3uwf3:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
We should avoid the address setting of CxfRsEndpointConfigurer ,CAMEL-12540,13162267,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,27/May/18 02:09,27/May/18 07:07,13/Mar/19 22:20,27/May/18 07:07,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-cxfrs,,,,,,0,,,,"When using the CxfRsEndpointConfigurer to do the setting, the address setting from the Message header could be override.  We just need to make sure the address can be override from message header.",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12399,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sun May 27 07:07:45 UTC 2018,,,,,,,0|i3u7ef:,9223372036854775807,,,,,,,,,,27/May/18 07:07;njiang;Merged the patch into master and camel-2.21.x branches.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
route-coverage : report summary problem,CAMEL-12491,13157553,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,smor,smor,07/May/18 10:14,24/May/18 17:17,13/Mar/19 22:20,24/May/18 17:17,2.21.0,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,tooling,,,,,,0,,,,"Consider the example code given in CAMEL-12483

When running camel:route-coverage the report show to many passes for the routes. It looks like the RouteCoverageEventNotifier files holds the sum of all tests, and not just the values for the single test method. 
 
{code:java}
Class:  dk.smor.MySpringBootRouter
Route:  myRouteId

  Line #      Count   Route
  ------      -----   -----
      11          8   from
      13          8     log
      15          8     choice
      16          2       setBody
      18          2       log
      20          2       setBody
      22          2       log
      24          2       setBody
      26          2       log
      28          2       setBody
      30          2       log

Coverage: 11 out of 11 (100.0%)
{code}

each log statement should only have been passed 1 time. And a total for 4 passes for the whole route. 
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-17 11:28:27.531,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu May 24 17:17:54 UTC 2018,,,,,,,0|i3tetj:,9223372036854775807,,,,,,,,,,"17/May/18 11:28;davsclaus;Okay so the issue is that you have 2 unit tests, and that when you run both of them then the JMX state of the previous test is not cleared, eg if you add the spring annotation @DirtiesContext to ensure spring is cleanly shutdown between each test, you get the expected result.

However we can maybe detect this in the route coverage dumper - so the saved statistics do not include the previous data. It may be a bit tricky.","23/May/18 06:19;smor;Spot on [~davsclaus] Thanks for helping.
 I added
{code:java}
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
{code}
and now I get the expected result. ",24/May/18 17:17;davsclaus;Was a bit tricker to get resolved so it works with and without setting springs @DirtiesContext. Now it works without having to do so.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpOperationFailedException exposes password when using basic auth with user:password@host notation,CAMEL-12480,13156847,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,03/May/18 11:50,06/May/18 11:59,13/Mar/19 22:20,06/May/18 11:58,2.21.0,,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,camel-ahc,camel-http-common,camel-netty-http,camel-netty4-http,camel-undertow,,0,,,,"Simplified route:

{code}
from(inUri)
            .toD(""http4://user:password@host:port/path"");
{code}

When a HttpOperationFailedException occurs the message contains the unmasked password e.g. ""HTTP operation failed invoking http://user:password@host:port/path ...""

I guess Camel should mask the password.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-04 07:27:26.938,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Sun May 06 11:59:47 UTC 2018,,,,,,,0|i3taun:,9223372036854775807,,,,,,,,,,"04/May/18 07:27;davsclaus;Yeah good point, its also in camel-ahc, camel-netty-http netty4-http. There is URISupport that has a method to mask, which we use in other places.

A PR to fix this is welcome","04/May/18 17:57;githubbot;PascalSchumacher opened a new pull request #2317: CAMEL-12480: HttpOperationFailedException exposes password when using…
URL: https://github.com/apache/camel/pull/2317
 
 
   … basic auth with user:password@host notation
   
   Sanitize URI in HttpOperationFailedException constructor.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/May/18 17:57;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/2317

    CAMEL-12480: HttpOperationFailedException exposes password when using…

    … basic auth with user:password@host notation
    
    Sanitize URI in HttpOperationFailedException constructor.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel HttpOperationFailedException_exposes_password

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2317.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2317
    
----
commit fa9062d25ec8a229e2ce2407653bb1886045da71
Author: Pascal Schumacher <pascalschumacher@...>
Date:   2018-05-04T17:56:53Z

    CAMEL-12480: HttpOperationFailedException exposes password when using basic auth with user:password@host notation
    
    Sanitize URI in HttpOperationFailedException constructor.

----
","05/May/18 05:52;githubbot;davsclaus commented on issue #2317: CAMEL-12480: HttpOperationFailedException exposes password when using…
URL: https://github.com/apache/camel/pull/2317#issuecomment-386781964
 
 
   You need to do the same for other components as well
   ```
   workspace/camel/components (master)/$ git grep ""HTTP operation failed""
   camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcOperationFailedException.java:        super(""HTTP operation failed invoking "" + url + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
   camel-http-common/src/main/java/org/apache/camel/http/common/HttpOperationFailedException.java:        super(""HTTP operation failed invoking "" + uri + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
   camel-netty-http/src/main/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedException.java: * Exception when a Netty HTTP operation failed.
   camel-netty-http/src/main/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedException.java:        super(""Netty HTTP operation failed invoking "" + uri + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
   camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedException.java: * Exception when a Netty HTTP operation failed.
   camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedException.java:        super(""Netty HTTP operation failed invoking "" + uri + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/May/18 08:16;githubbot;davsclaus commented on issue #2317: CAMEL-12480: HttpOperationFailedException exposes password when using…
URL: https://github.com/apache/camel/pull/2317#issuecomment-386862365
 
 
   Looks goos, this can be merged to master and older branches

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/May/18 11:59;githubbot;PascalSchumacher commented on issue #2317: CAMEL-12480: HttpOperationFailedException exposes password when using…
URL: https://github.com/apache/camel/pull/2317#issuecomment-386874216
 
 
   Done.
   
   @davsclaus Thanks for the reviews!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/May/18 11:59;githubbot;PascalSchumacher closed pull request #2317: CAMEL-12480: HttpOperationFailedException exposes password when using…
URL: https://github.com/apache/camel/pull/2317
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcOperationFailedException.java b/components/camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcOperationFailedException.java
index 7505a1c072f..86fb2ea6f50 100644
--- a/components/camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcOperationFailedException.java
+++ b/components/camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcOperationFailedException.java
@@ -20,6 +20,7 @@
 
 import org.apache.camel.CamelException;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.URISupport;
 
 public class AhcOperationFailedException extends CamelException {
     private static final long serialVersionUID = -6731281444593522633L;
@@ -31,8 +32,9 @@
     private final String responseBody;
 
     public AhcOperationFailedException(String url, int statusCode, String statusText, String location, Map<String, String> responseHeaders, String responseBody) {
-        super(""HTTP operation failed invoking "" + url + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
-        this.url = url;
+        // sanitize url so we do not show sensitive information such as passwords
+        super(""HTTP operation failed invoking "" + URISupport.sanitizeUri(url) + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
+        this.url = URISupport.sanitizeUri(url);
         this.statusCode = statusCode;
         this.statusText = statusText;
         this.redirectLocation = location;
diff --git a/components/camel-ahc/src/test/java/org/apache/camel/component/ahc/AhcOperationFailedExceptionTest.java b/components/camel-ahc/src/test/java/org/apache/camel/component/ahc/AhcOperationFailedExceptionTest.java
new file mode 100644
index 00000000000..1e1a0e12440
--- /dev/null
+++ b/components/camel-ahc/src/test/java/org/apache/camel/component/ahc/AhcOperationFailedExceptionTest.java
@@ -0,0 +1,34 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.ahc;
+
+import org.junit.Test;
+
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.StringContains.containsString;
+import static org.junit.Assert.assertThat;
+
+public class AhcOperationFailedExceptionTest {
+
+    @Test
+    public void testUrlIsSanitized() {
+        AhcOperationFailedException ahcOperationFailedException = new AhcOperationFailedException(""http://user:password@host"", 500, """", """", null, """");
+
+        assertThat(ahcOperationFailedException.getMessage(), not(containsString(""password"")));
+        assertThat(ahcOperationFailedException.getUrl(), not(containsString(""password"")));
+    }
+}
diff --git a/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpOperationFailedException.java b/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpOperationFailedException.java
index 20086583ca8..4701783136d 100644
--- a/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpOperationFailedException.java
+++ b/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpOperationFailedException.java
@@ -20,6 +20,7 @@
 
 import org.apache.camel.CamelException;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.URISupport;
 
 public class HttpOperationFailedException extends CamelException {
     private static final long serialVersionUID = -8721487434390572634L;
@@ -31,8 +32,9 @@
     private final String responseBody;
 
     public HttpOperationFailedException(String uri, int statusCode, String statusText, String location, Map<String, String> responseHeaders, String responseBody) {
-        super(""HTTP operation failed invoking "" + uri + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
-        this.uri = uri;
+        // sanitize uri so we do not show sensitive information such as passwords
+        super(""HTTP operation failed invoking "" + URISupport.sanitizeUri(uri) + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
+        this.uri = URISupport.sanitizeUri(uri);
         this.statusCode = statusCode;
         this.statusText = statusText;
         this.redirectLocation = location;
diff --git a/components/camel-http-common/src/test/java/org/apache/camel/http/common/HttpOperationFailedExceptionTest.java b/components/camel-http-common/src/test/java/org/apache/camel/http/common/HttpOperationFailedExceptionTest.java
new file mode 100644
index 00000000000..49d98bb2d27
--- /dev/null
+++ b/components/camel-http-common/src/test/java/org/apache/camel/http/common/HttpOperationFailedExceptionTest.java
@@ -0,0 +1,34 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.http.common;
+
+import org.junit.Test;
+
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.StringContains.containsString;
+import static org.junit.Assert.assertThat;
+
+public class HttpOperationFailedExceptionTest {
+
+    @Test
+    public void testUriIsSanitized() {
+        HttpOperationFailedException httpOperationFailedException = new HttpOperationFailedException(""http://user:password@host"", 500, """", """", null, """");
+
+        assertThat(httpOperationFailedException.getMessage(), not(containsString(""password"")));
+        assertThat(httpOperationFailedException.getUri(), not(containsString(""password"")));
+    }
+}
diff --git a/components/camel-netty-http/src/main/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedException.java b/components/camel-netty-http/src/main/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedException.java
index cf8722a5b97..fda18207efe 100644
--- a/components/camel-netty-http/src/main/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedException.java
+++ b/components/camel-netty-http/src/main/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedException.java
@@ -18,6 +18,7 @@
 
 import org.apache.camel.CamelException;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.URISupport;
 import org.jboss.netty.handler.codec.http.HttpResponse;
 
 /**
@@ -32,8 +33,9 @@
     private final transient HttpResponse response;
 
     public NettyHttpOperationFailedException(String uri, int statusCode, String statusText, String location, HttpResponse response) {
-        super(""Netty HTTP operation failed invoking "" + uri + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
-        this.uri = uri;
+        // sanitize uri so we do not show sensitive information such as passwords
+        super(""Netty HTTP operation failed invoking "" + URISupport.sanitizeUri(uri) + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
+        this.uri = URISupport.sanitizeUri(uri);
         this.statusCode = statusCode;
         this.statusText = statusText;
         this.redirectLocation = location;
diff --git a/components/camel-netty-http/src/test/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedExceptionTest.java b/components/camel-netty-http/src/test/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedExceptionTest.java
new file mode 100644
index 00000000000..8bdd6d0ad8c
--- /dev/null
+++ b/components/camel-netty-http/src/test/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedExceptionTest.java
@@ -0,0 +1,34 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.netty.http;
+
+import org.junit.Test;
+
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.StringContains.containsString;
+import static org.junit.Assert.assertThat;
+
+public class NettyHttpOperationFailedExceptionTest {
+
+    @Test
+    public void testUriIsSanitized() {
+        NettyHttpOperationFailedException nettyHttpOperationFailedException = new NettyHttpOperationFailedException(""http://user:password@host"", 500, """", """", null);
+
+        assertThat(nettyHttpOperationFailedException.getMessage(), not(containsString(""password"")));
+        assertThat(nettyHttpOperationFailedException.getUri(), not(containsString(""password"")));
+    }
+}
diff --git a/components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedException.java b/components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedException.java
index 5baceeb9a60..32ea065dabc 100644
--- a/components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedException.java
+++ b/components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedException.java
@@ -22,6 +22,7 @@
 import org.apache.camel.CamelException;
 import org.apache.camel.component.netty4.NettyConverter;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.URISupport;
 
 /**
  * Exception when a Netty HTTP operation failed.
@@ -36,8 +37,9 @@
     private final String contentAsString;
 
     public NettyHttpOperationFailedException(String uri, int statusCode, String statusText, String location, HttpContent content) {
-        super(""Netty HTTP operation failed invoking "" + uri + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
-        this.uri = uri;
+        // sanitize uri so we do not show sensitive information such as passwords
+        super(""Netty HTTP operation failed invoking "" + URISupport.sanitizeUri(uri) + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
+        this.uri = URISupport.sanitizeUri(uri);
         this.statusCode = statusCode;
         this.statusText = statusText;
         this.redirectLocation = location;
diff --git a/components/camel-netty4-http/src/test/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedExceptionTest.java b/components/camel-netty4-http/src/test/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedExceptionTest.java
new file mode 100644
index 00000000000..db83dfbe8e1
--- /dev/null
+++ b/components/camel-netty4-http/src/test/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedExceptionTest.java
@@ -0,0 +1,36 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.netty4.http;
+
+import org.junit.Test;
+
+import io.netty.handler.codec.http.DefaultLastHttpContent;
+
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.StringContains.containsString;
+import static org.junit.Assert.assertThat;
+
+public class NettyHttpOperationFailedExceptionTest {
+
+    @Test
+    public void testUriIsSanitized() {
+        NettyHttpOperationFailedException nettyHttpOperationFailedException = new NettyHttpOperationFailedException(""http://user:password@host"", 500, """", """", new DefaultLastHttpContent());
+
+        assertThat(nettyHttpOperationFailedException.getMessage(), not(containsString(""password"")));
+        assertThat(nettyHttpOperationFailedException.getUri(), not(containsString(""password"")));
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/May/18 11:59;githubbot;Github user PascalSchumacher closed the pull request at:

    https://github.com/apache/camel/pull/2317
",,,,,,,,,,,,,,,,,,,,,,,,,
route-coverage : endChoice() problem,CAMEL-12483,13157108,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,smor,smor,04/May/18 10:33,06/May/18 08:33,13/Mar/19 22:20,06/May/18 08:33,2.21.0,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,tooling,,,,,,0,,,,"When running 
{code:java}
mvn camel:route-coverage{code}
on routes that use endChoice() you get a NullPointerException. 
{code:java}
[WARNING] Error parsing java file c:\workspace\kk\coverage\src\main\java\dk\smor\MySpringBootRouter.java code due null
java.lang.NullPointerException
at org.apache.camel.parser.helper.CamelJavaTreeParserHelper.parseCamelRouteTree(CamelJavaTreeParserHelper.java:132)
at org.apache.camel.parser.RouteBuilderParser.parseRouteBuilderTree(RouteBuilderParser.java:80)
at org.apache.camel.maven.RouteCoverageMojo.execute(RouteCoverageMojo.java:158)
at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
{code}

I have attached a zip file with some example code to re-produce the problem.
The example code has 2 routes, 1 with endChoice() and 1 without. The 2 route should behave equally.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,04/May/18 10:31;smor;coverage.zip;https://issues.apache.org/jira/secure/attachment/12921918/coverage.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2018-05-06 08:33:19.198,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sun May 06 08:33:19 UTC 2018,,,,,,,0|i3tcen:,9223372036854775807,,,,,,,,,,06/May/18 08:33;davsclaus;Thanks for reporting and with the sample project - that was great help to reproduce and fix the bug,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Memory leak: camel-cxf componet don't release UoW  in case of using ""robust"" property",CAMEL-12451,13152941,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,mfilippov,mfilippov,17/Apr/18 09:13,20/Apr/18 05:09,13/Mar/19 22:20,20/Apr/18 05:09,2.20.2,2.20.3,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-cxf,,,,,,0,,,,"In case of using ""org.apache.cxf.oneway.robust"" property camel-cxf component doesn't release UoW that leads to huge memory leak. I think it's relied with  the feature of output chain of cxf framwork which doesn't invoke additional interceptors in case of oneway operation.

in other words, this code is not called:

https://github.com/apache/camel/blob/master/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java

 
{code:java}


private class UnitOfWorkCloserInterceptor extends AbstractPhaseInterceptor<Message> {
   public UnitOfWorkCloserInterceptor() {
      super(Phase.POST_LOGICAL_ENDING);
}
@Override
public void handleMessage(Message message) throws Fault {
      Exchange cxfExchange = null;
      if ((cxfExchange = message.getExchange()) != null) {
         org.apache.camel.Exchange exchange =             cxfExchange.get(org.apache.camel.Exchange.class);
         if (exchange != null) {
            doneUoW(exchange);
   }
   }
   }
}
{code}
minimal example:

 

 
{code:java}
<cxf:cxfEndpoint id=""soap_in1"" 
   address=""/service1"" 
   xmlns:tns=""urn:api:service1"" 
   wsdlURL=""wsdl/service1.wsdl"" 
   serviceName=""tns:service1"" 
   endpointName=""tns:HTTP_Port"">
   <cxf:properties>
      <entry key=""dataFormat"" value=""PAYLOAD""/>
      <entry key=""org.apache.cxf.oneway.robust"" value=""true""/>
   </cxf:properties>
</cxf:cxfEndpoint>
<camelContext xmlns=""http://camel.apache.org/schema/blueprint""   id=""context1"">
   <route id=""loadTest1"">
      <from uri=""cxf:bean:soap_in1""/>
      <to uri=""log:end""/>
   </route> 
</camelContext>
{code}
 

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-17 09:47:14.285,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 20 05:09:19 UTC 2018,,,,,,,0|i3smxb:,9223372036854775807,,,,,,,,,,17/Apr/18 09:47;davsclaus;Try with synchronous=true on the cxf endpoint.,17/Apr/18 10:38;mfilippov;This has been tried. The result has not changed.,18/Apr/18 07:46;davsclaus;Its not recommended to use these seldom used options like oneway and roboust. ,"18/Apr/18 08:46;mfilippov;Thank you for the answer, unfortunately we can not abandon this option. At the moment, a workaround is used to clean up the ""onExchangeDone"" event. Is it possible to hope that this problem will be solved in closest future?",18/Apr/18 12:11;davsclaus;It helps if you have the time to dive into and try to find a solution. For example an unit test that reproduces the issue that we can add to camel-cxf would be a good start.,"18/Apr/18 14:35;njiang;For the oneway request, CXF [OutgoingChainInterceptor|https://github.com/apache/cxf/blob/master/core/src/main/java/org/apache/cxf/interceptor/OutgoingChainInterceptor.java#L66] just close steam, so the UnitOfWorkCloserInterceptor never has a chance to be called.  We may need to install another interceptor to handle the oneway calling in the CxfConsumer.","20/Apr/18 05:09;njiang;Committed patch into master, camel-2.21.x and camel-2.20.x branches.",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce - Limits can not be deserialized in API versions >= 41.0,CAMEL-12434,13151728,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,clromack,clromack,11/Apr/18 18:24,16/Apr/18 09:50,13/Mar/19 22:20,16/Apr/18 09:50,2.20.1,2.20.2,2.21.0,,,,,,,,,,,,,2.22.0,,,,,camel-salesforce,,,,,,0,,,,"Starting with Salesforce REST API 41.0, it appears that they have made a breaking change to the Limits json payload.  Jackson can no longer deserialize.

 

Error is

2018-04-11T13:02:45.644-0500 ERROR [dispatcherServlet] http-nio-8080-exec-3 [] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-isdv183994l-containerstore-com-1523469717836-0-13]] with root cause
com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize Map key of type org.apache.camel.component.salesforce.api.dto.Limits$Operation from String ""PermissionSets"": not a valid representation, problem: (com.fasterxml.jackson.databind.exc.InvalidFormatException) Can not deserialize Map key of type org.apache.camel.component.salesforce.api.dto.Limits$Operation from String ""PermissionSets"": not one of values excepted for Enum class: [DailyApiRequests, DailyDurableGenericStreamingApiEvents, ConcurrentAsyncGetReportInstances, DailyGenericStreamingApiEvents, DailyStreamingApiEvents, DailyWorkflowEmails, HourlyDashboardStatuses, HourlySyncReportRuns, DataStorageMB, SingleEmail, HourlyTimeBasedWorkflow, ConcurrentSyncReportRuns, DurableStreamingApiConcurrentClients, DailyBulkApiRequests, FileStorageMB, DailyAsyncApexExecutions, MassEmail, StreamingApiConcurrentClients, HourlyDashboardResults, HourlyAsyncReportRuns, HourlyDashboardRefreshes, HourlyODataCallout, DailyDurableStreamingApiEvents]
 at [Source: java.io.ByteArrayInputStream@215469a9; line: 1, column: 6646]
 at [Source: java.io.ByteArrayInputStream@215469a9; line: 1, column: 6646]
 at com.fasterxml.jackson.databind.exc.InvalidFormatException.from(InvalidFormatException.java:74)
 at com.fasterxml.jackson.databind.DeserializationContext.weirdKeyException(DeserializationContext.java:1389)
 at com.fasterxml.jackson.databind.DeserializationContext.handleWeirdKey(DeserializationContext.java:880)
 at com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.deserializeKey(StdKeyDeserializer.java:130)
 at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBind(MapDeserializer.java:445)
 at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:365)
 at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:27)
 at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3786)
 at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2139)
 at com.fasterxml.jackson.core.JsonParser.readValueAs(JsonParser.java:1650)
 at org.apache.camel.component.salesforce.api.dto.Limits$LimitsDeserializer.deserialize(Limits.java:55)
 at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3814)
 at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2924)
 at org.apache.camel.component.salesforce.internal.processor.JsonRestProcessor.processResponse(JsonRestProcessor.java:197)
 at org.apache.camel.component.salesforce.internal.processor.AbstractRestProcessor.lambda$processWithResponseCallback$5(AbstractRestProcessor.java:783)
 at org.apache.camel.component.salesforce.internal.client.DefaultRestClient$DelegatingClientCallback.onResponse(DefaultRestClient.java:502)
 at org.apache.camel.component.salesforce.internal.client.AbstractClientBase$1.onComplete(AbstractClientBase.java:235)
 at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:193)
 at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:185)
 at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:459)
 at org.eclipse.jetty.client.HttpReceiver.responseSuccess(HttpReceiver.java:405)
 at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.messageComplete(HttpReceiverOverHTTP.java:297)
 at org.eclipse.jetty.http.HttpParser.parseFields(HttpParser.java:1068)
 at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1393)
 at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.parse(HttpReceiverOverHTTP.java:170)
 at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:131)
 at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:70)
 at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:130)
 at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:116)
 at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:279)
 at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:104)
 at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:289)
 at org.eclipse.jetty.io.ssl.SslConnection$3.succeeded(SslConnection.java:149)
 at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:104)
 at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124)
 at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:247)
 at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:140)
 at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:131)
 at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:243)
 at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:679)
 at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:597)
 at java.lang.Thread.run(Thread.java:748)
2018-04-11T13:14:21.737-0500 WARN SubscriptionHelper HttpClient@2040015820-scheduler [] Connect failure: {failure={exception=java.util.concurren",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-16 09:50:41.489,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 16 09:50:41 UTC 2018,,,,,,,0|i3sfhz:,9223372036854775807,,,,,,,,,,"16/Apr/18 09:50;zregvart;[~clromack] thank you for reporting this! I've fixed this in 2.22 by adding the {{PermissionSets}} to the list of supported operations. And I've also future-proofed the implementation so that it won't break if Salesforce changes the Limits API again.

With this I had to do a slight API change on the Limits DTO, now the constructor needs to accept {{Map<?, Usage>}} instead of {{Map<Operation, Usage>}} as the type erasure doesn't allow to have two constructors that accept a {{Map}} object. It's a slight API change and coupled with my gut feeling that not a lot of users use the Limits API I'm a little hesitant to backport this to 2.21. But feel free to mention if this is a big issue for your use case and I can backport it so it gets released in the next 2.21 patch version.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpProducer cookie handling broken,CAMEL-12395,13147296,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kbrooks,kbrooks,22/Mar/18 22:00,13/Apr/18 07:22,13/Mar/19 22:20,13/Apr/18 07:22,2.20.2,,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-http,,,,,,0,,,,"Assumptions from https://tools.ietf.org/html/rfc6265
When a host response contains multiple headers with the same key, each with different values, the HttpProducer overwrites the value, effectively last-in-wins, extracted problem code below
{code:java}
protected void populateResponse(Exchange exchange, HttpRequestBase httpRequest, HttpResponse httpResponse,
Message in, HeaderFilterStrategy strategy, int responseCode) throws IOException, ClassNotFoundException {
  ...
  // propagate HTTP response headers
  Header[] headers = httpResponse.getAllHeaders();
  Map<String, List<String>> m = new HashMap<String, List<String>>();
  for (Header header : headers) {
    String name = header.getName();
    String value = header.getValue();
    m.put(name, Collections.singletonList(value)); //<--- This is the problem
    if (name.toLowerCase().equals(""content-type"")) {
      name = Exchange.CONTENT_TYPE;
      exchange.setProperty(Exchange.CHARSET_NAME, IOHelper.getCharsetNameFromContentType(value));
    }
    // use http helper to extract parameter value as it may contain multiple values
    Object extracted = HttpHelper.extractHttpParameterValue(value);
    if (strategy != null && !strategy.applyFilterToExternalHeaders(name, extracted, exchange)) {
     HttpHelper.appendHeader(answer.getHeaders(), name, extracted);
    }
  }
  // handle cookies
  if (getEndpoint().getCookieHandler() != null) {
  //if host responded with multiple Set-Cookie headers, only last cookie is presented
  getEndpoint().getCookieHandler().storeCookies(exchange, httpRequest.getURI(), m);
  }
...
{code}

A simple fix ->
{code:java}
...
for (Header header : headers) {
  String name = header.getName();
  String value = header.getValue();
  List<String> values = m.computeIfAbsent(name, k -> new ArrayList<>()).add(value);
...
{code}

On the flip side, when the client responds, the cookies pulled from the handler are not formatted correctly, broken code snippet from HttpProducer.process()

{code:java}
    if (getEndpoint().getCookieHandler() != null) {
            Map<String, List<String>> cookieHeaders = getEndpoint().getCookieHandler().loadCookies(exchange, httpRequest.getURI());
            for (Map.Entry<String, List<String>> entry : cookieHeaders.entrySet()) {
                String key = entry.getKey();
                if (entry.getValue().size() > 0) {
                    // use the default toString of a ArrayList to create in the form [xxx, yyy]
                    // if multi valued, for a single value, then just output the value as is
                    String s = entry.getValue().size() > 1 ? entry.getValue().toString() : entry.getValue().get(0);//<--- This is a problem
                    httpRequest.addHeader(key, s);
                }
            }
        }
{code}

This can be fixed simply
{code:java}
    if (getEndpoint().getCookieHandler() != null) {
            Map<String, List<String>> cookieHeaders = getEndpoint().getCookieHandler().loadCookies(exchange, httpRequest.getURI());
            for (Map.Entry<String, List<String>> entry : cookieHeaders.entrySet()) {
                String key = entry.getKey();
                if (entry.getValue().size() > 0) {
                    httpRequest.addHeader(key, entry.getValue().stream().collect(Collectors.joining("";""))); //semi-colon, not comma...
                }
            }
        }
{code}

Additionally, the CookieHandler.loadCookies method is not properly constructing the Cookie values, as it calls HttpCookie.toString - which represents the host's _Set-Cookie_ value, not the client's _Cookie_ value
",,,,,,,,,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-28 08:26:40.845,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 13 07:22:09 UTC 2018,,,,,,,0|i3ro9b:,9223372036854775807,,,,,,,,,,28/Mar/18 08:26;davsclaus;You are welcome to provide a PR or patch file,13/Apr/18 07:22;davsclaus;Thanks for reporting and the suggested patch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Swagger definition broken when working with dataType array,CAMEL-12420,13149989,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,hochas,hochas,04/Apr/18 12:46,05/Apr/18 11:43,13/Mar/19 22:20,05/Apr/18 11:43,2.21.0,,,,,,,,,,,,,,,2.22.0,,,,,camel-swagger,,,,,,0,,,,"I've created two gists. 

[This first gist|https://gist.github.com/hochas/10e1f65531211672de03d018e42447df] is generated by _camel-swagger-java:2.21.0_ and is broken
Copy the contents and paste into the [Swagger Editor|http://editor.swagger.io/]. See field _identification_ under _/classifier_ which according to the editor is broken.

[This second gist](https://gist.github.com/hochas/1218ef7a14da509f7079c1f5e098b53c) is modified by hand and displays the field _identification_ as expected. 

The difference is at [line 74|https://gist.github.com/hochas/1218ef7a14da509f7079c1f5e098b53c#file-camel-swagger-working-json-L74]. The enum type in the broken version, [line 76|https://gist.github.com/hochas/10e1f65531211672de03d018e42447df#file-camel-swagger-broken-json-L76], should be inside  the `items` object, according to [this issue|https://github.com/swagger-api/swagger-ui/issues/4400] at swagger-ui.

This current behavior [seems to have been correct|https://github.com/swagger-api/swagger-ui/issues/685] some time back.

This is the related parameter that I am creating in my camel route using the DSL:

{code:java}
parameters.add(new RestOperationParamDefinition()
		.name(""identification"")
		.type(RestParamType.query)
		.required(true)
		.description(""The types of identification to include"")
		.allowableValues(IdentificationType.getAllTypes())
		.collectionFormat(CollectionFormat.csv)
		.dataType(""array"")
		.arrayType(""string""));
{code}

If it helps, here is the entirety of the route:

{code:java}
public class ClassifierRoute extends RouteBuilder {
	
	@Override
	public void configure() throws Exception {
		rest(""/classifier"")
			.description(""MatchX Classifier REST API"")
			.id(""Classifier route"")
			.get()
				.description(""Gets classifiers based on supplied parameters"")
				.produces(MediaType.APPLICATION_JSON)
				.outType(Identification.class)
				.responseMessage()
					.code(200)
					.message(""Returns a result set in JSON format"")
					.endResponseMessage()
				.responseMessage()
					.code(400)
					.message(""The supplied query is invalid"")
					.endResponseMessage()
				.params(addParameters())
				.to(""direct:algorithmMatch"");
		
		from(""direct:algorithmMatch"")
			.bean(ClassifierMediator.class, ""getAlgorithmMatchCount"")
			.marshal()
				.json(JsonLibrary.Jackson);
	}

	private List<RestOperationParamDefinition> addParameters() {
		List<RestOperationParamDefinition> parameters = Lists.newArrayList();
		
		parameters.add(new RestOperationParamDefinition()
				.name(""feature"")
				.type(RestParamType.query)
				.required(false)
				.description(""The classifier feature type."")
				.allowableValues(FeatureType.getAllTypes()));
		
		parameters.add(new RestOperationParamDefinition()
				.name(""rating"")
				.type(RestParamType.query)
				.required(true)
				.description(""The rating of the associated classifier. Takes everything up to and including this number."")
				.allowableValues(""0"", ""1"", ""2"", ""3"", ""4"")
				.dataType(""integer""));
		
		parameters.add(new RestOperationParamDefinition()
				.name(""identification"")
				.type(RestParamType.query)
				.required(true)
				.description(""The types of identification to include"")
				.allowableValues(IdentificationType.getAllTypes())
				.collectionFormat(CollectionFormat.csv)
				.dataType(""array"")
				.arrayType(""string""));
		
		parameters.add(new RestOperationParamDefinition()
				.name(""from"")
				.type(RestParamType.query)
				.required(true)
				.dataType(""string"")
				.dataFormat(""date"")
				.description(""yyyy-MM-dd""));
		
		parameters.add(new RestOperationParamDefinition()
				.name(""to"")
				.type(RestParamType.query)
				.required(true)
				.dataType(""string"")
				.dataFormat(""date"")
				.description(""yyyy-MM-dd""));

		return parameters;
	}

}
{code}","
{code:xml}
<spring-boot.version>1.5.10.RELEASE</spring-boot.version>

<camel.version>2.21.0</camel.version>

<dependency>
	<groupId>org.apache.camel</groupId>
	<artifactId>camel-spring-boot-starter</artifactId>
	<version>${camel.version}</version>
</dependency>
<dependency>
	<groupId>org.apache.camel</groupId>
	<artifactId>camel-swagger-java-starter</artifactId>
	<version>${camel.version}</version>
</dependency>
{code}


{code:sh}
java -version
openjdk version ""1.8.0_162""
OpenJDK Runtime Environment (build 1.8.0_162-8u162-b12-0ubuntu0.16.04.2-b12)
OpenJDK 64-Bit Server VM (build 25.162-b12, mixed mode)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-05 11:43:47.797,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 05 11:43:47 UTC 2018,,,,,,,0|i3s4sv:,9223372036854775807,,,,,,,,,,05/Apr/18 11:43;zregvart;Now {{camel-swagger-java}} will generate Swagger specification that includes {{enum}} property in the {{items}} property if the type of the parameter is {{array}}.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AdviceWith weaveAddFirst using onCompletion issue,CAMEL-11962,13112785,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Oct/17 09:09,16/Mar/18 20:16,13/Mar/19 22:20,28/Oct/17 10:18,2.20.0,,,,,,,,,,,,,,,2.19.4,2.20.1,2.21.0,,,camel-test,,,,,,0,,,,"See user forum
http://camel.465427.n5.nabble.com/Sprint-Unit-test-fails-when-OnCompletion-configured-tp5814939.html",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12359,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-10-28 09:09:01.0,,,,,,,0|i3ltqn:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
simple - Body.ognl function should validate that OGNL starts with a dot,CAMEL-12355,13145623,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Mar/18 08:56,16/Mar/18 13:25,13/Mar/19 22:20,16/Mar/18 08:58,2.20.2,,,,,,,,,,,,,,,2.20.3,2.21.1,2.22.0,,,camel-core,,,,,,0,,,,"So that bodyxxx is reported as invalid, as it should be body.xxx etc",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-03-16 08:56:40.0,,,,,,,0|i3rdyn:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mllp - AutoAcknowledgement issues,CAMEL-12315,13142282,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hqstevenson,hqstevenson,hqstevenson,03/Mar/18 15:37,04/Mar/18 08:49,13/Mar/19 22:20,03/Mar/18 16:53,,,,,,,,,,,,,,,,2.21.0,,,,,camel-mllp,,,,,,0,,,,"Several minor issues were discovered with the automatic acknowledgment functionality.
 * autoAck = false is ignored (the component still attempts to generate an acknowledgement if one is not found on the exchage
 * acknowledgment generation exceptions are not passed to the error handler when bridgeErrorHander=true
 * invalid acknowledgment exceptions are not passed to the error handler when bridgeErrorHander=true
 * the automatically generated acknowledgement uses the same timestamp as the message
 * the automatically generated acknowledgement uses the same message control id as the message
 * the automatically generated acknowledgment includes MSH-8 if present, which should not be passed on
 * automatically generated negative acknowledgments do not include any information about the failure",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 03 16:53:17 UTC 2018,,,,,,,0|i3qts7:,9223372036854775807,,,,,,,,,,03/Mar/18 16:53;hqstevenson;Corrected issues w/commit 9b19e60dbe42df472aefa45e10fbfd1f3436a43e,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow overriding the server reported endpoint,CAMEL-12287,13140505,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dentrassi,ctron,ctron,23/Feb/18 14:04,26/Feb/18 09:27,13/Mar/19 22:20,26/Feb/18 08:59,2.19.0,2.20.2,,,,,,,,,,,,,,2.21.0,,,,,camel-milo,,,,,,0,,,,"When the client connects to the server it asks the server first for available endpoints. The server should report back with a set of endpoints, which again contain the hostname to connect to.

If the server reports back with a hostname which the client cannot look up, it is currently not possible to connect to the server with camel-milo.

I did prepare a PR which adds a boolean flag to the endpoint, allowing to override the host of reported endpoint with the one originally provided. This is disabled by default, but can be enabled when necessary.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-26 08:41:40.327,,,no_permission,,Moderate,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 26 09:27:51 UTC 2018,,,,,,,0|i3qivj:,9223372036854775807,,,,,,,,,,"26/Feb/18 08:41;githubbot;ctron opened a new pull request #2237: CAMEL-12287: Allow overriding the endpoint host
URL: https://github.com/apache/camel/pull/2237
 
 
   This change adds the ability to override the server reported
   hostname/IP with the originally provided host/IP when connecting
   to the server.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Feb/18 08:41;githubbot;GitHub user ctron opened a pull request:

    https://github.com/apache/camel/pull/2237

    CAMEL-12287: Allow overriding the endpoint host

    This change adds the ability to override the server reported
    hostname/IP with the originally provided host/IP when connecting
    to the server.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ctron/camel feature/fix_issue_12287_1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2237.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2237
    
----
commit b365e14e852f56e60ad1744908b5bf9f035a0d14
Author: Jens Reimann <jreimann@...>
Date:   2018-02-22T09:30:17Z

    CAMEL-12287: Allow overriding the endpoint host
    
    This change adds the ability to override the server reported
    hostname/IP with the originally provided IP when connecting
    to the server.

----
","26/Feb/18 08:59;githubbot;oscerd commented on issue #2237: CAMEL-12287: Allow overriding the endpoint host
URL: https://github.com/apache/camel/pull/2237#issuecomment-368431918
 
 
   Thanks for the PR, it has been merged.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Feb/18 08:59;githubbot;oscerd closed pull request #2237: CAMEL-12287: Allow overriding the endpoint host
URL: https://github.com/apache/camel/pull/2237
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-milo/src/main/docs/milo-client-component.adoc b/components/camel-milo/src/main/docs/milo-client-component.adoc
index eb3e2b5db37..ea1f48a3320 100644
--- a/components/camel-milo/src/main/docs/milo-client-component.adoc
+++ b/components/camel-milo/src/main/docs/milo-client-component.adoc
@@ -95,7 +95,7 @@ with the following path and query parameters:
 | *endpointUri* | *Required* The OPC UA server endpoint |  | String
 |===
 
-==== Query Parameters (23 parameters):
+==== Query Parameters (24 parameters):
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
 |===
@@ -119,6 +119,7 @@ with the following path and query parameters:
 | *keyStoreUrl* (client) | The URL where the key should be loaded from |  | URL
 | *maxPendingPublishRequests* (client) | The maximum number of pending publish requests |  | Long
 | *maxResponseMessageSize* (client) | The maximum number of bytes a response message may have |  | Long
+| *overrideHost* (client) | Override the server reported endpoint host with the host from the endpoint URI. | false | boolean
 | *productUri* (client) | The product URI | http://camel.apache.org/EclipseMilo | String
 | *requestTimeout* (client) | Request timeout in milliseconds |  | Long
 | *sessionName* (client) | Session name |  | String
diff --git a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java
index 1a78648a93c..75743ea4009 100644
--- a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java
+++ b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java
@@ -85,6 +85,9 @@
     @UriParam(label = ""client"", javaType = ""java.lang.String"")
     private Set<String> allowedSecurityPolicies = new HashSet<>();
 
+    @UriParam(label = ""client"")
+    private boolean overrideHost;
+
     public MiloClientConfiguration() {
     }
 
@@ -95,6 +98,7 @@ public MiloClientConfiguration(final MiloClientConfiguration other) {
         this.productUri = other.productUri;
         this.requestTimeout = other.requestTimeout;
         this.allowedSecurityPolicies = allowedSecurityPolicies != null ? new HashSet<>(other.allowedSecurityPolicies) : null;
+        this.overrideHost = other.overrideHost;
     }
 
     public void setEndpointUri(final String endpointUri) {
@@ -316,7 +320,19 @@ public void setAllowedSecurityPolicies(final String allowedSecurityPolicies) {
     }
 
     public Set<String> getAllowedSecurityPolicies() {
-        return allowedSecurityPolicies;
+        return this.allowedSecurityPolicies;
+    }
+
+    /**
+     * Override the server reported endpoint host with the host from the
+     * endpoint URI.
+     */
+    public void setOverrideHost(boolean overrideHost) {
+        this.overrideHost = overrideHost;
+    }
+
+    public boolean isOverrideHost() {
+        return overrideHost;
     }
 
     @Override
diff --git a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java
index f2d31025a4b..904217ddc19 100644
--- a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java
+++ b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java
@@ -17,6 +17,7 @@
 package org.apache.camel.component.milo.client.internal;
 
 import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -416,7 +417,11 @@ private Connected performConnect() throws Exception {
                 }
             }
 
-            return findEndpoint(endpoints);
+            try {
+                return findEndpoint(endpoints);
+            } catch (final URISyntaxException e) {
+                throw new RuntimeException(""Failed to find endpoints"", e);
+            }
         }).get();
 
         LOG.debug(""Selected endpoint: {}"", endpoint);
@@ -495,7 +500,7 @@ private synchronized void triggerReconnect(final boolean immediate) {
         }
     }
 
-    private EndpointDescription findEndpoint(final EndpointDescription[] endpoints) {
+    private EndpointDescription findEndpoint(final EndpointDescription[] endpoints) throws URISyntaxException {
 
         final Predicate<String> allowed;
         final Set<String> uris = this.configuration.getAllowedSecurityPolicies();
@@ -517,7 +522,55 @@ private EndpointDescription findEndpoint(final EndpointDescription[] endpoints)
                 best = ep;
             }
         }
-        return best;
+
+        // return result, might override the host part
+
+        return overrideHost(best);
+    }
+
+    /**
+     * Optionally override the host of the endpoint URL with the configured one.
+     * <br>
+     * The method will call {@link #overrideHost(String)} if the endpoint is not
+     * {@code null} and {@link MiloClientConfiguration#isOverrideHost()} returns
+     * {@code true}.
+     * 
+     * @param desc The endpoint descriptor to work on
+     * @return Either the provided or updated endpoint descriptor. Only returns
+     *         {@code null} when the input was {@code null}.
+     * @throws URISyntaxException on case the URI is malformed
+     */
+    private EndpointDescription overrideHost(final EndpointDescription desc) throws URISyntaxException {
+        if (desc == null) {
+            return null;
+        }
+
+        if (!this.configuration.isOverrideHost()) {
+            return desc;
+        }
+
+        return new EndpointDescription(overrideHost(desc.getEndpointUrl()), desc.getServer(), desc.getServerCertificate(), desc.getSecurityMode(), desc.getSecurityPolicyUri(),
+                                       desc.getUserIdentityTokens(), desc.getTransportProfileUri(), desc.getSecurityLevel());
+    }
+
+    /**
+     * Override host part of the endpoint URL with the configured one.
+     * 
+     * @param endpointUrl the server provided endpoint URL
+     * @return A new endpoint URL with the host part exchanged by the configured
+     *         host. Will be {@code null} when the input is {@code null}.
+     * @throws URISyntaxException on case the URI is malformed
+     */
+    private String overrideHost(final String endpointUrl) throws URISyntaxException {
+
+        if (endpointUrl == null) {
+            return null;
+        }
+
+        final URI uri = URI.create(endpointUrl);
+        final URI originalUri = URI.create(configuration.getEndpointUri());
+
+        return new URI(uri.getScheme(), uri.getUserInfo(), originalUri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment()).toString();
     }
 
     protected synchronized void whenConnected(final Worker<Connected> worker) {
diff --git a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java
index cd194aa1384..2abe2102d3e 100644
--- a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java
+++ b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java
@@ -175,6 +175,11 @@ public void setResolvePropertyPlaceholders(
          * use the highest.
          */
         private Set allowedSecurityPolicies;
+        /**
+         * Override the server reported endpoint host with the host from the
+         * endpoint URI.
+         */
+        private Boolean overrideHost = false;
 
         public String getEndpointUri() {
             return endpointUri;
@@ -303,5 +308,13 @@ public Set getAllowedSecurityPolicies() {
         public void setAllowedSecurityPolicies(Set allowedSecurityPolicies) {
             this.allowedSecurityPolicies = allowedSecurityPolicies;
         }
+
+        public Boolean getOverrideHost() {
+            return overrideHost;
+        }
+
+        public void setOverrideHost(Boolean overrideHost) {
+            this.overrideHost = overrideHost;
+        }
     }
 }
\ No newline at end of file


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Feb/18 08:59;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2237
","26/Feb/18 09:27;githubbot;ctron commented on issue #2237: CAMEL-12287: Allow overriding the endpoint host
URL: https://github.com/apache/camel/pull/2237#issuecomment-368439261
 
 
   Awesome. Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-beanio - Set encoding option does not work,CAMEL-12284,13139889,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Feb/18 12:31,21/Feb/18 12:43,13/Mar/19 22:20,21/Feb/18 12:43,2.20.2,,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-beanio,,,,,,0,,,,Reported on user forum,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-02-21 12:31:37.0,,,,,,,0|i3qf33:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
convertBodyTo w/Charset removes existing Charset from Exchange,CAMEL-12279,13139464,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hqstevenson,hqstevenson,hqstevenson,19/Feb/18 15:38,20/Feb/18 01:19,13/Mar/19 22:20,20/Feb/18 01:19,,,,,,,,,,,,,,,,2.21.0,,,,,camel-core,,,,,,0,,,,"When covertBodyTo is used with both a target type and a Charset for an Exchange that already has the CamelCharsetName Exchange property set, the Exchange property is deleted.

The original value of the CamelCharsetName exchange property should be restored after the conversion.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 20 01:19:51 UTC 2018,,,,,,,0|i3qcgn:,9223372036854775807,,,,,,,,,,20/Feb/18 01:19;hqstevenson;Resolved w/commit  c7b93d9d4cdccf34fb543272c7bd9e507e2eb474,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default value for String field results in null for CSV / Bindy,CAMEL-12260,13138135,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dmvolod,boro,boro,13/Feb/18 11:18,16/Feb/18 15:07,13/Mar/19 22:20,16/Feb/18 15:06,2.20.2,,,,,,,,,,,,,,,2.21.0,,,,,camel-bindy,,,,,,0,,,,"**CAMEL-5018 added ""support the set the default value on the field of bindy CVS"", which is nice, but the default value is useless for Strings, because BindyCSVFactory turns the empty value to null even when defaultValue = """", see

[https://github.com/apache/camel/blob/camel-2.20.x/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java#L230]

and

[https://github.com/apache/camel/blob/camel-2.20.x/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java#L234]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-13 14:07:26.639,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 16 15:07:22 UTC 2018,,,,,,,0|i3q49j:,9223372036854775807,,,,,,,,,,"13/Feb/18 14:07;davsclaus;Contributions is welcome

http://camel.apache.org/contributing","16/Feb/18 14:58;githubbot;dmvolod opened a new pull request #2228: CAMEL-12260: Default value for String field results is null for CSV/Bindy
URL: https://github.com/apache/camel/pull/2228
 
 
   The DataField.defaultValue always """" for String by default.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Feb/18 14:58;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2228

    CAMEL-12260: Default value for String field results is null for CSV/Bindy

    The DataField.defaultValue always """" for String by default.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12260

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2228.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2228
    
----
commit e16251daa7ed03c9fd4ffef54a03c1947bad5e03
Author: Dmitry Volodin <dmvolod@...>
Date:   2018-02-16T14:55:00Z

    CAMEL-12260: Default value for String field results is null for
    CSV/Bindy

----
","16/Feb/18 15:01;githubbot;oscerd commented on issue #2228: CAMEL-12260: Default value for String field results is null for CSV/Bindy
URL: https://github.com/apache/camel/pull/2228#issuecomment-366259140
 
 
   LGTM, since this is a change in the current behavior of 2.20.x I'll merge this one only on master.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Feb/18 15:07;githubbot;oscerd commented on issue #2228: CAMEL-12260: Default value for String field results is null for CSV/Bindy
URL: https://github.com/apache/camel/pull/2228#issuecomment-366260532
 
 
   Thanks for the PR.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Feb/18 15:07;githubbot;oscerd closed pull request #2228: CAMEL-12260: Default value for String field results is null for CSV/Bindy
URL: https://github.com/apache/camel/pull/2228
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java b/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java
index f0bc611708c..fd1c1490209 100644
--- a/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java
+++ b/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java
@@ -79,6 +79,7 @@ public void initModel() throws Exception {
      *  
      * @param root
      */
+    @SuppressWarnings(""rawtypes"")
     private void loadModels(Class<?> root) {
         models.add(root);
         modelClassNames.add(root.getName());
@@ -231,6 +232,8 @@ public static Object getDefaultValueForPrimitive(Class<?> clazz) throws Exceptio
             return Character.MIN_VALUE;
         } else if (clazz == boolean.class) {
             return false;
+        } else if (clazz == String.class) {
+            return """"; 
         } else {
             return null;
         }
diff --git a/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java b/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java
index 5585abb5cd2..d5c9799bd88 100644
--- a/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java
+++ b/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java
@@ -313,6 +313,7 @@ private boolean isTrimmingNeededAndEnabled(BindyFixedLengthFactory factory, Stri
         return factory.isIgnoreTrailingChars() && myLine.length() > factory.recordLength();
     }
 
+    @SuppressWarnings(""unused"")
     private String rightPad(String myLine, int length) {
         return String.format(""%1$-"" + length + ""s"", myLine);
     }
diff --git a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyRecordFieldStartingWithSeperatorCharTest.java b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyRecordFieldStartingWithSeperatorCharTest.java
index bee2c7b1659..144429f704f 100644
--- a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyRecordFieldStartingWithSeperatorCharTest.java
+++ b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyRecordFieldStartingWithSeperatorCharTest.java
@@ -61,7 +61,7 @@ public void testUnmarshallCsvRecordFieldStartingWithSeparatorChar() throws Excep
         assertEquals(BigDecimal.valueOf(3), row.getNumber());
 
         row = mockEndPoint.getExchanges().get(3).getIn().getBody(BindyCsvRowFormat.class);
-        assertEquals(null, row.getFirstField());
+        assertEquals("""", row.getFirstField());
         assertEquals("",val2,"", row.getSecondField());
         assertEquals(BigDecimal.valueOf(4), row.getNumber());
     }
@@ -79,6 +79,7 @@ public void configure() throws Exception {
     }
 
     //from https://issues.apache.org/jira/browse/CAMEL-11065
+    @SuppressWarnings(""serial"")
     @CsvRecord(separator = "","", quote = ""'"")
     public static class BindyCsvRowFormat implements Serializable {
 
diff --git a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.java b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.java
index 277c26c0b98..d507c3f2e99 100644
--- a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.java
+++ b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.java
@@ -25,6 +25,7 @@
 import org.apache.camel.ProducerTemplate;
 import org.apache.camel.builder.RouteBuilder;
 import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.dataformat.bindy.annotation.DataField;
 import org.apache.camel.dataformat.bindy.format.FormatException;
 import org.apache.camel.dataformat.bindy.model.simple.oneclass.Order;
 import org.apache.camel.processor.interceptor.Tracer;
@@ -127,8 +128,13 @@ public void testUnMarshallMessageWithMissingFields() throws Exception {
 
         assertNotNull(orders);
         // As the @DataField defines a default value for the firstName, the
-        // value might not be empty
+        // value might not be empty and equal to defaultValue property 
+        // inside @DataField annotation
         assertFalse(orders.get(0).getFirstName().isEmpty());
+        assertEquals(""Joe"", orders.get(0).getFirstName());
+        
+        // Check default String value set to empty ("""") for the skipped clientNr field
+        assertEquals("""", orders.get(0).getClientNr());
     }
     
     public static class ContextConfig extends RouteBuilder {
diff --git a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/BindyPaddingAndTrimmingTest.java b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/BindyPaddingAndTrimmingTest.java
index 9e3e1740853..8ba38f9ddb6 100644
--- a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/BindyPaddingAndTrimmingTest.java
+++ b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/BindyPaddingAndTrimmingTest.java
@@ -26,8 +26,6 @@
 import org.hamcrest.core.Is;
 import org.junit.Test;
 
-import static org.hamcrest.core.IsNull.nullValue;
-
 public class BindyPaddingAndTrimmingTest extends CamelTestSupport {
 
     private static final String URI_DIRECT_UNMARSHAL = ""direct:unmarshall"";
@@ -56,7 +54,7 @@ public void testUnmarshal() throws Exception {
         unmarhsalResult.assertIsSatisfied();
         MyBindyModel myBindyModel = unmarhsalResult.getReceivedExchanges().get(0).getIn().getBody(MyBindyModel.class);
         assertEquals(""foo  "", myBindyModel.foo);
-        assertThat(myBindyModel.bar, Is.is(nullValue()));
+        assertThat(myBindyModel.bar, Is.is(""""));
     }
 
     @Test


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Feb/18 15:07;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2228
",,,,,,,,,,,,,,,,,,,,,,,,,,
ResrSwaggerServlet removes last part of context root,CAMEL-12222,13135655,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,dariusx,dariusx,02/Feb/18 00:53,13/Feb/18 14:32,13/Mar/19 22:20,13/Feb/18 14:32,,,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-swagger,,,,,,0,,,,"The method within RestSwaggerServlet, looks for the last ""/"" in the context root, and drops anything after that slash.
{code:java}
private String translateContextPath(HttpServletRequest request) {
  String path = request.getContextPath();
  if (path.isEmpty() || path.equals(""/"")) {
      return """";
  } else {
     int idx = path.lastIndexOf(""/"");
     if (idx > 0) {
         return path.substring(0, idx);
     }
  }
  return path;
}{code}
Even though this has been deprecated, it would be good to fix it. 

An approach could be to add a servlet init parameter named ""translateContextPath"" which would default to true, and would work exactly as it does today by default. if set to false, it would return whatever value is in request.getContextPath() , with no translation.

Also, to avoid the NPE thrown, pass in an empty RestConfiguration to RestSwaggerSupport.renderResourceListing() 

(See: https://issues.apache.org/jira/browse/CAMEL-12038) 

I plan on working on this. Creating a Jira to get feedback on the approach",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-11 17:37:28.098,,,no_permission,,Moderate,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 13 14:32:13 UTC 2018,,,,,,,0|i3pozb:,9223372036854775807,,,,,,,,,,"11/Feb/18 17:37;githubbot;DariusX opened a new pull request #2220: CAMEL-12222: RestSwaggerServlet - added option to suppress ""translate…
URL: https://github.com/apache/camel/pull/2220
 
 
   Added an option to suppress ""translateContextPath""
   Also, added a fix to allow this class to be used in the 2.20.1 version, even though it is deprecated

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Feb/18 17:37;githubbot;GitHub user DariusX opened a pull request:

    https://github.com/apache/camel/pull/2220

    CAMEL-12222: RestSwaggerServlet - added option to suppress ""translate…

    Added an option to suppress ""translateContextPath""
    Also, added a fix to allow this class to be used in the 2.20.1 version, even though it is deprecated

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/DariusX/camel CAMEL-12222-Rest-Swagger-Context

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2220.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2220
    
----
commit ec87c965f92ca04e874bae115f16f01c5034985e
Author: realistTheorist <realisttheorist@...>
Date:   2018-02-11T17:35:22Z

    CAMEL-12222: RestSwaggerServlet - added option to suppress ""translateContextPath""

----
","13/Feb/18 14:27;githubbot;davsclaus closed pull request #2220: CAMEL-12222: RestSwaggerServlet - added option to suppress ""translate…
URL: https://github.com/apache/camel/pull/2220
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/servlet/RestSwaggerServlet.java b/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/servlet/RestSwaggerServlet.java
index 51ca3d2e0d7..15f9d001627 100644
--- a/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/servlet/RestSwaggerServlet.java
+++ b/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/servlet/RestSwaggerServlet.java
@@ -34,6 +34,7 @@
 import org.apache.camel.Exchange;
 import org.apache.camel.impl.DefaultClassResolver;
 import org.apache.camel.spi.ClassResolver;
+import org.apache.camel.spi.RestConfiguration;
 import org.apache.camel.swagger.RestApiResponseAdapter;
 import org.apache.camel.swagger.RestSwaggerSupport;
 import org.apache.camel.util.EndpointHelper;
@@ -61,6 +62,19 @@
 
     private String apiContextIdPattern;
     private boolean apiContextIdListing;
+    private boolean translateContextPath = true;
+
+
+    public boolean isTranslateContextPath() { return translateContextPath; }
+
+    /**
+     * Sets whether the context path of the request should be translated (true) or used as-is (false)
+     * Optional, Defaults to true
+     * @param translateContextPath
+     */
+    public void setTranslateContextPath(boolean translateContextPath) { this.translateContextPath = translateContextPath; }
+
+
 
     public String getApiContextIdPattern() {
         return apiContextIdPattern;
@@ -115,6 +129,11 @@ public void init(final ServletConfig config) throws ServletException {
         if (listing != null) {
             apiContextIdListing = Boolean.valueOf(listing.toString());
         }
+        Object translate = parameters.remove(""translateContextPath"");
+        if (translate != null) {
+            translateContextPath = Boolean.valueOf(translate.toString());
+        }
+
     }
 
     @Override
@@ -192,7 +211,7 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response) t
                 if (!match) {
                     adapter.noContent();
                 } else {
-                    support.renderResourceListing(adapter, swaggerConfig, name, route, json, yaml, classResolver, null);
+                    support.renderResourceListing(adapter, swaggerConfig, name, route, json, yaml, classResolver, new RestConfiguration());
                 }
             }
         } catch (Exception e) {
@@ -229,6 +248,9 @@ private void initBaseAndApiPaths(HttpServletRequest request) throws MalformedURL
      */
     private String translateContextPath(HttpServletRequest request) {
         String path = request.getContextPath();
+        if (!translateContextPath) {
+            return path;
+        }
         if (path.isEmpty() || path.equals(""/"")) {
             return """";
         } else {
@@ -240,4 +262,4 @@ private String translateContextPath(HttpServletRequest request) {
         return path;
     }
 
-}
+}
\ No newline at end of file


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Feb/18 14:27;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2220
","13/Feb/18 14:32;davsclaus;Thanks for the PR.

I fixed the checkstyle issue

http://camel.apache.org/building.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,
AWS S3 Consumer does not return custom headers in S3 Headers,CAMEL-12256,13137854,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,noel.aranha,noel.aranha,12/Feb/18 12:58,13/Feb/18 08:30,13/Mar/19 22:20,12/Feb/18 14:03,2.19.2,2.20.1,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-aws,,,,,,0,,,,"We can add custom user given metadata in AWS S3 as part of S3Headers in S3 Producer. However, the same user provided meta data cannot be retrieved via S3 Consumer.

Amazon SDK S3 Object provides two types of meta data:

1) Raw Meta Data
2) User Meta Data

In S3Endpoint.java, you can either set User Meta Data instead of Raw Meta Data for S3 Headers or provide another key like S3UserMetaData and provide this User Meta Data as value for that key.

Currently, there seems to be no way to access this User provided custom headers using Camel.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-12 13:05:33.222,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 13 08:30:05 UTC 2018,,,,,,,0|i3q2j3:,9223372036854775807,,,,,,,,,,12/Feb/18 13:05;ancosen;I'll add an header for userMetadata with the Map from the S3Object.getMetadata.getUserMetadata,"13/Feb/18 07:30;noel.aranha;Thank you. The fix looks good. Do you have any idea on when these Fix versions (2.19.5, 2.20.3) will be released?","13/Feb/18 08:30;ancosen;We released 2.20.2 in the last months, so I believe a couple of months or less.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OsgiCamelContextPublisher might leak Service-References,CAMEL-11876,13106659,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,laeubi,laeubi,03/Oct/17 09:48,01/Feb/18 14:46,13/Mar/19 22:20,01/Feb/18 14:46,,,,,,,,,,,,,,,,2.21.0,,,,,osgi,,,,,,0,,,,"OsgiCamelContextPublisher holds a Map of Service-References in its doShutdown method this map is cleared.

This could lead to problem when there are still items in the map.

Instead of clearing the map, it should be iterate+remove

{code:java}
Iterator<ServiceRegistration<?>> it = registrations.values().iterator();
    	while (it.hasNext()) {
			it.next().unregister();
			it.remove();
		}
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-03 10:05:00.779,,,no_permission,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 15 09:58:03 UTC 2018,,,,,,,0|i3kthj:,9223372036854775807,,,,,,,,,,"03/Oct/17 10:05;vrlgohel;Hi, 

Thanks for reporting this. Do you have an application reproducer to test this ? or how are you observing this?  Can you attach a snapshot of the memory leak suspects you have identified and attached it to the ticket ? ","03/Oct/17 10:18;laeubi;No I just found this in the code while debugging another problem an found it serious enough to report. In fact there are two cases:

# The map is already empty at this point (I can't found a proof for this) then the clear is pointless
# The map is NOT empty at this point and you will have CamelContext registrations hanging around that get cleared only when the bundle stops at all

The Class also does some fancy checks to see if a CamelContext is already registered under the given name so maybe this was added to adress a problem with dangling service references? I'm just not familiar enough with camel life-cycle to guess if there are cases where a CamelCOntext is started without beeing stopped be for, so this code looks suspicious to me :-)","03/Oct/17 10:20;laeubi;So to reproduce this something like this must happen:

# A CamelContextService is registered by a bundle
# The doShutdown Method is called (no sure when this would happen)
# Shutdown the CamelContext
# The Service should still be there",12/Jan/18 08:47;davsclaus;In the notify method it unregisters the CamelContext ,"12/Jan/18 08:47;davsclaus;OSGi is complex, lets leave the code as-is to avoid causing unforsen problems for others","12/Jan/18 08:57;laeubi;This is nothing specific to OSGi, if you clear a Map of e.g. open Sockets instead of closing them explicitly you will leak open file descriptor.

Same here: You clear a map with ServiceRefernece so you will not be sure the serivce is unregistered until the bundle itself is stopped.

If unregistering stale reference causes problem somewhere else it should be fixed there and not hiding bugs by simply ignore the problem.

In fact OSGi is not that complex at all, but its crucial to cleanup if your done with something or you will get doomed soon or later...","15/Jan/18 09:58;davsclaus;Can you submit a github PR with the changes you think is needed, then we can take a look at that",,,,,,,,,,,,,,,,,,,,,,,,,,
End of HL7 Message not always detected correctly,CAMEL-12210,13134525,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hqstevenson,hqstevenson,hqstevenson,29/Jan/18 18:45,29/Jan/18 23:00,13/Mar/19 22:20,29/Jan/18 23:00,,,,,,,,,,,,,,,,2.21.0,,,,,camel-mllp,,,,,,0,,,,"The MllpTcpServerConsumer is not always detecting the end of the MLLP envelope correctly, resulting in unpredictable route behavior (empty messages being delivered to route, exceptions generating acknowledgments, etc).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 29 23:00:20 UTC 2018,,,,,,,0|i3pi0n:,9223372036854775807,,,,,,,,,,29/Jan/18 23:00;hqstevenson;Resolved w/commit c8f24cac46f9c4a02a869597a0e7ba03565aa9fd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mllp - Fix IndexOutOfBounds exception when generating acknowledgment,CAMEL-12200,13134049,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hqstevenson,hqstevenson,hqstevenson,26/Jan/18 16:49,29/Jan/18 18:39,13/Mar/19 22:20,29/Jan/18 18:39,,,,,,,,,,,,,,,,2.21.0,,,,,camel-mllp,,,,,,0,,,,"Under certain circumstances, generating acknowledgements will fail with an IndexOutOfBounds exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 29 18:39:23 UTC 2018,,,,,,,0|i3pf33:,9223372036854775807,,,,,,,,,,29/Jan/18 18:39;hqstevenson;fixed w/commit c7c9ea1d26011e24ccdd4aa84219625d41a56584,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SFTP exception-handling more problemtatic than documented,CAMEL-12061,13122631,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,dvholten,dvholten,04/Dec/17 17:34,17/Jan/18 09:42,13/Mar/19 22:20,17/Jan/18 09:42,2.20.1,,,,,,,,,,,,,,,2.21.0,,,,,camel-sftp,,,,,,0,ioexception,sftp,,"my poll-sftp-server-for-files-to-download route crashes fom time to time. i happend to get a stacktrace which indicates an IoException when the SFTP component changes the folder to inspect on the remote site. Can happen - however, contrary to the documentation, which says an exception produces a warning and is otherwise ignored, the whole application goes down.

-------------------------------------------------------------------------
{{
Dez 04, 2017 3:45:34 PM org.apache.camel.component.file.remote.RemoteFilePolling
ConsumerPollStrategy rollback
WARNUNG: Trying to recover by disconnecting from remote server forcing a re-connect at next poll: sftp://XXXXXXXXXXXXXXXX
Dez 04, 2017 3:45:34 PM org.apache.camel.util.CamelLogger log
WARNUNG: Consumer Consumer[sftp://XXXXXXXXXXXXX/out/prod/?delay=30000&delete=true&localWorkDirectory=c%3A%2FMarta%2FHgmTkw14%2Femcs%2Ftemp%2F&password=
xxxxxx] failed polling endpoint: sftp://XXXXXXXXXXXXX/out/prod/?delay=30000&delete=true&localWorkDirectory=c%3A%2FMarta%2FHgmTkw14%2Femcs%2Ftemp%2F&pas
sword=xxxxxx. Will try again at next poll. Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - Cannot change directory to: out]
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: out
        at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:609)
        at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:597)
        at org.apache.camel.component.file.remote.SftpConsumer.doPollDirectory(SftpConsumer.java:108)
        at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:80)
        at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:124)
        at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
Caused by: 4:
        at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:359)
        at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:607)
        ... 13 more
Caused by: java.io.IOException: inputstream is closed
        at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2911)
        at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2935)
        at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:2355)
        at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:342)
        ... 14 more
}}","java 8, windows 2008 r2, ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-01-17 09:07:43.018,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 17 09:41:52 UTC 2018,,,,,,,0|i3nibr:,9223372036854775807,,,,,,,,,,"06/Dec/17 13:25;dvholten;i looked through the sources along the stacktrace - what happens during the attempted poll and the exception looks reasonable for me.
However, the restart/retry-things are a little bit unclear. One excepion claims 'will try to reconnect on next attempt..' but i have yet to find the things which enforce a reconnect after a failed poll....
",17/Jan/18 09:07;davsclaus;Can you try with disconnect=true,"17/Jan/18 09:19;davsclaus;Can you try enabling DEBUG logging level on the ftp component, and do you see this line when Camel disconnects the FTP client

 

if (log.isDebugEnabled()) {
 log.debug(""Disconnecting from: {}"", remoteServer());
}

As Camel will attempt to disconnect if that poll failed, as the WARN message says.

And do you get this error all the time, eg can you reproduce it? We could try to improve camel-ftp to do a hard disconnect and ensure the ftp client is fully re-created.","17/Jan/18 09:41;davsclaus;Okay we have improved this to do a hard/forced disconnect so the sftp client should be fresh on next poll (before some state may have been left). You can try the 2.21.0 release when its out, or build and try from master yourself.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong order in file idempotent store.,CAMEL-12058,13122350,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,zurkin,zurkin,02/Dec/17 11:26,16/Jan/18 20:30,13/Mar/19 22:20,16/Jan/18 17:44,2.20.1,2.20.2,2.21.0,,,,,,,,,,,,,2.21.0,,,,,camel-core,,,,,,0,FileIdempotent,,,"
I recently noticed that there is wrong entry order in file using 
FileIdempotentRepository implementation. 
The effect is that instead of having order like: 

file1.txt.20171123 
file2.txt.20171123 
file1.txt.20171124 
file3.txt.20171125 
file2.txt.20171126 

we have: 

file1.txt.20171123 
file1.txt.20171124 
file2.txt.20171123 
file2.txt.20171126 
file3.txt.20171125 

where date extension represents order in which particular file was consumed 
by the idempotent file consumer. 
As a consequence instead of initializing memory cache with newest values, 
it is initialized (probably) based on hash function from truncStore method 
and we consume same file more than once: 

    protected void trunkStore() { 
        LOG.info(""Trunking idempotent filestore: {}"", fileStore); 
        FileOutputStream fos = null; 
        try { 
            fos = new FileOutputStream(fileStore); 
            for (String key : cache.keySet()) { 
                fos.write(key.getBytes()); 
                fos.write(STORE_DELIMITER.getBytes()); 
            } 
        } catch (IOException e) { 
            throw ObjectHelper.wrapRuntimeCamelException(e); 
        } finally { 
            IOHelper.close(fos, ""Trunking file idempotent repository"", LOG); 
        } 
    } ",,,,,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,CAMEL-12148,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-06 10:44:06.584,,,no_permission,,Novice,,,,Patch,,,,,,,,,9223372036854775807,,,Tue Jan 16 20:30:34 UTC 2018,,,,,,,0|i3ngmn:,9223372036854775807,,,,,,,,,,"06/Dec/17 10:44;githubbot;GitHub user zurkin opened a pull request:

    https://github.com/apache/camel/pull/2137

    File idempotent repository test.

    Test for CAMEL-12058

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zurkin/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2137.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2137
    
----
commit 2bb5d0cd347312aa78398f320ee7895bdc9ad9c1
Author: Krzysztof Holdanowicz <holdanowicz@gmail.com>
Date:   2017-12-06T10:23:07Z

    File idempotent repository test.

----
","10/Dec/17 21:26;sermojohn;Hello!
It seems that the FileIdempotentRepository uses an LRU cache by default. So, I think that the behavior you expect is not default (intentionally or not). Additionally, you do not perform any cache get operation in your unit test, so the default  ordering of the LRUCache implementation is used when evicting items.
I suggest you to provide another cache implementation by using the appropriate constructor of the idempotent repository. As I can understand a FIFO cache would match your expectations, so that the oldest entry would be evicted first, when the cache max size is reached.","18/Dec/17 08:18;onders;There is a discussion around FIFO based caching..
https://github.com/ben-manes/caffeine/issues/183
This may help considering [~sermojohn]'s comment.
Not sure if it is easy to replace LRUCache in FileIdempotentRepository with a new one and see the side effects.
and not sure if it would be good to introduce such caching in camel-core.
maybe it is good [~davsclaus] comment as well..

","26/Dec/17 11:21;davsclaus;You cannot guarantee ordering with the LRUCache as its how the caffeine is implemented. 

You can implement your own FIFO cache and use that instead","26/Dec/17 11:22;githubbot;davsclaus commented on issue #2137: CAMEL-12058 - File idempotent repository test.
URL: https://github.com/apache/camel/pull/2137#issuecomment-353957386
 
 
   Commented on JIRA

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Dec/17 11:22;githubbot;davsclaus closed pull request #2137: CAMEL-12058 - File idempotent repository test.
URL: https://github.com/apache/camel/pull/2137
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/test/java/org/apache/camel/processor/idempotent/FileIdempotentRepositoryTest.java b/camel-core/src/test/java/org/apache/camel/processor/idempotent/FileIdempotentRepositoryTest.java
new file mode 100644
index 00000000000..7dcc0f38a87
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/processor/idempotent/FileIdempotentRepositoryTest.java
@@ -0,0 +1,84 @@
+package org.apache.camel.processor.idempotent;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.collection.IsIterableContainingInOrder.contains;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.URISyntaxException;
+import java.nio.file.Files;
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
+
+public class FileIdempotentRepositoryTest {
+
+	@Rule
+	public TemporaryFolder temporaryFolder = new TemporaryFolder();
+	
+	private FileIdempotentRepository fileIdempotentRepository = new FileIdempotentRepository();
+	private List<String> files;
+	
+	@Before
+	public void setup() throws IOException {
+		files = Arrays.asList(
+				""file1.txt.20171123"",
+				""file2.txt.20171123"",
+				""file1.txt.20171124"",
+				""file3.txt.20171125"",
+				""file2.txt.20171126"",
+				""fixed.income.lamr.out.20171126"",
+				""pricing.px.20171126"",
+				""test.out.20171126"",
+				""processing.source.lamr.out.20171126"");
+		this.fileIdempotentRepository = new FileIdempotentRepository();
+	}
+	
+	@Test
+	public void testTrunkStore() throws URISyntaxException, IOException {
+		//given
+		File fileStore = temporaryFolder.newFile();
+		fileIdempotentRepository.setFileStore(fileStore);
+		fileIdempotentRepository.setCacheSize(10);
+		files.forEach(e -> fileIdempotentRepository.add(e));
+
+		//when
+		fileIdempotentRepository.trunkStore();
+
+		//then
+		Stream<String> fileContent = Files.lines(fileStore.toPath());
+		List<String> fileEntries = fileContent.collect(Collectors.toList());
+		fileContent.close();
+		//expected order
+		assertThat(fileEntries, contains(
+				""file1.txt.20171123"", 
+				""file2.txt.20171123"",
+				""file1.txt.20171124"",
+				""file3.txt.20171125"",
+				""file2.txt.20171126"",
+				""fixed.income.lamr.out.20171126"",
+				""pricing.px.20171126"",
+				""test.out.20171126"",
+				""processing.source.lamr.out.20171126""));
+
+		//current order
+/*		assertThat(fileEntries, contains(
+				""processing.source.lamr.out.20171126"",
+				""test.out.20171126"",
+				""fixed.income.lamr.out.20171126"",
+				""pricing.px.20171126"",
+				""file1.txt.20171123"", 
+				""file2.txt.20171123"",
+				""file1.txt.20171124"",
+				""file3.txt.20171125"",
+				""file2.txt.20171126""));*/
+		
+	}
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Dec/17 11:22;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2137
","03/Jan/18 19:53;zurkin;Hi, 

regarding CAMEL-12058 I don't know if you are aware of all consequences of 
wrong order in the idempotent file store. 
The wrong order in the file is not the problem itself as long as elemens 
are added and eviceted on runtime, because caffeine provides an api for 
ordering like: 

   - @Override public Map<K, V> coldest(int limit) 
   - @Override public Map<K, V> hottest(int limit) 
   - @Override public Map<K, V> oldest(int limit), 
   - @Override public Map<K, V> youngest(int limit) ) 

however the consequences of this appears after RESTART. The memory cache 
does not contain the proper entries (in case of reaching the max limit 
size) because it does not load elements from hottest to coldest but with 
the file entries order hence some of the files are consumed multiple times. 
It means that current implementation of file idempotent store is not usable 
at all anymore. Ignoring the issue (CAMEL-12058) means that Camel library 
does not provide any implementation of idempotent file store as the current 
behaviour is completely wrong and causes consuming multiple times the same 
file after reaching max size limit and after restarting application. ","16/Jan/18 13:51;davsclaus;Logged a ticket CAMEL-12148 to overhaul the file store so its not limited by the LRUCache size and its ""random"" ordering.",16/Jan/18 17:44;davsclaus;This is now resolved by reworked implementation in the upcoming 2.21 release.,16/Jan/18 20:30;zurkin;Thank you! (y),,,,,,,,,,,,,,,,,,,,,,
camel-saxon - dump namespaces may cause a ClassCastException,CAMEL-12136,13130475,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Jan/18 09:49,12/Jan/18 13:47,13/Mar/19 22:20,12/Jan/18 13:47,,,,,,,,,,,,,,,,2.21.0,,,,,camel-saxon,,,,,,0,,,,"Noticed this from the test logs

2018-01-12 10:43:29,972 [main           ] INFO  XPathLanguageTest              - ********************************************************************************
2018-01-12 10:43:29,972 [main           ] INFO  XPathLanguageTest              - Testing: testSpringDSLXPathSaxonFlag(org.apache.camel.language.xpath.XPathLanguageTest)
2018-01-12 10:43:29,972 [main           ] INFO  XPathLanguageTest              - ********************************************************************************
2018-01-12 10:43:30,126 [main           ] INFO  SpringCamelContext             - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-7) is starting
2018-01-12 10:43:30,126 [main           ] INFO  DefaultManagementStrategy      - JMX is disabled
2018-01-12 10:43:30,129 [main           ] INFO  DefaultTypeConverter           - Type converters loaded (core: 193, classpath: 5)
2018-01-12 10:43:30,144 [main           ] INFO  SpringCamelContext             - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2018-01-12 10:43:30,146 [main           ] INFO  XPathBuilder                   - Using objectModelUri http://saxon.sf.net/jaxp/xpath/om when created XPathFactory net.sf.saxon.xpath.XPathFactoryImpl@6b63e6ad
2018-01-12 10:43:30,147 [main           ] INFO  SpringCamelContext             - Route: route13 started and consuming from: direct://testSaxonWithFlag
2018-01-12 10:43:30,147 [main           ] INFO  SpringCamelContext             - Route: route14 started and consuming from: direct://testSaxonWithFactory
2018-01-12 10:43:30,147 [main           ] INFO  SpringCamelContext             - Route: route15 started and consuming from: direct://testSaxonWithFlagPredicate
2018-01-12 10:43:30,147 [main           ] INFO  SpringCamelContext             - Route: route16 started and consuming from: direct://testSaxonWithFactoryPredicate
2018-01-12 10:43:30,148 [main           ] INFO  SpringCamelContext             - Total 4 routes, of which 4 are started
2018-01-12 10:43:30,148 [main           ] INFO  SpringCamelContext             - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-7) started in 0.022 seconds
2018-01-12 10:43:30,149 [main           ] INFO  XPathBuilder                   - Using objectModelUri http://saxon.sf.net/jaxp/xpath/om when created XPathFactory net.sf.saxon.xpath.XPathFactoryImpl@17410c07
2018-01-12 10:43:30,149 [main           ] INFO  XPathBuilder                   - Creating new XPath expression in pool. Namespaces on XPath expression: [me: {system -> http://camel.apache.org/xml/variables/system-properties},{in -> http://camel.apache.org/xml/in/},{function -> http://camel.apache.org/xml/function/},{env -> http://camel.apache.org/xml/variables/environment-variables},{out -> http://camel.apache.org/xml/out/},{xsi -> http://www.w3.org/2001/XMLSchema-instance}], [parent: net.sf.saxon.xpath.JAXPXPathStaticContext$MinimalNamespaceContext@6ee99964]
2018-01-12 10:43:30,156 [main           ] WARN  XPathBuilder                   - Unable to trace discovered namespaces in XPath expression
java.lang.ClassCastException: java.util.ArrayList cannot be cast to org.w3c.dom.NodeList
	at org.apache.camel.builder.xml.XPathBuilder.logNamespaces(XPathBuilder.java:885) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:847) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.builder.xml.XPathBuilder.evaluate(XPathBuilder.java:819) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.builder.xml.XPathBuilder.evaluate(XPathBuilder.java:181) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.processor.SetBodyProcessor.process(SetBodyProcessor.java:49) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.component.direct.DirectBlockingProducer.process(DirectBlockingProducer.java:53) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2018-01-12 09:49:01.0,,,,,,,0|i3oufj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't mandate header case for custom Salesforce HTTP haders,CAMEL-12085,13125252,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,15/Dec/17 14:52,10/Jan/18 14:45,13/Mar/19 22:20,10/Jan/18 14:45,2.21.0,,,,,,,,,,,,,,,2.21.0,,,,,camel-salesforce,,,,,,0,,,,We need to do case insensitive comparison on what headers we include to send to Salesforce.,,,,,,,,,,,,,,,,,,,CAMEL-12092,,,,,,,,,,,19/Dec/17 10:12;dickengeorge;camel.patch;https://issues.apache.org/jira/secure/attachment/12902822/camel.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2017-12-18 12:48:48.063,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 10 14:45:58 UTC 2018,,,,,,,0|i3nyf3:,9223372036854775807,,,,,,,,,,"18/Dec/17 12:48;dickengeorge;It seems the problem still persists.. there were two determineheaders methods as i just noticed now. And your fix is implemented in the Abstractclientbase class, determineheaders method. However, i noticed during runtime that the method determineheaders in the interface SalesforceProcessor is being called instead.

Therefore currently the problem still persists.",10/Jan/18 14:45;zregvart;[~dickengeorge] thank you for the patch I've fixed this at the second location in {{SalesforceProcessor}} in the same manner it was done for CAMEL-12092 for {{AbstractClientBase}}.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CacheProducer should not put services in Camel context, that are not singletons and are not ServicePoolAware",CAMEL-12131,13129507,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,rgala,rgala,09/Jan/18 12:04,10/Jan/18 14:02,13/Mar/19 22:20,10/Jan/18 14:02,,,,,,,,,,,,,,,,2.19.5,2.20.2,2.21.0,,,camel-core,,,,,,0,,,,"When the org.apache.camel.impl.ProducerCache *doGetProducer* method is called from *org.apache.camel.processor.SendProcessor's doStart()* method, it will create new instance of a Producer, and put it into Camel context by calling *getCamelContext().addService(answer, false);*. However, it will not put the object into producers or the pool map, because it is not ServicePoolAware and is not a singleton. This results in a service that will later be started by *DeferServiceStartupListener* and will stay started until the whole context is closed. 

{code:java}
    protected synchronized Producer doGetProducer(Endpoint endpoint, boolean pooled) {
        String key = endpoint.getEndpointUri();
        Producer answer = producers.get(key);
        if (pooled && answer == null) {
            // try acquire from connection pool
            answer = pool.acquire(endpoint);
        }

        if (answer == null) {
            // create a new producer
            try {
                answer = endpoint.createProducer();
                // add as service which will also start the service
                // (false => we and handling the lifecycle of the producer in this cache)
                getCamelContext().addService(answer, false);
            } catch (Throwable e) {
                throw new FailedToCreateProducerException(endpoint, e);
            }

            // add producer to cache or pool if applicable
            if (pooled && answer instanceof ServicePoolAware) {
                LOG.debug(""Adding to producer service pool with key: {} for producer: {}"", endpoint, answer);
                answer = pool.addAndAcquire(endpoint, answer);
            } else if (answer.isSingleton()) {
                LOG.debug(""Adding to producer cache with key: {} for producer: {}"", endpoint, answer);
                producers.put(key, answer);
            }
        }

        if (answer != null) {
            // record statistics
            if (extendedStatistics) {
                statistics.onHit(key);
            }
        }

        return answer;
    }

{code}

Here is the part of *doStart()* method from *SendProcessor* class. The producer is acquired and after that is immediately released in *ProducerCache*, however it is not removed from Camel context and stays there as a Service and will later by started by *DeferServiceStartupListener*

{code:java}
        Producer producer = producerCache.acquireProducer(destination);
        if (producer instanceof ServicePoolAware || !producer.isSingleton()) {
            // no we cannot optimize it - so release the producer back to the producer cache
            // and use the producer cache for sending
            producerCache.releaseProducer(destination, producer);
        } else {
            // yes we can optimize and use the producer directly for sending
            this.producer = AsyncProcessorConverterHelper.convert(producer);
        }
{code}




",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-01-10 12:24:19.869,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 10 12:40:39 UTC 2018,,,,,,,0|i3oojb:,9223372036854775807,,,,,,,,,,"10/Jan/18 12:24;davsclaus;Do you have a custom component or what use-case do you have for a producer that is neither singleton, nor service poll aware?","10/Jan/18 12:31;rgala;This issue occurs for me on jt400 component used as destination endpoint (Jt400Endpoint class). It uses Jt400PgmProducer class as a producer.
","10/Jan/18 12:40;davsclaus;Ah thanks, yeah that component is a bit unusual, ideally it should have been implemented a bit different so the endpoint could be singleton and producers thread-safe or something.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StreamCache file is removed before wireTap ends in a splitter wireTap combination route,CAMEL-12108,13127589,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Bas Claessen,Bas Claessen,28/Dec/17 21:49,03/Jan/18 10:30,13/Mar/19 22:20,03/Jan/18 10:30,2.20.1,,,,,,,,,,,,,,,2.21.0,,,,,camel-core,,,,,,0,,,,"When combining the splitter and wireTap functionality an org.apache.camel.RuntimeCamelException (Cannot reset stream from file) will be thrown when:
1. a spooled StreamCache body is created in the wireTap route
2. the splitter route ends before the wireTap route

The splitter will create an Exchange.STREAM_CACHE_UNIT_OF_WORK property to hold the StreamCaches that will be created by the children of the splitter.
When doing a wireTap in the splitter route, the property will be copied to the wireTap route (when using the wireTap defaults).
StreamCaches created in the wireTap route will now be added to the property as well and will be closed when the splitter route ends.

A possible workaround can be to create the wireTap route without copying the original exchange.
However I think it is better to remove the Exchange.STREAM_CACHE_UNIT_OF_WORK property in the org.apache.camel.processor.WireTapProcessor configureExchange method.

I attached a maven project with a test to demonstrate the issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,02/Jan/18 10:30;Bas Claessen;CAMEL-12108-WireTapProcessor.patch;https://issues.apache.org/jira/secure/attachment/12904195/CAMEL-12108-WireTapProcessor.patch,28/Dec/17 21:48;Bas Claessen;TestSplitWireTap.zip;https://issues.apache.org/jira/secure/attachment/12903943/TestSplitWireTap.zip,,,2.0,,,,,,,,,,,,,,,,,,,2018-01-02 15:25:29.011,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 03 10:09:25 UTC 2018,,,,,,,0|i3ocrr:,9223372036854775807,,,,,,,,,,"02/Jan/18 15:25;githubbot;onders86 opened a new pull request #2159: CAMEL-12108 - PR on behalf of Bas Claessen
URL: https://github.com/apache/camel/pull/2159
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Jan/18 15:25;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/2159

    CAMEL-12108 - PR on behalf of Bas Claessen

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-12108

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2159.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2159
    
----
commit 2e1808198326ecd50820aecb8fc55dcde4b6d860
Author: onders86 <ondersezgin@...>
Date:   2018-01-02T15:20:04Z

    CAMEL-12108 - PR on behalf of Bas Claessen

----
","02/Jan/18 15:27;onders;Thanks Bas Claessen, PR submitted on behalf of you. ","03/Jan/18 10:09;githubbot;davsclaus closed pull request #2159: CAMEL-12108 - PR on behalf of Bas Claessen
URL: https://github.com/apache/camel/pull/2159
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/processor/WireTapProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/WireTapProcessor.java
index b95800a4191..5015d187223 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/WireTapProcessor.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/WireTapProcessor.java
@@ -227,6 +227,9 @@ private Exchange configureCopyExchange(Exchange exchange) {
         Exchange copy = ExchangeHelper.createCorrelatedCopy(exchange, false);
         // set MEP to InOnly as this wire tap is a fire and forget
         copy.setPattern(ExchangePattern.InOnly);
+        // remove STREAM_CACHE_UNIT_OF_WORK property because this wire tap will
+        // close its own created stream cache(s)
+        copy.removeProperty(Exchange.STREAM_CACHE_UNIT_OF_WORK);
         return copy;
     }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/Jan/18 10:09;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2159
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
fileExist=Move and tempFileName does not work together.,CAMEL-12094,13125969,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gaurang.parmar,gaurang.parmar,19/Dec/17 16:53,26/Dec/17 11:04,13/Mar/19 22:20,26/Dec/17 11:04,2.16.5,2.20.1,,,,,,,,,,,,,,2.19.5,2.20.2,2.21.0,,,camel-core,camel-ftp,,,,,0,,,,"We are using camel-ftp for SFTP operations in pure integration all camel application.

We had one scenario of putting large files on SFTP and another process will pick files from that location on periodic basis.

So need to rename existing file with same so it won't be picked and also during the process we does not want to be picked.

So we used both options together. 
1) fileExist=Move&moveExisting=${file:name.noext}-${date:now:ddMMyyyyHHmmss}.${file:ext}
2) tempFileName=${file:onlyname}.inprogress

But as per code Move operation is performed in XXXXOperations class and filename passed from GenericFileProducer is temporary file name to writeFile method.","SUSE Linux Enterprise Server 11 (x86_64)
VERSION = 11
PATCHLEVEL = 4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-19 18:35:48.575,,,no_permission,,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 26 10:25:44 UTC 2017,,,,,,,0|i3o2t3:,9223372036854775807,,,,,,,,,,19/Dec/17 18:35;onders;2.16.x is EOL. please ask commercial support if you use commercialised camel or please first ask on user forums.,19/Dec/17 18:37;onders;please try with newer version,19/Dec/17 19:01;gaurang.parmar;Code is same in master and release branches as well.,19/Dec/17 19:33;onders;{{fileExist=TryRename}} may help,26/Dec/17 09:59;davsclaus;What is the problem? Can you be more specific.,26/Dec/17 10:25;davsclaus;Okay I have reproduced the issue and are looking into a fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,
RestConfiguration hostNameResolver property naming mismatch,CAMEL-12096,13126256,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,koscejev,koscejev,20/Dec/17 11:48,20/Dec/17 16:16,13/Mar/19 22:20,20/Dec/17 14:19,2.20.1,,,,,,,,,,,,,,,2.20.2,2.21.0,,,,rest,,,,,,0,,,,"Field name {{RestConfigurationDefinitionProperties#hostNameResolver}} doesn't match {{RestConfiguration#restHostNameResolver}}, but the match is critical for {{configureRestConfigurationDefinition()}} to work. In fact some other fields (such as {{enableCors}}) also don't match, but they are set explicitly, not in bulk via {{CamelPropertiesHelper.setCamelProperties}}.",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10976,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-20 14:19:22.234,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 20 16:16:47 UTC 2017,,,,,,,0|i3o4k7:,9223372036854775807,,,,,,,,,,"20/Dec/17 11:50;koscejev;Trying to set this field in Spring properties/yaml results in failure: 

{code}
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.context.ConfigurableApplicationContext]: Factory method 'service' threw exception; nested exception is org.apache.camel.spring.boot.CamelSpringBootInitializationException: org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot configure option [hostNameResolver] with value [localHostName] as the bean class [org.apache.camel.spi.RestConfiguration] has no suitable setter method, or not possible to lookup a bean with the id [localHostName] in Spring Boot registry
Caused by: org.apache.camel.spring.boot.CamelSpringBootInitializationException: org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot configure option [hostNameResolver] with value [localHostName] as the bean class [org.apache.camel.spi.RestConfiguration] has no suitable setter method, or not possible to lookup a bean with the id [localHostName] in Spring Boot registry
Caused by: org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot configure option [hostNameResolver] with value [localHostName] as the bean class [org.apache.camel.spi.RestConfiguration] has no suitable setter method, or not possible to lookup a bean with the id [localHostName] in Spring Boot registry
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot configure option [hostNameResolver] with value [localHostName] as the bean class [org.apache.camel.spi.RestConfiguration] has no suitable setter method, or not possible to lookup a bean with the id [localHostName] in Spring Boot registry
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot configure option [hostNameResolver] with value [localHostName] as the bean class [org.apache.camel.spi.RestConfiguration] has no suitable setter method, or not possible to lookup a bean with the id [localHostName] in Spring Boot registry
Caused by: java.lang.IllegalArgumentException: Cannot configure option [hostNameResolver] with value [localHostName] as the bean class [org.apache.camel.spi.RestConfiguration] has no suitable setter method, or not possible to lookup a bean with the id [localHostName] in Spring Boot registry
{code}",20/Dec/17 14:19;davsclaus;Thanks for reporting,20/Dec/17 16:16;koscejev;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Xstream doesn't work in Karaf,CAMEL-12095,13126244,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,ancosen,ancosen,20/Dec/17 10:27,20/Dec/17 10:39,13/Mar/19 22:20,20/Dec/17 10:39,,,,,,,,,,,,,,,,,,,,,camel-xstream,karaf,,,,,0,,,,"
Caused by: java.lang.ClassNotFoundException: com.thoughtworks.xstream.mapper.LambdaMapper not found by org.apache.servicemix.bundles.xstream [233]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639) ~[?:?]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-12-20 10:27:44.0,,,,,,,0|i3o4hj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
New ftp connection for each file transfer with tempFileName option in URI,CAMEL-11792,13103508,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,himanshu,himanshu,20/Sep/17 06:06,18/Dec/17 13:37,13/Mar/19 22:20,18/Dec/17 13:37,2.14.0,2.19.2,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-ftp,,,,,,1,,,,"When we have {{tempFilename}} in camel uri and we use producer template to write file to remote ftp location , camel opens new connection for every file transfer. Though disconnect option is set to false in uri.
If we take out tempFilename from uri connections are reused

We can verify it by running attached sample. 
Check the connections made from camel server to ftp server . Fire {{netstat -an|grep 10.80.14.56|wc -l]] 
- When we have tempFileName in uri it will show 1 connection per file transfer
- Without tempFileName it will show only 1 connection for all files transfer.",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8860,,,,,20/Sep/17 06:10;himanshu;TestFTPConnection.java;https://issues.apache.org/jira/secure/attachment/12888020/TestFTPConnection.java,,,,1.0,,,,,,,,,,,,,,,,,,,2017-09-20 06:10:39.402,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 18 13:37:56 UTC 2017,,,,,,,0|i3ka5b:,9223372036854775807,,,,,,,,,,"20/Sep/17 06:10;himanshu;Sample program to reproduce the issue
",20/Sep/17 06:10;gzres;In relation to CAMEL-8860 - thanks for verifying.,"27/Nov/17 00:46;sermojohn;Hello! I spent some time on this issue. 

I searched a bit how Camel creates new endpoints and when running the example code, it does not create multiple endpoints. So IMHO a single endpoint instance that uses a single FTP client instance is used for all ftp calls.

So I ended up checking the Apache FTP client on which the camel-ftp component depends. The library seems to intentionally open two (control & data) connections for each FTP command, while a Camel endpoint might require one or more FTP command to complete. So, to me, it is clear that this is a limitation of the library.

Maybe this could be made possible by implementing a wrapper SocketFactory and ServerSocketFactory that would reuse the connections instead of closing them. But this seems more like a work-around. Maybe other FTP client implementations do not have this limitation.

On the other side, I am wondering if such an approach of unifying all the FTP connections into one connection, is a good idea. This will probably affect the throughput because all the socket reads and writes will need to be serialized (socket not thread-safe). Or maybe this is a limitation of the FTP protocol itself.

What do you think? I would volunteer to work on an agreed solution/fix/work-around.
","04/Dec/17 05:34;himanshu;I debugged this camel-ftp code further and figured out the root cause. 
In {{org.apache.camel.component.file.GenericFileProducer}} 's {{processExchange}} method.
During temp file creation there is a check to delete pre existing temp file. 
operation.existFile(tempTarget)  will invoke client.listNames(name) from commons.net. And it creates a connection internally 
{code}
 // delete any pre existing temp file
                if (operations.existsFile(tempTarget)) {
                    log.trace(""Deleting existing temp file: {}"", tempTarget);
                    if (!operations.deleteFile(tempTarget)) {
                        throw new GenericFileOperationFailedException(""Cannot delete file: "" + tempTarget);
                    }
                }
{code}
 Now if this check is conditional based on {{fileExist}} check in endpoint. We can avoid additional connection and socket in TIME_WAIT",18/Dec/17 12:58;davsclaus;Thanks for digging into this,"18/Dec/17 13:02;davsclaus;Yeah it looks like we should skip that part of code if the fileExists=TryRename as this is what the option was intended for, just to try without any exists check. ",18/Dec/17 13:37;davsclaus;Use fileExists=TryRename and the new connection should not happen,,,,,,,,,,,,,,,,,,,,,,,,,,
Jaxb component does not communicate charset when explicitly set,CAMEL-12062,13122712,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,MadMod,MadMod,04/Dec/17 23:26,07/Dec/17 09:02,13/Mar/19 22:20,07/Dec/17 09:02,2.20.1,,,,,,,,,,,,,,,2.21.0,,,,,camel-jaxb,,,,,,0,,,,"This test will cause a UnmappableCharacterException, since jaxb does not communicate the encoding of the bytes it outputs causing the file endpoint to assume it is UTF-8.

This can be mitigated by adding an explicit reader in the route, but it would be nice if it worked OOTB.

{code:java}
/**
 * @version 
 */
public class ExplicitFileEncodingTest extends CamelTestSupport {

    @Override
    public void setUp() throws Exception {
        deleteDirectory(""target/charset"");
        super.setUp();
    }

    @Test
    public void testISOFileEncoding() throws Exception {
        PurchaseOrder order = new PurchaseOrder();
        //Data containing characters ÆØÅæøå that differ in utf-8 and iso
        String name = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5"";
        order.setName(name);
        order.setAmount(123.45);
        order.setPrice(2.22);

        MockEndpoint result = getMockEndpoint(""mock:file"");
        result.expectedFileExists(""target/charset/output.txt"");

        template.sendBody(""direct:start"", order);
        assertMockEndpointsSatisfied();

        JAXBContext jaxbContext = JAXBContext.newInstance(""org.apache.camel.example"");
        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
        PurchaseOrder obj = (PurchaseOrder)unmarshaller.unmarshal(new File(""target/charset/output.txt""));
        assertEquals(obj.getName(), name);
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                JaxbDataFormat jaxb = new JaxbDataFormat(""org.apache.camel.example"");
                jaxb.setEncoding(""iso-8859-1"");

                from(""direct:start"")
                        .marshal(jaxb)
                        .to(""file:target/charset/?fileName=output.txt&charset=iso-8859-1"");
            }
        };
    }

}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-04 23:41:18.001,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 07 09:02:28 UTC 2017,,,Patch Available,,,,0|i3nitb:,9223372036854775807,,,,,,,,,,"04/Dec/17 23:41;githubbot;IIlllII opened a new pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Dec/17 23:41;githubbot;GitHub user IIlllII opened a pull request:

    https://github.com/apache/camel/pull/2130

    CAMEL-12062:  Propagate encoding in charset property from jaxb component

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/IIlllII/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2130.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2130
    
----
commit 64169aed7e0c8f07853565fac4e9822f26c83647
Author: Jonas Waage <jonas.h.waage@gmail.com>
Date:   2017-12-04T23:34:55Z

    CAMEL-12062 Propagate encoding in property

----
","05/Dec/17 10:44;githubbot;oscerd commented on a change in pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130#discussion_r154907417
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -136,6 +136,10 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
             String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
             if (charset == null) {
                 charset = encoding;
+                //Propagate the encoding of the exchange
 
 Review comment:
   This looks a bit ugly. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Dec/17 10:44;githubbot;oscerd commented on a change in pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130#discussion_r154907494
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -136,6 +136,10 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
             String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
             if (charset == null) {
                 charset = encoding;
+                //Propagate the encoding of the exchange
 
 Review comment:
   Maybe we can find a better way.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Dec/17 13:59;githubbot;IIlllII commented on a change in pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130#discussion_r154951751
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -136,6 +136,10 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
             String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
             if (charset == null) {
                 charset = encoding;
+                //Propagate the encoding of the exchange
 
 Review comment:
   Ok, what is the appropriate way to communicate the encoding?
   
   This is what is done by the file endpoint, and afaik how that is able to accomplish the same feature:
   `/**
        * Set up the exchange properties with the options of the file endpoint
        */
       public void configureExchange(Exchange exchange) {
           // Now we just set the charset property here
           if (getCharset() != null) {
               exchange.setProperty(Exchange.CHARSET_NAME, getCharset());
           }
       }`

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Dec/17 13:59;githubbot;IIlllII commented on a change in pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130#discussion_r154951751
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -136,6 +136,10 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
             String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
             if (charset == null) {
                 charset = encoding;
+                //Propagate the encoding of the exchange
 
 Review comment:
   Ok, what is the appropriate way to communicate the encoding?
   
   This is what is done by the file endpoint, and afaik how that is able to accomplish the same feature:
   ```   
       /**
        * Set up the exchange properties with the options of the file endpoint
        */
       public void configureExchange(Exchange exchange) {
           // Now we just set the charset property here
           if (getCharset() != null) {
               exchange.setProperty(Exchange.CHARSET_NAME, getCharset());
           }
       }```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Dec/17 14:32;githubbot;IIlllII commented on a change in pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130#discussion_r154951751
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -136,6 +136,10 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
             String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
             if (charset == null) {
                 charset = encoding;
+                //Propagate the encoding of the exchange
 
 Review comment:
   @oscerd 
   Ok, what is the appropriate way to communicate the encoding?
   
   I based this on what is done by the file endpoint, and AFAIK how that is able to accomplish the same feature:
   ```   
       /**
        * Set up the exchange properties with the options of the file endpoint
        */
       public void configureExchange(Exchange exchange) {
           // Now we just set the charset property here
           if (getCharset() != null) {
               exchange.setProperty(Exchange.CHARSET_NAME, getCharset());
           }
       }```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/Dec/17 09:02;githubbot;oscerd commented on issue #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130#issuecomment-349905071
 
 
   Thanks the PR has been merged. We'll see if we can do something better in future.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/Dec/17 09:02;githubbot;oscerd closed pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
index b78d5169c08..0782e2197c5 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
@@ -136,6 +136,10 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
             String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
             if (charset == null) {
                 charset = encoding;
+                //Propagate the encoding of the exchange
+                if (charset != null) {
+                    exchange.setProperty(Exchange.CHARSET_NAME, charset);
+                }
             }
             if (charset != null) {
                 marshaller.setProperty(Marshaller.JAXB_ENCODING, charset);
diff --git a/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitFileEncodingTest.java b/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitFileEncodingTest.java
new file mode 100644
index 00000000000..b045821f005
--- /dev/null
+++ b/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitFileEncodingTest.java
@@ -0,0 +1,77 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.example;
+
+import java.io.File;
+
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.Unmarshaller;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.converter.jaxb.JaxbDataFormat;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Test;
+
+/**
+ * @version 
+ */
+public class ExplicitFileEncodingTest extends CamelTestSupport {
+
+    @Override
+    public void setUp() throws Exception {
+        deleteDirectory(""target/charset"");
+        super.setUp();
+    }
+
+    @Test
+    public void testISOFileEncoding() throws Exception {
+        PurchaseOrder order = new PurchaseOrder();
+        //Data containing characters ÆØÅæøå that differ in utf-8 and iso
+        String name = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5"";
+        order.setName(name);
+        order.setAmount(123.45);
+        order.setPrice(2.22);
+
+        MockEndpoint result = getMockEndpoint(""mock:file"");
+        result.expectedFileExists(""target/charset/output.txt"");
+
+        template.sendBody(""direct:start"", order);
+        assertMockEndpointsSatisfied();
+
+        JAXBContext jaxbContext = JAXBContext.newInstance(""org.apache.camel.example"");
+        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
+        PurchaseOrder obj = (PurchaseOrder)unmarshaller.unmarshal(new File(""target/charset/output.txt""));
+        assertEquals(obj.getName(), name);
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                JaxbDataFormat jaxb = new JaxbDataFormat(""org.apache.camel.example"");
+                jaxb.setEncoding(""iso-8859-1"");
+
+                from(""direct:start"")
+                        .marshal(jaxb)
+                        .to(""file:target/charset/?fileName=output.txt&charset=iso-8859-1"");
+            }
+        };
+    }
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/Dec/17 09:02;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2130
",,,,,,,,,,,,,,,,,,,,,,,
Google PubSub and BigQuery components miss dependency declarations,CAMEL-12017,13119607,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,emin,emin,20/Nov/17 10:36,20/Nov/17 10:42,13/Mar/19 22:20,20/Nov/17 10:40,2.20.1,,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-google-pubsub,,,,,,0,,,,"Google PubSub and Google Bigquery components require Apache HTTP client, which is NOT explicitly called out in dependencies.

As such they would work, if camel-http4 component is mentioned in the dependencies, but would fail on their own.

As a developer I would like to be able to define an absolute minimum of the dependencies, thus I need the component to import all components they rely on, themselves.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-20 10:39:35.6,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 20 10:40:17 UTC 2017,,,,,,,0|i3mzr3:,9223372036854775807,,,,,,,,,,"20/Nov/17 10:39;githubbot;evmin opened a new pull request #2102: CAMEL-12017: Added httpclient dependency
URL: https://github.com/apache/camel/pull/2102
 
 
   Adressed https://issues.apache.org/jira/browse/CAMEL-12017 - added the dependency explicitly.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/17 10:39;githubbot;GitHub user evmin opened a pull request:

    https://github.com/apache/camel/pull/2102

    CAMEL-12017: Added httpclient dependency

    Adressed https://issues.apache.org/jira/browse/CAMEL-12017 - added the dependency explicitly.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/evmin/camel CAMEL-12017

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2102.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2102
    
----
commit d27088443ae969ecfaf09f9b8ff0706f72650055
Author: Evgeny Minkevich <eminkevich@scentregroup.com>
Date:   2017-11-20T10:37:00Z

    CAMEL-12017: Added httpclient dependency

----
","20/Nov/17 10:40;githubbot;oscerd closed pull request #2102: CAMEL-12017: Added httpclient dependency
URL: https://github.com/apache/camel/pull/2102
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-google-bigquery/pom.xml b/components/camel-google-bigquery/pom.xml
index ce9a1746dfc..812fea01b08 100644
--- a/components/camel-google-bigquery/pom.xml
+++ b/components/camel-google-bigquery/pom.xml
@@ -39,12 +39,14 @@
   </properties>
 
   <dependencies>
-
     <dependency>
       <groupId>org.apache.camel</groupId>
       <artifactId>camel-core</artifactId>
     </dependency>
-
+    <dependency>
+      <groupId>org.apache.httpcomponents</groupId>
+      <artifactId>httpclient</artifactId>
+    </dependency>
     <dependency>
       <groupId>com.google.apis</groupId>
       <artifactId>google-api-services-bigquery</artifactId>
diff --git a/components/camel-google-pubsub/pom.xml b/components/camel-google-pubsub/pom.xml
index 5ec43908711..69092777c73 100644
--- a/components/camel-google-pubsub/pom.xml
+++ b/components/camel-google-pubsub/pom.xml
@@ -48,6 +48,10 @@
             <groupId>org.apache.camel</groupId>
             <artifactId>camel-core</artifactId>
         </dependency>
+        <dependency>
+          <groupId>org.apache.httpcomponents</groupId>
+          <artifactId>httpclient</artifactId>
+        </dependency>
         <dependency>
             <groupId>com.google.apis</groupId>
             <artifactId>google-api-services-pubsub</artifactId>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Nov/17 10:40;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2102
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindy - Missing Headers from OneToMany Field,CAMEL-12009,13118413,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,khaledalturkestani,khaledalturkestani,15/Nov/17 00:34,15/Nov/17 10:28,13/Mar/19 22:20,15/Nov/17 10:28,,,,,,,,,,,,,,,,2.19.5,2.20.2,2.21.0,,,camel-bindy,,,,,,0,,,,"When generating a CSV header, the code doesn't follow the @OneToMany field and thus doesn't print its fields in the header. For example, when marshalling a list of Orders (List<Order>) where the classes are the ones below: 
{code}
@CsvRecord(separator = "","", generateHeaderColumns = true)
public class Order {

    @DataField(pos = 1)
    private int orderNumber;

    @DataField(pos = 2)
    private String customerName;

    @OneToMany
    private List<OrderItem> items;
}
{code}
{code}
@CsvRecord(separator = "","", generateHeaderColumns = true)
public class OrderItem {

    @DataField(pos = 3)
    private String sku;

    @DataField(pos = 4)
    private int quantity;

    @DataField(pos = 5)
    private int unitPrice;
}
{code}

we get the following header:
+orderNumber,customerName+

when, instead, we should be getting the following header:
+orderNumber,customerName,sku,quantity,unitPrice+",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-15 01:16:41.29,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 15 10:28:17 UTC 2017,,,,,,,0|i3mse7:,9223372036854775807,,,,,,,,,,"15/Nov/17 01:16;githubbot;khaledalturkestani opened a new pull request #2092: CAMEL-12009: Generate headers when OneToMany tag
URL: https://github.com/apache/camel/pull/2092
 
 
   Includes unit test

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/Nov/17 01:16;githubbot;GitHub user khaledalturkestani opened a pull request:

    https://github.com/apache/camel/pull/2092

    CAMEL-12009: Generate headers when OneToMany tag

    Includes unit test

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/khaledalturkestani/camel CAMEL-12009-onetomany-css-header

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2092.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2092
    
----
commit 3c0240c6d01d688490d0a9a807d337e3a11dbc68
Author: Khaled AlTurkestani <khaled@ooma.com>
Date:   2017-11-15T01:16:57Z

    CAMEL-12009: Generate headers when OneToMany tag
    
    Includes unit test

----
",15/Nov/17 01:17;khaledalturkestani;Created PR: https://github.com/apache/camel/pull/2092,"15/Nov/17 10:27;githubbot;davsclaus closed pull request #2092: CAMEL-12009: Generate headers when OneToMany tag
URL: https://github.com/apache/camel/pull/2092
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java b/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java
index e57acd5fa1d..f0bc611708c 100644
--- a/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java
+++ b/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java
@@ -17,6 +17,8 @@
 package org.apache.camel.dataformat.bindy;
 
 import java.lang.reflect.Field;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
 import java.text.NumberFormat;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -27,6 +29,7 @@
 
 import org.apache.camel.CamelContext;
 import org.apache.camel.dataformat.bindy.annotation.Link;
+import org.apache.camel.dataformat.bindy.annotation.OneToMany;
 import org.apache.camel.util.ObjectHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -93,6 +96,24 @@ private void loadModels(Class<?> root) {
                 
                 loadModels(field.getType());
             }
+
+            OneToMany oneToManyField = field.getAnnotation(OneToMany.class);
+
+            if (oneToManyField != null) {
+                if (LOG.isDebugEnabled()) {
+                    LOG.debug(""Class (OneToMany) linked: {}, Field: {}"", field.getType(), field);
+                }
+
+                Type listType = field.getGenericType();
+                Type type = ((ParameterizedType) listType).getActualTypeArguments()[0];
+                Class clazz = (Class<?>)type;
+
+                models.add(clazz);
+                modelClassNames.add(clazz.getName());
+
+                loadModels(clazz);
+            }
+
         }
     }
 
diff --git a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyMarshalOneToManyWithHeadersTest.java b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyMarshalOneToManyWithHeadersTest.java
new file mode 100644
index 00000000000..5e360a489d1
--- /dev/null
+++ b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyMarshalOneToManyWithHeadersTest.java
@@ -0,0 +1,96 @@
+package org.apache.camel.dataformat.bindy.csv;
+
+import org.apache.camel.EndpointInject;
+import org.apache.camel.LoggingLevel;
+import org.apache.camel.Produce;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.dataformat.bindy.model.simple.linkonetomany.Order;
+import org.apache.camel.dataformat.bindy.model.simple.linkonetomany.OrderItem;
+import org.apache.camel.processor.interceptor.Tracer;
+import org.junit.Test;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;
+
+import java.util.Arrays;
+import java.util.List;
+
+@ContextConfiguration
+public class BindyMarshalOneToManyWithHeadersTest extends AbstractJUnit4SpringContextTests {
+
+    private static final String URI_MOCK_RESULT = ""mock:result"";
+    private static final String URI_MOCK_ERROR = ""mock:error"";
+    private static final String URI_DIRECT_START = ""direct:start"";
+
+    private Order order;
+    private String expected;
+
+    @Produce(uri = URI_DIRECT_START)
+    private ProducerTemplate template;
+
+    @EndpointInject(uri = URI_MOCK_RESULT)
+    private MockEndpoint result;
+
+    @Test
+    @DirtiesContext
+    public void testMarshallMessage() throws Exception {
+
+        expected = ""orderNumber,customerName,sku,quantity,unitPrice\r\n"" +
+                ""11111,Joe Blow,abc,1,3\r\n"" +
+                ""11111,Joe Blow,cde,3,2\r\n"";
+
+        result.expectedBodiesReceived(expected);
+
+        template.sendBody(generateModel());
+
+        result.assertIsSatisfied();
+    }
+
+    public Order generateModel() {
+
+        Order order = new Order();
+        order.setCustomerName(""Joe Blow"");
+        order.setOrderNumber(11111);
+
+        OrderItem oi1 = new OrderItem();
+        oi1.setSku(""abc"");
+        oi1.setQuantity(1);
+        oi1.setUnitPrice(3);
+
+        OrderItem oi2 = new OrderItem();
+        oi2.setSku(""cde"");
+        oi2.setQuantity(3);
+        oi2.setUnitPrice(2);
+
+        List<OrderItem> orderList = Arrays.asList(oi1, oi2);
+        order.setItems(orderList);
+
+        return order;
+    }
+
+    public static class ContextConfig extends RouteBuilder {
+
+        public void configure() {
+
+            Tracer tracer = new Tracer();
+            tracer.setLogLevel(LoggingLevel.ERROR);
+            tracer.setLogName(""org.apache.camel.bindy"");
+
+            getContext().addInterceptStrategy(tracer);
+
+            BindyCsvDataFormat camelDataFormat = new BindyCsvDataFormat(Order.class);
+            camelDataFormat.setLocale(""en"");
+
+            // default should errors go to mock:error
+            errorHandler(deadLetterChannel(URI_MOCK_ERROR).redeliveryDelay(0));
+
+            onException(Exception.class).maximumRedeliveries(0).handled(true);
+
+            from(URI_DIRECT_START).marshal(camelDataFormat).to(URI_MOCK_RESULT);
+        }
+
+    }
+
+}
diff --git a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/linkonetomany/Order.java b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/linkonetomany/Order.java
new file mode 100644
index 00000000000..c08ea09f5c3
--- /dev/null
+++ b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/linkonetomany/Order.java
@@ -0,0 +1,44 @@
+package org.apache.camel.dataformat.bindy.model.simple.linkonetomany;
+
+import org.apache.camel.dataformat.bindy.annotation.CsvRecord;
+import org.apache.camel.dataformat.bindy.annotation.DataField;
+import org.apache.camel.dataformat.bindy.annotation.OneToMany;
+
+import java.util.List;
+
+@CsvRecord(separator = "","", generateHeaderColumns = true)
+public class Order {
+
+    @DataField(pos = 1)
+    private int orderNumber;
+
+    @DataField(pos = 2)
+    private String customerName;
+
+    @OneToMany
+    private List<OrderItem> items;
+
+    public int getOrderNumber() {
+        return orderNumber;
+    }
+
+    public void setOrderNumber(int orderNumber) {
+        this.orderNumber = orderNumber;
+    }
+
+    public String getCustomerName() {
+        return customerName;
+    }
+
+    public void setCustomerName(String customerName) {
+        this.customerName = customerName;
+    }
+
+    public List<OrderItem> getItems() {
+        return items;
+    }
+
+    public void setItems(List<OrderItem> items) {
+        this.items = items;
+    }
+}
diff --git a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/linkonetomany/OrderItem.java b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/linkonetomany/OrderItem.java
new file mode 100644
index 00000000000..e6d0b75b86d
--- /dev/null
+++ b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/linkonetomany/OrderItem.java
@@ -0,0 +1,41 @@
+package org.apache.camel.dataformat.bindy.model.simple.linkonetomany;
+
+import org.apache.camel.dataformat.bindy.annotation.CsvRecord;
+import org.apache.camel.dataformat.bindy.annotation.DataField;
+
+@CsvRecord(separator = "","", generateHeaderColumns = true)
+public class OrderItem {
+
+    @DataField(pos = 3)
+    private String sku;
+
+    @DataField(pos = 4)
+    private int quantity;
+
+    @DataField(pos = 5)
+    private int unitPrice;
+
+    public String getSku() {
+        return sku;
+    }
+
+    public void setSku(String sku) {
+        this.sku = sku;
+    }
+
+    public int getQuantity() {
+        return quantity;
+    }
+
+    public void setQuantity(int quantity) {
+        this.quantity = quantity;
+    }
+
+    public int getUnitPrice() {
+        return unitPrice;
+    }
+
+    public void setUnitPrice(int unitPrice) {
+        this.unitPrice = unitPrice;
+    }
+}
diff --git a/components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/csv/BindyMarshalOneToManyWithHeadersTest-context.xml b/components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/csv/BindyMarshalOneToManyWithHeadersTest-context.xml
new file mode 100644
index 00000000000..44680817291
--- /dev/null
+++ b/components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/csv/BindyMarshalOneToManyWithHeadersTest-context.xml
@@ -0,0 +1,34 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns=""http://www.springframework.org/schema/beans""
+       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+       xsi:schemaLocation=""
+     http://www.springframework.org/schema/beans
+     http://www.springframework.org/schema/beans/spring-beans.xsd
+     http://camel.apache.org/schema/spring
+     http://camel.apache.org/schema/spring/camel-spring.xsd"">
+
+    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
+        <routeBuilder ref=""myBuilder"" />
+    </camelContext>
+
+    <bean id=""myBuilder"" class=""org.apache.camel.dataformat.bindy.csv.BindyMarshalOneToManyWithHeadersTest$ContextConfig""/>
+
+</beans>
\ No newline at end of file


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","15/Nov/17 10:27;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2092
",15/Nov/17 10:28;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,
XsltAggregationStrategy thread safety during initialization,CAMEL-11983,13115634,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,salagator,salagator,02/Nov/17 14:08,02/Nov/17 18:13,13/Mar/19 22:20,02/Nov/17 18:13,2.20.0,,,,,,,,,,,,,,,2.19.5,2.20.1,2.21.0,,,camel-xslt,,,,,,0,thread-safety,,,"It seems that there is a race condition in the XsltAggregatorStrategy. The following code:

{code:java}

if (xslt == null) {
    initialize(oldExchange.getContext());
}
...
xslt.process(oldExchange);

{code}

means that potentially one thread might be still working on the initialize call while another thread passes through the gate of the if statement and executes the xslt.process() call. If the initialization is not quite complete, the XsltBuilder will throw an exception complaining that the template has not been set.

I have written a small Spring Boot project (which I am attaching to this Jira issue) that demonstrates this. I understand that this only happens when parallelization is present during the xslt member initialization above, and that it sorts itself out in subsequent calls, but I have managed to see this during testing, so it is not that impossible for it to happen.","Apache Camel 2.17 on EAP Fuse 6.4.0
Apache Camel 2.20 on Spring Boot standalone",,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11984,,02/Nov/17 14:11;salagator;reentrancy.zip;https://issues.apache.org/jira/secure/attachment/12895415/reentrancy.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-11-02 15:46:47.173,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 02 15:46:47 UTC 2017,,,,,,,0|i3mban:,9223372036854775807,,,,,,,,,,02/Nov/17 14:11;salagator;sample project to demonstrate the problem,"02/Nov/17 14:13;salagator;Stack trace thrown when the race condition occurs:
{{
2017-11-02 15:38:58.181 ERROR 2709 --- [TaskExecutor-14] .a.i.SimpleAsyncUncaughtExceptionHandler : Unexpected error occurred invoking async method 'public void com.example.demo.DoSomethingService.doSomething(int)'.

org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-Pafsaniass-MacBook-Pro-local-1509629927258-0-3]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1847) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:713) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:515) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:511) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:163) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:168) ~[camel-core-2.20.0.jar:2.20.0]
	at com.example.demo.DoSomethingService.doSomething(DoSomethingService.java:20) ~[classes/:na]
	at com.example.demo.DoSomethingService$$FastClassBySpringCGLIB$$42aeb0a0.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) ~[spring-core-4.3.12.RELEASE.jar:4.3.12.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:738) ~[spring-aop-4.3.12.RELEASE.jar:4.3.12.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.3.12.RELEASE.jar:4.3.12.RELEASE]
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor$1.call(AsyncExecutionInterceptor.java:115) ~[spring-aop-4.3.12.RELEASE.jar:4.3.12.RELEASE]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_121]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_121]
Caused by: java.lang.IllegalArgumentException: template must be specified
	at org.apache.camel.util.ObjectHelper.notNull(ObjectHelper.java:323) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:100) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.util.toolbox.XsltAggregationStrategy.aggregate(XsltAggregationStrategy.java:107) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.Enricher.process(Enricher.java:266) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161) ~[camel-core-2.20.0.jar:2.20.0]
	... 9 common frames omitted}}","02/Nov/17 15:46;davsclaus;You can call the initialize(camelContext) method on the agg strategy yourself, for example from the route builder class, to avoid this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Imported Xquery modules will not resolve using classpath - Regression,CAMEL-11286,13072452,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Jeremy Gosling,Jeremy Gosling,16/May/17 13:56,01/Nov/17 10:31,13/Mar/19 22:20,01/Nov/17 10:31,2.15.0,2.19.0,,,,,,,,,,,,,,2.19.4,2.20.1,2.21.0,,,camel-saxon,,,,,,0,,,,"In Camel 2.15.0 the camel-saxon component was refactored to include an XQueryEndpoint class which now instanciates the XQueryBuilder object in the doStart() method.  It then sets the values of various properties on this object, but misses out the moduleURIResolver.  This is therefore null when the query is evaluated and not used by the net.sf.saxon.query.XQueryExpression to resolve xquery module imports as original described in CAMEL-4285. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-16 13:58:29.516,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 15 09:43:18 UTC 2017,,,,,,,0|i3f20n:,9223372036854775807,Regression,,,,,,,,,"16/May/17 13:58;ancosen;Is this something present in 2.18, 2.19 and master? Can you eventually provide a PR?","17/May/17 11:05;Jeremy Gosling;Looks like it was introduced in 2.15.0, and has been in all subsequent versions, including master.  I'm a currently putting together a minimal unit test which will exhibit the currently observed behaviour before testing the fix which I will provide.","23/May/17 12:22;davsclaus;Hi Jeremy,

Any update on a fix you are working on?","25/May/17 14:49;Jeremy Gosling;I have a unit test and a one line fix which works on the 2.15.x, 2.16.x and 2.17.x branches, but fails on 2.18.x and master with a null point exception deep within Saxon.  This appears to be related to the updated version of the Saxon HE library used.  The fix for the original enhancement ([CAMEL-4285]) works with any version 9.5.x (9.5.1-5 is specified for Camel 2.15, 2.16 and 2.17) but not 9.6.0-1 onwards.  From Camel 2.18.x onwards various iterations of 9.7 are used, which I'm assuming requires some change to the implementation of the net.sf.saxon.lib.ModuleURIResolver interface. I'm currently looking into this.",25/May/17 14:56;davsclaus;Camel 2.17.x and older are EOL. We only support 2.18 onwards now.,15/Jun/17 09:43;onders;[~Jeremy Gosling] could you share your unit test ? Let's see what we can do.,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet binding should not create jaxb marshaller when binding mode is set to json,CAMEL-11967,13113109,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,transamericamoon,transamericamoon,30/Oct/17 18:29,31/Oct/17 12:55,13/Mar/19 22:20,31/Oct/17 12:55,2.20.0,,,,,,,,,,,,,,,2.19.4,2.20.1,2.21.0,,,camel-core,rest,,,,,0,,,,"The following rest endpoint fails with jaxb exception:


{code:java}
.get(""/getAllEndpoints"").bindingMode(RestBindingMode.json).outType(Map.class)
        			.to(""bean:IRWebServiceRegistry?method=getAllProperties"");
{code}



{code:java}
Caused by: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions
java.util.Map is an interface, and JAXB can't handle interfaces.
{code}


This is fine if i wanted to marshall to xml but i specifically set binding mode to json.

Fix:
Change this line:
https://github.com/apache/camel/blob/36039c0563dfe9e04527c5eca1058e66326054ee/camel-core/src/main/java/org/apache/camel/model/rest/RestBindingDefinition.java#L174

To: 
if (jaxb != null && (mode.contains(""xml"") || mode.equals(RestBindingMode.auto))) {

May want to consider doing the same for the json section at line 130
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-30 19:34:23.968,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 31 12:55:12 UTC 2017,,,Patch Available,,,,0|i3lvpz:,9223372036854775807,,,,,,,,,,"30/Oct/17 19:34;davsclaus;Thanks John, would you like to try to submit this patch as a github PR (pull request), then its easier for us to apply

There is a link from here with some points how to do that
http://camel.apache.org/contributing

And there is also plenty of other resources online about how to work with github and do PRs","31/Oct/17 12:55;davsclaus;Thanks John.

We had to get this fixed today so we can cut the 2.19.4 release.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SFTP is delivered into incorrect location, without exception (file in subfolder + temp file is created + Camel running on Window & SFTP server running on LINUX)",CAMEL-11387,13078475,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,cherryn,cherryn,09/Jun/17 00:16,28/Oct/17 11:47,13/Mar/19 22:20,27/Oct/17 15:59,2.19.0,,,,,,,,,,,,,,,2.19.4,2.20.1,2.21.0,,,camel-sftp,,,,,,0,,,,"The bug only happens when:
i) file in subfolder
ii) temp file is created 
iii) Camel running on Window & SFTP server running on LINUX

Route Configuration:
{code}
 from(""file://sourceFolder?recursive=true&delay=60000"").
 to(""sftp://username@linuxServer?tempFileName=${file:onlyname}.part"");
{code}

NOTES: added separator=UNIX or AUTO, I got the same issue.

Window Local File: sourceFolder/myfolder1/myfolder2/test.txt
FTPS Remote File Delivered: $linuxServer/myfolder1myfolder2test.txt

NOTES: 
* There is no exception throw in 2.19.0, even though the file delivered into incorrect location.  
* In 2.17.3, exception throw at org.apache.camel.component.file.remote.SftpOperations.renameFile(SftpOperations.java:431)[camel-ftp-2.17.3.jar:2.17.3]
* Without tempFileName, it works perfectly.  Issue is around the rename area.
","camel is running on Window, and SFTP server is LINUX",,,,,,,,,604800,604800,,0%,604800,604800,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-20 08:03:25.407,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 28 11:46:52 UTC 2017,,,,,,,0|i3g2db:,9223372036854775807,,,,,,,,,,"20/Jul/17 08:03;davsclaus;Can you be more specific what is the wrong location, maybe write down an file example and say step by step what is happening.","28/Aug/17 19:27;cherryn;[~davsclaus], the file is delivered to ""$linuxServer/myfolder1myfolder2test.txt"".   It is expected to be delivered $linuxServer/myfolder1/myfolder2/test.txt.  


Camel route with v2.19.0: 
{code}
 from(""file://sourceFolder?recursive=true&delay=60000"").
 to(""sftp://username@linuxServer?tempFileName=${file:onlyname}.part"");
{code}

Step 1: Camel is running on Window server
Step 2: File is placed in $windowServer/sourceFolder/myfolder1/myfolder2/test.txt, and expecting to delivery to $linuxServer/myfolder1/myfolder2/test.txt.  
Step 3: $linuxServer/myfolder1/myfolder2/test.txt.part is created
Step 4: File is renamed to $linuxServer/myfolder1myfolder2test.txt, and there is no exception.


Debug message:
{code}
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Connected to sftp://username@linuxServer:22
[hread #6 - file://sourceFolder] RemoteFileProducer             DEBUG Connected and logged in to: sftp://username@linuxServer?tempFileName=%24%7Bfile%3Aonlyname%7D.part
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Trying to build remote directory: myfolder1/myfolder2
[hread #6 - file://sourceFolder] GenericFileConverter           DEBUG Read file sourceFolder\myfolder1\myfolder2\test.txt (no charset)
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG About to store file: test.txt.part using stream: java.io.BufferedInputStream@75c2d4bc
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Took 0.015 seconds (15 millis) to store file: test.txt.part and FTP client returned: true
[hread #6 - file://sourceFolder] RemoteFileProducer             DEBUG Wrote [myfolder1/myfolder2/test.txt.part] to [sftp://username@linuxServer?tempFileName=%24%7Bfile%3Aonlyname%7D.part]
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Renaming file: myfolder1/myfolder2/test.txt.part to: myfolder1\myfolder2\test.txt
[hread #6 - file://sourceFolder] Tracer                         INFO  ID-WINDOWSERVER-55268-1503948136624-0-2 >>> (route2) sftp://username@linuxServer?tempFileName=%24%7Bfile%3Aonlyname%7D.part --> log[file ${file:absolute.path} is processed] <<< Pattern:InOnly, Headers:{breadcrumbId=ID-WINDOWSERVER-55268-1503948136624-0-1, CamelFileAbsolute=false, CamelFileAbsolutePath=E:\relay\sourceFolder\myfolder1\myfolder2\test.txt, CamelFileLastModified=1503948089127, CamelFileLength=4, CamelFileName=myfolder1\myfolder2\test.txt, CamelFileNameConsumed=myfolder1\myfolder2\test.txt, CamelFileNameOnly=test.txt, CamelFileNameProduced=myfolder1\myfolder2\test.txt, CamelFileParent=sourceFolder\myfolder1\myfolder2, CamelFilePath=sourceFolder\myfolder1\myfolder2\test.txt, CamelFileRelativePath=myfolder1\myfolder2\test.txt}, BodyType:org.apache.camel.component.file.GenericFile, Body:[Body is file based: GenericFile[myfolder1\myfolder2\test.txt]]
[hread #6 - file://sourceFolder] route2                         INFO  file E:\relay\sourceFolder\myfolder1\myfolder2\test.txt is processed
[hread #6 - file://sourceFolder] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[myfolder1\myfolder2\test.txt] using exchange: Exchange[ID-WINDOWSERVER-55268-1503948136624-0-2]
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Retrying attempt 0 to delete file: sourceFolder\myfolder1\myfolder2\.camel\test.txt
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Tried 1 to delete file: sourceFolder\myfolder1\myfolder2\.camel\test.txt with result: true
[hread #6 - file://sourceFolder] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[myfolder1\myfolder2\test.txt] to: GenericFile[myfolder1\myfolder2\.camel\test.txt]
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Tried 1 to rename file: E:\relay\sourceFolder\myfolder1\myfolder2\test.txt to: sourceFolder\myfolder1\myfolder2\.camel\test.txt with result: true
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Retrying attempt 0 to delete file: E:\relay\sourceFolder\myfolder1\myfolder2\test.txt.camelLock
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Tried 1 to delete file: E:\relay\sourceFolder\myfolder1\myfolder2\test.txt.camelLock with result: true
{code}



","28/Aug/17 19:40;cherryn;[~davsclaus], 

Same code with camel v2.17.3.  The temp file is created ($linuxServer/myfolder1/myfolder2/test.txt.part), but exception when renaming.

Step 1: Camel v2.17.3 is running on Window server
Step 2: File is placed in $windowServer/sourceFolder/myfolder1/myfolder2/test.txt, and expecting to delivery to $linuxServer/myfolder1/myfolder2/test.txt. 
Step 3: $linuxServer/myfolder1/myfolder2/test.txt.part is created
Step 4: exception to rename to the file $linuxServer/myfolder1/myfolder2/test.txt.part to $linuxServer/myfolder1/myfolder2/test.txt.

Debug message:
{code}
[hread #6 - file://sourceFolder] SftpOperations                 INFO  Connected to sftp://username@linuxServer:22
[hread #6 - file://sourceFolder] RemoteFileProducer             DEBUG Connected and logged in to: Endpoint[sftp://username@linuxServer?tempFileName=%24%7Bfile%3Aonlyname%7D.part]
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Trying to build remote directory: myfolder1/myfolder2
[hread #6 - file://sourceFolder] GenericFileConverter           DEBUG Read file sourceFolder\myfolder1\myfolder2\test.txt (no charset)
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG About to store file: test.txt.part using stream: java.io.BufferedInputStream@755bc403
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Took 0.031 seconds (31 millis) to store file: test.txt.part and FTP client returned: true
[hread #6 - file://sourceFolder] RemoteFileProducer             DEBUG Wrote [myfolder1\myfolder2\test.txt.part] to [Endpoint[sftp://username@linuxServer?tempFileName=%24%7Bfile%3Aonlyname%7D.part]]
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Renaming file: myfolder1\myfolder2\test.txt.part to: myfolder1\myfolder2\test.txt
[hread #6 - file://sourceFolder] RemoteFileProducer             WARN  Writing file failed with: Cannot rename file from: myfolder1\myfolder2\test.txt.part to: myfolder1\myfolder2\test.txt
[hread #6 - file://sourceFolder] RemoteFileProducer             DEBUG Disconnecting from: Endpoint[sftp://username@linuxServer?tempFileName=%24%7Bfile%3Aonlyname%7D.part]
[hread #6 - file://sourceFolder] DefaultErrorHandler            DEBUG Failed delivery for (MessageId: ID-WINDOWSERVER-55343-1503948693519-0-1 on ExchangeId: ID-WINDOWSERVER-55343-1503948693519-0-2). On delivery attempt: 0 caught: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file from: myfolder1\myfolder2\test.txt.part to: myfolder1\myfolder2\test.txt
[hread #6 - file://sourceFolder] DefaultErrorHandler            ERROR Failed delivery for (MessageId: ID-WINDOWSERVER-55343-1503948693519-0-1 on ExchangeId: ID-WINDOWSERVER-55343-1503948693519-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file from: myfolder1\myfolder2\test.txt.part to: myfolder1\myfolder2\test.txt

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route2            ] [route2            ] [file://sourceFolder?delay=60000&recursive=true                                ] [     22188]
[route2            ] [log3              ] [log                                                                           ] [        35]
[route2            ] [to5               ] [sftp://username@linuxServer?tempFileName=${file:onlyname}.part                ] [     21660]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file from: myfolder1\myfolder2\test.txt.part to: myfolder1\myfolder2\test.txt
	at org.apache.camel.component.file.remote.SftpOperations.renameFile(SftpOperations.java:431)[camel-ftp-2.17.3.jar:2.17.3]
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:198)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:58)[camel-ftp-2.17.3.jar:2.17.3]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:341)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:454)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:226)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:190)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:175)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:102)[camel-core-2.17.3.jar:2.17.3]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_131]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)[:1.8.0_131]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)[:1.8.0_131]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)[:1.8.0_131]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_131]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_131]
	at java.lang.Thread.run(Thread.java:748)[:1.8.0_131]
[hread #6 - file://sourceFolder] Pipeline                       DEBUG Message exchange has failed: so breaking out of pipeline for exchange: Exchange[ID-VACSWVNGAI02-55343-1503948693519-0-2] Exception: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file from: myfolder1\myfolder2\test.txt.part to: myfolder1\myfolder2\test.txt
[hread #6 - file://sourceFolder] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[myfolder1\myfolder2\test.txt] using exchange: Exchange[ID-VACSWVNGAI02-55343-1503948693519-0-2]
[hread #6 - file://sourceFolder] GenericFileOnCompletion        WARN  Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@4dbe767f for file: GenericFile[myfolder1\myfolder2\test.txt]
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Retrying attempt 0 to delete file: E:\relay\sourceFolder\myfolder1\myfolder2\test.txt.camelLock
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Tried 1 to delete file: E:\relay\sourceFolder\myfolder1\myfolder2\test.txt.camelLock with result: true
{code}",21/Sep/17 11:02;davsclaus;Can you try with stepwise=false option configured on the ftp endpoints,"27/Oct/17 11:34;onders;today, i had a chance to test the case from windows client against unix ftp.
{{stepwise=false}} does not seem to help. The problem is because the folder structure seems to get created on unix Server with Windows separators and jcraft's rename method needs '/' even if it is on windows. Sending PR soon.","27/Oct/17 11:52;githubbot;onders86 opened a new pull request #2066: CAMEL-11387 - adjust destination filename by calling existing method …
URL: https://github.com/apache/camel/pull/2066
 
 
   …to make it compact as jcraft seems to need it

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Oct/17 11:52;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/2066

    CAMEL-11387 - adjust destination filename by calling existing method …

    …to make it compact as jcraft seems to need it

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11387

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2066.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2066
    
----
commit 9bb3b342516ac6362de72da0e5a220d0018edcf7
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-10-27T11:46:08Z

    CAMEL-11387 - adjust destination filename by calling existing method to make it compact as jcraft seems to need it

----
","27/Oct/17 12:19;githubbot;davsclaus commented on a change in pull request #2066: CAMEL-11387 - adjust destination filename by calling existing method …
URL: https://github.com/apache/camel/pull/2066#discussion_r147395660
 
 

 ##########
 File path: components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java
 ##########
 @@ -269,6 +269,9 @@ public boolean deleteFile(String name) throws GenericFileOperationFailedExceptio
     public boolean renameFile(String from, String to) throws GenericFileOperationFailedException {
         log.debug(""Renaming file: {} to: {}"", from, to);
         try {
+            //make use of the '/' separator because JSch expects this 
 
 Review comment:
   JSch is only used for SftpOperations. So this comment is a bit mis-leading. ftp is using commons-net

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Oct/17 12:22;githubbot;onders86 commented on a change in pull request #2066: CAMEL-11387 - adjust destination filename by calling existing method …
URL: https://github.com/apache/camel/pull/2066#discussion_r147396213
 
 

 ##########
 File path: components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java
 ##########
 @@ -269,6 +269,9 @@ public boolean deleteFile(String name) throws GenericFileOperationFailedExceptio
     public boolean renameFile(String from, String to) throws GenericFileOperationFailedException {
         log.debug(""Renaming file: {} to: {}"", from, to);
         try {
+            //make use of the '/' separator because JSch expects this 
 
 Review comment:
   good catch. i will update soon.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Oct/17 12:48;githubbot;davsclaus commented on issue #2066: CAMEL-11387 - adjust destination filename by calling existing method …
URL: https://github.com/apache/camel/pull/2066#issuecomment-339962015
 
 
   The ticket was reporting SFTP only (eg JCraft). Can this PR only change that one - as the other FTP client has not been reported issues like this, and its better not to change it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Oct/17 15:57;githubbot;onders86 closed pull request #2066: CAMEL-11387 - adjust destination filename by calling existing method …
URL: https://github.com/apache/camel/pull/2066
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
index 1721c40da12..84d427f875c 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
@@ -447,6 +447,9 @@ public synchronized boolean renameFile(String from, String to) throws GenericFil
         LOG.debug(""Renaming file: {} to: {}"", from, to);
         try {
             reconnectIfNecessary();
+            //make use of the '/' separator because JSch expects this 
+            // as the file separator even on Windows
+            to = FileUtil.compactPath(to, '/');
             channel.rename(from, to);
             return true;
         } catch (SftpException e) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Oct/17 15:57;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/2066
",27/Oct/17 17:08;onders;Backport needed?,"28/Oct/17 07:15;davsclaus;Great work Onder.

Yeah I think its a good idea to backport to 2.20.x and 2.19.x as well.","28/Oct/17 11:46;onders;backported 2.19.x and 2.20.x.
thanks",,,,,,,,,,,,,,,,,,
ClassCastException in HttpMessage,CAMEL-11961,13112780,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Oct/17 08:34,28/Oct/17 08:55,13/Mar/19 22:20,28/Oct/17 08:55,2.20.0,,,,,,,,,,,,,,,2.19.4,2.20.1,2.21.0,,,camel-http-common,,,,,,0,,,,"Was reported on user forum
http://camel.465427.n5.nabble.com/ClassCastException-DirectVmEndpoint-cannot-be-cast-to-HttpCommonEndpoint-tp5814893.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-10-28 08:34:11.0,,,,,,,0|i3ltpj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using @AdviceWith and testing camel-spring-boot startup CamelContext eager,CAMEL-11955,13112551,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Oct/17 09:36,27/Oct/17 10:58,13/Mar/19 22:20,27/Oct/17 10:58,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-spring-boot,camel-test,,,,,0,,,,"See
http://camel.465427.n5.nabble.com/CamelSpringBootRunner-and-AdviceWith-tp5814802.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-10-27 09:36:24.0,,,,,,,0|i3lsav:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XSLT options not set when resource URI is http,CAMEL-11952,13112369,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tflaherty,tflaherty,26/Oct/17 18:26,27/Oct/17 08:01,13/Mar/19 22:20,27/Oct/17 08:01,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-core,,,,,,0,,,,"Options included for an XSLT endpoint URI are not applied if the resource is referenced via HTTP. 

In XsltComponent.createEndpoint(), it checks if the resource URI is http (XsltComponent:179). If it is, ResourceHelper.appendParameters() is called (XsltComponent:180).

ResourceHelper.appendParameters() adds the parameters to the HTTP URI and then clears the parameters list (ResourceHelper:336). 

By the time setProperties() is called on line 207 of XsltComponent, the parameters map is empty and nothing gets set.",,,,,,,,,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-10-26 18:26:19.0,,,,,,,0|i3lr6f:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
maven connector plugin: connector only properties are ignored in spring boot code generation,CAMEL-11953,13112473,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,27/Oct/17 05:44,27/Oct/17 06:08,13/Mar/19 22:20,27/Oct/17 06:08,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-connector,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-10-27 05:44:29.0,,,,,,,0|i3lrtj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix syntax for iec60870 component,CAMEL-11937,13111341,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,apupier,apupier,23/Oct/17 09:02,24/Oct/17 07:24,13/Mar/19 22:20,24/Oct/17 07:24,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-iec60870,,,,,,0,,,,"it seems that there is an issue withe several iec60870 component;
iec60870-client uriPath iec60870-client:endpointUri
iec60870-server uriPath iec60870-server:endpointUri",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-23 09:30:49.394,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 24 07:24:38 UTC 2017,,,,,,,0|i3lkvb:,9223372036854775807,,,,,,,,,,"23/Oct/17 09:30;githubbot;apupier opened a new pull request #2054: CAMEL-11937 - Fix syntax for IEC 608870 component
URL: https://github.com/apache/camel/pull/2054
 
 
   Signed-off-by: Aurélien Pupier <apupier@redhat.com>

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Oct/17 09:30;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/2054

    CAMEL-11937 - Fix syntax for IEC 608870 component

    Signed-off-by: Aurélien Pupier <apupier@redhat.com>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-11937-camel-2.20.x-FixSyntaxIEC

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2054.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2054
    
----

----
","23/Oct/17 10:31;githubbot;oscerd commented on issue #2054: CAMEL-11937 - Fix syntax for IEC 608870 component
URL: https://github.com/apache/camel/pull/2054#issuecomment-338617145
 
 
   Can you rebuild here too?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Oct/17 07:24;githubbot;oscerd commented on issue #2054: CAMEL-11937 - Fix syntax for IEC 608870 component
URL: https://github.com/apache/camel/pull/2054#issuecomment-338898841
 
 
   Thanks for the PR. It has been merged on 2.20.x and master. I'm closing it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Oct/17 07:24;githubbot;oscerd closed pull request #2054: CAMEL-11937 - Fix syntax for IEC 608870 component
URL: https://github.com/apache/camel/pull/2054
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-iec60870/src/main/docs/iec60870-client-component.adoc b/components/camel-iec60870/src/main/docs/iec60870-client-component.adoc
index b91c44a4351..68ba87d2836 100644
--- a/components/camel-iec60870/src/main/docs/iec60870-client-component.adoc
+++ b/components/camel-iec60870/src/main/docs/iec60870-client-component.adoc
@@ -55,7 +55,7 @@ with zero.
 The IEC 60870 Client endpoint is configured using URI syntax:
 
 ----
-iec60870-client:endpointUri
+iec60870-client:uriPath
 ----
 
 with the following path and query parameters:
@@ -112,4 +112,4 @@ The final connection options will be evaluated in the following order:
 * Otherwise the +defaultConnectionOptions+ instance is copied and customized in the following steps
 * Apply +protocolOptions+ if present
 * Apply +dataModuleOptions+ if present
-* Apply all explicit connection parameters (e.g. +timeZone+)
\ No newline at end of file
+* Apply all explicit connection parameters (e.g. +timeZone+)
diff --git a/components/camel-iec60870/src/main/docs/iec60870-server-component.adoc b/components/camel-iec60870/src/main/docs/iec60870-server-component.adoc
index 5e6fa563bf2..9ac363c6f91 100644
--- a/components/camel-iec60870/src/main/docs/iec60870-server-component.adoc
+++ b/components/camel-iec60870/src/main/docs/iec60870-server-component.adoc
@@ -58,7 +58,7 @@ with zero.
 The IEC 60870 Server endpoint is configured using URI syntax:
 
 ----
-iec60870-server:endpointUri
+iec60870-server:uriPath
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/client/ClientEndpoint.java b/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/client/ClientEndpoint.java
index bf440abc193..498d46b5f62 100644
--- a/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/client/ClientEndpoint.java
+++ b/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/client/ClientEndpoint.java
@@ -30,7 +30,7 @@
  * IEC 60870 component used for telecontrol (supervisory control and data acquisition)
  * such as controlling electric power transmission grids and other geographically widespread control systems.
  */
-@UriEndpoint(firstVersion = ""2.20.0"", scheme = ""iec60870-client"", syntax = ""iec60870-client:endpointUri"",
+@UriEndpoint(firstVersion = ""2.20.0"", scheme = ""iec60870-client"", syntax = ""iec60870-client:uriPath"",
     title = ""IEC 60870 Client"", consumerClass = ClientConsumer.class, label = ""iot"")
 public class ClientEndpoint extends AbstractIecEndpoint<ClientConnectionMultiplexor> {
 
diff --git a/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/server/ServerEndpoint.java b/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/server/ServerEndpoint.java
index b3688ec8746..d7756309098 100644
--- a/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/server/ServerEndpoint.java
+++ b/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/server/ServerEndpoint.java
@@ -31,7 +31,7 @@
  * IEC 60870 component used for telecontrol (supervisory control and data acquisition)
  * such as controlling electric power transmission grids and other geographically widespread control systems.
  */
-@UriEndpoint(firstVersion = ""2.20.0"", scheme = ""iec60870-server"", syntax = ""iec60870-server:endpointUri"",
+@UriEndpoint(firstVersion = ""2.20.0"", scheme = ""iec60870-server"", syntax = ""iec60870-server:uriPath"",
     title = ""IEC 60870 Server"", consumerClass = ServerConsumer.class, label = ""iot"")
 public class ServerEndpoint extends AbstractIecEndpoint<ServerConnectionMultiplexor> {
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Oct/17 07:24;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2054
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing compile scope dependencies in camel-pgevent ,CAMEL-11906,13109257,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,tdiesler,tdiesler,tdiesler,13/Oct/17 13:07,18/Oct/17 09:01,13/Mar/19 22:20,18/Oct/17 09:01,,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-18 09:01:53.496,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 18 09:01:53 UTC 2017,,,,,,,0|i3l8rr:,9223372036854775807,,,,,,,,,,18/Oct/17 09:01;davsclaus;Thanks I fixed this,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jgroups-starter : JGroupsLockClusterService auto configuration lacks enable flag,CAMEL-11917,13109926,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,17/Oct/17 09:13,17/Oct/17 09:20,13/Mar/19 22:20,17/Oct/17 09:20,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-spring-boot-starters,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-10-17 09:13:52.0,,,,,,,0|i3lcjr:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jgroups-starter : JGroupsLockClusterServiceConfiguration lacks getter/setters,CAMEL-11916,13109925,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,17/Oct/17 09:09,17/Oct/17 09:20,13/Mar/19 22:20,17/Oct/17 09:20,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-spring-boot-starters,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-10-17 09:09:59.0,,,,,,,0|i3lcjj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix incorrect elasticsearch5-rest documentation and OperationTypes,CAMEL-11915,13109895,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,flemming.harms@gmail.com,flemming.harms@gmail.com,flemming.harms@gmail.com,17/Oct/17 06:40,17/Oct/17 09:03,13/Mar/19 22:20,17/Oct/17 09:03,2.21.0,,,,,,,,,,,,,,,2.21.0,,,,,camel-elasticsearch5,,,,,,0,,,,"Minor mistake in the new elasticsearch5-rest dokumentation.

* The operation names is wrong and should reflect the names in the ElasticsearchOperation
* The maven pom.xml example pointing to the wrong artifact

A few of the operation type is returning a incorrect Type from body
- Update should return an Object from the body instead of Map and pas it into the ElasticsearchActionRequestConverter.toUpdateRequest
- Bulk should return an Object and pas it into the ElasticsearchActionRequestConverter.toBulkRequest",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-17 08:40:54.048,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 17 09:02:14 UTC 2017,,,,,,,0|i3lccv:,9223372036854775807,,,,,,,,,,"17/Oct/17 08:40;githubbot;GitHub user fharms opened a pull request:

    https://github.com/apache/camel/pull/2043

    CAMEL-11915: Updating the documentation to follow the new component o…

    …perations and types
    
    - Update operation pas the body object into the
    ElasticsearchActionRequestConverter.toUpdateRequest
    - Bulk operation pas the body object into the
    ElasticsearchActionRequestConverter.toBulkRequest
    - Add missing query parameter for enable SSL. This is useful
    if you want to point out a specific instance in the cluster for
    specific routes

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fharms/camel camel-11915-fix-incorrect-elk-documentation

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2043.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2043
    
----
commit ce882ae7cfd6f91a9ab0e18e0ef0a9e3a4d64a94
Author: fharms <flemming.harms@gmail.com>
Date:   2017-10-17T08:39:46Z

    CAMEL-11915: Updating the documentation to follow the new component operations and types
    - Update operation pas the body object into the
    ElasticsearchActionRequestConverter.toUpdateRequest
    - Bulk operation pas the body object into the
    ElasticsearchActionRequestConverter.toBulkRequest
    - Add missing query parameter for enable SSL. This is useful
    if you want to point out a specific instance in the cluster for
    specific routes

----
","17/Oct/17 09:02;githubbot;Github user fharms closed the pull request at:

    https://github.com/apache/camel/pull/2043
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - set CamelLogDebugBodyMaxChars when 0 or negative,CAMEL-11896,13108785,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sam.ma,sam.ma,12/Oct/17 03:57,16/Oct/17 07:29,13/Mar/19 22:20,16/Oct/17 07:29,2.19.3,,,,,,,,,,,,,,,2.19.4,2.20.1,2.21.0,,,camel-spring-boot,,,,,,0,,,,"According to the [camel doc|http://camel.apache.org/how-do-i-set-the-max-chars-when-debug-logging-messages-in-camel.html], the value of _CamelLogDebugBodyMaxChars_ could be 0 or negative which allows entire body to be shown in the debug log.

I noticed the following code in [CamelAutoConfiguration.java|https://github.com/apache/camel/blob/55b0124379ce4e58890c71917fb6e12b30396780/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/CamelAutoConfiguration.java#L143] which only set _CamelLogDebugBodyMaxChars_ when the configuration item is positive.
{code:java}
if (config.getLogDebugMaxChars() > 0) {
    camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, """" + config.getLogDebugMaxChars());
}
{code}

To solve the issue, simply remove the if condition.
diff for the patch:
{code:none}
--- CamelAutoConfiguration.java.old	2017-10-12 14:32:42.000000000 +1100
+++ CamelAutoConfiguration.java	2017-10-12 14:32:57.000000000 +1100
@@ -140,9 +140,7 @@
         camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder());
         camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout());
 
-        if (config.getLogDebugMaxChars() > 0) {
-            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, """" + config.getLogDebugMaxChars());
-        }
+        camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, """" + config.getLogDebugMaxChars());
 
         // stream caching
         camelContext.setStreamCaching(config.isStreamCachingEnabled());
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,12/Oct/17 04:00;sam.ma;CAMEL-11896.diff;https://issues.apache.org/jira/secure/attachment/12891620/CAMEL-11896.diff,,,,1.0,,,,,,,,,,,,,,,,,,,2017-10-12 08:56:05.453,,,no_permission,,Unknown,,,,Patch,,,,,,,,,9223372036854775807,,,Mon Oct 16 07:29:40 UTC 2017,,,Patch Available,,,,0|i3l60f:,9223372036854775807,,,,,,,,,,"12/Oct/17 08:56;davsclaus;Thanks, would you like to try to submit the fix as a github PR

Link from here how to do that
http://camel.apache.org/contributing","15/Oct/17 23:39;githubbot;GitHub user sam-ma opened a pull request:

    https://github.com/apache/camel/pull/2040

    CAMEL-11896: set CamelLogDebugBodyMaxChars when 0 or negative

    [CAMEL-11896](https://issues.apache.org/jira/browse/CAMEL-11896): set CamelLogDebugBodyMaxChars when 0 or negative

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sam-ma/camel CAMEL-11896

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2040.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2040
    
----
commit 4cd45a26b43bc82709149c1d18e9922ffc789c2e
Author: Sam Ma <samuel.ma@vocus.com.au>
Date:   2017-10-15T23:34:07Z

    CAMEL-11896: set CamelLogDebugBodyMaxChars when 0 or negative

----
","16/Oct/17 07:27;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2040
",16/Oct/17 07:29;davsclaus;Thanks for the PR. I had to do a little adjustment and only use -1 for unlimited as spring boot assigns the value to 0 by default and we dont want to set the global option if so.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-maven-plugin - validate should not include route ids as consumer urls,CAMEL-11910,13109436,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Oct/17 12:44,14/Oct/17 12:49,13/Mar/19 22:20,14/Oct/17 12:49,2.20.0,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,tooling,,,,,,0,,,,"The logic to detect duplicate route ids, causes the route ids to be included as consumer urls which the validate goal will regard as unknown component.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-10-14 12:44:43.0,,,,,,,0|i3l9v3:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel FTP fails to create intermediate directory,CAMEL-11811,13104411,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,chikim79,chikim79,22/Sep/17 21:18,05/Oct/17 06:36,13/Mar/19 22:20,05/Oct/17 06:36,2.18.2,,,,,,,,,,,,,,,2.19.4,2.20.0,,,,camel-ftp,,,,,,0,,,,"Camel Ftp fails to create intermediate directory if more than the immediate parent directory is missing.

in FtpOperations.buildDirectoryChunks,
the mkdir command for intermediate directories are being made with trailing slash.

Some ftp does not like the trailing slash with mkdir command.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-23 08:27:19.376,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 05 04:38:27 UTC 2017,,,,,,,0|i3kfpj:,9223372036854775807,,,,,,,,,,23/Sep/17 08:27;davsclaus;Can you post some logs or something that shows this problem for you?,"03/Oct/17 23:12;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1999

    CAMEL-11811 - add a new simple option in case some FTP servers fails …

    …creating dir with trailing slash

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11811

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1999.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1999
    
----
commit 8fc3bd5439d0dcf625117375e5e73b86bae03487
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2017-10-03T23:08:13Z

    CAMEL-11811 - add a new simple option in case some FTP servers fails creating dir with trailing slash

----
","04/Oct/17 01:06;chikim79;Sorry, the ftp server is not ours, so I do not have the logs on the server side.
Locally, the command just failed with Reply 550 (File does not exist.)","05/Oct/17 04:38;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1999
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple Expression Language bean doesn't throw exception when bean not found,CAMEL-11866,13106080,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,abccbaandy,abccbaandy,29/Sep/17 16:16,03/Oct/17 10:21,13/Mar/19 22:20,03/Oct/17 10:21,2.19.3,,,,,,,,,,,,,,,2.19.4,2.20.0,,,,camel-core,,,,,,0,,,,"
{code:java}
from(""file://input?fileName=${bean:notexist?method=notImportant}"");
{code}

this bean doesn't exist, but code run well without any exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-29 23:25:26.339,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 03 08:32:45 UTC 2017,,,,,,,0|i3kpxz:,9223372036854775807,,,,,,,,,,29/Sep/17 23:25;onders;Not sure if i understand your notation..,"30/Sep/17 02:07;abccbaandy;sry for bad description :(

I mean this router start/run without any exception, and consume all files in input folder.

But shouldn't it throw ""bean not found"" exception when start/run?","03/Oct/17 08:32;sarai;If you enable trace logging in camel context you will see the exception _ClassNotFoundException_. 

First the bean is looked up in the contet and if the bean is not resolved _BlueprintContainerImpl_ will try to instante the bean by it's name. The _OsgiClassResolver_ will try to load the the class which it will not find and hence this exeption. 

The loading of a class sometimes is done as optional. So the log level is kept as _TRACE_.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using MongoDB Tailable Cursor Consumer on non-capped collection results in NullPointerException (instead of proper error message),CAMEL-11848,13105318,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,fwein,fwein,27/Sep/17 06:23,27/Sep/17 13:43,13/Mar/19 22:20,27/Sep/17 13:43,2.19.3,,,,,,,,,,,,,,,2.19.4,2.20.0,,,,camel-mongodb,camel-mongodb3,,,,,0,,,,"When using the Camel MongoDB component with a tailable cursor consumer on a non-capped collection, you get a NullPointerException (also see http://camel.apache.org/mongodb.html#MongoDB-TailableCursorConsumer on this). While using this feature on a non-capped collection is not supported, the error message should be better (at the moment it only throws a NullPointerException because the code tries to unbox a null in a Boolean object). The code actually already has a better error message, but there is a small logic flaw that prevents the error message from showing up. See https://github.com/apache/camel/blob/camel-2.19.3/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java#L78 for the code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-27 07:08:01.426,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 27 13:43:01 UTC 2017,,,,,,,0|i3klaf:,9223372036854775807,,,,,,,,,,"27/Sep/17 07:08;davsclaus;You are welcome to provide a fix as a github PR
http://camel.apache.org/contributing",27/Sep/17 07:08;davsclaus;Mind there is 2 mongodb components with Camel so if they both has this problem you are welcome to fix them both.,"27/Sep/17 12:38;fwein;Actually I forgot one part in my explanation: I think this might only affect old MongoDB versions, I tested it with 2.6. But a fix for this problem in Camel should be easy anyway.","27/Sep/17 13:20;githubbot;GitHub user Frankst2 opened a pull request:

    https://github.com/apache/camel/pull/1969

    CAMEL-11848: Check for null value when getting key ""capped"" of collec…

    …tion stats (key/value might not exist in MongoDB 2.6 when it is a non-capped collection)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Frankst2/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1969.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1969
    
----
commit 62a8ce1d953cda0c1594ef556726d7d9f6aa3658
Author: Frank Wein <frank.wein@fau.de>
Date:   2017-09-27T13:17:09Z

    CAMEL-11848: Check for null value when getting key ""capped"" of collection stats (key/value might not exist in MongoDB 2.6)

----
","27/Sep/17 13:23;fwein;BTW: I checked with mongodb 3.2 and 3.4, there it's fine.","27/Sep/17 13:42;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1969
",27/Sep/17 13:43;davsclaus;Thanks for the PR and testing,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to configure some URI options on DockerEndpoint ,CAMEL-11843,13105086,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,26/Sep/17 13:40,27/Sep/17 10:10,13/Mar/19 22:20,27/Sep/17 10:10,2.19.3,,,,,,,,,,,,,,,2.19.4,2.20.0,,,,camel-docker,,,,,,0,,,,"The docker component triggers some [custom logic|https://github.com/apache/camel/blob/master/components/camel-docker/src/main/java/org/apache/camel/component/docker/DockerComponent.java#L65] to validate URI options. 

It does not handle all of the valid set of URI options. E.g setting exchangePattern, maxTotalConnections and others, results in:

{code}
Caused by: com.github.dockerjava.api.exception.DockerClientException: bridgeErrorHandler is not a valid URI parameter
	at org.apache.camel.component.docker.DockerHelper.validateParameters(DockerHelper.java:56)
	at org.apache.camel.component.docker.DockerComponent.createEndpoint(DockerComponent.java:65)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:126)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:703)
	... 51 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-27 07:11:28.391,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 27 10:03:13 UTC 2017,,,,,,,0|i3kjv3:,9223372036854775807,,,,,,,,,,"27/Sep/17 07:11;davsclaus;You are welcome to work on a fix. I wonder if this validation is needed at all? Or if so it should only do very specific validation of a limited set of known docker only options.

The default component will do generic validation afterwards.","27/Sep/17 07:22;jamesnetherton;I'll take a look. I'll try to remove the power mock stuff from this component too.

It's my last day before holiday so I may not get back to this for a couple of weeks.
","27/Sep/17 07:23;davsclaus;Thanks, do you mind fixing the validation first, as its most important. We plan to cut 2.20.0 end of this month and would like this fix to be included.","27/Sep/17 08:50;jamesnetherton;Turns out this component is a little odd. The endpoint is isLenientProperties = true. 

It allows users to configure different URI options depending on the docker operation. Hence there is no fixed set of URI params.

We could change it to  isLenientProperties = false so that the generic validation kicks in. But this would throw an error on a URI like {{docker:stats?host=foo&port=bar&containerId=abc123}}, because containerId is not an @UriOption in the DockerConfiguration class.

All of the extra docker operation specific URI params can already be configured as headers. So is it ok to force users to configure these extra options only via headers instead of URI params?

","27/Sep/17 09:03;davsclaus;Then its probably better to go the other way of not doing this magic validation, so its similar to other lenient properties components. Its a bit of hazzle to configure via headers. So I would remove that special validation check, and then Camel users should configure it properly","27/Sep/17 09:49;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1967

    CAMEL-11843: Fix issues configuring some URI options on DockerEndpoint

    https://issues.apache.org/jira/browse/CAMEL-11843

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-11843

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1967.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1967
    
----
commit 35c6e0a27cd8adfca6c0aab42b4a36f0f3cfc46f
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2017-09-27T09:36:04Z

    CAMEL-11843: Fix issues configuring some URI options on DockerEndpoint

----
","27/Sep/17 10:03;githubbot;Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/1967
",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-azure - Should work with Camel file component OOTB,CAMEL-11844,13105087,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,26/Sep/17 13:40,26/Sep/17 13:48,13/Mar/19 22:20,26/Sep/17 13:48,2.19.0,,,,,,,,,,,,,,,2.19.4,2.20.0,,,,camel-azure,,,,,,0,,,,"See SO
https://stackoverflow.com/questions/46425049/camel-azure-blobserviceproducer-illegalargumentexception-unsupported-blob-type",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-09-26 13:40:48.0,,,,,,,0|i3kjvb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelMessageHistoryOutputFormat global option ignored for message history,CAMEL-11797,13103812,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,strelok1,strelok1,21/Sep/17 04:55,21/Sep/17 07:30,13/Mar/19 22:20,21/Sep/17 07:29,2.19.2,,,,,,,,,,,,,,,2.19.4,2.20.0,,,,camel-core,,,,,,0,,,,"CamelMessageHistoryOutputFormat global option is used in org.apache.camel.util.MessageHelper#doDumpMessageHistoryStacktrace to print a pretty message history of an exchange. However the format is ignored for all but the first line of the history. This is due to line 585 not using the ""resolved"" format from the option but the default. I will attach a patch for this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21/Sep/17 05:32;strelok1;CAMEL11797.patch;https://issues.apache.org/jira/secure/attachment/12888214/CAMEL11797.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2017-09-21 07:08:50.348,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 21 07:30:58 UTC 2017,,,Patch Available,,,,0|i3kc13:,9223372036854775807,,,,,,,,,,"21/Sep/17 05:10;strelok1;Attached patch.Thanks Tests passed.

{code}
[WARNING] Tests run: 6037, Failures: 0, Errors: 0, Skipped: 15
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 11:59 min
[INFO] Finished at: 2017-09-21T15:31:43+10:00
[INFO] Final Memory: 961M/3297M
[INFO] ------------------------------------------------------------------------
{code}","21/Sep/17 07:08;davsclaus;Thanks for the patch.

We prefer patches as github PRs, so you are welcome to contribute using standard github way
https://github.com/apache/camel/

And there is details in the contributor guide
https://github.com/apache/camel/blob/master/CONTRIBUTING.md","21/Sep/17 07:23;githubbot;GitHub user strelok1 opened a pull request:

    https://github.com/apache/camel/pull/1946

    CAMEL-11797: Change MessageHelper to use the custom message history format

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/strelok1/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1946.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1946
    
----
commit 42e70f6cf79967d120412d8b702e1c6c18f98ebd
Author: Roman Rodov <roman.rodov@iag.com.au>
Date:   2017-09-21T07:22:56Z

    CAMEL-11797: Change MessageHelper to actually use the custom message history format for lines > 1

----
",21/Sep/17 07:24;strelok1;Thanks [~davsclaus]. Opened https://github.com/apache/camel/pull/1946,21/Sep/17 07:29;davsclaus;Thanks for reporting and the PR,"21/Sep/17 07:30;githubbot;Github user strelok1 closed the pull request at:

    https://github.com/apache/camel/pull/1946
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Input stream infinitive loop,CAMEL-11672,13094786,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,zeljkov,zeljkov,15/Aug/17 15:42,12/Sep/17 09:56,13/Mar/19 22:20,12/Sep/17 09:56,2.12.4,,,,,,,,,,,,,,,2.20.0,,,,,camel-http,,,,,,0,,,,"Dear Camel team,
While working on one integration we found issue related to camel-http component when solution is deployed on IBM Liberty core.
Same issue is not reproducible on Jetty and Tomcat.

Issue is connected to the code in IOHelper and CachedOutputStream$WrappedInputStream
We are using version 2.12.4 but I can see that same code is used also in latest versions.

https://github.com/apache/camel/blob/camel-2.12.4/camel-core/src/main/java/org/apache/camel/util/IOHelper.java

Problematic part are lines 196, 198 and 204.
Basically stream reader which is used org.apache.camel.converter.stream.CachedOutputStream$WrappedInputStream is not returning -1 like response of read method if empty string is provided on input.
This is wrong by specification of InputReader interface.

       // in the case there is input which is empty string
       while ( -1 != n) {
         …
         int n = input.read(buffer);  ---> this is never -1 if string is empty """" already 0 and we have infinitive loop !!!
        }
 
For our use case we have applied change in IOHelper to check and directly cover if stream reader produce same (non-valid) response to not produce infinitive loop.

If any questions around reproducing issue please let me know

Best regards,
Zeljko","IBM Websphere Liberty Core 17.0.0.1
IBM Websphere Liberty Core 17.0.0.2
Reproducible using both IBM JDK 8 and Oracle JDK 8",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-21 23:51:46.22,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 12 09:56:09 UTC 2017,,,,,,,0|i3it7j:,9223372036854775807,,,,,,,,,,21/Aug/17 23:51;davsclaus;camel-http is deprecated,"22/Aug/17 09:38;zeljkov;Hi [~davsclaus],
Actually IOHelper is in camel-core but in our case call was made from DefaultHttpBinding in camel-http that is the reason why I have specified camel-http as component.

Thanks,
Zeljko",03/Sep/17 08:21;davsclaus;Try with newer Camel version even so as 2.12.x is EOL.,12/Sep/17 09:21;davsclaus;Okay working on adding a workaround where we regard it as EOL if the first read byte is a zero value,"12/Sep/17 09:56;davsclaus;Copying streams in IOHelper from came-core now regard EOL of data if the first read byte is zero to work around issues on some application servers like IBM WebSphere. This can be turned off by setting JVM system property ""camel.zeroByteEOLEnabled=false"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf - getting TypeConversionException when schema-validation-enabled=true for unwrapped response,CAMEL-11681,13096245,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,chiochuan,chiochuan,19/Aug/17 21:25,12/Sep/17 09:07,13/Mar/19 22:20,12/Sep/17 09:07,2.17.1,,,,,,,,,,,,,,,2.18.5,2.19.4,2.20.0,,,camel-cxf,,,,,,0,newbie,test,,"When ""schema-validation-enabled"" is set to true for unwrapped web service, TypeConversionException is return

org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is instance of org.apache.camel.StreamCache] due java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state",Windows 7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,22/Aug/17 08:08;chiochuan;empty-cxf-body.zip;https://issues.apache.org/jira/secure/attachment/12883076/empty-cxf-body.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-08-22 00:07:59.255,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 12 09:07:12 UTC 2017,,,,,,,0|i3j25b:,9223372036854775807,,,,,,,,,,22/Aug/17 00:07;davsclaus;Can you provide any kind of sample project or unit test that reproduces this. Otherwise its likely that this issue is not getting attention as SOAP-WS is not fun to work with,"22/Aug/17 02:19;chiochuan;sorry for my bad, i was doing the testing with 2.17.0.redhat-630xxx build which i have encounter this issue, when i try with camel-cxf 2.17.0, it was working fine, but not 2.17.1
",04/Sep/17 07:28;davsclaus;Can you provide a sample project or an unit test that reproduces this problem?,"12/Sep/17 08:41;davsclaus;Thanks the test case also fails with latest code.

I think its due that xml reader is being re-used and there is no way to reset it. eg when you turn on schema-validation the source is read one more time due the validation.",12/Sep/17 09:07;davsclaus;Your sample project now passes the test,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ManagedCamelContext.dumpRestsAsXml can fail if default charset is not utf-8,CAMEL-11723,13098204,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,niels@harremoes.dk,niels@harremoes.dk,29/Aug/17 09:09,09/Sep/17 07:53,13/Mar/19 22:20,07/Sep/17 15:02,2.18.4,,,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-core,jmx,,,,,0,easyfix,windows,,"I am trying to access the rest definitions using the swagger servlet. 
My operation description is in Danish and includes the character ""æ"".

Thus, the xml string generated in line 371 of  org.apache.camel.management.mbean.ManagedCamelContext.dumpRestsAsXml
contains the character ""æ"".

In line 376-377, wh have
{code}
       InputStream is = new ByteArrayInputStream(xml.getBytes());
        Document dom = XmlLineNumberParser.parseXml(is, new ...)
{code}
The call to xml.getBytes() uses the default encoding (CP-1252 in my case), which will encode æ as a single byte. The xml parser expects UTF-8 (since the xml starts with an xml declaration specifying encoding=""UTF-8""). 
Therefore, it fails with ""Invalid byte 2 of 3-byte UTF-8 sequence"".

The fix is simple - change xml.getBytes() to xml.getBytes(""UTF-8"");
","Windows, default charset is not UTF-8",,,,,,,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-30 10:23:16.372,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 09 07:53:32 UTC 2017,,,,,,,0|i3je3j:,9223372036854775807,,,,,,,,,,"30/Aug/17 10:23;githubbot;GitHub user pchhabra11 opened a pull request:

    https://github.com/apache/camel/pull/1906

    Fix for CAMEL-11723

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pchhabra11/camel CAMEL-11723

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1906.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1906
    
----
commit 21e2821f46d610be27d26c198a9bda45e75c3e5a
Author: Pulkit <pchhabra@redhat.com>
Date:   2017-08-30T10:10:41Z

    Fix for CAMEL-11723

----
",07/Sep/17 14:41;davsclaus;I had a look and I think we should hardcode the encoding as utf-8 and make the dump module to xml use utf-8. ,"09/Sep/17 07:53;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1906
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Done() called two times in RoutingSlip processor,CAMEL-11690,13096717,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,stefanbo72,stefanbo72,22/Aug/17 12:31,07/Sep/17 12:57,13/Mar/19 22:20,07/Sep/17 12:57,2.17.7,2.18.4,2.19.1,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-core,,,,,,0,,,,"Hi,

I found the following issue, if I use the RoutingSlip with an InterceptStrategy. The done()-method of the interceptor, which intercepts the RoutingSlip, is called twice instead of only once. The attached test case reproduces this behavior.

Best regards

STefan  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,22/Aug/17 12:32;stefanbo72;RoutingSlipWithInterceptorTest.java;https://issues.apache.org/jira/secure/attachment/12883109/RoutingSlipWithInterceptorTest.java,,,,1.0,,,,,,,,,,,,,,,,,,,2017-08-28 07:28:12.546,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 07 10:16:05 UTC 2017,,,,,,,0|i3j50n:,9223372036854775807,,,,,,,,,,28/Aug/17 07:28;STefanBo;Any comments on this?,03/Sep/17 08:10;davsclaus;Dont use InterceptStrategy its being deprecated,"04/Sep/17 07:01;STefanBo;What should I use instead?

And isn't calling the done()-method twice a wrong behavior of the RoutingSlip independent of the InterceptStrategy?","06/Sep/17 10:41;stefanbo72;Can you answer my question, please?","07/Sep/17 07:40;davsclaus;Its being deprecated onwards and intended as internal API from Camel 3.0 onwards. The API is a bit too low-level and complex for end users.

What is your use-case?","07/Sep/17 07:48;stefanbo72;We use it for monitoring the message processing in the camel routes.

But independent of the InterceptStrategy: Shouldn't the done()-method be called only once by an asynchronous processor?","07/Sep/17 08:25;davsclaus;Yeah its being called for the routing slip itself, and each slip endpoint that was sent to, eg in your example there is 1 slip, so its 1 + 1 = 2.

However yes ideally it should only be called when the routing slip itself is done, and be 1. This is how some of the other EIPs do it like recipient list, splitter etc.

But routing slip is implemented on a different foundation than those, and hence why it was different.

",07/Sep/17 10:16;davsclaus;I am currently testing a fix to only call the done once for the interceptor strategy.,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Undertow: transferException option doesn't work,CAMEL-11748,13099841,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,ancosen,ancosen,05/Sep/17 13:41,07/Sep/17 06:58,13/Mar/19 22:20,07/Sep/17 06:57,2.19.2,,,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-undertow,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-07 06:57:06.315,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 07 06:58:24 UTC 2017,,,,,,,0|i3jnnr:,9223372036854775807,,,,,,,,,,"07/Sep/17 06:57;davsclaus;Andrea, I think you have fixed this, so resolving this ticket","07/Sep/17 06:58;ancosen;Yeah, sure. Sorry :-)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JasyptPropertiesParser fails on properties references with default value,CAMEL-11523,13085488,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ronny.aerts.intris,ronny.aerts.intris,07/Jul/17 11:18,06/Sep/17 07:42,13/Mar/19 22:20,06/Sep/17 07:42,2.17.7,2.19.1,,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-jasypt,,,,,,0,,,,"I'm using the JasyptPropertiesParser in combination with the BridgePropertyPlaceholderConfigurer to able to encrypt properties by adding the parser property.
             <beans:property name=""parser"">
                    <!-- define the jasypt properties parser with the given password to be used -->
                    <beans:bean class=""org.apache.camel.component.jasypt.JasyptPropertiesParser"" depends-on=""InitializeProperties"">
                           <beans:property name=""password"" value=""#{IP.getPassword()}""/>
                           <beans:property name=""algorithm"" value=""PBEWITHSHA1ANDRC4_128""/>
                    </beans:bean>
             </beans:property>
This works fine but when I have a ""tris.dlq.folder.process.history:c:/temp/TrisESB"" property with a default value in my xml route, the route creating fails with error:
Caused by: java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. Property with key [tris.dlq.folder.process.history:c:/temp/TrisESB] not found in properties from text: file://{{tris.dlq.folder.process.history:c:/temp/TrisESB}}?fileName=$simple{header.breadcrumbId}-prochist.htm

My log also mentions the parsing of the property.
[TRACE] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Parsing property 'tris.dlq.folder.process.history:c:/temp/TrisESB=null'

It seems that the JasyptPropertiesParser can't handle default properties.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,01/Aug/17 08:53;ronny.aerts.intris;jasypt.rar;https://issues.apache.org/jira/secure/attachment/12879792/jasypt.rar,,,,1.0,,,,,,,,,,,,,,,,,,,2017-07-11 08:47:32.983,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 06 07:23:28 UTC 2017,,,,,,,0|i3h8ov:,9223372036854775807,,,,,,,,,,11/Jul/17 08:47;davsclaus;I wonder if you are able to build an unit test / sample project that reproduces this issue? That would make it easier for us to use and track down the bug/issue.,"13/Jul/17 06:30;ronny.aerts.intris;I'm on holiday for the moment. I'll created a test when I'm back over a few weeks.

vriendelijke groeten,
Ronny Aerts

verstuurd via mijn slimme foon

","01/Aug/17 08:55;ronny.aerts.intris;I attached a test case project.
It will give following output when it runs:
{code}
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.intris.TrisESB.route.test.TrisESBTest
2017-08-01 10:54:03.749 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] ********************************************************************************
2017-08-01 10:54:03.750 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] Testing: TestJasypt(com.intris.TrisESB.route.test.TrisESBTest)
2017-08-01 10:54:03.750 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] ********************************************************************************
2017-08-01 10:54:03.790 [INFO ] [org.springframework.context.support.ClassPathXmlApplicationContext] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@685cb137: startup date [Tue Aug 01 10:54:03 CEST 2017]; root of context hierarchy
2017-08-01 10:54:03.827 [INFO ] [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [test-camel-context.xml]
2017-08-01 10:54:05.233 [INFO ] [org.apache.camel.spring.CamelContextFactoryBean] Bridging Camel and Spring property placeholder configurer with id: properties
2017-08-01 10:54:05.257 [INFO ] [org.apache.camel.spring.SpringCamelContext] Apache Camel 2.19.2 (CamelContext: tester) is starting
2017-08-01 10:54:05.258 [INFO ] [org.apache.camel.management.DefaultManagementStrategy] JMX is disabled
2017-08-01 10:54:05.298 [INFO ] [org.apache.camel.impl.converter.DefaultTypeConverter] Loaded 196 type converters
2017-08-01 10:54:05.356 [DEBUG] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Found property: rrts.pw.plain with value: this is the password to be used.
2017-08-01 10:54:05.356 [TRACE] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Parsing property 'rrts.pw.plain=this is the password'
2017-08-01 10:54:05.364 [DEBUG] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Initialized encryptor using PBEWITHSHA1ANDRC4_128 algorithm and provided password
2017-08-01 10:54:05.368 [DEBUG] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Found property: rrts.pw.encrypted with value: ENC(vNEH1/wOEbwgZ28+1jLzpFlUHTqZm8Zwirq5Ww==) to be used.
2017-08-01 10:54:05.368 [TRACE] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Parsing property 'rrts.pw.encrypted=ENC(vNEH1/wOEbwgZ28+1jLzpFlUHTqZm8Zwirq5Ww==)'
2017-08-01 10:54:05.368 [TRACE] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Decrypting part 'ENC(vNEH1/wOEbwgZ28+1jLzpFlUHTqZm8Zwirq5Ww==)'
2017-08-01 10:54:05.768 [TRACE] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Parsing property 'dummy.property:this is the default value=null'
2017-08-01 10:54:05.769 [INFO ] [org.apache.camel.spring.SpringCamelContext] Apache Camel 2.19.2 (CamelContext: tester) is shutting down
2017-08-01 10:54:05.786 [INFO ] [org.apache.camel.spring.SpringCamelContext] Apache Camel 2.19.2 (CamelContext: tester) uptime 0.528 seconds
2017-08-01 10:54:05.786 [INFO ] [org.apache.camel.spring.SpringCamelContext] Apache Camel 2.19.2 (CamelContext: tester) is shutdown in 0.016 seconds
2017-08-01 10:54:05.788 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] ********************************************************************************
2017-08-01 10:54:05.788 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] Testing done: TestJasypt(com.intris.TrisESB.route.test.TrisESBTest)
2017-08-01 10:54:05.788 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] Took: 2.042 seconds (2042 millis)
2017-08-01 10:54:05.788 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] ********************************************************************************
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.168 sec <<< FAILURE!
TestJasypt(com.intris.TrisESB.route.test.TrisESBTest)  Time elapsed: 2.047 sec  <<< ERROR!
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route test.jasypt.route at: >>> Log[dummy properties with default value={{dummy.property:this is the default value}}] <<< in route: Route(test.jasypt.route)[[From[direct://test.jasypt.entry]] ... because of PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. Property with key [dummy.property:this is the default value] not found in properties from text: dummy properties with default value={{dummy.property:this is the default value}}
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1774)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:138)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:361)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at com.intris.TrisESB.route.test.TrisESBTest.createCamelContext(TrisESBTest.java:34)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:294)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:252)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route test.jasypt.route at: >>> Log[dummy properties with default value={{dummy.property:this is the default value}}] <<< in route: Route(test.jasypt.route)[[From[direct://test.jasypt.entry]] ... because of PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. Property with key [dummy.property:this is the default value] not found in properties from text: dummy properties with default value={{dummy.property:this is the default value}}
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1298)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:204)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1087)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3540)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3271)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:202)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3089)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3085)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3108)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3085)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3022)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:275)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:136)
	... 46 more
Caused by: java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. Property with key [dummy.property:this is the default value] not found in properties from text: dummy properties with default value={{dummy.property:this is the default value}}
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.getPropertyValue(DefaultPropertiesParser.java:271)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.readProperty(DefaultPropertiesParser.java:157)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.doParse(DefaultPropertiesParser.java:116)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.parse(DefaultPropertiesParser.java:100)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:63)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:55)
	at org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer$BridgePropertiesParser.parseUri(BridgePropertyPlaceholderConfigurer.java:262)
	at org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer.parseUri(BridgePropertyPlaceholderConfigurer.java:167)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:230)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:173)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:2411)
	at org.apache.camel.model.ProcessorDefinitionHelper.resolvePropertyPlaceholders(ProcessorDefinitionHelper.java:735)
	at org.apache.camel.model.ProcessorDefinition.makeProcessorImpl(ProcessorDefinition.java:524)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:510)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:226)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1295)
	... 59 more
{code}",05/Sep/17 17:18;davsclaus;Seems like Jasypt is a dying project,"06/Sep/17 07:23;davsclaus;Thanks for the sample project. I reproduced and found the bug, its in the bridge that did not support default values.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
File consumer - Delete orphan lock files on startup may not match a lock file when using include/antInclude filtering,CAMEL-11742,13099452,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,03/Sep/17 13:30,03/Sep/17 14:27,13/Mar/19 22:20,03/Sep/17 14:27,,,,,,,,,,,,,,,,2.19.3,2.20.0,,,,camel-core,,,,,,0,,,,See CAMEL-8970 and reported on mailing list,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-09-03 13:30:26.0,,,,,,,0|i3jl9b:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Chunk Karaf feature doesn't work,CAMEL-11735,13099158,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,ancosen,ancosen,01/Sep/17 07:13,01/Sep/17 07:20,13/Mar/19 22:20,01/Sep/17 07:20,,,,,,,,,,,,,,,,2.20.0,,,,,camel-chunk,karaf,,,,,0,,,,Currently it is using a wrong version of json-smart-action.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-09-01 07:13:43.0,,,,,,,0|i3jjg7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Hdfs2: No need for initialDelay and delay as configuration properties since they are already parameters of ScheduledPollConsumer,CAMEL-11724,13098214,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,ancosen,ancosen,29/Aug/17 09:49,29/Aug/17 10:09,13/Mar/19 22:20,29/Aug/17 10:09,2.18.4,2.19.1,,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-hdfs2,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-08-29 09:49:39.0,,,,,,,0|i3je5r:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-spring-security: The Karaf feature need spring-security-config to be installed,CAMEL-11657,13093688,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,ancosen,ancosen,10/Aug/17 07:07,10/Aug/17 07:11,13/Mar/19 22:20,10/Aug/17 07:11,,,,,,,,,,,,,,,,2.20.0,,,,,camel-spring-security,karaf,,,,,0,,,,Otherwise we won't have the information about XML handlers.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-08-10 07:07:17.0,,,,,,,0|i3imnz:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cookie Handling only works for one cookie,CAMEL-11649,13093116,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,siano,siano,siano,08/Aug/17 10:39,08/Aug/17 13:41,13/Mar/19 22:20,08/Aug/17 13:41,2.19.1,,,,,,,,,,,,,,,2.19.3,2.20.0,,,,camel-ahc,,,,,,0,,,,The cookie handling as implemented with CAMEL-10392 only works for a single cookie sent from the server as the handling of multi-valued headers is wrong,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 08 10:49:48 UTC 2017,,,,,,,0|i3ij5j:,9223372036854775807,,,,,,,,,,"08/Aug/17 10:49;siano;I have pushed the change to master, I will cherry-pick it to camel-2.19.x once the 2.19.2 release is done.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mongodb-gridfs - Created document cannot be read by the new MongoDB GridFS API,CAMEL-11648,13092998,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mgyongyosi,mgyongyosi,07/Aug/17 19:56,08/Aug/17 02:29,13/Mar/19 22:20,08/Aug/17 02:29,2.19.1,,,,,,,,,,,,,,,2.19.3,2.20.0,,,,camel-mongodb,,,,,,0,,,,"The new MongoDB GridFS API (http://mongodb.github.io/mongo-java-driver/3.5/driver/tutorials/gridfs/) throws an exception when my application (not Camel based) iterates over the GridFS documents created by Camel's {{camel-mongodb-gridfs}} component.

The problem: the current GridFSProducer adds the ""metadata"" field regardless it is null. Referring to https://jira.mongodb.org/browse/JAVA-2577 the document should not contain a metadata field if the field is null.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-07 20:14:10.621,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 08 02:29:45 UTC 2017,,,,,,,0|i3iifb:,9223372036854775807,,,,,,,,,,"07/Aug/17 20:14;githubbot;GitHub user mgyongyosi opened a pull request:

    https://github.com/apache/camel/pull/1876

    CAMEL-11648: gridfs skip metadata field if it is null

    PR for https://issues.apache.org/jira/browse/CAMEL-11648

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mgyongyosi/camel camel-mongodb-gridfs-skip-metadata-if-null

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1876.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1876
    
----
commit 71cc69d73af2ddcd87d48dbf31b85b119afee1af
Author: mgyongyosi <gymisi@gmail.com>
Date:   2017-08-07T20:02:49Z

    CAMEL-11648: skip metadata when it is null

----
","08/Aug/17 02:29;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1876
",08/Aug/17 02:29;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extensions: registerExtension method has to avoid final in his declaration to work in CDI,CAMEL-11643,13092820,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,ancosen,ancosen,07/Aug/17 08:52,07/Aug/17 09:37,13/Mar/19 22:20,07/Aug/17 09:37,,,,,,,,,,,,,,,,2.20.0,,,,,camel-core,examples,,,,,0,,,,"For example in the examples camel-example-cdi-properties we are currently getting an error:

{code}
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.camel.example.cdi.properties.CdiPropertiesTest
2017-08-07 10:40:08,567 [main           ] INFO  Version                        - WELD-000900: 2.4.4 (Final)
2017-08-07 10:40:08,726 [main           ] INFO  Bootstrap                      - WELD-000101: Transactional services not available. Injection of @Inject UserTransaction not available. Transactional observers will be invoked synchronously.
2017-08-07 10:40:08,824 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] private org.apache.camel.cdi.CdiCamelExtension.processAnnotatedType(@Observes ProcessAnnotatedType<?>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
2017-08-07 10:40:08,828 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] private org.apache.camel.cdi.CdiCamelExtension.processAnnotatedType(@Observes ProcessAnnotatedType<?>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
2017-08-07 10:40:08,831 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] protected org.apache.deltaspike.core.impl.interceptor.GlobalInterceptorExtension.promoteInterceptors(@Observes ProcessAnnotatedType, BeanManager) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
2017-08-07 10:40:08,839 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] public org.apache.deltaspike.core.impl.config.ConfigurationExtension.findDynamicConfigurationBeans(@Observes ProcessAnnotatedType<?>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
2017-08-07 10:40:08,841 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] protected org.apache.deltaspike.core.impl.message.MessageBundleExtension.detectInterfaces(@Observes ProcessAnnotatedType) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
2017-08-07 10:40:08,846 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] protected org.apache.deltaspike.core.impl.exclude.extension.ExcludeExtension.vetoBeans(@Observes ProcessAnnotatedType, BeanManager) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
2017-08-07 10:40:09,090 [main           ] WARN  Validator                      - WELD-001478: Interceptor class org.apache.deltaspike.core.impl.throttling.ThrottledInterceptor is enabled for the application and for the bean archive /home/oscerd/.m2/repository/org/apache/deltaspike/core/deltaspike-core-impl/1.8.0/deltaspike-core-impl-1.8.0.jar. It will only be invoked in the @Priority part of the chain.
2017-08-07 10:40:09,091 [main           ] WARN  Validator                      - WELD-001478: Interceptor class org.apache.deltaspike.core.impl.lock.LockedInterceptor is enabled for the application and for the bean archive /home/oscerd/.m2/repository/org/apache/deltaspike/core/deltaspike-core-impl/1.8.0/deltaspike-core-impl-1.8.0.jar. It will only be invoked in the @Priority part of the chain.
2017-08-07 10:40:09,091 [main           ] WARN  Validator                      - WELD-001478: Interceptor class org.apache.deltaspike.core.impl.future.FutureableInterceptor is enabled for the application and for the bean archive /home/oscerd/.m2/repository/org/apache/deltaspike/core/deltaspike-core-impl/1.8.0/deltaspike-core-impl-1.8.0.jar. It will only be invoked in the @Priority part of the chain.
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.14 s <<< FAILURE! - in org.apache.camel.example.cdi.properties.CdiPropertiesTest
[ERROR] org.apache.camel.example.cdi.properties.CdiPropertiesTest  Time elapsed: 1.14 s  <<< ERROR!
org.jboss.weld.exceptions.DeploymentException: 
Exception List with 1 exceptions:
Exception 0 :
javax.enterprise.inject.InjectionException: Error adding routes of type [org.apache.camel.example.cdi.properties.Application$HelloRoute] to Camel context [hello]
	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:456)
	at org.apache.camel.cdi.CdiCamelExtension.afterDeploymentValidation(CdiCamelExtension.java:399)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:88)
	at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:144)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:299)
	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:124)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:277)
	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:255)
	at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:269)
	at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:258)
	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:154)
	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:148)
	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)
	at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:35)
	at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)
	at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:487)
	at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:90)
	at org.jboss.weld.environment.se.Weld.initialize(Weld.java:787)
	at org.apache.camel.test.cdi.CamelCdiDeployment$1.evaluate(CamelCdiDeployment.java:71)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:272)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:236)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:386)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:323)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:143)
Caused by: org.apache.camel.RuntimeCamelException: org.jboss.weld.exceptions.UnproxyableResolutionException: WELD-001480: Bean type class org.apache.camel.component.properties.PropertiesComponent is not proxyable because it contains a final method protected final void org.apache.camel.impl.DefaultComponent.registerExtension(org.apache.camel.component.extension.ComponentExtension) - <unknown javax.enterprise.inject.spi.Bean instance>.
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1828)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:52)
	at org.apache.camel.util.CamelContextHelper.lookupPropertiesComponent(CamelContextHelper.java:683)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:2532)
	at org.apache.camel.model.ProcessorDefinitionHelper.resolvePropertyPlaceholders(ProcessorDefinitionHelper.java:735)
	at org.apache.camel.model.RouteDefinitionHelper.initRouteInputs(RouteDefinitionHelper.java:378)
	at org.apache.camel.model.RouteDefinitionHelper.prepareRouteImp(RouteDefinitionHelper.java:298)
	at org.apache.camel.model.RouteDefinitionHelper.prepareRoute(RouteDefinitionHelper.java:270)
	at org.apache.camel.model.RoutesDefinition.route(RoutesDefinition.java:205)
	at org.apache.camel.model.RoutesDefinition.from(RoutesDefinition.java:158)
	at org.apache.camel.builder.RouteBuilder.from(RouteBuilder.java:169)
	at org.apache.camel.example.cdi.properties.Application$HelloRoute.configure(Application.java:45)
	at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:462)
	at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:402)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:383)
	at org.apache.camel.impl.DefaultCamelContext$1.call(DefaultCamelContext.java:1014)
	at org.apache.camel.impl.DefaultCamelContext$1.call(DefaultCamelContext.java:1011)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3235)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:1011)
	at org.apache.camel.impl.DefaultCamelContext$Proxy$_$$_WeldClientProxy.addRoutes(Unknown Source)
	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:443)
	... 31 more
Caused by: org.jboss.weld.exceptions.UnproxyableResolutionException: WELD-001480: Bean type class org.apache.camel.component.properties.PropertiesComponent is not proxyable because it contains a final method protected final void org.apache.camel.impl.DefaultComponent.registerExtension(org.apache.camel.component.extension.ComponentExtension) - <unknown javax.enterprise.inject.spi.Bean instance>.
	at org.jboss.weld.util.Proxies.getUnproxyableClassException(Proxies.java:222)
	at org.jboss.weld.util.Proxies.getUnproxyableTypeException(Proxies.java:179)
	at org.jboss.weld.util.Proxies.getUnproxyableTypeException(Proxies.java:141)
	at org.jboss.weld.bean.proxy.ClientProxyProvider.getClientProxy(ClientProxyProvider.java:239)
	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:779)
	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:808)
	at org.jboss.weld.util.ForwardingBeanManager.getReference(ForwardingBeanManager.java:61)
	at org.jboss.weld.bean.builtin.BeanManagerProxy.getReference(BeanManagerProxy.java:85)
	at org.apache.camel.cdi.BeanManagerHelper.getReference(BeanManagerHelper.java:53)
	at org.apache.camel.cdi.CdiCamelRegistry.lambda$findByTypeWithName$63(CdiCamelRegistry.java:78)
	at java.util.stream.Collectors.lambda$toMap$214(Collectors.java:1321)
	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.Iterator.forEachRemaining(Iterator.java:116)
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at org.apache.camel.cdi.CdiCamelRegistry.findByTypeWithName(CdiCamelRegistry.java:78)
	at org.apache.camel.cdi.CdiCamelRegistry.lookupByName(CdiCamelRegistry.java:58)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:50)
	... 50 more


[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Errors: 
[ERROR]   CdiPropertiesTest.org.apache.camel.example.cdi.properties.CdiPropertiesTest » Deployment
[INFO] 
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0
[INFO] 
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-08-07 08:52:28.0,,,,,,,0|i3ihbj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
property placeholder is not replaced in REST DSL in blueprint context,CAMEL-11636,13092545,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,clauds2x,clauds2x,04/Aug/17 17:51,07/Aug/17 08:22,13/Mar/19 22:20,07/Aug/17 08:22,2.19.1,,,,,,,,,,,,,,,2.19.3,2.20.0,,,,camel-blueprint,rest,,,,,0,,,,"I'm trying to update from Camel 2.16.3 to 2.19.1 and experience issues using properties in the REST DSL in blueprint context.

I have the following config:

{code}
        <rest path=""patient/{patient_id}/events?cutoff_timestamp={cutoff_timestamp}&amp;limit={limit}"" produces=""application/json"" consumes=""application/json"">
            <get bindingMode=""off"">
                <param name=""patient_id"" type=""path"" dataType=""string"" required=""true"" />
                <param name=""cutoff_timestamp"" type=""query"" dataType=""long"" required=""false"" />
                <param name=""limit"" type=""query"" dataType=""integer"" required=""false"" defaultValue=""{{vel.rest.default.rowlimit}}"" />
{code}               
For the param ""limit"" the property {{{{vel.rest.default.rowlimit}}}} used in attribute defaultValue seems not to get replaced as I receive the following exception:
{code}
    java.lang.NumberFormatException: For input string: ""{{vel.rest.default.rowlimit}}""
{code}

----
Originally asked on the mailing list: http://camel.465427.n5.nabble.com/issue-with-property-in-REST-DSL-in-blueprint-context-Camel-2-19-1-td5809573.html
",Apache Karaf 4.0.9 running on OSX 10.12.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-07 07:09:44.983,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 07 08:22:39 UTC 2017,,,,,,,0|i3ifo7:,9223372036854775807,,,,,,,,,,07/Aug/17 07:09;davsclaus;This requires to be pre resolved as the swagger javadoc need to include the resolved value as well.,07/Aug/17 08:22;davsclaus;Thanks for reporting,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Requiredement for date string to be longer than pattern is invalid.,CAMEL-11620,13091446,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,peter.carpenter,peter.carpenter,01/Aug/17 04:36,03/Aug/17 09:19,13/Mar/19 22:20,02/Aug/17 06:37,2.18.3,2.19.1,,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-bindy,,,,,,0,,,,"Came across a bug attempting to parse date fields into a LocalDate using bindy.

LocalDateTimeFormatFactory.parse(String string) calls ""doesStringFitLengthOfPattern(string) which does a string length comparison between the date and the pattern.
This fails if the pattern includes ""X"" for timezone and the date string includes ""+10:00"".  Obviously 5 characters is more than 1 character and therefore this date is rejected incorrectly.
This check should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-01 12:12:01.389,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 03 09:19:27 UTC 2017,,,,,,,0|i3i8xz:,9223372036854775807,,,,,,,,,,01/Aug/17 12:12;pchhabra11;Working on it. ,"01/Aug/17 13:53;githubbot;GitHub user pchhabra11 opened a pull request:

    https://github.com/apache/camel/pull/1860

    ""CAMEL-11620:Requiredement for date string to be longer than pattern …

    Fix For CAMEL-11620


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pchhabra11/camel CAMEL-11620

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1860.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1860
    
----
commit 4b731b921022ff354065bdceb0308354a73bd4d0
Author: Pulkit <pchhabra@redhat.com>
Date:   2017-08-01T13:49:44Z

    ""CAMEL-11620:Requiredement for date string to be longer than pattern is invalid

----
","03/Aug/17 09:19;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1860
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in MBeanInfoAssembler when debug is enabled,CAMEL-11607,13090418,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,sarel,sarel,27/Jul/17 05:02,27/Jul/17 13:59,13/Mar/19 22:20,27/Jul/17 09:45,2.20.0,,,,,,,,,,,,,,,2.18.5,2.19.3,2.20.0,,,camel-core,,,,,,0,,,,"Commit f8e68bac676d9a1a43f1f2744aa467cba77ec169 caused a regression.

An npe is thrown in MBeanInfoAssembler if debug logging is enabled and cache is not initialised when component is stopped.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-27 05:11:03.191,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 27 12:39:37 UTC 2017,,,,,,,0|i3i2mv:,9223372036854775807,,,,,,,,,,"27/Jul/17 05:11;githubbot;GitHub user sarelp opened a pull request:

    https://github.com/apache/camel/pull/1853

    CAMEL-11607: Fix npe in MBeanInfoAssembler when debug is enabled.

    If debug is enabled and cache is not initialised an npe is thrown
    when stopping the component.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sarelp/camel bugfix/CAMEL-11607-fix-npe-in-MBeanInfoAssembler

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1853.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1853
    
----
commit a5a925a3fdb3285dda41c89ff02be5a5f7d33c36
Author: sarelp <sarel@yannitech.com>
Date:   2017-07-27T05:06:36Z

    CAMEL-11607: Fix npe in MBeanInfoAssembler when debug is enabled.
    
    If debug is enabled and cache is not initialised an npe is thrown
    when stopping the component.

----
","27/Jul/17 12:39;githubbot;Github user sarelp closed the pull request at:

    https://github.com/apache/camel/pull/1853
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Accept header is not compliant with IETF RFC-7231,CAMEL-11423,13080796,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sarhaynes,sarhaynes,19/Jun/17 11:45,27/Jul/17 07:53,13/Mar/19 22:20,11/Jul/17 18:53,2.17.7,2.19.0,,,,,,,,,,,,,,2.18.5,2.19.2,2.20.0,,,camel-olingo2,camel-olingo4,,,,,0,,,,"When the ""Accept"" http header is sent to remote system it can contain a ""charset=<charset>"" statement.  According to RFC 7231 this should be in an ""accept-charset"" header.  See https://tools.ietf.org/html/rfc7231#section-5.3.2  https://tools.ietf.org/html/rfc7231#section-5.3.3
This format is acceptable in a ""content-type"" response header.",,,,,,,,,,86400,86400,,0%,86400,86400,,,,,,,,,,CAMEL-11605,CAMEL-11527,,,,10/Jul/17 16:08;sarhaynes;camel-11423.patch;https://issues.apache.org/jira/secure/attachment/12876440/camel-11423.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2017-07-11 13:16:24.374,,,no_permission,,Novice,,,,Patch,,,,,,,,,9223372036854775807,,,Tue Jul 11 18:53:17 UTC 2017,,,Patch Available,,,,0|i3gftj:,9223372036854775807,,,,,,,,,,10/Jul/17 16:08;sarhaynes;Patch to fix issue in camel 2.19.x is attached.,"11/Jul/17 13:16;githubbot;GitHub user sarhaynes opened a pull request:

    https://github.com/apache/camel/pull/1816

    CAMEL-11423 Make camel-olingo2/4 ACCEPT headers RFC-7231 compliant.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sarhaynes/camel CAMEL-11423

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1816.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1816
    
----
commit 2998deee8f32d035b4dbdc1b3c9dae15b982464d
Author: Sean Haynes <s.a.haynes@ieee.org>
Date:   2017-07-11T13:13:43Z

    CAMEL-11423 Make camel-olingo2/4 ACCEPT headers RFC-7231 compliant.

----
",11/Jul/17 15:04;davsclaus;Thanks for the PR,11/Jul/17 15:31;sarhaynes;Minor copy and paste error upon further review.  Corrected version will be checked in.,"11/Jul/17 18:11;githubbot;Github user sarhaynes closed the pull request at:

    https://github.com/apache/camel/pull/1816
","11/Jul/17 18:13;githubbot;GitHub user sarhaynes opened a pull request:

    https://github.com/apache/camel/pull/1819

    CAMEL-11423 Make camel-olingo2 ACCEPT header IETF compliant

    Fixes a minor copy/paste issue missed in initial pull request.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sarhaynes/camel CAMEL-11423

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1819.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1819
    
----
commit 2998deee8f32d035b4dbdc1b3c9dae15b982464d
Author: Sean Haynes <s.a.haynes@ieee.org>
Date:   2017-07-11T13:13:43Z

    CAMEL-11423 Make camel-olingo2/4 ACCEPT headers RFC-7231 compliant.

commit df6d6e3ac66bde965ddf28ed81c9aeb5833181e1
Author: Sean Haynes <s.a.haynes@ieee.org>
Date:   2017-07-11T15:55:00Z

    Merge branch 'CAMEL-11423' of https://github.com/sarhaynes/camel.git into CAMEL-11423

commit f2c8348a8fbc7fcd7a57dad1bbf787b5869eb459
Author: Sean Haynes <s.a.haynes@ieee.org>
Date:   2017-07-11T16:08:02Z

    CAMEL-11423 Fix minor copy/paste issue.

----
","11/Jul/17 18:53;githubbot;Github user sarhaynes closed the pull request at:

    https://github.com/apache/camel/pull/1819
",,,,,,,,,,,,,,,,,,,,,,,,,,
Cant run camel zipkin example with latest zipkin-server,CAMEL-11549,13087608,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,kearls,cipous,cipous,17/Jul/17 14:55,18/Jul/17 13:19,13/Mar/19 22:20,18/Jul/17 13:19,2.18.2,,,,,,,,,,,,,,,2.20.0,,,,,camel-zipkin,,,,,,0,,,,"Follow steps in example: https://github.com/apache/camel/tree/camel-2.18.x/examples/camel-example-zipkin

This will download zipkin version 1.28.1 : zipkin-server-1.28.1

Unfortunately  both services wont start with `Connection refused: connect` exception.

When using zipkin-server-1.19.3 it works somehow.

I have tried latest camel 2.20 and 2.18 versions and it wont help. Also tried to change default port, no luck.

It could be because Scribe collector is disabled by default: https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#scribe-collector",both windows and linux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 17 15:29:48 UTC 2017,,,,,,,0|i3hlpb:,9223372036854775807,,,,,,,,,,"17/Jul/17 15:29;cipous;This is the start command which works

{code:java}
java -DSCRIBE_ENABLED=true -jar zipkin-server-1.28.1-exec.jar
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel File Consumer fails when doneFileName contains '$',CAMEL-11524,13085756,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,saycat,saycat,09/Jul/17 08:02,17/Jul/17 05:39,13/Mar/19 22:20,17/Jul/17 05:37,2.18.2,,,,,,,,,,,,,,,2.18.5,2.19.2,2.20.0,,,camel-core,,,,,,0,,,,"I have running a blueprint file with a camel context that has the following:


{code:xml}
         <from uri=""file:///{{backupFolder}}?doneFileName=${file:name}.4camel&amp;recursive=true&amp;delete=true""/>
{code}

This causes Camel to throw the following exception when I receive files with names of the following form: *YY049608$SQLEXPRESS_TEST1_FULL_20170709_160016.bak*

Most likely the '$' in the name is the problem. Is there any way to escape it?

{noformat}
2017-07-09 15:33:03,496 | WARN  | %5Cbackup-folder | FileConsumer                     | 46 - org.apache.camel.camel-core - 2.18.2 | Consumer Consumer[file:///C:%5CUsers%5C300227639%5CDesktop%5Colivia-demo%5Cassembly%5Cdeployables%5C..%5Cdata%5Cbackup-folder?delete=true&doneFileName=%24%7Bfile%3Aname%7D.done&recursive=true] failed polling endpoint: file:///C:%5CUsers%5C300227639%5CDesktop%5Colivia-demo%5Cassembly%5Cdeployables%5C..%5Cdata%5Cbackup-folder?delete=true&doneFileName=%24%7Bfile%3Aname%7D.done&recursive=true. Will try again at next poll. Caused by: [java.lang.IllegalArgumentException - Illegal group reference]
java.lang.IllegalArgumentException: Illegal group reference
        at java.util.regex.Matcher.appendReplacement(Matcher.java:857)[:1.8.0_101]
        at java.util.regex.Matcher.replaceFirst(Matcher.java:1004)[:1.8.0_101]
        at java.lang.String.replaceFirst(String.java:2178)[:1.8.0_101]
        at org.apache.camel.component.file.GenericFileEndpoint.createDoneFileName(GenericFileEndpoint.java:1301)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.GenericFileConsumer.isMatched(GenericFileConsumer.java:670)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.GenericFileConsumer.isValidFile(GenericFileConsumer.java:545)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.FileConsumer.pollDirectory(FileConsumer.java:114)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.FileConsumer.pollDirectory(FileConsumer.java:107)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.FileConsumer.pollDirectory(FileConsumer.java:107)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.FileConsumer.pollDirectory(FileConsumer.java:107)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:132)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:175)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:102)[46:org.apache.camel.camel-core:2.18.2]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_101]
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)[:1.8.0_101]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)[:1.8.0_101]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)[:1.8.0_101]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_101]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_101]
        at java.lang.Thread.run(Thread.java:745)[:1.8.0_101]
{noformat}

Thanks, Saycat","* Java8
* Camel 2.18.2
* Karaf 4.0.9
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-09 08:11:37.907,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 17 05:39:44 UTC 2017,,,,,,,0|i3habz:,9223372036854775807,,,,,,,,,,"09/Jul/17 08:11;davsclaus;No there is not, your workaround is to not use $ in the file name, which also is a bad habit to do so.

The source code needs to be patched where you need to quote the file name in the GenericFileEndpoint method via java.util.regex.Matcher#quoteReplacement. You are welcome to work on a github PR to fix this","09/Jul/17 08:22;saycat;Hi Claus
Thanks for the response. The source of the '$' is Ola Hallengren's SQL maintenance script and that in turn is escaping a '\' in a database engine name. 
It seems like a better idea to fix the Camel code and make it more robust. 

I will look into providing a patch for this.

Regards, Saycat","15/Jul/17 05:35;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1823

    CAMEL-11524-Add quoteReplacement

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11524

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1823.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1823
    
----
commit f8cb4c3a2ff3cc5b15346c3d78f7f9bb1c22520b
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-07-15T05:33:59Z

    CAMEL-11524-Add quoteReplacement

----
","17/Jul/17 05:39;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1823
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple language - comparison againist negative value fails with unknown token,CAMEL-11533,13086257,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,onders,onders,11/Jul/17 13:31,13/Jul/17 12:12,13/Mar/19 22:20,13/Jul/17 12:12,,,,,,,,,,,,,,,,2.18.5,2.19.2,2.20.0,,,camel-core,,,,,,0,,,,"{code}
from(""seda:test"")
     .choice()
        .when()
           .simple(""${in.body.someval} == -1}"").to(""mock:mock1"")
        .otherwise()
           .to(""mock:mock2"")
        .endChoice();
{code}

ends with 

org.apache.camel.language.simple.types.SimpleIllegalSyntaxException: Binary operator == does not support token - 

this can be improved to note - sign",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-12 07:42:24.58,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 13 12:12:45 UTC 2017,,,,,,,0|i3hdf3:,9223372036854775807,,,,,,,,,,"12/Jul/17 07:42;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1820

    CAMEL-11533 - note ""-"" sign doing binary comparison against negative …

    …value

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11533

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1820.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1820
    
----
commit 7f6a913f8a21300a7ffbadc7c3203749e11b13bf
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-07-12T04:40:16Z

    CAMEL-11533 - note ""-"" sign doing binary comparison against negative value

----
",12/Jul/17 17:38;davsclaus;Nice catch. I think we should backport this to the two other branches. ,"13/Jul/17 12:12;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1820
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Unable to disable ProducerCache by setting cacheSize=""-1""",CAMEL-11540,13086682,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,saravanakumar,saravanakumar,12/Jul/17 19:37,13/Jul/17 06:38,13/Mar/19 22:20,13/Jul/17 06:32,2.19.1,,,,,,,,,,,,,,,2.18.5,2.19.2,2.20.0,,,camel-core,,,,,,0,,,,"It is not possible to disable ProducerCache for camel-rabbitmq, camel-netty4, camel-netty and camel-jms producers.

For example, while trying to turn off activemq ProducerCache like:

{code}<wireTap uri=""activemq:foo"" cacheSize=""-1"" />{code}

results in error :

{code}java.util.concurrent.RejectedExecutionException
    at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:144){code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-12 19:41:52.725,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 13 06:38:25 UTC 2017,,,,,,,0|i3hg0v:,9223372036854775807,,,,,,,,,,"12/Jul/17 19:41;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/1821

    CAMEL-11540: Fixed issue with turning off ProducerCache

    ConcurrentLinkedHashMap attempts to evict entries when the max capacity is zero, eventually the service is stopped. This results in camel-netty, camel-netty4, activemq and rabitmwq producers unable to disable ProducerCache.
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1821.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1821
    
----
commit 34e416802f3e9b3707d0efacae558a55bf1f7b27
Author: Saravanakumar Selvaraj <ssaravan@ssaravan.pnq.csb>
Date:   2017-07-12T19:34:53Z

    CAMEL-11540: Fixed issue with turning off ProducerCache

----
","13/Jul/17 06:38;githubbot;Github user saravanakumar1987 closed the pull request at:

    https://github.com/apache/camel/pull/1821
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
undertown consumer : consumer silently fails to start if manually started after a failure,CAMEL-11537,13086590,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,12/Jul/17 14:04,13/Jul/17 05:12,13/Mar/19 22:20,13/Jul/17 05:12,,,,,,,,,,,,,,,,2.19.2,2.20.0,,,,camel-undertow,,,,,,0,,,,If camel-undertown consumer fails to start (i.e. because of address is already in use) a subsequent manual start of the route seems to succeed but it doesn't as the consumer does not handle the unchecked exception Undertown.start() may throw (!),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-12 17:29:40.691,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 13 05:12:01 UTC 2017,,,,,,,0|i3hfgf:,9223372036854775807,,,,,,,,,,12/Jul/17 17:29;davsclaus;Can you backport this to 2.19.x and 2.18.x branches,12/Jul/17 17:51;lb;I will,13/Jul/17 05:12;lb;Not applicable to 2.18.x,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add an Mvc Actuator endpoint for exposing Camel routes,CAMEL-11518,13085191,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,06/Jul/17 11:06,06/Jul/17 12:16,13/Mar/19 22:20,06/Jul/17 12:16,,,,,,,,,,,,,,,,2.20.0,,,,,camel-spring-boot,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-07-06 11:06:49.0,,,,,,,0|i3h6vj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel bean binding issues,CAMEL-11511,13084632,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,aldettinger,aldettinger,04/Jul/17 21:41,05/Jul/17 10:59,13/Mar/19 22:20,05/Jul/17 08:35,,,,,,,,,,,,,,,,2.20.0,,,,,camel-core,,,,,,0,,,,"Tests below show 2 issues in the bean binding:

{code:java}
public class PrivatePackageClassBeanInfoTest extends CamelTestSupport {

    @EndpointInject(uri = ""mock:result"")
    protected MockEndpoint mockResult;

    public static interface IA {
        public String method();
    }

    public static interface IB extends IA {
        public String method1();
    }

    class C implements IB {
        @Override
        public String method() {
            return ""C.method() has been called"";
        }

        @Override
        public String method1() {
            return ""C.method1() has been called"";
        }
    }

    public static interface IBC {
        public String method();
    }

    class D {
        public String method() {
            return ""D.method() has been called"";
        }
    }

    public class E extends D implements IBC {
    }

    @Test
    public void getInterfaceMethodsMessUpWithMultipleLevelOfInterface() throws InterruptedException {
        mockResult.expectedBodiesReceived(""C.method() has been called"");
        template.sendBodyAndProperty(""direct:test"", """", ""myObject"", new C());
        mockResult.assertIsSatisfied();
    }

    @Test
    public void interfaceMethodImplementedByPackagePrivateUpperClassFails() throws InterruptedException {

        System.out.println(Modifier.isPublic(E.class.getModifiers()));

        mockResult.expectedBodiesReceived(""D.method() has been called"");
        template.sendBodyAndProperty(""direct:test"", """", ""myObject"", new E());
        mockResult.assertIsSatisfied();
    }

    @Override
    public RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:test"").setBody(simple(""${exchangeProperty.myObject.method}"")).to(mockResult);
            }
        };
    }
}
{code}

Below messages are logged:
{noformat}
logged:org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: method on null due to: org.apache.camel.RuntimeExchangeException: IllegalAccessException occurred invoking method: public java.lang.String PrivatePackageClassBeanInfoTest$D.method() using arguments: [] on the exchange: Exchange[]
{noformat}

{noformat}
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: method on null due to: org.apache.camel.RuntimeExchangeException: IllegalAccessException occurred invoking method: public java.lang.String PrivatePackageClassBeanInfoTest$C.method() using arguments: [] on the exchange: Exchange[]
{noformat}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-04 21:53:35.677,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 05 10:59:42 UTC 2017,,,,,,,0|i3h3fz:,9223372036854775807,,,,,,,,,,"04/Jul/17 21:53;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1804

    CAMEL-11511: Proposal to enhance the `BeanInfo` introspection in 2 cases

    Proposal to enhance the `BeanInfo` introspection in 2 cases:
    - A package private class implementing a 2 hop interface method
    - A public class implementing an interface method by an override from a package private class
    
    More info in [CAMEL-11511](https://issues.apache.org/jira/browse/CAMEL-11511).


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1804.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1804
    
----
commit 723a375e3a7f9c96659c30b5ae9504a4e1eabdbe
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-07-04T20:14:35Z

    Corrected issues in BeanInfo introspection

commit 491f011f89dc7feccc282cfb5009956bbaf8d290
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-06-29T16:26:48Z

    Implemented 2 tests showing issues in BeanInfo

----
",05/Jul/17 08:35;davsclaus;Thanks,"05/Jul/17 10:59;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/1804
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The consumer endpoint for Twitter component timeline/user doesn't poll the tweets even if the type is set to polling and delay attribute doesn't work,CAMEL-11510,13084529,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,chirag0103,chirag0103,04/Jul/17 12:09,05/Jul/17 09:27,13/Mar/19 22:20,05/Jul/17 09:27,2.16.2,,,,,,,,,,,,,,,2.18.5,2.19.2,2.20.0,,,camel-twitter,,,,,,0,,,,When we try to get the tweets from timeline of a user using the consumer endpoint timeline/user of the Twitter component. It only gets first set of Tweets 20 tweets at max and later doesn't poll for the rest of them even though the type is given as polling.,Any machine,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-04 12:11:52.432,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 05 09:21:34 UTC 2017,,,,,,,0|i3h2t3:,9223372036854775807,,,,,,,,,,04/Jul/17 12:11;davsclaus;Try with newer version of Camel as 2.16.x is EOL,04/Jul/17 12:15;chirag0103;I did try with 2.18.1 too. It doesn't work either.,"04/Jul/17 12:39;chirag0103;Also tried using the version 2.19.0, didn't work. Can you help me out here?","05/Jul/17 09:21;davsclaus;There was an issue in the paging now using the count and page options

But when its fixed you can then retrieve more data, such as 50 etc.
{code}
from(""twitter-timeline:user?type=polling&user=cameltweet&sinceId=1&count=50"")
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Hipchat - Configure via xml is broken,CAMEL-11469,13082958,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,w4tson,w4tson,27/Jun/17 21:38,28/Jun/17 19:37,13/Mar/19 22:20,28/Jun/17 16:32,2.19.1,,,,,,,,,,,,,,,2.18.5,2.19.2,2.20.0,,,camel-hipcat,,,,,,0,,,,"Declaring a hipchat endpoint in XML misconfigures the same component in the DSL. This seems to be because at some point via XML the component URI get's normalized and '//' is introduced.

This means a component of 

{{<to uri=""hipchat:https:myhipchatserver.com:443?authToken?=abc"" />}}

Is actually configured to the default api.hipchat.com.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-27 21:59:43.671,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 28 19:37:01 UTC 2017,,,,,,,0|i3gt53:,9223372036854775807,,,,,,,,,,"27/Jun/17 21:59;githubbot;GitHub user w4tson opened a pull request:

    https://github.com/apache/camel/pull/1793

    CAMEL-11469 Use remainder of uri to parse config

    The configuration now uses the remainder of the uri to parse out the properties. This can now cope with a '//' or not and stops further string manipulation where it isn't needed.
    
    CAMEL-9495 was fixing parsing logic and seemed to knock it out. I'm not super familiar with camel core but it looks like the 'remaining' URI is already being passed in so it seems silly to attempt this again?
    
    Also I had to work hard a bit not to introduce a dependency on spring in order to reproduce this. My work around is to manually load in the route from XML. It's quite clunky the way I've done it. If there's a smoother way, please advise.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/w4tson/camel CAMEL-11469-hipchat-endpoint-uri-problem

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1793.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1793
    
----
commit 202daa5f8145669880c0d7f61e01ae9a3308c249
Author: Paul Watson <paul.watson@pdwtech.com>
Date:   2017-06-27T21:51:15Z

    CAMEL-11469 Use remainder of uri to parse config
    
    The configuration now uses the remainder of the uri to parse out the properties. This can now cope with a '//' or not and stops further string manipulation where it isn't needed

----
",28/Jun/17 16:32;davsclaus;Thanks for the PR,"28/Jun/17 19:37;githubbot;Github user w4tson closed the pull request at:

    https://github.com/apache/camel/pull/1793
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-zipfile dataformat cannot remove successfully processed files,CAMEL-11454,13082466,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,apailhes,apailhes,26/Jun/17 10:23,28/Jun/17 16:53,13/Mar/19 22:20,28/Jun/17 15:49,2.18.3,,,,,,,,,,,,,,,2.19.2,2.20.0,,,,camel-zipfile,,,,,,0,,,,"When creating a route as follows:
{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:camel=""http://camel.apache.org/schema/spring""
  xmlns:context=""http://www.springframework.org/schema/context"" xmlns:util=""http://www.springframework.org/schema/util""
  xsi:schemaLocation=""
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
          http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd"">

  <bean id=""zipFileDataFormat"" class=""org.apache.camel.dataformat.zipfile.ZipFileDataFormat"">
    <property name=""usingIterator"" value=""true"" />
  </bean>

  <camelContext xmlns=""http://camel.apache.org/schema/spring"" streamCache=""true"">
    <route>
      <from uri=""file:C:/camelTest/in"" />
      <unmarshal ref=""zipFileDataFormat"" />
      <split streaming=""true"">
        <simple>${body}</simple>
        <log loggingLevel=""INFO"" message=""$simple{header.zipFileName}"" />
        <to uri=""file:C:/camelTest/xml"" />
      </split>
      <log loggingLevel=""INFO"" message=""$simple{file:name} Succesful processed"" />
    </route>
  </camelContext>
</beans>
{code}

the renaming of the file fails with 
{code}
Renaming file from 'C:\camelTest\in\20161201T0030Z_1D_BE00_EQ.zip' to 'C:\camelTest\in\.camel\20161201T0030Z_1D_BE00_EQ.zip' failed: Cannot delete file 'C:\camelTest\in\20161201T0030Z_1D_BE00_EQ.zip' after copy succeeded
{code}
The file stays in input folder and gets processed over and over again.

h2. Investigation
Problem only occurs if:
* you try to move the file at the end of the exchange (not with noop but with delete, for example)
* if ZipFile dataformat is used (not with ZipSplitter)
* if usingIterator is true (not if false and Zip file with 1 entry)

It's because in org.apache.camel.dataformat.zipfile.ZipIterator constructor:
{code}
        InputStream inputStream = inputMessage.getBody(InputStream.class);
{code}
will create a new input stream instead of using the one already opened: inputStream parameter when using org.apache.camel.dataformat.zipfile.ZipFileDataFormat#unmarshal.
This one won't be closed and you won't be able to release the resource unless you kill the process.

So, two solutions:
* close the inputStream parameter in org.apache.camel.dataformat.zipfile.ZipFileDataFormat#unmarshal before using ZipIterator constructor
* use inputStream parameter instead of creating a new one when using dataformat (that's the implementation provided in the pull request)",Windows 7 x64,,,,,,,,,,,,,,,,,,,CAMEL-11120,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-26 10:44:59.213,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 28 16:53:05 UTC 2017,,,,,,,0|i3gq47:,9223372036854775807,,,,,,,,,,"26/Jun/17 10:44;githubbot;GitHub user adioss opened a pull request:

    https://github.com/apache/camel/pull/1785

    CAMEL-11454 use provided input stream when unmarshalling instead of creating a new one

    see JIRA ticket for more information (investigation part)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adioss/camel CAMEL-11454

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1785.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1785
    
----
commit e1e07cf886c4bea71b94a3f6c7170e7ad7ddb3b3
Author: Adrien PAILHES <apailhes@axway.com>
Date:   2017-06-26T10:43:12Z

    CAMEL-11454 use provided input stream when unmarshalling instead of creating a new one

----
",28/Jun/17 15:49;davsclaus;Thanks for the PR,"28/Jun/17 16:53;githubbot;Github user adioss closed the pull request at:

    https://github.com/apache/camel/pull/1785
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel-Core: DefaultShutdownStrategy, pass the logInflightExchangesOnTimeout to the ShutdownTask",CAMEL-11470,13083043,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,ancosen,ancosen,28/Jun/17 07:24,28/Jun/17 07:52,13/Mar/19 22:20,28/Jun/17 07:52,,,,,,,,,,,,,,,,2.20.0,,,,,camel-core,,,,,,0,,,,"Actually we have the logInflightExchangesOnTimeout set to true as default:

https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultShutdownStrategy.java#L126

in the ShutdownTask the parameter is forced to false and then if you do not enable debug logging it won't log the inflight exchanges details.

https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultShutdownStrategy.java#L631",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-06-28 07:24:05.0,,,,,,,0|i3gtnz:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-bindy tests fail depending on the locale,CAMEL-11467,13082926,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gnt,gnt,gnt,27/Jun/17 19:41,27/Jun/17 22:40,13/Mar/19 22:20,27/Jun/17 22:40,,,,,,,,,,,,,,,,2.20.0,,,,,,,,,,,0,,,,"I end up with the following:
{code}
[ERROR] Failures: 
[ERROR] org.apache.camel.dataformat.bindy.fixed.BindyMarshallUnmarshallWithDefaultValueTest.testMarshallMessage(org.apache.camel.dataformat.bindy.fixed.BindyMarshallUnmarshallWithDefaultValueTest)
[ERROR]   Run 1: BindyMarshallUnmarshallWithDefaultValueTest.testMarshallMessage:56 mock://resultMarshal Body of message: 0. Expected: <10A9     JohnDoe  ISINXD12345678BUYShare000002500.45USD01-08-2009          
> but was: <10A9     JohnDoe  ISINXD12345678BUYShare000002500,45USD01-08-2009          
>
[ERROR]   Run 2: BindyMarshallUnmarshallWithDefaultValueTest.testMarshallMessage:56 mock://resultMarshal Body of message: 0. Expected: <10A9     JohnDoe  ISINXD12345678BUYShare000002500.45USD01-08-2009          
> but was: <10A9     JohnDoe  ISINXD12345678BUYShare000002500,45USD01-08-2009          
>
[ERROR]   Run 3: BindyMarshallUnmarshallWithDefaultValueTest.testMarshallMessage:56 mock://resultMarshal Body of message: 0. Expected: <10A9     JohnDoe  ISINXD12345678BUYShare000002500.45USD01-08-2009          
> but was: <10A9     JohnDoe  ISINXD12345678BUYShare000002500,45USD01-08-2009          
>
{code}

My system decimal separator is set to ',' instead of '.' which causes the failures.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-27 21:15:54.772,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 27 21:26:11 UTC 2017,,,,,,,0|i3gsxz:,9223372036854775807,,,,,,,,,,"27/Jun/17 21:15;onders;I suppose there is a workaround to set either system locale or jvm args to set.

eg:
https://stackoverflow.com/questions/8809098/how-do-i-set-the-default-locale-for-my-jvm","27/Jun/17 21:26;gnt;Yes, and no.  I have a fix to set the system properties, as they need to be set for surefire VM.  I'm just running the full build before committing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug using file endpoint probeContentType and preMove attributes together causes Exchange.FILE_CONTENT_TYPE to get dropped. (2.19.0) ,CAMEL-11437,13081997,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,dr_hoffman,dr_hoffman,23/Jun/17 04:48,27/Jun/17 06:09,13/Mar/19 22:20,24/Jun/17 21:04,2.19.0,,,,,,,,,,,,,,,2.19.2,2.20.0,,,,camel-core,,,,,,0,,,,"We have a route:

{quote}
from(""file:inbox?probeContentType=true&preMove=inprogress/$\{file:name}&renameUsingCopy=true"")
        .transacted()
        .bean(MimeTypeParser.class, ""populateFileTypeHeaderFields"")
        .to(""seda:somewhere"")
{quote} 
     
The probeContentType executes before preMove & renameUsingCopy and correctly sets the Exchange.FILE_CONTENT_TYPE header.

The problem happens during the preMove & renameUsingCopy part where GenericFileExpressionRenamer calls the GenericFile method GenericFile<T> copyFrom(GenericFile<T> source).

This ""copy constructor"" method does not copy the header Exchange.FILE_CONTENT_TYPE, nor does it preserve the value of the GenericFile probeContentType field.

The class GenericFileRenameProcessStrategy calls GenericFileExpressionRenamer from the method begin() which in turn calls GenericFile.bindToExchange(Exchange exchange).

GenericFile.bindToExchange() clears all ""CamelFile*"" headers and then calls GenericFile.populateHeaders(GenericFileMessage<T> message) which would call Files.probeContentType(Path path) if the GenericFile probeContentType field weren't now false.

When our route gets to the MimeTypeParser bean the ""CamelFileContentType"" header is lost, and that is what we are looking for.

One work-around is to put something like this between .transacted() and the .bean():
{quote}
.process(exchange ->  \{
     Path path = exchange.getIn().getBody(File.class).toPath();
     exchange.getIn().setHeader(Exchange.FILE_CONTENT_TYPE, Files.probeContentType(path));
})
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-23 09:26:37.896,,,no_permission,,,,,http://camel.465427.n5.nabble.com/Bug-using-File-endpoint-probeContentType-and-preMove-attributes-together-causes-Exchange-FILE-CONTEN-td5805088.html,,,,,,,,,,9223372036854775807,,,Tue Jun 27 06:09:27 UTC 2017,,,,,,,0|i3gn7r:,9223372036854775807,,,,,,,,,,"23/Jun/17 09:26;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1781

    CAMEL-11437 - probeContentType and preMove attributes causes Exchange…

    ….FILE_CONTENT_TYPE to get dropped
    
    This is a very specific fix for the issue.
    
    Better solution would be passing endpoint where bindToExchange method call done on GenericFile. I guess the design may need such a change on GenericFile. because in populateHeaders method there are specific conditions tied to FileEndpoint properties which are not set when concrete instances of GenericFileProcessStrategy are created without the settings bound to endpoint like GenericFileRenameProcessStrategy, GenericDeleteProcessStrategy etc. (where probeContentType is lost)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11437

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1781.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1781
    
----
commit 351c6d01585b25967e5a0100a87de4b6d20a5a2e
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-06-23T09:17:22Z

    CAMEL-11437 - probeContentType and preMove attributes causes Exchange.FILE_CONTENT_TYPE to get dropped

----
","24/Jun/17 20:53;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1781
",25/Jun/17 14:28;davsclaus;Onder can you cherry-pick this fix to the 2.19.x branch so the fix is also there. ,25/Jun/17 16:40;onders;[~davsclaus] i think i am at first messed up with cherry pick and then corrected. sorry for commits noise :/,"26/Jun/17 21:50;dr_hoffman;[~onders]; [~davsclaus] - It seems to me that while this will fix the issue it will also cause probeContentType to get called multiple times.  It would appear from the new code that it would get called anytime GenericFileRenameProcessStrategy.begin() gets called, but also anytime GenericFile.bindToExchange(Exchange exchange) gets called and GenericFile.probeConentType == true.  If the route attributes have &probeContentType, &preMove and &move with this solution wouldn't probeContentType get called three times per file on the FileEndpoint.  Probing a file's content time could be fairly costly from a computational point of view, so I'd think you wouldn't want to do it more than absolutely necessarily - imho.","27/Jun/17 06:09;onders;well yes that s for sure that unnecessary multiple probing for the file content is not what we would want, imho, too. however, what you secondly describe is another issue and requires a bit more investigation,imho. initially and what you reported was correct because probeXontentType is not passed right to renameprocess strategy. and that s what we fixed. feel free to lg another jira. we can look into it",,,,,,,,,,,,,,,,,,,,,,,,,,,
Main - setPropertyPlaceholderLocations should be public,CAMEL-11441,13082131,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,23/Jun/17 13:58,23/Jun/17 14:02,13/Mar/19 22:20,23/Jun/17 14:02,2.19.1,,,,,,,,,,,,,,,2.18.5,2.19.2,2.20.0,,,camel-core,,,,,,0,,,,"See
http://camel.465427.n5.nabble.com/setPropertyPlaceholderLocations-for-apache-camel-main-tp5805013.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-06-23 13:58:24.0,,,,,,,0|i3go1j:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
route-reset-stats completion issue,CAMEL-11417,13080313,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,saravanakumar,saravanakumar,16/Jun/17 05:42,16/Jun/17 08:01,13/Mar/19 22:20,16/Jun/17 08:01,2.18.4,,,,,,,,,,,,,,,2.18.5,,,,,karaf,,,,,,0,,,,"It seem to be a small issue in tab completion of Karaf command *route-reset-stats*.
The allowed argument for this command is context but currently it auto completes the routes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-16 05:48:09.903,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 16 08:00:02 UTC 2017,,,,,,,0|i3gcun:,9223372036854775807,,,,,,,,,,"16/Jun/17 05:48;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/1768

    CAMEL-11417: Fixed tab completion for route-reset-stats command

    https://issues.apache.org/jira/browse/CAMEL-11417
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel camel-2.18.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1768.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1768
    
----
commit 4b8fb04d8dbcd7829013ed6b6f6e3e6d8ec9df74
Author: Saravanakumar Selvaraj <saravanakumar.java@gmail.com>
Date:   2017-06-16T05:41:43Z

    CAMEL-11417 : Fixed tab completion for route-reset-stats command

----
","16/Jun/17 06:02;githubbot;Github user saravanakumar1987 closed the pull request at:

    https://github.com/apache/camel/pull/1768
","16/Jun/17 06:30;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/1769

    CAMEL-11417: Fixed tab completion for route-reset-stats command

    https://issues.apache.org/jira/browse/CAMEL-11417
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel camel-2.18.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1769.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1769
    
----
commit 653c8262fbefe366ea0ef34f437712a1ac21eb2d
Author: Saravanakumar Selvaraj <saravanakumar.java@gmail.com>
Date:   2017-06-16T06:28:22Z

    CAMEL-11417: Fixed tab completion for route-reset-stats command

----
","16/Jun/17 08:00;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1769
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-olingo - Potential NPE in getting content-type header,CAMEL-11413,13080037,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,15/Jun/17 09:44,15/Jun/17 11:16,13/Mar/19 22:20,15/Jun/17 11:16,2.19.0,,,,,,,,,,,,,,,2.19.2,2.20.0,,,,camel-olingo2,camel-olingo4,,,,,0,,,,"See nabble
http://camel.465427.n5.nabble.com/Bug-in-camel-olingo2-api-tp5801396.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-06-15 09:44:18.0,,,,,,,0|i3gb5b:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Logic error in authentication type determination,CAMEL-11402,13079443,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,13/Jun/17 10:32,13/Jun/17 10:38,13/Mar/19 22:20,13/Jun/17 10:38,2.19.0,2.20.0,,,,,,,,,,,,,,2.20.0,,,,,camel-salesforce,,,,,,0,,,,With CAMEL-10938 a logic error has been introduced that prevents JWT authentication type from being detected -- it mandates either {{authenticationType}} to be set explicitly to {{JWT}} or {{refreshToken}} to be set (not needed for JWT).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-06-13 10:32:34.0,,,,,,,0|i3g7hj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel maven plugin (2.19.0) downloading catalog when configuration disabled it,CAMEL-11390,13078530,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mcmoulis,mcmoulis,09/Jun/17 07:54,09/Jun/17 09:01,13/Mar/19 22:20,09/Jun/17 08:07,,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,tooling,,,,,,1,camel-maven-plugin,,,"While using below setup still camel catalog attempted to download:

<plugin>
	<groupId>org.apache.camel</groupId>
	<artifactId>camel-maven-plugin</artifactId>
	<version>2.19.0</version>
	<executions>
		<execution>
			<phase>process-classes</phase>
			<goals>
				<goal>validate</goal>
			</goals>
			<configuration>
				<downloadVersion>false</downloadVersion>
				<download>false</download>
				<showAll>true</showAll>
				<logUnparseable>true</logUnparseable>
				<failOnError>true</failOnError>
			</configuration>
		</execution>
	</executions>
</plugin>

Log:
10:51:37 [WARNING] Cannot load version 2.19.0 due Error grabbing Grapes -- [unresolved dependency: org.apache.camel#camel-catalog;2.19.0: not found]
10:51:37 [INFO] Using Camel version: 2.19.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-09 08:07:48.883,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 09 09:01:35 UTC 2017,,,,,,,0|i3g2pj:,9223372036854775807,,,,,,,,,,09/Jun/17 08:07;davsclaus;Thanks for reporting,09/Jun/17 09:01;mcmoulis;Thanks for quick resolution.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential NullPointerException if HTTP client not started and stop was performed,CAMEL-11386,13078311,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,08/Jun/17 13:01,08/Jun/17 21:43,13/Mar/19 22:20,08/Jun/17 13:04,2.19.0,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,camel-salesforce,,,,,,0,,,,With the code in CAMEL-11212 a small issue was introduced that when a HTTP client was not successfully started and attempt was made to stop it would result in NullPointerException.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-08 21:43:26.88,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 08 21:43:26 UTC 2017,,,,,,,0|i3g1cv:,9223372036854775807,,,,,,,,,,"08/Jun/17 21:43;jharby1@icloud.com;THIS PROJECT HAS FOUND IT'S WAY INTO OUR CLASSIFIED DOMAIN 

BE VERY WARY HERE

FBI WARNING - UNITED CYBER CALIPHATE PUTTING AMERICANS ON KILL LISTS",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-metrics Karaf feature can't be installed,CAMEL-11385,13077964,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,ancosen,ancosen,07/Jun/17 11:09,07/Jun/17 11:22,13/Mar/19 22:20,07/Jun/17 11:22,,,,,,,,,,,,,,,,2.20.0,,,,,camel-metrics,,,,,,0,,,,"Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 19.465 sec <<< FAILURE! - in org.apache.camel.itest.karaf.CamelMetricsTest
test(org.apache.camel.itest.karaf.CamelMetricsTest)  Time elapsed: 19.347 sec  <<< ERROR!
org.ops4j.pax.exam.WrappedTestContainerException: [test(org.apache.camel.itest.karaf.CamelMetricsTest): Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-metrics; type=karaf.feature; version=""[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]""; filter:=""(&(osgi.identity=camel-metrics)(type=karaf.feature)(version>=2.20.0.SNAPSHOT)(version<=2.20.0.SNAPSHOT))"" [caused by: Unable to resolve camel-metrics/2.20.0.SNAPSHOT: missing requirement [camel-metrics/2.20.0.SNAPSHOT] osgi.identity; osgi.identity=org.apache.camel.camel-metrics; type=osgi.bundle; version=""[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-metrics/2.20.0.SNAPSHOT: missing requirement [org.apache.camel.camel-metrics/2.20.0.SNAPSHOT] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.fasterxml.jackson.core)(version>=2.8.0)(!(version>=3.0.0)))""]]]
	at org.apache.felix.resolver.ResolutionError.toException(ResolutionError.java:42)
	at org.apache.felix.resolver.ResolverImpl.doResolve(ResolverImpl.java:389)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:375)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:347)
	at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:218)
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:285)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1170)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1069)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-06-07 11:09:46.0,,,,,,,0|i3fz7r:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Creating IgniteComponent from Ignite Instance throws IllegalStateException,CAMEL-11382,13077807,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,g.hodgson,g.hodgson,06/Jun/17 21:39,07/Jun/17 09:11,13/Mar/19 22:20,07/Jun/17 09:11,2.19.0,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,camel-ignite,,,,,,0,,,,"Creating an IgniteComponent from configuration works fine, but when I try and create one from an existing Ignite instance it throws an IllegalStateException when starting the component: ""No configuration resource or IgniteConfiguration was provided to the Ignite component."" 

Looking at the code [here|https://github.com/apache/camel/blob/master/components/camel-ignite/src/main/java/org/apache/camel/component/ignite/AbstractIgniteComponent.java#L77] it appears the lifecycleMode is ignored as it is only set to COMPONENT_MANAGED and cannot be altered outside of the class.  

The following patch sets the lifecycleMode USER_MANAGED when an ignite instance is set, which appears to resolve the problem.
{code}
  diff --git a/components/camel-ignite/src/main/java/org/apache/camel/component/ignite/AbstractIgniteComponent.java b/components/camel-ignite/src/main/java/org/apache/camel/component/ignite/AbstractIgniteComponent.java
  index eaf6583..e9efc79 100644
  --- a/components/camel-ignite/src/main/java/org/apache/camel/component/ignite/AbstractIgniteComponent.java
  +++ b/components/camel-ignite/src/main/java/org/apache/camel/component/ignite/AbstractIgniteComponent.java
  @@ -121,6 +108,7 @@
        */
       public void setIgnite(Ignite ignite) {
           this.ignite = ignite;
  +        lifecycleMode = IgniteLifecycleMode.USER_MANAGED;
       }
   
       /**
{code}

(github pull request to follow)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-06 21:46:55.9,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 07 09:11:06 UTC 2017,,,,,,,0|i3fy8v:,9223372036854775807,,,,,,,,,,"06/Jun/17 21:46;githubbot;GitHub user garyhodgson opened a pull request:

    https://github.com/apache/camel/pull/1742

    CAMEL-11382 - Creating IgniteComponent from Ignite Instance throws IllegalStateException

    Creating an IgniteComponent from configuration works fine, but when I try and create one from an existing Ignite instance it throws an IllegalStateException when starting the component: ""No configuration resource or IgniteConfiguration was provided to the Ignite component.""
    
    Looking at the code it appears the lifecycleMode is ignored as it is only set to COMPONENT_MANAGED and cannot be altered outside of the class.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/garyhodgson/camel CAMEL-11382

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1742.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1742
    
----
commit b99df4512b5403ff17f2250927b69f87a9b6619b
Author: Gary Hodgson <contact@garyhodgson.com>
Date:   2017-06-06T21:43:47Z

    CAMEL-11382 - Creating IgniteComponent from Ignite Instance throws IllegalStateException

----
","07/Jun/17 09:02;githubbot;Github user garyhodgson closed the pull request at:

    https://github.com/apache/camel/pull/1742
",07/Jun/17 09:11;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The ehcache component creates a separate CacheManager per producer route,CAMEL-11266,13071392,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,santa.85@gmail.com,santa.85@gmail.com,12/May/17 00:01,24/May/17 10:14,13/Mar/19 22:20,24/May/17 10:14,2.19.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-ehcache,,,,,,0,,,,"The issue becomes clear if the developers declares more than one producer route with the attached ehcache config: multiple cache managers start contention of file lock and the startup fails.

{code:xml}
 <?xml version=""1.0"" encoding=""UTF-8""?>
<ehcache:config xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
                xmlns:ehcache=""http://www.ehcache.org/v3""
                xsi:schemaLocation=""http://www.ehcache.org/v3 http://www.ehcache.org/schema/ehcache-core-3.3.xsd"">

    <ehcache:persistence directory=""${java.io.tmpdir}/ehcache""></ehcache:persistence>

    <ehcache:cache alias=""cache1"" uses-template=""default-template"">
    </ehcache:cache>

    <ehcache:cache alias=""cache2"" uses-template=""default-template"">
        <ehcache:expiry>
            <ehcache:ttl unit=""minutes"">60</ehcache:ttl>
        </ehcache:expiry>
    </ehcache:cache>

    <ehcache:cache alias=""cache3"" uses-template=""default-template"">
        <ehcache:expiry>
            <ehcache:ttl unit=""minutes"">1</ehcache:ttl>
        </ehcache:expiry>
    </ehcache:cache>

    <ehcache:cache-template name=""default-template"">
        <ehcache:key-type>java.lang.String</ehcache:key-type>
        <ehcache:value-type>java.io.Serializable</ehcache:value-type>

        <ehcache:expiry>
            <ehcache:none/>
        </ehcache:expiry>

        <ehcache:resources>
            <ehcache:heap unit=""entries"">1000</ehcache:heap>
            <ehcache:disk persistent=""true"" unit=""MB"">10</ehcache:disk>
        </ehcache:resources>
    </ehcache:cache-template>
</ehcache:config>
{code}

resulting in:

{code}
Caused by: org.ehcache.StateTransitionException: Couldn't lock rootDir: /var/folders/gf/6psxkr_n7vl_qbhw8mktqqww0000gn/T/ehcache
	at org.ehcache.core.StatusTransitioner$Transition.failed(StatusTransitioner.java:235) ~[ehcache-3.2.2.jar:3.2.2 892e5c56c2a7100866de90dc7c2099a62fb6198b]
	at org.ehcache.core.EhcacheManager.init(EhcacheManager.java:588) ~[ehcache-3.2.2.jar:3.2.2 892e5c56c2a7100866de90dc7c2099a62fb6198b]
	at org.apache.camel.component.ehcache.EhcacheManager.start(EhcacheManager.java:66) ~[camel-ehcache-2.19.0.jar:2.19.0]
	at org.apache.camel.component.ehcache.EhcacheEndpoint.doStart(EhcacheEndpoint.java:65) ~[camel-ehcache-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:236) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1447) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:44) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:31) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:156) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:80) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:364) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:196) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:145) ~[camel-core-2.19.0.jar:2.19.0]
	... 28 common frames omitted
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-13 07:55:05.581,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu May 18 07:05:57 UTC 2017,,,,,,,0|i3evhb:,9223372036854775807,,,,,,,,,,"13/May/17 07:55;davsclaus;Can you investigate with EHCache how this is intended to work? Not sure what we can do at Apache Camel to help with this.

And can you provide a sample project or unit test that reproduces this. We often dont have time to re-create your use-cases on our own","13/May/17 15:01;santa.85@gmail.com;[~cibsen@e-ma.net] as described here (http://www.ehcache.org/documentation/3.3/tiering.html#disk, 2nd information bullet) a disk-tier enabled CacheManager cannot share the same configuration, a persistence directory must be dedicated to a single cache manager. Perhaps it is my lack of understanding of how to use this new component, but having a separate CacheManager and configuration per route seems like a bad design choice, this was not the case with camel-cache (also based on ehcache). I will provide a reduced sample test project that exemplifies the problematic.","15/May/17 09:10;davsclaus;Yeah its better with a sample project to reproduce. And yeah sounds like it should be shared on component level,  like some of the other cache components do. ",16/May/17 12:18;davsclaus;[~lb] wonder if you could take a look as you recently worked on this component,"16/May/17 12:26;lb;Will have a look.
As today you can achieve the same result by setting a custom cache manager via the  ""cacheManager"" option so that every endpoint will use the provided one.","16/May/17 15:11;lb;I digged a little into the code and if we configure the cache manager on component level we'll lose the option to have different endpoint targeting different ehcache instances so the way to go in camel 2.19.x is to tell the endpoints to use a pre-configured cache manager using the cacheManager (I've updated the doc so it should appears soon on the website).

Example:

{code:java}
    from(""direct:cache"")
        .to(""ehcache:my-cache?cacheManager=#myCacheManager&keyType=java.lang.String&valueType=java.lang.String"");
{code}

From camel 2.20 the camel component will expose some methods to set defaults like:

{code:java}
    EhcacheComponent ehcache = new EhcacheComponent();
    ehcache.getConfiguration().setCacheManager(myCacheManager);
{code}

So if you put an object like that in the camel context/registry, you'll be able to write your route as:

{code:java}
    from(""direct:cache"")
        .to(""ehcache:my-cache?keyType=java.lang.String&valueType=java.lang.String"");
{code}","17/May/17 12:12;santa.85@gmail.com;Ok, thanks luca for this clarification and your example! I still think that if we use an autogenerated cacheManager based on XML configuration, we should reuse it for producer routes. The limitation of eh-cache file tier comes from building 2 cacheManagers with the same configuration on the same VM. Perhaps the component should hold a map of configuration url -> cacheManager instance, allowing the users to still leverage customizable cacheManagers per route, but having a less verbose configuration in case of simple applications.","17/May/17 12:22;lb;Yeah that is something I've started working on :)

So I'm adding a CacheManager ""cache"" whose key is the configuration source (i.e. the uri or a Configuration instance, etc) but it requires a little bit of time to make it working properly as there is a change in the life-cycle of the cache manager and because of this behavioural change, it will be available in 2.20.

Note that 2.19.1 will have a way to set the CacheManager on component level like 

{code:java}
    EhcacheComponent ehcache = new EhcacheComponent();
    ehcache.setCacheManager(myCacheManager);

   from(""direct:cache"")
        .to(""ehcache:my-cache?keyType=java.lang.String&valueType=java.lang.String"");
{code}
",18/May/17 07:05;santa.85@gmail.com;Awesome!,,,,,,,,,,,,,,,,,,,,,,,,
camel-test - Using dump route coverage with custom processor may cause NPE,CAMEL-11305,13073718,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/May/17 16:29,21/May/17 16:58,13/Mar/19 22:20,21/May/17 16:58,2.19.0,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,camel-test,,,,,,0,,,,"See nabble
http://camel.465427.n5.nabble.com/NPE-in-org-apache-camel-test-junit4-CamelTestSupport-logCoverageSummary-tp5799968.html

Also the issue is in CamelContext.getManagedProcessor method that should deal with those custom processors",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-05-21 16:29:50.0,,,,,,,0|i3f9sn:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel-Infinispan: Continuous Query, add support for recordUpdated event",CAMEL-11290,13072730,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,ancosen,ancosen,17/May/17 08:38,17/May/17 08:40,13/Mar/19 22:20,17/May/17 08:40,,,,,,,,,,,,,,,,2.20.0,,,,,camel-infinispan,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-05-17 08:38:47.0,,,,,,,0|i3f3pb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ReloadStrategySupport does take changed routeContext files into account,CAMEL-11273,13071749,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ronny.aerts.intris,ronny.aerts.intris,13/May/17 11:24,16/May/17 12:54,13/Mar/19 22:20,16/May/17 12:54,2.19.0,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,camel-core,,,,,,0,easyfix,,,"I saw in the camel 2.19.0 release notes that xml routes could be reloaded automatically which woke my interest (since we only use xml routes and no java at all). I tried it by specifying the fileWatcherDirectory in my pom.xml (in the camel-maven-plugin configuration) and it worked fine for me. I ran it from within eclipse.
The point is that our camelcontext only holds routeContextRef entries and no real routes. I tried again by specifying the location src/main/resources (where the routecontext files are) but this does not seem to work, no updates are seen. 

Claus point me to look in the source code and I saw that ReloadStrategySupport.java holds line 76:
{code}
dom = XmlLineNumberParser.parseXml(new ByteArrayInputStream(xml.getBytes()), null, ""camelContext,routes"", ""http://camel.apache.org/schema/spring"");
{code}
which means that routes from a routeContext are NOT reloaded. 

This could be solved by changing the line to:
{code}
dom = XmlLineNumberParser.parseXml(new ByteArrayInputStream(xml.getBytes()), null, ""camelContext,routes,routeContext"", ""http://camel.apache.org/schema/spring"");
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11275,CAMEL-11274,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-13 11:54:30.57,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Tue May 16 12:54:29 UTC 2017,,,,,,,0|i3exon:,9223372036854775807,,,,,,,,,,13/May/17 11:54;davsclaus;Can you provide a github PR with a fix for this?,"13/May/17 14:17;githubbot;GitHub user ronnyaerts opened a pull request:

    https://github.com/apache/camel/pull/1693

    CAMEL-11273: also process routeContext routes in auto ReloadStrategy

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1693.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1693
    
----
commit 6cb00233e8e94dc9028f9ec02b5580d04de24c66
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:44:54Z

    [maven-release-plugin] prepare release camel-2.19.0

commit 3c909c8ab81109dfb4164427c53770ddf17d2430
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:45:42Z

    [maven-release-plugin] prepare for next development iteration

commit a7144f3b0e3d05165ab783dd02a0c816b0f64b8c
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:27:07Z

    Add schema references for release 2.18.3
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit 11c66e6756adc546955204666bdaa5ba32eb5f2f
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:34:50Z

    Add schema references for release 2.19.0
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit c4d99ac146d5c3a6f9b18ba533c32800de410f91
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2017-05-02T17:39:01Z

    https://stackoverflow.com/questions/43607569/simple-expression-in-sql-stored-component Added colon to Simple and parameter grammar

commit 0aeba63ac67fe9a5d6843df28f4ab060676bcf56
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T12:11:43Z

    Regen

commit 118b37ef4b2a477e7529cd0770a3a4a4135aca89
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-08T08:38:18Z

    CAMEL-11221- 409(which was a wrong default value) should have been 4096

commit a713e3e65a16046ca573f13181e4ae95e18f8946
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T16:09:33Z

    CAMEL-11239: camel-catalog-maven - Remove sl4j logger as it causes tooling classloading pain

commit 93c72f42f3a76a1e9c2c8fee2fa868cf36808461
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-02T13:44:48Z

    CAMEL-11225: Deadlock in component creation

commit 90e2c6a8ba162d358f12fe97c8d244f5fb701485
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-08T13:06:53Z

    CAMEL-11225: fix tests

commit 103b09d1dda7c76b4509b07e10b7b71aeac361ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-10T15:48:57Z

    CAMEL-11258 Use TracerResolver to locate Tracer without modifying code/config

commit f070c4f003341af97e0bdb991cfa15a9faed71b2
Author: Christian Schneider <chris@die-schneider.net>
Date:   2017-05-05T14:32:27Z

    [CAMEL-11229] Avoid recursion in onException

commit 9d65602039ca597e77dbe88a6069a14ab43c6046
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-05-08T09:54:59Z

    CAMEL-11229 Infinite recursion if exception hap...
    
    ...pens inside exception handler
    
    A bit simpler unit test and reformatted source code.

commit 3190a38f916c19e37cd5015359fc3399e3b8eb07
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-10T11:10:57Z

    CAMEL-11229: Add fail-safe in fatal error handler to detect circular looping

commit 133ad76d597661afb30a7e5def068e14e792c899
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:08:37Z

    CAMEL-11229: Add TODO for that weird test which fails run manually but not with mvn clean install

commit b69dd8259187d5ebaea9d0fdf1179c9e676bd971
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:12:28Z

    CAMEL-11229: Polished

commit 7fda1675bf971c2bda5af724a67a1cea3c33aa27
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:55:56Z

    CAMEL-11229: Rename due typo

commit bddcd40ab14ad5d8c8fe124674c1d9ff827d3e95
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T11:17:14Z

    CAMEL-11229: Mark exchange as circulr detected for error handler.

commit 3d82d1711d94c3e631ead12cfdcf3467248b07ab
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-11T13:25:59Z

    CAMEL-11263 - set component options on the endpoint first, and then let endpoint parameters override

commit f8a05797db9ff83f255c9232cfa48380e470b246
Author: Ramu <kkakarla@redhat.com>
Date:   2017-05-12T05:51:45Z

    camel-spring-dm is deprecated :CAMEL-11059

commit 9b2d5aacaf0a73759e075434bfd9151fcd36fa12
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2017-05-12T14:09:52Z

    CAMEL-11269 - fix for URISupport and masking secrets

----
","13/May/17 14:56;ronny.aerts.intris;I'm not familiar yet with pull requests. 

I re-cloned https://github.com/apache/camel.git to my local machine.
I created a pull request on the github website with number 1693. 
I locally executed a ""git pull https://github.com/apache/camel camel-2.19.x"" (as the mail suggest) but this went wrong because of ""Automatic merge failed; fix conflicts and then commit the result."" message. 

I don't know how to continue and my local folder is messed up. ","16/May/17 12:54;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1693
",16/May/17 12:54;davsclaus;Thanks for the patch,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ReloadStrategySupport wrongly logs ""Routes with no id's detected""",CAMEL-11272,13071744,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ronny.aerts.intris,ronny.aerts.intris,13/May/17 10:37,16/May/17 12:49,13/Mar/19 22:20,16/May/17 12:49,2.19.0,,,,,,,,,,,,,,,2.19.1,2.20.0,,,,camel-core,,,,,,0,easyfix,,,"I tested the ""Auto reload XML files"" which is new in camel 2.19.0. 

All my xml routes in the camel context have an id and still I keep getting a ""Routes with no id's detected. Its recommended to assign id's to your routes so Camel can reload the routes correctly."" warning message in my logs when I update the camel context file. 

The ReloadStrategySupport.java says in line 138:
{code}
unassignedRouteIds |= route.hasCustomIdAssigned();
{code}
while this should be (mark the negation):
{code}
unassignedRouteIds |= !route.hasCustomIdAssigned();
{code}

This is a minor issues because this is only a warning message in the logs with no further impact. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-13 11:55:07.13,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Sat May 13 11:55:07 UTC 2017,,,,,,,0|i3exnj:,9223372036854775807,,,,,,,,,,13/May/17 11:55;davsclaus;Can you provide a github PR with a fix,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException while trying to get the Route Status on startup,CAMEL-11234,13069564,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,onimurasame,onimurasame,05/May/17 20:03,16/May/17 10:16,13/Mar/19 22:20,16/May/17 08:26,2.18.2,,,,,,,,,,,,,,,2.18.4,2.19.1,2.20.0,,,camel-core,,,,,,0,,,,"Using a class that extends EventNotifierSupport, we advise a route by adding a processor in between two outputs.

It looks like this

from().processor().bean().processor().processor(advised),to().

To add the adviceWith processor we listen to the routeAdded event and advice the route.

While Camel is starting up there is a line (line number 2966) in the DefaultCamelContext that loops through the available routes for later logging the amount of routes started in the context. This calls for a method ( if(this.getRouteStatus(route.getId()).isStarted()) { ) that may return null if there are no routes running while this is being done, so IT WILL throw a NullPointerException.

Since I'm advising routes while the context is being started, the route gets stopped and restarted, meanwhile the aforementioned method gets called and BUM.... NullPointerException.

Here's the stacktrace:

org.apache.camel.spring.boot.CamelSpringBootInitializationException: java.lang.NullPointerException
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:124) ~[camel-spring-boot-2.18.2.jar:2.18.2]
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:41) ~[camel-spring-boot-2.18.2.jar:2.18.2]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:383) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:337) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:882) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]
	at org.springframework.boot.SpringApplication$run.call(Unknown Source) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48) [groovy-all-2.4.7.jar:2.4.7]
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113) [groovy-all-2.4.7.jar:2.4.7]
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125) [groovy-all-2.4.7.jar:2.4.7]
	at com.my.app.ApplicationMain.main(ApplicationMain.groovy:12) [main/:?]
Caused by: java.lang.NullPointerException
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2943) ~[camel-core-2.18.2.jar:2.18.2]
	at org.apache.camel.spring.boot.RoutesCollector.maybeStart(RoutesCollector.java:141) ~[camel-spring-boot-2.18.2.jar:2.18.2]
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:116) ~[camel-spring-boot-2.18.2.jar:2.18.2]
	... 17 more
",Spring Boot 1.5.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-08 07:55:59.23,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Tue May 16 10:16:10 UTC 2017,,,,,,,0|i3ek7z:,9223372036854775807,,,,,,,,,,"08/May/17 07:55;davsclaus;Contributions as a github PR is welcome to attempt to fix this
http://camel.apache.org/contributing",15/May/17 08:26;prashant2402;I've started to look at fixing this.,"15/May/17 11:44;githubbot;GitHub user prashant2402 opened a pull request:

    https://github.com/apache/camel/pull/1696

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

    Please review the fix.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/prashant2402/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1696.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1696
    
----
commit 087dc6490766d6676dd1ee58f265a1d19cbe1dd7
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 44cf72c2e2d0d7bc32fdfb3961e491385e65ec2a
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T17:07:30Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 95db007a8a502e5e695e556641ebbc8fd0bfab08
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-13T16:20:35Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit eeb70213ce8aaffbf893d77968fdbc27a00f9c7e
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-14T20:49:34Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit c6261fedc94a6156df0d04091ba5c4ce3d0b5dd2
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-15T11:37:29Z

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

----
","15/May/17 12:11;githubbot;Github user prashant2402 closed the pull request at:

    https://github.com/apache/camel/pull/1696
","15/May/17 12:58;githubbot;GitHub user prashant2402 opened a pull request:

    https://github.com/apache/camel/pull/1697

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

    Please review the fix.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/prashant2402/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1697.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1697
    
----

----
",16/May/17 08:26;davsclaus;Thanks for the PR,"16/May/17 10:16;githubbot;Github user prashant2402 closed the pull request at:

    https://github.com/apache/camel/pull/1697
",,,,,,,,,,,,,,,,,,,,,,,,,,
Potential NPE in DefaultUndertowHttpBinding,CAMEL-11264,13071213,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,jamesnetherton,jamesnetherton,11/May/17 15:32,15/May/17 08:18,13/Mar/19 22:20,15/May/17 06:38,2.18.0,2.18.1,2.18.2,2.18.3,2.19.0,,,,,,,,,,,2.18.4,2.19.1,2.20.0,,,camel-undertow,,,,,,0,,,,"There's a potential NPE lurking in {{DefaultUndertowHttpBinding}}. We have this logic:

{code:java}
// we failed due to an exception so print it as plain text
StringWriter sw = new StringWriter();
PrintWriter pw = new PrintWriter(sw);
exception.getCause().printStackTrace(pw);
{code}

Unfortuantely, {{exception.getCause()}} is not always guaranteed to be present and may be {{null}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-12 16:20:36.833,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Mon May 15 08:18:19 UTC 2017,,,,,,,0|i3eudj:,9223372036854775807,,,,,,,,,,"12/May/17 16:20;prashant2402;I would like to work on this please.

Thanks
Prash","12/May/17 16:48;githubbot;GitHub user prashant2402 opened a pull request:

    https://github.com/apache/camel/pull/1691

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

    Please review the fix.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/prashant2402/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1691.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1691
    
----
commit 087dc6490766d6676dd1ee58f265a1d19cbe1dd7
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

----
","15/May/17 08:18;githubbot;Github user prashant2402 closed the pull request at:

    https://github.com/apache/camel/pull/1691
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't return null for getErrors in SalesforceException,CAMEL-11210,13067314,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,27/Apr/17 10:02,28/Apr/17 16:14,13/Mar/19 22:20,28/Apr/17 16:14,,,,,,,,,,,,,,,,2.19.0,,,,,camel-salesforce,,,,,,0,,,,The {{SalesforceException::getErrors}} should not be returning {{null}} {{List<RestError>}} but an empty {{List}} if there {{errors}} field is {{null}}.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-04-27 10:02:07.0,,,,,,,0|i3e6c7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-grpc doesn't terminate channel when producer stops ,CAMEL-11213,13067397,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,dmvolod,dmvolod,27/Apr/17 14:22,28/Apr/17 06:11,13/Mar/19 22:20,28/Apr/17 06:11,,,,,,,,,,,,,,,,2.19.0,,,,,camel-grpc,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-27 14:31:21.937,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 28 06:11:51 UTC 2017,,,,,,,0|i3e6un:,9223372036854775807,,,,,,,,,,27/Apr/17 14:28;dmvolod;This can cause memory leaks,"27/Apr/17 14:31;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/1667

    CAMEL-11213: camel-grpc doesn't terminate channel when producer stops

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-11213

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1667.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1667
    
----

----
","27/Apr/17 14:39;githubbot;Github user dmvolod closed the pull request at:

    https://github.com/apache/camel/pull/1667
",28/Apr/17 06:11;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce verifier should not throw exceptions,CAMEL-11202,13067014,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,26/Apr/17 10:35,27/Apr/17 12:28,13/Mar/19 22:20,26/Apr/17 10:45,2.19.0,,,,,,,,,,,,,,,2.20.0,,,,,camel-salesforce,,,,,,0,,,,"`SalesforceComponentVerifier::verifyConnectivity` throws `RuntimeException` on `Exception`s caught. This makes for a bad contract.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 26 10:45:58 UTC 2017,,,,,,,0|i3e4hj:,9223372036854775807,,,,,,,,,,26/Apr/17 10:45;zregvart;Throwing of the exception is simply removed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-swagger-java: schema objects in definitions could not be referenced ,CAMEL-11088,13059979,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,yangli,yangli,29/Mar/17 09:44,12/Apr/17 11:04,13/Mar/19 22:20,12/Apr/17 11:04,2.17.6,,,,,,,,,,,,,,,2.17.7,,,,,camel-swagger,,,,,,0,,,,"Reproduct steps:
1. we have a type A, and it has a field b with type B.
2. there are two camel rest endpoint a and b, type attribute of endpoint a is A, and type attribute of endpoint of b is B.
3. when RestSwaggerReader.java parse the endpoint a at first, and parse the endpoint b later.
4. in the generated swagger document, the ""schema"" of parameter object of endpoint b could not $ref to the definition object B in definitions module.

Maybe this issue is caused by the code ""oldExt = oldModel.getVendorExtensions().get(""x-className"") == null;"" of appendModels method of RestSwaggerReader.java of camel 2.17.x.

This code has been changed to ""oldExt = oldModel.getVendorExtensions().get(""x-className"") != null;"" of camel 2.18.x.

So I file jira ticket to request to fix this issue in camel 2.17.x too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-29 12:39:52.744,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 12 11:04:05 UTC 2017,,,,,,,0|i3cxpb:,9223372036854775807,,,,,,,,,,"29/Mar/17 12:39;davsclaus;You are welcome to provide a github PR with a backport of this to the 2.17.x branch
http://camel.apache.org/contributing

As the next 2.17.x release is going to be the last so this may otherwise slip this release and you wont have a fix in it.",12/Apr/17 11:04;davsclaus;I was working on the 2.17.x branch and copied over the fix from 2.18.x branch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Undertow: throwExceptionOnFailure doesn't work as expected,CAMEL-11111,13061696,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,scranton,scranton,scranton,05/Apr/17 11:10,10/Apr/17 10:29,13/Mar/19 22:20,10/Apr/17 10:29,2.18.3,,,,,,,,,,,,,,,2.19.0,,,,,camel-undertow,,,,,,0,,,,"When using camel-undertow as a producer and HTTP_RESPONSE_CODE is 404, the producer does NOT throw an exception as expected. Setting throwExceptionOnFailure appears to have no effect.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-05 11:49:33.308,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sun Apr 09 16:01:53 UTC 2017,,,,,,,0|i3d8av:,9223372036854775807,,,,,,,,,,"05/Apr/17 11:49;githubbot;GitHub user scranton opened a pull request:

    https://github.com/apache/camel/pull/1597

    CAMEL-11111: added unit test for throwExceptionOnFailure

    Test case for camel-undertow showing issue, and same test case working in camel-netty4-http

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/scranton/camel CAMEL-11111

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1597.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1597
    
----
commit e493cf03964571497a0a946bad2016ff35f89397
Author: Scott Cranton <scott@cranton.com>
Date:   2017-04-05T11:49:04Z

    CAMEL-11111: added unit test for throwExceptionOnFailure

----
","05/Apr/17 14:02;scranton;Looking at UndertowProducer and UndertowClientCallback, I don't see any code to handle HTTP_RESPONSE_CODE indicating an error. Not clear where or what exception should be thrown. Feels like a response code check when throwExceptionOnFailure=true should happen here - https://github.com/apache/camel/blob/master/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java#L167-L167",05/Apr/17 14:06;scranton;camel-netty4-http appears to check in a similar place - https://github.com/apache/camel/blob/master/components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpProducer.java#L135-L135 - Guessing an UndertowHttpOperationsException would have to be created... Is there a standard base interface for that given all of the camel HTTP producer components?,07/Apr/17 11:13;davsclaus;There is a ticket about making undertow align with the other http components and base it of camel-http-common. But that is more work,"07/Apr/17 11:24;davsclaus;This requires the binding code to support this as its not in that callback, but when parsing the http response and check the HTTP status code","07/Apr/17 11:47;scranton;So my PR just includes a test case showing the issue with camel-undertow, and how camel-netty4-http works doing similar settings of throwExceptionOnFailure. I could probably hack in the code from camel-netty4-http and create a similar NettyHttpOperationsFailureException for camel-undertow to band-aid this. It would only be an issue if many use ProducerTemplates to get the response body back cast as a String or such, and expect any HTTP Response Code > 300 to be thrown as an exception OR if they are using undertow as a producer within a camel route, and again expect an exception to be thrown. I do the Producer Template approach a lot in test cases...

Since we're deprecating camel-http, and encouraging people to use camel-undertow as a producer, that's where I think the expectation that it behaves similar will bite us...

Let me know your thoughts. Like I said, I believe I could quickly hack in something similar to netty4-http that gets my test case to pass...",07/Apr/17 13:35;davsclaus;Yeah we need an UndertowHttpOperationFailureException that does something like the others do with having http status code etc.,"07/Apr/17 13:45;scranton;Ok, will try to get this done this weekend...","08/Apr/17 10:17;githubbot;Github user scranton closed the pull request at:

    https://github.com/apache/camel/pull/1597
","08/Apr/17 22:43;githubbot;GitHub user scranton opened a pull request:

    https://github.com/apache/camel/pull/1608

    CAMEL-11111: implemented throwExceptionOnFailure Producer attribute

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/scranton/camel CAMEL-11111

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1608.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1608
    
----
commit eb4a236e36c4665e6234d72db40d8c7ef4e5d6fb
Author: Scott Cranton <scott@cranton.com>
Date:   2017-04-08T22:42:46Z

    CAMEL-11111: implemented throwExceptionOnFailure attribute for Producer usage

----
","09/Apr/17 15:23;githubbot;Github user scranton closed the pull request at:

    https://github.com/apache/camel/pull/1608
","09/Apr/17 15:27;githubbot;GitHub user scranton opened a pull request:

    https://github.com/apache/camel/pull/1609

    CAMEL-11111: correctly copy response’s headers and body to exception

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/scranton/camel CAMEL-11111

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1609.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1609
    
----
commit 9e09dd4223491215e7b389d1741539b71605a833
Author: Scott Cranton <scott@cranton.com>
Date:   2017-04-09T15:26:32Z

    CAMEL-11111: correctly copy response’s headers and body to exception

----
",09/Apr/17 15:28;scranton;Error response's headers and body were not being copied correctly to HttpOperationsFailedException. Corrected with provided PR,"09/Apr/17 16:01;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1609
",,,,,,,,,,,,,,,,,,,
The searchTerm subjectOrBody breaks the searchTerm unseen,CAMEL-11117,13061873,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ancosen,lionel.palacin@gmail.com,lionel.palacin@gmail.com,05/Apr/17 21:35,06/Apr/17 07:52,13/Mar/19 22:20,06/Apr/17 07:52,2.18.3,,,,,,,,,,,,,,,2.18.4,2.19.0,,,,camel-mail,,,,,,0,,,,"When the two options searchTerm.unseen and searchTerm.subjectOrBody are together, the searchTerm generated looks like that:

(Unseen AND Subject) OR Body. Which is incorrect, the right searchTerm should be: Unseen AND (Subject OR Body). 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-05 21:38:11.683,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 06 07:48:20 UTC 2017,,,,,,,0|i3d9e7:,9223372036854775807,,,,,,,,,,"05/Apr/17 21:38;githubbot;GitHub user lio-p opened a pull request:

    https://github.com/apache/camel/pull/1599

    CAMEL-11117: Fix searchTerm error with unseen and subjectOrBody

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lio-p/camel CAMEL-11117-FIX

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1599.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1599
    
----

----
","06/Apr/17 07:48;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1599
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unhandled ClassCastException if fault detail is not JaxbElement,CAMEL-11099,13061008,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,dfullarton,dfullarton,02/Apr/17 23:59,05/Apr/17 01:37,13/Mar/19 22:20,04/Apr/17 13:33,,,,,,,,,,,,,,,,2.19.0,,,,,camel-soap,,,,,,0,,,,"Hi,

I've been having some issues with handling some SOAP faults that come in with a detail message that is undefined in their WSDL, the result is that they end up as xerces dom elements rather than JAXBElements.

I end up with a pretty ugly message that looks like this : 
{noformat}
java.lang.ClassCastException: com.sun.org.apache.xerces.internal.dom.ElementNSImpl cannot be cast to javax.xml.bind.JAXBElement
	at org.apache.camel.dataformat.soap.Soap11DataFormatAdapter.createExceptionFromFault(Soap11DataFormatAdapter.java:195)
	at org.apache.camel.dataformat.soap.Soap11DataFormatAdapter.doUnmarshal(Soap11DataFormatAdapter.java:170)
	at org.apache.camel.dataformat.soap.SoapJaxbDataFormat.unmarshal(SoapJaxbDataFormat.java:287)
	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:69)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:460)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
{noformat}

It's pretty had to intercept this in the pipeline, so at the moment I've handled parsing the response myself rather than the soap dataformat, but I would like to avoid this in the future as it does require a bit of custom code.

I'll create a PR that demonstrates what I believe is a reasonable workaround.

Cheers,
Daniel
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-03 00:00:53.328,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 05 01:37:51 UTC 2017,,,,,,,0|i3d41z:,9223372036854775807,,,,,,,,,,"03/Apr/17 00:00;githubbot;GitHub user linead opened a pull request:

    https://github.com/apache/camel/pull/1589

    CAMEL-11099: Resolve issue caused by unresolve elements hanging off t…

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/linead/camel soap-fault-error-handling

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1589.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1589
    
----
commit 34edd2cd3edc83b10c4c9bae0518fcf8ca144735
Author: Daniel Fullarton <daniel.fullarton@nab.com.au>
Date:   2017-04-02T23:32:13Z

    CAMEL-11099: Resolve issue caused by unresolve elements hanging off the faul detail

----
",04/Apr/17 13:33;zregvart;Merged to master from [PR#1589|https://github.com/apache/camel/pull/1589],"05/Apr/17 01:37;githubbot;Github user linead closed the pull request at:

    https://github.com/apache/camel/pull/1589
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Soap11DataFormatAdapter throwing exception when using JAXB/JAX-WS generated code,CAMEL-11052,13058413,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,kierans777,kierans777,22/Mar/17 22:48,30/Mar/17 11:26,13/Mar/19 22:20,30/Mar/17 08:27,2.18.3,,,,,,,,,,,,,,,2.19.0,,,,,camel-soap,,,,,,0,soap11,,,"When using WsImport, the structure of the generated Exception class for SOAP Faults have only a two arg constructor generated ie:

{code:java}public MyException(String message, <Type> faultInfo) {}{code}

However in {{Soap11DataFormatAdapter::createExceptionFromFault}} the code is trying to get a reference to the single argument constructor, before it tries to find/use the two argument constructor, which would cause a {{NoSuchMethodException}} to be thrown as no such constructor exits on the class.

The solution is to move the {{messageConstructor}} variable inside the catch block.  So we try to get/use the two arg constructor and if that fails then we try to get/use the single argument constructor, which is the real logic of that try/catch block anyway.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-24 09:02:53.719,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 30 11:26:38 UTC 2017,,,,,,,0|i3co1r:,9223372036854775807,,,,,,,,,,"24/Mar/17 09:02;davsclaus;You are welcome to work on a github PR
http://camel.apache.org/contributing",24/Mar/17 10:30;kierans777;Thanks [~davsclaus]. I've started working on a patch.  Can this issue be assigned to me?,"28/Mar/17 08:35;davsclaus;Kieran sounds good.

You cannot assign ticket as that is for committers and users whom have contribured more patches. Its fine with a comment here that you work on this.

Lets us know how it goes","29/Mar/17 20:11;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1582

    CAMEL-11052-wsimport compatibility

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11052

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1582.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1582
    
----
commit 4650d7a0373f9bd2957df04e1f037a9f5fd0aba3
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-03-29T20:10:23Z

    CAMEL-11052-wsimport compatibility

----
",30/Mar/17 08:27;zregvart;Merged to master from [PR#1582|https://github.com/apache/camel/pull/1582],"30/Mar/17 11:26;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1582
",,,,,,,,,,,,,,,,,,,,,,,,,,,
REST Swagger handling of empty specificationUri,CAMEL-11091,13059998,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,29/Mar/17 11:19,29/Mar/17 12:42,13/Mar/19 22:20,29/Mar/17 12:42,,,,,,,,,,,,,,,,2.19.0,,,,,,,,,,,0,,,,"The REST Swagger component sets the specificationUri to {{""""}} for endpoint uris that in the remaining part start with {{#}}, for instance: {{""petstore:#getPetById""}}. It should not allow empty specificationUris and in this case should use the default {{swagger.json}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-03-29 11:19:14.0,,,,,,,0|i3cxtj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnExceptionDefinition validation ignores redeliveryPolicy field,CAMEL-11080,13059585,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,richaosu,richaosu,28/Mar/17 00:16,28/Mar/17 09:06,13/Mar/19 22:20,28/Mar/17 09:06,2.16.5,,,,,,,,,,,,,,,2.19.0,,,,,camel-core,,,,,,0,features,,,"The OnExceptionDefinition provides DSL methods redeliveryPolicy(...) and redeliveryPolicyRef(...) to configure a reusable RedeliveryPolicy instance. However, the validateConfiguration() method does not include redeliveryPolicy as one of the possible options. Thus, the following trows a IllegalArgumentException:

.onException(IOException.class)
    .redeliveryPolicy(myRedeliveryPolicy)
.end()

Note: The getOrCreateRedeliveryPolicy() creates a new RedeliveryPolicyDefinition() and should get its initial properties from redeliveryPolicy, when the latter is set, methinks.

Note: The getRedeliveryPolicy() and setRedeliveryPolicy(...) act on a RedeliveryPolicyDefinition instead of a RedeliveryPolicy. Bug?

","Linux, Java 1.7",,,,,,,,,10800,10800,,0%,10800,10800,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-28 09:06:41.974,,,no_permission,,Moderate,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 28 09:06:41 UTC 2017,,,,,,,0|i3cv9z:,9223372036854775807,,,,,,,,,,28/Mar/17 09:06;davsclaus;Thanks for reporting,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Undertow Producer : NPE if tryConvertTo fails to convert exchange body to ByteBuffer,CAMEL-11057,13058582,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,23/Mar/17 13:03,23/Mar/17 13:10,13/Mar/19 22:20,23/Mar/17 13:10,,,,,,,,,,,,,,,,2.19.0,,,,,camel-undertow,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-03-23 13:03:20.0,,,,,,,0|i3cp3b:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel spring - spring.schemas file contains unexpaned maven properties in release artefact,CAMEL-11009,13055820,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,niels.bertram,niels.bertram,14/Mar/17 04:43,19/Mar/17 15:32,13/Mar/19 22:20,18/Mar/17 08:57,2.18.0,2.18.1,2.18.2,,,,,,,,,,,,,2.18.4,2.19.0,,,,camel-spring,,,,,,0,,,,"Looking at http://search.maven.org/remotecontent?filepath=org/apache/camel/camel-spring/2.18.2/camel-spring-2.18.2.jar

I can see that file /META-INF/spring.schemas shows non-expanded maven property {{v$&#123;camel.schema.version&#125;}} in the file. This causes loading a route in Karaf fail.

{code}
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
...
http\://camel.apache.org/schema/spring=camel-spring.xsd
http\://camel.apache.org/schema/spring/v${camel.schema.version}=camel-spring-v${camel.schema.version}.xsd
{code}

Ok in 2.17.x and 2.16.x  but broken in 2.18.x releases.

Stack trace from running a camel route in Karaf with camel-spring-2.18.2 installed:

{code}
2017-03-12 23:00:39,527 | WARN  | pool-32-thread-2 | NamespaceHandlerRegistryImpl     | 12 - org.apache.aries.blueprint.core - 1.7.1 | Error registering NamespaceHandler
java.lang.IllegalArgumentException: Illegal character in path at index 40: http://camel.apache.org/schema/spring/v${camel.schema.version}
        at java.net.URI.create(URI.java:852) [?:?]
        at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.getNamespaces(NamespaceHandlerRegistryImpl.java:203) [12:org.apache.aries.blueprint.core:1.7.1]
        at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.registerHandler(NamespaceHandlerRegistryImpl.java:157) [12:org.apache.aries.blueprint.core:1.7.1]
        at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.addingService(NamespaceHandlerRegistryImpl.java:121) [12:org.apache.aries.blueprint.core:1.7.1]
        at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:941) [?:?]
        at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:870) [?:?]
        at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256) [?:?]
        at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229) [?:?]
        at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:901) [?:?]
        at org.apache.felix.framework.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:990) [?:?]
        at org.apache.felix.framework.EventDispatcher.fireEventImmediately(EventDispatcher.java:838) [?:?]
        at org.apache.felix.framework.EventDispatcher.fireServiceEvent(EventDispatcher.java:545) [?:?]
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4557) [?:?]
        at org.apache.felix.framework.Felix.registerService(Felix.java:3549) [?:?]
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348) [?:?]
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:355) [?:?]
        at org.apache.aries.blueprint.spring.SpringExtension.start(SpringExtension.java:78) [202:org.apache.aries.blueprint.spring:0.2.0]
        at org.apache.felix.utils.extender.AbstractExtender$1.run(AbstractExtender.java:265) [202:org.apache.aries.blueprint.spring:0.2.0]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:?]
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:?]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:?]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:?]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:?]
        at java.lang.Thread.run(Thread.java:745) [?:?]
Caused by: java.net.URISyntaxException: Illegal character in path at index 40: http://camel.apache.org/schema/spring/v${camel.schema.version}
        at java.net.URI$Parser.fail(URI.java:2848) ~[?:?]
        at java.net.URI$Parser.checkChars(URI.java:3021) ~[?:?]
        at java.net.URI$Parser.parseHierarchical(URI.java:3105) ~[?:?]
        at java.net.URI$Parser.parse(URI.java:3053) ~[?:?]
        at java.net.URI.<init>(URI.java:588) ~[?:?]
        at java.net.URI.create(URI.java:850) ~[?:?]
        ... 24 more
{code}",any,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-14 08:59:02.294,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sun Mar 19 15:32:39 UTC 2017,,,,,,,0|i3c81j:,9223372036854775807,,,,,,,,,,14/Mar/17 08:59;davsclaus;Can you check the blueprint schema files as well,14/Mar/17 09:00;davsclaus;We can just remove those vX.Y as nobody uses them anyway.,14/Mar/17 12:36;niels.bertram;Just looking through the pom files to find out where the problem lies and can see that same issue also exists in camel-spring-dm.,15/Mar/17 08:11;davsclaus;Can you check camel-blueprint as well,"17/Mar/17 18:35;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1548

    CAMEL-11009: Corrected the generation of the 'spring.schemas' file in camel-blueprint

    This PR proposes a possible fix for [CAMEL-11009](https://issues.apache.org/jira/browse/CAMEL-11009).
    
    Actually, the file `/META-INF/spring.schemas` is filtered during the process-resources phase.
    However, the `camel.schema.version` property is defined too late (during the process-classes phase).
    
    I re-sequenced those steps, and now the file `/META-INF/spring.schemas` is generated as below:
    `http\://camel.apache.org/schema/spring=camel-spring.xsd`
    `http\://camel.apache.org/schema/spring/v2.19=camel-spring-v2.19.xsd`
    
    The fix needs at least maven 3.0.3, but I'm sure build servers are more recent ;)
    If you are ok with the fix, I would then check this issue in camel-blueprint and camel-spring-dm (unless deprecated).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1548.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1548
    
----
commit 23545491c228997f52cfc482af17c5f48fa83348
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-03-13T20:36:49Z

    CAMEL-11000: Issued a simple warning rather than throwing an Exception

commit 649e9cbbed41a6970bc9b5881b53f446531af4ff
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-03-17T16:15:01Z

    Merge remote-tracking branch 'upstream/master'
    
    Merging from upstream/master

commit 1e7763d120e38322db17f9a5fbc4d3ff6b3ac183
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-03-17T18:22:30Z

    CAMEL-11009: Set the camel.schema.version property earlier

----
","18/Mar/17 08:57;davsclaus;Thanks for reporting.

And also thanks for the PR","19/Mar/17 15:32;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/1548
",,,,,,,,,,,,,,,,,,,,,,,,,,
Encoding issues in camel-salesforce-maven-plugin,CAMEL-11015,13056209,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,15/Mar/17 08:09,15/Mar/17 10:14,13/Mar/19 22:20,15/Mar/17 10:14,2.19.0,,,,,,,,,,,,,,,2.19.0,,,,,camel-salesforce,,,,,,0,,,,Test failure on [builds.apache.org#1196|https://builds.apache.org/job/Camel.trunk.fulltest.java8/org.apache.camel.maven$camel-salesforce-maven-plugin/1196/testReport/] show that there could be an encoding issue in {{camel-salesforce-maven-plugin}}.,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11014,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-03-15 08:09:49.0,,,,,,,0|i3cafz:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Option readLockLoggingLevel not working for SFTP changed read lock strategy,CAMEL-12786,13183571,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,dmvolod,kolas,kolas,07/Sep/18 07:23,04/Oct/18 13:12,13/Mar/19 22:20,04/Oct/18 13:12,2.19.0,2.22.0,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-ftp,,,,,,0,,,,"method setReadLockLoggingLevel is not invoked in class SftpProcessStrategyFactory so logging level is always set to default (WARN)

 
{code:java}
else if (""changed"".equals(readLock)) {
    SftpChangedExclusiveReadLockStrategy readLockStrategy = new SftpChangedExclusiveReadLockStrategy();
    Long timeout = (Long) params.get(""readLockTimeout"");
    if (timeout != null) {
        readLockStrategy.setTimeout(timeout);
    }
    Long checkInterval = (Long) params.get(""readLockCheckInterval"");
    if (checkInterval != null) {
        readLockStrategy.setCheckInterval(checkInterval);
    }
    Long minLength = (Long) params.get(""readLockMinLength"");
    if (minLength != null) {
        readLockStrategy.setMinLength(minLength);
    }
    Long minAge = (Long) params.get(""readLockMinAge"");
    if (null != minAge) {
        readLockStrategy.setMinAge(minAge);
    }
    Boolean fastExistsCheck = (Boolean) params.get(""fastExistsCheck"");
    if (fastExistsCheck != null) {
        readLockStrategy.setFastExistsCheck(fastExistsCheck);
    }
    return readLockStrategy;
}{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-07 08:32:56.788,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 04 13:05:24 UTC 2018,,,,,,,0|i3xtzb:,9223372036854775807,,,,,,,,,,07/Sep/18 08:32;vrlgohel;Thanks for reporting. How are you trying to set the readLockLoggingLevel to something other than WARN ?,"07/Sep/18 09:10;kolas;{code:java}
sftp://localhost:2022/test/logs?delete=true&fastExistsCheck=true&moveFailed=.failed&readLock=changed&readLockLoggingLevel=INFO{code}
 ",07/Sep/18 11:38;vrlgohel;Thanks. I will take a look.,"04/Oct/18 12:47;githubbot;dmvolod opened a new pull request #2551: CAMEL-12786: Option readLockLoggingLevel not working for SFTP changed read lock strategy
URL: https://github.com/apache/camel/pull/2551
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Oct/18 12:47;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2551

    CAMEL-12786: Option readLockLoggingLevel not working for SFTP changed read lock strategy

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12786

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2551.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2551
    
----
commit a81ef66b8d50e605e4c0b2722eaecee774f88c4c
Author: Dmitry Volodin <dmvolod@...>
Date:   2018-10-04T12:44:55Z

    CAMEL-12786: Option readLockLoggingLevel not working for SFTP changed
    read lock strategy

----
","04/Oct/18 13:05;githubbot;asfgit closed pull request #2551: CAMEL-12786: Option readLockLoggingLevel not working for SFTP changed read lock strategy
URL: https://github.com/apache/camel/pull/2551
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/FtpProcessStrategyFactory.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/FtpProcessStrategyFactory.java
index 0b245ab615c..39dfd0d24e1 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/FtpProcessStrategyFactory.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/FtpProcessStrategyFactory.java
@@ -20,6 +20,7 @@
 
 import org.apache.camel.CamelContext;
 import org.apache.camel.Expression;
+import org.apache.camel.LoggingLevel;
 import org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy;
 import org.apache.camel.component.file.GenericFileProcessStrategy;
 import org.apache.camel.component.file.strategy.GenericFileDeleteProcessStrategy;
@@ -115,6 +116,10 @@ private FtpProcessStrategyFactory() {
                 if (readLockMarkerFile != null) {
                     readLockStrategy.setMarkerFiler(readLockMarkerFile);
                 }
+                LoggingLevel readLockLoggingLevel = (LoggingLevel) params.get(""readLockLoggingLevel"");
+                if (readLockLoggingLevel != null) {
+                    readLockStrategy.setReadLockLoggingLevel(readLockLoggingLevel);
+                }
                 return readLockStrategy;
             } else if (""changed"".equals(readLock)) {
                 FtpChangedExclusiveReadLockStrategy readLockStrategy = new FtpChangedExclusiveReadLockStrategy();
@@ -142,6 +147,10 @@ private FtpProcessStrategyFactory() {
                 if (readLockMarkerFile != null) {
                     readLockStrategy.setMarkerFiler(readLockMarkerFile);
                 }
+                LoggingLevel readLockLoggingLevel = (LoggingLevel) params.get(""readLockLoggingLevel"");
+                if (readLockLoggingLevel != null) {
+                    readLockStrategy.setReadLockLoggingLevel(readLockLoggingLevel);
+                }
                 return readLockStrategy;
             }
         }
diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpProcessStrategyFactory.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpProcessStrategyFactory.java
index 93e5048cf4a..57fcebf16af 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpProcessStrategyFactory.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpProcessStrategyFactory.java
@@ -21,6 +21,7 @@
 import com.jcraft.jsch.ChannelSftp;
 import org.apache.camel.CamelContext;
 import org.apache.camel.Expression;
+import org.apache.camel.LoggingLevel;
 import org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy;
 import org.apache.camel.component.file.GenericFileProcessStrategy;
 import org.apache.camel.component.file.strategy.GenericFileDeleteProcessStrategy;
@@ -111,6 +112,10 @@ private SftpProcessStrategyFactory() {
                 if (checkInterval != null) {
                     readLockStrategy.setCheckInterval(checkInterval);
                 }
+                LoggingLevel readLockLoggingLevel = (LoggingLevel) params.get(""readLockLoggingLevel"");
+                if (readLockLoggingLevel != null) {
+                    readLockStrategy.setReadLockLoggingLevel(readLockLoggingLevel);
+                }
                 return readLockStrategy;
             } else if (""changed"".equals(readLock)) {
                 SftpChangedExclusiveReadLockStrategy readLockStrategy = new SftpChangedExclusiveReadLockStrategy();
@@ -134,6 +139,10 @@ private SftpProcessStrategyFactory() {
                 if (fastExistsCheck != null) {
                     readLockStrategy.setFastExistsCheck(fastExistsCheck);
                 }
+                LoggingLevel readLockLoggingLevel = (LoggingLevel) params.get(""readLockLoggingLevel"");
+                if (readLockLoggingLevel != null) {
+                    readLockStrategy.setReadLockLoggingLevel(readLockLoggingLevel);
+                }
                 return readLockStrategy;
             }
         }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","04/Oct/18 13:05;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2551
",,,,,,,,,,,,,,,,,,,,,,,,,,
Fix MQTT URI param typo,CAMEL-12821,13185839,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,philschaller,philschaller,18/Sep/18 15:53,19/Sep/18 07:21,13/Mar/19 22:20,19/Sep/18 07:21,2.22.1,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-mqtt,,,,,,0,,,,The URI params 'willQos' and 'qualityOfService' of the MQTT component have a typo in their enum description.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-19 07:21:08.223,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 19 07:21:08 UTC 2018,,,Patch Available,,,,0|i3y7vb:,9223372036854775807,,,,,,,,,,19/Sep/18 07:21;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[ERROR] /sobject-pojo-optional.vm: Encountered ""("" at line 64, column 8.",CAMEL-12725,13178207,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,zregvart,tinusaan,tinusaan,10/Aug/18 07:37,10/Aug/18 08:45,13/Mar/19 22:20,10/Aug/18 08:45,2.21.0,2.21.1,2.21.2,2.22.0,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-salesforce,,,,,,0,,,,"When using ""optionals"" in the camel-salesforce-maven-plugin it will throw an error like the following:

{{[INFO] Generating Java Classes...}}
{{[ERROR] /sobject-pojo-optional.vm: Encountered ""("" at line 64, column 8.}}
{{Was expecting one of:}}
{{ <WHITESPACE> ...}}
{{ <NEWLINE> ...}}
{{ <IDENTIFIER> ...}}
{{ ""{"" ...}}

{{[ERROR] ResourceManager: parse exception: Encountered ""("" at /sobject-pojo-optional.vm[line 64, column 8]}}
{{Was expecting one of:}}
{{ <WHITESPACE> ...}}
{{ <NEWLINE> ...}}
{{ <IDENTIFIER> ...}}
{{ ""{"" ...}}

 

This is caused by a change in [https://github.com/apache/camel/commit/2a4038c66ddc86d081e96a69eb9200f9ff498fb4#diff-ecf95a5795fc049a5d3c45ffcaf5ef00] which sets the following line:

#set ( ($fieldType = $utility.getFieldType($desc, $field)) && ($fieldType) )

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-10 07:37:45.774,,,no_permission,,Novice,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 10 08:45:18 UTC 2018,,,,,,,0|i3wx4v:,9223372036854775807,,,,,,,,,,"10/Aug/18 07:37;githubbot;tinusn opened a new pull request #2464: CAMEL-12725: [ERROR] /sobject-pojo-optional.vm
URL: https://github.com/apache/camel/pull/2464
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Aug/18 07:37;githubbot;GitHub user tinusn opened a pull request:

    https://github.com/apache/camel/pull/2464

    CAMEL-12725: [ERROR] /sobject-pojo-optional.vm

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tinusn/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2464.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2464
    
----
commit b0652d9707cbd4696d31467b258c2bd61f784980
Author: Tinus Aamand Norstved <tinus@...>
Date:   2018-08-10T07:13:05Z

    Update sobject-pojo-optional.vm
    
    Fixed error in setting the $fieldType - the syntax in the template document throws the  following error upon running:
    
    [ERROR] Failed to execute goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.21.0:generate (executable pom) on project test-project: Execution executable pom of goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.21.0:generate failed: Encountered ""("" at /sobject-pojo-optional.vm[line 64, column 8]
    [ERROR] Was expecting one of:
    [ERROR]     <WHITESPACE> ...
    [ERROR]     <NEWLINE> ...
    [ERROR]     <IDENTIFIER> ...
    [ERROR]     ""{"" ...
    
    
    This change fixes that.

commit 3aa87a7d67332139e69085881d55c7914a7b8efd
Author: Tinus Aamand Norstved <tinus@...>
Date:   2018-08-10T07:30:00Z

    Merge pull request #1 from tinusn/tinusn-patch-1
    
    Update sobject-pojo-optional.vm

----
",10/Aug/18 07:37;tinusaan;Created a pull request at github: [https://github.com/apache/camel/pull/2464],"10/Aug/18 07:45;githubbot;zregvart closed pull request #2464: CAMEL-12725: [ERROR] /sobject-pojo-optional.vm
URL: https://github.com/apache/camel/pull/2464
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm
index 3caea042b82..55d9ce16255 100644
--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm
+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm
@@ -61,7 +61,7 @@ import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 public class ${desc.Name}Optional extends AbstractSObjectBase {
 
 #foreach ( $field in $desc.Fields )
-#set ( ($fieldType = $utility.getFieldType($desc, $field)) && ($fieldType) )
+#set ( $fieldType = $utility.getFieldType($desc, $field) )
 #if ( $utility.notBaseField($field.Name) )
 #set ( $fieldName = $field.Name )
 #set ( $isMultiSelectPicklist = $utility.isMultiSelectPicklist($field) )


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Aug/18 07:45;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/2464
",10/Aug/18 08:45;zregvart;Thanks for the pull request!,,,,,,,,,,,,,,,,,,,,,,,,,,,
connectors : alias scheme is not used by the connector component,CAMEL-11992,13116020,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,lb,lb,lb,03/Nov/17 18:01,03/Nov/17 22:59,13/Mar/19 22:20,03/Nov/17 22:59,,,,,,,,,,,,,,,,2.20.1,2.21.0,,,,camel-connector,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-11-03 18:01:57.0,,,,,,,0|i3mdof:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP4 Producer for TLS schemes transforms endpoint URI to `http4s`,CAMEL-11986,13115720,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,zregvart,zregvart,zregvart,02/Nov/17 19:11,03/Nov/17 15:42,13/Mar/19 22:20,02/Nov/17 19:20,,,,,,,,,,,,,,,,2.19.5,2.20.1,2.21.0,,,camel-http4,,,,,,0,,,,"The {{createProducer}} method of HTTP4 component replaces {{""http""}} with {{""http4""}} to form endpoint URI that suits only non-TLS URLs, as {{""http4s""}} is since CAMEL-11575 no longer valid.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-02 19:27:29.803,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 03 15:42:12 UTC 2017,,,,,,,0|i3mbtr:,9223372036854775807,,,,,,,,,,"02/Nov/17 19:20;zregvart;[~davsclaus], [~ancosen] do you think this needs to be backported to other branches?",02/Nov/17 19:27;davsclaus;Yeah looks like 2.19.x and 2.20.x as well.,"02/Nov/17 19:53;zregvart;I've cherry-picked this into current 2.19.x and 2.20.x, I don't think it's a huge issue to stop the release of 2.19.4, if anyone needs this it should be easy to use 2.20.1 also.","03/Nov/17 15:42;zregvart;And if anyone finds this issue and needs a workaround this should work:

{code:java}
camelContext.addComponent(""http4s"", camelContext.getComponent(""https4""));
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Align pdfbox versions to 2.0.6,CAMEL-11976,13115373,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,ppalaga,ppalaga,ppalaga,01/Nov/17 14:44,02/Nov/17 12:09,13/Mar/19 22:20,02/Nov/17 12:09,,,,,,,,,,,,,,,,2.21.0,,,,,,,,,,,0,,,,"{{org.apache.pdfbox}} is currently used by the following components

* {{camel-fop}} uses {{org.apache.pdfbox:pdfbox}} 1.8.13
* {{camel-pdf}} uses {{org.apache.pdfbox:pdfbox}} 1.8.13
* {{camel-tika}} transitively depends on 
** {{org.apache.pdfbox:pdfbox}} 2.0.6
** {{org.apache.pdfbox:fontbox}} 2.0.6
** {{org.apache.pdfbox:pdfbox-tools}} 2.0.6
** {{org.apache.pdfbox:pdfbox-debugger}} 2.0.6
** and {{org.apache.pdfbox:jempbox}} 1.8.13 (!)

Because pdfbox 2.0 is not backwards compatible with 1.8 we are not able to add Tika to WildFly Camel, where we already have {{camel-pdf}} and {{camel-fop}}.

I propose to align all the above artifacts to 2.0.6, except for {{jempbox}} that has to stay on 1.8.13, because there is no {{jempbox}} in {{pdfbox}} 2.0.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-01 14:55:01.617,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 02 12:09:58 UTC 2017,,,,,,,0|i3m9ov:,9223372036854775807,,,,,,,,,,"01/Nov/17 14:55;githubbot;ppalaga opened a new pull request #2073: CAMEL-11976: Align pdfbox versions to 2.0.6
URL: https://github.com/apache/camel/pull/2073
 
 
   https://issues.apache.org/jira/browse/CAMEL-11976

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Nov/17 14:55;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2073

    CAMEL-11976: Align pdfbox versions to 2.0.6

    https://issues.apache.org/jira/browse/CAMEL-11976

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-11976

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2073.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2073
    
----
commit c54e87312e23ca358392d9b0a3be42a9de8b25c5
Author: Peter Palaga <ppalaga@redhat.com>
Date:   2017-11-01T14:53:00Z

    CAMEL-11976: Align pdfbox versions to 2.0.6

----
","01/Nov/17 14:57;ppalaga;The linked patch shows that the proposed alignment is possible.

Esp. the changes in tests should be reviewed thoroughly to asses how much can this change break users' existing code.","02/Nov/17 08:13;githubbot;ppalaga commented on issue #2073: CAMEL-11976: Align pdfbox versions to 2.0.6
URL: https://github.com/apache/camel/pull/2073#issuecomment-341347048
 
 
   > Did you test the related Karaf features? Thanks.
   
   Trying to do that now.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Nov/17 12:00;githubbot;ppalaga commented on issue #2073: CAMEL-11976: Align pdfbox versions to 2.0.6
URL: https://github.com/apache/camel/pull/2073#issuecomment-341400180
 
 
   48d5c9c was tested with all impacted components on Karaf - i.e. fop, pdf and tika.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Nov/17 12:09;githubbot;oscerd commented on issue #2073: CAMEL-11976: Align pdfbox versions to 2.0.6
URL: https://github.com/apache/camel/pull/2073#issuecomment-341402001
 
 
   Thanks @ppalaga the PR has been merged. I'm closing this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Nov/17 12:09;githubbot;oscerd closed pull request #2073: CAMEL-11976: Align pdfbox versions to 2.0.6
URL: https://github.com/apache/camel/pull/2073
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-fop/pom.xml b/components/camel-fop/pom.xml
index b3289378141..e4635515057 100644
--- a/components/camel-fop/pom.xml
+++ b/components/camel-fop/pom.xml
@@ -72,7 +72,7 @@
             <artifactId>avalon-framework-impl</artifactId>
             <version>${avalon-version}</version>
         </dependency>
-        
+
         <!-- for testing -->
         <dependency>
             <groupId>org.apache.camel</groupId>
@@ -82,10 +82,21 @@
         <dependency>
             <groupId>org.apache.pdfbox</groupId>
             <artifactId>pdfbox</artifactId>
-            <version>${pdfbox-version}</version>
             <scope>test</scope>
         </dependency>
-        
+        <dependency>
+            <groupId>org.bouncycastle</groupId>
+            <artifactId>bcprov-jdk15on</artifactId>
+            <version>${bouncycastle-version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.bouncycastle</groupId>
+            <artifactId>bcmail-jdk15on</artifactId>
+            <version>${bouncycastle-version}</version>
+            <scope>test</scope>
+        </dependency>
+
         <!-- Xalan Serializer dependencies are not  -->
         <!-- correctly imported from batik for tests  -->
         <!-- and as such they will fail. Must add to  -->
@@ -96,7 +107,7 @@
             <version>${xalan-version}</version>
             <scope>test</scope>
         </dependency>
-           
+
         <dependency>
             <groupId>org.apache.logging.log4j</groupId>
             <artifactId>log4j-api</artifactId>
diff --git a/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopComponentTest.java b/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopComponentTest.java
index 7111ac3637b..249e111d845 100644
--- a/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopComponentTest.java
+++ b/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopComponentTest.java
@@ -16,6 +16,7 @@
  */
 package org.apache.camel.component.fop;
 
+import java.io.File;
 import java.io.FileInputStream;
 
 import org.apache.camel.EndpointInject;
@@ -36,7 +37,7 @@
 
     @Produce(uri = ""direct:start"")
     protected ProducerTemplate template;
-    
+
     @Override
     @Before
     public void setUp() throws Exception {
@@ -53,7 +54,7 @@ public void createPdfUsingXmlDataAndXsltTransformation() throws Exception {
         template.sendBody(inputStream);
         resultEndpoint.assertIsSatisfied();
 
-        PDDocument document = PDDocument.load(""target/data/result.pdf"");
+        PDDocument document = PDDocument.load(new File(""target/data/result.pdf""));
         String pdfText = FopHelper.extractTextFrom(document);
         assertTrue(pdfText.contains(""Project""));    //from xsl template
         assertTrue(pdfText.contains(""John Doe""));   //from data xml
@@ -62,7 +63,7 @@ public void createPdfUsingXmlDataAndXsltTransformation() throws Exception {
         Exchange exchange = resultEndpoint.getReceivedExchanges().get(0);
         assertEquals(""Header value is lost!"", ""bar"", exchange.getIn().getHeader(""foo""));
     }
-    
+
     @Override
     protected RouteBuilder createRouteBuilder() {
         return new RouteBuilder() {
diff --git a/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopEndpointTest.java b/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopEndpointTest.java
index 884300ba98a..9805fccbebd 100644
--- a/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopEndpointTest.java
+++ b/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopEndpointTest.java
@@ -80,12 +80,15 @@ public void encryptPdfWithUserPassword() throws Exception {
         Endpoint endpoint = context().getEndpoint(""fop:pdf"");
         Producer producer = endpoint.createProducer();
         Exchange exchange = new DefaultExchange(context);
-        exchange.getIn().setHeader(""CamelFop.Encrypt.userPassword"", ""secret"");
+        final String password = ""secret"";
+        exchange.getIn().setHeader(""CamelFop.Encrypt.userPassword"", password);
         exchange.getIn().setBody(FopHelper.decorateTextWithXSLFO(""Test Content""));
 
         producer.process(exchange);
-        PDDocument document = getDocumentFrom(exchange);
-        assertTrue(document.isEncrypted());
+        try (InputStream inputStream = exchange.getOut().getBody(InputStream.class)) {
+            PDDocument document = PDDocument.load(inputStream, password);
+            assertTrue(document.isEncrypted());
+        }
     }
 
     @Test
diff --git a/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopHelper.java b/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopHelper.java
index fee920c1eef..b016ec1530a 100644
--- a/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopHelper.java
+++ b/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopHelper.java
@@ -21,29 +21,14 @@
 import java.io.Writer;
 
 import org.apache.pdfbox.cos.COSName;
-import org.apache.pdfbox.exceptions.CryptographyException;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDDocumentInformation;
-import org.apache.pdfbox.pdmodel.encryption.BadSecurityHandlerException;
-import org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial;
-import org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial;
-import org.apache.pdfbox.util.PDFTextStripper;
+import org.apache.pdfbox.text.PDFTextStripper;
 
 public final class FopHelper {
     private FopHelper() {
     }
 
-    //decryption requires additional libraries
-    public static void decryptPDFN(PDDocument document, String password) throws
-            IOException, CryptographyException, BadSecurityHandlerException {
-        if (document.isEncrypted()) {
-            DecryptionMaterial decryptionMaterial = new StandardDecryptionMaterial(password);
-            document.openProtection(decryptionMaterial);
-        } else {
-            throw new RuntimeException(""Document not encrypted"");
-        }
-    }
-
     public static String extractTextFrom(PDDocument document) throws IOException {
         Writer output = new StringWriter();
         PDFTextStripper stripper = new PDFTextStripper();
@@ -53,7 +38,7 @@ public static String extractTextFrom(PDDocument document) throws IOException {
 
     public static String getDocumentMetadataValue(PDDocument document, COSName name) {
         PDDocumentInformation info = document.getDocumentInformation();
-        return info.getDictionary().getString(name);
+        return info.getCOSObject().getString(name);
     }
 
     public static String decorateTextWithXSLFO(String text) {
diff --git a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfConfiguration.java b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfConfiguration.java
index 066d8012442..a836540d6b4 100644
--- a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfConfiguration.java
+++ b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfConfiguration.java
@@ -45,14 +45,14 @@
     private static final Map<String, PDRectangle> PAGE_MAP = new HashMap<String, PDRectangle>();
 
     static {
-        PAGE_MAP.put(PAGE_SIZE_A0, PDPage.PAGE_SIZE_A0);
-        PAGE_MAP.put(PAGE_SIZE_A1, PDPage.PAGE_SIZE_A1);
-        PAGE_MAP.put(PAGE_SIZE_A2, PDPage.PAGE_SIZE_A2);
-        PAGE_MAP.put(PAGE_SIZE_A3, PDPage.PAGE_SIZE_A3);
-        PAGE_MAP.put(PAGE_SIZE_A4, PDPage.PAGE_SIZE_A4);
-        PAGE_MAP.put(PAGE_SIZE_A5, PDPage.PAGE_SIZE_A5);
-        PAGE_MAP.put(PAGE_SIZE_A6, PDPage.PAGE_SIZE_A6);
-        PAGE_MAP.put(PAGE_SIZE_LETTER, PDPage.PAGE_SIZE_LETTER);
+        PAGE_MAP.put(PAGE_SIZE_A0, PDRectangle.A0);
+        PAGE_MAP.put(PAGE_SIZE_A1, PDRectangle.A1);
+        PAGE_MAP.put(PAGE_SIZE_A2, PDRectangle.A2);
+        PAGE_MAP.put(PAGE_SIZE_A3, PDRectangle.A3);
+        PAGE_MAP.put(PAGE_SIZE_A4, PDRectangle.A4);
+        PAGE_MAP.put(PAGE_SIZE_A5, PDRectangle.A5);
+        PAGE_MAP.put(PAGE_SIZE_A6, PDRectangle.A6);
+        PAGE_MAP.put(PAGE_SIZE_LETTER, PDRectangle.LETTER);
     }
 
     @UriPath(description = ""Operation type"")
@@ -69,7 +69,7 @@
     @UriParam(defaultValue = ""14"")
     private float fontSize = 14;
     @UriParam(defaultValue = ""PAGE_SIZE_A4"", enums = ""PAGE_SIZE_A0,PAGE_SIZE_A1,PAGE_SIZE_A2,PAGE_SIZE_A3,PAGE_SIZE_A4,PAGE_SIZE_A5,PAGE_SIZE_A6,PAGE_SIZE_LETTER"")
-    private PDRectangle pageSize = PDPage.PAGE_SIZE_A4;
+    private PDRectangle pageSize = PDRectangle.A4;
     @UriParam(defaultValue = ""Helvetica"")
     private PDFont font = PDType1Font.HELVETICA;
     @UriParam(defaultValue = ""lineTermination"")
@@ -169,7 +169,7 @@ public void setFont(PDFont font) {
     }
 
     public void setFont(String font) {
-        setFont(PDType1Font.getStandardFont(font));
+        setFont(Standard14Fonts.getByName(font));
     }
 
     public TextProcessingFactory getTextProcessingFactory() {
diff --git a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfProducer.java b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfProducer.java
index be60aff6750..11b73130908 100644
--- a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfProducer.java
+++ b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfProducer.java
@@ -29,15 +29,11 @@
 import org.apache.camel.component.pdf.text.TextProcessingAbstractFactory;
 import org.apache.camel.component.pdf.text.WriteStrategy;
 import org.apache.camel.impl.DefaultProducer;
-import org.apache.pdfbox.exceptions.COSVisitorException;
-import org.apache.pdfbox.exceptions.CryptographyException;
-import org.apache.pdfbox.exceptions.InvalidPasswordException;
 import org.apache.pdfbox.pdmodel.PDDocument;
-import org.apache.pdfbox.pdmodel.encryption.BadSecurityHandlerException;
 import org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial;
 import org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy;
 import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;
-import org.apache.pdfbox.util.PDFTextStripper;
+import org.apache.pdfbox.text.PDFTextStripper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -83,7 +79,7 @@ public void process(Exchange exchange) throws Exception {
         exchange.getOut().setBody(result);
     }
 
-    private Object doAppend(Exchange exchange) throws IOException, BadSecurityHandlerException, CryptographyException, InvalidPasswordException, COSVisitorException {
+    private Object doAppend(Exchange exchange) throws IOException {
         LOG.debug(""Got {} operation, going to append text to provided pdf."", pdfConfiguration.getOperation());
         String body = exchange.getIn().getBody(String.class);
         PDDocument document = exchange.getIn().getHeader(PDF_DOCUMENT_HEADER_NAME, PDDocument.class);
@@ -93,16 +89,6 @@ private Object doAppend(Exchange exchange) throws IOException, BadSecurityHandle
         }
 
         if (document.isEncrypted()) {
-            DecryptionMaterial decryptionMaterial = exchange.getIn().getHeader(DECRYPTION_MATERIAL_HEADER_NAME,
-                    DecryptionMaterial.class);
-            if (decryptionMaterial == null) {
-                throw new IllegalArgumentException(String.format(""%s header is expected for %s operation ""
-                                + ""on encrypted document"",
-                        DECRYPTION_MATERIAL_HEADER_NAME,
-                        pdfConfiguration.getOperation()));
-            }
-
-            document.openProtection(decryptionMaterial);
             document.setAllSecurityToBeRemoved(true);
         }
 
@@ -115,27 +101,16 @@ private Object doAppend(Exchange exchange) throws IOException, BadSecurityHandle
         return byteArrayOutputStream;
     }
 
-    private String doExtractText(Exchange exchange) throws IOException, CryptographyException, InvalidPasswordException, BadSecurityHandlerException {
+    private String doExtractText(Exchange exchange) throws IOException {
         LOG.debug(""Got {} operation, going to extract text from provided pdf."", pdfConfiguration.getOperation());
         PDDocument document = exchange.getIn().getBody(PDDocument.class);
 
-        if (document.isEncrypted()) {
-            DecryptionMaterial decryptionMaterial = exchange.getIn().getHeader(DECRYPTION_MATERIAL_HEADER_NAME,
-                    DecryptionMaterial.class);
-            if (decryptionMaterial == null) {
-                throw new IllegalArgumentException(String.format(""%s header is expected for %s operation ""
-                                + ""on encrypted document"",
-                        DECRYPTION_MATERIAL_HEADER_NAME,
-                        pdfConfiguration.getOperation()));
-            }
-            document.openProtection(decryptionMaterial);
-        }
 
         PDFTextStripper pdfTextStripper = new PDFTextStripper();
         return pdfTextStripper.getText(document);
     }
 
-    private OutputStream doCreate(Exchange exchange) throws IOException, BadSecurityHandlerException, COSVisitorException {
+    private OutputStream doCreate(Exchange exchange) throws IOException {
         LOG.debug(""Got {} operation, going to create and write provided string to pdf document."",
                 pdfConfiguration.getOperation());
         String body = exchange.getIn().getBody(String.class);
@@ -148,7 +123,7 @@ private OutputStream doCreate(Exchange exchange) throws IOException, BadSecurity
         return byteArrayOutputStream;
     }
 
-    private void appendToPdfDocument(String text, PDDocument document, ProtectionPolicy protectionPolicy) throws IOException, BadSecurityHandlerException {
+    private void appendToPdfDocument(String text, PDDocument document, ProtectionPolicy protectionPolicy) throws IOException {
         Collection<String> words = splitStrategy.split(text);
         Collection<String> lines = lineBuilderStrategy.buildLines(words);
         writeStrategy.write(lines, document);
diff --git a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/Standard14Fonts.java b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/Standard14Fonts.java
new file mode 100644
index 00000000000..06c2f37aa60
--- /dev/null
+++ b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/Standard14Fonts.java
@@ -0,0 +1,59 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.pdf;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.pdfbox.pdmodel.font.PDType1Font;
+
+/**
+ * The 14 standard fonts by name. Created here because there is no way to get a standard font by name in {@code pdfbox} 2.0
+ *
+ * @author <a href=""https://github.com/ppalaga"">Peter Palaga</a>
+ */
+public class Standard14Fonts {
+    private static final Map<String, PDType1Font> FONTS_BY_NAME = new HashMap<>();
+    static
+    {
+        FONTS_BY_NAME.put(PDType1Font.TIMES_ROMAN.getBaseFont(), PDType1Font.TIMES_ROMAN);
+        FONTS_BY_NAME.put(PDType1Font.TIMES_BOLD.getBaseFont(), PDType1Font.TIMES_BOLD);
+        FONTS_BY_NAME.put(PDType1Font.TIMES_ITALIC.getBaseFont(), PDType1Font.TIMES_ITALIC);
+        FONTS_BY_NAME.put(PDType1Font.TIMES_BOLD_ITALIC.getBaseFont(), PDType1Font.TIMES_BOLD_ITALIC);
+        FONTS_BY_NAME.put(PDType1Font.HELVETICA.getBaseFont(), PDType1Font.HELVETICA);
+        FONTS_BY_NAME.put(PDType1Font.HELVETICA_BOLD.getBaseFont(), PDType1Font.HELVETICA_BOLD);
+        FONTS_BY_NAME.put(PDType1Font.HELVETICA_OBLIQUE.getBaseFont(), PDType1Font.HELVETICA_OBLIQUE);
+        FONTS_BY_NAME.put(PDType1Font.HELVETICA_BOLD_OBLIQUE.getBaseFont(), PDType1Font.HELVETICA_BOLD_OBLIQUE);
+        FONTS_BY_NAME.put(PDType1Font.COURIER.getBaseFont(), PDType1Font.COURIER);
+        FONTS_BY_NAME.put(PDType1Font.COURIER_BOLD.getBaseFont(), PDType1Font.COURIER_BOLD);
+        FONTS_BY_NAME.put(PDType1Font.COURIER_OBLIQUE.getBaseFont(), PDType1Font.COURIER_OBLIQUE);
+        FONTS_BY_NAME.put(PDType1Font.COURIER_BOLD_OBLIQUE.getBaseFont(), PDType1Font.COURIER_BOLD_OBLIQUE);
+        FONTS_BY_NAME.put(PDType1Font.SYMBOL.getBaseFont(), PDType1Font.SYMBOL);
+        FONTS_BY_NAME.put(PDType1Font.ZAPF_DINGBATS.getBaseFont(), PDType1Font.ZAPF_DINGBATS);
+    }
+
+    /**
+     * Get one of the 14 standard fonts by base font name.
+     *
+     * @param fontName the base font name, such as {@code ""Helvetica""} or {@code ""Helvetica-Bold""}
+     * @return the {@link PDType1Font} or null, of the {@code fontName} is not mapped to any font
+     */
+    public static PDType1Font getByName(String fontName) {
+        return FONTS_BY_NAME.get(fontName);
+    }
+
+}
diff --git a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/DefaultWriteStrategy.java b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/DefaultWriteStrategy.java
index 188d846d3b2..e5f3f7b7c30 100644
--- a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/DefaultWriteStrategy.java
+++ b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/DefaultWriteStrategy.java
@@ -22,7 +22,7 @@
 import org.apache.camel.component.pdf.PdfConfiguration;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
-import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
+import org.apache.pdfbox.pdmodel.PDPageContentStream;
 
 /**
  * Writes given lines to PDF document. If document already contains some text then new text will be appended
diff --git a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/PdfUtils.java b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/PdfUtils.java
index cc910f47cb1..2574f5d751d 100644
--- a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/PdfUtils.java
+++ b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/PdfUtils.java
@@ -26,11 +26,11 @@
     private PdfUtils() { }
 
     public static float getAverageFontHeight(PDFont font, float fontSize) throws IOException {
-        return font.getFontHeight(""A"".getBytes(), 0, 1) / PDF_PIXEL_SIZE * fontSize;
+        return font.getBoundingBox().getHeight() / PDF_PIXEL_SIZE * fontSize;
     }
 
     public static float getFontHeightForString(String str, PDFont font, float fontSize) throws IOException {
-        return font.getFontHeight(str.getBytes(), 0, 1) / PDF_PIXEL_SIZE * fontSize;
+        return font.getBoundingBox().getHeight() / PDF_PIXEL_SIZE * fontSize;
     }
 
     public static float getFontWidth(String str, PDFont font, float fontSize) throws IOException {
diff --git a/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfAppendTest.java b/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfAppendTest.java
index 8269f9663e4..4ca5c0c6e5e 100644
--- a/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfAppendTest.java
+++ b/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfAppendTest.java
@@ -30,12 +30,13 @@
 import org.apache.camel.test.junit4.CamelTestSupport;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
-import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
+import org.apache.pdfbox.pdmodel.PDPageContentStream;
+import org.apache.pdfbox.pdmodel.common.PDRectangle;
 import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
 import org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial;
 import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;
 import org.apache.pdfbox.pdmodel.font.PDType1Font;
-import org.apache.pdfbox.util.PDFTextStripper;
+import org.apache.pdfbox.text.PDFTextStripper;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -58,7 +59,7 @@ public void testAppend() throws Exception {
         final String originalText = ""Test"";
         final String textToAppend = ""Append"";
         PDDocument document = new PDDocument();
-        PDPage page = new PDPage(PDPage.PAGE_SIZE_A4);
+        PDPage page = new PDPage(PDRectangle.A4);
         document.addPage(page);
         PDPageContentStream contentStream = new PDPageContentStream(document, page);
         contentStream.setFont(PDType1Font.HELVETICA, 12);
@@ -98,7 +99,7 @@ public void testAppendEncrypted() throws Exception {
         final String originalText = ""Test"";
         final String textToAppend = ""Append"";
         PDDocument document = new PDDocument();
-        PDPage page = new PDPage(PDPage.PAGE_SIZE_A4);
+        PDPage page = new PDPage(PDRectangle.A4);
         document.addPage(page);
         PDPageContentStream contentStream = new PDPageContentStream(document, page);
         contentStream.setFont(PDType1Font.HELVETICA, 12);
@@ -121,7 +122,7 @@ public void testAppendEncrypted() throws Exception {
         document.save(output);
 
         // Encryption happens after saving.
-        PDDocument encryptedDocument = PDDocument.load(new ByteArrayInputStream(output.toByteArray()));
+        PDDocument encryptedDocument = PDDocument.load(new ByteArrayInputStream(output.toByteArray()), userPass);
 
         Map<String, Object> headers = new HashMap<String, Object>();
         headers.put(PdfHeaderConstants.PDF_DOCUMENT_HEADER_NAME, encryptedDocument);
@@ -136,7 +137,7 @@ public boolean matches(Exchange exchange) {
                 Object body = exchange.getIn().getBody();
                 assertThat(body, instanceOf(ByteArrayOutputStream.class));
                 try {
-                    PDDocument doc = PDDocument.load(new ByteArrayInputStream(((ByteArrayOutputStream) body).toByteArray()));
+                    PDDocument doc = PDDocument.load(new ByteArrayInputStream(((ByteArrayOutputStream) body).toByteArray()), userPass);
                     PDFTextStripper pdfTextStripper = new PDFTextStripper();
                     String text = pdfTextStripper.getText(doc);
                     assertEquals(2, doc.getNumberOfPages());
diff --git a/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfCreationTest.java b/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfCreationTest.java
index c74e1fb5bf7..07093f55e86 100644
--- a/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfCreationTest.java
+++ b/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfCreationTest.java
@@ -29,7 +29,7 @@
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
 import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;
-import org.apache.pdfbox.util.PDFTextStripper;
+import org.apache.pdfbox.text.PDFTextStripper;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -93,9 +93,8 @@ public boolean matches(Exchange exchange) {
                 Object body = exchange.getIn().getBody();
                 assertThat(body, instanceOf(ByteArrayOutputStream.class));
                 try {
-                    PDDocument doc = PDDocument.load(new ByteArrayInputStream(((ByteArrayOutputStream) body).toByteArray()));
+                    PDDocument doc = PDDocument.load(new ByteArrayInputStream(((ByteArrayOutputStream) body).toByteArray()), userPass);
                     assertTrue(""Expected encrypted document"", doc.isEncrypted());
-                    doc.decrypt(userPass);
                     assertFalse(""Printing should not be permitted"", doc.getCurrentAccessPermission().canPrint());
                     PDFTextStripper pdfTextStripper = new PDFTextStripper();
                     String text = pdfTextStripper.getText(doc);
diff --git a/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfTextExtractionTest.java b/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfTextExtractionTest.java
index 6d93d8a4ab6..9cc701917ed 100644
--- a/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfTextExtractionTest.java
+++ b/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfTextExtractionTest.java
@@ -27,7 +27,8 @@
 import org.apache.camel.test.junit4.CamelTestSupport;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
-import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
+import org.apache.pdfbox.pdmodel.PDPageContentStream;
+import org.apache.pdfbox.pdmodel.common.PDRectangle;
 import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
 import org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial;
 import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;
@@ -46,7 +47,7 @@
     public void testExtractText() throws Exception {
         final String expectedText = ""Test string"";
         PDDocument document = new PDDocument();
-        PDPage page = new PDPage(PDPage.PAGE_SIZE_A4);
+        PDPage page = new PDPage(PDRectangle.A4);
         document.addPage(page);
         PDPageContentStream contentStream = new PDPageContentStream(document, page);
         contentStream.setFont(PDType1Font.HELVETICA, 12);
@@ -82,7 +83,7 @@ public void testExtractTextFromEncrypted() throws Exception {
         PDDocument document = new PDDocument();
 
         final String expectedText = ""Test string"";
-        PDPage page = new PDPage(PDPage.PAGE_SIZE_A4);
+        PDPage page = new PDPage(PDRectangle.A4);
         document.addPage(page);
         PDPageContentStream contentStream = new PDPageContentStream(document, page);
         contentStream.setFont(PDType1Font.HELVETICA, 12);
@@ -98,7 +99,7 @@ public void testExtractTextFromEncrypted() throws Exception {
         document.save(output);
 
         // Encryption happens after saving.
-        PDDocument encryptedDocument = PDDocument.load(new ByteArrayInputStream(output.toByteArray()));
+        PDDocument encryptedDocument = PDDocument.load(new ByteArrayInputStream(output.toByteArray()), userPass);
 
         template.sendBodyAndHeader(""direct:start"",
                 encryptedDocument,
diff --git a/parent/pom.xml b/parent/pom.xml
index 7c5878bd70f..61b5de8ee48 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -558,7 +558,8 @@
     <pax-exam-version>4.9.2</pax-exam-version>
     <pax-tiny-bundle-version>1.3.2</pax-tiny-bundle-version>
     <pax-logging-version>1.8.6</pax-logging-version>
-    <pdfbox-version>1.8.13</pdfbox-version>
+    <pdfbox18-version>1.8.13</pdfbox18-version>
+    <pdfbox-version>2.0.6</pdfbox-version>
     <pgjdbc-ng-driver-version>0.7.1</pgjdbc-ng-driver-version>
     <protobuf-version>3.3.0</protobuf-version>
     <protobuf-guava-version>20.0</protobuf-guava-version>
@@ -4717,6 +4718,34 @@
         <version>${maven-archetype-packaging-version}</version>
       </dependency>
 
+
+      <!-- pdfbox -->
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>jempbox</artifactId>
+        <version>${pdfbox18-version}</version><!-- because of Tika -->
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>fontbox</artifactId>
+        <version>${pdfbox-version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>pdfbox</artifactId>
+        <version>${pdfbox-version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>pdfbox-tools</artifactId>
+        <version>${pdfbox-version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>pdfbox-debugger</artifactId>
+        <version>${pdfbox-version}</version>
+      </dependency>
+
     </dependencies>
   </dependencyManagement>
 
diff --git a/platforms/karaf/features/src/main/resources/features.xml b/platforms/karaf/features/src/main/resources/features.xml
index 6cbdbba678a..b14d60e1b3c 100644
--- a/platforms/karaf/features/src/main/resources/features.xml
+++ b/platforms/karaf/features/src/main/resources/features.xml
@@ -351,7 +351,7 @@
     <bundle dependency='true'>mvn:net.openhft/chronicle-map/${chronicle-map-version}</bundle>
     <bundle dependency='true'>mvn:net.openhft/chronicle-queue/${chronicle-queue-version}</bundle>
     <bundle dependency='true'>mvn:net.openhft/chronicle-engine/${chronicle-engine-version}</bundle>
-    <bundle dependency='true'>mvn:net.openhft/compiler/${openhft-compiler-version}</bundle>    
+    <bundle dependency='true'>mvn:net.openhft/compiler/${openhft-compiler-version}</bundle>
     <bundle>mvn:org.apache.camel/camel-chronicle/${project.version}</bundle>
   </feature>
   <feature name='camel-chunk' version='${project.version}' resolver='(obr)' start-level='50'>
@@ -837,7 +837,7 @@
     <bundle dependency='true'>wrap:mvn:com.auth0/java-jwt/${grpc-java-jwt-version}</bundle>
     <bundle dependency='true'>wrap:mvn:com.google.auth/google-auth-library-oauth2-http/${grpc-google-auth-library-version}</bundle>
     <bundle dependency='true'>wrap:mvn:com.google.auth/google-auth-library-credentials/${grpc-google-auth-library-version}</bundle>
-    <bundle>mvn:org.apache.camel/camel-grpc/${project.version}</bundle>    
+    <bundle>mvn:org.apache.camel/camel-grpc/${project.version}</bundle>
   </feature>
   <feature name='camel-gson' version='${project.version}' resolver='(obr)' start-level='50'>
     <feature version='${project.version}'>camel-core</feature>
@@ -1707,7 +1707,6 @@
     <bundle dependency='true'>mvn:org.bouncycastle/bcpkix-jdk15on/${bouncycastle-version}</bundle>
     <bundle dependency='true'>mvn:org.apache.pdfbox/pdfbox/${pdfbox-version}</bundle>
     <bundle dependency='true'>mvn:org.apache.pdfbox/fontbox/${pdfbox-version}</bundle>
-    <bundle dependency='true'>mvn:org.apache.pdfbox/jempbox/${pdfbox-version}</bundle>
     <bundle>mvn:org.apache.camel/camel-pdf/${project.version}</bundle>
   </feature>
   <feature name='camel-pgevent' version='${project.version}' resolver='(obr)' start-level='50'>
diff --git a/platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml b/platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml
index dca4625cfa3..8cac9afae17 100644
--- a/platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml
+++ b/platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml
@@ -3180,6 +3180,31 @@
         <version>2.4.2</version>
       </dependency>
       <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>fontbox</artifactId>
+        <version>2.0.6</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>jempbox</artifactId>
+        <version>1.8.13</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>pdfbox</artifactId>
+        <version>2.0.6</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>pdfbox-debugger</artifactId>
+        <version>2.0.6</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>pdfbox-tools</artifactId>
+        <version>2.0.6</version>
+      </dependency>
+      <dependency>
         <groupId>org.apache.ws.commons.axiom</groupId>
         <artifactId>axiom-api</artifactId>
         <version>1.2.14</version>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Nov/17 12:09;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2073
",,,,,,,,,,,,,,,,,,,,,,,,,
Wrong check in ConnectorCatalogNexusRepository,CAMEL-11813,13104488,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,zregvart,zregvart,zregvart,23/Sep/17 09:03,23/Sep/17 09:13,13/Mar/19 22:20,23/Sep/17 09:13,,,,,,,,,,,,,,,,2.20.0,,,,,,,,,,,0,,,,"{{ConnectorCatalogNexusRepository}} at 109 checks if the return of {{loadConnectorJSonSchema}} is {{null}} but it never can be null, it could hold three null values instead.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 23 09:13:06 UTC 2017,,,,,,,0|i3kg6n:,9223372036854775807,,,,,,,,,,23/Sep/17 09:13;zregvart;Fixed via [PR#1953|https://github.com/apache/camel/pull/1953],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-facebook should not transitively depend on spi-annotations,CAMEL-11779,13102764,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,ceefour,ceefour,16/Sep/17 12:09,18/Sep/17 13:28,13/Mar/19 22:20,18/Sep/17 13:28,2.19.3,,,,,,,,,,,,,,,2.20.0,,,,,camel-facebook,,,,,,0,,,,"{noformat}
[WARNING] spi-annotations-2.19.3.jar, camel-core-2.19.3.jar define 7 overlapping classes: 
[WARNING]   - org.apache.camel.spi.UriParam
[WARNING]   - org.apache.camel.spi.UriEndpoint
[WARNING]   - org.apache.camel.spi.UriParams
[WARNING]   - org.apache.camel.spi.UriPath
[WARNING]   - org.apache.camel.spi.AsPredicate
[WARNING]   - org.apache.camel.spi.AsEndpointUri
[WARNING]   - org.apache.camel.spi.Metadata
[WARNING] maven-shade-plugin has detected that some class files are
[WARNING] present in two or more JARs. When this happens, only one
[WARNING] single version of the class is copied to the uber jar.
{noformat}

While harmless, it'd be appreciated if there's no duplication, so there's no warning and saves space (in unshaded builds).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-18 09:40:32.975,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 18 13:28:43 UTC 2017,,,,,,,0|i3k5lr:,9223372036854775807,,,,,,,,,,18/Sep/17 09:40;davsclaus;This is by design where those spi annotations are built first before camel-core,"18/Sep/17 09:45;ceefour;But wait, if that is true then the classes should not be in camel-core, right? Since it depends on spi-annotations anyway.",18/Sep/17 09:49;davsclaus;No we shade/copy them in,"18/Sep/17 09:58;ceefour;But if that's also true, why end applications need to depend on spi-annotations ?

You should mark it, say, optional=true. So that camel-core can still depend on it but does not make it transitive to the users (apps) of camel.","18/Sep/17 10:06;davsclaus;They are not transitive, look at the pom on maven central
https://repo1.maven.org/maven2/org/apache/camel/camel-core/2.19.3/camel-core-2.19.3.pom

And the maven tree of an example is

{code}
davsclaus:/Users/davsclaus/workspace/camel/examples/camel-example-console (master)/$ mvn dependency:tree
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: Console 2.20.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-dependency-plugin:2.10:tree (default-cli) @ camel-example-console ---
[INFO] org.apache.camel.example:camel-example-console:jar:2.20.0-SNAPSHOT
[INFO] +- org.apache.camel:camel-core:jar:2.20.0-SNAPSHOT:compile
[INFO] |  \- org.slf4j:slf4j-api:jar:1.7.22:compile
[INFO] +- org.apache.camel:camel-spring:jar:2.20.0-SNAPSHOT:compile
[INFO] |  +- org.springframework:spring-core:jar:4.3.11.RELEASE:compile
[INFO] |  |  \- commons-logging:commons-logging:jar:1.2:compile
[INFO] |  +- org.springframework:spring-aop:jar:4.3.11.RELEASE:compile
[INFO] |  +- org.springframework:spring-context:jar:4.3.11.RELEASE:compile
[INFO] |  +- org.springframework:spring-beans:jar:4.3.11.RELEASE:compile
[INFO] |  +- org.springframework:spring-expression:jar:4.3.11.RELEASE:compile
[INFO] |  \- org.springframework:spring-tx:jar:4.3.11.RELEASE:compile
[INFO] +- org.apache.camel:camel-stream:jar:2.20.0-SNAPSHOT:compile
[INFO] +- org.apache.logging.log4j:log4j-api:jar:2.8.2:runtime
[INFO] +- org.apache.logging.log4j:log4j-core:jar:2.8.2:runtime
[INFO] +- org.apache.logging.log4j:log4j-slf4j-impl:jar:2.8.2:runtime
[INFO] +- com.sun.xml.bind:jaxb-core:jar:2.2.11:compile
[INFO] \- com.sun.xml.bind:jaxb-impl:jar:2.2.11:compile
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
{code}
","18/Sep/17 12:26;ceefour;Aha, I think I found it :

{noformat}
[INFO] +- org.apache.camel:camel-core:jar:2.19.3:compile
[INFO] |  +- com.sun.xml.bind:jaxb-core:jar:2.2.11:compile
[INFO] |  \- com.sun.xml.bind:jaxb-impl:jar:2.2.11:compile
[INFO] +- org.apache.camel:camel-spring-javaconfig:jar:2.19.3:compile
[INFO] |  +- org.apache.camel:camel-spring:jar:2.19.3:compile
[INFO] |  |  +- org.springframework:spring-aop:jar:4.3.11.RELEASE:compile
[INFO] |  |  +- org.springframework:spring-context:jar:4.3.11.RELEASE:compile
[INFO] |  |  +- org.springframework:spring-beans:jar:4.3.11.RELEASE:compile
[INFO] |  |  \- org.springframework:spring-expression:jar:4.3.11.RELEASE:compile
[INFO] |  \- org.apache.servicemix.bundles:org.apache.servicemix.bundles.cglib:jar:3.2.4_1:compile
[INFO] +- org.apache.camel:camel-rss:jar:2.19.3:compile
[INFO] |  +- org.apache.camel:camel-atom:jar:2.19.3:compile
[INFO] |  |  +- commons-codec:commons-codec:jar:1.10:compile
[INFO] |  |  +- org.apache.abdera:abdera-core:jar:1.1.3:compile
[INFO] |  |  |  +- org.apache.abdera:abdera-i18n:jar:1.1.3:compile
[INFO] |  |  |  \- org.apache.geronimo.specs:geronimo-activation_1.1_spec:jar:1.1:compile
[INFO] |  |  +- org.apache.abdera:abdera-parser:jar:1.1.3:compile
[INFO] |  |  |  +- org.apache.geronimo.specs:geronimo-stax-api_1.0_spec:jar:1.0.1:compile
[INFO] |  |  |  \- jaxen:jaxen:jar:1.1.6:compile
[INFO] |  |  +- org.apache.ws.commons.axiom:axiom-api:jar:1.2.14:compile
[INFO] |  |  |  \- org.apache.james:apache-mime4j-core:jar:0.7.2:compile
[INFO] |  |  \- org.apache.ws.commons.axiom:axiom-impl:jar:1.2.14:compile
[INFO] |  |     \- org.codehaus.woodstox:woodstox-core-asl:jar:4.1.4:compile
[INFO] |  |        \- org.codehaus.woodstox:stax2-api:jar:3.1.1:compile
[INFO] |  \- rome:rome:jar:1.0:compile
[INFO] |     \- jdom:jdom:jar:1.0:compile
[INFO] +- org.apache.camel:camel-facebook:jar:2.19.3:compile
[INFO] |  +- org.apache.camel:spi-annotations:jar:2.19.3:compile
[INFO] |  \- org.facebook4j:facebook4j-core:jar:2.4.8:compile
[INFO] +- org.apache.camel:camel-spring-boot-starter:jar:2.19.3:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:1.5.7.RELEASE:compile
[INFO] |  |  +- org.springframework.boot:spring-boot:jar:1.5.7.RELEASE:compile
[INFO] |  |  +- org.springframework.boot:spring-boot-autoconfigure:jar:1.5.7.RELEASE:compile
[INFO] |  |  \- org.springframework.boot:spring-boot-starter-logging:jar:1.5.7.RELEASE:compile
[INFO] |  |     \- org.slf4j:log4j-over-slf4j:jar:1.7.25:compile
[INFO] |  +- org.apache.camel:camel-spring-boot:jar:2.19.3:compile
[INFO] |  \- org.apache.camel:camel-core-starter:jar:2.19.3:compile
[INFO] |     \- com.github.ben-manes.caffeine:caffeine:jar:2.3.5:compile
[INFO] +- org.apache.camel:camel-test-spring:jar:2.19.3:test
[INFO] |  +- org.apache.camel:camel-test:jar:2.19.3:test
[INFO] |  \- org.springframework:spring-test:jar:4.3.11.RELEASE:test
{noformat}

I think the bug is in camel-facebook's pom. I don't see spi-annotations depended by other camel artifacts.","18/Sep/17 13:28;davsclaus;Thanks yeah that is a mistake, just fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,
MockEndpoint.expectedPropertyReceived needs improvement,CAMEL-11589,13089416,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,saravanakumar,saravanakumar,24/Jul/17 07:41,31/Jul/17 04:46,13/Mar/19 22:20,25/Jul/17 12:18,2.19.1,,,,,,,,,,,,,,,2.20.0,,,,,camel-core,,,,,,0,,,,"In MockEndpoint.expectedPropertyReceived, it is not possible to set expectation that the property is absent, or its value is null.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-24 07:44:14.363,,,no_permission,,Moderate,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 25 12:18:32 UTC 2017,,,,,,,0|i3hwun:,9223372036854775807,,,,,,,,,,"24/Jul/17 07:44;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/1842

    CAMEL-11589: Fixing issue with MockEndpoint.expectedPropertyReceived

    Please review the PR for https://issues.apache.org/jira/browse/CAMEL-11589
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1842.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1842
    
----
commit 4efc7af82cbb9e34149c8ecb18f527c7e89936ab
Author: Saravanakumar Selvaraj <saravanakumar.java@gmail.com>
Date:   2017-07-24T07:41:15Z

    CAMEL-11589: Fixing issue with MockEndpoint.expectedPropertyReceived

----
",25/Jul/17 12:18;davsclaus;Thanks for the PR,"25/Jul/17 12:18;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1842
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hipchat: Unable to send to room name containing spaces,CAMEL-11520,13085341,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,andyrbell,andyrbell,06/Jul/17 22:24,07/Jul/17 07:42,13/Mar/19 22:20,07/Jul/17 07:42,2.19.1,,,,,,,,,,,,,,,2.18.5,2.19.2,2.20.0,,,camel-hipcat,,,,,,0,,,,The room name needs to be URL encoded.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-06 22:39:46.797,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 07 07:42:35 UTC 2017,,,,,,,0|i3h7sn:,9223372036854775807,,,,,,,,,,"06/Jul/17 22:39;githubbot;GitHub user andyrbell opened a pull request:

    https://github.com/apache/camel/pull/1807

    CAMEL-11520 URL-encode hipchat room names

    This allows messages to be sent to room names containing spaces or other URL-unsafe characters.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/andyrbell/camel CAMEL-11520

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1807.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1807
    
----
commit 175635f4adf4d3b1521bd7c6ea2add4b04b89f1c
Author: Andy Bell <andyrbell@gmail.com>
Date:   2017-07-06T22:37:38Z

    CAMEL-11520 URL-encode hipchat room names
    
    This allows messages to be sent to room names containing spaces or other URL-unsafe characters.

----
","07/Jul/17 07:41;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1807
",07/Jul/17 07:42;davsclaus;Thanks for the PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException for invalid payload with session handling enabled,CAMEL-11486,13083741,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,siano,siano,siano,30/Jun/17 10:49,30/Jun/17 11:03,13/Mar/19 22:20,30/Jun/17 11:03,2.19.1,,,,,,,,,,,,,,,2.19.2,2.20.0,,,,camel-cxf,,,,,,0,,,,"If HTTP session handling is enabled for a CXF producer endpoint and an invalid payload is provided to the endpoint a NullPointerException is thrown instead of an Illegal state exception.

This fix is just to add a null check to the inMessage of the CXF exchange. This will only affect the thrown exception not actual message processing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-06-30 10:49:51.0,,,Patch Available,,,,0|i3gxyf:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix camel-example-spring-boot-rest-jpa example,CAMEL-11232,13069413,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,zregvart,zregvart,zregvart,05/May/17 10:58,05/May/17 11:09,13/Mar/19 22:20,05/May/17 11:09,,,,,,,,,,,,,,,,2.20.0,,,,,,,,,,,0,,,,The tests present in {{camel-example-spring-boot-rest-jpa}} example are failing.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,,9223372036854775807,,,2017-05-05 10:58:41.0,,,,,,,0|i3ejaf:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
