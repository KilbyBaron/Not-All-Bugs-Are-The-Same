Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocked),Outward issue link (Blocker),Outward issue link (Cloners),Outward issue link (Container),Outward issue link (Container),Outward issue link (Duplicate),Outward issue link (Problem/Incident),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Regression),Outward issue link (Regression),Outward issue link (Supercedes),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue URL),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Component part of Page check in AjaxRequestHandler breaks applications,WICKET-6528,13136264,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Blocker,Fixed,dashorst,dashorst,dashorst,05/Feb/18 12:40,26/May/18 12:03,13/Mar/19 23:18,26/May/18 12:03,8.0.0-M8,,,,,,,,8.0.0,,,,wicket,,,0,,,,,,,,"The check if a component is part of the page hierarchy where an Ajax response is generated for breaks client applications in a most unpleasant way. While this check is good™, it should only generate errors in development mode. In deployment mode it should ignore the component (like in versions prior to Wicket 8) and log it as an error (which is expected: the application is in error).

See method `public void add(Component... components)` in AjaxRequestHandler for more details.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-05 12:58:06.705,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 05 15:35:52 UTC 2018,,,,,,0|i3psqf:,9223372036854775807,,,,,,,,"05/Feb/18 12:58;jira-bot;Commit 60c94cd6927a2ec6962639ead96f57f127f954e5 in wicket's branch refs/heads/WICKET-6528 from [~dashorst]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=60c94cd ]

Don't block user when component not on Page using AJAX

Re-instate the behavior that was in versions < 8.0 that a component
added to an AjaxRequestTarget but is not part of the page, would be
ignored (or failed to refresh with an error in the JavaScript console).

So instead of always throwing an error, we only do so in DEVELOPMENT
mode causing an error page, and in DEPLOYMENT mode we only log the
fault, but don't break the application hard for the user: the component
refresh is ignored, just as it would've been in versions prior to 8.

Fixes WICKET-6528
","05/Feb/18 12:59;githubbot;GitHub user dashorst opened a pull request:

    https://github.com/apache/wicket/pull/265

    WICKET-6528 Don't block user when component not on Page using AJAX

    Re-instate the behavior that was in versions < 8.0 that a component
    added to an AjaxRequestTarget but is not part of the page, would be
    ignored (or failed to refresh with an error in the JavaScript console).
    
    So instead of always throwing an error, we only do so in DEVELOPMENT
    mode causing an error page, and in DEPLOYMENT mode we only log the
    fault, but don't break the application hard for the user: the component
    refresh is ignored, just as it would've been in versions prior to 8.
    
    Fixes WICKET-6528

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6528

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/265.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #265
    
----
commit 60c94cd6927a2ec6962639ead96f57f127f954e5
Author: Martijn Dashorst <martijn.dashorst@...>
Date:   2018-02-05T12:57:54Z

    Don't block user when component not on Page using AJAX
    
    Re-instate the behavior that was in versions < 8.0 that a component
    added to an AjaxRequestTarget but is not part of the page, would be
    ignored (or failed to refresh with an error in the JavaScript console).
    
    So instead of always throwing an error, we only do so in DEVELOPMENT
    mode causing an error page, and in DEPLOYMENT mode we only log the
    fault, but don't break the application hard for the user: the component
    refresh is ignored, just as it would've been in versions prior to 8.
    
    Fixes WICKET-6528

----
","06/Feb/18 14:36;jira-bot;Commit 3be55cf5a24982cfca400225aabb6c4296859a7d in wicket's branch refs/heads/master from [~dashorst]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3be55cf ]

Don't block user when component not on Page using AJAX

Re-instate the behavior that was in versions < 8.0 that a component
added to an AjaxRequestTarget but is not part of the page, would be
ignored (or failed to refresh with an error in the JavaScript console).

So instead of always throwing an error, we only do so in DEVELOPMENT
mode causing an error page, and in DEPLOYMENT mode we only log the
fault, but don't break the application hard for the user: the component
refresh is ignored, just as it would've been in versions prior to 8.

Fixes WICKET-6528
","05/Mar/18 15:35;githubbot;Github user dashorst closed the pull request at:

    https://github.com/apache/wicket/pull/265
","05/Mar/18 15:35;githubbot;Github user dashorst commented on the issue:

    https://github.com/apache/wicket/pull/265
  
    Is merged with commit https://github.com/apache/wicket/commit/3be55cf5a24982cfca400225aabb6c4296859a7d
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When form.setDefaultButton(button) is called, the form is not displayed",WICKET-6540,13140544,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Blocker,Fixed,svenmeier,francois,francois,23/Feb/18 16:37,23/Feb/18 17:29,13/Mar/19 23:18,23/Feb/18 17:10,8.0.0-M8,,,,,,,,8.0.0,,,,wicket,,,0,,,,,,,,"When form.setDefaultButton(button) is called, the form is not displayed.

Is this linked to WICKET-6527 ?",,,,,,,,,,,,,,,,,,,,,,,,,23/Feb/18 16:36;francois;quickstart.zip;https://issues.apache.org/jira/secure/attachment/12911751/quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2018-02-23 17:10:37.265,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 23 17:29:16 UTC 2018,,,,,,0|i3qj47:,9223372036854775807,,,,,,,,"23/Feb/18 17:10;svenmeier;Yes, my bad: changed two lines two often.

Tested and fixed now.","23/Feb/18 17:29;jira-bot;Commit 8042ef56ab8ff19421faf58e11ac102a48ab8880 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8042ef5 ]

WICKET-6540 ensure hidden div for default button is rendered correctly
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SubmitLink.onSubmit not invoked when using GET-method,WICKET-6525,13135845,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Blocker,Fixed,svenmeier,papegaaij,papegaaij,02/Feb/18 19:08,22/Feb/18 21:48,13/Mar/19 23:18,22/Feb/18 21:48,8.0.0-M8,,,,,,,,8.0.0,,,,wicket,,,0,,,,,,,,"When using method GET on a form, onSubmit is not invoked on the submitting component, such as a SubmitLink. This is regression since 7.x. The attached quickstart renders 'form.onSubmit' for wicket 8.0.0-SNAPSHOT and 'link.onSubmit, form.onSubmit' for 7.9.0.",,,,,,,,,,,,,,,,,,,,,,,,,02/Feb/18 19:09;papegaaij;myproject.tar.gz;https://issues.apache.org/jira/secure/attachment/12909035/myproject.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2018-02-02 23:44:12.822,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Feb 22 21:48:44 UTC 2018,,,,,,0|i3pq5b:,9223372036854775807,,,,,,,,"02/Feb/18 19:24;papegaaij;I've identified the commit that broke this:

[https://github.com/apache/wicket/commit/25567ba12214e2d32b27fec4789833a5d89cc59a]

This was for WICKET-6348","02/Feb/18 23:44;jira-bot;Commit 36b8402636994fcf73a4e7a56470520d55144030 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=36b8402 ]

WICKET-6525 url parameter as hidden field
","02/Feb/18 23:50;svenmeier;I've pushed a quick fix.

I'll have to check how to test this properly and whether this works for all corner cases though.",03/Feb/18 08:03;papegaaij;Monday I'll continue testing our application. I'll let you know how this fix works out in this application. Thanks.,"04/Feb/18 20:14;jira-bot;Commit abedb468e52f6db07d1cf689b0fbd426fca36313 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=abedb46 ]

WICKET-6525 restored check for onsubmit on form

which was lost in WICKET_6348
","04/Feb/18 20:19;svenmeier;Apparently I was too eager to replace the hidden field in WICKET-6348 :(

I've restored the missing functionality and GET request should work as POST now. I'll do more tweaking next week - actually I think there might be another bug lurking, but applications should work fine for now.","05/Feb/18 15:28;papegaaij;I've reran our testsuite with a fresh wicket 8 build (commit ec7a27e832d3428f227330c1cf37205d7e52b608) and now all our tests pass. Naturally this does not guarantee correctness of Wicket, but it does show this bug has been fixed for us.",05/Feb/18 15:39;svenmeier;Many thanks. I'll keep this open until I've given it more tests.,"22/Feb/18 21:45;jira-bot;Commit 57ae17dc51cb2bde2c5cda60171d9098862d5741 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=57ae17d ]

WICKET-6525 dynamic hidden fields

-use id for div containing hidden parameter fields
-getJsForListenerUrl changes hidden parameters for get requests
-reuse writeParamsAsHiddenFields in getJsForListenerUrl()
","22/Feb/18 21:48;svenmeier;Submit of forms to listener urls is improved now, and tests assure that parameters are not added to the action url in case of a get method.",,,,,,,,,,,,,,,,,,,,,,,,,,
Feedback from onSubmit not rendered on stateless pages,WICKET-6529,13136268,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Blocker,Fixed,svenmeier,papegaaij,papegaaij,05/Feb/18 12:54,06/Feb/18 12:48,13/Mar/19 23:18,05/Feb/18 14:27,8.0.0-M8,,,,,,,,8.0.0-M9,,,,wicket,,,0,,,,,,,,"On a stateless page, feedback added in onSubmit is not displayed because the FeedbackPanel collects its feedbackmessages prior to onSubmit being called. This is a regression since 8.0.0-M8, caused by [https://github.com/apache/wicket/commit/c27a57b31a0e519ef15dfe08b425d85f9a24f685] (for WICKET-6503).

I'll add a testcase to show the problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-05 12:56:01.802,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Feb 05 14:27:54 UTC 2018,,,,,,0|i3psrb:,9223372036854775807,,,,,,,,"05/Feb/18 12:56;jira-bot;Commit 080df220c5a2ed8ccf90fde90e9469525f259ecc in wicket's branch refs/heads/master from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=080df22 ]

WICKET-6529: added testcase
","05/Feb/18 14:15;jira-bot;Commit 7a5ba65c1ee8364e5fd749ead5e8836eb0c87bd8 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7a5ba65 ]

WICKET-6529 stateless page must no prepare feedbacks

before rendering; added AutoCloseable sugar
","05/Feb/18 14:27;svenmeier;Another fact I was ignorant of:

On *stateless* pages no feedbackPanel is prepared during initialization - contrary to all other components on that page.

This is done to prevent feedbackModels from collecting messages *prematurely.*

Interesting enough this has two negative implications:
 * you can't have links inside a feedback component if used on a stateless page
 * all other models on that stateless page *are prematurely* fetched, which might be confusing e.g. in case of repeaters that should change their model in response to a click (e.g. deleting a row).

We would have to detach the whole page to give it a clean state, but that probably would have other negative consequences.","05/Feb/18 14:27;svenmeier;Fixed by skipping preparation of all feedbacks.

Big thanks for the test!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Atmosphere Eventbus throws Concurrent Modification Exception,WICKET-5736,12751019,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Blocker,Fixed,papegaaij,dke,dke,28/Oct/14 07:54,28/Oct/14 09:56,13/Mar/19 23:18,28/Oct/14 08:43,6.17.0,,,,,,,,6.18.0,7.0.0-M4,,,wicket-atmosphere,,,0,,,,,,,,"As already commented in WICKET-5619 the problem of Concurrent Modification Exceptions are still valid like you can see on the following description when the exception occurs:

You have multiple users surfing a page (Page A) which has subscribes for an event (Event A). Now a user (User A) does an action which triggers the Event A to get posted to the Eventbus. While the eventbus posts the event to the registered listeners, a User B leaves the page and unregisters for the event, f.e because he now want's surfs another page, which does not subscribe to the event. Now the ConcurrentModificationException occurs because the unregistering of User B changed the list of listeners while the eventbus is still posting the event to the different listeners. The interesting thing is, that not the initial starter of the event crashes, but all other users which are trying to surf other pages which are listening on the event gets the exception.

In my opinion this issue can be solved if the line: 
{code} Collection<EventSubscription> eventSubscriptions = subscriptions.get(key);
subscriptionsForPage = Iterables.filter(eventSubscriptions, new EventFilter(event)); {code}
makes an copy of the EventSubscriptions an works on this copy instead on the original list. When the eventbus now trys to post the event on a component which does not exists anymore he could try to unregister the component from the original subscribers list. 

Also:
{code}
Iterable<EventSubscription> subscriptionsForPage;
 		synchronized (this)
 		{
 			key = trackedPages.get(resource.uuid());
			Collection<EventSubscription> eventSubscriptions = subscriptions.get(key);
			subscriptionsForPage = Iterables.filter(eventSubscriptions, new EventFilter(event));
 		}
{code}
creates a lazy iterator on the the {{eventSubscriptions}}, and will be iterated outside the synchronized block.
You need to create a copy of the eventSubscriptions, because this might be changed during the unregistering process:

{code}
public synchronized void unregister(Component component)
	{
		...	
		Collection<EventSubscription> subscriptionsForPage = subscriptions.get(pageKey);
		Iterator<EventSubscription> it = subscriptionsForPage.iterator();
		while (it.hasNext())
		{
			if (it.next().getComponentPath().equals(componentPath))
				it.remove();
		}
	}
{code}
{{it.remove()}} changes the iterator within the lazy Iterator!

It is possible to have a quick look at it? This problem affected our productive system!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-10-28 08:41:15.632,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 28 09:56:21 UTC 2014,,,,,,0|i21nov:,9223372036854775807,,,,,,,,"28/Oct/14 08:41;jira-bot;Commit 8668a151d69aeb0c900c55b67afc57f4fbd93df4 in wicket's branch refs/heads/wicket-6.x from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8668a15 ]

WICKET-5736: create copy of list to prevent ConcurrentModificationException
","28/Oct/14 08:41;jira-bot;Commit 5b8907a0663fffe7c69abe32e9eeb2ae598e6cc7 in wicket's branch refs/heads/master from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5b8907a ]

WICKET-5736: create copy of list to prevent ConcurrentModificationException
","28/Oct/14 08:43;papegaaij;You are right, the filtered list should be backed by a copy of the subscriptionlist to prevent ConcurrentModificationException when pages are unsubscribed while broadcasting events.","28/Oct/14 09:33;dke;Thank you for the quick fix. 
Is there already a date when the 6.18.0 get released? ",28/Oct/14 09:56;papegaaij;This question was asked today on the dev list: https://mail-archives.apache.org/mod_mbox/wicket-dev/201410.mbox/%3CCAMomwMqm91mR%3DST52T9sqt7HqQ%3D8X%3DEmP1M_sBh6NzmAZBUsTQ%40mail.gmail.com%3E,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDI Injection no longer working on anonymous classes,WICKET-5264,12655983,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Blocker,Fixed,papegaaij,papegaaij,papegaaij,03/Jul/13 08:06,10/Jul/13 10:37,13/Mar/19 23:16,10/Jul/13 10:37,6.9.0,,,,,,,,6.9.1,,,,wicket-cdi,,,0,,,,,,,,"The changes made for WICKET-5226 (no longer injecting anonymous inner classes) breaks our applications badly, and I suspect we are not the only one. The following pattern is quite common:

add(new Link<Void>(""rest"") {
	@Inject
	private AccountRestResourceClient accountClient;

	@Override
	public void onClick() {....}
}

In Wicket 6.9.0, this no longer works: accountClient will not get injected because the Link is an anonymous inner class. To make things worse, even in concrete classes, you can't rely on injection to work, because someone could subclass your class as an anonymous inner class and injection will again not work.

This change was made because Weld 2.0 throws an exception when trying to create an InjectionTarget for anonymous classes. This will be reduced to a log-warning in 2.0.2: https://issues.jboss.org/browse/WELD-1441",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,336258,,,2013-07-03 08:06:56.0,,,,,,0|i1m02n:,336582,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WicketTester.destroy sometimes hangs,WICKET-6603,13193778,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Critical,Fixed,solomax,solomax,solomax,24/Oct/18 07:48,30/Oct/18 12:58,13/Mar/19 23:18,26/Oct/18 15:56,8.1.0,,,,,,,,8.2.0,9.0.0,,,wicket-core,,,0,,,,,,,,"Hi all,

I'm experiencing some jetty-shutdown problems after upgrading from 7.9 to
 8.1. See the stacktrace below.

Is there a simple remedy for this? (or a known cause?) It is annoying
 because this error prevents Jetty from shutting down, and I use this in my
 tests, so my tests never end... :(

Btw. I'm on java 10.0.2 and jetty version 9.2.5.v20141112
{code:java}
2018-10-12 11:24:25,738 ERROR - AsynchronousDataStore      -
java.lang.InterruptedException
        at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(AbstractQueuedSynchronizer.java:1259)
        at java.base/java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:317)
        at
java.base/java.util.concurrent.LinkedBlockingQueue.offer(LinkedBlockingQueue.java:373)
        at
org.apache.wicket.pageStore.AsynchronousDataStore.storeData(AsynchronousDataStore.java:207)
        at
org.apache.wicket.pageStore.AbstractPageStore.storePageData(AbstractPageStore.java:119)
        at
org.apache.wicket.pageStore.DefaultPageStore.storePage(DefaultPageStore.java:66)
        at
org.apache.wicket.pageStore.AsynchronousPageStore$PageSavingRunnable.run(AsynchronousPageStore.java:225)
        at java.base/java.lang.Thread.run(Thread.java:844)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-24 07:51:45.243,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 30 12:58:45 UTC 2018,,,,,,0|i3zkl3:,9223372036854775807,,,,,,,,"24/Oct/18 07:51;jira-bot;Commit 1a558850ff4cd4bb56c4f32a613f116dde7ea617 in wicket's branch refs/heads/WICKET-6603-wickettester-hang from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1a55885 ]

[WICKET-6603] Asypc page/data store destroyed without hanging
","24/Oct/18 07:52;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/wicket/pull/300

    [WICKET-6603] Asypc page/data store destroyed without hanging

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6603-wickettester-hang

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/300.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #300
    
----
commit 1a558850ff4cd4bb56c4f32a613f116dde7ea617
Author: Maxim Solodovnik <solomax666@...>
Date:   2018-10-24T07:51:26Z

    [WICKET-6603] Asypc page/data store destroyed without hanging

----
","25/Oct/18 14:46;githubbot;Github user solomax commented on the issue:

    https://github.com/apache/wicket/pull/300
  
    nice catch :)
    I'll update PR, thanks!
","25/Oct/18 14:49;githubbot;Github user solomax commented on the issue:

    https://github.com/apache/wicket/pull/300
  
    It would be impossible to call `pageSavingThread.join();` to ensure Thread is stopped
    Would it be OK?
","25/Oct/18 16:29;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/300
  
    I like to minimize the count of member variables:
    
    ```
    @Override
    public void destroy()
    {
    	final Thread pageSavingThread = this.pageSavingThread;
    	this.pageSavingThread = null;
    	if (pageSavingThread.isAlive())
    	{
    		try
    		{
    			pageSavingThread.join();
    
    @Override
    public void storePage(String sessionId, IManageablePage page)
    {
    	if (pageSavingThread == null)
    	{
    		return;
    	}
    ```
    
    Your boolean works fine too.
","26/Oct/18 07:43;jira-bot;Commit fc8a5ab4d6299815cd9f0f26e0eae60e605a065f in wicket's branch refs/heads/WICKET-6603-wickettester-hang from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fc8a5ab ]

[WICKET-6603] Refactored to minimize the count of member variable
","26/Oct/18 15:51;jira-bot;Commit 1a558850ff4cd4bb56c4f32a613f116dde7ea617 in wicket's branch refs/heads/wicket-8.x from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1a55885 ]

[WICKET-6603] Asypc page/data store destroyed without hanging
","26/Oct/18 15:51;jira-bot;Commit fc8a5ab4d6299815cd9f0f26e0eae60e605a065f in wicket's branch refs/heads/wicket-8.x from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fc8a5ab ]

[WICKET-6603] Refactored to minimize the count of member variable
","26/Oct/18 15:51;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/300
","26/Oct/18 15:56;jira-bot;Commit 3398764a77a6bb92d4a8859c49280b8ede77a708 in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3398764 ]

[WICKET-6603] Asypc page/data store destroyed without hanging
","30/Oct/18 12:58;jira-bot;Commit 3398764a77a6bb92d4a8859c49280b8ede77a708 in wicket's branch refs/heads/WICKET-6563 from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3398764 ]

[WICKET-6603] Asypc page/data store destroyed without hanging
",,,,,,,,,,,,,,,,,,,,,,,,,
LazyInitProxyFactory doesn't work correctly at Weblogic,WICKET-6551,13153947,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Critical,Fixed,mgrigorov,tomask79,tomask79,20/Apr/18 06:44,26/May/18 12:21,13/Mar/19 23:18,26/May/18 12:21,6.21.0,,,,,,,,6.30.0,7.11.0,8.1.0,,wicket,wicket-spring,,0,,,,,,,,"When weblogic serializes HTTP session then it's not an Wicket Application thread and Thread.currentThread().getClassLoader() can return different NOT-application classloader... which ends in LazyInitProxyFactory.readResolve() ClassNotFoundException crash...This ends in Wicket's WebSession being not saved into HTTP session which is fatal consequence....

We have sucessfully tested following patch of LazyInitProxyFactory:

 
{code:java}
static class ProxyReplacement implements IClusterable
 {
 private static final long serialVersionUID = 1L;

private final IProxyTargetLocator locator;

private final String type;

/**
 * Constructor
 * 
 * @param type
 * @param locator
 */
 public ProxyReplacement(final String type, final IProxyTargetLocator locator) \{ this.type = type; this.locator = locator; }

private Object readResolve() throws ObjectStreamException
 {
 Class<?> clazz = WicketObjects.resolveClass(type);
 if (clazz == null)
 {
 try

{ clazz = Class.forName(type, false, WicketObjects.class.getClassLoader()); System.out.println(""Clazz resolved through application classloade""); }

catch (ClassNotFoundException e)

{ ClassNotFoundException cause = new ClassNotFoundException( ""Could not resolve type ["" + type + ""] with the currently configured org.apache.wicket.application.IClassResolver""); throw new WicketRuntimeException(cause); }

}
 return LazyInitProxyFactory.createProxy(clazz, locator);
 }
}
{code}
With this patched LazyInitProxyFactory class problem went away. Can you please accomodate this fix into Wicket 6.x line?

 

Forum link: [http://apache-wicket.1842946.n4.nabble.com/Wicket-s-LazyInitProxyFactory-runs-incorrectly-at-WebLogic-td4680236.html]

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-26 12:20:06.55,,,no_permission,,,,Important,,,,,,,,9223372036854775807,,,Sat May 26 12:21:06 UTC 2018,,,,,,0|i3st2v:,9223372036854775807,,,,,,,,"26/May/18 12:20;jira-bot;Commit 6a7b097ff682e261608ebe58e8ca1f0c63f3b472 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6a7b097 ]

WICKET-6551 LazyInitProxyFactory doesn't work correctly at Weblogic

Try to load the class with the thread's context class loader and Wicket's classes loader as a fallbacks
","26/May/18 12:20;jira-bot;Commit 7b46091afacf5f29ca8e54b908d64f42f16a0fe6 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7b46091 ]

WICKET-6551 LazyInitProxyFactory doesn't work correctly at Weblogic

Try to load the class with the thread's context class loader and Wicket's classes loader as a fallbacks

(cherry picked from commit 6a7b097ff682e261608ebe58e8ca1f0c63f3b472)
","26/May/18 12:20;jira-bot;Commit efa51293df700bee3726571fb7cfef5c23c4fb41 in wicket's branch refs/heads/wicket-8.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=efa5129 ]

WICKET-6551 LazyInitProxyFactory doesn't work correctly at Weblogic

Try to load the class with the thread's context class loader and Wicket's classes loader as a fallbacks

(cherry picked from commit 6a7b097ff682e261608ebe58e8ca1f0c63f3b472)
","26/May/18 12:21;jira-bot;Commit 4d4a69062dc34be29bf61a152b34d2dcf2b76a21 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4d4a690 ]

WICKET-6551 LazyInitProxyFactory doesn't work correctly at Weblogic

Try to load the class with the thread's context class loader and Wicket's classes loader as a fallbacks

(cherry picked from commit 6a7b097ff682e261608ebe58e8ca1f0c63f3b472)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Argument 'markup' may not be null.,WICKET-6545,13147721,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Critical,Fixed,svenmeier,KAHA,KAHA,24/Mar/18 15:56,28/Mar/18 15:14,13/Mar/19 23:18,28/Mar/18 15:14,8.0.0-M9,,,,,,,,8.0.0,,,,wicket,,,0,,,,,,,,"After switch in maven POM from version M8 to M9 wicket has satred reporting problem

""Argument 'markup' may not be null."" during render component which is descendant of MarkupContainer.

 

In version 8.0.0-M8 was everythig allright, but in version 8.0.0-M9, there is error

Message: Argument 'markup' may not be null.

Root cause:

java.lang.IllegalArgumentException: Argument 'markup' may not be null.
at org.apache.wicket.util.lang.Args.notNull(Args.java:41)
at org.apache.wicket.markup.MarkupStream.<init>(MarkupStream.java:65)
at org.apache.wicket.markup.html.TransparentWebMarkupContainer.renderHeadForInnerSiblings(TransparentWebMarkupContainer.java:134)
at org.apache.wicket.markup.html.TransparentWebMarkupContainer.internalRenderHead(TransparentWebMarkupContainer.java:89)
at org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy$1.component(ChildFirstHeaderRenderStrategy.java:85)
at org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor.visit(DeepChildFirstVisitor.java:96)
at org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor.visit(DeepChildFirstVisitor.java:87)
at org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor.visit(DeepChildFirstVisitor.java:87)
at org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor.visit(DeepChildFirstVisitor.java:51)
at org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy.renderChildHeaders(ChildFirstHeaderRenderStrategy.java:94)
at org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy.renderHeader(ChildFirstHeaderRenderStrategy.java:57)
at org.apache.wicket.page.PartialPageUpdate.writeHeaderContribution(PartialPageUpdate.java:551)
at org.apache.wicket.page.XmlPartialPageUpdate.writeComponent(XmlPartialPageUpdate.java:75)
at org.apache.wicket.page.PartialPageUpdate.writeComponents(PartialPageUpdate.java:262)
at org.apache.wicket.page.PartialPageUpdate.writeTo(PartialPageUpdate.java:162)
at eu.abra.web.base.AjaxRequestHandler.respond(AjaxRequestHandler.java:343)
at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:912)
at org.apache.wicket.request.RequestHandlerExecutor.execute(RequestHandlerExecutor.java:65)
at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:283)
at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:253)
at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:221)
at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:262)
at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:204)
at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:286)
at org.atmosphere.util.AtmosphereFilterChain.doFilter(AtmosphereFilterChain.java:119)
at org.atmosphere.util.AtmosphereFilterChain.invokeFilterChain(AtmosphereFilterChain.java:96)
at org.atmosphere.handler.ReflectorServletProcessor$FilterChainServletWrapper.service(ReflectorServletProcessor.java:317)
at org.atmosphere.handler.ReflectorServletProcessor.onRequest(ReflectorServletProcessor.java:160)
at org.atmosphere.cpr.AsynchronousProcessor.action(AsynchronousProcessor.java:199)
at org.atmosphere.cpr.AsynchronousProcessor.suspended(AsynchronousProcessor.java:107)
at org.atmosphere.container.BlockingIOCometSupport.service(BlockingIOCometSupport.java:63)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-24 18:04:53.951,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Mar 28 15:14:25 UTC 2018,,,,,,0|i3rqvr:,9223372036854775807,,,,,,,,"24/Mar/18 18:04;bitstorm;Hi [~KAHA],

could you reproduce the issue in a quickstart project? 

Thank you.","25/Mar/18 13:18;KAHA;Probably not, becasue the calss is part of very complex project .. 
 
But I found the problem is that the rendering has changed.
During rendering of the TransparentWebMarkupContainer component in the internalReanderHead method in M8, the isParentRendering method returns true. On other hand same method return false in M9. This leads to differences in behavior.
The actual status is right in M8. Parent is also rendered.
the isParentRendering method calls parent.isRendering () and isRendering reads
in M8 version, FLAG_RENDERING, whereas in M9 RFLAG_RENDERING. There may be something wrong about these changes.
 ","26/Mar/18 15:33;svenmeier;We have a testcase for this:

TransparentWebMarkupContainerTest#updateEmbeddedAjaxComponent()

 

... and it passes. Could you please ccheckwith latest snapshot and/or provide a better test?

 

Thanks

Sven","27/Mar/18 06:30;KAHA;Ok I can test it, but you have to tell me how can I use latest snapshot via MAVEN.",27/Mar/18 07:02;mgrigorov;You need to add the snapshots repo to your pom.xml: https://github.com/apache/wicket/blob/c5444885933d399ef4c459134ca83e8bd7d1052a/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml#L179-L190,"27/Mar/18 07:09;KAHA;Ok I put it into our POM and which version number (od id) should I put as wicket versin ? Which idenifier is for latest snapshot ?

 

<dependency>
 <groupId>org.apache.wicket</groupId>
 <artifactId>wicket-core</artifactId>
 <version>${wicket.version}</version>
 </dependency>",27/Mar/18 07:16;mgrigorov;8.0.0-SNAPSHOT,"27/Mar/18 08:31;svenmeier;I found the issue:

With WICKET-6503 the flag RFLAG_RENDERING (formerly FLAG_RENDERING) is no longer set upfront on the complete component tree, but only when the component is actually rendered *after* preparation for render (this save a complete tree traversal).

I'll amend our testcase and add a fix to TransparentWebMarkupContainer, i.e. it has to check whether its parent will be rendered (i.e. has RFLAG_PREPARED_FOR_RENDER set).

I'll update the migration guide for Component#isRendering() too.","27/Mar/18 08:50;KAHA;Ok,

than kyou, I will test it with next comming M10 :)  (or on snapshot version)","28/Mar/18 15:12;jira-bot;Commit cea08bfbd72b3b1fb4d9668b7c2a8012d3f06dac in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=cea08bf ]

WICKET-6545 isRendering() includes preparation

phase now; extended tests for TransparentWebMarkupContainer
",28/Mar/18 15:14;svenmeier;isRendering() returns true now during preparation phase (beforeRender) too,,,,,,,,,,,,,,,,,,,,,,,,,
"When an Ajax Button is submitted, AjaxFormSubmitBehavior # onSubmit is called twice",WICKET-6462,13099593,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Critical,Fixed,bitstorm,francois,francois,04/Sep/17 11:52,22/Sep/17 17:22,13/Mar/19 23:18,06/Sep/17 20:09,8.0.0-M7,,,,,,,,7.9.0,8.0.0-M8,,,wicket,,,0,,,,,,,,"When an Ajax Button is submitted, AjaxFormSubmitBehavior # onSubmit is called twice

The appears after WICKET-6455.",8.0.0-SNAPSHOT -  2017 08 31,,,,,,,,,,,,,,,,,,,,,,,,04/Sep/17 11:52;francois;wicket_quickstart.zip;https://issues.apache.org/jira/secure/attachment/12885246/wicket_quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-09-04 19:48:15.463,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Sep 22 17:22:43 UTC 2017,,,,,,0|i3jm4n:,9223372036854775807,,,,,,,,"04/Sep/17 19:48;jira-bot;Commit 2295939cca8d35e47280218a41accc708d226aec in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2295939 ]

WICKET-6462 When an Ajax Button is submitted, AjaxFormSubmitBehavior #
onSubmit is called twice","05/Sep/17 08:48;bitstorm;Hi [~francois],

the 8-SNAPSHOT should be ok now. Could you try it with your application? ","05/Sep/17 09:33;francois;Hi Andrea,

I have tested the new 8-SNAPSHOT and tt works perfectly for me

Thanks a lot !

","05/Sep/17 10:54;jira-bot;Commit 72a5d312a1dfe63349a8ab963d9126cab5525a20 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=72a5d31 ]

WICKET-6462 added regression test","05/Sep/17 15:55;jira-bot;Commit bedf3fdcd4e7ac12c6dac9694e4029e50a289f77 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bedf3fd ]

WICKET-6462 When an Ajax Button is submitted, AjaxFormSubmitBehavior #
onSubmit is called twice","05/Sep/17 15:55;jira-bot;Commit 08be805e120a08e5acd659b8c94f10702cbc5c49 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=08be805 ]

WICKET-6462 added regression test","05/Sep/17 16:01;jira-bot;Commit dc6d948790733bc99c0d9d750b6c8f27c15d5910 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=dc6d948 ]

WICKET-6462 fixed syntax for Java 7
","22/Sep/17 17:22;jira-bot;Commit 72a5d312a1dfe63349a8ab963d9126cab5525a20 in wicket's branch refs/heads/WICKET-6105-java.time from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=72a5d31 ]

WICKET-6462 added regression test",,,,,,,,,,,,,,,,,,,,,,,,,,,,
PageStore not cleared at session end,WICKET-6457,13098286,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Critical,Fixed,papegaaij,papegaaij,papegaaij,29/Aug/17 14:23,08/Sep/17 08:30,13/Mar/19 23:18,30/Aug/17 11:08,7.8.0,,,,,,,,6.28.0,7.9.0,8.0.0-M8,,wicket,,,0,,,,,,,,WICKET-6387 causes the page store not to be cleared at logout on Undertow. The problem is that Undertow does not call {{valueUnbound}} when an attribute is set to the current value (new == old). It does however call {{valueBound}}.,Undertow,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-29 14:26:50.475,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Aug 30 11:08:04 UTC 2017,,,,,,0|i3jelr:,9223372036854775807,,,,,,,,"29/Aug/17 14:26;githubbot;GitHub user papegaaij opened a pull request:

    https://github.com/apache/wicket/pull/231

    WICKET-6457: clear updating boolean when attribute is bound

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/topicusonderwijs/wicket fix-WICKET-6457

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/231.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #231
    
----
commit 61c89369c4016154cd333e204a20c9030249481d
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2017-08-29T14:25:43Z

    WICKET-6457: clear updating boolean when attribute is bound

----
","29/Aug/17 19:32;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/231
  
    +1 looks good
","30/Aug/17 07:16;githubbot;Github user martin-g commented on the issue:

    https://github.com/apache/wicket/pull/231
  
    +1
","30/Aug/17 11:01;jira-bot;Commit f8ffe3e1308e2ac9b51bb6fd27380abf175ab9e7 in wicket's branch refs/heads/wicket-7.x from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f8ffe3e ]

WICKET-6457: clear updating boolean when attribute is bound
","30/Aug/17 11:02;jira-bot;Commit 76460108ce7817d340d3e09c05d6bb279de84730 in wicket's branch refs/heads/master from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7646010 ]

WICKET-6457: clear updating boolean when attribute is bound
","30/Aug/17 11:04;jira-bot;Commit 45227b059500df7796c8f779029b5046a90e72f8 in wicket's branch refs/heads/wicket-6.x from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=45227b0 ]

WICKET-6457: clear updating boolean when attribute is bound
","30/Aug/17 11:05;githubbot;Github user papegaaij closed the pull request at:

    https://github.com/apache/wicket/pull/231
","30/Aug/17 11:08;papegaaij;Updating is now cleared on valueBound, this is verified to fix the issue on undertow.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.json migration issue,WICKET-6329,13046849,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Critical,Fixed,mgrigorov,mfursov,mfursov,28/Feb/17 03:18,06/Mar/17 20:46,13/Mar/19 23:18,06/Mar/17 20:46,8.0.0-M4,,,,,,,,8.0.0-M5,,,,wicket,,,0,,,,,,,,"My project uses both Wicket and Google Firebase.

After migrating to Wicket8 M4 I have this issue:

java.lang.NoSuchMethodError: org.json.JSONStringer.object()Lorg/json/JSONWriter;
	at com.google.firebase.database.util.JsonMapper.serializeJsonValue(JsonMapper.java:56)
	at com.google.firebase.database.util.JsonMapper.serializeJsonValue(JsonMapper.java:45)
	at com.google.firebase.database.util.JsonMapper.serializeJson(JsonMapper.java:25)
	at com.google.firebase.database.util.GAuthToken.serializeToString(GAuthToken.java:53)
	at com.google.firebase.database.core.JvmAuthTokenProvider$1.onComplete(JvmAuthTokenProvider.java:40)
	at com.google.firebase.tasks.OnCompleteCompletionListener$1.run(OnCompleteCompletionListener.java:37)


Reason: Google libraries uses one library and Wicket uses another by the same name. These 2 libraries are in conflict.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-02-28 06:51:52.496,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 06 20:46:23 UTC 2017,,,,,,0|i3aplz:,9223372036854775807,,,,,,,,28/Feb/17 03:41;mfursov;I believe that keeping the old version of JSON library in Wicket is a safier move.,"28/Feb/17 06:51;mgrigorov;The old version (or more correctly the library with Maven groupId=org.json) has been banned by Apache Legal: https://www.apache.org/legal/resolved#json.
It has been replaced with https://github.com/tdunning/open-json but the problem is that both use org.json as package name.
AFAIK OpenJson tries to provide the same APIs but with Apache friendly licence. IMO an issue should be opened at https://github.com/tdunning/open-json.",28/Feb/17 06:52;mgrigorov;Now I see you actually already reported it there: https://github.com/tdunning/open-json/issues/11,"28/Feb/17 18:31;mfursov;I know this is not the best option, but I believe it is better than having a package name conflict:

- If the only problem with old 'org.apache.wicket.ajax.json' is a license of original code why not replacing the code with open-json implementation and keeping the package name within wicket namespace'? Most customers will not notice the change. Those who do  (like users of XML class) will have an option to migrate to any version they want without conflict.","01/Mar/17 08:16;mgrigorov;I agree with you!
I've started a thread at dev@wicket.apache.org suggesting this change.
Thank you!","01/Mar/17 17:46;mfursov;This is an example of working alternative solution (spent less than 1 hour setting up this repository and pushing it's artifact to maven)

https://github.com/openjson/openjson

(Invited Martin, Ted Dunning and Max Solodovnik as owners, I can also give up my rights for this org)","04/Mar/17 06:43;mfursov;Some details about com.github.openjson activity:

First, I wanted to align it's interface with org.json classes: I collected all methods missed, added Iterable to JSONArray (committed) and next I added BigDecimal/BigInteger support (not commited).

But when I started writing tests for BigDecimals I found that there are a lot of uncertanty with this type support in org.json. This type is just not native for JSON. I also found that the current minimal state of the openjson is very clever: it does what it's expected to do and has no bloated, unnecessary and ambiguos utils.

So I reverted my changes and do not plan to add anything new to the package except tests (that are already at 95% according to converage reports).
","06/Mar/17 20:46;jira-bot;Commit f25687ade198b8e9dedf91d120c7f0d3ec0f1039 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f25687a ]

WICKET-6329 org.json migration issue

Switch from com.tdunning:json to com.github.openjson:openjson
",06/Mar/17 20:46;mgrigorov;Thank you [~mfursov] !,,,,,,,,,,,,,,,,,,,,,,,,,,,
LazyInitProxyFactory fills permgen space,WICKET-5978,12861258,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Critical,Fixed,svenmeier,svenmeier,svenmeier,02/Sep/15 09:03,01/Nov/15 09:16,13/Mar/19 23:18,02/Sep/15 09:12,,,,,,,,,6.21.0,7.1.0,,,wicket,,,0,,,,,,,,"Since WICKET-5910 permgen space is filled with proxy classes, since the enhancement key changes for each proxy generation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-09-02 09:06:53.454,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 02 11:50:09 UTC 2015,,,,,,0|i2jp0f:,9223372036854775807,,,,,,,,"02/Sep/15 09:06;jira-bot;Commit a92be9ee1d20444b65c99ef3e6e32d229326d150 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a92be9e ]

WICKET-5978 re-enable caching of enhancer by keeping properties equal
","02/Sep/15 09:08;jira-bot;Commit 1aab37b6346cd0fcaccec72b8ea51856b34cce41 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1aab37b ]

WICKET-5978 re-enable caching of enhancer by keeping properties equal
","02/Sep/15 09:12;svenmeier;For the enhancer to cache the generated classes, all properties have to be equal. Both SerializableNoOpCallback and NoOpForProtectedMethodsCGLibCallbackFilter implement equals() now.","02/Sep/15 11:49;jira-bot;Commit 8f8b1a49ba5eca1a9782d387e9b9f8ac5a61a1cd in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8f8b1a4 ]

WICKET-5978 simpler solution with a single INSTANCE
","02/Sep/15 11:50;jira-bot;Commit 5269cf59565de653260d0ac5426cb1acb061b4c8 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5269cf5 ]

WICKET-5978 simpler solution with a single INSTANCE
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Velocity remote code execution,WICKET-5927,12839081,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Critical,Fixed,mgrigorov,s.michel,s.michel,19/Jun/15 09:28,05/Jul/15 20:19,13/Mar/19 23:18,20/Jun/15 12:26,,,,,,,,,1.5.14,6.21.0,7.0.0,,site,,,0,,,,,,,,"Hello,

arbitrary shellcode can be possibly executed, using e.g java.lang.Runtime.exec(String command) on wicket site:

http://www.wicket-library.com/wicket-examples/velocity/wicket/bookmarkable/org.apache.wicket.examples.velocity.TemplatePage?3

The server should use a secure config in org/apache/velocity/runtime/defaults/velocity.properties:

runtime.introspector.uberspect=org.apache.velocity.util.introspection.SecureUberspector

regards

Sergej Michel
",,,,,,,,,,,,,,,,,,,,,,,,,19/Jun/15 10:34;s.michel;signature.asc;https://issues.apache.org/jira/secure/attachment/12740624/signature.asc,,,,1.0,,,,,,,,,,,,,,,,,,,2015-06-19 10:26:58.299,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Jun 20 12:26:05 UTC 2015,,,,,,0|i2g99r:,9223372036854775807,,,,,,,,"19/Jun/15 10:26;mgrigorov;I've shut down the demo until this is resolved.
I wasn't able to reproduce the problem. But I don't know well Velocity syntax.
Thanks!","19/Jun/15 11:19;jira-bot;Commit 3e418cd4a22b1af3a854cfb994166b40f53915d3 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3e418cd ]

WICKET-5927 Velocity Remote Code Exception

Use custom velocity.properties for wicket-examples that is more strict and doesn't allow usage of class loaders
","19/Jun/15 11:20;jira-bot;Commit 11e969a030007e6bd0987bba551f3cf2b6b1c4a3 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=11e969a ]

WICKET-5927 Velocity Remote Code Exception

Use custom velocity.properties for wicket-examples that is more strict and doesn't allow usage of class loaders

(cherry picked from commit 3e418cd4a22b1af3a854cfb994166b40f53915d3)
","19/Jun/15 11:21;mgrigorov;Please review the change and test it locally if you can.
If everything is OK then I'll deploy the new version of wicket-examples to wicket-library.com.","19/Jun/15 11:22;jira-bot;Commit 3dff42aa7dfc57c4c98d0d7cd24f2ed8d8d7f668 in wicket's branch refs/heads/wicket-1.5.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3dff42a ]

WICKET-5927 Velocity Remote Code Exception

Use custom velocity.properties for wicket-examples that is more strict and doesn't allow usage of class loaders

(cherry picked from commit 3e418cd4a22b1af3a854cfb994166b40f53915d3)
","19/Jun/15 19:52;s.michel;Now I can show, that remote code execution ist possible. I created a sample project to show this problem und sent it to wicket security. I changed the ticket title to ""Velocity remote code execution"".","20/Jun/15 12:26;mgrigorov;Wicket-Examples now uses custom velocity.properties so it doesn't allow usage of classloaders and thus prevents the vulnerability.

Applications should do the same if they need the same security.

Thanks for reporting!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket does not handle non in-memory Httpsessions correctly,WICKET-5473,12689333,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Critical,Fixed,mgrigorov,laeubi,laeubi,16/Jan/14 19:35,30/Jan/14 08:43,13/Mar/19 23:18,30/Jan/14 08:43,6.12.0,,,,,,,,6.14.0,7.0.0-M1,,,wicket,,,1,,,,,,,,"There are two issues (related to WICKET-5390):

1) The ""Wicket-Session"" (as well as WebSession) has internal state that is not reflected inside equals comparison (e.g. page id counter) since it does not override equals. This can leads in de/serialization szenarios to render two (Web)Sessions as unequal even if they are in fact the same.

2) The ""Wicket-Session"" object is stored inside the HttpSession object only once via setAttribute. This might be persisted. In successive calls the internal state is changed (especially the page id counter) but the object is not ""updated"" via setAttribute. This leads to the problem, that the HttpSession implementation never knows something has changed and might miss to persist the change!

This leads to duplicate and wrong assigned page ids and confussing errors.

So the Wicket-(Web)Session should be changed in a way, that:
a) every internal (non transient) state is used in equals comparisons
b) each change to any (non transient) internal state causes a setAttribute to the underlying storage so it is notified about the change.

We are hitting this problem with very obscure error messages, so I mark this as a blocker since it produces hard to track problems and currently holds us down to use Wicket with a persitent (clustered) session model.

In ""standard"" configuration you very likely never hit this problem since the default PageStore implementation modifies the session so implicitly it gets its changes persited. But with alternative PageStore or stateless pages you still can hit the problem (and get really confused).",,,,,,,,,,,,,,,,,,,,,,,WICKET-5390,,28/Jan/14 09:57;mgrigorov;WICKET-5473.patch;https://issues.apache.org/jira/secure/attachment/12625555/WICKET-5473.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-16 19:44:42.464,,,no_permission,,,,,,,,,,,,368300,,,Thu Jan 30 08:43:02 UTC 2014,,,,,,0|i1rhbb:,368605,,,,,,,,"16/Jan/14 19:36;laeubi;This is related to WICKET-5390 wich was not a complete fix for session issues in presence with a non memmory-session managment. Since I can't reopen the issue for some reason, and there are other issues not only with jettys JDBCSessionmanager but *any* sessionmanager that might persist and restore session data later.",16/Jan/14 19:44;mgrigorov;Can you provide a quickstart that demonstrates the problem ?,"16/Jan/14 19:57;laeubi;Maybe the following would work
- custom wicket with log output in setIntegerId (not 100% sure how the mehtod is called....)
- Wicket with two pages each with a link to the other via a dynamic link
- create a custom pagestore that do not use the session (e.g. just a simple Hashmap in memory)
- jetty 8 with JDBC Session store and default settings
- enable log output for JDBC sessionmanager
- open page one
- open page two
- close one of them and reopen it...
- you would see log output with pageid 1 + 2
- repeat untill you are at page id 10 or something
- wait until JDBC manager reloads the session from db
- you will see old page ID assigned and due to a bug (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=425930) since session is reloaded on each request.

It is rather complex to setup (and debug!) since you need the following to be true:
- have a Pagemanager/Store that do not alter the session
- have a HttpSession that uses serialization and reloads data from serilized form (e.g. on  a regular basis or on restart)","16/Jan/14 20:02;mgrigorov;Without a quickstart and steps to reproduce it will be hard to improve it.
Please take some time to prove that it is broken.","16/Jan/14 20:11;laeubi;I'll try but fear it will take some time, maybe tomorrow.
Maybe you nevertheless want to take a look at (Wicket)Session and add these simple log statements:
- one logging setAttribute
- one logging getAttribute
- one on nextPageID

then use an arbitrary Wicket app, open some pages. And then look at the sequence generated under the assumption that all state that is changed without ""setAttribute"" is called will be lost. It should be perfectly clear than that there is an issue.","16/Jan/14 20:25;mgrigorov;Wicket's Session#setAttribute() just delegates to ISessionStore#setAttribute(). Nothing more.

The (Wicket)Session object is stored in the ISessionStore (i.e. in HttpSessionStore -> HttpSession) by org.apache.wicket.Session#internalDetach() that calls getSessionStore().flushSession(request, this); when the Session is marked as dirty. ",17/Jan/14 07:32;mgrigorov;Reducing the Priotity to Major because it seems you have a workaround: override #equals() in YourSession and call session.dirty() when needed.,"17/Jan/14 11:36;laeubi;I was able to reduce the problem significantly by emulating a persitent session via the ISessionStore.

You can find a quickstart here: https://github.com/laeubi/quickstart/tree/master/WICKET5473

Steps to reproduce:
* start quickstart
* open homepage (page id will be shown as 0, instance as 0)
* click the link (page id will be shwon as 1, instance as 1)
* click the link again (page id will be shown as 1 instance as 1)
* click the link again (page id will be shown as 1 instance as 1)
* click the link again (page id will be shown as 1 instance as 2)
* repeat as you like

So what do you see: Two pages getting the same page id repeatedly, in the log you will see that only one call to setValue(wicket:wicket.WICKET5473:session) is performed and after then only getValue is called resulting in getting the state back from the first call.

{code:title=Example Output}
Create Page 1
setValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@15f1f9c
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@13a34af
setValue(wicket:wicket.WICKET5473:wicket:persistentPageManagerData - wicket.WICKET5473) := org.apache.wicket.page.PageStoreManager$SessionEntry@20c906
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@b914b3
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@fdfc58
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@1904e0d
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@178920a
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@bbfa5c
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@131de9b
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@f42160
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@1bb326c
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@eb7331
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@7ff5b6
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@dc9065
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@8beff2
getValue(wicket:wicket.WICKET5473:wicket:persistentPageManagerData - wicket.WICKET5473) := org.apache.wicket.page.PageStoreManager$SessionEntry@1362a63
onClick Page 1
getValue(wicket:wicket.WICKET5473:wicket:persistentPageManagerData - wicket.WICKET5473) := org.apache.wicket.page.PageStoreManager$SessionEntry@57ae58
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@813bc1
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@7a36a2
Create Page 2
getValue(wicket:wicket.WICKET5473:wicket:persistentPageManagerData - wicket.WICKET5473) := org.apache.wicket.page.PageStoreManager$SessionEntry@1b5c22f
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@cd4544
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@7e75d2
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@694f12
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@345b43
getValue(wicket:wicket.WICKET5473:session) := org.apache.wicket.protocol.http.WebSession@153b2cb
getValue(wicket:wicket.WICKET5473:wicket:persistentPageManagerData - wicket.WICKET5473) := org.apache.wicket.page.PageStoreManager$SessionEntry@1ff2e1b
{code}
You can now change {code:title=bugs.WicketApplication.java}private static boolean isPersitent = true;{code} in WicketApplication to {code:title=bugs.WicketApplication.java}private static boolean isPersitent = false;{code} rerun the code and you'll see that page ids are incremented on each click since the default in-memory model is used.

Let me know if you need any further details.","17/Jan/14 11:37;laeubi;The only Workaround is to change the session on every call what is more a hack and requires code changes all over the code. (note this is also just a sideeffect that it works, if a SessionManager would decide to store not the whole session but individual attributes (as in this quickstart) it would not help...)","26/Jan/14 08:42;laeubi;I hope it is okay to change this to even 'critical' since this can cause data to be lost.

From taking a look at the Code of Session, it seems these both field values have the issue:
{code}private int sequence = 1;
private int pageId = 0;{code}
All other modification methods set the dirty flag, but these do not:
{code}public synchronized int nextSequenceValue() {
		return sequence++;
	}

	public synchronized int nextPageId() {
		return pageId++;
	}{code}I would suggest to instead use field values, simply use SessionAttributes via get/setAttribute or mark session dirty after each call.
Maybe it would also be a good idea to switch to AtomicInteger and remove the need to syncronize here also.

PLEASE NOTE: PageStoreManager has also an issue, since it does not mark the session dirty due to change WICKET-5380 this would be neccesary now!

Is there any plan when this might be fixed and released? This currently require us to do a lot more requests than neccessary (and that leads to some unwanted DB access in the end) to prevent it. This leads to performance problem and thus is rather critical for us.
","28/Jan/14 09:48;mgrigorov;> PLEASE NOTE: PageStoreManager has also an issue, since it does not mark the session dirty due to change WICKET-5380 this would be neccesary now!

Can you please give more details ?
By adding calls to dirty() in org.apache.wicket.Session#nextSequenceValue() and org.apache.wicket.Session#nextPageId() your quickstart starts to behave as expected.
Is there something more to be done ?
You know sending us patches or pull requests is not forbidden ;)","28/Jan/14 09:52;mgrigorov;Adding calls to dirty causes a major problem - the session is being bound even for stateless applications.
org.apache.wicket.session.BindSessionOnRedirectTest#bindSessionWhenThereAreFeedbackMessages() shows the problem.",28/Jan/14 09:57;mgrigorov;This patch seems to do the job.,"28/Jan/14 10:03;laeubi;> Can you please give more details ?
Prior to WICKET-5380 setAttribute was called for each request, now it is only called once and the session is never marked as ""dirty"" even if the object has changed. So a similar issue might happen there, maybe it is okay if the session cache is lost under some circumstance.

> You know sending us patches or pull requests is not forbidden
Yes :-) But in that very central case I think it is better to let it do someone with a more wicket-internal-view, so I hope its okay to just suggest what might be changed.

> Adding calls to dirty causes a major problem - the session is being bound even for stateless applications
Well... if they depend on a state (page-id counter) how can they be stateless? I'm not sure how Wicket handles/detecct this case, but maybe it would be suitable in such a case to not call the Session but a gobal static ""getTempPageID"" (AtomicInteger).
Or, maybe only call dirty if the session is not temporary?
","28/Jan/14 10:09;mgrigorov;I've linked this ticket to WICKET-2782 for the problem with stateless.
But the patch seems to overcome this problem.

Can you check your main application with the suggested patch applied ?
I think there are no more changes needed. If the session is marked dirty then it is saved as an attribute in the http session at the end of the request.","28/Jan/14 10:38;laeubi;Thanks for your investigation and the patch, I'll try this tomorrow!
Can you tell (if the patch works) how long it normally takes untill it will find its way into an offical release?","28/Jan/14 10:42;mgrigorov;If there are no issues found then it will be in 6.14.0.
We try to release a new minor version every month.
6.13.0 has been released in the beginning of this month so there are around a week or two until 6.14.0.

But you can put 
public synchronized int nextSequenceValue()
	{
		if (isTemporary() == false)
		{
			dirty();
		}
		return super.nextSequenceValue();
	}

	/**
	 * 
	 * @return the next page id
	 */
	public synchronized int nextPageId()
	{
		if (isTemporary() == false)
		{
			dirty();
		}
		return super.nextPageId();
	}

in YourSession.java and use it until 6.14.0 is out.",29/Jan/14 18:13;laeubi;I tried this patch and it solves the issue seen before.,30/Jan/14 08:43;mgrigorov;Thanks for your help!,,,,,,,,,,,,,,,,,
InterceptData never gets cleared from session after continueToOriginalDestination is called and another page is requested afterwards,WICKET-5140,12641820,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Critical,Fixed,mgrigorov,forchel,forchel,10/Apr/13 12:08,26/Apr/13 15:06,13/Mar/19 23:18,26/Apr/13 15:05,1.5.10,,,,,,,,1.5.11,6.8.0,,,wicket,,,0,,,,,,,,"We have the same problem as earlier described by Chris in WICKET-4500:

""The above fix is great but we've run into another problem. If an admin user attempts to go to a restricted page and gets redirected via a RedirectToInterceptException but then decides not to log on but then goes to the normal home page authentication and then successfully logs on as a standard user that authentication will redirect to where the admin initially wanted to go to - because they never authenticated as admin continueToOriginalDestination was never called and so Wicket still thinks that when continueToOriginalDestination is called after the standard user's authentication that it needs to redirect to the original admin page... fun!

Would it be possible to introduce an explicit 'clearRedirect' method so that when the home page does a RestartResponseException to redirect to the standard user authentication page it can, at the same time, do a 'clearRedirect' so that a subsequent call to continueToOriginalDestination does not attempt to go to the admin page.

I can't remove the continueToOriginalDestination from the standard user authentication page because it is still required to perform a continue when it was reached by a RedirectToIntercepException from restricted pages other than the home page. """,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-26 15:05:42.266,,,no_permission,,,,,,,,,,,,322235,,,Fri Apr 26 15:05:42 UTC 2013,,,,,,0|i1jlif:,322580,,,,,,,,26/Apr/13 15:05;mgrigorov;Added Component#clearOriginalDestination().,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Form.findSubmittingComponent returns null instead of SubmitLink,WICKET-6642,13219598,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,papegaaij,papegaaij,05/Mar/19 16:34,11/Mar/19 13:24,13/Mar/19 23:18,11/Mar/19 13:24,8.0.0,8.0.0-M6,8.0.0-M7,8.0.0-M8,8.0.0-M9,8.1.0,8.2.0,8.3.0,8.4.0,9.0.0,,,wicket,,,0,,,,,,,,"When a form is submitted by a SubmitLink, you can no longer find the submitting component using Form.findSubmittingComponent.

This was probably introduced by WICKET-6348. I've attached a quickstart with the problem. I can confirm that it was introduced between 8.0.0 M5 and M6/",,,,,,,,,,,,,,,,,,,,,,,,,05/Mar/19 16:34;papegaaij;myproject.tar.gz;https://issues.apache.org/jira/secure/attachment/12961195/myproject.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2019-03-06 08:14:09.501,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 11 13:24:29 UTC 2019,,,,,,0|z00cq0:,9223372036854775807,,,,,,,,"06/Mar/19 08:14;mgrigorov;Is this fixed by [https://github.com/apache/wicket/pull/348] ?

 

*Update:* now I noticed that this issue is linked to the PR, so it must be the same.","06/Mar/19 08:27;svenmeier;SubmitLink no longer uses a hidden field to submit the form, but changes the forms action instead (as FormComponentUpdatingBehavior does it too).","06/Mar/19 08:35;svenmeier;Prior to 8.x you could indeed 'find' the submitting SubmitLink.

I wonder what you need that for though: the form is correctly processed, as it is with other components calling Form.onFormSubmitted(IFormSubmitter), e.g. AjaxFormSubmitBehavior.

Why do you need to find the submitter when it is already identified?","06/Mar/19 09:32;papegaaij;We need it because it was there. Someone thought it was a good idea to do all form processing in Form.onSubmit, but differentiate on the button that actually caused the submit. I do not agree with this way of performing a submit, but it's there and it used to work. I don't mind if this method is dropped for 9, but in 8 it should work.

I've tested the PR and it fixes the quickstart. I've also tested with an AjaxSubmitLink, and that works as well. I'm not sure if other submitting components need this same fix though.","06/Mar/19 12:40;svenmeier;I was wondering how it works for AjaxSubmitLink too. Apparently it sends an additional parameter for this as well, see AjaxRequestAttributes#submittingComponentName.

 ","06/Mar/19 16:58;tiagostn;Hi, guys. I submited the PR. I just wanna contribute so a picked up an issue to resolve. I tested AjaxSubmitLink too and, just like Sven Meier said, the  AjaxSubmitLink uses a AbstractDefaultAjaxBehavior atribute AjaxAttributeName.SUBMITTING_COMPONENT_NAME. Let me know if I can do more.","07/Mar/19 06:04;mgrigorov;Thank you for helping us, [~tiagostn] !",07/Mar/19 17:14;tiagostn;If you have more issues I'm available to help. I'm using wicket for almost 8 years now and I have 4 softwares in production developed with Wicket. They're using Wicket 6 and 8. I'd love to contribute more. Fill free to assign me for others issues and for this one too.,"08/Mar/19 12:14;mgrigorov;Only members of the Wicket team could be assigned to Jira issues.

But you are welcome to pick any of the open issues and work on it. Just add a comment that you start working on it.

You can discuss anything about the issue at [dev@wicket.apache.org.|mailto:dev@wicket.apache.org.]

At the end just create a Pull Request at GitHub, as you did for this one, and we will merge it!

If you do this for some time then eventually you will be invited to join our team! :)","11/Mar/19 12:02;jira-bot;Commit 2298bdff67c39d5a4d61b6415e2502d0bab231ca in wicket's branch refs/heads/wicket-8.x from Sven Meier
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=2298bdf ]

WICKET-6642 revert SubmitLink to request Form url

and use findSubmittingButton once again
","11/Mar/19 13:08;jira-bot;Commit 4a8b25c3693dbd28ff79256bcabb331294f2294a in wicket's branch refs/heads/master from Sven Meier
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=4a8b25c ]

WICKET-6642 revert SubmitLink to request Form url

and use findSubmittingButton once again
","11/Mar/19 13:24;svenmeier;I've reverted part of WICKET-6348, which changed how a SubmitLink submits the form. This way it will be closer once again to how normal Buttons work, i.e. the form receives the request and then identifies the actual submitter via a request parameter.

#findSubmittingButton() works again so projects can use it as before.
I've marked the method as INTERNAL though, so developers will be discouraged to use it, since for AjaxButtons it might report a different button than that which actually submitted the form.

Thanks to [~tiagostn] for helping here!",,,,,,,,,,,,,,,,,,,,,,,,
PageStoreManager$SessionEntry.clear produces NullPointerException,WICKET-6639,13218733,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mfursov,mfursov,28/Feb/19 19:36,02/Mar/19 21:51,13/Mar/19 23:18,02/Mar/19 21:51,8.3.0,,,,,,,,8.4.0,9.0.0,,,wicket,,,0,,,,,,,,"Sometimes when I return to my website after some period I see the following exception:
{noformat}
java.lang.NullPointerException
 at org.apache.wicket.page.PageStoreManager$SessionEntry.clear(PageStoreManager.java:365)
 at org.apache.wicket.page.PageStoreManager$SessionEntry.valueUnbound(PageStoreManager.java:353)
 at org.apache.catalina.session.StandardSession.removeAttributeInternal(StandardSession.java:1784)
 at org.apache.catalina.session.StandardSession.expire(StandardSession.java:856)
 at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:659)
 at org.apache.catalina.session.ManagerBase.processExpires(ManagerBase.java:573)
 at org.apache.catalina.session.ManagerBase.backgroundProcess(ManagerBase.java:558)
 at org.apache.catalina.core.StandardContext.backgroundProcess(StandardContext.java:5496)
 at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1351)
 at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1355)
 at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1355)
 at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1333){noformat}
 

This is very hard to investigate what is the reason for this bug from my side because I do not have a stable reproducer , but I believe one of the following 1-line fixes in Wicket
 # Adding a null check for sessionCache before using it
 # Making sessionCache field never null

can resolve this problem.

 ",,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-03-02 21:46:19.428,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Mar 02 21:51:06 UTC 2019,,,,,,0|z007eg:,9223372036854775807,,,,,,,,"02/Mar/19 21:46;jira-bot;Commit 116a7c57af87bbe515eb710664c7e28745ca0642 in wicket's branch refs/heads/wicket-8.x from Martin Tzvetanov Grigorov
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=116a7c5 ]

WICKET-6639 PageStoreManager$SessionEntry.clear produces NullPointerException

Add some checks for sessionCache being null
","02/Mar/19 21:50;jira-bot;Commit 8fe2ef1a799ef2e6ae6c56687077ac795caf98e1 in wicket's branch refs/heads/master from Martin Tzvetanov Grigorov
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=8fe2ef1 ]

WICKET-6639 PageStoreManager$SessionEntry.clear produces NullPointerException

Add some checks for sessionCache being null
",02/Mar/19 21:51;mgrigorov;Added some non-null checks where needed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handling exception Wicket 8,WICKET-6637,13216410,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,n0n0t,n0n0t,18/Feb/19 14:10,18/Feb/19 20:02,13/Mar/19 23:18,18/Feb/19 20:02,8.3.0,,,,,,,,8.4.0,9.0.0,,,wicket,,,0,AjaxRequestTarget,IRequestCycleListener,onException,,,,,"Hi,

 

recently we have upgraded our application, from wicket 7.11 to wicket 8.3.0.

With wicket 7 everything seemed to be fine, however in wicket 8 we have an issue

with handling exception.

In Application we have in init() method:
{code:java}
   getRequestCycleListeners().add(new MyRequestCycleListener()); {code}
MyRequestCycleListener implements IRequestCycleListener and override method

 
{code:java}
      @Override

  public IRequestHandler onException(RequestCycle cycle, Exception ex) {

  Optional<AjaxRequestTarget> target = cycle.find(AjaxRequestTarget.class);

  //this part stopped working since it return Optional.empty(), because active RequestHandler

  //and RequestHandlerScheduledAfterCurrent are both null

        if (target.isPresent()) {

            return target.get();

        }

        IPageRequestHandler last = PageRequestHandlerTracker.getLastHandler(RequestCycle.get());

        WebPage page = (WebPage) (last.getPage());

        return new RenderPageRequestHandler(new PageProvider(currentPage));

  }
{code}
Is this a wicket bug or it was intention to work like this? If it was intentended, is there

any workaround to get the AjaxRequestTarget? Or the approach has changed in wicket 8? Any other ideas?

We think, that this might be caused by https://issues.apache.org/jira/browse/WICKET-6129

Please see attached quisckstart, it worked fine with wicket 7.12

 ",,,,,,,,,,,,,,,,,,,,,,,,,18/Feb/19 14:02;n0n0t;handlingexception.zip;https://issues.apache.org/jira/secure/attachment/12959122/handlingexception.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2019-02-18 18:45:51.096,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Feb 18 20:02:29 UTC 2019,,,,,,0|yi13hk:,9223372036854775807,,,,,,,,18/Feb/19 18:45;svenmeier;This was broken by my changes for WICKET-6129: The scheduled handler must not be cleared before the listeners were notified.,"18/Feb/19 18:51;jira-bot;Commit d76695ed9561aac21059d7c11ed69a12a9defe58 in wicket's branch refs/heads/wicket-8.x from Sven Meier
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=d76695e ]

WICKET-6637 clear scheduled handler

after resolving handler
","18/Feb/19 19:14;jira-bot;Commit 3704144b73521c6b10de5fa7864773230762e86c in wicket's branch refs/heads/master from Sven Meier
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=3704144 ]

WICKET-6637 clear scheduled handler

after resolving handler
",18/Feb/19 20:02;svenmeier;Many thanks [~n0n0t] for spotting this regression!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OOM (and disk) in AsynchronousPageStore,WICKET-6629,13208809,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,sboschman,sboschman,10/Jan/19 15:24,20/Jan/19 17:29,13/Mar/19 23:18,11/Jan/19 12:05,8.2.0,9.0.0,,,,,,,8.3.0,9.0.0,,,wicket,,,0,serialization,,,,,,,"Symptoms:
 # Out of memory on DiskDataStore.sessionEntryMap, map contains tens of thousands of DiskDataStore$SessionEntry's
 # The vm only contains a few hundred PageStoreManager$SessionEntry's. This is expected, but not consistent with the number of DiskDataStore$SessionEntry's
 # Slowly growing disk usage, the Wicket filestore contains millions of directories, up to the point where even ls becomes unusable.

 

Snippet from our productions logs (Wicket 8.2.0):
{code:java}
2019-01-09 17:09:40,662 DEBUG [org.apache.wicket.session.HttpSessionStore] (default task-2513) Session unbound: 5nSIPXlkpRkGu5Oo3_wuwf801Y6TM3K1_k-95uIi
2019-01-09 17:09:40,662 DEBUG [org.apache.wicket.pageStore.DiskDataStore] (default task-2513) Removing data for pages in session with id '5nSIPXlkpRkGu5Oo3_wuwf801Y6TM3K1_k-95uIi'
2019-01-09 17:09:40,663 DEBUG [org.apache.wicket.pageStore.AsynchronousDataStore] (Wicket-AsyncDataStore-PageSavingThread) PageSavingRunnable:: Saving asynchronously: Entry [sessionId=5nSIPXlkpRkGu5Oo3_wuwf801Y6TM3K1_k-95uIi, pageId=2]...
2019-01-09 17:09:40,663 DEBUG [org.apache.wicket.pageStore.DiskDataStore] (Wicket-AsyncDataStore-PageSavingThread) Storing data for page with id '2' in session with id '5nSIPXlkpRkGu5Oo3_wuwf801Y6TM3K1_k-95uIi'
{code}

Problem (as far as I can tell) 
The PageSavingRunnable of the AsynchronousPageStore saves entries to the DiskDataStore after the corresponding session has been invalidated and its DiskDataStore has been cleaned. Because the session is destroyed according to the container and Wicket session handling there is nothing triggering a cleanup for this session anymore.

 

Attached is a testcase (master branch) to showcase what is happening. Because it is a timing issue I 'faked' the testcase and temporarily stopped the PageSavingRunnable to create a scenario where the PageSavingRunnable would save an entry for an already invalidated session.

 ",,,,,,,,,,,,,,,,,,,,,,,,,10/Jan/19 15:11;sboschman;AsyncPageStoreManagerTest.java;https://issues.apache.org/jira/secure/attachment/12954439/AsyncPageStoreManagerTest.java,,,,1.0,,,,,,,,,,,,,,,,,,,2019-01-11 11:41:01.905,,,no_permission,,,https://issues.apache.org/jira/browse/WICKET-6177,,,,,,,,,9223372036854775807,,,Sun Jan 20 17:29:18 UTC 2019,,,,,,0|u00pns:,9223372036854775807,,,,,,,,"11/Jan/19 11:41;mgrigorov;The attached test case fails for me with:

{code}
java.lang.AssertionError: expected null, but was:<[B@5c90e579>

	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotNull(Assert.java:755)
	at org.junit.Assert.assertNull(Assert.java:737)
	at org.junit.Assert.assertNull(Assert.java:747)
	at org.apache.wicket.pageStore.AsyncPageStoreManagerTest.invalidateSessionBeforeSave(AsyncPageStoreManagerTest.java:112)
{code}

*Update*: I see that actually failing is the expected behavior. All is clear! 

","11/Jan/19 11:58;jira-bot;Commit 5cf4f6c8936aaf01bb5a3cae1c392bf2545cf9a0 in wicket's branch refs/heads/master from Martin Tzvetanov Grigorov
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=5cf4f6c ]

WICKET-6629 OOM (and disk) in AsynchronousPageStore

Clear the AsynchronousPageStore's entries for expired sessions
","11/Jan/19 12:00;jira-bot;Commit e5b1290a1e7f4954cf76f7e4e47c4b1569d7edea in wicket's branch refs/heads/wicket-8.x from Martin Tzvetanov Grigorov
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=e5b1290 ]

WICKET-6629 OOM (and disk) in AsynchronousPageStore

Clear the AsynchronousPageStore's entries for expired sessions

(cherry picked from commit 5cf4f6c8936aaf01bb5a3cae1c392bf2545cf9a0)
","11/Jan/19 12:00;jira-bot;Commit e9d5f4741923c31cabeb52214a59a57baa276678 in wicket's branch refs/heads/wicket-8.x from Martin Tzvetanov Grigorov
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=e9d5f47 ]

WICKET-6629 OOM (and disk) in AsynchronousPageStore

JUnit 4
",11/Jan/19 12:05;mgrigorov;org.apache.wicket.pageStore.AsynchronousPageStore has been introduced in 8.0.0 so earlier versions do not have this problem.,"11/Jan/19 12:08;jira-bot;Commit 0108d09438d1b2f6bd8c04445955490ac1d4d5f1 in wicket's branch refs/heads/wicket-8.x from Martin Tzvetanov Grigorov
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=0108d09 ]

WICKET-6629 OOM (and disk) in AsynchronousPageStore

Move to the correct package. I've pasted it in the wrond one by mistake
","11/Jan/19 12:08;jira-bot;Commit a17af33c524a21026b464e185746fee07904b2b1 in wicket's branch refs/heads/master from Martin Tzvetanov Grigorov
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=a17af33 ]

WICKET-6629 OOM (and disk) in AsynchronousPageStore

Move to the correct package. I've pasted it in the wrond one by mistake

(cherry picked from commit 0108d09438d1b2f6bd8c04445955490ac1d4d5f1)
","11/Jan/19 16:40;svenmeier;What about AsynchronousDataStore? It works identically to AsynchronousPageStore.

What happens in the following case?
 * PageSavingRunnable polls an entry
 * that entry's session is invalidated (nothing to remove from entries), unbind is delegated to the disk storage
 * PageSavingRunnable now delegates the entry's page to the disk storage",14/Jan/19 07:13;mgrigorov;I think AsynchronousDataStore does not have this problem but I will check again these days.,"18/Jan/19 08:33;mgrigorov;AsynchronousDataStore has this code:

{code}
@Override
	public void removeData(final String sessionId)
	{
		for (Iterator<Entry> itor = entries.iterator(); itor.hasNext();)
		{
			Entry entry = itor.next();
			if (entry != null) // this check is not needed in JDK6
			{
				String entrySessionId = entry.sessionId;

				if (sessionId.equals(entrySessionId))
				{
					entryMap.remove(getKey(entry));
					itor.remove();
				}
			}
		}

		dataStore.removeData(sessionId);
	}
{code}

https://github.com/apache/wicket/blob/wicket-8.x/wicket-core/src/main/java/org/apache/wicket/pageStore/AsynchronousDataStore.java#L158-L166

which is the more verbose version of `entries.removeIf()` that I used in AsynchronousPageStore.","20/Jan/19 17:29;svenmeier;Yes, you're right  - I was looking for #unbind() in AsynchronousDataStore o_O",,,,,,,,,,,,,,,,,,,,,,,,,
FileUpload.writeToTempFile() fails with commons-fileupload 1.4,WICKET-6630,13209906,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,laurenshop,laurenshop,16/Jan/19 13:41,17/Jan/19 12:30,13/Mar/19 23:18,17/Jan/19 12:30,8.2.0,8.3.0,,,,,,,7.12.0,8.3.0,9.0.0,,wicket-core,,,0,,,,,,,,"FileUpload.writeToTempFile() fails with commons-fileupload 1.4

As of commons-fileupload 1.4, writing the uploaded file to a temp file with {{fileUpload.writeToTempFile()}} fails with the following exception:
{noformat}
org.apache.commons.io.FileExistsException: Destination '/var/folders/4y/_1z4yp3d7jv553km1yqc5v2r0000gn/T/null_15476330054763883202739767876103field' already exists
at org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2986)
at org.apache.commons.fileupload.disk.DiskFileItem.write(DiskFileItem.java:405)
at org.apache.wicket.markup.html.form.upload.FileUload.wripteTo(FileUpload.java:234)
at org.apache.wicket.markup.html.form.upload.FileUpload.writeToTempFile(FileUpload.java:254)
{noformat}
This only happens when the file is larger than the size threshold of 10 kB (by default). In that case the uploaded content is already in a temp file and will be moved to the newly created temp file. Commons-fileupload 1.3.3 used {{File.rename()}} for this; in 1.4 the implementation has been changed to {{FileUtils.moveFile()}}, which does not allow the destination to be present.

To be functionally compatible with the old situation, {{FileUload.writeTo()}} should delete the provided file, if present, before writing.

See the provided test case.",,,,,,,,,,,,,,,,,,,,,,,,,16/Jan/19 16:13;laurenshop;uploadtest-8.3-SNAPSHOT.zip;https://issues.apache.org/jira/secure/attachment/12955112/uploadtest-8.3-SNAPSHOT.zip,16/Jan/19 13:40;laurenshop;uploadtest.zip;https://issues.apache.org/jira/secure/attachment/12955096/uploadtest.zip,,,2.0,,,,,,,,,,,,,,,,,,,2019-01-17 12:19:58.258,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jan 17 12:30:23 UTC 2019,,,,,,0|y002k0:,9223372036854775807,,,,,,,,16/Jan/19 16:15;laurenshop;Provided a testcase for 8.3-SNAPSHOT ([^uploadtest-8.3-SNAPSHOT.zip]) and a PR with a possible solution (https://github.com/apache/wicket/pull/346).,"17/Jan/19 12:19;jira-bot;Commit d66a7c361f726ee43d249145329fbe986c02d7d9 in wicket's branch refs/heads/wicket-8.x from Laurens Hop
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=d66a7c3 ]

WICKET-6630 Delete (temp) file before writing to it

As of commons-fileupload 1.4, FileUtils.moveFile() is used to write the uploaded contents to the provided file. This implementation does not allow the destination to be present.
","17/Jan/19 12:19;jira-bot;Commit 8e170dce9ae76cac91de1b1bd05d3e839bde179e in wicket's branch refs/heads/wicket-8.x from Martin Grigorov
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=8e170dc ]

Merge pull request #346 from laurenshop/WICKET-6630

WICKET-6630 Delete (temp) file before writing to it","17/Jan/19 12:19;jira-bot;Commit 8e170dce9ae76cac91de1b1bd05d3e839bde179e in wicket's branch refs/heads/wicket-8.x from Martin Grigorov
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=8e170dc ]

Merge pull request #346 from laurenshop/WICKET-6630

WICKET-6630 Delete (temp) file before writing to it","17/Jan/19 12:23;jira-bot;Commit cd7b54e7aad062a18fb9cd7723668e178f28e1cb in wicket's branch refs/heads/wicket-8.x from Martin Tzvetanov Grigorov
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=cd7b54e ]

WICKET-6630 Delete (temp) file before writing to it

Use wicket-util Files to remove the file. It checks whether it is an existing file and retries on error
","17/Jan/19 12:24;jira-bot;Commit bbabd992795dfb143b9f376e455dfcb7743a99ac in wicket's branch refs/heads/master from Laurens Hop
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=bbabd99 ]

WICKET-6630 Delete (temp) file before writing to it

As of commons-fileupload 1.4, FileUtils.moveFile() is used to write the uploaded contents to the provided file. This implementation does not allow the destination to be present.

(cherry picked from commit d66a7c361f726ee43d249145329fbe986c02d7d9)
","17/Jan/19 12:24;jira-bot;Commit a2386f00762824bbd572fcf264cf162a360a51c8 in wicket's branch refs/heads/master from Martin Tzvetanov Grigorov
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=a2386f0 ]

WICKET-6630 Delete (temp) file before writing to it

Use wicket-util Files to remove the file. It checks whether it is an existing file and retries on error

(cherry picked from commit cd7b54e7aad062a18fb9cd7723668e178f28e1cb)
","17/Jan/19 12:25;jira-bot;Commit 50e2ef20760b2cad542602245d8e613fd3503b44 in wicket's branch refs/heads/wicket-7.x from Laurens Hop
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=50e2ef2 ]

WICKET-6630 Delete (temp) file before writing to it

As of commons-fileupload 1.4, FileUtils.moveFile() is used to write the uploaded contents to the provided file. This implementation does not allow the destination to be present.

(cherry picked from commit d66a7c361f726ee43d249145329fbe986c02d7d9)
","17/Jan/19 12:25;jira-bot;Commit 03082b53736f0089d3ab0b073ab0b88d09ddb646 in wicket's branch refs/heads/wicket-7.x from Martin Tzvetanov Grigorov
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=03082b5 ]

WICKET-6630 Delete (temp) file before writing to it

Use wicket-util Files to remove the file. It checks whether it is an existing file and retries on error

(cherry picked from commit cd7b54e7aad062a18fb9cd7723668e178f28e1cb)
","17/Jan/19 12:30;mgrigorov;Thank you, [~laurenshop]!",,,,,,,,,,,,,,,,,,,,,,,,,,
AnnotProxyFieldValueFactory does not cache beanNames,WICKET-6631,13209917,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,svenmeier,svenmeier,16/Jan/19 14:31,17/Jan/19 10:57,13/Mar/19 23:18,17/Jan/19 10:57,7.11.0,8.2.0,,,,,,,7.12.0,8.3.0,9.0.0,,wicket-spring,,,1,,,,,,,,"AnnotProxyFieldValueFactory uses the wrong cache key, effectively disabling the intented caching of expensive bean name generation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-17 09:54:44.669,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jan 17 10:57:00 UTC 2019,,,,,,0|y002mg:,9223372036854775807,,,,,,,,"17/Jan/19 09:54;jira-bot;Commit 15eba0723ce6ac85cf98ea99bcada4940d6488b2 in wicket's branch refs/heads/wicket-7.x from Sven Meier
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=15eba07 ]

WICKET-6631 corrected cache key
","17/Jan/19 09:56;jira-bot;Commit 95bd386295428af5f865c1055a1f0228dd053375 in wicket's branch refs/heads/master from Sven Meier
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=95bd386 ]

WICKET-6631 corrected cache key
","17/Jan/19 10:55;jira-bot;Commit ff7543a9db67afc4c927c150f00c0b5f72b05037 in wicket's branch refs/heads/wicket-8.x from Sven Meier
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=ff7543a ]

WICKET-6631 corrected cache key
",17/Jan/19 10:57;svenmeier;Many thanks to pschwarzer-tt for spotting this bug.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wicket-ioc needs to use ASM 7 and CGLIB 3.2.10 to be compatible with JDK11,WICKET-6628,13208242,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,tgierke2342,tgierke2342,08/Jan/19 08:53,08/Jan/19 11:57,13/Mar/19 23:18,08/Jan/19 11:57,8.2.0,,,,,,,,8.3.0,,,,wicket-ioc,,,0,,,,,,,,"Trying to use Wicket 8.2. (more specificially, wicket-ioc 8.2 and the @SpringBean annotation) on OpenJDK 11 crashes when the application was also compiled to JDK11 bytecode (but works fine when compiling with --target 10 and running on OpenJDK 11).

Java version:


{code:java}
openjdk version ""11"" 2018-09-25
OpenJDK Runtime Environment 18.9 (build 11+28)
OpenJDK 64-Bit Server VM 18.9 (build 11+28, mixed mode)
{code}
 

Crash caused by outdated asm-utils version:
{code:java}
    java.lang.UnsupportedOperationException
            at org.objectweb.asm.ClassVisitor.visitNestMemberExperimental(ClassVisitor.java:248)
            at org.objectweb.asm.ClassReader.accept(ClassReader.java:651)
            at org.objectweb.asm.ClassReader.accept(ClassReader.java:391)
            at net.sf.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:70)
            at net.sf.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1132)
            at net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:630)
            at net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
            at net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:329)
            at net.sf.cglib.proxy.Enhancer.generate(Enhancer.java:492)
            at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:93)
            at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:91)
            at net.sf.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
            at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
            at net.sf.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
            at net.sf.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
            at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:116)
            at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:291)
            at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:480)
            at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:305)
            at org.apache.wicket.proxy.LazyInitProxyFactory.createProxy(LazyInitProxyFactory.java:192)
{code}
After upgrading to asm-utils 7.0 we still got another crash caused by the outdated cglib dependency:
{code:java}
java.lang.UnsupportedOperationException: This feature requires ASM7
at org.objectweb.asm.ClassVisitor.visitNestMember(ClassVisitor.java:236)
at org.objectweb.asm.ClassReader.accept(ClassReader.java:651)
at org.objectweb.asm.ClassReader.accept(ClassReader.java:391)
at net.sf.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:70)
at net.sf.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1132)
at net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:630)
at net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
at net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:329)
at net.sf.cglib.proxy.Enhancer.generate(Enhancer.java:492)
at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:93)
at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:91)
at net.sf.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at net.sf.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
at net.sf.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:116)
at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:291)
at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:480)
at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:305)
at org.apache.wicket.proxy.LazyInitProxyFactory.createProxy(LazyInitProxyFactory.java:191){code}
Adding the following to our pom.xml fixed the crashes:
{code:java}
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm-util</artifactId>
      <version>7.0</version>
    </dependency>
    <dependency>
      <groupId>cglib</groupId>
      <artifactId>cglib</artifactId>
      <version>3.2.10</version>
    </dependency>
{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-08 09:42:38.333,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jan 08 11:57:35 UTC 2019,,,,,,0|u00m68:,9223372036854775807,,,,,,,,"08/Jan/19 09:42;idevai;LOL :) just wanted to raise the same issue. On our side, simply upgrading to cglib 3.2.10 was enough to fix the issue, no upgrade to asm was needed (according to maven it is version 6.2).

Java version on our side:
{code:java}
openjdk version ""11.0.1"" 2018-10-16
OpenJDK Runtime Environment 18.9 (build 11.0.1+13)
OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13, mixed mode)
{code}","08/Jan/19 10:39;tgierke2342;I first thought it was just an ASM issue so I tried upgrading only asm-util first and only later (when I got a different exception) realized that there's more to it. Overriding just the CGLIB dependency is actually enough as it will pull in the later ASM version which in turn will also override the asm-util dependency from wicket-ioc.

Anyway, to properly fix wicket-ioc both (cglib version and the asm-util dependency that wicket-ioc itself has) need to be upgraded.","08/Jan/19 11:55;jira-bot;Commit cf1b1bab3228d302cd2203fa7f4eddd1317072fd in wicket's branch refs/heads/wicket-8.x from Martin Tzvetanov Grigorov
[ https://gitbox.apache.org/repos/asf?p=wicket.git;h=cf1b1ba ]

WICKET-6628 wicket-ioc needs to use ASM 7 and CGLIB 3.2.10 to be compatible with JDK11
","08/Jan/19 11:57;mgrigorov;Recently we discussed whether to release Wicket 9 for better JDK 11 compatibility but some of the devs wanted to add some more Wicket related features for a major release.
So I agree that making Wicket 8.x friendlier to JDK 9+ is a good mid-term solution!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consecutive Temporary Behaviors are not properly removed,WICKET-6623,13203851,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,ivaynberg,ivaynberg,ivaynberg,11/Dec/18 23:30,13/Dec/18 19:14,13/Mar/19 23:18,11/Dec/18 23:53,,,,,,,,,7.11.0,8.3.0,9.0.0,,,,,0,,,,,,,,If two temporary behaviors happen to be one after the other in component's data the second one will not be removed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-11 23:37:48.411,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Dec 13 19:14:52 UTC 2018,,,,,,0|s01f5k:,9223372036854775807,,,,,,,,"11/Dec/18 23:37;jira-bot;Commit 567b62417ae85ee78051204c784fb0a2411fc414 in wicket's branch refs/heads/wicket-8.x from [~ivaynberg]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=567b624 ]

WICKET-6623 correctly remove consecutive temporary behaviors
","11/Dec/18 23:42;jira-bot;Commit ad39487faa573144deee6da3e6e6f9dd73d382c1 in wicket's branch refs/heads/master from [~ivaynberg]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ad39487 ]

WICKET-6623 correctly remove consecutive temporary behaviors
","11/Dec/18 23:51;jira-bot;Commit d7a00f557cd576ba3cf0f1e9e2c26911bc9bb5b9 in wicket's branch refs/heads/wicket-7.x from [~ivaynberg]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d7a00f5 ]

WICKET-6623 correctly remove consecutive temporary behaviors
","13/Dec/18 19:14;jira-bot;Commit 7544d4d3113daad60a1aa3e2d9add171305c8494 in wicket's branch refs/heads/master from [~ivaynberg]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7544d4d ]

WICKET-6623 correctly remove consecutive temporary behaviors - test fix
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Header contribution ignore <wicket:header-items/>,WICKET-6617,13201840,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,solomax,solomax,solomax,02/Dec/18 08:06,08/Dec/18 07:59,13/Mar/19 23:18,08/Dec/18 05:18,8.2.0,,,,,,,,8.3.0,9.0.0,,,wicket-core,,,0,,,,,,,,"Components added via AJAX and contributing to {{<head>}} using {{@Override renderHead}} ignores {{<wicket:header-items/>}} if any

Here is the example:
Imaging you have following markup:
{code}
<html>
  <head>
    <wicket:header-items/>
    <title>Hello</title>
  </head>
  <body>
      ........
  </body>
<html>
{code}

In your java code you replacing component A with component B on the page via AJAX
Component B contributing to {{<head>}} as follows:
{code}
	@Override
	public void renderHead(IHeaderResponse response) {
		super.renderHead(response);
		response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(B.class, ""some.js"")));
	}
{code}

As developer I would expect additional JS/CSS files (or any other header resources) will be appended before {{<title>}} tag since I have placed {{<wicket:header-items/>}} tag

Currently only initial header resources will take {{<wicket:header-items/>}} into account",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-02 08:09:55.243,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Dec 08 07:59:22 UTC 2018,,,,,,0|s012vk:,9223372036854775807,,,,,,,,"02/Dec/18 08:09;jira-bot;Commit a529aadafdaf7b32e909bbf90fe32822e841877f in wicket's branch refs/heads/WICKET-6617-header-placeholder from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a529aad ]

[WICKET-6617] headers are added to header-items if specified
","02/Dec/18 08:11;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/wicket/pull/343

    [WICKET-6617] headers are added to header-items if specified

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6617-header-placeholder

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/343.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #343
    
----
commit a529aadafdaf7b32e909bbf90fe32822e841877f
Author: Maxim Solodovnik <solomax666@...>
Date:   2018-12-02T08:09:37Z

    [WICKET-6617] headers are added to header-items if specified

----
",02/Dec/18 17:20;svenmeier;Could you improve the issue description? I don't understand what's the issue here.,"02/Dec/18 17:21;githubbot;Github user svenmeier commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/343#discussion_r238106752
  
    --- Diff: wicket-core/src/main/java/org/apache/wicket/markup/html/internal/HtmlHeaderContainer.java ---
    @@ -161,19 +161,19 @@ public final void onComponentTagBody(MarkupStream markupStream, ComponentTag ope
     			final StringResponse response = new StringResponse();
     			getRequestCycle().setResponse(response);
     
    -			IHeaderResponse headerResponse = getHeaderResponse();
    -			if (!response.equals(headerResponse.getResponse()))
    -			{
    -				getRequestCycle().setResponse(headerResponse.getResponse());
    -			}
    +			try (IHeaderResponse headerResponse = getHeaderResponse()) {
    +				if (!response.equals(headerResponse.getResponse()))
    +				{
    +					getRequestCycle().setResponse(headerResponse.getResponse());
    +				}
     
    -			// Render the header sections of all components on the page
    -			AbstractHeaderRenderStrategy.get().renderHeader(this,
    -				new HeaderStreamState(markupStream, openTag), getPage());
    +				// Render the header sections of all components on the page
    +				AbstractHeaderRenderStrategy.get().renderHeader(this,
    +					new HeaderStreamState(markupStream, openTag), getPage());
     
    -			// Close the header response before rendering the header container itself
    -			// See https://issues.apache.org/jira/browse/WICKET-3728
    -			headerResponse.close();
    --- End diff --
    
    Why no close() any longer?
","02/Dec/18 23:57;githubbot;Github user solomax commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/343#discussion_r238121519
  
    --- Diff: wicket-core/src/main/java/org/apache/wicket/markup/html/internal/HtmlHeaderContainer.java ---
    @@ -161,19 +161,19 @@ public final void onComponentTagBody(MarkupStream markupStream, ComponentTag ope
     			final StringResponse response = new StringResponse();
     			getRequestCycle().setResponse(response);
     
    -			IHeaderResponse headerResponse = getHeaderResponse();
    -			if (!response.equals(headerResponse.getResponse()))
    -			{
    -				getRequestCycle().setResponse(headerResponse.getResponse());
    -			}
    +			try (IHeaderResponse headerResponse = getHeaderResponse()) {
    +				if (!response.equals(headerResponse.getResponse()))
    +				{
    +					getRequestCycle().setResponse(headerResponse.getResponse());
    +				}
     
    -			// Render the header sections of all components on the page
    -			AbstractHeaderRenderStrategy.get().renderHeader(this,
    -				new HeaderStreamState(markupStream, openTag), getPage());
    +				// Render the header sections of all components on the page
    +				AbstractHeaderRenderStrategy.get().renderHeader(this,
    +					new HeaderStreamState(markupStream, openTag), getPage());
     
    -			// Close the header response before rendering the header container itself
    -			// See https://issues.apache.org/jira/browse/WICKET-3728
    -			headerResponse.close();
    --- End diff --
    
    `close()` is being called automatically by `try with resource` statement
    I'll modify comment
","03/Dec/18 02:40;jira-bot;Commit b83281403a30c6bcfd7c9a3c751ae1851cea2126 in wicket's branch refs/heads/WICKET-6617-header-placeholder from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b832814 ]

[WICKET-6617] comment regarding auto-close is improved
","03/Dec/18 09:44;githubbot;Github user svenmeier commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/343#discussion_r238198570
  
    --- Diff: wicket-core/src/main/java/org/apache/wicket/markup/html/internal/HtmlHeaderContainer.java ---
    @@ -161,19 +161,19 @@ public final void onComponentTagBody(MarkupStream markupStream, ComponentTag ope
     			final StringResponse response = new StringResponse();
     			getRequestCycle().setResponse(response);
     
    -			IHeaderResponse headerResponse = getHeaderResponse();
    -			if (!response.equals(headerResponse.getResponse()))
    -			{
    -				getRequestCycle().setResponse(headerResponse.getResponse());
    -			}
    +			try (IHeaderResponse headerResponse = getHeaderResponse()) {
    +				if (!response.equals(headerResponse.getResponse()))
    +				{
    +					getRequestCycle().setResponse(headerResponse.getResponse());
    +				}
     
    -			// Render the header sections of all components on the page
    -			AbstractHeaderRenderStrategy.get().renderHeader(this,
    -				new HeaderStreamState(markupStream, openTag), getPage());
    +				// Render the header sections of all components on the page
    +				AbstractHeaderRenderStrategy.get().renderHeader(this,
    +					new HeaderStreamState(markupStream, openTag), getPage());
     
    -			// Close the header response before rendering the header container itself
    -			// See https://issues.apache.org/jira/browse/WICKET-3728
    -			headerResponse.close();
    --- End diff --
    
    Thanks understood :)
","03/Dec/18 09:53;githubbot;Github user svenmeier commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/343#discussion_r238201851
  
    --- Diff: wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js ---
    @@ -2116,10 +2116,15 @@
     
     			// Adds the element to page head
     			addElement: function (element) {
    -				var head = document.getElementsByTagName(""head"");
    +				var headItems = document.querySelector('head meta[name=""wicket.header.items""]');
    --- End diff --
    
    Seems we haven't used querySelector() before - are we increasing the minimum supported browser version with this?
","03/Dec/18 09:55;githubbot;Github user solomax commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/343#discussion_r238202582
  
    --- Diff: wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js ---
    @@ -2116,10 +2116,15 @@
     
     			// Adds the element to page head
     			addElement: function (element) {
    -				var head = document.getElementsByTagName(""head"");
    +				var headItems = document.querySelector('head meta[name=""wicket.header.items""]');
    --- End diff --
    
    According to this table [1] `querySelector` is being supported by all browsers ...
    
    [1] https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector#Browser_Compatibility
","08/Dec/18 04:42;githubbot;Github user solomax commented on the issue:

    https://github.com/apache/wicket/pull/343
  
    @svenmeier  Should this be merged into 7.x?
","08/Dec/18 04:48;jira-bot;Commit 23c46412d175c914ec6c09910cfc4af83bd75cde in wicket's branch refs/heads/wicket-8.x from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=23c4641 ]

[WICKET-6617] headers are added to header-items if specified
","08/Dec/18 05:14;jira-bot;Commit 7befe9b3b4df36913e332cb7e045c1252e8b0baf in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7befe9b ]

[WICKET-6617] headers are added to header-items if specified
","08/Dec/18 05:15;githubbot;Github user solomax closed the pull request at:

    https://github.com/apache/wicket/pull/343
","08/Dec/18 07:22;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/343
  
    We should leave 7.x for people with support for  older browsers. Let them migrate to 8.x if they need newer features.
","08/Dec/18 07:59;githubbot;Github user solomax commented on the issue:

    https://github.com/apache/wicket/pull/343
  
    OK :)
",,,,,,,,,,,,,,,,,,,,,
AbstractRangeValidator looks up string with the wrong key if locale is Turkish,WICKET-6614,13199240,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,trejkaz,trejkaz,19/Nov/18 06:54,06/Dec/18 20:31,13/Mar/19 23:18,21/Nov/18 14:04,7.6.0,,,,,,,,7.11.0,8.2.0,9.0.0,,wicket-core,,,0,,,,,,,,"If you run your Wicket application on a system with Turkish locale, and you're using `StringValidator`, the string key you end up looking up is `""StringValidator.mınımum""`, when it should be `""StringValidator.minimum""`. This results in either an empty message or an exception, depending on the resource settings for the application.

`AbstractRangeValidator` turns out to have this:

{code}
	public static enum Mode {
		MINIMUM, MAXIMUM, RANGE, EXACT;

		public String getVariation()
		{
			return name().toLowerCase();
		}
	}
{code}

This `toLowerCase()` should probably be `toLowerCase(Locale.ROOT)`.

I'd also recommend setting up forbidden-apis or similar to catch similar issues at build-time.",,,,,,,,,,,,,,,,,,,,,,,,,19/Nov/18 07:03;trejkaz;WICKET-6614.patch;https://issues.apache.org/jira/secure/attachment/12948667/WICKET-6614.patch,19/Nov/18 07:03;trejkaz;report.txt;https://issues.apache.org/jira/secure/attachment/12948668/report.txt,,,2.0,,,,,,,,,,,,,,,,,,,2018-11-19 10:02:03.673,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Dec 06 20:31:24 UTC 2018,,,,,,0|s00myw:,9223372036854775807,,,,,,,,"19/Nov/18 10:02;svenmeier;Thanks [~trejkaz] you're absolutely right.

I'll change all invocations to user Locale.ROOT as you have suggested (toUpperCase and toLowerCase).

@devs: 
I've tried policeman-tools/forbidden-apis and it works fine:
{code:java}
<plugin>
    <groupId>de.thetaphi</groupId>
    <artifactId>forbiddenapis</artifactId>
    <version>2.6</version>
    <configuration>
        <failOnUnsupportedJava>false</failOnUnsupportedJava>
        <signatures><![CDATA[
            @ Specify Locale.ROOT to ensure locale insensitive conversion
            java.lang.String#toLowerCase() 
            java.lang.String#toUpperCase()
        ]]></signatures>
    </configuration>
</plugin>
{code}
Any objections to adding this plugin to wicket-parent? Or are we using something similar already?",19/Nov/18 10:06;solomax;+1 to add this plugin,"20/Nov/18 11:08;solomax;I would change
{code}
@ Specify Locale.ROOT to ensure locale insensitive conversion
{code}

To

{code}
@defaultMessage Specify Locale.ROOT to ensure locale insensitive conversion
{code}

this way problem file name will also be printed

also I would add
{code}
<executions>
	<execution>
		<id>forbiddenapis</id>
		<goals>
			<goal>check</goal>
			<goal>testCheck</goal>
		</goals>
	</execution>
</executions>
{code}
","20/Nov/18 14:39;jira-bot;Commit e8be9c09d4590fd64e71c36d66e4afde339b5b76 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e8be9c0 ]

WICKET-6614 upperCase and lowerCase with root locale

for locale insentive conversion
","20/Nov/18 15:00;jira-bot;Commit 462606fe4168b5ff353ab425fb067953dec8c912 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=462606f ]

WICKET-6614 moved version to pluginManagement
","21/Nov/18 08:15;jira-bot;Commit 1c4ea3d4c00175a0ea775f8328ef639cd7181e6e in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1c4ea3d ]

WICKET-6614 moved configuration to pluginManagement too
","21/Nov/18 08:19;jira-bot;Commit 72f02983a0166884599226257f74769c0acb42c7 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=72f0298 ]

WICKET-6614 pleasing pedantic enforcer
","21/Nov/18 09:22;jira-bot;Commit 00c631bf9eaa5a1652d49fe6164e4097307497e5 in wicket's branch refs/heads/wicket-8.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=00c631b ]

WICKET-6614 upperCase and lowerCase with root locale

for locale insentive conversion
","21/Nov/18 09:48;jira-bot;Commit e026e3468b5fa673ae92a4fadc8317fe3e4b03f9 in wicket's branch refs/heads/wicket-8.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e026e34 ]

WICKET-6614 moved plugin to pluginManagement
","21/Nov/18 10:30;jira-bot;Commit 138abdd0ecb05947d42385db22982f3a42439e16 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=138abdd ]

WICKET-6614 upperCase and lowerCase with root locale

for locale insentive conversion
",21/Nov/18 14:04;svenmeier;Thanks [~trejkaz],"21/Nov/18 14:06;svenmeier;[~solomax] the plugin runs in the {{verify}} lifecycle phase anyways, so no need to specify any executions.","06/Dec/18 20:31;jira-bot;Commit 138abdd0ecb05947d42385db22982f3a42439e16 in wicket's branch refs/heads/WICKET-6563 from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=138abdd ]

WICKET-6614 upperCase and lowerCase with root locale

for locale insentive conversion
",,,,,,,,,,,,,,,,,,,,,,,
Stateless pages are not rendered anymore before executing a behavior,WICKET-6616,13201161,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,thomas.heigl,thomas.heigl,28/Nov/18 17:46,05/Dec/18 14:29,13/Mar/19 23:18,03/Dec/18 17:08,8.2.0,,,,,,,,8.3.0,,,,wicket-core,,,0,,,,,,,,"I just upgraded from 8.1.0 to 8.2.0 and a bunch of my tests broke. A required form component on a stateless page that is hidden in ""onConfigure"" started to report an error after the upgrade.

The problem was introduced in WICKET-6608 by this commit:

[https://github.com/apache/wicket/commit/147f6d33f839edd9a6eb53ce9c20b4cde07fc938]

Previously, the page was initialized *and* rendered before returning the component. Now, for some reason, the page is initialized and the component returned immediately if it exists. This breaks all visibility/enabled conditions that are evaluated later in the life cycle of stateless components.",,,,,,,,,,,,,,,,,,,,,,,,,29/Nov/18 12:45;thomas.heigl;myproject.zip;https://issues.apache.org/jira/secure/attachment/12950009/myproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2018-11-29 11:23:26.838,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Dec 03 17:08:54 UTC 2018,,,,,,0|s00yp4:,9223372036854775807,,,,,,,,29/Nov/18 11:04;thomas.heigl;Hi [~bitstorm]! Could you look into this? I think that the fix for WICKET-6608 has broken the component lifecycle for stateless pages. ,"29/Nov/18 11:23;svenmeier;Hi [~thomas.heigl],

we'll probably revert the change done in WICKET-6608, but need some time to investigate this.

In the meantime you could strengthen the case for this issue by providing a testcase that we can include in Wicket. It seems stateless component lifecycle is still not properly defined  (and validated with tests).

Thanks
Sven","29/Nov/18 12:48;thomas.heigl;Attached quickstart with test that passes in 8.1.0 and fails in 8.2.0.

The test only passes if the target component cannot be resolved immediately. So if I add the form in the constructor, instead of in {{onInitialize}}, the test already fails in 8.1.0.",29/Nov/18 12:50;thomas.heigl;I wasn't able to write a clean test and had to resort to throwing an {{AssertionError}}. Asserting with {{tester.hasNoErrorMessages()}} does not seem to work with stateless forms in my example. Error messages seem to be lost somehow.,"29/Nov/18 14:17;bitstorm;Hi [~thomas.heigl],

I totally agree with Sven, we probably need to revert the commit for WICKET-6608. As you correctly noted since 8.2.0 those components not directly added to the page are no more rendered if they are added during initialization phase.","29/Nov/18 17:30;svenmeier;After some investigation I'm not sure whether that change from WICKET-6608 is so bad afterall:

What if a component is in the stateless page from the start (i.e. no queueing or adding from onInitialize() involved)? In that case #onConfigure() will not be called either.

So either we don't care for this (and dequeued might not be configured too) or we have to change PageAndComponentProvider to always render stateless pages, before any non-configured component is picked from the page.","30/Nov/18 10:33;thomas.heigl;The use-case in my test is very simple. On a stateful page, it works as expected. On a stateless page it fails and as a developer I can't be sure if my lifecycle callbacks will be executed or not. This makes it extremely hard to reason about non-trivial (i.e. everything is added in the constructor) stateless pages.

In my opinion, stateless pages should behave as much as stateful pages as possible. I'd vote for always rendering them.","01/Dec/18 20:15;jira-bot;Commit 557115433e3485fc6ab50607ae930ff46c14c80a in wicket's branch refs/heads/WICKET-6616-render-new-pages from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5571154 ]

WICKET-6616 always render new pages
","02/Dec/18 21:09;jira-bot;Commit daecc1efe9bec652d4b3925d15cf16a91e0fa275 in wicket's branch refs/heads/WICKET-6616-render-new-pages from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=daecc1e ]

WICKET-6616 discard stateless page instance after invoking listener",03/Dec/18 17:08;svenmeier;WICKET-6608 was reverted.,,,,,,,,,,,,,,,,,,,,,,,,,,
AuthenticatedWebApplication login Workflow broken with replaceSession,WICKET-6602,13193472,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,skyYaga,skyYaga,23/Oct/18 07:16,09/Nov/18 14:51,13/Mar/19 23:18,05/Nov/18 16:08,8.1.0,,,,,,,,8.2.0,9.0.0,,,wicket-core,,,0,,,,,,,,"We've got the following issue when upgrading from Wicket 7 to Wicket 8:

Using AuthenticatedWebApplication a user will be forwarded to the SignInPage, if he is not logged in. 
 This is done in {{AuthenticatedWebApplication#onUnauthorizedInstantiation()}} which calls {{AuthenticatedWebApplication#restartResponseAtSignInPage()}} which throws a {{RestartResponseAtInterceptPageException}}.

During construction of {{RestartResponseAtInterceptPageException}} the original request destination will be written in the Session's MetaData ({{InterceptData#set()}}).

After a successful Login we're calling {{Component#continueToOriginalDestination()}} / {{RestartResponseAtInterceptPageException#continueToOriginalDestination()}} which reads the previously stored MetaData to redirect the user to his original destination.

The problem is, that before doing this, we're calling {{Session#replaceSession()}} in our SignInPage to protect against Session fixation. But {{Session#destroy()}} is different in Wicket 8:

Wicket 7:
{code:java}
	private void destroy()
	{
		if (getSessionStore() != null)
		{
			sessionStore.invalidate(RequestCycle.get().getRequest());
			sessionStore = null;
			id = null;
			RequestCycle.get().setMetaData(SESSION_INVALIDATED, false);
		}
	}{code}
Wicket 8:
{code:java}
	private void destroy()
	{
		if (getSessionStore() != null)
		{
			sessionStore.invalidate(RequestCycle.get().getRequest());
			sessionStore = null;
			id = null;
			RequestCycle.get().setMetaData(SESSION_INVALIDATED, false);
			clientInfo = null;
			dirty = false;
			metaData = null;
		}
	}{code}
As you can see, in Wicket 8 {{metaData = null;}} will be called. 
 This results in {{RestartResponseAtInterceptPageException#continueToOriginalDestination()}} not finding any MetaData and being unable to forward the user to his original destination.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-04 21:14:43.737,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Nov 09 14:51:57 UTC 2018,,,,,,0|i3ziq7:,9223372036854775807,,,,,,,,"04/Nov/18 21:14;jira-bot;Commit 4a42abafae56492d65922192a13d113068f655e7 in wicket's branch refs/heads/wicket-8.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4a42aba ]

WICKET-6602 AuthenticatedWebApplication login Workflow broken with
replaceSession
","04/Nov/18 21:30;jira-bot;Commit 343ab8462f1ef063fd8bb3dc7dd8c6b67dfc9816 in wicket's branch refs/heads/wicket-8.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=343ab84 ]

WICKET-6602 Workaround for backward api compatibility","04/Nov/18 22:35;jira-bot;Commit bd4c0c786aa810765d9e7f12a62a6fed56db2c62 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bd4c0c7 ]

WICKET-6602 AuthenticatedWebApplication login Workflow broken with
replaceSession
","09/Nov/18 14:51;jira-bot;Commit bd4c0c786aa810765d9e7f12a62a6fed56db2c62 in wicket's branch refs/heads/WICKET-6563 from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bd4c0c7 ]

WICKET-6602 AuthenticatedWebApplication login Workflow broken with
replaceSession
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NoSuchMethodError when using Spring-Beans with constructor injection in an AjaxLink#onClick,WICKET-6607,13195156,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,lukaskorten,lukaskorten,30/Oct/18 16:36,05/Nov/18 14:33,13/Mar/19 23:18,03/Nov/18 09:05,8.1.0,,,,,,,,8.2.0,9.0.0,,,wicket-core,wicket-spring,,4,,,,,,,,"We are currently building a SpringBoot application with Wicket 8.1.0 and using Constructor injection in the service layer. If a service that follows this approach is injected into a Wicket component, the already known issue, [reported on stackoverflow|https://stackoverflow.com/questions/35260608/wicket-springbean-and-spring-autowired-with-injection-via-constructor], occurs:
{code:java}
java.lang.IllegalArgumentException: Superclass has no null constructors but no arguments were given at net.sf.cglib.proxy.Enhancer.emitConstructors(Enhancer.java:931) ~[cglib-3.2.6.jar:na] at net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:631) ~[cglib-3.2.6.jar:na] at net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25) ~[cglib-3.2.6.jar:na] at net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:329) ~[cglib-3.2.6.jar:na] at net.sf.cglib.proxy.Enhancer.generate(Enhancer.java:492) ~[cglib-3.2.6.jar:na] at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:93) ~[cglib-3.2.6.jar:na] at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:91) ~[cglib-3.2.6.jar:na] at net.sf.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54) ~[cglib-3.2.6.jar:na] at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_131] at net.sf.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61) ~[cglib-3.2.6.jar:na] at net.sf.cglib.core.internal.LoadingCache.get(LoadingCache.java:34) ~[cglib-3.2.6.jar:na] at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:116) ~[cglib-3.2.6.jar:na] at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:291) ~[cglib-3.2.6.jar:na] at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:480) ~[cglib-3.2.6.jar:na] at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:305) ~[cglib-3.2.6.jar:na] at org.apache.wicket.proxy.LazyInitProxyFactory.createProxy(LazyInitProxyFactory.java:192) ~[wicket-ioc-8.1.0.jar:8.1.0] at org.apache.wicket.spring.injection.annot.AnnotProxyFieldValueFactory.getFieldValue(AnnotProxyFieldValueFactory.java:166) ~[wicket-spring-8.1.0.jar:8.1.0] at org.apache.wicket.injection.Injector.inject(Injector.java:111) ~[wicket-ioc-8.1.0.jar:8.1.0]
{code}
The workaround for that issue is to use Objenesis.

But now another error occurs as soon as the spring-bean is used in a listener, e.g. in an onClick method of an AjaxLink.
{code:java}
Exception in thread ""Wicket-AsyncPageStore-PageSavingThread"" java.lang.NoSuchMethodError: de.korten.wicket.examples.helloworld.FooBarService.writeReplace()Ljava/lang/Object;
 at de.korten.wicket.examples.helloworld.Wicket_Proxy_FooBarService$$EnhancerByCGLIB$$5b8fb826.writeReplace(<generated>)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at java.io.ObjectStreamClass.invokeWriteReplace(ObjectStreamClass.java:1118)
 at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1136)
 at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548)
 at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509)
 at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
 at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
 at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
 at org.apache.wicket.serialize.java.JavaSerializer$SerializationCheckerObjectOutputStream.writeObjectOverride(JavaSerializer.java:368)
 at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:344)
 at org.apache.wicket.serialize.java.JavaSerializer.serialize(JavaSerializer.java:82)
 at org.apache.wicket.pageStore.AbstractPageStore.serializePage(AbstractPageStore.java:133)
 at org.apache.wicket.pageStore.DefaultPageStore.createSerializedPage(DefaultPageStore.java:281)
 at org.apache.wicket.pageStore.DefaultPageStore.storePage(DefaultPageStore.java:61)
 at org.apache.wicket.pageStore.AsynchronousPageStore$PageSavingRunnable.run(AsynchronousPageStore.java:225)
 at java.lang.Thread.run(Thread.java:748)
{code}
The Spring-Bean itself can be resolved in the onClick, but not its dependencies, these are then null.

I have attached a simple example project to reproduce the problem.

The attached application can be started with the command ""gradlew bootrun"". After that the HomePage can be reached under localhost:8080. This page contains a single link in whose onClick method the described Spring-Bean is used. When you click on this link, then a NullpointerException will be thrown. This depends on the point that the dependencies of the bean can no longer be resolved and are therefore null.",,,,,,,,,,,,,,,,,,,,,,,,,01/Nov/18 07:56;lukaskorten;wicket-constructor-injection.zip;https://issues.apache.org/jira/secure/attachment/12946506/wicket-constructor-injection.zip,30/Oct/18 16:36;lukaskorten;wicket-di.zip;https://issues.apache.org/jira/secure/attachment/12946234/wicket-di.zip,,,2.0,,,,,,,,,,,,,,,,,,,2018-10-31 11:54:46.856,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Nov 05 14:33:32 UTC 2018,,,,,,0|i3zt33:,9223372036854775807,,,,,,,,"31/Oct/18 11:54;svenmeier;Looks like the cglib-proxy calls super.writeReplace(), a method which doesn't actually exist in FooBarService.

I have don't have an idea yet why it should do that, normally it would just return an ObjenesisProxyReplacement.",31/Oct/18 20:52;svenmeier;Please create a proper wicket quickstart that shows the problem.,"01/Nov/18 07:57;lukaskorten;Hello Sven, thanks for the quick feedback.


I have attached another project that was created based on the Wicket Quickstart. This problem also occurs there.
This time I wrote a unit test. In the test I click on the link with the wicket tester and trigger the service call. Strangely enough, the test works. I get the expected string.

If I start the application and click on the link in the browser, the null pointer comes up again.","01/Nov/18 10:20;mgrigorov;For me the new quickstart fails when I make a request to [http://localhost:8080|http://localhost:8080/] with:

 
{code:java}
Root cause:

java.lang.IllegalArgumentException: Superclass has no null constructors but no arguments were given
     at net.sf.cglib.proxy.Enhancer.emitConstructors(Enhancer.java:931)
     at net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:631)
     at net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
     at net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:329)
     at net.sf.cglib.proxy.Enhancer.generate(Enhancer.java:492)
     at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:93)
     at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:91)
     at net.sf.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
     at java.util.concurrent.FutureTask.run(FutureTask.java:266)
     at net.sf.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
     at net.sf.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
     at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:116)
     at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:291)
     at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:480)
     at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:305)
     at org.apache.wicket.proxy.LazyInitProxyFactory.createProxy(LazyInitProxyFactory.java:192)
     at org.apache.wicket.spring.injection.annot.AnnotProxyFieldValueFactory.getFieldValue(AnnotProxyFieldValueFactory.java:166)
     at org.apache.wicket.injection.Injector.inject(Injector.java:111)
     at org.apache.wicket.spring.injection.annot.SpringComponentInjector.inject(SpringComponentInjector.java:124)
     at org.apache.wicket.spring.injection.annot.SpringComponentInjector.onInstantiation(SpringComponentInjector.java:130)
     at org.apache.wicket.application.ComponentInstantiationListenerCollection$1.notify(ComponentInstantiationListenerCollection.java:38)
     at org.apache.wicket.application.ComponentInstantiationListenerCollection$1.notify(ComponentInstantiationListenerCollection.java:34)
     at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80)
     at org.apache.wicket.application.ComponentInstantiationListenerCollection.onInstantiation(ComponentInstantiationListenerCollection.java:33)
     at org.apache.wicket.Component.<init>(Component.java:679)
     at org.apache.wicket.MarkupContainer.<init>(MarkupContainer.java:178)
     at org.apache.wicket.Page.<init>(Page.java:171)
     at org.apache.wicket.Page.<init>(Page.java:160)
     at org.apache.wicket.markup.html.WebPage.<init>(WebPage.java:99)
     at de.korten.examples.HomePage.<init>(HomePage.java:20){code}","01/Nov/18 10:25;mgrigorov;As I explained at [https://stackoverflow.com/a/35264964/497381] you need to provide default constructor to the Spring bean for CGLIB or to use interface instead directly a class.

Adding the following snippet to FooBarService fixes both issues (mine from above and yours with the click).

 
{code:java}
// For CGLIB
protected FooBarService() {
   fooService = null; 
}
{code}","01/Nov/18 12:56;lukaskorten;This happens when you remove the Objenesis library from the classpath. Otherwise, you will get the same exception as described above. I think it's unfortunately just a workaround and not a real solution to this problem. A standard constructor that is only needed by the framework is useless code at first and at least causes code analysis problems. But thanks [~mgrigorov], I think I can work with it for now!

","01/Nov/18 13:03;svenmeier;>you need to provide default constructor

With objenesis this should not be required.

Note that with Wicket 7.10 the quickstart works just fine, so there's definitely something wrong here.","01/Nov/18 13:03;mgrigorov;Well, this is a limitation of CGLIB. You can discuss with them at [https://github.com/cglib/cglib/issues.]

 

I didn't remove anything from you second quickstart app. I am not sure what you mean with ""This happens when you remove the Objenesis library"". AFAIR Objenesis doesn't have the limitation of CGLIB, and that's why it is preferred by wicket-ioc when it is on the classpath.",01/Nov/18 13:06;mgrigorov;Obviously I didn't read carefully the full description of the ticket.,"01/Nov/18 14:00;lukaskorten;I can also confirm it, the quickstart works with Wicket 7.1. It doesn't work anymore with version 8.0.0 or higher.","02/Nov/18 12:42;svenmeier;This is caused by the introduction of AsynchronousPageStore (WICKET-6177).

As a workaround you can disable asynchronous page storage:
{code:java}
getStoreSettings().setAsynchronous(false);{code}
This might be related to classloader issues.","03/Nov/18 08:03;svenmeier;So our ObjenesisProxyFactory uses a ThreadLocal for the callback, which is pulled into the proxy at first access only.

When the page is serialized on a separate thread, the ThreadLocal is not available :/.","03/Nov/18 08:47;jira-bot;Commit aab1472f7ce685b4b0d4380d882c26f8f2c9df26 in wicket's branch refs/heads/wicket-8.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=aab1472 ]

WICKET-6607 set cglib callback directly

so it is already set in case the page is serialized on another thread
","03/Nov/18 08:49;jira-bot;Commit 06957dc37a6d370dd58f7d06830bda06c8c7e8dc in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=06957dc ]

WICKET-6607 set cglib callback directly

so it is already set in case the page is serialized on another thread
",03/Nov/18 09:05;svenmeier;Setting the handler directly instead of using a ThreadLocal is simpler and works with asynchronous serialization too.,05/Nov/18 13:16;lukaskorten;Thank you Sven. It looks like I have to use the workaround for now. Would you rather recommend turning off the asynchronous page storage or using default constructors instead?,05/Nov/18 14:33;svenmeier;Which workarounds you'll pick depends on how much services you have to change vs. a small performance hit without asynchronous page store.,,,,,,,,,,,,,,,,,,,
Introduce AsynchronousPageStore,WICKET-6177,12975791,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mmakundi,mmakundi,05/Jun/16 07:42,02/Nov/18 12:42,13/Mar/19 23:18,12/Apr/17 21:32,7.4.0,,,,,,,,8.0.0-M6,,,,wicket,,,1,serialization,,,,,,,"We have a performance issue with our Wicket app, page serialization causes inconvenience to user because PageStoreManager.storeTouchedPages() blocks the request until pageSerializer.serialize(page) has been handled.

Could this be solved by serializing the page in a separate thread and let the request complete?

The problem we have is that user is making quick small ajax modifications to the page but serialization + network latency makes the delay very inconvenient. If serialization could be done in separate thread, user would feel only the network delay which is bearable.",any,604800,604800,,0%,604800,604800,,,,,,,,,WICKET-6607,,,,,,,,,14/Jun/16 07:25;mgrigorov;6177.tgz;https://issues.apache.org/jira/secure/attachment/12810268/6177.tgz,05/Jun/16 07:44;mmakundi;Wicket_Quickstart_7.zip;https://issues.apache.org/jira/secure/attachment/12808203/Wicket_Quickstart_7.zip,,,2.0,,,,,,,,,,,,,,,,,,,2016-06-14 07:25:00.674,,,no_permission,,,https://issues.apache.org/jira/browse/WICKET-5805,Important,,,,,,,,9223372036854775807,,,Sun Aug 13 11:15:41 UTC 2017,,,,,,0|i2yzwf:,9223372036854775807,,,,,,,,05/Jun/16 07:44;mmakundi;Attached quickstart to reproduce issue.,"14/Jun/16 07:25;mgrigorov;Attaching a simple demo app with custom IPageStore that serializes the page asynchronously.

I am not sure such impl should be provided by Wicket distro by default because it won't work well when the application makes a new request before the page is serialized and saved. In that case it will serve an old version or even worse will fail with PageExpiredException.
","15/Jun/16 08:47;mmakundi;Thanks. How could this be modified such that in case a new request occurs, the pagemap would be blocked until serialization has finished? Similar way as pagemap is locked normally for concurrent requests.","15/Jun/16 09:18;mgrigorov;You will need a custom IPageManager too.
It should keep a list of ""pages in progress"" and should block access to them.",15/Jun/16 10:05;mmakundi;Could you help and make them a bundle/pair? Customer IPageStore that also configures necessary custom IPageManager (or vice versa)? Then could run them in a test set & performance tests.,"01/Jul/16 12:46;koutsoub;[~mgrigorov] I setup a naive implementation of your comment above, for the sake of simplicity I reused the PageAccessSynchronizer in order to verify the base logic of the implementation 
The code based on your sample is available below
https://github.com/koutsoub/wicket-samples/blob/master/WICKET-6177/src/main/java/com/mycompany/AsyncPageStore.java
https://github.com/koutsoub/wicket-samples/blob/master/WICKET-6177/src/main/java/com/mycompany/AsyncPageStorePageManagerProvider.java

Will the above do the trick?
Lock the page when serialization is requested, unlock the page when serialization completes.
Can we reuse the PageAccessSynchronizer for this logic (if so we could extend the WicketSession in order to use the provider there) or implement a PageSerializerSynchonizer in the same principles?
 ","12/Jul/16 19:20;mgrigorov;Hi,

I think your code should work.

It won't be possible to use the Session's PageAccessSynchronizer even if it was possible to get a reference to it because it doesn't keep track of the number of locks per pageId.
So Wicket will lock the page in the begin of the request cycle, then your logic will call lockPage() again and then fork the serialization in a new thread. The previous thread will continue by committing the request, i.e. will call unlockAllPages(). At the end of the serialization your logic will call again unlockAllPages() but this will do nothing. If in the meantime another request asks for this page by id then it will use an older version of it, if there is such, i.e. there was an Ajax request for it before.

So I see two solutions:
- use a second PageAccessSynchronizer as you did it
- add logic to PageAccessSynchronizer to count the locks and unlocks

I'd prefer the first solution because the second adds complexity that is not really needed by 99% of the apps.","03/Nov/16 00:05;manuelbarzi;hi guys,

i've been reviewing this issue a bit and i find out that there is already a good async impl for data storage, in which the default construction (by default-page-manager-provider) wraps the (sync)-disk-data-store with async-data-store. this last already works with concurrency on data storing, managing entries tracked by session-id and page-id.

my projection is: ok, why not applying a similar strategy on page-store. keeping the current (sync)-defaul-page-store being wrapped by an async-page-store managing concurrency in a similar way to what async-data-store already does.

just my first thoughts i wanted to share with you, and open to discussion if you feel like to share too.","29/Nov/16 18:11;manuelbarzi;hi again there,
here i created a PoC with the idea, applying the async behavior on an async-page-store (based on asynchronous-data-store) https://github.com/manuelbarzi/wicket-async-page-store","01/Dec/16 07:33;mgrigorov;Hi Manuel,

Your implementation looks good to me!
Maybe the wait times should be made configurable because 30ms might be a bit short for the original problem in [~mmakundi]'s application. If is possible to serialize his page in 30ms then most probably there won't be a need for async page store.","19/Jan/17 09:39;manuelbarzi;hi [~mgrigorov]

those waiting times are not for serialisation itself, but for the blocking queue that temporary catches the page entries as they are requested to be stored: 30ms timeout when adding an entry into de queue, and 1000ms timeout when retrieving an entry from the queue. the former is used when requesting an async store of a page, just to add it to the queue (BlockingQueue.offer(...)), and the latter is used when retrieving that page entry from the queue (BlockingQueue.poll(...)) to proceed to serialisation by means of the wrapped and original sync store.

there is only one worker thread in charge of polling those entries from the queue and use the original sync page store to serialise the queued pages. this is where the wrapper async page store decouples the process of serialisation, calling the original sync page store in that thread.

so there are two sides here: the producing of those page entries in that queue, and the consuming of them in the worker thread. both operations over the blocking queue require a timeout to exactly avoid the async page store to be blocked if the queue cannot respond better than those times.

in case and entry cannot be queued, then the async page store would just delegate the task to the original sync page store. that is, the async page store would just work in a sync manner if the timeout is reached. it's like saying ""let's try to save this page asynchronously, but if the queue is overloaded, then cannot wait for it, let's proceed with the traditional synchronous page store"". that's it.

and in case an entry cannot be un-queued, then the worker thread would just retry a poll a immediately after, until it finally reaches to retrieve an entry for synchronously storing it, that is, using the original sync store inside it to finally serialise the page.

finally, in case a user requests a page that has already been queued but hasn't been serialised yet, then the store retrieves it from queue and returns it immediately (located in a concurrent map). this provides a non-wait response, and a quick answer with page version requested.

i hope these explanation could provide a more clear picture of the projection, otherwise let me know, please ,)","23/Jan/17 19:12;mmakundi;Thanks, Manuel. Would you please add following things:
- logging so that simple performance statistics can be logged
- ensure there are junit tests demonstrating low, normal and high load with fast, average and slow serializing pages
- proposal how this could be committed in a way that it would be activated by default for a default wicket configuration","31/Jan/17 20:51;mgrigorov;Thanks [~manuelbarzi]!
Please create a pull request with your suggestion so we can discuss it. If the team likes it then it might be included in Wicket Core!","12/Feb/17 02:12;githubbot;GitHub user manuelbarzi opened a pull request:

    https://github.com/apache/wicket/pull/212

    WICKET-6177 Blocking page serialization

    from https://issues.apache.org/jira/browse/WICKET-6177
    
    **AsyncPageStore** adds the capability to provide an asynchronous page storing by wrapping the original sync page store (e.g. DefaultPageStore) and handling store requests in a queue and storing pages in worker thread which makes use of the original store. The number of pages to be managed asynchronously is defined by a capacity, provided by estimation which should be done on each specific application where applied.
    
    The aim of AsyncPageStore is to unblock page requests when serialization process takes 'too long', giving the user the sensation of 'slow web'. This could happen in applications that for any reason delay on backing up pages by means of the current default wicket store.
    
    It adds the chance to manage a preset number of pages asynchronously, defined by the 'capacity', and in case that limit is exceeded by requests, it just works as the original sync page store, by simply delegating work on it until the queue is released and space is done to handle pages in asynchronous way again.
    
    It acts in a way like saying ""let's handle storing of pages asynchronously for an estimated number of them in 'normal conditions', and in case there is an excess of pages to store (peak of requests), that is, exceeding async store 'capacity', then let's just work as normally.
    
    **AsyncPageStoreTest** provides initial on/off cases with the scenarios in which async page store works in 'normal conditions' (not exceeding capacity), and the opposite (arriving at a point of exceeding that capacity).
    
    original code is already 'gutted' in a **quickstart** for inspection and testing in https://github.com/manuelbarzi/wicket-async-page-store
    
    for further details on this projection, just following the first link above.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/manuelbarzi/wicket master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/212.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #212
    
----
commit 2ffd587dea4c5e1edec0853f35a9b5761e391917
Author: manuelbarzi <manuelbarzi@manuelbarzis-macbook-pro.local>
Date:   2017-02-12T01:23:40Z

    WICKET-6177 Blocking page serialization

----
","12/Feb/17 15:18;githubbot;Github user bitstorm commented on the issue:

    https://github.com/apache/wicket/pull/212
  
    Hi @manuelbarzi 
    thank you for you PR. I see you added Guava as dependency but I don't see any point where you use it. Am I missing something?
","12/Feb/17 21:40;githubbot;Github user manuelbarzi commented on the issue:

    https://github.com/apache/wicket/pull/212
  
    ciao @bitstorm 
    
    yes, indeed, guava and commons-lang3, both for test purposes - test scope / pom - in AsyncPageStoreTest, making use of com.google.common.base.Stopwatch and org.apache.commons.lang3.RandomUtils, respectively.
","12/Feb/17 23:11;githubbot;Github user bitstorm commented on the issue:

    https://github.com/apache/wicket/pull/212
  
    ciao @manuelbarzi ,
    
    my fault, I'm not very familiar with Guava and its package naming. 
","20/Feb/17 03:46;githubbot;Github user mmakundi commented on the issue:

    https://github.com/apache/wicket/pull/212
  
    Thanks @manuelbarzi and Some findings:
    
    1. I would remove the (non-Javadoc) and instead format those with start-prefix /** like true javadoc and remove extra empty lines in the javadoc
    
    2. All in all check for formatting and extra lines etc.
    
    3. In case entries.offer fails, entryMap.remove is called before pageStore.storePage. If we assume pageStore.storePage is slow, maybe it would be good idea to postpone remove so that a new requiest during pageStore.storePage can use the in-memory reference? Similar to what is happening in PageSavingRunnable.run? Also this will make a great re-usable method:
    storePageAndRemoveFromMap(...) {
             log.debug(""Saving asynchronously: {}..."", entry);
            pageStore.storePage(sessionId, page);
            entryMap.remove(getKey(entry));
    }
    
    4. Same as in (3.) to catch (InterruptedException e) { log.error(e.getMessage(), e);; storePageAndRemoveFromMap(...); }
    
    5. Please junit-test if any conflict occur if unbind(sessionId) is called while there are entries in the queue for that session.
    
    6. Please add tests also for borderline racing cases such as same instance is returned for new request arriving before storing is complete.
    
    7. I would rename AsyncPageStore -> AsynchronousPageStore for clarity and symmetry (symmetric naming with AsynchronousDataStore),
    
    8. Please propose a patch also into DefaultPageManagerProvider such that  new AsyncPageStore(super.newPageStore(dataStore), 100); would be the default pagestore for wicket when dataStore.canBeAsynchronous()==true. Similar way that AsynchronousDataStore is default.
","16/Mar/17 11:23;githubbot;Github user 1nside0ut commented on the issue:

    https://github.com/apache/wicket/pull/212
  
    hi @mmakundi 
    
    ""3. In case entries.offer fails, entryMap.remove is called before pageStore.storePage. If we assume pageStore.storePage is slow, maybe it would be good idea to postpone remove so that a new requiest during pageStore.storePage can use the in-memory reference? Similar to what is happening in PageSavingRunnable.run? Also this will make a great re-usable method:
    storePageAndRemoveFromMap(...) {
    log.debug(""Saving asynchronously: {}..."", entry);
    pageStore.storePage(sessionId, page);
    entryMap.remove(getKey(entry));
    }""
    
    entryMap is not supposed to be used as ""backup mem"", there's already one queue for that (entries). it's not by mistake that map-removal is located before synchronous store call for the same thread (not the worker). the reason is simple: if before try-to-queue a page fails, or it simply takes to long (offer), then that would mean app mem / process is in trouble, ""no space / speed for that"", so there's not point on keeping that ref attached to map (occupying) while synchronous storing (""slow"" storing, as you say) if it has already been stated a fail on trying to manage it in queue (mem). using map as ""a backup for when queuing fails"" would just false the mechanism, imposing a mem kept at a non-optimal point for that. 
    on the other hand, regarding the worker thread that ""asynchronously"" stores the page, the case is the opposite. every single page that has achieved to enter the queue before (that is, offer succeeded), has already got the privilege to being kept in mem while not being entirely stored, so being removed from map after that.
    queue protects itself from accepting or not new entries depending on env conditions, but outside it logic should act in coherence to it.
","23/Mar/17 15:13;mgrigorov;Reopen to consider the PR.
I thought I've done this already ...","06/Apr/17 07:55;thomas.heigl;Hi,

I'm very interested in this issue and gave the implementation a test-run yesterday. 

My application is currently configured to use {{HttpSessionDataStore}}. {{AsynchronousPageStore}} fails when used with this data store. Maybe there should be an additional check that the {{IDataStore}} supports asynchronous storing before wrapping the page store with the asynchronous implementation?

-t","06/Apr/17 07:59;mgrigorov;How exactly it fails ?
What error(s) do you experience ?","06/Apr/17 09:49;thomas.heigl;It fails with:

{code}
16816 [read] ERR o.a.w.p.memory.HttpSessionDataStore      - Cannot store the data for page with id '2' in session with id '528610207C4F0751CA70F4B34DB75DBE'
{code}

The code in {{HttpSessionDataStore}}:

{code}
	@Override
	public void storeData(String sessionId, int pageId, byte[] pageAsBytes)
	{
		PageTable pageTable = getPageTable(true, true);
		if (pageTable != null)
		{
			pageTable.storePage(pageId, pageAsBytes);
			if (LOG.isDebugEnabled())
			{
				LOG.debug(""Stored '{}' bytes for page '{}' in session '{}'"",
						pageAsBytes.length, pageId, sessionId);
			}
			evictionStrategy.evict(pageTable);
		}
		else
		{
			LOG.error(""Cannot store the data for page with id '{}' in session with id '{}'"",
				pageId, sessionId);
		}
	}
{code}

It tries to get the page table from a session attribute and the session is not available after asynchronous serialization.","06/Apr/17 10:58;mgrigorov;That's the purpose of IDataStore#canBeAsynchronous().
It seems it is not used in your setup.
Wicket's default page manager  uses it at https://github.com/apache/wicket/blob/137fa9e40237e12c2a9566f7701356796d43aaa9/wicket-core/src/main/java/org/apache/wicket/DefaultPageManagerProvider.java#L60","06/Apr/17 10:59;mgrigorov;I understand now.
The IPageStore is asynchronous in your case, i.e. one level up.
I guess the same check should be used before creating the IPageStore.","06/Apr/17 11:37;thomas.heigl;That's what I was thinking, yes.","06/Apr/17 11:59;manuelbarzi;hi, Thomas, Martin,

in the pr was introduced a change in default-page-manage-provider to check whether page-store can be asynchronous,
https://github.com/manuelbarzi/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/DefaultPageManagerProvider.java#L61#L73

but that check excludes data-store check (lines above). may that logic be updated to subordinate the page-store async check into the data-store one above. that is:

{code}
	@Override
	public IPageManager apply(IPageManagerContext pageManagerContext)
	{
		IDataStore dataStore = newDataStore();

		StoreSettings storeSettings = getStoreSettings();

		IPageStore pageStore;

		if (dataStore.canBeAsynchronous())
		{
			int capacity = storeSettings.getAsynchronousQueueCapacity();
			dataStore = new AsynchronousDataStore(dataStore, capacity);

			pageStore = newPageStore(dataStore);

			if (pageStore.canBeAsynchronous())
			{
				pageStore = new AsynchronousPageStore(pageStore, capacity);
			}
		}
		else
			pageStore = newPageStore(dataStore);

		return new PageStoreManager(application.getName(), pageStore, pageManagerContext);

	}
{code}
",06/Apr/17 17:12;thomas.heigl;[~manuelbarzi]: Looks good to me and would work as a drop-in replacement also for users who are currently using {{HttpSessionDataStore}}.,"06/Apr/17 17:44;manuelbarzi;pushed ,)","12/Apr/17 21:28;jira-bot;Commit 2ffd587dea4c5e1edec0853f35a9b5761e391917 in wicket's branch refs/heads/master from manuelbarzi
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2ffd587 ]

WICKET-6177 Blocking page serialization
","12/Apr/17 21:28;jira-bot;Commit 25fb5a29dbe523d6ebd7dccdea639eaf5bc28618 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=25fb5a2 ]

WICKET-6177 Introduce AsynchronousPageStore

Minor cleanups
","12/Apr/17 21:28;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/212
","12/Apr/17 21:32;mgrigorov;Thank you for the contribution and the patience, [~manuelbarzi] !","13/Apr/17 14:38;manuelbarzi;np, Martin ,) 👍",09/Aug/17 13:59;wschlich;Will this be backported to 7.x/6.x?,"13/Aug/17 11:15;mgrigorov;Hi [~wschlich],

Please create a new ticket for 7.x.
We are going to release 8.0.0 soon so 6.x branch will be moved in maintenance mode, i.e. it will receive only security related fixes."
data-wicket-placeholder is invalid XHTML,WICKET-6606,13195127,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,gertjan_schouten,gertjan_schouten,30/Oct/18 14:27,30/Oct/18 21:31,13/Mar/19 23:18,30/Oct/18 21:31,8.1.0,,,,,,,,8.2.0,9.0.0,,,wicket-core,,,0,,,,,,,,"Because of WICKET-6575, Wicket now sometimes adds a data-wicket-placeholder attribute. However, when you serve your pages with MIME-type application/xhtml+xml, the browser expects valid XML. The data-wicket-placeholder attribute results in a browser parse error, because it does not have a value. This makes 8.1.0 currently unusable to us, since we serve pure XHTML. I suggest giving the attribute an empty value: data-wicket-placeholder="""" or a dummy value: data-wicket-placeholder=""true"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-30 21:28:46.216,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 30 21:31:55 UTC 2018,,,,,,0|i3zswn:,9223372036854775807,,,,,,,,"30/Oct/18 21:28;jira-bot;Commit 8fc2eab45577eceed732b252ee7190ab7db55387 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8fc2eab ]

WICKET-6606 data-wicket-placeholder xhtml conform
","30/Oct/18 21:29;jira-bot;Commit 457a0a5b8388d131e4ce883125382f5a457ff350 in wicket's branch refs/heads/wicket-8.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=457a0a5 ]

WICKET-6606 data-wicket-placeholder xhtml conform
",30/Oct/18 21:31;svenmeier;Thanks for the heads up! The new attribute has an empty value now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Once invalidated the Session will be invalidated on every detach,WICKET-6310,13035918,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,marc-g,marc-g,18/Jan/17 16:38,25/Oct/18 13:51,13/Mar/19 23:18,25/Jan/17 22:18,8.0.0-M3,,,,,,,,8.0.0-M4,,,,wicket,,,0,,,,,,,,"I've created a simple project to show that I've a test which works in Wicket 7 but is failing in Wicket 8. Its a simple login form which authenticates a user with Spring Security.

In Wicket 8 the user is redirected to the LoginPage after a succesul login without an error. In Wicket 7 the user is redirected to the HomePage as expected.

You can change the version in the maven property section. 

I've tried to debug by myself but I didn't found anything...

Hint: The test is working in Wicket 8 if you redirect the page with setResponsePage(new HomePage.class) instead of setResponsePage(Homepage.class)

",,,,,,,,,,,,,,,,WICKET-6602,,,,,,,,,18/Jan/17 16:38;marc-g;spring-security.zip;https://issues.apache.org/jira/secure/attachment/12848091/spring-security.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-01-19 09:00:45.816,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 25 22:21:47 UTC 2017,,,,,,0|i38vrj:,9223372036854775807,,,,,,,,"19/Jan/17 09:00;mgrigorov;By reading the description I think I see the reason.
If the login page is stateless then the data stored in InterceptData is lost because there is no http session yet.
If you use `setResponsePage(new SomePage())` then Wicket binds a Session to make sure that this particular page instance is used after the redirect and then the InterceptData is still around and used.

I don't have a solution for this though.
The only workaround I see is to make the LoginPage stateful but then the application will be vulnerable to attacks unless additional logic is added to invalidate the session in case of unsuccessful authentication. But then we are back to square one (lost InterceptData).","20/Jan/17 15:41;marc-g;I've confess that my login page is stateful...
It's on my to do list!","25/Jan/17 22:14;jira-bot;Commit 7716586c713f0645868c023d1340554860526ca2 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7716586 ]

WICKET-6310 Once invalidated the Session will be invalidated on every detach
","25/Jan/17 22:18;mgrigorov;It was really a bug in Wicket!

Your test started with `session.signOut()` and this leaded to invalidation of the session after each request cycle.
So the user has been logged in, then redirected to the HomePage, but after the redirect the session has been invalidated again and the user has been lost, and then the authorization strategy declined the instantiation of HomePage because it is only for USER role.

Thanks for the quickstart!","25/Jan/17 22:21;jira-bot;Commit 5b5e25c9c89ef175e9d0799752bfdaa5205379df in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5b5e25c ]

WICKET-6310 Add licence, fix typo and optimize imports
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken JavaScript due to fix charsetName in JavaScriptPackageResource,WICKET-6586,13184824,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,skyYaga,skyYaga,13/Sep/18 08:42,16/Oct/18 07:58,13/Mar/19 23:18,16/Oct/18 07:28,7.10.0,,,,,,,,7.11.0,8.2.0,9.0.0,,wicket,,,0,,,,,,,,"When running Wicket in DEPLOYMENT Mode, {{DefaultJavaScriptCompressor}} will be set as JavaScript Compressor by default to strip Comments and Whitespaces from JavaScript files.

In {{JavaScriptPackageResource}} the {{processResponse}} method sets the charsetName fix to ""UTF-8"", when compressing JS files:
{code:java}
@Override
protected byte[] processResponse(final Attributes attributes, byte[] bytes)
{
 final byte[] processedResponse = super.processResponse(attributes, bytes);

 IJavaScriptCompressor compressor = getCompressor();

 if (compressor != null && getCompress())
 {
  try
  {
   String charsetName = ""UTF-8"";
...{code}
If those JavaScript files are not in UTF-8, the Compressor can break those files.

E.g. when using ISO-8859-15 and having umlauts in the file, the umlauts will be replaced by the REPLACEMENT CHARACTER ""\uefbfbd"".

There should be a way to specify the charsetName in {{JavaScriptPackageResource}}.

E.g. by calling something like {{getResourceSettings().setJavaScriptCharset()}}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-14 07:56:49.402,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 16 07:58:09 UTC 2018,,,,,,0|i3y1mv:,9223372036854775807,,,,,,,,"14/Sep/18 07:56;mgrigorov;Out of curiosity: why one would want to maintain code base with mixed text encoding ?

If you have JS/CSS resources with different (more than 2) encodings then the developer will have to configure it for each and every JSRR/CssRR.

Isn't it better to keep all your static resources with the same encoding ? 99.9% of the time UTF-8 will cover you. If you do more fancy stuff then you may need UTF-16, but again: why ?","14/Sep/18 08:27;skyYaga;For historical reasons our code base uses ISO-8859-15. Not only single files, but the whole project.

That's the only reason. I totally agree that it's better to keep all static resources with the same encoding.","14/Sep/18 08:43;mgrigorov;Let's see what others think but my opinion is that we should not add more settings and complexity for something that is considered as a bad practice in 2018.

 

I see the following workarounds for you:

1) encode your static resources to UTF-8

2) disable Wicket compression

2.1) use pre-compressed resources (i.e. .min.js) for production

3) Create custom JavaScriptResourceReference and override #compress() method.","14/Sep/18 20:42;svenmeier;For Wicket 9 we could change ITextResourceCompressor#compress() to work on a byte[] instead of a String, that way the encoding could be configured globally for each compressor.

But at the moment I don't see a high demand for this.","17/Sep/18 11:47;mgrigorov;I also thought about such change but then most probably we will need to pass some extra information, e.g. whether it is a JS or CSS resource, probably the resource name/path, etc.

 

About ""demand"": this is the first time anyone complains about this hardcoded UTF-8 encoding in this class. It is there for 5+ years.","21/Sep/18 08:13;skyYaga;I understand that this does not have a high priority and probably just a few people would need this.

By the way: I just saw that there is already a Method {{PackageResource#setTextEncoding(final String textEncoding)}}.
I didn't have a look at the internals, but maybe this could also be used.","12/Oct/18 07:00;githubbot;GitHub user martin-g opened a pull request:

    https://github.com/apache/wicket/pull/295

    WICKET-6586 Broken JavaScript due to fix charsetName in JavaScriptPac…

    …kageResource
    
    Introduce PackageResource#getProcessingEncoding() that could be overridden by the application to use a custom encoding to read a resource from the class path.
    Move the compressing logic from Css/JavaScript-PackageResource to PackageResource class to DRY it.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6586-introduce-processing-encoding

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/295.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #295
    
----
commit 072b2fc7fd521ec07e40fc5af16b75db47694b33
Author: Martin Tzvetanov Grigorov <mgrigorov@...>
Date:   2018-10-12T06:58:04Z

    WICKET-6586 Broken JavaScript due to fix charsetName in JavaScriptPackageResource
    
    Introduce PackageResource#getProcessingEncoding() that could be overridden by the application to use a custom encoding to read a resource from the class path.
    Move the compressing logic from Css/JavaScript-PackageResource to PackageResource class to DRY it.

----
","12/Oct/18 07:04;mgrigorov;Created a Pull Request for discussion at: [https://github.com/apache/wicket/pull/295]

 

It introduces an overridable PackageResource#getProcessingEncoding() that will be used to read the resource. After processing (compressing) it will use the textEncoding to produce the output that will be written in the response if it is configured.

This is against master branch (9.x) but I think it can easily be downported to 8.x and even 7.x","15/Oct/18 09:18;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/295
  
    +1
","16/Oct/18 07:17;jira-bot;Commit 072b2fc7fd521ec07e40fc5af16b75db47694b33 in wicket's branch refs/heads/master from Martin Tzvetanov Grigorov
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=072b2fc ]

WICKET-6586 Broken JavaScript due to fix charsetName in JavaScriptPackageResource

Introduce PackageResource#getProcessingEncoding() that could be overridden by the application to use a custom encoding to read a resource from the class path.
Move the compressing logic from Css/JavaScript-PackageResource to PackageResource class to DRY it.
","16/Oct/18 07:17;jira-bot;Commit e749e61a03bf067e85fbfbcf48f40e7a30eca0f6 in wicket's branch refs/heads/master from Martin Tzvetanov Grigorov
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e749e61 ]

Merge branch 'WICKET-6586-introduce-processing-encoding'
","16/Oct/18 07:17;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/295
","16/Oct/18 07:21;jira-bot;Commit b1d099db857d007cc44a93317575304cee14b429 in wicket's branch refs/heads/wicket-8.x from Martin Tzvetanov Grigorov
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b1d099d ]

WICKET-6586 Broken JavaScript due to fix charsetName in JavaScriptPackageResource

Introduce PackageResource#getProcessingEncoding() that could be overridden by the application to use a custom encoding to read a resource from the class path.
Move the compressing logic from Css/JavaScript-PackageResource to PackageResource class to DRY it.

(cherry picked from commit 072b2fc7fd521ec07e40fc5af16b75db47694b33)
","16/Oct/18 07:26;jira-bot;Commit b342b64b416aae7b8078fa2a73a23b1ef4f311b7 in wicket's branch refs/heads/wicket-7.x from Martin Tzvetanov Grigorov
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b342b64 ]

WICKET-6586 Broken JavaScript due to fix charsetName in JavaScriptPackageResource

Introduce PackageResource#getProcessingEncoding() that could be overridden by the application to use a custom encoding to read a resource from the class path.
Move the compressing logic from Css/JavaScript-PackageResource to PackageResource class to DRY it.

(cherry picked from commit 072b2fc7fd521ec07e40fc5af16b75db47694b33)
","16/Oct/18 07:28;mgrigorov;The suggested PR is merged to 7.x, 8.x and master.

 

[~skyYaga] Now you can override JavaScriptResourceReference#getResource() to return a specialization of JavaScriptPackageResource that overrides #getCompressingEncoding()",16/Oct/18 07:58;skyYaga;Thank you guys!,,,,,,,,,,,,,,,,,,,,
Unable to read cookies containing '.' characters in names when using CookieUtils ,WICKET-6570,13174113,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,jan-krakora,jan-krakora,24/Jul/18 14:14,25/Sep/18 11:39,13/Mar/19 23:18,25/Sep/18 11:39,8.0.0,,,,,,,,9.0.0,,,,wicket,,,0,,,,,,,,"We are using CookieUtils for reading some 3rd party cookies from the request. This cookies however contains '.' characters (in their names) and CookieUtils replaces all '.' with '..' So those cookies are not readable anymore.

org.apache.wicket.util.cookies.CookieUtils#getSaveKey(String key) :
{code:java}
// cookie names cannot contain ':',
// we replace ':' with '.' but first we have to encode '.' as '..'
key = Strings.replaceAll(key, ""."", "".."").toString();
{code}
Why is '.' replaced with '..'? Is '.' in a cookie name forbidden character?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-24 16:09:33.664,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 25 11:39:17 UTC 2018,,,,,,0|i3w85z:,9223372036854775807,,,,,,,,"24/Jul/18 16:09;florianlacreuse;FWIW, it's related to issue -WICKET-1834-.","25/Sep/18 11:00;svenmeier;When a component's model is saved into / loaded from a cookie, CookieUtils escapes the component path separator ':' with '.'.
To prevent name clashes with dots in other component's paths these are encoded with '..' first.

For now you can override CookieUtils#getSaveKey(String) to return the key without any escaping.

For Wicket 9 we will change CookieUtils to do its escaping only for #save(FormComponent) and #load(FormComponent) and leave cookie names untouched otherwise.","25/Sep/18 11:04;jan-krakora;OK, thank you for explanation. I will do that.","25/Sep/18 11:37;jira-bot;Commit 584b7f6a20aa1ac2aaa3751c3e45283f481d1bcf in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=584b7f6 ]

WICKET-6570 escape component cookies only
",25/Sep/18 11:39;svenmeier;Cookie name is escaped only when loaded or saved for a component.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BaseWebSocketBehavior should check sessionId cookie name dynamically,WICKET-6571,13174116,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,jan-krakora,jan-krakora,24/Jul/18 14:26,19/Sep/18 10:15,13/Mar/19 23:18,24/Jul/18 15:30,8.0.0,,,,,,,,8.1.0,,,,wicket-native-websocket,,,0,,,,,,,,"When creating a WebSocket connection, Wicket tries to check if session id is tracked by URL or by cookies.

The code is in the org.apache.wicket.protocol.ws.api.BaseWebSocketBehavior#getSessionId(Component component)

It uses a hardcoded sessionId cookie name ({color:#333333}JSESSIONID{color}). So when an application uses a different sessionId cookie name, this code wrongly assumes there is no cookie with session id and appends session Id in the websocket connection URL.

I think it should use to get session id cookie name
{code:java}
servletContext.getSessionCookieConfig().getName(){code}
 ",,,,,,,,,,,,,,,,,,,,,WICKET-6593,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-24 15:28:38.037,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jul 24 15:30:38 UTC 2018,,,,,,0|i3w86n:,9223372036854775807,,,,,,,,"24/Jul/18 15:28;jira-bot;Commit 9f3bbac34e4ba914473e04a12b77386b6a2a8186 in wicket's branch refs/heads/master from Martin Tzvetanov Grigorov
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9f3bbac ]

WICKET-6571 BaseWebSocketBehavior should check sessionId cookie name dynamically
","24/Jul/18 15:29;jira-bot;Commit 06cd2202fd43e3c5e262e38830a134f77b2306b2 in wicket's branch refs/heads/wicket-8.x from Martin Tzvetanov Grigorov
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=06cd220 ]

WICKET-6571 BaseWebSocketBehavior should check sessionId cookie name dynamically

(cherry picked from commit 9f3bbac34e4ba914473e04a12b77386b6a2a8186)
",24/Jul/18 15:30;mgrigorov;Thank you for the report and the suggestion!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problems with download pages,WICKET-6591,13185558,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,sebb@apache.org,sebb@apache.org,17/Sep/18 15:44,18/Sep/18 13:47,13/Mar/19 23:18,18/Sep/18 13:47,,,,,,,,,,,,,,,,0,,,,,,,,"The page http://wicket.apache.org/start/download.html has a link to 
http://wicket.apache.org/start/wicket-9.x.html
However that does not exist

The page http://wicket.apache.org/start/wicket-8.x.html does not have a link to the source.
All ASF projects MUST provide source downloads.

The page http://wicket.apache.org/start/wicket-7.x.html#manually has a link to the source.
However the links to PGP and hashes use the archive server; for current releases that use the mirror system, the corresponding sigs and hashes must use https://www.apache.org/dist/...
Also the page does not have a link to KEYS which is required for PGP verification
Nor does it have details on download verification.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-17 18:46:07.616,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 18 11:45:38 UTC 2018,,,,,,0|i3y64v:,9223372036854775807,,,,,,,,"17/Sep/18 18:46;bitstorm;Hi [~sebb@apache.org],

thank you for your advises. I changed the site content accordingly. Let me now if something still missing.","17/Sep/18 19:24;sebb@apache.org;Thanks.

However the replacement link for wicket-9.x is for a SNAPSHOT version. 
Such links must not appear on download pages intended for the general public. 
They should only appear on pages targeted at Wicket developers.
If there are no official releases for 9.x then it should not appear on the download page(s)

The wicket-8.x and 7.x download pages are also incorrect.
Download pages must not use dist.apache.org.
They must only use the mirror servers for the packages, and https://www.apache.org/dist/wicket/... for KEYS, sigs and hashes.
","17/Sep/18 20:18;bitstorm;Ok,

I've changed links to point to [https://www.apache.org/dist/wicket/]. I've removed 9.x from download page as we don't have yet a release for it.","17/Sep/18 20:59;sebb@apache.org;Sorry, but the pages are still wrong.

https://www.apache.org/dist/wicket/ is to be used for KEYS, sigs and hashes.

However the packages (e.g. .tar.gz and .zip) themselves must  use the mirror system.","17/Sep/18 21:29;bitstorm;hi,

mirror site is [http://www.apache.org/dyn/closer.cgi/wicket] right?","17/Sep/18 23:00;sebb@apache.org;Yes, but it's better to point to the actual file, e.g.

http://www.apache.org/dyn/closer.cgi/wicket/1.5.17/apache-wicket-1.5.17-source.tgz

Note that this URL is currently used on the 1.5.x download page and as I recall the original 1.7.x page had the proper mirror URL.

The page http://wicket.apache.org/start/wicket-6.x.html#download-manually has the correct mirror URL, but uses the wrong host for the sigs and hashes.",18/Sep/18 02:45;solomax;If I'm not mistaken [~humbedooh] wrote it is better to use [https://www.apache.org/dyn/closer.lua] not [http://www.apache.org/dyn/closer.cgi],"18/Sep/18 08:20;bitstorm;[~sebb@apache.org]
Download pages for 8.x and 7.x should be ok now.
PS: can I resend the announce for Wicket 8.1.0 in the meantime?

Thank you","18/Sep/18 08:49;sebb@apache.org;http://wicket.apache.org/start/wicket-8.x.html#manually looks OK now, thanks.

OK to resend the announce; remember to link to the download page - not the mirror.","18/Sep/18 08:58;sebb@apache.org;[~solomax]

The second (http) link in your comment has display text which disagrees with the underlying URL - this is very confusing.
I assume you meant to contrast https with http, but that's not how the URLs appear.

Of course it's OK to use https: rather than http: though I doubt it makes any difference to the security provided that https is used for KEYS, sigs and hashes. For consistency you would also need to use https for links to the download page.
","18/Sep/18 09:05;solomax;Sorry for inconvenience [~sebb@apache.org],

The issue is caused by visual JIRA mode :(

These 2 links are https://www.apache.org/dyn/closer.lua vs http://www.apache.org/dyn/closer.cgi

There are 2 differences:
1) http vs https -> IMO it is better to use https links where possible since http links might ring a bell if  https://wicket.apache.org is used
2) closer.lua vs closer.cgi -> if I'm not mistaken Daniel told lua version is 10 times faster ....","18/Sep/18 09:29;sebb@apache.org;OK, I see now.
I did not notice the cgi/lua difference.

I doubt that redirection from CGI to LUA makes such a difference to the time.
I just tried:
$ time curl -I http://www.apache.org/dyn/closer.cgi/wicket/1.5.17/
and
$ time curl -I http://www.apache.org/dyn/closer.lua/wicket/1.5.17/

The times I got vary between
0m0.095s and 0m0.124 for CGI and 
0m0.102s and 0m0.196s for LUA

i.e. in my tests, CGI is faster.
But there is so much variation that any actual differences are irrelevant.

Note that the underlying links are currently:

https://www.apache.org/dyn/closer.lua
http://www.apache.org/dyn/closer.cgi/wicket/1.5.17/apache-wicket-1.5.17-source.tgz

[Best to use plain text in cases where you are comparing link text]","18/Sep/18 09:41;solomax;I have edited my comment to reduce confusion
Daniel is well known Lua enthusiast :)","18/Sep/18 10:55;bitstorm;[~sebb@apache.org]
I've fixed links for 6.x signs and hashes","18/Sep/18 11:45;sebb@apache.org;Thanks.
Looks OK now",,,,,,,,,,,,,,,,,,,,,
ClientInfo fails with NumberFormatException for unusual browser versions,WICKET-6589,13185491,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,thomas.heigl,thomas.heigl,17/Sep/18 12:11,18/Sep/18 08:24,13/Mar/19 23:18,17/Sep/18 18:16,8.1.0,,,,,,,,7.11.0,8.2.0,,,wicket,,,0,,,,,,,,"Determining browser versions from the user agent can fail with an exception. As seen on our PROD environment for the following user agent:

""Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.01537112190982""

I'm not sure this is a valid UA, but Wicket should probably never fail with an exception in this case.
{code:java}
Details: java.lang.NumberFormatException: For input string: ""01537112190982""
        at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
        at java.lang.Integer.parseInt(Integer.java:583)
        at java.lang.Integer.parseInt(Integer.java:615)
        at org.apache.wicket.protocol.http.request.WebClientInfo.setMajorMinorVersionByPattern(WebClientInfo.java:354)
        at org.apache.wicket.protocol.http.request.WebClientInfo.setMozillaProperties(WebClientInfo.java:285)
        at org.apache.wicket.protocol.http.request.WebClientInfo.init(WebClientInfo.java:198)
        at org.apache.wicket.protocol.http.request.WebClientInfo.<init>(WebClientInfo.java:112)
        at org.apache.wicket.protocol.http.request.WebClientInfo.<init>(WebClientInfo.java:76)
        at org.apache.wicket.protocol.http.request.WebClientInfo.<init>(WebClientInfo.java:65)
        at org.apache.wicket.protocol.http.WebSession.getClientInfo(WebSession.java:88){code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-17 12:55:48.654,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 18 08:24:51 UTC 2018,,,,,,0|i3y5q7:,9223372036854775807,,,,,,,,"17/Sep/18 12:55;svenmeier;""01537112190982"" doesn't fit into an integer :(.","17/Sep/18 15:16;thomas.heigl;What about wrapping the integer parsing in a try-catch, log a warning and keep the minor version as -1 if it can't be parsed?

 ","17/Sep/18 18:01;jira-bot;Commit 11fcc6e66e75304763e4a787452f1f61ab207d0e in wicket's branch refs/heads/wicket-8.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=11fcc6e ]

WICKET-6589 guard parsing failure","17/Sep/18 18:01;jira-bot;Commit f4d332b160ec4b35449b98e5bda4c7de7eaf6b11 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f4d332b ]

WICKET-6589 guard parsing failure",17/Sep/18 18:16;svenmeier;Illegal values are now replaced with -1,18/Sep/18 08:24;thomas.heigl;Thanks [~svenmeier]!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JQueryResourceReference#get() (still) return V1,WICKET-6574,13174372,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,sbriquet,sbriquet,25/Jul/18 14:26,27/Jul/18 17:31,13/Mar/19 23:18,27/Jul/18 17:31,8.0.0,,,,,,,,8.1.0,9.0.0,,,wicket,,,0,,,,,,,,"JQueryResourceReference#get() returns V1 (jquery-1.12.4) and is marked as deprecated

It is still called by JQueryPluginResourceReference, in the case the application does not exists.

On another side, we have WicketAjaxJQueryResourceReference, which does explicitly returns V2 in the case the application does not exists.

IIRC V1 was returned by #get() to keep the compatibility. Maybe it's time to remove #get() and make JQueryPluginResourceReference use V2?

WDYT ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-25 19:46:17.585,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jul 27 17:31:36 UTC 2018,,,,,,0|i3w9rr:,9223372036854775807,,,,,,,,"25/Jul/18 19:46;mgrigorov;Here is how this issue has been found: https://github.com/adessoAG/wicked-charts/issues/153
I don't remember the discussion about using V1 in #get() for compatibility but I think Wicket should use the same version as default, i.e. V2.","25/Jul/18 20:01;svenmeier;Wicket 9.x already does what you are proposing, i.e. use V2 as default everywhere and deprecating #get().

I agree with Martin to change it to V2 in Wicket 8.x too.","27/Jul/18 17:23;jira-bot;Commit b9869d562e96550e0656163d35098135ccccaad3 in wicket's branch refs/heads/wicket-8.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b9869d5 ]

WICKET-6574 use jquery V2
","27/Jul/18 17:26;jira-bot;Commit 5226b120cf67fd4e08c529b447d5d906f6c5438d in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5226b12 ]

WICKET-6574 remove deprecated method
","27/Jul/18 17:31;svenmeier;8.x uses V2 throughout now, #get() is removed in 9.x",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"WicketTesterHelper ignores invalid Ajax-Event names starting with ""on""",WICKET-6573,13174294,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,svenackermann,svenackermann,25/Jul/18 07:52,25/Jul/18 19:59,13/Mar/19 23:18,25/Jul/18 19:59,8.0.0,,,,,,,,8.1.0,,,,wicket,,,0,,,,,,,,"Hi,
 we have a unit test for a component that still used an {{AjaxFormSubmitBehavior}} with event name ""onchange"". This test did not fail in Wicket 8 when using Method {{WicketTester.executeAjaxEvent(""componentId"", ""change"")}} as I would have expected.
 It's because {{WicketTesterHelper.findAjaxEventBehaviors}} removes the ""on"" from the behavior's event name and thus executes the behavior anyway. This should not be done anymore in Wicket 8, as I guess. So, WICKET-6148 and this [commit |https://github.com/apache/wicket/commit/1b366f0c7f205971a5d83c6cc853af0efdfac5df#diff-ca0225da7ea72cf7f22217734e2b7320] is incomplete.

Thanks for a fix.
Sven",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-25 19:58:32.484,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jul 25 19:59:14 UTC 2018,,,,,,0|i3w9af:,9223372036854775807,,,,,,,,"25/Jul/18 19:58;jira-bot;Commit 0f61308e6be84db9491b15117d371fa70ec82b01 in wicket's branch refs/heads/master from Martin Tzvetanov Grigorov
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0f61308 ]

WICKET-6573 WicketTesterHelper ignores invalid Ajax-Event names starting with ""on""

Do not cut the leading 'on' prefix for JS events.

Related-to: WICKET-6148
","25/Jul/18 19:58;jira-bot;Commit 8ed292ffc6688ffdccfb48c5d58318171122effa in wicket's branch refs/heads/wicket-8.x from Martin Tzvetanov Grigorov
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8ed292f ]

WICKET-6573 WicketTesterHelper ignores invalid Ajax-Event names starting with ""on""

Do not cut the leading 'on' prefix for JS events.

Related-to: WICKET-6148
(cherry picked from commit 0f61308e6be84db9491b15117d371fa70ec82b01)
",25/Jul/18 19:59;mgrigorov;Fixed! Thank you!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PageStoreManager#clear() does not completely clear,WICKET-6564,13168015,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,hosea,hosea,25/Jun/18 11:18,04/Jul/18 21:46,13/Mar/19 23:18,04/Jul/18 21:45,7.10.0,,,,,,,,7.11.0,8.1.0,,,wicket,,,0,,,,,,,,"org.apache.wicket.pagePageStoreManager#clear just signals valueUnbound to a internally defined HttpSession-bound SessionEntry. The SessionEntry then does not remove all internal state: the sessionCache ist not cleared.

Please add a setSessionCache(Collections.emptyList()) to SessionEntry#valueUnbound or to PageStore#clear.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-04 21:42:34.55,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jul 04 21:46:45 UTC 2018,,,,,,0|i3v6vr:,9223372036854775807,,,,,,,,"04/Jul/18 21:42;jira-bot;Commit 7665dc563de81b36a1e887d779897068b8cd4abf in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7665dc5 ]

WICKET-6564 clear request and session pages
","04/Jul/18 21:43;jira-bot;Commit 0fd301302c816244aa498e2d11341bbfdeda8d9f in wicket's branch refs/heads/wicket-8.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0fd3013 ]

WICKET-6564 clear request and session pages
",04/Jul/18 21:45;svenmeier;I've change PageStoreManager to clear request *and* session cache.,04/Jul/18 21:46;svenmeier;Thanks Hans!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring proxy creation fails with IAE inside ASM ClassReader on JDK10,WICKET-6552,13161385,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,tgierke2342,tgierke2342,23/May/18 11:28,28/May/18 08:56,13/Mar/19 23:18,26/May/18 12:01,8.0.0,,,,,,,,8.1.0,,,,wicket-spring,,,0,,,,,,,,"Seeing that Wicket 8 just got released I was eager to try out the goodies but got stopped quickly by an IAE on some (but not all) web pages inside cglib/asm (see below for the stacktrace).

Inside WEB-INF/lib we've got:

asm-5.2.jar
 asm-tree-5.2.jar
 asm-util-5.2.jar
 cglib-3.2.5.jar

which is what I would expect looking at the pom.xml for wicket-ioc 8.0.0 so IMHO the classpath is correct. Everything works fine with wicket-ioc 7.10 and JDK 10.0.1 which was using:

asm-5.0.3.jar
 asm-tree-5.0.3.jar
 asm-util-5.0.3.jar
 cglib-3.1.jar

Overriding the dependencies like this:

    <dependency>
      <groupId>cglib</groupId>
      <artifactId>cglib</artifactId>
      <version>3.2.6</version>
    </dependency>

    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm-util</artifactId>
      <version>6.1.1</version>
    </dependency>

 

makes the exception go away.
 I had a brief look at the ClassReader constructor and it seems the IAE gets thrown because of a classfile version not supported by ASM

 

java.lang.IllegalArgumentException
 at org.objectweb.asm.ClassReader.<init>(Unknown Source)
 at org.objectweb.asm.ClassReader.<init>(Unknown Source)
 at org.objectweb.asm.ClassReader.<init>(Unknown Source)
 at net.sf.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:63)
 at net.sf.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1132)
 at net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:630)
 at net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
 at net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:329)
 at net.sf.cglib.proxy.Enhancer.generate(Enhancer.java:492)
 at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:93)
 at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:91)
 at net.sf.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
 at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
 at net.sf.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
 at net.sf.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
 at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:116)
 at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:291)
 at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:480)
 at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:305)
 at org.apache.wicket.proxy.LazyInitProxyFactory.createProxy(LazyInitProxyFactory.java:192)
 at org.apache.wicket.spring.injection.annot.AnnotProxyFieldValueFactory.getFieldValue(AnnotProxyFieldValueFactory.java:166)
 at org.apache.wicket.injection.Injector.inject(Injector.java:111)
 at org.apache.wicket.spring.injection.annot.SpringComponentInjector.inject(SpringComponentInjector.java:124)
 at org.apache.wicket.spring.injection.annot.SpringComponentInjector.onInstantiation(SpringComponentInjector.java:130)
 at org.apache.wicket.application.ComponentInstantiationListenerCollection$1.notify(ComponentInstantiationListenerCollection.java:38)
 at org.apache.wicket.application.ComponentInstantiationListenerCollection$1.notify(ComponentInstantiationListenerCollection.java:34)
 at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80)
 at org.apache.wicket.application.ComponentInstantiationListenerCollection.onInstantiation(ComponentInstantiationListenerCollection.java:33)
 at org.apache.wicket.Component.<init>(Component.java:679)
 at org.apache.wicket.MarkupContainer.<init>(MarkupContainer.java:178)
 at org.apache.wicket.Page.<init>(Page.java:171)
 at org.apache.wicket.Page.<init>(Page.java:160)
 at org.apache.wicket.markup.html.WebPage.<init>(WebPage.java:99)","Ubuntu 18.04 LTS , 64-bit
Oracle JDK 10.0.1",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-26 11:44:25.115,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon May 28 08:56:57 UTC 2018,,,,,,0|i3u1zj:,9223372036854775807,,,,,,,,23/May/18 14:09;tgierke2342;I did some further experiments but I'm unable to get a proper stack trace (with line numbers for ClassReader) with neither IntelliJ nor Eclipse (I even re-downloaded the ASM sources.jar from Maven central manually..for some reason the class files do not seem to match the sources as also breakpoints wouldn't work there in both Eclipse and IntelliJ).,"26/May/18 11:44;jira-bot;Commit dade0103a2b563c6a4b3374f5581d33995ce4f1f in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=dade010 ]

WICKET-6552 Spring proxy creation fails with IAE inside ASM ClassReader on JDK10

Update CGLIB to 3.2.6 and ASM to 6.2
","26/May/18 11:57;jira-bot;Commit 5f4c81a4d9695fcea928a0058b07aab6a295ca4e in wicket's branch refs/heads/wicket-8.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5f4c81a ]

WICKET-6552 Spring proxy creation fails with IAE inside ASM ClassReader on JDK10

Update CGLIB to 3.2.6 and ASM to 6.2

(cherry picked from commit dade0103a2b563c6a4b3374f5581d33995ce4f1f)
","26/May/18 11:57;jira-bot;Commit 899fe94664b135a3a94fb362dfff5e882d18c92a in wicket's branch refs/heads/wicket-8.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=899fe94 ]

WICKET-6552 Spring proxy creation fails with IAE inside ASM ClassReader on JDK10

Upgrade Jetty to 9.4.10. It depends on ASM 6.1.
9.4.7 was depending on ASM 5.2
","26/May/18 12:01;mgrigorov;I've updated ASM to 6.2 and CGLIB to 3.2.6.
Please try with 8.1.0-SNAPSHOT!","28/May/18 08:56;tgierke2342;Tested with efa51293df700bee3726571fb7cfef5c23c4fb41 , works for me - thanks !",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error while parsing xml using AjaxButton,WICKET-6533,13137170,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,solomax,lludwa,lludwa,08/Feb/18 15:24,01/Apr/18 17:09,13/Mar/19 23:18,01/Apr/18 17:09,8.0.0-M8,,,,,,,,7.11.0,8.0.0,,,,,,0,,,,,,,,"Problem is caused when refreshing markup using Ajax and in data is special character (￾).

Error occurs in my project everywhere when refreshing markup using Ajax where this special character occurs.

I create and attach quickstart project which reproduces this problem in simple way: changing markup through hiding/showing TextField by ajax button.

 

Steps to reproduce problem:

1. Download and run attached quickstart project

2. Enter to TextField symbol presented under ""Insert this string for error..."" label:

3) Click „Regular submit” twice (this causes component to refresh, but doesn’t cause error)

4) Now click „Ajax submit” twice – this causes button to not refresh markup and show error:

 
{code:java}
ERROR: Wicket.Ajax.Call.failure: Error while parsing response: Error: Invalid XML: <?xml version=""1.0"" encoding=""UTF-8""?><ajax-response><component id=""field3"" ><![CDATA[<input value="""" name=""field"" id=""field3""/>]]></component></ajax-response>{code}",,,,,,,,,,,,,,,,,,,,,,,,,08/Feb/18 15:24;lludwa;showcase.zip;https://issues.apache.org/jira/secure/attachment/12909815/showcase.zip,08/Feb/18 16:39;solomax;showcase_simplified.zip;https://issues.apache.org/jira/secure/attachment/12909821/showcase_simplified.zip,,,2.0,,,,,,,,,,,,,,,,,,,2018-02-08 16:37:37.31,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Apr 01 17:08:27 UTC 2018,,,,,,0|i3pyb3:,9223372036854775807,,,,,,,,"08/Feb/18 16:37;solomax;I can confirm, reproducible using following simplified code:

{code}
	@Override
	protected void onInitialize() {
		super.onInitialize();
		Form<Void> form = new Form<>(""form"");

		final TextField<String> field = new TextField<>(""field"", Model.of(""""));
		form.add(field.setOutputMarkupId(true));
		add(form.add(new AjaxButton(""submitButton"", form) {
			private static final long serialVersionUID = 1L;

			@Override
			protected void onSubmit(final AjaxRequestTarget target) {
				field.setModelObject(""\ufffe"");
				target.add(field);
			}
		}));
	}
{code}","09/Feb/18 08:09;solomax;I guess this Unicode char need to be escaped here
 [https://github.com/apache/wicket/blob/master/wicket-util/src/main/java/org/apache/wicket/util/string/Strings.java#L376]
 But is not escaped ....

Would in be OK to enlarge current {{non-printable and not whitespace}} list?
 According to this: [https://www.fileformat.info/info/unicode/char/fffe/index.htm] this is {{Unicode Noncharacter}}, seems to also be non-printable ....

Addition:
{code:java}
final String val = ""\ufffe"";
String aa = org.apache.commons.text.StringEscapeUtils.escapeXml11(val);
String a1 = org.apache.commons.text.StringEscapeUtils.escapeXml10(val);
{code}
Both {{aa}} and {{a1}} are {{empty string}}

WDYT?","09/Feb/18 09:32;lludwa;I think this char should be escaped, and added to above list. 
I don't need to print this char, but when I was testing my app using this list:

[https://github.com/minimaxir/big-list-of-naughty-strings/blob/master/blns.txt#L287]

This char broke my app...

In my opinion all chars causing this problem should be escaped.

 

Thanks for your prompt response","09/Feb/18 09:56;svenmeier;There are a bunch of non-printable characters:

https://stackoverflow.com/questions/5188679/whats-the-purpose-of-the-noncharacters-ufdd0-to-ufdef#5202027","09/Feb/18 11:05;solomax;So we need some fast algorithm to escape them to {{"""" (empty string)}} ....","28/Mar/18 17:47;jira-bot;Commit b85f5c0202439b404028470883f8353a44a2e034 in wicket's branch refs/heads/WICKET-6533-non-characters from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b85f5c0 ]

[WICKET-6533] Unicode non-characters are skipped
","28/Mar/18 17:48;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/wicket/pull/270

    [WICKET-6533] Unicode non-characters are skipped

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6533-non-characters

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/270.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #270
    
----
commit b85f5c0202439b404028470883f8353a44a2e034
Author: Maxim Solodovnik <solomax666@...>
Date:   2018-03-28T17:47:08Z

    [WICKET-6533] Unicode non-characters are skipped

----
","01/Apr/18 16:51;jira-bot;Commit b85f5c0202439b404028470883f8353a44a2e034 in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b85f5c0 ]

[WICKET-6533] Unicode non-characters are skipped
","01/Apr/18 16:51;jira-bot;Commit aeeff0988a3513a63408e46866f1b33647c41618 in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=aeeff09 ]

Merge branch 'WICKET-6533-non-characters'
","01/Apr/18 16:51;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/270
","01/Apr/18 16:58;jira-bot;Commit 7aa7c64efdbfa1e644c1b326a161b5b68831f907 in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7aa7c64 ]

[WICKET-6533] tests are fixed
","01/Apr/18 17:05;jira-bot;Commit 8a34ecb77445895c6f0d1167d1384a150be2140b in wicket's branch refs/heads/wicket-7.x from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8a34ecb ]

[WICKET-6533] Unicode non-characters are skipped
","01/Apr/18 17:08;jira-bot;Commit deb5b9679b37a67af9e508a4d89b7b5458b01c31 in wicket's branch refs/heads/wicket-7.x from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=deb5b96 ]

[WICKET-6533] tests are fixed
",,,,,,,,,,,,,,,,,,,,,,,
Double slash break 404page,WICKET-6473,13104396,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,pedrosans,phantom,phantom,22/Sep/17 20:37,21/Feb/18 01:37,13/Mar/19 23:18,21/Feb/18 01:37,7.8.0,,,,,,,,7.11.0,8.0.0,,,wicket,,,0,,,,,,,,"Issue came from email thread: http://markmail.org/thread/rlozkiz7gy2z3bkc
--------------
We have in Orienteer customized NotFoundPage https://github.com/OrienteerBAP/Orienteer/blob/master/orienteer-core/src/main/java/org/orienteer/core/web/NotFoundPage.java . And it works perfectly except one case: if somebody by mistake put double slash in URL. For example https://demo.orienteer.org// Application is trying to render 404 page, but all resources are not found and user see just plan page without styles and scripts. Taking into account that resources are included commonly through XXXPackageResource and WebJarsResourc - it looks like Wicket issue.

Demonstatin can be found there: Please check this one: https://github.com/PhantomYdn/wicket-bugs/tree/master/doubleslash
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2017-09-22 20:37:06.0,,,,,,0|i3kfm7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ajax Buttons do not check for the HTTP method and thus don't respect Form#onMethodMismatch,WICKET-6526,13136095,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,cmenzel,cmenzel,cmenzel,03/Feb/18 23:03,15/Feb/18 10:15,13/Mar/19 23:18,15/Feb/18 10:15,6.28.0,7.9.0,8.0.0-M8,,,,,,6.29.0,7.10.0,8.0.0-M9,,,,,0,,,,,,,,"Pretty much what it says in the summary: The HTTP method check is only done in onFormSubmitted(), not in onFormSubmitted(submitter), which is what AjaxButton and friends call directly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-04 09:05:37.867,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 09 21:38:46 UTC 2018,,,,,,0|i3prov:,9223372036854775807,,,,,,,,"04/Feb/18 09:05;githubbot;GitHub user duesenklipper opened a pull request:

    https://github.com/apache/wicket/pull/262

    WICKET-6526 check HTTP method for all form submissions

    this moves the HTTP method check from onFormSubmitted to
    onFormSubmitted(submitter) so that every form submission
    performs this check, instead of only non-ajax requests.
    also adds tests that verify this.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/duesenklipper/wicket wicket6/WICKET-6526-ajaxbutton-methodmismatch

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/262.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #262
    
----
commit 83ff231a10bd079f569c75253c4917ef69dcb0b9
Author: Carl-Eric Menzel <carl-eric.menzel@...>
Date:   2018-02-03T23:10:23Z

    WICKET-6526 check HTTP method for all form submissions
    
    this moves the HTTP method check from onFormSubmitted to
    onFormSubmitted(submitter) so that every form submission
    performs this check, instead of only non-ajax requests.
    also adds tests that verify this.

----
","04/Feb/18 09:08;githubbot;GitHub user duesenklipper opened a pull request:

    https://github.com/apache/wicket/pull/263

    WICKET-6526 check HTTP method for all form submissions

    this moves the HTTP method check from onFormSubmitted to
    onFormSubmitted(submitter) so that every form submission
    performs this check, instead of only non-ajax requests.
    also adds tests that verify this.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/duesenklipper/wicket wicket7/WICKET-6526-ajaxbutton-methodmismatch

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/263.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #263
    
----
commit f850e13b6767debf23fd0bc6208187daf0a5d481
Author: Carl-Eric Menzel <carl-eric.menzel@...>
Date:   2018-02-03T23:10:23Z

    WICKET-6526 check HTTP method for all form submissions
    
    this moves the HTTP method check from onFormSubmitted to
    onFormSubmitted(submitter) so that every form submission
    performs this check, instead of only non-ajax requests.
    also adds tests that verify this.

----
","04/Feb/18 09:08;githubbot;GitHub user duesenklipper opened a pull request:

    https://github.com/apache/wicket/pull/264

    WICKET-6526 check HTTP method for all form submissions

    this moves the HTTP method check from onFormSubmitted to
    onFormSubmitted(submitter) so that every form submission
    performs this check, instead of only non-ajax requests.
    also adds tests that verify this.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/duesenklipper/wicket wicket8/WICKET-6526-ajaxbutton-methodmismatch

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/264.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #264
    
----
commit a03ee37d17b2e07f3d74268a4d874ac92cf69925
Author: Carl-Eric Menzel <carl-eric.menzel@...>
Date:   2018-02-03T23:10:23Z

    WICKET-6526 check HTTP method for all form submissions
    
    this moves the HTTP method check from onFormSubmitted to
    onFormSubmitted(submitter) so that every form submission
    performs this check, instead of only non-ajax requests.
    also adds tests that verify this.

----
","06/Feb/18 12:59;githubbot;Github user martin-g commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/262#discussion_r166286917
  
    --- Diff: pom.xml ---
    @@ -184,6 +184,28 @@
     				</plugins>
     			</build>
     		</profile>
    +		<profile>
    --- End diff --
    
    This is not needed. 
","06/Feb/18 13:00;githubbot;Github user martin-g commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/263#discussion_r166287202
  
    --- Diff: pom.xml ---
    @@ -1203,6 +1203,27 @@
     				</plugins>
     			</build>
     		</profile>
    +		<profile>
    --- End diff --
    
    This should not be here.
","09/Feb/18 21:29;jira-bot;Commit a03ee37d17b2e07f3d74268a4d874ac92cf69925 in wicket's branch refs/heads/master from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a03ee37 ]

WICKET-6526 check HTTP method for all form submissions

this moves the HTTP method check from onFormSubmitted to
onFormSubmitted(submitter) so that every form submission
performs this check, instead of only non-ajax requests.
also adds tests that verify this.
","09/Feb/18 21:29;jira-bot;Commit ba3eb5fbd66e98499da5360accf786f0f62c61d0 in wicket's branch refs/heads/master from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ba3eb5f ]

Merge branch 'wicket8/WICKET-6526-ajaxbutton-methodmismatch'
","09/Feb/18 21:29;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/264
","09/Feb/18 21:33;jira-bot;Commit f850e13b6767debf23fd0bc6208187daf0a5d481 in wicket's branch refs/heads/wicket-7.x from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f850e13 ]

WICKET-6526 check HTTP method for all form submissions

this moves the HTTP method check from onFormSubmitted to
onFormSubmitted(submitter) so that every form submission
performs this check, instead of only non-ajax requests.
also adds tests that verify this.
","09/Feb/18 21:33;jira-bot;Commit 8371203b1a18401f750daa145cd481695bef5f4c in wicket's branch refs/heads/wicket-7.x from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8371203 ]

Merge branch 'wicket7/WICKET-6526-ajaxbutton-methodmismatch' into wicket-7.x
","09/Feb/18 21:33;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/263
","09/Feb/18 21:38;jira-bot;Commit 83ff231a10bd079f569c75253c4917ef69dcb0b9 in wicket's branch refs/heads/wicket-6.x from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=83ff231 ]

WICKET-6526 check HTTP method for all form submissions

this moves the HTTP method check from onFormSubmitted to
onFormSubmitted(submitter) so that every form submission
performs this check, instead of only non-ajax requests.
also adds tests that verify this.
","09/Feb/18 21:38;jira-bot;Commit 61fb456530aac94f679a0b701f78f09af1a68db5 in wicket's branch refs/heads/wicket-6.x from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=61fb456 ]

Merge branch 'wicket6/WICKET-6526-ajaxbutton-methodmismatch' into wicket-6.x
","09/Feb/18 21:38;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/262
",,,,,,,,,,,,,,,,,,,,,,
Palette does not list unselected options,WICKET-6244,13004322,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,svenmeier,svenmeier,12/Sep/16 15:28,14/Feb/18 15:16,13/Mar/19 23:18,12/Sep/16 15:57,7.4.0,8.0.0-M1,,,,,,,7.5.0,8.0.0-M2,,,wicket-extensions,,,0,,,,,,,,"Since WICKET-5352 Palette misses to list an unselected option, when the id of this option is contained in the id of a selected option.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-09-12 15:55:26.654,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Sep 12 15:57:14 UTC 2016,,,,,,0|i33itz:,9223372036854775807,,,,,,,,"12/Sep/16 15:55;jira-bot;Commit 5b7547fb80a8ec0b25e20f2b9aef8aaa5011a96c in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5b7547f ]

WICKET-6244 split choices; use TreeSet for speed-up
","12/Sep/16 15:55;jira-bot;Commit b2252c32987d036aa49b0b13fa676c21041c6755 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b2252c3 ]

WICKET-6244 split choices; use TreeSet for speed-up
","12/Sep/16 15:57;svenmeier;Values are split now, so unselected options are not identified as selected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race-condition in session invalidation,WICKET-6530,13136269,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,,papegaaij,papegaaij,05/Feb/18 13:01,06/Feb/18 13:04,13/Mar/19 23:18,05/Feb/18 14:59,7.9.0,8.0.0-M8,,,,,,,6.29.0,7.10.0,8.0.0-M9,,wicket,,,0,,,,,,,,"Session.invalidate sets a boolean on the session that invalidation is required on detach. However, this boolean can be read by several requests, triggering multiple invalidations. A HTTP session can only be invalidated once, every subsequent call will trigger an IllegalStateException:
{code:java}
Caused by: java.lang.IllegalStateException: UT000021: Session already invalidated
	at io.undertow.server.session.InMemorySessionManager$SessionImpl.invalidate(InMemorySessionManager.java:543)
	at io.undertow.server.session.InMemorySessionManager$SessionImpl.invalidate(InMemorySessionManager.java:529)
	at io.undertow.servlet.spec.HttpSessionImpl.invalidate(HttpSessionImpl.java:198)
	at org.apache.wicket.session.HttpSessionStore.invalidate(HttpSessionStore.java:188)
	at org.apache.wicket.Session.destroy(Session.java:493)
	at org.apache.wicket.Session.invalidateNow(Session.java:508)
	at org.wicketstuff.security.WaspSession.invalidateNow(WaspSession.java:117)
	at org.apache.wicket.Session.detach(Session.java:655)
	at org.wicketstuff.security.WaspSession.detach(WaspSession.java:129)
	at org.apache.wicket.request.cycle.RequestCycle.onDetach(RequestCycle.java:654)
	at org.apache.wicket.request.cycle.RequestCycle.detach(RequestCycle.java:594)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:297)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	... 55 more
{code}

I propose to set the boolean in request metadata. I'll submit a PR later today to demonstrate this solution.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-05 13:17:12.06,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Feb 06 13:04:47 UTC 2018,,,,,,0|i3psrj:,9223372036854775807,,,,,,,,"05/Feb/18 13:17;githubbot;GitHub user papegaaij opened a pull request:

    https://github.com/apache/wicket/pull/266

    WICKET-6530: fix possible race-condition for session invalidation

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/papegaaij/wicket WICKET-6530

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/266.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #266
    
----
commit e7109db9d446dc8fcf65eb0d91d840c13afdfc4c
Author: Emond Papegaaij <papegaaij@...>
Date:   2018-02-05T13:10:21Z

    WICKET-6530: fix possible race-condition for session invalidation

----
","05/Feb/18 14:42;jira-bot;Commit e7109db9d446dc8fcf65eb0d91d840c13afdfc4c in wicket's branch refs/heads/master from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e7109db ]

WICKET-6530: fix possible race-condition for session invalidation
","05/Feb/18 14:42;jira-bot;Commit ec7a27e832d3428f227330c1cf37205d7e52b608 in wicket's branch refs/heads/master from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ec7a27e ]

Merge branch 'WICKET-6530' of https://github.com/papegaaij/wicket
","05/Feb/18 14:42;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/266
","05/Feb/18 14:47;jira-bot;Commit ccc7abcf4f7db4405f70631e7779551fde3a87cc in wicket's branch refs/heads/wicket-7.x from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ccc7abc ]

WICKET-6530: fix possible race-condition for session invalidation
","05/Feb/18 14:59;jira-bot;Commit 35b93814a6c89ad048b29445c963649861e809a0 in wicket's branch refs/heads/wicket-6.x from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=35b9381 ]

WICKET-6530: fix possible race-condition for session invalidation
","06/Feb/18 13:02;githubbot;Github user martin-g commented on the issue:

    https://github.com/apache/wicket/pull/266
  
    This should be backported to 7.x/6.x, no ?
","06/Feb/18 13:04;githubbot;Github user papegaaij commented on the issue:

    https://github.com/apache/wicket/pull/266
  
    It has already been backported. The patch applied mostly cleanly on 7.x and 6.x.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ThreadLocal leak in PageStoreManager,WICKET-6522,13132637,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,klaasjan,klaasjan,22/Jan/18 10:50,06/Feb/18 12:55,13/Mar/19 23:18,30/Jan/18 13:27,7.9.0,,,,,,,,7.10.0,8.0.0-M9,,,wicket,,,0,,,,,,,,"One of our heavy-used Wicket production applications has developed 'interesting' behaviour since upgrading to 7.9.0: after a while the system becomes slower and seems to need more CPU time to handle the same amount of requests. Threaddumps exposed that a lot of CPU time was consumed by java.lang.ThreadLocal$ThreadLocalMap.getEntryAfterMiss, pointing to a ThreadLocal leak.

After making a heapdump (20g) of one of our servers we found lots of ThreadLocalMap$Entry objects referenced by org.apache.wicket.page.PageStoreManager$SessionEntry$1 containing the value Boolean.FALSE.

Seems that boolean is new behaviour introduced by the fix for WICKET-6465 and is causing complications on servers like Wildfly we use which don't recycle threads.

 

 

 ",Wildfly 10 on CentOS 7 Linux.,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-01-22 11:44:47.008,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jan 30 15:22:57 UTC 2018,,,,,,0|i3p6ef:,9223372036854775807,,,,,,,,"22/Jan/18 11:44;papegaaij;The problems are caused by repeated instantiation of a ThreadLocal instance (one for each (deserialized) session) and the lack of cleanup.

I propose the following changes:
 * make storingTouchedPages a static field in PageStoreManager (there is no need for a ThreadLocal per session as a thread can only access one session at a time)
 * change storingTouchedPages.set(false) to storingTouchedPages.remove() to cleanup properly",22/Jan/18 11:53;svenmeier;+1 that's a good solution,"22/Jan/18 12:46;bitstorm;-1 don't wanna be annoying, but as I said I'd rather remove the threadLocal boolean and change HttpSessionStore.SessionBindingListener#valueUnbound adding session.clear:
{code:java}
if (wicketSession != null)
{
	wicketSession.onInvalidate();
        wicketSession.clear(); //added line
}
			
{code}
this in turn calls PageStoreManager#clear which is what we want","23/Jan/18 08:48;githubbot;GitHub user bitstorm opened a pull request:

    https://github.com/apache/wicket/pull/259

    WICKET-6522 session cleaning code moved to HttpSessionStore

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bitstorm/wicket WICKET-6522

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/259.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #259
    
----
commit 0315c37d447a1040609cb5fa0b137def66a254c3
Author: Andrea Del Bene <adelbene@...>
Date:   2018-01-23T08:45:27Z

    WICKET-6522 session cleaning code moved to HttpSessionStore

----
",23/Jan/18 08:51;bitstorm;I did a PR to better explain my idea.,"23/Jan/18 10:33;svenmeier;So reusing the existing SessionBindingListener in HttpSessionStore instead? I agree, that would be even simpler.","23/Jan/18 10:38;papegaaij;It seems a clean solution, but we need to make sure we do not introduce a regression again with this fix.",23/Jan/18 16:36;bitstorm;[~papegaaij] you are right. I've seen that other issues like WICKET-5164 might be affected by this kind of solution. At the moment I don't have any better ideas so your solution is ok also for me.,"24/Jan/18 08:35;githubbot;Github user bitstorm closed the pull request at:

    https://github.com/apache/wicket/pull/259
",30/Jan/18 10:51;bitstorm;any news about this? [~papegaaij] could take care of this issue? Thank you.,30/Jan/18 12:11;papegaaij;I'll take a look at it.,"30/Jan/18 12:51;jira-bot;Commit a6b48110f130cb3074b78f8add29b59d4a0ecc7f in wicket's branch refs/heads/master from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a6b4811 ]

WICKET-6522: move ThreadLocal to a static field to prevent leaks
","30/Jan/18 12:56;jira-bot;Commit 242d4e9e1c32b2cb5c03a657ecafdd50dc9f6c30 in wicket's branch refs/heads/wicket-7.x from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=242d4e9 ]

WICKET-6522: move ThreadLocal to a static field to prevent leaks
",30/Jan/18 15:22;bitstorm;thank you!,,,,,,,,,,,,,,,,,,,,,,
MockHttpSession and MockSessionStore don't call onInvalidate() on invalidate(),WICKET-6441,13093448,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,eximius,eximius,09/Aug/17 12:05,06/Feb/18 12:53,13/Mar/19 23:18,30/Dec/17 22:16,8.0.0-M6,,,,,,,,7.10.0,8.0.0-M9,,,wicket,,,0,,,,,,,,"org.apache.wicket.protocol.http.mock.MockHttpSession on invalidate calls just:
{code}
@Override
public void invalidate()
{
	attributes.clear();
	id = generateSessionId();
}
{code}
while org.apache.wicket.session.HttpSessionStore valueUnbound calls
{code}
public void valueUnbound(final HttpSessionBindingEvent evt)
{
	String sessionId = evt.getSession().getId();
	log.debug(""Session unbound: {}"", sessionId);
	if (wicketSession != null)
	{
		wicketSession.onInvalidate();
	}
...
}
{code}
(valueUnbound is called on org.apache.catalina.session.StandardSession.invalidate)

this causes to be impossible to properly test what happens on invalidation of the session.
",,,,,,,,,,,,,,,,,,,,,,,,,14/Aug/17 11:55;eximius;showcase-onInvalidate.zip;https://issues.apache.org/jira/secure/attachment/12881723/showcase-onInvalidate.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-08-13 11:42:13.094,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Dec 30 22:27:30 UTC 2017,,,,,,0|i3il6v:,9223372036854775807,,,,,,,,13/Aug/17 11:42;mgrigorov;Please provide a quickstart application and we will reopen this ticket.,13/Aug/17 13:10;eximius;[~mgrigorov] - but you can (or actually can't) see it in source code - it's just not being called at all,"14/Aug/17 11:56;eximius;[~mgrigorov] here you have the quickstart testcase.
1)Run application
2)Click ""Invalidate""
3)onInvalidate is being called

now run the ""sessionInvalidatesSuccessfully"" test - it fails","30/Dec/17 22:16;jira-bot;Commit 5cabbb68effd82e7d195d39c16e3e700d53eb9cc in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5cabbb6 ]

WICKET-6441 MockSessionStore doesn't call onInvalidate() on invalidate()
","30/Dec/17 22:16;jira-bot;Commit 92fe4c3e60e7406252ab38689cec8d25e0e6de61 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=92fe4c3 ]

WICKET-6441 MockSessionStore doesn't call onInvalidate() on invalidate()

(cherry picked from commit 5cabbb68effd82e7d195d39c16e3e700d53eb9cc)
","30/Dec/17 22:26;jira-bot;Commit e6e0f0ef908dc99a924f6b1358ec5b7f3791e1f3 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e6e0f0e ]

WICKET-6441 MockHttpSession and MockSessionStore don't call onInvalidate() on invalidate()
","30/Dec/17 22:27;jira-bot;Commit 5324ae3facba7dd3d94abaaf48ef134a33048e0d in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5324ae3 ]

WICKET-6441 MockHttpSession and MockSessionStore don't call onInvalidate() on invalidate()

(cherry picked from commit e6e0f0ef908dc99a924f6b1358ec5b7f3791e1f3)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide behavior that disables a button after click,WICKET-6448,13094492,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,eximius,eximius,14/Aug/17 14:40,06/Feb/18 12:53,13/Mar/19 23:18,01/Dec/17 09:54,8.0.0-M6,,,,,,,,7.10.0,8.0.0-M9,,,wicket-extensions,,,0,,,,,,,,"Wicket should provide a Behavior that can be assigned to (Ajax)Buttons and when clicked those buttons should be disabled via the HTML ""disabled"" attribute.
For AjaxButtons the behavior should re-enable the button after processing the Ajax response.

1)Run the app
2)Click ""submit"" quickly several times
3)Watch the console",,,,,,,,,,,,,,,,,,,,,,,,,19/Aug/17 12:15;eximius;block-comment-doublesubmit.png;https://issues.apache.org/jira/secure/attachment/12882736/block-comment-doublesubmit.png,14/Aug/17 14:39;eximius;showcase-preventClick.zip;https://issues.apache.org/jira/secure/attachment/12881761/showcase-preventClick.zip,,,2.0,,,,,,,,,,,,,,,,,,,2017-08-14 15:01:15.423,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Dec 01 10:02:15 UTC 2017,,,,,,0|i3irf3:,9223372036854775807,,,,,,,,"14/Aug/17 15:01;mgrigorov;Why ?
Does anything say that it is expected to prevent double submit ?","14/Aug/17 15:06;sebfz1;To prevent double submit, the button should likely be disabled on ajax-start and re-enabled on ajax-stop.

The problems are:
1/ if the button is disabled just before the submit, it will not be part of the form data, therefore button#onSubmit will never be reached (but form#onSubmit will)
2/ on Chrome and IE, disabling the button will just prevent the form to be submitted. It work on FF however

So, a smart alternative should be found...","14/Aug/17 15:09;mgrigorov;I wonder why this is a ""Bug"".
Why IndicatingAjaxButton should do this by default at all ?","14/Aug/17 15:11;sebfz1;[~mgrigorov]: It can be an option. I should say that it is convenient.
I've added isDisabledOnClick property (default false) on wicket-jquery-ui's IndicatingAjaxButton, but I recently realized the issue I described earlier... :(","14/Aug/17 15:12;sebfz1;Agree that it is not a bug, should rather be an enhancement...","14/Aug/17 15:18;eximius;ok, I can slightly agree that this could be not a bug but very important enhancement.
Why? Because you use IndicatingAjaxButton when you know that user input would take long to process, so you want to inform the user that ""something is going on in background"" so he should wait. But impatient user can click the button several times thus process important operation twice.
Please take charging user's credit card for example. We mus contact Visa, so it takes some time. During card number verification user clicks ""pay"" twice, so next payment is processed right after first one finished (which is just wrong)","14/Aug/17 15:44;sebfz1;I've rechecked my code, actually I've changed from ajaxStart to button.click to prevent the button being disabled on every ajax call (ajaxStart should always be bound to 'document')
But ajaxStart seems actually to be the best compromise for now as I guess it occurs after the submit (I will double check...)",14/Aug/17 15:53;eximius;Moreover - I'd say that this feature should be enabled by default,"14/Aug/17 16:02;sebfz1;I would say that if the button is not part of the submit (which I guess it will be the case), then I do not agree : the user should be aware of this, and he voluntary accept it by overriding #isDisabledOnClick (or equivalent).

Moreover, thinking back on the implementation...
I'm figuring out that we need to use both #click and #ajaxStart.

#click for displaying the indicator
#ajaxStart for disabling the button

Otherwise the indicator will be always be shown on every ajax request in the current page...","14/Aug/17 23:36;bitstorm;I'm also reluctant to provide such a behavior out of the box. I don't think it's possible to create a generic behavior that makes everybody happy. On the other hand it's quite easy to build a custom behavior tailored to your specific needs
See this [example|http://examples-wickettutorial.rhcloud.com/wicket/bookmarkable/org.wicketTutorial.ajaxlistener.HomePage]","15/Aug/17 10:22;sebfz1;[~bitstorm], if you do not agree to have this behavior out of the box in the IndicatingAjaxButton itself, maybe we can agree that the DisableOnClickBehavior could be part of the API?
I think disabling/prevent-to-submit-twice an indicating button is a very valid usecase that should be supported out of the box in the API... Is there something I missed about this implementation that cannot be generic?
","15/Aug/17 10:44;mgrigorov;Little by little we came to the proper solution: it should be a Behavior that can be reused by many components. Or even an IAjaxCallListener - for Ajax components.

https://github.com/l0rdn1kk0n/wicket-bootstrap/blob/wicket-7.x/bootstrap-extensions/src/main/java/de/agilecoders/wicket/extensions/markup/html/bootstrap/ladda/LaddaBehavior.java
https://github.com/l0rdn1kk0n/wicket-bootstrap/blob/wicket-7.x/bootstrap-extensions/src/main/java/de/agilecoders/wicket/extensions/markup/html/bootstrap/ladda/LaddaAjaxCallListener.java

But as [~bitstorm] said: we cannot make everyone happy with a generic solution!
One will be happy with just adding ""disabled"" attribute. Another will need something more fancy as Ladda. Someone else will want to show a veil - on the button or even on the whole form in case there are more than one buttons.
This is my reason to not like this suggestion - it is too focused on IndicatingAjaxButton.
In one of my projects the client wanted the same. Initially we just added ""disabled"" attribute after click but then the problems started - the CSS framework had rules for disabled form elements and after clicking the mouse cursor became ""cursor:not-allowed;"" and the customer complained that it looks bad. So it is not so simple to add something ""small"" and force everyone to deal with it. 

We had conversation about this functionality in the mailing lists few years back.","15/Aug/17 18:33;eximius;I like the idea of DisableOnClickBehavior very much!
About ""cursor:not-allowed"" - once you have ""disabled"" attribute - you can easily style it in CSS - prevention of double submit is the key here.
","19/Aug/17 12:15;eximius;I noticed that even your Jira does exactly the same while adding comments ;)
!block-comment-doublesubmit.png!","04/Sep/17 20:17;mgrigorov;I've updated the title and the description.
I still believe that it is not possible to implement behavior that will cover everyone's needs so the description explain the simplest way to do it - via ""disabled"" attribute.",20/Sep/17 15:26;eximius;[~mgrigorov] sounds good to me,"28/Nov/17 16:45;bitstorm;Hi,

as Martin suggested I also prefer to implement an AJAX listener to provide such feature. Here is a first implementation:

{code:java}
public class AjaxDisableComponentListener extends AjaxCallListener 
{
    /**
     * 
     */
    private static final long serialVersionUID = -3772784701483881109L;
    private static final String DISABLE_ENABLE_JS = "";document.getElementById('%s').disabled = %s;"";

    @Override
    public CharSequence getBeforeHandler(Component component) 
    {
        return String.format(DISABLE_ENABLE_JS, component.getMarkupId(), true);
    }
    
    @Override
    public CharSequence getCompleteHandler(Component component) 
    {
        return String.format(DISABLE_ENABLE_JS, component.getMarkupId(), false);
    }
}
{code}

Those who need also an indicating picture can use AjaxIndicatorAppender.","29/Nov/17 14:19;jira-bot;Commit 7eca428fff85cba214b76edee8e486d4aee816d5 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7eca428 ]

WICKET-6448 Provide behavior that disables a button after click
","30/Nov/17 16:54;jira-bot;Commit 837917cc8c59119230e6e7e127aa68d2218ad093 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=837917c ]

WICKET-6448 Added javadoc","01/Dec/17 10:02;jira-bot;Commit a647d62a771e503b408c4e0e3e3374f5ff53f65f in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a647d62 ]

WICKET-6448 Provide behavior that disables a button after click
","01/Dec/17 10:02;jira-bot;Commit 11bbfbcdb3bed0afc38699e2ca8ce6c5f17554c4 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=11bbfbc ]

WICKET-6448 Added javadoc",,,,,,,,,,,,,,,
NullPointerException at PageStoreManager$SessionEntry after login,WICKET-6513,13127374,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,achurilov,achurilov,27/Dec/17 14:07,06/Feb/18 12:53,13/Mar/19 23:18,30/Dec/17 21:50,7.9.0,,,,,,,,7.10.0,8.0.0-M9,,,,,,0,,,,,,,,"I tried to use memcached-session-manager with Kryo serialization strategy - https://github.com/magro/memcached-session-manager/wiki
It works fine but after login NullPointerException was generated.
I think the problem is a transient field storingTouchedPages that may be null after deserialization.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-27 15:47:35.045,,"25-12-2017 5:00:13 PM org.apache.catalina.core.StandardWrapperValve invoke
SEVERE: Servlet.service() for servlet [default] in context with path [] threw exception
java.lang.NullPointerException
	at org.apache.wicket.page.PageStoreManager$SessionEntry.valueUnbound(PageStoreManager.java:341)
	at org.apache.catalina.session.StandardSession.removeAttributeInternal(StandardSession.java:1849)
	at de.javakaffee.web.msm.MemcachedBackupSession.removeAttributeInternal(MemcachedBackupSession.java:614)
	at org.apache.catalina.session.StandardSession.expire(StandardSession.java:869)
	at org.apache.catalina.session.StandardSession.expire(StandardSession.java:731)
	at org.apache.catalina.session.StandardSession.invalidate(StandardSession.java:1263)
	at org.apache.catalina.session.StandardSessionFacade.invalidate(StandardSessionFacade.java:183)
	at org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy.applySessionFixation(SessionFixationProtectionStrategy.java:93)
	at org.springframework.security.web.authentication.session.AbstractSessionFixationProtectionStrategy.onAuthentication(AbstractSessionFixationProtectionStrategy.java:82)
	at org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy.onAuthentication(SessionFixationProtectionStrategy.java:55)
	at org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy.onAuthentication(ConcurrentSessionControlStrategy.java:68)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:216)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:125)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)
	at de.javakaffee.web.msm.RequestTrackingContextValve.invoke(RequestTrackingContextValve.java:99)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169)
	at de.javakaffee.web.msm.RequestTrackingHostValve.invoke(RequestTrackingHostValve.java:157)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:956)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:436)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1078)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:625)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:318)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)

",no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Dec 30 21:50:29 UTC 2017,,,,,,0|i3obfz:,9223372036854775807,,,,,,,,27/Dec/17 15:47;svenmeier;#storingTouchedPages is re-initialized in #readObject() - it seems Kryo isn't calling that callback :(.,"27/Dec/17 17:53;achurilov;I have checked. You are right - Kryo isn't calling #readObject() :(
Can you add fix in #valueUnbound() to check if storingTouchedPages is null?","28/Dec/17 05:53;solomax;Maybe these projects can be used to achieve the same:
https://github.com/wicketstuff/core/tree/master/datastores-parent/datastore-memcached
https://github.com/wicketstuff/core/tree/master/serializer-kryo
https://github.com/wicketstuff/core/tree/master/serializer-kryo2","30/Dec/17 21:50;jira-bot;Commit 869ff926557468b23032ca78e1503ecd530e9aac in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=869ff92 ]

WICKET-6513 NullPointerException at PageStoreManager$SessionEntry after login

Check for storeTouchedPages == null before trying to use it.
It might be null in case an alternative serialization library is used
","30/Dec/17 21:50;jira-bot;Commit 8c7f583a3c74d4a9fa7ac1caa1bd06e432986902 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8c7f583 ]

WICKET-6513 NullPointerException at PageStoreManager$SessionEntry after login

Check for storeTouchedPages == null before trying to use it.
It might be null in case an alternative serialization library is used

(cherry picked from commit 869ff926557468b23032ca78e1503ecd530e9aac)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebSocket SessionIds are wrong (HttpSession one used instead of Websocket one) + NPE if no HttpSession is found during Handshake Request,WICKET-6493,13117544,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,tkrah,tkrah,10/Nov/17 10:45,06/Feb/18 12:53,13/Mar/19 23:18,30/Dec/17 22:05,7.7.0,,,,,,,,7.10.0,8.0.0-M9,,,wicket-native-websocket,,,1,,,,,,,,"Reading the *HandshakeRequest* javadoc this is written:

{code}
    /**
     * Return a reference to the HttpSession that the web socket handshake that 
     * started this conversation was part of, if the implementation
     * is part of a Java EE web container.
     *
     * @return the http session or {@code null} if either the websocket
     * implementation is not part of a Java EE web container, or there is
     * no HttpSession associated with the opening handshake request.
     */
    Object getHttpSession();
{code}

So its valid to have *NO* *HttpSession* assigned to a JSR356 request.

But Wicket seems to ""expect"" this because in *JavaxUpgradeHttpRequest* the HttpSession is extracted from the *userProperties* which is not there, if it was ""null"" in the HandshakeRequest.
In the processing the chain will reach the *AbstractWebSocketProcessor* constructor which calls

{code}
this.sessionId = request.getSession(true).getId();
{code}

which is going to fail here because there is no HttpSession on the crafted request used here.

I wonder why the *sessionId* is taken from the HttpSession at all - shouldn't it be the JSR356 session id which you can get with *session.getId()*.
If you look e.g. at the *IWebSocketConnectionRegistry* javadocs most methods have their *sessionId* argument documented with:

{code}
	 * @param sessionId
	 *      the web socket client session id
{code}

but actually the HttpSession id is used instead of the WebSocket sessionId - which is a totally different one.

So i am proposing to use the ""real"" websocket session id here taken from the constructor call:

{code}
public JavaxWebSocketProcessor(JavaxUpgradeHttpRequest request, final Session session, final WebApplication application, EndpointConfig endpointConfig)
{code}

where there is the *session* argument where *session.getId()* actually returns the websocket session id which can last longer and is 100% there - the HttpSession must not be there at all as written.

Unfortunately the javadoc on *IWebSocketConnectionRegistry* for

{code}
	/**
	 * @param application
	 *            the web application to look in
	 * @param sessionId
	 * @return collection of web socket connection used by a client with the given session id
	 */
	Collection<IWebSocketConnection> getConnections(Application application, String sessionId);
{code}

does not state which ""sessionId"" is meant here - i guess its the *HttpSession* - in that case please clarify the JavaDocs here.
The code maybe need to ""track""the HttpSession id to handle that usecase - but in an optional way because it may not be there.","Linux, JDK 8, Jetty 9",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-10 11:03:02.464,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jan 01 20:26:48 UTC 2018,,,,,,0|i3mn1j:,9223372036854775807,,,,,,,,"10/Nov/17 11:03;mgrigorov;Thank you for the ticket!

Wicket uses the HttpSession id because this is what the page storages use, see IPageStore and IDataStore interfaces.
The WebSocket registry uses the applicationName, the sessionId and the pageId to be able to lookup the WebSocket connection for a page and the page itself from the stores so that the applications can update Wicket Components with IPartialPageUpdateTarget#add(Component...) API, just like AjaxRequestTarget does.

Wicket's Ajax and WebSocket support are implemented with stateful Behaviors.
Since Wicket 7.4.0 it is possible to make any Ajax behavior stateless but then some functionalities are no more possible/guaranteed. 
If the HttpSession id is not used then you won't be able to update Wicket components the way you are used to. You will be only able to use the standard send(String) and send(byte[]) WebSocket methods.","10/Nov/17 11:09;tkrah;Hi Martin,

in that case please clarify the JavaDocs because the web socket session ids are not used like written.

And could you please handle the use case where there is no http session if wicket does receive a websocket handshake request - it should not fail with a NPE there, maybe throw something ""explicit"" which states that this is not supported and won't work - don't know the best ""short circuit"" here to have it fail fast but in a good manner.
","10/Nov/17 12:18;mgrigorov;Which javadoc exactly you mean ?
HandshakeRequest is not part of Wicket.


How do you get to the NPE ? 
By adding WebSocketBehavior to your Page a new HttpSession should be created if there is no bound one already. 
In what cases the handshake request comes without http session for the current user ?","10/Nov/17 12:57;tkrah;I mean that JavaDoc:

{code}
* @param sessionId
	 *      the web socket client session id
{code}

which is there multiple times in the *IWebSocketConnectionRegistry* - its not the web socket client session id, its the HTTP HttpSession id from the Handshake-Request - not the web socket one.

You get that NPE if your client does make a websocket request but on the server the http session is not there anymore (because of session timeout or server restart for example).
","30/Dec/17 22:04;jira-bot;Commit 922d56236157b3356c9eba7a43aed8c838b0b4e2 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=922d562 ]

WICKET-6493 WebSocket SessionIds are wrong (HttpSession one used instead of Websocket one) + NPE if no HttpSession is found during Handshake Request
","30/Dec/17 22:05;jira-bot;Commit 68f23440c439814b46e1ea6a91e3d7219bc7c876 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=68f2344 ]

WICKET-6493 WebSocket SessionIds are wrong (HttpSession one used instead of Websocket one) + NPE if no HttpSession is found during Handshake Request

(cherry picked from commit 922d56236157b3356c9eba7a43aed8c838b0b4e2)
","30/Dec/17 22:34;jira-bot;Commit 02808f7d08faab05432515b29d8e6e25e5343fe0 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=02808f7 ]

WICKET-6483 JavaxUpgradeHttpRequest can cause NullPointerException

WICKET-6493 WebSocket SessionIds are wrong (HttpSession one used instead of Websocket one) + NPE if no HttpSession is found during Handshake Request

Use HttpServletRequest.getSession(false) to make it more explicit that it is not possible to create a new HttpSession in WebSocket request.
If the session is existing it will be used, otherwise an exception will be thrown explaining the problem.
","30/Dec/17 22:34;jira-bot;Commit 1b9f810f3acc6fe1eff0d404a456d15e8abe8636 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1b9f810 ]

WICKET-6483 JavaxUpgradeHttpRequest can cause NullPointerException

WICKET-6493 WebSocket SessionIds are wrong (HttpSession one used instead of Websocket one) + NPE if no HttpSession is found during Handshake Request

Use HttpServletRequest.getSession(false) to make it more explicit that it is not possible to create a new HttpSession in WebSocket request.
If the session is existing it will be used, otherwise an exception will be thrown explaining the problem.

(cherry picked from commit 02808f7d08faab05432515b29d8e6e25e5343fe0)
","01/Jan/18 20:26;jira-bot;Commit 4b8ac4c8cc14f2926312e2572fee4299256e7b11 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4b8ac4c ]

WICKET-6483 JavaxUpgradeHttpRequest can cause NullPointerException

WICKET-6493 WebSocket SessionIds are wrong (HttpSession one used instead of Websocket one) + NPE if no HttpSession is found during Handshake Request

Revert the change to use 'request.getSession(false) because this breaks WicketTester/WebSocketTester infrastructure
","01/Jan/18 20:26;jira-bot;Commit d02bc37b0cc555fc6b02f054f94c721cc38be907 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d02bc37 ]

WICKET-6483 JavaxUpgradeHttpRequest can cause NullPointerException

WICKET-6493 WebSocket SessionIds are wrong (HttpSession one used instead of Websocket one) + NPE if no HttpSession is found during Handshake Request

Revert the change to use 'request.getSession(false) because this breaks WicketTester/WebSocketTester infrastructure

(cherry picked from commit 4b8ac4c8cc14f2926312e2572fee4299256e7b11)
",,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket.Cookie.set does not set 'secure' flag,WICKET-6484,13109947,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,rakesh.a,rakesh.a,17/Oct/17 11:25,06/Feb/18 12:52,13/Mar/19 23:18,30/Dec/17 22:45,6.25.0,,,,,,,,6.29.0,7.10.0,8.0.0-M9,,wicket-extensions,,,1,,,,,,,,"Wicket ModalWindow has a functionality where modal dialogs position and size are restored using a cookie. This cookie is created in 'modal.js'

{code:java}
		set: function(name, value, expiredays) {
			var exdate = new Date();
			exdate.setDate(exdate.getDate() + expiredays);
			document.cookie = name + ""="" + window.escape(value) + ((expiredays === null) ? """" : "";expires=""+exdate);
		}
{code}

This method doesn't set 'secure' flag if the application is being accessed using HTTPS
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-30 22:45:15.94,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Dec 30 22:45:56 UTC 2017,,,,,,0|i3lcof:,9223372036854775807,,,,,,,,"30/Dec/17 22:45;jira-bot;Commit 8403c3725d71c33b87b3c4e196cf078e7762840d in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8403c37 ]

WICKET-6484 Wicket.Cookie.set does not set 'secure' flag
","30/Dec/17 22:45;jira-bot;Commit d0967b2312ed999b289566fbdd81eb282ad20c8e in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d0967b2 ]

WICKET-6484 Wicket.Cookie.set does not set 'secure' flag

(cherry picked from commit 8403c3725d71c33b87b3c4e196cf078e7762840d)
","30/Dec/17 22:45;jira-bot;Commit 5452f734c25a0bf5a57ce2ec6af5d39ded83bc31 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5452f73 ]

WICKET-6484 Wicket.Cookie.set does not set 'secure' flag

(cherry picked from commit 8403c3725d71c33b87b3c4e196cf078e7762840d)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Performance issue when large component isn't visible,WICKET-6506,13124744,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,varscsak,varscsak,13/Dec/17 17:29,06/Feb/18 12:52,13/Mar/19 23:18,19/Dec/17 13:20,7.2.0,8.0.0-M8,,,,,,,7.10.0,8.0.0-M9,,,wicket,,,0,,,,,,,,"Okay, so here's the situation, I have a component where an Ajax request displays a large table (1000ish rows).  It display fast, no problem, not a great use of resources (not paginating), but ignore that for now.  I then have another Ajax request where I tell the wicket component to not be visible and refresh an area.  No problem so far (although slightly slow, since it's not generating much html, should be faster).  Now EVERY Ajax request that updates the same area (with the component not in the html) takes a long time to respond (half second), even though it should be returning in ms, because the html is pretty minimal.

I hooked it up to a profiler and found that it's spending a large amount of CPU time in _MarkupContainer$MarkupChildIterator.refreshInternalIteratorIfNeeded()_. I'm not sure why it would be traversing the component hierarchy of the table that's not even visible…but I don't know enough of the architecture of wicket to really say…which is why I've come here. :)

I've gone back to 7.1.0 and can confirm that in that version this ""problem"" does not exist.  The Ajax request is as fast as if I've never loaded the large table.

So I've attached a Quickstart showing the problem (currently configured for 8.0.0-M8, but can be complied down to 7.0.0).  When loading the page, first click the refresh link…this will essentially refresh all the contents in an Ajax request and give you a sense of how fast it _should_ be.  The table has not been visible yet, so there have been no ListView items created yet.  Then click ""show table"", this will generate 2k dummy rows and redisplay the area.  It's obviously slower because it's generating 350k of html (but surprisingly fast :P).  Then click hide table.  It takes about the same amount of time to hide the table as it does to show it, which is odd, because the html being regenerated is the same as if there were no table displayed.  Then go ahead and click ""refresh"" and you'll see that refreshing a basically empty component is slow because it's referencing all the components in the wicket hierarchy (MarkupChildIterator.refreshInternalIteratorIfNeeded) even though they're not visible.

This affects all versions from 7.2.0 and onward.",,,,,,,,,,,,,,,,,,,,,,,,,13/Dec/17 17:24;varscsak;slownesstest.tar.gz;https://issues.apache.org/jira/secure/attachment/12901917/slownesstest.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2017-12-14 16:06:01.326,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Dec 19 13:20:46 UTC 2017,,,,,,0|i3nvb3:,9223372036854775807,,,,,,,,"14/Dec/17 16:06;jira-bot;Commit 0dc04e448ba31de15d8c32b1ee964bebed55bc36 in wicket's branch refs/heads/WICKET-6506 from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0dc04e4 ]

WICKET-6506: Fix performance regression

Due to the way modcount == 0 was handled, the iterator was reinitialized
on every call to next. The fix is to no longer reset the modcount on
detach but increment it. This even fixed a corner case that was marked
in the tests.
","14/Dec/17 16:07;papegaaij;As you can see, I've probably found a solution for this problem. However, I want to discuss this with [~dashorst] first.","14/Dec/17 16:26;varscsak;That's awesome, thanks Edmond.","19/Dec/17 13:13;jira-bot;Commit 0dc04e448ba31de15d8c32b1ee964bebed55bc36 in wicket's branch refs/heads/master from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0dc04e4 ]

WICKET-6506: Fix performance regression

Due to the way modcount == 0 was handled, the iterator was reinitialized
on every call to next. The fix is to no longer reset the modcount on
detach but increment it. This even fixed a corner case that was marked
in the tests.
","19/Dec/17 13:14;jira-bot;Commit a352fe2befbbf6ce60c1d9617df34f54fa7190ac in wicket's branch refs/heads/wicket-7.x from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a352fe2 ]

WICKET-6506: Fix performance regression

Due to the way modcount == 0 was handled, the iterator was reinitialized
on every call to next. The fix is to no longer reset the modcount on
detach but increment it. This even fixed a corner case that was marked
in the tests.
","19/Dec/17 13:20;papegaaij;I've pushed the fix for the performance regression. This speeds up rendering the table considerably (visible and invisible).

The refresh is still much slower after rendering the table at least once. This is caused by how ListView works. A ListView creates its items on first render. Even when the ListView is not visible anymore, these items still need to be processed during rendering (for example detached) and this takes time. To get back to the fast state, you have to call ListView.removeAll() when its made invisible to remove all its children.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in PageParameters#equals(),WICKET-6332,13048441,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,alexey.grigorovich,alexey.grigorovich,06/Mar/17 05:54,06/Feb/18 12:51,13/Mar/19 23:18,06/Mar/17 08:05,7.6.0,8.0.0-M4,,,,,,,7.7.0,8.0.0-M9,,,wicket,,,0,,,,,,,,"Comparing an instance of {{PageParameters}} with some parameters set to an empty {{PageParameters}} instance results in a NullPointerException.

This bug was introduced by WICKET-6283 where collection equality was replaced by {{CollectionUtils.isEmptyCollection()}}. The latter API expects both arguments to be non-null, while the former accepts nulls.

Test case:
{code}
	/**
         * namedParameters equality should handle null namedParameters instance.
	 */
	@Test
	public void equalityWithEmptyParameters()
	{
		PageParameters p1 = new PageParameters()
				.add(""a"", ""b"");

		PageParameters p2 = new PageParameters();

		assertThat(p1, is(not(equalTo(p2))));
	}
{code}

Output:
{noformat}
java.lang.NullPointerException
	at org.apache.commons.collections4.CollectionUtils.isEqualCollection(CollectionUtils.java:515)
	at org.apache.wicket.request.mapper.parameter.PageParameters.equals(PageParameters.java:470)
	at org.hamcrest.core.IsEqual.areEqual(IsEqual.java:40)
	at org.hamcrest.core.IsEqual.matches(IsEqual.java:23)
	at org.hamcrest.core.IsNot.matches(IsNot.java:22)
	at org.hamcrest.core.Is.matches(Is.java:26)
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:10)
	at org.junit.Assert.assertThat(Assert.java:956)
	at org.junit.Assert.assertThat(Assert.java:923)
	at org.apache.wicket.request.mapper.parameter.PageParametersTest.equalityWithEmptyParameters(PageParametersTest.java:328)
{noformat}",,,,,,,,,,,,,,,,,WICKET-6283,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-06 08:04:55.772,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 06 08:05:14 UTC 2017,,,,,,0|i3azdj:,9223372036854775807,,,,,,,,"06/Mar/17 08:04;jira-bot;Commit 3f0e3c7d94e8729f4d1ac30839481d653cbcf651 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3f0e3c7 ]

WICKET-6332 NullPointerException in PageParameters#equals()
","06/Mar/17 08:05;jira-bot;Commit db13d92e5590ef3b6e933ba6c42d0832294974a6 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=db13d92 ]

WICKET-6332 NullPointerException in PageParameters#equals()
",06/Mar/17 08:05;mgrigorov;Thank you!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not require bean validation 2.0.0,WICKET-6524,13135791,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,papegaaij,papegaaij,02/Feb/18 15:00,06/Feb/18 12:48,13/Mar/19 23:18,02/Feb/18 15:27,8.0.0-M8,,,,,,,,8.0.0-M9,,,,wicket-bean-validation,,,0,,,,,,,,"WICKET-6499 not only added support for bean validation 2.0.0, it also made 2.0.0 required. At this moment none of the major JEE containers support bean validation api 2.0.0 as it is part of EE8. Support for 2.0.0 is fine, but it should not be a requirement. The current solution makes it impossible to use on for example WildFly 11.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-02 15:19:45.514,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 02 15:19:45 UTC 2018,,,,,,0|i3pptb:,9223372036854775807,,,,,,,,"02/Feb/18 15:19;jira-bot;Commit 273d479fa24783fd8182e2922bf7afee97933283 in wicket's branch refs/heads/master from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=273d479 ]

WICKET-6524: do not require validation-api-2.0.0, keep support
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pageId is being reset during Session::replaceSession() call,WICKET-6512,13127155,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,solomax,solomax,solomax,26/Dec/17 06:08,06/Feb/18 12:48,13/Mar/19 23:18,27/Dec/17 03:53,8.0.0-M8,,,,,,,,8.0.0-M9,,,,wicket,,,0,,,,,,,,"I'm using replaceSession(); method to prevent session fixation

2 pages are being created with same pageId, in case Session.get().replaceSession(); method is being called to prevent session fixation

Du to pageId is being set to 0 during session replacement process

discussion thread: http://markmail.org/message/vve2o4wrytonm7w5",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-26 06:10:50.705,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Dec 27 03:48:05 UTC 2017,,,,,,0|i3oa3b:,9223372036854775807,,,,,,,,"26/Dec/17 06:10;jira-bot;Commit 05a8c7e57d6a2822d09fa1806955707c4cca368e in wicket's branch refs/heads/WICKET-6512-replaceSession from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=05a8c7e ]

[WICKET-6512] feedbackMessages, style, pageId, sequence and temporarySessionAttributes are not being dropped while session replacement
","26/Dec/17 06:11;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/wicket/pull/252

    [WICKET-6512] feedbackMessages, style, pageId, sequence and temporary…

    …SessionAttributes are not being dropped while session replacement

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6512-replaceSession

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/252.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #252
    
----
commit 05a8c7e57d6a2822d09fa1806955707c4cca368e
Author: Maxim Solodovnik <solomax666@...>
Date:   2017-12-26T06:10:33Z

    [WICKET-6512] feedbackMessages, style, pageId, sequence and temporarySessionAttributes are not being dropped while session replacement

----
","27/Dec/17 03:47;jira-bot;Commit 05a8c7e57d6a2822d09fa1806955707c4cca368e in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=05a8c7e ]

[WICKET-6512] feedbackMessages, style, pageId, sequence and temporarySessionAttributes are not being dropped while session replacement
","27/Dec/17 03:47;jira-bot;Commit db2317bf4c08074277294dbe596af841639513de in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=db2317b ]

Merge remote-tracking branch 'origin/WICKET-6512-replaceSession'
","27/Dec/17 03:48;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/252
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxDownload is not working in blob mode for Microsoft browsers,WICKET-6491,13117213,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,solomax,solomax,solomax,09/Nov/17 09:59,06/Feb/18 12:48,13/Mar/19 23:18,10/Nov/17 13:43,8.0.0-M8,,,,,,,,8.0.0-M9,,,,wicket-extensions,,,0,,,,,,,,"AjaxDownload is not working in blob mode for Microsoft browsers

Steps:
1) clone quickstart: https://github.com/solomax/ajax-download
2) run it using {{mvn clean jetty:run}}
3) open http://localhost:8080 in IE11 and Edge

Results IE11:
both blob downloads results: SCRIPT5: Access denied

Results Edge:
1) Download Zip blob: XMLHttpRequest: Network Error 0x2efd, Could not complete the operation due to error 00002efd.
2) Download Text blob: Name is not being set, file is saved as 1FD327DF-29BC-4EC6-A2BA-F85384D62D1A

IFrame downloads works as expected

Will try to investigate",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-09 12:15:44.735,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Nov 10 13:38:39 UTC 2017,,,,,,0|i3ml0f:,9223372036854775807,,,,,,,,"09/Nov/17 12:15;jira-bot;Commit e1e6235e33156086fc3b7b13d49261ef10c2183d in wicket's branch refs/heads/WICKET-6491-ajax-download-ms from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e1e6235 ]

[WICKET-6491] ajax download seems to work under both IE11 and Edge
","09/Nov/17 12:17;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/wicket/pull/244

    [WICKET-6491] ajax download seems to work under both IE11 and Edge

    I would appreciate if someone can review my changes

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6491-ajax-download-ms

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/244.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #244
    
----
commit e1e6235e33156086fc3b7b13d49261ef10c2183d
Author: Maxim Solodovnik <solomax666@gmail.com>
Date:   2017-11-09T12:15:26Z

    [WICKET-6491] ajax download seems to work under both IE11 and Edge

----
","09/Nov/17 14:07;githubbot;Github user martin-g commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/244#discussion_r149970025
  
    --- Diff: wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/wicket-ajaxdownload.js ---
    @@ -108,29 +108,32 @@
     						var disposition = xhr.getResponseHeader(""Content-Disposition"");
     						if (disposition) {
     							var matches = /filename[^;=\n]*=(([""""]).*?\2|[^;\n]*)/.exec(disposition);
    -							if (matches != null && matches[1]) {
    +							if (matches !== null && matches[1]) {
    --- End diff --
    
    Let's add this .js file to the ones checked by JSLint in `testing/js-tests/Gruntfile.js
","09/Nov/17 15:21;githubbot;Github user solomax commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/244#discussion_r149991409
  
    --- Diff: wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/wicket-ajaxdownload.js ---
    @@ -108,29 +108,32 @@
     						var disposition = xhr.getResponseHeader(""Content-Disposition"");
     						if (disposition) {
     							var matches = /filename[^;=\n]*=(([""""]).*?\2|[^;\n]*)/.exec(disposition);
    -							if (matches != null && matches[1]) {
    +							if (matches !== null && matches[1]) {
    --- End diff --
    
    Wasn't aware of this file
    Just have checked `../../wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/wicket-ajaxdownload.js` is already added
","09/Nov/17 15:33;githubbot;Github user martin-g commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/244#discussion_r149995282
  
    --- Diff: wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/wicket-ajaxdownload.js ---
    @@ -108,29 +108,32 @@
     						var disposition = xhr.getResponseHeader(""Content-Disposition"");
     						if (disposition) {
     							var matches = /filename[^;=\n]*=(([""""]).*?\2|[^;\n]*)/.exec(disposition);
    -							if (matches != null && matches[1]) {
    +							if (matches !== null && matches[1]) {
    --- End diff --
    
    Strange that it didn't break the build due to `!=`.
","09/Nov/17 16:23;githubbot;Github user svenmeier commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/244#discussion_r150011145
  
    --- Diff: wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java ---
    @@ -323,10 +323,30 @@ private String getName()
     	}
     
     	/**
    +	 * Controls if anti cache parameter should be added to the URL or not
    +	 *
    +	 * @return {@code true} to add the anti cache request parameter, {@code false} - otherwise
    +	 */
    +	protected boolean shouldAddAntiCacheParameter() {
    --- End diff --
    
    What is this needed for? The resource controls the caching.
","09/Nov/17 16:26;githubbot;Github user solomax commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/244#discussion_r150012308
  
    --- Diff: wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java ---
    @@ -323,10 +323,30 @@ private String getName()
     	}
     
     	/**
    +	 * Controls if anti cache parameter should be added to the URL or not
    +	 *
    +	 * @return {@code true} to add the anti cache request parameter, {@code false} - otherwise
    +	 */
    +	protected boolean shouldAddAntiCacheParameter() {
    --- End diff --
    
    During my tests I found the issue: subsequent download was cached. I have implemented this anti-cache, same as in wicket Image.java
","09/Nov/17 16:32;githubbot;Github user svenmeier commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/244#discussion_r150014533
  
    --- Diff: wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java ---
    @@ -323,10 +323,30 @@ private String getName()
     	}
     
     	/**
    +	 * Controls if anti cache parameter should be added to the URL or not
    +	 *
    +	 * @return {@code true} to add the anti cache request parameter, {@code false} - otherwise
    +	 */
    +	protected boolean shouldAddAntiCacheParameter() {
    --- End diff --
    
    What is this good for? The resource can control caching - I don't see the necessity for an antiCache parameter (as ResourceLink doesn't need have it either).
","09/Nov/17 16:42;githubbot;Github user solomax commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/244#discussion_r150018189
  
    --- Diff: wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java ---
    @@ -323,10 +323,30 @@ private String getName()
     	}
     
     	/**
    +	 * Controls if anti cache parameter should be added to the URL or not
    +	 *
    +	 * @return {@code true} to add the anti cache request parameter, {@code false} - otherwise
    +	 */
    +	protected boolean shouldAddAntiCacheParameter() {
    --- End diff --
    
    I'll double-check (modify my tests) and remove it
    I thought it would save some lines of code if anti-cache will be on by default
","10/Nov/17 04:14;jira-bot;Commit d2286b2bcc391b9595bc48d8082fb8c6ee911d2c in wicket's branch refs/heads/WICKET-6491-ajax-download-ms from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d2286b2 ]

[WICKET-6491] redundant anti-cache parameter is removed
","10/Nov/17 04:18;githubbot;Github user solomax commented on the issue:

    https://github.com/apache/wicket/pull/244
  
    @svenmeier I reverted my changes to AjaxDownloadBehavior.java, thanks for catching this :)
","10/Nov/17 11:56;githubbot;Github user solomax commented on the issue:

    https://github.com/apache/wicket/pull/244
  
    Is it OK to merge this PR?
","10/Nov/17 13:38;jira-bot;Commit e1e6235e33156086fc3b7b13d49261ef10c2183d in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e1e6235 ]

[WICKET-6491] ajax download seems to work under both IE11 and Edge
","10/Nov/17 13:38;jira-bot;Commit d2286b2bcc391b9595bc48d8082fb8c6ee911d2c in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d2286b2 ]

[WICKET-6491] redundant anti-cache parameter is removed
","10/Nov/17 13:38;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/244
",,,,,,,,,,,,,,,,,,,,,
javascript files are not minified in deployment mode and not united,WICKET-6492,13117356,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,solomax,kbachl,kbachl,09/Nov/17 17:59,06/Feb/18 12:48,13/Mar/19 23:18,14/Nov/17 18:08,8.0.0-M8,,,,,,,,8.0.0-M9,,,,wicket,,,0,,,,,,,,"e.g.: go on http://examples8x.wicket.apache.org/wicket-examples/ajax/lazy-loading?1

if you open in the chrome dev tools you see that the jquery is minified, while 
http://examples8x.wicket.apache.org/wicket-examples/ajax/wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-E34C6FE16C54FE3DF3591290A48A496A.js
and
http://examples8x.wicket.apache.org/wicket-examples/ajax/wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-F8010FEDC5FD9B05434A6023763E3050.js
arent;

Also both files should be united together in a single delivery as having a 2kb + 12kb files needing 2 requests is IMHO too much....",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-10 11:40:45.327,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Nov 14 21:12:08 UTC 2017,,,,,,0|i3mlw7:,9223372036854775807,,,,,,,,10/Nov/17 11:40;svenmeier;This works when I run the examples here on my machine: Maven generates the minified resources and they are served as package resources.,"10/Nov/17 11:45;solomax;I guess since ""Wicket Ajax Debug"" is visible  http://examples8x.wicket.apache.org/wicket-examples can work in DEVELOPMENT mode .....","10/Nov/17 15:31;kbachl;Hello Maxim, Sven;

it is not tied to the development mode as we have this in production as well, see:

https://www.whiskyworld.de/wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-E34C6FE16C54FE3DF3591290A48A496A.js
https://www.whiskyworld.de/wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-F8010FEDC5FD9B05434A6023763E3050.js

while jquery itself is minified:
https://www.whiskyworld.de/wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.4-ver-F9EE266EF993962AD59E804AD9DEBE66.js

its 8.0.0 M8 in deployment mode;

Sven - are there any special  maven commands you use to have these minified???

","10/Nov/17 17:58;svenmeier;The alchemi plugin automatically generates the minified version, no special options required.

Please check your Wicket jar, whether it contains the .min.js files.","10/Nov/17 19:41;kbachl;ok, this is odd - the wicket-core-8.0.0-M8.jar has only the regular wicket-event-jquery.js, not the min.js in it in path /org/apache/wicket/ajax/res/js/...

the wicket-core jar however gets pulled in by maven? it has size of 2298030 Bytes, which is same as this one here: https://mvnrepository.com/artifact/org.apache.wicket/wicket-core/8.0.0-M8
and this one is http://central.maven.org/maven2/org/apache/wicket/wicket-core/8.0.0-M8/wicket-core-8.0.0-M8.jar
and it hasnt got the min.js in it?

Honestly - i dont really know what I could do wrong here... ",10/Nov/17 23:12;svenmeier;Strange indeed. I've checked all milestone packages on maven central and M6 seems to be the last one containing the minified resources.,10/Nov/17 23:29;svenmeier;It seems the change to <packaging>bundle</packaging> caused this. When I change the packaging back to *war* - as it was before - the minified resources are picked up again.,"11/Nov/17 04:08;solomax;Just read about this plugin, it seems the issue most probably caused by the absence of
{{warSourceDirectory}} and {{webappDirectory}} properties in case packaging is {{bundle}}
I can try to fix it ... ",11/Nov/17 09:05;svenmeier;Great :),"11/Nov/17 12:48;jira-bot;Commit e3832fd8276d56be8b678d5d0ebbf5ddd1673c4f in wicket's branch refs/heads/WICKET-6492-minify-fix from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e3832fd ]

[WICKET-6492] minified js/css files are bundled
","11/Nov/17 12:49;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/wicket/pull/245

    [WICKET-6492] minified js/css files are bundled

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6492-minify-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/245.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #245
    
----
commit e3832fd8276d56be8b678d5d0ebbf5ddd1673c4f
Author: Maxim Solodovnik <solomax666@gmail.com>
Date:   2017-11-11T12:46:59Z

    [WICKET-6492] minified js/css files are bundled

----
","13/Nov/17 22:23;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/245
  
    +1
","14/Nov/17 03:38;jira-bot;Commit e3832fd8276d56be8b678d5d0ebbf5ddd1673c4f in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e3832fd ]

[WICKET-6492] minified js/css files are bundled
","14/Nov/17 03:38;jira-bot;Commit b80674c108f8dfd125d022ddf9a1fa3d94eac5ff in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b80674c ]

Merge branch 'WICKET-6492-minify-fix'
","14/Nov/17 03:38;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/245
","14/Nov/17 04:11;solomax;minification is fixed, ""file uniting"" need to be checked",14/Nov/17 18:08;svenmeier;The bug is fixed - [~kbachl] please create a feature request for the unification.,"14/Nov/17 21:12;kbachl;[~svenmeier]
your wish is my command Sir :) - I created WICKET-6497 for unification and WICKET-6498 for defer/ async optimization

",,,,,,,,,,,,,,,,,,
Rescheduling the same ajax timer behavior causes memory leak in the browser,WICKET-5570,12710035,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,23/Apr/14 13:06,24/Jan/18 09:20,13/Mar/19 23:18,23/Apr/14 13:21,6.14.0,,,,,,,,6.16.0,7.0.0-M1,,,wicket,,,0,,,,,,,,AbstractAjaxTimerBehavior uses JavaScript setTimeout() function to do its job. It has a #stop() method that clears the timeout but if the timeout is re-scheduled without being cleared a memory leak is observed in the browser.,,,,,,,,,,,,,,,,,,,,,,,,,23/Apr/14 13:07;mgrigorov;wicket-push-test.zip;https://issues.apache.org/jira/secure/attachment/12641470/wicket-push-test.zip,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,388357,,,Wed Apr 23 13:22:24 UTC 2014,,,,,,0|i1uwcv:,388612,,,,,,,,"23/Apr/14 13:07;mgrigorov;A quickstart app that demonstrates the problem.
Start it and use Google Chrome's Task Manager to see that the tab's memory constantly grows.","23/Apr/14 13:22;mgrigorov;Decebal, please test with 6.16.0-SNAPSHOT to verify the fix. Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxTimerBehavior will stop after ajax update of component it is attached to,WICKET-6191,12984308,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,vlastimil.dolejs,vlastimil.dolejs,28/Jun/16 09:26,23/Jan/18 20:10,13/Mar/19 23:18,28/Jun/16 19:23,7.3.0,,,,,,,,6.24.0,7.4.0,8.0.0-M1,,wicket,,,0,,,,,,,,"If you update a component that has AjaxTimerBehavior attached, this behavior will not fire anymore.
See attached quickstart.
This is due to wicket-ajax-jquery.js:2880 - all timers are removed on components DOM node remove (update). But new timer is not scheduled by the behavior because it thinks it has timeout already scheduled.

I propose to add timeout in AbstractAjaxTimerBehavior.renderHead() at all circumstances, not only on full page render. (as shown in attached quickstart)",,,,,,,,,,,,,,,,,WICKET-5439,,,,,,,,28/Jun/16 09:27;vlastimil.dolejs;ajax-timer-update-quickstart.zip;https://issues.apache.org/jira/secure/attachment/12814073/ajax-timer-update-quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-06-28 19:19:08.777,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jun 28 19:23:38 UTC 2016,,,,,,0|i308vr:,9223372036854775807,,,,,,,,"28/Jun/16 19:19;jira-bot;Commit 739bab408f7c29361fd335e41479f074ea1edfca in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=739bab4 ]

WICKET-6191 always add timeout when rendered, since wicket-ajax removes any previous timer
","28/Jun/16 19:19;jira-bot;Commit f71a2d33c2ff9dbb669066a3dfc7b58229824b0e in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f71a2d3 ]

WICKET-6191 always add timeout when rendered, since wicket-ajax removes any previous timer
","28/Jun/16 19:19;jira-bot;Commit 2678faa0391774058f34779b815c1cbb2e9dd1e3 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2678faa ]

WICKET-6191 always add timeout when rendered, since wicket-ajax removes any previous timer
","28/Jun/16 19:23;svenmeier;Actually the idea of this 'feature' was to prevent unnecessary timeouts.

But with WICKET-4689 I think it's just easier to always add the timer when rendering the head. I don't see a problem with readding the timer now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken links on the webpage,WICKET-6486,13111664,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,,eximius,eximius,24/Oct/17 11:12,26/Oct/17 10:42,13/Mar/19 23:18,24/Oct/17 18:22,,,,,,,,,,,,,,,,0,,,,,,,,"https://wicket.apache.org/community/

links to Wicket-Bootstrap project and Wicket JQuery-UI integration seems to be broken

And I think it's worth to mention ""Wicket-SpringBoot"" project: https://github.com/MarcGiffing/wicket-spring-boot

Also links under https://wicket.apache.org/help/#commercial are duplicated
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-24 18:22:12.42,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Oct 26 10:42:35 UTC 2017,,,,,,0|i3lmun:,9223372036854775807,,,,,,,,24/Oct/17 18:22;bitstorm;The links are broken because the projects are searching for a new host provider. They will be updated ASAP. The other suggested changes are now online.,25/Oct/17 12:00;mgrigorov;I think it would be better to link to their respective Github repos instead to the live examples.,25/Oct/17 19:58;eximius;[~mgrigorov] you're right. For Wicket-Bootstrap you could use https://github.com/l0rdn1kk0n/wicket-bootstrap,26/Oct/17 10:42;bitstorm;Done! For Wicket JQuery-UI I've updated the link to the new working URL,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in MountedMapper,WICKET-6481,13109181,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,laeb,laeb,13/Oct/17 08:03,19/Oct/17 15:56,13/Mar/19 23:18,18/Oct/17 15:34,7.9.0,8.0.0-M7,,,,,,,7.10.0,8.0.0-M8,,,wicket,,,0,,,,,,,,"In case users open bookmarked deep links (including page version) or the page currently displayed expired, in some cases there are NPEs in the MountedMapper:

{noformat}
09:48:55,229-[ajp-nio-8154-exec-6] ERROR -ErrorPage           - java.lang.NullPointerException
	at org.apache.wicket.core.request.mapper.MountedMapper.checkPageClass(MountedMapper.java:256)
	at org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper.mapHandler(AbstractBookmarkableMapper.java:400)
	at org.apache.wicket.core.request.mapper.MountedMapper.mapHandler(MountedMapper.java:154)
	at org.apache.wicket.request.mapper.CompoundRequestMapper.mapHandler(CompoundRequestMapper.java:210)
	at org.apache.wicket.request.cycle.RequestCycle.mapUrlFor(RequestCycle.java:449)
	at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:186)
	at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:202)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:912)
	at org.apache.wicket.request.RequestHandlerExecutor.execute(RequestHandlerExecutor.java:65)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:283)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:253)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:221)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:262)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:204)
	at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:286)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:230)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:106)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at de.bps.blok.utils.NoJSessionIdInUrlFilter.doFilter(NoJSessionIdInUrlFilter.java:44)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)
	at org.apache.coyote.ajp.AbstractAjpProcessor.process(AbstractAjpProcessor.java:844)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1527)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1484)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
{noformat}

Reason seems to be in PageProvider.getPageClass(). This may return null if hasPageInstance() returns false. In that case a NPE is thrown as shown in the stacktrace.

*Example:*
Mounting:
{code:java}
mount(new MountedMapper(""page/${page}"", BlokPage.class));
{code}
Request logger:
{noformat}
09:48:55,246-[ajp-nio-8154-exec-6] INFO  -RequestLogger       -startTime=""2017-10-05 07:48:55,093"",duration=153,url=""https://server/path/page/home?1"",event={handler=RenderPageRequestHandler,data={pageId=1,pageParameters={null},renderCount=null}},response={handler=RenderPageRequestHandler,data={pageClass=de.bps.blok.page.simple.ErrorPage,pageId=0,pageParameters={},renderCount=0}},sessionid=""A5527CCEAEE7334A805F9EF09D30A7BB"",sessionsize=2710,sessioninfo={;page/home?1},sessionstart=""2017-10-05 07:48:55,231"",requests=2,totaltime=153,activerequests=0,maxmem=2147M,total=1073M,used=198M
{noformat}","Linux 4.9.0-3-amd64 #1 SMP Debian 4.9.30-2+deb9u5 (2017-09-19) x86_64 GNU/Linux
Java 8u144
Tomcat 9.0.1",,,,,,,,,,,,,,,,,,,,,,,,16/Oct/17 11:54;laeb;quick.tar.gz;https://issues.apache.org/jira/secure/attachment/12892372/quick.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2017-10-14 13:17:37.628,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Oct 18 15:29:29 UTC 2017,,,,,,0|i3l8av:,9223372036854775807,,,,,,,,"14/Oct/17 13:17;jira-bot;Commit e4f89ca9979af7af05efaf66dea344936d06b943 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e4f89ca ]

WICKET-6481 null-safe equals to check page class","14/Oct/17 13:21;bitstorm;Hi [~laeb]

could you recreate the issue in a quickstart? If not could you show me the code of the bookmarked link you use?","14/Oct/17 15:28;jira-bot;Commit b0a12b72d2f298801faac660fde44ba15591f6b7 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b0a12b7 ]

WICKET-6481 null-safe equals to check page class
","16/Oct/17 06:51;laeb;Hi  [~bitstorm],

sorry for the misunderstanding. It's not a bookmarked link. Users tend to drag the current URL into their bookmarks. Since that URL contains the page version (please see the url=... in the RequestLogger example above), this causes the NPE if the users calls that URL (I called it deep link) without having a websession. It was not reported with ""proper"" URLs which do not contain the pages version.

I hope this helps.","16/Oct/17 10:56;bitstorm;Hi [~laeb],

thank you for your clarification. I couldn't reproduce the issue yet. Could you give some more info? Page 'de.bps.blok.page.simple.ErrorPage' is the one you set as ExpiredErrorPage? Could you post its code? In the meantime I did a commit to avoid NPE  inside '.MountedMapper.checkPageClass'. Are you able to test your app with Wicket 8 SNAPSHOT?

Thank you.","16/Oct/17 12:04;laeb;Hi [~bitstorm],

I tried the SNAPSHOT release, this changed the Exception to:

{noformat}
13:43:16,667-[http-nio-8080-exec-3] ERROR -faultExceptionMapper-Unexpected error occurred
java.lang.IllegalArgumentException: Argument 'pageClass' may not be null.
	at org.apache.wicket.util.lang.Args.notNull(Args.java:41)
	at org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper$UrlInfo.<init>(AbstractBookmarkableMapper.java:90)
	at org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper.mapHandler(AbstractBookmarkableMapper.java:410)
	at org.apache.wicket.request.mapper.CompoundRequestMapper.mapHandler(CompoundRequestMapper.java:210)
	at org.apache.wicket.request.cycle.RequestCycle.mapUrlFor(RequestCycle.java:449)
	at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:186)
	at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:202)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:912)
	at org.apache.wicket.request.RequestHandlerExecutor.execute(RequestHandlerExecutor.java:65)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:283)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:253)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:221)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:262)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:204)
	at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:286)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:475)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:651)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:498)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:796)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1374)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
13:43:16,848-[http-nio-8080-exec-3] INFO  -RequestLogger       -startTime=""2017-10-16 11:43:16,658"",duration=189,url=""http://localhost:8080/blok/page/home?1&keep=true"",event={handler=RenderPageRequestHandler,data={pageId=1,pageParameters={null},renderCount=null}},response={handler=RenderPageRequestHandler,data={pageClass=de.bps.blok.page.simple.ErrorPage,pageId=null,pageParameters={},renderCount=null}},sessionid=""null"",sessionsize=1305,activerequests=0,maxmem=3493M,total=569M,used=140M
{noformat}

Also I found the time to convert my project to a simple quickstart by removing all but the base page components. The problem still exists. Here are the key facts to start this up with my environment:
# extract [^quick.tar.gz]
# _Import existing project_ (we use Eclipse Oxygen)
# create a tomcat 9.0.1 server (we use Java 8u144)
# deploy module _quick_ to that server, default settings are sufficient
# start the server
# call http://localhost:8080/blok/page/home?1 in your browser
# this should give you sth. like _Base Simple! Error! Base again _
# check the console, you should find the stacktrace above
# http://localhost:8080/blok/page/home (no page version) should work","16/Oct/17 14:12;bitstorm;Ok, I think I got the problem. You used 'page' as mounting segment. By default this a reserved segment for Wicket (see [the guide|https://ci.apache.org/projects/wicket/guide/8.x/single.html#_providing_custom_mapper_context_to_request_mappers] for more details).  I will add more code to handle this conflict when the application starts up.","17/Oct/17 07:26;laeb;Hi [~bitstorm],

that's the problem indeed! I added a custom mapper and the problem disappears. Handling that on application startup will help avoiding problems like this.
But I still think Wicket should not fail with a NPE or AssertException though, especially because this scenario works fine as long as there's a websession.

*Thank you for the hints and the fast responses!*","17/Oct/17 12:49;mgrigorov;Actually ""page"" is not special. 
"".../wicket/page"" is special! 
Without the namespace (wicket) ""page"" should be just a random segment name.",17/Oct/17 13:04;bitstorm;Actually 'page' alone is enough. See [here|https://github.com/apache/wicket/blob/9e42a9548adb0da540e4e87d491f5824e778537e/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/PageInstanceMapper.java#L182].,"17/Oct/17 13:46;jira-bot;Commit 7c601fccef5a8a32692e195988872f3c0ca3939a in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7c601fc ]

WICKET-6481 PageInstanceMapper must not deal with anything that has
more segments than ""page"".","17/Oct/17 15:33;jira-bot;Commit 9e3e16709b4652f091ae1c946b6f0618e040ce18 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9e3e167 ]

WICKET-6481 code review feedbacks","18/Oct/17 13:36;jira-bot;Commit d519b75f1d35f3d6300d444b32d73aa87ce87e85 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d519b75 ]

WICKET-6481 PageInstanceMapper must not deal with anything that has more segments than ""page"".
","18/Oct/17 15:09;jira-bot;Commit 49d398333a1a256078ceecac5a58d768674e77de in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=49d3983 ]

WICKET-6481 Added JavaDoc to avoid mount paths starting with
reserved URL segments","18/Oct/17 15:29;jira-bot;Commit 884018dcfd11408767e4a22b9f9d18cf0f0ede1e in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=884018d ]

WICKET-6481 Added JavaDoc to avoid mount paths starting with reserved URL segments
",,,,,,,,,,,,,,,,,,,,,
PageStore loses all stored pages,WICKET-6387,13076191,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,hypfvieh,hypfvieh,31/May/17 13:30,10/Oct/17 18:18,13/Mar/19 23:18,04/Jun/17 20:52,8.0.0-M6,,,,,,,,6.27.0,7.8.0,8.0.0-M7,,wicket,wicket-extensions,,0,,,,,,,,"When using ModalWindow in combination with PageReference does not work since version 8.0.0-M6.

I tried 8.0.0-M5 as well without getting this issue.

Using the example code of wicket-examples, the call {{(ModalWindowPage)modalWindowPage.getPage()}} will always return null instead of the page.

The PageReference object contains a valid pageId, but the PageManager cannot find the object referenced by this ID.

I attached an example project to show this issue
(use {{mvn clean compile jetty:run}} to start local webserver on 8080).

I'm also pretty sure that this problem will also occur with the wicket-example code. 
My example is just a stripped version of the wicket-examples modal window sample which will throw an IllegalArgumentException when getPage() is null.",Jetty 9.4.5.v20170502,,,,,,,,,,,,,,,,,,,,,,,,31/May/17 13:30;hypfvieh;modal_sample.tgz;https://issues.apache.org/jira/secure/attachment/12870573/modal_sample.tgz,,,,1.0,,,,,,,,,,,,,,,,,,,2017-05-31 19:39:55.62,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Aug 29 13:02:28 UTC 2017,,,,,,0|i3fp27:,9223372036854775807,,,,,,,,"31/May/17 19:39;mgrigorov;Your application and Wicket-Examples work fine here with both 8.0.0-M6 and 8.0.0-SNAPSHOT.
http://examples8x.wicket.apache.org/ajax/modal-window","01/Jun/17 05:46;hypfvieh;hmmm... That's really strange.

I get the null-reference every time on my main working machine as well as on my laptop.
I also tried to use different java versions (openjdk 1.8.0_131, oracle jdk 1.8.0_121 as well as old oracle jdk 1.8.0_74), but that does not change anything.

Any idea on how I could help to track down this issue?","01/Jun/17 07:21;hypfvieh;After some further debugging, I can see the following:

'PageReference.getPage()' calls 'Session.get().getPageManager().getPage()' which then will use 'getRequestAdapter().getPage()'.
This will use 'PersistentRequestAdapter.getPage()' to retrieve the page.

In my sample, PersistentRequestAdapter tries to find the page with 'findPage()' method which will iterate the
'touchedPages' member. The member only contains one entry in my sample, and that is the modal window, not the parent page (referenced page) of the modal window.
So this 'findPage()' call will return null.

As second pass, if returned page was null, getSessionEntry(false) is called and returns a SessionEntry (org.apache.wicket.page.PageStoreManager$SessionEntry) object.
Then 'getPage(id)' on this SessionEntry object is called.

After some checks, the 'sessionCache' member is checked and if that is not null (which is the case), 'findPage(id)' is used to find the page in sessionCache member.
The 'sessionCache' member also only contains the ModalWindow, not the requested page, so again null is returned.

As last option getPageStore() is called and returning an AsynchronousPageStore object. 
'getPage()' call is issued on the AsynchronousPageStore object. 

The first thing inside this 'getPage()' call is a 'getEntry' call which returns null, so the 'delegate' member (instance of DefaultPageStore) will be used.
'getPage()' is called on 'delegate' member.

In that method, DefaultPageStore member 'pagesCache' (instance of AbstractPageStore) is queryied and will again return null which will result in calling 'getPageData(sessionId, pageId)'.
Now the method 'getData(sessionId, pageId) on 'dataStore' (instance of AsynchronousDataStore) member of AbstractPageStore will be called.

'getEntry(sessionId, id)' will again return null, so 'dataStore.getData(sessionId, id)' is used.

In the DiskDataStore class, 'getData' will use 'getSessionEntry' (returns an object, not null) and then try to load the page with 'sessionEntry.loadPage(id)'.
In 'loadPage' 'getManager().getPageWindow(id)' will return null.

The manger behind 'getManager()' is org.apache.wicket.pageStore.PageWindowManager. 
In PageWindowManager object the member 'idToWindowIndex' only contains one entry, and that is the pageId of the ModalWindow, not the parent.
That means, 'getWindowIndex(pageId)' will return -1 because the lookup in idToWindowIndex-Map will return null.

After all of that stuff above, this 'null' value is returned through all the stacks until it reaches my sample code.

The question for me is, why is the initial ""parent"" page not inside any of those ""stores""?",01/Jun/17 19:32;mgrigorov;Can anyone else reproduce the problem with [~hypfvieh]'s quickstart or with wicket-examples ?,02/Jun/17 15:15;svenmeier;I'm getting a NullPointerException in wicket-examples and the IllegalArgumentException in the quickstart.,02/Jun/17 18:01;svenmeier;It works with M5 :/,"02/Jun/17 21:27;svenmeier;This doesn't have anything to do with ModalWindow - every retrieval of previous pages from the page store fails:

Just open wicket-example's FormInput several times, then switch back to a previous page id and Wicket will recreate an expired page.",02/Jun/17 21:32;svenmeier;Breaking commit is 290398a3e4f950f6c6cd93ad0c557c12c867ce0e,04/Jun/17 19:11;mgrigorov;I'll take a look now!,"04/Jun/17 20:25;mgrigorov;This is the problem:

{code}
at org.apache.wicket.pageStore.DiskDataStore.removeData(DiskDataStore.java:169)
	  - locked <0x176a> (a org.apache.wicket.pageStore.DiskDataStore$SessionEntry)
	  at org.apache.wicket.pageStore.AsynchronousDataStore.removeData(AsynchronousDataStore.java:204)
	  at org.apache.wicket.pageStore.AbstractPageStore.removePageData(AbstractPageStore.java:105)
	  at org.apache.wicket.pageStore.AbstractCachingPageStore.unbind(AbstractCachingPageStore.java:95)
	  at org.apache.wicket.page.PageStoreManager$SessionEntry.valueUnbound(PageStoreManager.java:319)
	  at org.eclipse.jetty.server.session.AbstractSession.unbindValue(AbstractSession.java:527)
	  at org.eclipse.jetty.server.session.AbstractSession.setAttribute(AbstractSession.java:453)
	  at org.apache.wicket.session.HttpSessionStore.setAttribute(HttpSessionStore.java:366)
	  at org.apache.wicket.Session.setAttribute(Session.java:855)
	  at org.apache.wicket.page.DefaultPageManagerContext.setSessionAttribute(DefaultPageManagerContext.java:99)
	  at org.apache.wicket.page.RequestAdapter.setSessionAttribute(RequestAdapter.java:90)
	  at org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter.storeTouchedPages(PageStoreManager.java:413)
...
{code}

Updating the session attribute leads to unbinding the old one and thus removing the data stored in the disk.","04/Jun/17 20:49;jira-bot;Commit 95fcc140dc64b8226f54664b70249ec3067e0768 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=95fcc14 ]

WICKET-6387 ModalWindow PageReference broken

Do not remove the session data when the SessionEntry is updated in the Session
","04/Jun/17 20:49;jira-bot;Commit 0f8e0199944b0eb920c278814b629504ca62dbf0 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0f8e019 ]

WICKET-6387 ModalWindow PageReference broken

Do not remove the session data when the SessionEntry is updated in the Session

(cherry picked from commit 95fcc140dc64b8226f54664b70249ec3067e0768)
","04/Jun/17 20:51;jira-bot;Commit 9e50533f2d9546d46686a88146936b25e1f355dd in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9e50533 ]

WICKET-6387 ModalWindow PageReference broken

Do not remove the session data when the SessionEntry is updated in the Session

(cherry picked from commit 95fcc140dc64b8226f54664b70249ec3067e0768)
",05/Jun/17 13:04;svenmeier;+1 that was tricky :),"29/Aug/17 13:02;papegaaij;This change breaks page store management on Wildfly. It seems Undertow does not unbind the attribute. It does re-bind. In Undertow the code that calls the listeners is:
{code}
        final HttpSessionImpl httpSession = SecurityActions.forSession(session, servletContext, false);
        if (old != value) {
            if (old instanceof HttpSessionBindingListener) {
                ((HttpSessionBindingListener) old).valueUnbound(new HttpSessionBindingEvent(httpSession, name, old));
            }
            applicationListeners.httpSessionAttributeReplaced(httpSession, name, old);
        }
        if (value instanceof HttpSessionBindingListener) {
            ((HttpSessionBindingListener) value).valueBound(new HttpSessionBindingEvent(httpSession, name, value));
        }
{code}
Perhaps the updating should be reset to false at valueBound?",,,,,,,,,,,,,,,,,,,,,
Default constructor is incorrectly called if optional param is not provided in parameter placeholder URL with additional required parameter,WICKET-6461,13099243,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,mweston4,mweston4,01/Sep/17 14:41,02/Oct/17 08:17,13/Mar/19 23:18,25/Sep/17 19:20,6.22.0,,,,,,,,7.10.0,8.0.0-M8,,,wicket,,,0,,,,,,,,"From the documentation here:

https://ci.apache.org/projects/wicket/guide/6.x/guide/urls.html

I'm following the section titled, ""Using parameter placeholders with mounted pages"".

In the documentation from here:

https://cwiki.apache.org/confluence/display/WICKET/Request+mapping

{code}
Named parameters - /page/${named1}/${named2}

mountPage(""/page/${named1}/${named2}"", MyPage.class);
Now a request to ""/page/a/b"" will be handled by MyPage and the parameters can be get with PageParameters.get(String) (e.g. parameters.get(""named1"") will return ""a"")

Optional named parameters - /page/${named1}/#{named2\

mountPage(""/page/${named1}/#{named2}"", MyPage.class);
This means the second parameter is optional. Requests to ""/page/a/b"" , ""/page/a/b/"" and ""/page/a/"" will be handled by MyPage and the parameters can be get with PageParameters.get(String) (e.g. parameters.get(""named2"") will return ""b"" for the first case and null for the second).
The mapper is smart enough to handle optional named parameters in any segment, not just the last one.
{code}

it states: ""The mapper is smart enough to handle optional named parameters in any segment, not just the last one.""

I've found it does matter IF other segments in the url are also parameter placeholders. The resulting behaviour is that if the optional parameter placeholder isn't provided in the URL, the page's default constructor gets called instead of the PageParameter constructor as expected (since there are still additional PageParameter data that may need to be processed by the page). 

Here is my example:

From child class of AdtAuthenticatedWebApplication
{code}
@Override
protected void init() 
{
    super.init();

    mountPage(""/foo/#{optParam}/${otherParam}"", MyPage.class);
    //mountPage(""/foo/${otherParam}/#{optParam}"",  MyPage.class); <--- NOTE: This works as expected
}
{code}

In child class of WebPage
{code}
public class MyPage extends WebPage
{
    public MyPage(PageParameters parameters) 
    {
        super(parameters);

        StringValue optParam = parameters.get(""optParam"");
        StringValue otherParam = parameters.get(""otherParam"");

       //do something...
    }

    private MyPage()
    {        
        throw new IllegalAccessError(""The default constructor should not be instantiated"");
    }
{code}

And in a different class:
{code}
public static BookmarkablePageLink getBookmarkableLink(String id, String optParam, String otherParam)
 {         
        PageParameters pageParam = new PageParameters();
                
        pageParam.add(""otherParam"", otherParam);

        if (optParam != null && !optParam.isEmpty())
        {
            pageParam.add(""optParam"", optParam);
        }
                
        return new BookmarkablePageLink(id, MyPage.class, pageParam);             
    } 
{code}

Here are the result of clicking on the BookmarkablePageLinks created:
{code}
/foo/baz/bar  -- calls MyPage(PageParameters parameters) constructor
/foo/bar -- attempts to call MyPage default constructor (exception thrown)
{code}

Exception thrown is:
{code}
Last cause: Class org.apache.wicket.session.DefaultPageFactory can not access a member of class ca.example.for.testing.MyPage with modifiers ""private""
WicketMessage: Can't instantiate page using constructor 'private ca.example.for.testing.MyPage()'. This constructor is private!
{code}",,,,,,,,,,,,,,,,,,,,,,,,,05/Sep/17 16:25;mweston4;quickstartPP.zip;https://issues.apache.org/jira/secure/attachment/12885416/quickstartPP.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-09-04 11:28:06.202,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Oct 02 08:17:09 UTC 2017,,,,,,0|i3jjyv:,9223372036854775807,,,,,,,,04/Sep/17 11:28;svenmeier;Please provide a quickstart. Thanks!,05/Sep/17 16:26;mweston4;Quickstart Added.,"07/Sep/17 18:53;svenmeier;You're right, with a page mounted on {{""/params/#&#123;optional}/$&#123;required}""}}, a Url {{""params/required""}} will hit that page but without any parameters.
Either it should not hit the page at all, or preferably create an instance with the required parameter.

I'm working on a test case. For now you could insert a fixed segment between the optional and required parameter, e.g. {{""/params/#&#123;optional}/fixed/$&#123;required}""}}.","25/Sep/17 19:18;jira-bot;Commit 2283dc502fca56f9e912823a4f94a629188aa63f in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2283dc5 ]

WICKET-6461 don't consume segments for optional parameters if required parameters are following
","25/Sep/17 19:19;jira-bot;Commit 03ce95252999353d048b9cc0c089550e5944edea in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=03ce952 ]

WICKET-6461 don't consume segments for optional parameters if required parameters are following
",25/Sep/17 19:20;svenmeier;Parsing of parameters works now for optional before required parameters.,"25/Sep/17 19:22;svenmeier;Note that one of your use-cases in your example still calls the default constructor:

Mounted with ""/{#optional}/fixed"", the URL ""/fixed"" will result in no parameters, thus the no-arg constructor will be called.","02/Oct/17 08:17;jira-bot;Commit 2283dc502fca56f9e912823a4f94a629188aa63f in wicket's branch refs/heads/WICKET-6105-java.time from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2283dc5 ]

WICKET-6461 don't consume segments for optional parameters if required parameters are following
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileSystemResource file descriptor leak,WICKET-6471,13103731,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,boris@alum.mit.edu,boris@alum.mit.edu,20/Sep/17 21:10,22/Sep/17 17:22,13/Mar/19 23:18,21/Sep/17 21:44,7.9.0,,,,,,,,7.10.0,8.0.0-M8,,,wicket,,,0,,,,,,,,"FileSystemResource does not appear to close the InputStream that it creates.  

I believe it should call setClose(true) on the PartWriterCallback.

To verify the problem, see the attached quick start. Change the filename in HomePage.java to point to some valid image file on your system. After viewing the home page in a browser, check for files that the jetty process has open, eg:

{noformat}
lsof -p PID | grep logo
{noformat}

If you load the home page a few more times, using Shift-reload to avoid simply loading from cache, you can see many file descriptors pointing to the image file are kept open:

{noformat}
java    87278 borisgoldowsky  txt      REG                1,4     12244 103583676 /Users/borisgoldowsky/idea/frquickstart/src/main/webapp/logo.png
java    87278 borisgoldowsky  175r     REG                1,4     12244 103583676 /Users/borisgoldowsky/idea/frquickstart/src/main/webapp/logo.png
java    87278 borisgoldowsky  180r     REG                1,4     12244 103583676 /Users/borisgoldowsky/idea/frquickstart/src/main/webapp/logo.png
java    87278 borisgoldowsky  181r     REG                1,4     12244 103583676 /Users/borisgoldowsky/idea/frquickstart/src/main/webapp/logo.png
{noformat}


",,,,,,,,,,,,,,,,,,,,,,,,,20/Sep/17 21:09;boris@alum.mit.edu;frquickstart.zip;https://issues.apache.org/jira/secure/attachment/12888134/frquickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-09-21 21:41:31.104,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Sep 22 17:22:52 UTC 2017,,,,,,0|i3kbj3:,9223372036854775807,,,,,,,,"21/Sep/17 21:41;jira-bot;Commit e15993c092930fe36ab9c624d286a2043172cb76 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e15993c ]

WICKET-6471 inputstream has to be closed
","21/Sep/17 21:41;jira-bot;Commit cab941eddd844d278cb6600706c7dc92e9d1c5a2 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=cab941e ]

WICKET-6471 inputstream has to be closed
","21/Sep/17 21:44;svenmeier;FileSystemResource didn't close the inputstream.

Many thanks for your investigation and quickstart!","22/Sep/17 10:15;klopfdreh;Thanks from me, too.

[~svenmeier] - is the fix version 7.9.0 or 7.10.0?

Edit: I changed it to 7.10.0","22/Sep/17 11:37;boris@alum.mit.edu;Thanks for the immediate fix!
",22/Sep/17 12:46;klopfdreh;Until 7.10.0 or 8.0.0 is released you can override the method to fix it.,"22/Sep/17 17:22;jira-bot;Commit e15993c092930fe36ab9c624d286a2043172cb76 in wicket's branch refs/heads/WICKET-6105-java.time from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e15993c ]

WICKET-6471 inputstream has to be closed
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Headers not rendered for components inside TransparentWebMarkupContainer on ajax update,WICKET-5941,12842543,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,papegaaij,papegaaij,03/Jul/15 09:14,24/Aug/17 08:48,13/Mar/19 23:18,14/Jul/15 19:43,6.20.0,7.0.0-M6,,,,,,,6.21.0,7.1.0,,,wicket,,,0,,,,,,,,"When a TransparentWebMarkupContainer is refreshed using ajax, components inside it do not render headers. The attached quickstart shows this problem. The AjaxLink only works once.",,,,,,,,,,,,,,,,,,,,,,,,,03/Jul/15 09:15;papegaaij;refreshhead.tar.gz;https://issues.apache.org/jira/secure/attachment/12743492/refreshhead.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2015-07-11 18:16:54.023,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Aug 22 08:17:40 UTC 2015,,,,,,0|i2gtvb:,9223372036854775807,,,,,,,,03/Jul/15 09:15;papegaaij;Quickstart,"11/Jul/15 18:16;jira-bot;Commit a8fd5a763cd316224b1683c70bffc6786fecbfde in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a8fd5a7 ]

WICKET-5941 Headers not rendered for components inside TransparentWebMarkupContainer on ajax update
","11/Jul/15 18:16;jira-bot;Commit 9618e702442d3c7c128ea736f8a23db1d3d4200a in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9618e70 ]

WICKET-5941 Headers not rendered for components inside TransparentWebMarkupContainer on ajax update
","13/Jul/15 21:37;jira-bot;Commit 2e5da6d26aa2a935d6644e5b15c194bbe5dae8bc in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2e5da6d ]

test for WICKET-5941
","14/Jul/15 14:57;jira-bot;Commit 7d11d34b91d4e9a4a6612cc2df45c593774718af in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7d11d34 ]

WICKET-5941 Headers not rendered for components inside TransparentWebMarkupContainer on ajax update
","14/Jul/15 14:57;jira-bot;Commit 0063167a084139bd2904e8f077dc7d775713ed59 in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0063167 ]

WICKET-5941 Headers not rendered for components inside TransparentWebMarkupContainer on ajax update
","14/Jul/15 19:45;mgrigorov;What is the ""Fix for"" version for 7.x? 7.0.0 or 7.1.0 ?","14/Jul/15 19:53;bitstorm;I haven't seen 7.1.0. Now it's set to this version, than you.","22/Aug/15 08:17;jira-bot;Commit 57630dc559a1e1e3f347eb9f9f5816534586bf67 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=57630dc ]

WICKET-5941 Headers not rendered for components inside TransparentWebMarkupContainer on ajax update

Remove 'final' for Component#isRendering().
This breaks the build of WicketStuff
",,,,,,,,,,,,,,,,,,,,,,,,,,,
AbstractRequestLogger should not create new Sessions,WICKET-6429,13090137,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,26/Jul/17 08:45,26/Jul/17 08:51,13/Mar/19 23:18,26/Jul/17 08:51,7.8.0,,,,,,,,7.9.0,8.0.0-M7,,,wicket,,,0,,,,,,,,"org.apache.wicket.protocol.http.AbstractRequestLogger#requestTime() uses Session.get() without checking whether a session exists just to log its id and ISessionInfo.

It should not create new sessions!

{code}
...
        at org.apache.wicket.Application.fetchCreateAndSetSession(Application.java:1717)
        at org.apache.wicket.Session.get(Session.java:169)
        at org.apache.wicket.protocol.http.AbstractRequestLogger.requestTime(AbstractRequestLogger.java:221)
        at org.apache.wicket.Application$3.onDetach(Application.java:1797)
   ...
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-26 08:50:37.063,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jul 26 08:51:36 UTC 2017,,,,,,0|i3i0wv:,9223372036854775807,,,,,,,,"26/Jul/17 08:50;jira-bot;Commit 3ec2c617f1e27f06df985032e233ca4799097b26 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3ec2c61 ]

WICKET-6429 AbstractRequestLogger should not create new Sessions
","26/Jul/17 08:51;jira-bot;Commit 1059b474b49984ea1471ab31a12ecb8aab08bea3 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1059b47 ]

WICKET-6429 AbstractRequestLogger should not create new Sessions

(cherry picked from commit 3ec2c617f1e27f06df985032e233ca4799097b26)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 Localization of PageParameters ,WICKET-6419,13086495,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,Ravi Knox,Ravi Knox,12/Jul/17 07:28,25/Jul/17 19:54,13/Mar/19 23:18,25/Jul/17 19:50,7.7.0,,,,,,,,8.0.0-M7,,,,wicket,,,0,,,,,,,,"It concerns the reading of PageParameters. They all use the StringValue constructor without passing the Session locale.
The StringValue will in turn use the systems locale.

So when I retrieve a _en formatted number (1.000) from my GET-Params, I get a wrong number (1) because my Server runs on a _de machine where a dot is a decimal delimeter.

I can work around that by again creating a StringValue based on my previous StringValue, but with passing the Session locale.

Shouldn't it pass the session's locale in first place?

See [here|https://github.com/apache/wicket/blob/master/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java#L167] for the PageParameter implementation and [here|https://github.com/apache/wicket/blob/master/wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java#L186] for the StringValue implementation.

See also:
http://apache-wicket.1842946.n4.nabble.com/Localization-of-PageParameters-td4678221.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-18 21:04:36.395,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jul 25 19:50:07 UTC 2017,,,,,,0|i3hevb:,9223372036854775807,,,,,,,,"18/Jul/17 21:04;jira-bot;Commit 7697741252d9542a9686f8d745a4e8c19465be32 in wicket's branch refs/heads/WICKET-6419 from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7697741 ]

WICKET-6419 Localization of PageParameters
","18/Jul/17 21:08;mgrigorov;This is what I suggest as an improvement for this ticket.
The old behavior is preserved and the new functionality is opt-in, i.e. the application developer should override org.apache.wicket.request.mapper.AbstractMapper#resolveLocale() as I did in org.apache.wicket.core.request.mapper.LocaleAwarePageParametersTest#newApplication() to get the user's locale.","18/Jul/17 21:13;jira-bot;Commit e75cb25605ac64e4b2f6bc149f7f2e1243f824cb in wicket's branch refs/heads/WICKET-6419 from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e75cb25 ]

WICKET-6419 Localization of PageParameters

Explicitly set the default locale to ENGLISH so that the test doesn't fail on developer machines with DE locale.
","18/Jul/17 21:49;jira-bot;Commit 77dee2bbd513db2ee89eb4882e02142f1fa619cd in wicket's branch refs/heads/WICKET-6419 from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=77dee2b ]

WICKET-6419 Localization of PageParameters

Add some checks to be on the safe side.
",24/Jul/17 09:51;bitstorm;+1 looks good to me,25/Jul/17 05:36;solomax;+1,"25/Jul/17 19:50;jira-bot;Commit 7697741252d9542a9686f8d745a4e8c19465be32 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7697741 ]

WICKET-6419 Localization of PageParameters
","25/Jul/17 19:50;jira-bot;Commit e75cb25605ac64e4b2f6bc149f7f2e1243f824cb in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e75cb25 ]

WICKET-6419 Localization of PageParameters

Explicitly set the default locale to ENGLISH so that the test doesn't fail on developer machines with DE locale.
","25/Jul/17 19:50;jira-bot;Commit 77dee2bbd513db2ee89eb4882e02142f1fa619cd in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=77dee2b ]

WICKET-6419 Localization of PageParameters

Add some checks to be on the safe side.
","25/Jul/17 19:50;jira-bot;Commit 04c96171e242d09fc34d4f93b1ca97f8fc61a67c in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=04c9617 ]

Merge branch 'WICKET-6419'
",,,,,,,,,,,,,,,,,,,,,,,,,,
PageProvider#getPageInstance() may return null,WICKET-6428,13090014,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,25/Jul/17 19:28,25/Jul/17 19:36,13/Mar/19 23:18,25/Jul/17 19:36,8.0.0-M6,,,,,,,,8.0.0-M7,,,,wicket,,,0,,,,,,,,"org.apache.wicket.core.request.handler.PageProvider#getPageInstance() may return null if there is no information about an expired page.

In this case error like the following may happen:
{code}
java.lang.NullPointerException
        at org.apache.wicket.core.request.handler.PageProvider.getPageClass(PageProvider.java:261)
        at org.apache.wicket.core.request.handler.RenderPageRequestHandler.getPageClass(RenderPageRequestHandler.java:163)
        at org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper.mapHandler(AbstractBookmarkableMapper.java:400)
        at org.apache.wicket.core.request.mapper.MountedMapper.mapHandler(MountedMapper.java:159)
        at org.apache.wicket.request.mapper.CompoundRequestMapper.mapHandler(CompoundRequestMapper.java:210)
        at org.apache.wicket.request.cycle.RequestCycle.mapUrlFor(RequestCycle.java:449)
        at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:186)
        at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:202)
        at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:912)
        at org.apache.wicket.request.RequestHandlerExecutor.execute(RequestHandlerExecutor.java:65)
        at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:283)
        at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:253)
        at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:221)
        at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:262)
        at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:204)
        at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:286)
    
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-25 19:36:09.258,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jul 25 19:36:09 UTC 2017,,,,,,0|i3i05j:,9223372036854775807,,,,,,,,"25/Jul/17 19:36;jira-bot;Commit 740bdcc7ffd61c0a248dc2c6dbe163450075d8bd in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=740bdcc ]

WICKET-6428 PageProvider#getPageInstance() may return null

Check whether the result of PageProvider#getPageInstance() is not null before using it
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Form data to arriving in resource on post,WICKET-6424,13087926,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,newgro,newgro,18/Jul/17 13:03,18/Jul/17 14:14,13/Mar/19 23:18,18/Jul/17 14:12,7.8.0,,,,,,,,,,,,wicket,,,0,,,,,,,,"My usecase is to send a svg to a wicket resource and get a transformed png back as file download. I can not use url-parameter to send the svg because firewall is blocking that content. So i need to send the svg data by form submission via post.

My problem is, that post parameters can be found in browser request window, but will not arrive in resource parameters. This works by using get method, but this is not an option for me.",See attached quickstart,,,,,,,,,,,,,,,,,,,,,,,,18/Jul/17 13:02;newgro;myproject.zip;https://issues.apache.org/jira/secure/attachment/12877801/myproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-07-18 13:08:09.634,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jul 18 14:14:53 UTC 2017,,,,,,0|i3hnnz:,9223372036854775807,,,,,,,,"18/Jul/17 13:08;mgrigorov;Please check http://wicketinaction.com/2012/11/uploading-files-to-wicket-iresource/.
I believe you need:
{code}
    // Note: since Wicket 6.18.0 you will need to call ""multiPartRequest.parseFileParts();"" additionally here
    Map<String, List<FileItem>> files = multiPartRequest.getFiles();
{code}","18/Jul/17 13:09;mgrigorov;Hm. In your code sample in the email there is no ""file upload"", so maybe the problem is different.
I'll try to check your sample soon!",18/Jul/17 13:17;newgro;This is not solving the problem. I think i was not clear enough in my problem description. The svg is not a file. It is already rendered in the current page. I want to use the svg from markup and send it to the resource.,"18/Jul/17 13:38;bitstorm;Hi [~newgro],

if I understood you correctly, you are just looking for a way to read the post request body, which contains the text for the svg. If so, you need something like this:

{code}
    public static String readStringFromRequest(WebRequest request) throws IOException
	{
		HttpServletRequest httpRequest = (HttpServletRequest)request.getContainerRequest();
		return IOUtils.toString(httpRequest.getReader());
	}
{code}

See here [https://github.com/wicketstuff/core/blob/master/wicketstuff-rest-utils/src/main/java/org/wicketstuff/rest/utils/http/HttpUtils.java]",18/Jul/17 14:02;newgro;Thank you Andrea and Martin. Andreas suggestion solved the issue. I would never have found it. Because of that i'm happy you there and supporting me. Thanks alot. Case can be closed for me.,18/Jul/17 14:14;bitstorm;you're welcome! Most of the times solutions are closer than you think :).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clustering failover not working on Tomcat,WICKET-6356,13063647,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,waynegc,waynegc,12/Apr/17 22:24,05/Jul/17 08:24,13/Mar/19 23:18,01/May/17 19:37,6.17.0,7.5.0,,,,,,,6.27.0,7.7.0,8.0.0-M6,,wicket,,,0,cluster,clustering,tomcat,,,,,"Clustering failover with Tomcat 8 is not working for us in Production or locally on my Mac. The reason is the following from the debugging that I did and from the best of my understanding:

Whenever a statefull page is used/touched the SessionEntry is updated. This SessionEntry is stored in the tomcats session under the attribute name  ""wicket:persistentPageManagerData-APPLICATION_NAME"". 
However at the end of the wicket request, Session.internalDetach() is called and setAttribute() is called passing the wicket session under the name ""wicket:wicket.hub:session"". This triggers the replication in Tomcat (only when setAttribute is called and ONLY that attribute is replicated). Because the SessionEntry is stored under a different attribute name its never replicated.

The only time the SessionEntry is replicated is when a node first starts up and joins the cluster , at this point all sessions are replicated across (including all attritbutes) by the daltamanager and SessionEntry#readObject() is used which contains all the pages. On Tomcat after this initial syncing of all sessions SessionEntry#readObject() is never used.

So the only time session failover works is when you kill the other instance (in a 2 node cluster) just after the other instance starts up - at this point the correct SessionEntry is on the new instance. If however you visit some more pages the new pages are never replicated across as the SessionEntry is never replicated.

Further to this IF the SessionEntry was to be replicated it would not be any good as the cache are transient 
private transient List<IManageablePage> sessionCache;
private transient List<Object> afterReadObject
 
This means any new pages created on the old instance (after the new instance has started up) are not available in the http session or the second level page store on the new instance. 
Therefore when the old instance in shut down the user is load balanced to the new instance. At this point the link in the page Wicket is looking for does not exist in the SessionEntry cache or the PageStore so it creates the page and looks for the component/link.This causes a ComponentNotFoundException for us because the links are either in a DataView which is never rendered so does not exist, or the other links are actually added to the page in an Ajax request and again because the page is not rendered are not there, Wicket then throws the exception and it appears to the user the session is lost.



So in summary there seems there is no way for the current mechanism on Tomcat to work. It would seem the SessionEntry.sessionCache needs to be not transient and setAttribute needs to be called for the SessionEntry at the end of request on the internalDetach so that Tomcats deltamanager replicates that attribute in the session.

Attached my quickstart , tomcat, and apache conf.

","Tomcat 8.0.32, Apache 2.4, OSx and Solaris 9,",,,,,,,,,,,,,,,,,,,,WICKET-6387,,,,12/Apr/17 22:24;waynegc;IssueFiles.zip;https://issues.apache.org/jira/secure/attachment/12863150/IssueFiles.zip,24/Apr/17 11:15;waynegc;PageStoreManager.java;https://issues.apache.org/jira/secure/attachment/12864743/PageStoreManager.java,,,2.0,,,,,,,,,,,,,,,,,,,2017-04-24 11:21:08.99,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jul 05 08:24:21 UTC 2017,,,,,,0|i3dkbj:,9223372036854775807,,,,,,,,24/Apr/17 11:15;waynegc;I've done a fix which seems to work for me. Please find attached updated PageStoreManager.java based on 7.5.0 code version,"24/Apr/17 11:21;mgrigorov;Thanks, [~waynegc]!
I'll take a look in the coming days!","01/May/17 18:02;mgrigorov;I have two questions regarding the attached patch:

1) Why #removePage() methods are removed ?

2) why ""afterReadObject"" is no more transient ?","01/May/17 19:29;jira-bot;Commit 9338bdffedd1263a48c55a1f3e2c78f11c9d9d6b in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9338bdf ]

WICKET-6356 Clustering failover not working on Tomcat

Touch the session attribute every time a new stateful pages are stored so that session replication is triggered
","01/May/17 19:30;jira-bot;Commit 77bafbc7de94a4f5a5ce7ed054c6bc5bb693f266 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=77bafbc ]

WICKET-6356 Clustering failover not working on Tomcat

Touch the session attribute every time a new stateful pages are stored so that session replication is triggered
","01/May/17 19:30;jira-bot;Commit 290398a3e4f950f6c6cd93ad0c557c12c867ce0e in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=290398a ]

WICKET-6356 Clustering failover not working on Tomcat

Touch the session attribute every time a new stateful pages are stored so that session replication is triggered
","01/May/17 19:37;mgrigorov;I was able to reproduce the problem.
I've just added the following Apache2 conf to /etc/apache2/sites-enabled/tomcat-cluster.conf:

{code}
ProxyPass ""/"" ""balancer://cluster/"" stickysession=JSESSIONID nofailover=Off
ProxyPassReverse ""/"" ""balancer://cluster/""

# define the balancer, with http and/or ajp connections
<Proxy balancer://cluster/>
       Order allow,deny
       Allow from all
       BalancerMember ajp://127.0.0.1:8009 route=gc1
       BalancerMember ajp://127.0.0.1:8010 route=gc2
  </Proxy>
{code}

The needed modules are: proxy_ajp.load, proxy_balancer.conf, proxy_balancer.load, proxy.conf, proxy_http.load, proxy.load, 
lbmethod_byrequests.load 

The version of Tomcat is 8.0.43. For 8.5.x MessageDispatch15Interceptor should be replaced with MessageDispatchInterceptor in server.xonf.
Also I've changed the receiver address to 127.0.0.1. 

[~waynegc] Please test my change with 7.7.0-SNAPSHOT and let me know if something is still broken!
Thank you very much for the discussion and analysis!","03/Jul/17 14:50;waynegc;Hello Martin,

sincere apologies for the amount of time its taken me to circle back to this, but we had some major releases that needed my attention. I'm very glad to say that your fixes have solved the replication issue at least in testing. I will get this moved to production, but the outcome looks great. Many many thanks for working on this. ","03/Jul/17 20:59;mgrigorov;Great news!
Just make sure you also use the fix for WICKET-6387 !","04/Jul/17 10:13;waynegc;Thanks Martin much appreciated for pointing that out. I think its best I wait then until the release of 7.8.0. Any idea/guess when that will go live?
","05/Jul/17 08:24;bitstorm;Hi all,

if there are no urgent issues to close I can start the release vote for 7.8.0 in the very next days.",,,,,,,,,,,,,,,,,,,,,,,,,
Documentation should reflect that Link and Form are now typed,WICKET-6395,13078116,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,eximius,eximius,07/Jun/17 21:00,03/Jul/17 15:37,13/Mar/19 23:18,03/Jul/17 15:37,,,,,,,,,,,,,guide,,,0,,,,,,,,"In [Guide|https://ci.apache.org/projects/wicket/guide/8.x/single.pdf]:
* in listings on pages: 85, 94, 107, 111, 115, 117, 119, 129, 144, 145, 146, 147, 159, 227, 291, 295, 297, 298: Form -> Form<SOME_TYPE>
* 126, 155, 161, 252: StatelessForm -> StatelessForm<SOME_TYPE>
* 14, 41, 46, 65, 67, 76, 251: Link -> Link<Void>
* 210, 211, 216, 224: AjaxLink -> AjaxLink<Void>
* 67, 251: BookmarkablePageLink -> BookmarkablePageLink<Void>

BTW: you still use ""Lambdas"" although you removed it in M6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-12 14:44:46.145,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jul 03 15:37:19 UTC 2017,,,,,,0|i3g05j:,9223372036854775807,,,,,,,,"12/Jun/17 14:44;jira-bot;Commit d6c0639989ef1110c20ed5d55a20438186b89b90 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d6c0639 ]

WICKET-6395 Documentation should reflect that Link and Form are now
typed","27/Jun/17 12:38;jira-bot;Commit 6ffc5be85309ef150c99a56a87d94e6e6448277b in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6ffc5be ]

WICKET-6395 removed reference to no longer existing factory method
Link#onClick
","27/Jun/17 13:54;jira-bot;Commit f51b4b5c43d0be9707a4462eb75fa5beee61ffd5 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f51b4b5 ]

WICKET-6395 removed reference to no more existing factory methods
for Ajax components and behaviors","27/Jun/17 14:25;jira-bot;Commit b8976c931afb02dc9e50070bf5cc8f41adb2b506 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b8976c9 ]

WICKET-6395 minor fixes to single.adoc",03/Jul/17 15:37;bitstorm;Removed all references to the hold Lambdas factory class.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Each path has to be pushed directly,WICKET-6406,13081674,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,klopfdreh,klopfdreh,klopfdreh,22/Jun/17 07:11,30/Jun/17 09:51,13/Mar/19 23:18,30/Jun/17 09:51,8.0.0-M6,,,,,,,,8.0.0-M7,,,,wicket-http2,,,0,,,,,,,,"Because the path is set as a class attribute to the push builder it has to be pushed directly, otherwise only the last path is pushed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-22 07:15:32.791,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jun 22 07:15:32 UTC 2017,,,,,,0|i3gl7z:,9223372036854775807,,,,,,,,"22/Jun/17 07:15;jira-bot;Commit f4edcd82b9f6ae5c31a0d4c468b0c6caa59fa674 in wicket's branch refs/heads/master from [~klopfdreh]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f4edcd8 ]

WICKET-6406

* Each path is pushed directly, now",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dequeuing of Border component with nested body fails,WICKET-6399,13079960,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,forchel,forchel,15/Jun/17 04:56,27/Jun/17 10:42,13/Mar/19 23:18,19/Jun/17 19:30,7.7.0,,,,,,,,6.27.0,7.8.0,8.0.0-M7,,wicket,,,0,,,,,,,,"Accessing a page with a Border component and a nested body a second time fails due to dequeuing problem. Find attached quickstarts (both with the same error) to reproduce the problem. First request to http://localhost:8080/test3.html succeeds while the second request to the same URL fails with the following WicketRuntimeException:

org.apache.wicket.WicketRuntimeException: Detach called on component with id 'layout' while it had a non-empty queue: ComponentQueue{queueSize=1, queue=[[BorderBodyContainer [Component id = layout_body]], null, null, null, null, null, null, null]}
	at org.apache.wicket.MarkupContainer.onDetach(MarkupContainer.java:1943)
	at org.apache.wicket.Component.detach(Component.java:1163)
	at org.apache.wicket.MarkupContainer.detachChildren(MarkupContainer.java:1761)
	at org.apache.wicket.Component.detach(Component.java:1187)
	at org.apache.wicket.MarkupContainer.detachChildren(MarkupContainer.java:1761)
	at org.apache.wicket.Component.detach(Component.java:1187)
	at org.apache.wicket.core.request.handler.PageProvider.detach(PageProvider.java:330)
	at org.apache.wicket.core.request.handler.RenderPageRequestHandler.detach(RenderPageRequestHandler.java:156)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.detach(RequestCycle.java:906)
	at org.apache.wicket.request.RequestHandlerStack.detach(RequestHandlerStack.java:180)
	at org.apache.wicket.request.cycle.RequestCycle.onDetach(RequestCycle.java:641)
	at org.apache.wicket.request.cycle.RequestCycle.detach(RequestCycle.java:594)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:297)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
	at org.eclipse.jetty.server.Server.handle(Server.java:499)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
	at java.lang.Thread.run(Thread.java:748)",,,,,,,,,,,,,,,,,,,,,,,,,15/Jun/17 04:43;forchel;myproject2.zip;https://issues.apache.org/jira/secure/attachment/12873059/myproject2.zip,15/Jun/17 04:43;forchel;testproject.zip;https://issues.apache.org/jira/secure/attachment/12873058/testproject.zip,16/Jun/17 12:40;forchel;testproject3.zip;https://issues.apache.org/jira/secure/attachment/12873280/testproject3.zip,,3.0,,,,,,,,,,,,,,,,,,,2017-06-15 08:32:21.663,,,no_permission,,,,Important,,,,,,,,9223372036854775807,,,Mon Jun 19 19:30:44 UTC 2017,,,,,,0|i3gao7:,9223372036854775807,,,,,,,,"15/Jun/17 08:32;bitstorm;hi [~forchel]

Since 7.7.0 border's body is queued to place it inside the right parent, so you should not explicitly add it like you do in DefaultLayout#createContentContainer:

{code}
...
content.add(getBodyContainer());
...
{code}

I will add a note in the JavaDoc about this.","15/Jun/17 10:12;forchel;Hi Andrea,
this fixes the problem. Thank you.","15/Jun/17 11:08;jira-bot;Commit c49b9d663501d99c2c891699be7111340fe17ebf in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c49b9d6 ]

WICKET-6399 added javadoc to remind that border body container shall
not be handled directly by hand
","15/Jun/17 13:05;jira-bot;Commit e1fb4afeeb7a76097081d4440d62433854d45fa4 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e1fb4af ]

WICKET-6399 added javadoc to remind that border body container shall
not be handled directly by hand
","16/Jun/17 05:27;forchel;After chaning the code in our project, I've got the following NullpointerException:

Root cause:

java.lang.NullPointerException
     at org.apache.wicket.markup.html.border.Border$BorderBodyContainer.newDequeueContext(Border.java:598)
     at org.apache.wicket.MarkupContainer.dequeue(MarkupContainer.java:1988)
     at org.apache.wicket.MarkupContainer.dequeueChild(MarkupContainer.java:2139)
     at org.apache.wicket.MarkupContainer.dequeue(MarkupContainer.java:2116)
     at org.apache.wicket.MarkupContainer.dequeueChildrenContainer(MarkupContainer.java:2181)
     at org.apache.wicket.MarkupContainer.dequeueChild(MarkupContainer.java:2148)
     at org.apache.wicket.MarkupContainer.dequeue(MarkupContainer.java:2116)
     at org.apache.wicket.MarkupContainer.dequeuePreamble(MarkupContainer.java:2064)
     at org.apache.wicket.MarkupContainer.dequeue(MarkupContainer.java:1989)
     at org.apache.wicket.markup.html.border.Border.onConfigure(Border.java:325)
     at org.apache.wicket.Component.configure(Component.java:1056)
     at org.apache.wicket.Component.internalBeforeRender(Component.java:941)
     at org.apache.wicket.Component.beforeRender(Component.java:1018)
     at org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1825)
     at org.apache.wicket.Component.onBeforeRender(Component.java:3916)
     at org.apache.wicket.Page.onBeforeRender(Page.java:801)
     at org.apache.wicket.Component.internalBeforeRender(Component.java:950)
     at org.apache.wicket.Component.beforeRender(Component.java:1018)
     at org.apache.wicket.Component.internalPrepareForRender(Component.java:2236)
     at org.apache.wicket.Page.internalPrepareForRender(Page.java:242)
     at org.apache.wicket.Component.render(Component.java:2325)
     at org.apache.wicket.Page.renderPage(Page.java:1018)
     at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124)
     at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:195)
     at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
     at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
     at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
     at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
     at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
     at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
     at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
     at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
     at org.apache.wicket.protocol.http.WicketServlet.doGet(WicketServlet.java:137)
     at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)
     at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)
     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)

Could probably easy fixed with a null check:

@Override
public DequeueContext newDequeueContext()
{
	Border border = findParent(Border.class);
	IMarkupFragment fragment = border.getMarkup();
	if (fragment == null)
	{
		return null;
	}

	return new DequeueContext(fragment, this, true);
}","16/Jun/17 05:46;forchel;After fixing the NullPointerException with our own subclass another dequeuing error came up:

org.apache.wicket.WicketRuntimeException: Detach called on component with id 'layoutContainer' while it had a non-empty queue: ComponentQueue{queueSize=1, queue=[[BorderBodyContainer [Component id = layoutContainer_body]], null, null, null, null, null, null, null]}
	org.apache.wicket.MarkupContainer.onDetach(MarkupContainer.java:1943)
	org.apache.wicket.Component.detach(Component.java:1163)
	org.apache.wicket.MarkupContainer.detachChildren(MarkupContainer.java:1761)
	org.apache.wicket.Component.detach(Component.java:1187)
	org.apache.wicket.core.request.handler.PageProvider.detach(PageProvider.java:330)
	org.apache.wicket.core.request.handler.RenderPageRequestHandler.detach(RenderPageRequestHandler.java:156)
	org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.detach(RequestCycle.java:906)
	org.apache.wicket.request.RequestHandlerStack.detach(RequestHandlerStack.java:180)
	org.apache.wicket.request.cycle.RequestCycle.onDetach(RequestCycle.java:641)
	org.apache.wicket.request.cycle.RequestCycle.detach(RequestCycle.java:594)
	org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:297)
	org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	org.apache.wicket.protocol.http.WicketServlet.doGet(WicketServlet.java:137)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:622)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:729)","16/Jun/17 08:28;bitstorm;Hi,

how do you get NullpointerException after you've changed your code? Can you reproduce it in a quickstart?","16/Jun/17 11:46;forchel;I'll try it but not the next few hours.
We're running two Wicket Applications with the same Border/Layout structure within the same Web application. With one of them it seems to work, with the other Wicket Application unfortunately not. The only difference I can see at first glance is a TransparentWebMarkupContainer added. But I've to figure it out.","16/Jun/17 12:38;forchel;Attached you can find a quickstart (testproject3.zip) which demonstrates the problem. 
As I assumed in my previous comment, there is an additional TransparentWebMarkupContainer with id ""main"" added to the DefaultLayout component which causes the problem. 
See DefaultLayout.html and DefaultLayout.java.
",16/Jun/17 13:04;bitstorm;[~forchel] thank you for the quick reply!,"19/Jun/17 14:21;jira-bot;Commit 13fa9f8ffa9e4c8b4b76d730e0b602e1ee2ab1ed in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=13fa9f8 ]

WICKET-6399 Dequeuing of Border component with nested body fails","19/Jun/17 15:38;jira-bot;Commit ea7e36b17e3f1a3c10cd1f691d4a94ee236321f5 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ea7e36b ]

WICKET-6399 Dequeuing of Border component with nested body fails",19/Jun/17 19:30;bitstorm;TransparentWebMarkupContainer has been improved for component queuing.,,,,,,,,,,,,,,,,,,,,,,,
Object with array property fails on NPE when construction JSON object,WICKET-6400,13080324,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,davesman,davesman,16/Jun/17 06:21,24/Jun/17 06:25,13/Mar/19 23:18,22/Jun/17 19:51,7.7.0,,,,,,,,6.27.0,7.8.0,8.0.0-M7,,wicket,,,0,json,open-json,,,,,,"If we have an Object (POJO) that includes array(s), it fails on java.lang.NullPointerException when I pass it as an argument to the JSONObject constructor.
The cause is that JSONArray cannot be included in tje JSONObject anymore because of absence of some readMethods (it fails on NPE at line 234 in JSONObject). I assume this is caused by switching to open-json.
Simpliest example:

{code:java}
    public static void main(final String[] args) {
        final JSONArray array = new JSONArray(new Object[] { 1, 2, 3 });
        new JSONObject(array);
    }
{code}

fails on:

{noformat}
Exception in thread ""main"" java.lang.NullPointerException
	at org.apache.wicket.ajax.json.JSONObject.propertiesAsMap(JSONObject.java:234)
	at org.apache.wicket.ajax.json.JSONObject.<init>(JSONObject.java:225)
	at cz.kb.dcs.module_frontend_base.components.graph.renderer.GraphRendererJSONUtils.main(GraphRendererJSONUtils.java:53)
{noformat}
","Windows 8.1 64-bit, JDK8_121, Wicket 7.7.0, Jetty 9 / WebSphere 9",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-19 19:33:59.854,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Jun 24 06:25:28 UTC 2017,,,,,,0|i3gcx3:,9223372036854775807,,,,,,,,19/Jun/17 19:33;mgrigorov;I've created https://github.com/openjson/openjson/issues/9,"22/Jun/17 19:44;mgrigorov;As discussed at https://github.com/openjson/openjson/issues/9 the fix will behave as JSON.org, i.e. it will produce an empty object.","22/Jun/17 19:50;jira-bot;Commit a4188f483404bc3d0ba55ca5553968c2610dcfdd in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a4188f4 ]

WICKET-6400 Object with array property fails on NPE when construction JSON object
","22/Jun/17 19:51;jira-bot;Commit d9c05b460755a2a8b0519806647ec7e031f2a8a5 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d9c05b4 ]

WICKET-6400 Object with array property fails on NPE when construction JSON object
","24/Jun/17 06:25;jira-bot;Commit 573fdf5739fb8a82223b54d551c343687b3aab35 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=573fdf5 ]

WICKET-6400 Object with array property fails on NPE when construction JSON object
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Session should use #getSessionStore() instead of 'sessionStore',WICKET-6409,13081882,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,22/Jun/17 19:29,22/Jun/17 19:35,13/Mar/19 23:18,22/Jun/17 19:35,6.26.0,,,,,,,,6.27.0,,,,wicket,,,0,,,,,,,,"From https://github.com/apache/wicket/pull/222:

Wicket 6.x fails Session.invalidateNow() after deserialisation (For example, when using Oracle Coherence).
Session.destroy() uses sessionStore. But it is null after deserialisation because sessionStore is transient.",,,,,,,,,,,,,,,,,WICKET-6153,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-22 19:30:25.035,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jun 22 19:35:35 UTC 2017,,,,,,0|i3gmi7:,9223372036854775807,,,,,,,,22/Jun/17 19:30;mgrigorov;This is fixed in 7.x and 8.x with WICKET-6153.,"22/Jun/17 19:30;githubbot;Github user martin-g commented on the issue:

    https://github.com/apache/wicket/pull/222
  
    https://issues.apache.org/jira/browse/WICKET-6409
",22/Jun/17 19:35;mgrigorov;PR merged!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Changing model object of Panel added to a Border not allowed,WICKET-6306,13035137,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,forchel,forchel,16/Jan/17 07:51,15/Jun/17 04:59,13/Mar/19 23:18,17/Jan/17 12:27,7.5.0,7.6.0,,,,,,,7.7.0,8.0.0-M4,,,wicket,,,0,,,,,,,,"It is not allowed to change the model object of a panel added to a border component (see attachment). 
The quickstart demonstrates the problem. Here you can find 3 test pages all with a TextField and a Panel with a TextField. For each component, the model object is set at the onConfigure method. At the first page both components are added to the page itself. At the second page both components are added to the border body container of a Border component. At the third page both components are added to a ""Layout"" container (a Border component too). The third page is not rendered with Wicket 7.5.0 (see stacktrace).
It was working for Wicket 7.4.0

org.apache.wicket.WicketRuntimeException: Cannot modify component hierarchy after render phase has started (page version cant change then anymore)
     at org.apache.wicket.Component.checkHierarchyChange(Component.java:3674)
     at org.apache.wicket.Page.dirty(Page.java:271)
     at org.apache.wicket.markup.html.WebPage.dirty(WebPage.java:332)
     at org.apache.wicket.Page.dirty(Page.java:250)
     at org.apache.wicket.Page.componentModelChanging(Page.java:904)
     at org.apache.wicket.Component.modelChanging(Component.java:2230)
     at org.apache.wicket.Component.setDefaultModelObject(Component.java:3133)
     at org.apache.wicket.markup.html.form.FormComponent.setModelObject(FormComponent.java:1579)
     at com.mycompany.front.wicket.components.TestPanel.onConfigure(TestPanel.java:30)
",,,,,,,,,,,,,,,,,WICKET-6399,WICKET-6216,,,,,,,16/Jan/17 07:51;forchel;testproject.zip;https://issues.apache.org/jira/secure/attachment/12847587/testproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-01-17 15:30:20.138,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 18 06:15:46 UTC 2017,,,,,,0|i38qyn:,9223372036854775807,,,,,,,,"17/Jan/17 15:30;bitstorm;Hi [~forchel],

last snapshots should solve the problems with border and nested components.","18/Jan/17 06:15;forchel;Ciao Andrea,
I'll wait till the next official release (Wicket 7.7.0).
 Dirk",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
renderHead method of a Behavior added to a Border body is not called,WICKET-6303,13033768,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,forchel,forchel,11/Jan/17 15:59,15/Jun/17 04:59,13/Mar/19 23:18,17/Jan/17 12:27,7.5.0,7.6.0,,,,,,,7.7.0,8.0.0-M4,,,wicket,,,0,,,,,,,,"The renderHead method of a Behavior added to a Border body is not called, which means, all added HeaderItems (e.g. JavaScriptHeaderItem, OnDomReadyHeaderItem) are not called.
See quickstart to reproduce the error (was working with Wicket 7.4.0)

Refers to https://issues.apache.org/jira/browse/WICKET-6185",,,,,,,,,,,,,WICKET-6306,,,,WICKET-6399,WICKET-6374,WICKET-6185,,,,,,11/Jan/17 15:59;forchel;myproject2.zip;https://issues.apache.org/jira/secure/attachment/12846857/myproject2.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-01-16 11:39:49.204,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jan 17 11:58:38 UTC 2017,,,,,,0|i38kan:,9223372036854775807,,,,,,,,"16/Jan/17 11:39;jira-bot;Commit 06a0f4a9a73c7d5b6d50a88a0d8003557a460f83 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=06a0f4a ]

WICKET-6303 renderHead method of a Behavior added to a Border body is
not called","16/Jan/17 14:10;jira-bot;Commit 1bf8ca049f917f0ffa56da90ad71dda1339ab5e8 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1bf8ca0 ]

WICKET-6303 we don't need to explicitly set border's body parent","16/Jan/17 21:43;jira-bot;Commit 954750ce1bf7bcee321c9d2a35e278eace8fca85 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=954750c ]

WICKET-6303 added test case","17/Jan/17 11:25;jira-bot;Commit 321ccb814413cdc6cbbce7b3cdf24bc49e028aac in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=321ccb8 ]

WICKET-6303 renderHead method of a Behavior added to a Border body is not called
","17/Jan/17 11:58;jira-bot;Commit 520da509fe6ac4a9a8012eebb3bc1dafcf2a20cb in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=520da50 ]

WICKET-6303 fixed test case code",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Copy only the provided attributes for Ajax link inclusion,WICKET-6204,12990160,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,17/Jul/16 06:44,14/Jun/17 13:27,13/Mar/19 23:18,17/Jul/16 06:48,6.23.0,7.3.0,8.0.0-M1,,,,,,6.24.0,7.4.0,8.0.0-M2,,wicket,,,0,,,,,,,,"See http://markmail.org/message/b7v6x7jgldg7jhcm

Wicket should copy only the available attributes of <link> elements when they are being added in an Ajax request. Nothing more, nothing less.",,,,,,,,,,,,,,,,,,,,,WICKET-6398,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-17 06:46:44.833,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jun 14 13:27:11 UTC 2017,,,,,,0|i313hr:,9223372036854775807,,,,,,,,"17/Jul/16 06:46;jira-bot;Commit d38181d8af04d3eca1fef0ddcca6ad207689b445 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d38181d ]

WICKET-6204 Copy only the available link attributes in Ajax response

Fixes #173
","17/Jul/16 06:47;jira-bot;Commit 0591fff2be6521186e5d347764061f168b305928 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0591fff ]

WICKET-6204 Copy only the available link attributes in Ajax response

Fixes #173
","17/Jul/16 06:51;jira-bot;Commit 0fcdbf4f8bb4fe5dc78eac9876db609c11114c85 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0fcdbf4 ]

WICKET-6204 Copy only the available link attributes in Ajax response

Fixes #173
","08/Jun/17 08:47;githubbot;GitHub user Jezza opened a pull request:

    https://github.com/apache/wicket/pull/221

    Improve jQuery.noConflict() support.

    The fix that was introduced with the fix for WICKET-6204 fails to work with jQuery.noConflict().

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Jezza/wicket master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/221.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #221
    
----
commit 98b1073090ab16df64eaa9ddffeba7489818a8be
Author: Jezza <jezzadabomb@gmail.com>
Date:   2017-06-08T08:47:26Z

    Improve jQuery.noConflict() support.
    
    The fix that was introduced with the fix for WICKET-6204 fails to work with jQuery.noConflict().

----
","08/Jun/17 10:30;githubbot;Github user Jezza closed the pull request at:

    https://github.com/apache/wicket/pull/221
","08/Jun/17 11:00;githubbot;GitHub user Jezza reopened a pull request:

    https://github.com/apache/wicket/pull/221

    Improve jQuery.noConflict() support.

    The fix that was introduced for WICKET-6204 fails to work with jQuery.noConflict().

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Jezza/wicket master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/221.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #221
    
----
commit 98b1073090ab16df64eaa9ddffeba7489818a8be
Author: Jezza <jezzadabomb@gmail.com>
Date:   2017-06-08T08:47:26Z

    Improve jQuery.noConflict() support.
    
    The fix that was introduced with the fix for WICKET-6204 fails to work with jQuery.noConflict().

----
","14/Jun/17 12:43;jira-bot;Commit 14df2481619f1eada305832f5726ea657c720b64 in wicket's branch refs/heads/master from [~Jezza]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=14df248 ]

Improve jQuery.noConflict() support.

The fix that was introduced with the fix for WICKET-6204 fails to work with jQuery.noConflict().
(cherry picked from commit 98b1073090ab16df64eaa9ddffeba7489818a8be)
","14/Jun/17 12:44;jira-bot;Commit fb9db2f9cc14d9e14daee4c92dcfad2a05d0fc7b in wicket's branch refs/heads/wicket-7.x from [~Jezza]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fb9db2f ]

Improve jQuery.noConflict() support.

The fix that was introduced with the fix for WICKET-6204 fails to work with jQuery.noConflict().
(cherry picked from commit 98b1073090ab16df64eaa9ddffeba7489818a8be)

(cherry picked from commit 451ae250f4c9dce8900eb1b1854e22fca9d0570c)
","14/Jun/17 12:45;jira-bot;Commit 75a4fdcbab199da9a499059ae5445c989596de7d in wicket's branch refs/heads/wicket-6.x from [~Jezza]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=75a4fdc ]

Improve jQuery.noConflict() support.

The fix that was introduced with the fix for WICKET-6204 fails to work with jQuery.noConflict().
(cherry picked from commit 98b1073090ab16df64eaa9ddffeba7489818a8be)

(cherry picked from commit 451ae250f4c9dce8900eb1b1854e22fca9d0570c)
","14/Jun/17 13:27;githubbot;Github user Jezza closed the pull request at:

    https://github.com/apache/wicket/pull/221
",,,,,,,,,,,,,,,,,,,,,,,,,,
WICKET-6204 breaks jQuery.noConflict(),WICKET-6398,13079752,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,14/Jun/17 12:39,14/Jun/17 12:48,13/Mar/19 23:18,14/Jun/17 12:46,6.26.0,7.7.0,8.0.0-M6,,,,,,6.27.0,7.8.0,8.0.0-M7,,wicket,,,0,,,,,,,,"Wicket JS code should not use ""$"", but ""jQuery"".

Pull Request: https://github.com/apache/wicket/pull/221",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-14 12:40:19.528,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jun 14 12:47:08 UTC 2017,,,,,,0|i3g9e7:,9223372036854775807,,,,,,,,"14/Jun/17 12:40;githubbot;Github user martin-g commented on the issue:

    https://github.com/apache/wicket/pull/221
  
    I've created https://issues.apache.org/jira/browse/WICKET-6398 for the changelog.
","14/Jun/17 12:47;githubbot;Github user martin-g commented on the issue:

    https://github.com/apache/wicket/pull/221
  
    The fix has been applied with https://issues.apache.org/jira/browse/WICKET-6398.
    @Jezza Please close this PR! Thank you !
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NestedStringResourceLoader ignores hard-coded default values and throws MissingResourceException,WICKET-6393,13077672,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,rec,rec,06/Jun/17 13:22,13/Jun/17 19:36,13/Mar/19 23:18,13/Jun/17 19:36,7.7.0,,,,,,,,7.8.0,8.0.0-M7,,,wicket,,,0,,,,,,,,"The NestedStringResourceLoader ignores hard-coded default values and throws a MissingResourceException.

Consider FormComponen.getString()

{noformat}
		private String getString(Localizer localizer, String key, Component component)
		{
			triedKeys.add(key);

			// Note: It is important that the default value of """" is
			// provided to getString() not to throw a MissingResourceException or to
			// return a default string like ""[Warning: String ...""
			return localizer.getString(key, component, """");
		}
{noformat}

The default value provided here actually gets lost in the call hierarchy in `Localizer.getString()` (line 232). That seems to be ok because the code there seems to expect that any code it calls will not take into account the `ThrowExceptionOnMissingResource` setting (at least that is what I infer from the method name `getStringIgnoreSettings`. However, again further down the hierarchy, `NestedStringResourceLoader.handleMissingKey()` (line 166) is called which throws a MissingResourceException and defies the default-value handling code in `Localizer.getString()`.

Here is a stack trace:

{noformat}
NestedStringResourceLoader.handleMissingKey(String, Locale, String, Component, String) line: 186	
NestedStringResourceLoader.loadNestedStringResource(Object, String, Locale, String, String) line: 130	
NestedStringResourceLoader.loadStringResource(Component, String, Locale, String, String) line: 79	
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 397	
Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 232	
Localizer.getString(String, Component, IModel<?>, Locale, String, String) line: 201	
Localizer.getString(String, Component, String) line: 150	
FormComponent$MessageSource.getString(Localizer, String, Component) line: 201	
FormComponent$MessageSource.getMessage(String, Map<String,Object>) line: 138	
ValidationError.getErrorMessage(IErrorMessageSource) line: 230	
TextField<T>(FormComponent<T>).error(IValidationError) line: 657	
TextField<T>(FormComponent<T>).reportRequiredError() line: 1488	
TextField<T>(FormComponent<T>).validateRequired() line: 1479	
TextField<T>(FormComponent<T>).validate() line: 1127	
...
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-13 19:15:54.21,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jun 13 19:35:54 UTC 2017,,,,,,0|i3fxev:,9223372036854775807,,,,,,,,"13/Jun/17 19:15;mgrigorov;The only way to fix this is to change the API of org.apache.wicket.resource.loader.IStringResourceLoader#loadStringResource(org.apache.wicket.Component, java.lang.String, java.util.Locale, java.lang.String, java.lang.String) in Wicket 8.x. We should add IModel<String> for the default value.
Maybe even to both methods in this class.

@devs: What do you think ? ",13/Jun/17 19:20;rec;It wouldn't be an option to catch the exception in getStringIgnoreSettings and return null?,13/Jun/17 19:26;mgrigorov;We can remove `handleMissingKey()` altogether and return `null` but then the end result would be something like `Some text #(missingKey)`. Only NestedStringResourceLoader knows how to deal with the placeholders.,"13/Jun/17 19:27;mgrigorov;Actually you may be right!
If any key is missing then return `null` and let the default value be used.
This sounds good! ","13/Jun/17 19:35;jira-bot;Commit 28d4a4bbbca60d2b3011cb61475af863613d62ba in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=28d4a4b ]

WICKET-6393 NestedStringResourceLoader ignores hard-coded default values and throws MissingResourceException

Return null is any of the placeholders cannot resolve its value. This way the provided defaultValue will be used.
","13/Jun/17 19:35;jira-bot;Commit 820431ecd7ac6a21dcfef32ffb1f322bfb42902b in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=820431e ]

WICKET-6393 NestedStringResourceLoader ignores hard-coded default values and throws MissingResourceException

Return null is any of the placeholders cannot resolve its value. This way the provided defaultValue will be used.

(cherry picked from commit 28d4a4bbbca60d2b3011cb61475af863613d62ba)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Autocomplete race condition makes page unresponsive,WICKET-6366,13069962,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,perhuss,perhuss,08/May/17 11:20,08/Jun/17 11:39,13/Mar/19 23:18,05/Jun/17 12:41,6.26.0,7.6.0,8.0.0-M6,,,,,,6.27.0,7.8.0,8.0.0-M7,,wicket-extensions,,,0,,,,,,,,"The autocomplete field can throw a javascript exception that makes the page unresponsive.

To reproduce, run attached quickstart and:
1. Click the text field and type ""a""
2. Quickly click the ""hide"" button, and
3. Quickly click the text field again and type another ""a"", leaving the text field focused.
4. A couple of javascript exceptions will be thrown, where the first on seems to break the ajax functionality. Clicking ""show"" has no effect now.

Attaching quickstart and screenshot of the exceptions.",Reproduced both with latest Firefox (53.0.2) and latest Chrome (58.0.3029.96),,,,,,,,,,,,,,,,,,,,,,,,08/May/17 11:20;perhuss;autocomplete.zip;https://issues.apache.org/jira/secure/attachment/12866878/autocomplete.zip,08/May/17 11:20;perhuss;exceptions.png;https://issues.apache.org/jira/secure/attachment/12866879/exceptions.png,,,2.0,,,,,,,,,,,,,,,,,,,2017-05-08 12:34:32.57,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jun 08 11:39:29 UTC 2017,,,,,,0|i3emof:,9223372036854775807,,,,,,,,"08/May/17 12:34;githubbot;GitHub user perhuss opened a pull request:

    https://github.com/apache/wicket/pull/220

    WICKET-6366: Autocomplete race condition makes page unresponsive

    Fixed bug.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/perhuss/wicket wicket-7.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/220.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #220
    
----
commit c722e0a136583fb6a05475bd4dd492e2cebe4440
Author: phuss <per.huss@foxt.com>
Date:   2017-05-08T12:31:17Z

    WICKET-6366: Autocomplete race condition makes page unresponsive

----
",08/May/17 12:36;perhuss;Submitted pull request: https://github.com/apache/wicket/pull/220,"31/May/17 07:14;perhuss;[~mgrigorov]/[~svenmeier]: Can you please have a quick look at this issue? The problem is causing regular but intermittent failures of our automated selenium suite. The issue should be fully reproducible with the quickstart, and you could probably quickly tell whether the suggested fix is at the right place or not... It would make me very happy if this fix could make the next minor release... Thanks!",03/Jun/17 09:56;svenmeier;I was able to reproduce the problem.,"05/Jun/17 12:21;jira-bot;Commit d0aab20850f8cfefe4aedbac52d84a0a90005a7c in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d0aab20 ]

WICKET-6366 check input still on page

this closes #220
","05/Jun/17 12:24;jira-bot;Commit d89357404bbef4ed7b5bd8400136ad34512f7ff5 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d893574 ]

WICKET-6366 check input still on page

this closes #220
","05/Jun/17 12:24;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/220
","05/Jun/17 12:25;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/220
  
    Thanks!
","05/Jun/17 12:40;jira-bot;Commit f3c24616127eee055f233fa81af6148da9478fd2 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f3c2461 ]

WICKET-6366 check input still on page

this closes #220
",05/Jun/17 12:41;svenmeier;Added checks whether input is still on page.,08/Jun/17 11:39;perhuss;Thank you [~svenmeier]!,,,,,,,,,,,,,,,,,,,,,,,,,
Simplification of the code in WICKET-3347 is not consistent with previous behavior,WICKET-6386,13076175,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,davesman,davesman,31/May/17 12:26,07/Jun/17 18:07,13/Mar/19 23:18,07/Jun/17 18:07,7.7.0,8.0.0-M6,,,,,,,7.8.0,8.0.0-M7,,,wicket,,,0,easyfix,,,,,,,"After upgrading from 6.24.0 to 7.6.0 and to 7.7.0 (affects both) I noticed that the newly introduced method org.apache.wicket.request.handler.render.WebPageRenderer#shouldRenderPageAndWriteResponse doesn't return the same boolen value as the expression before.

The cause is the part *notNewAndNotStatelessPage(isNewPageInstance(), isPageStateless())* - both function arguments get evaluated and the call to isPageStateless() calls getPage().
This wasn't the case with *getPageProvider().isNewPageInstance() && !getPage()..isPageStateless()* because the first condition could be false and terminate the evaluation.

I think this ""new"" behavior wasn't intended because *getPage()* is explicitly called on line 231 (after conditions are evaluated) to force the page creation.

My problem is that even normally I would end with *shouldRedirectToTargetUrl* beeing true and redirectTo would be called, the *getPage()* call in the first condition causes another redirect is called (in my page constructor in some conditions) and I end with end-less loop and stack overflow.

I have an workaround with my custom WebPageRenderer and its provider, but I still think this is a bug.
Question is if reverting this back would not cause problem with others' people project because they can expect this ""new"" behavior.","Windows 8.1 64-bit, Oracle JDK 1.8.0_121, Jetty 9",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-06 20:28:56.475,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jun 07 18:07:20 UTC 2017,,,,,,0|i3foyn:,9223372036854775807,,,,,,,,"06/Jun/17 20:28;svenmeier;This is one of the scariest code parts of Wicket, so kudos for tracing this down.

I'm clearly in favor of following the single most important rule I know about WebPageRenderer: create the page as late as possible.

I'll investigate further and would propose to revert to the previous handling, i.e. call isPageStateless() lazily as you have suggested,","07/Jun/17 18:06;jira-bot;Commit 3fd9c9836e5035ed18b75d31e589b6aeac1740e4 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3fd9c98 ]

WICKET-6386 don't call isPageStateless() prematurely
","07/Jun/17 18:06;jira-bot;Commit 3484629946341cdfca9bb0467ab54af7accc95ea in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3484629 ]

WICKET-6386 don't call isPageStateless() prematurely
",07/Jun/17 18:07;svenmeier;Restored the former lazy evaluation.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Autolinking breaks hierarchy for nested elements,WICKET-6377,13074954,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,,Claudia Hirt,Claudia Hirt,25/May/17 19:33,26/May/17 10:29,13/Mar/19 23:18,26/May/17 10:29,7.6.0,8.0.0-M6,,,,,,,7.8.0,8.0.0-M7,,,,,,0,,,,,,,,"The problem appears with the following HTML-code:

{code:xml}
<a href=""#top"">
    <span wicket:id=""top""></span>
</a>
{code}

with autolinking set to true like this:
getMarkupSettings().setAutomaticLinking(true)

This leads to the following exception:
org.apache.wicket.markup.MarkupException: Unable to find component with id 'top' in [WebMarkupContainer [Component id = _autolink_-335431082]] Expected: '_autolink_-335431082:top'.

This happens since the the fix of WICKET-6289. The bugfix in this issue was to create a WebMarkupContainer as default autocomponent. It was and ExternalLink before, which didn't cause any trouble in this case.
But is it really correct that AutoLinkResolver even tries to replace an anchor link?

I also created a quickstart project to reproduce the problem:
https://github.com/sunshineKE/test.autolinking
",,,,,,,,,,,,,,,,,WICKET-6289,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-25 20:27:38.075,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri May 26 09:55:23 UTC 2017,,,,,,0|i3fhfb:,9223372036854775807,,,,,,,,"25/May/17 20:27;jira-bot;Commit 86b3abad1fa2813c80c0c3fa73c4248cc4033301 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=86b3aba ]

WICKET-6377 Autolinking breaks hierarchy for nested elements","26/May/17 09:55;jira-bot;Commit 35aacc4ef10d473c97155470cd4d55aa19b9f4c2 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=35aacc4 ]

WICKET-6377 Autolinking breaks hierarchy for nested elements",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Autolinking adds onclick attribute to <img> tags,WICKET-6289,13023394,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,cmenzel,cmenzel,cmenzel,25/Nov/16 13:10,25/May/17 19:54,13/Mar/19 23:18,06/Dec/16 13:22,1.5.17,6.25.0,7.4.0,8.0.0-M2,,,,,7.6.0,8.0.0-M3,,,,,,0,,,,,,,,"When the autolinker can't find the target of a src or href attribute, it falls back to a default autocomponent, that supposedly leaves the tag unchanged. Quoting AutolinkResolver:

{code}
if (autoComponent == null)
{
	// resolving didn't have the desired result or there was no delegate
	// found; fallback on the default resolving which is a simple
	// component that leaves the tag unchanged
	autoComponent = new AutolinkExternalLink(componentId, pathInfo.reference);
}
{code}

...except that AutolinkExternalLink is an ExternalLink which is an AbstractLink which does change the original tag. Namely, when applied to something that is not <a> it adds an onclick attribute. This leads to something like the following:

{code}
<img src=""does-not-exist.png"" onclick=""window.location.href=&#039;does-not-exist.png&#039;;return false;""/>
{code}

...which is clearly nonsensical. This can happen when the referenced image is not in the classpath - it could either be missing, or it could be in the webapp root somewhere, which can be the case for some legacy applications. (This is how I came across this.)

A simple fix appears to be to use a plain WebMarkupContainer in place of this particular AutolinkExternalLink. All tests pass when I do that.

This affects all versions from 1.5 on upward. I'll prepare a pull request.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-11-25 15:06:05.268,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Mar 21 09:42:26 UTC 2017,,,,,,0|i36sb3:,9223372036854775807,,,,,,,,"25/Nov/16 15:06;githubbot;GitHub user duesenklipper opened a pull request:

    https://github.com/apache/wicket/pull/196

    WICKET-6289 fix autolinker so it does not generate an onclick attribu…

    …te for img tags

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/duesenklipper/wicket wicket-8.x/WICKET-6289-autolinker-onclick-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/196.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #196
    
----
commit ba0f578f53b158ff375e7de6dd7097c7ff93ac79
Author: Carl-Eric Menzel <cmenzel@apache.org>
Date:   2016-11-25T14:16:31Z

    WICKET-6289 fix autolinker so it does not generate an onclick attribute for img tags

----
","25/Nov/16 15:08;githubbot;GitHub user duesenklipper opened a pull request:

    https://github.com/apache/wicket/pull/197

    WICKET-6289 fix autolinker so it does not generate an onclick attribu…

    …te for img tags

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/duesenklipper/wicket wicket-7/WICKET-6289-autolinker-onclick-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/197.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #197
    
----
commit 522a1b5a87f1d89fad961c0561391d2b4bb59ac8
Author: Carl-Eric Menzel <cmenzel@apache.org>
Date:   2016-11-25T14:16:31Z

    WICKET-6289 fix autolinker so it does not generate an onclick attribute for img tags

----
","25/Nov/16 15:09;githubbot;GitHub user duesenklipper opened a pull request:

    https://github.com/apache/wicket/pull/198

    WICKET-6289 fix autolinker so it does not generate an onclick attribu…

    …te for img tags

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/duesenklipper/wicket wicket-6/WICKET-6289-autolinker-onclick-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/198.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #198
    
----
commit c22e46c8fd6caa9e7697320700062c4f52663551
Author: Carl-Eric Menzel <cmenzel@apache.org>
Date:   2016-11-25T14:16:31Z

    WICKET-6289 fix autolinker so it does not generate an onclick attribute for img tags

----
","25/Nov/16 15:09;githubbot;GitHub user duesenklipper opened a pull request:

    https://github.com/apache/wicket/pull/199

    WICKET-6289 fix autolinker so it does not generate an onclick attribu…

    …te for img tags

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/duesenklipper/wicket wicket-1.5/WICKET-6289-autolinker-onclick-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/199.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #199
    
----
commit 88a8092cb324df29cdc639029c31f851ed7291b3
Author: Carl-Eric Menzel <cmenzel@apache.org>
Date:   2016-11-25T14:16:31Z

    WICKET-6289 fix autolinker so it does not generate an onclick attribute for img tags

----
","25/Nov/16 16:56;githubbot;Github user martin-g commented on the issue:

    https://github.com/apache/wicket/pull/199
  
    Is it really needed for 1.5.x ?
    This branch is for security fixes only.
","25/Nov/16 19:57;githubbot;Github user martin-g commented on the issue:

    https://github.com/apache/wicket/pull/196
  
    Looks good!
","27/Nov/16 16:04;githubbot;Github user duesenklipper commented on the issue:

    https://github.com/apache/wicket/pull/199
  
    It's not really needed for 1.5, no. I just first came across it in 1.5 while helping a customer migrate a whole bunch of applications from 1.4 - currently on the way to 7.x. I don't mind this not getting in, it would simply be convenient for this.
","27/Nov/16 16:23;jira-bot;Commit ba0f578f53b158ff375e7de6dd7097c7ff93ac79 in wicket's branch refs/heads/master from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ba0f578 ]

WICKET-6289 fix autolinker so it does not generate an onclick attribute for img tags
","27/Nov/16 16:23;jira-bot;Commit 73cc4010818515cf11024906021cf7fa0abd778e in wicket's branch refs/heads/master from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=73cc401 ]

WICKET-6289 fix autolinker so it does not generate an onclick attribute for img tags
","27/Nov/16 16:24;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/196
","27/Nov/16 16:38;jira-bot;Commit 522a1b5a87f1d89fad961c0561391d2b4bb59ac8 in wicket's branch refs/heads/wicket-7.x from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=522a1b5 ]

WICKET-6289 fix autolinker so it does not generate an onclick attribute for img tags
","27/Nov/16 16:38;jira-bot;Commit 95d64446ad3b074382456d55aafd960d867463fe in wicket's branch refs/heads/wicket-7.x from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=95d6444 ]

WICKET-6289 fix autolinker so it does not generate an onclick attribute for img tags
","27/Nov/16 16:38;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/197
","27/Nov/16 16:48;jira-bot;Commit c22e46c8fd6caa9e7697320700062c4f52663551 in wicket's branch refs/heads/wicket-6.x from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c22e46c ]

WICKET-6289 fix autolinker so it does not generate an onclick attribute for img tags
","27/Nov/16 16:48;jira-bot;Commit ac369b16ef5ea10c2e6c1061c6cb3f95bc347223 in wicket's branch refs/heads/wicket-6.x from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ac369b1 ]

WICKET-6289 fix autolinker so it does not generate an onclick attribute for img tags
","27/Nov/16 16:48;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/198
","06/Dec/16 13:22;cmenzel;pull requests are merged for 6, 7 and 8","31/Jan/17 22:38;githubbot;Github user martin-g commented on the issue:

    https://github.com/apache/wicket/pull/199
  
    @duesenklipper Please close this PR! Thanks!
","20/Mar/17 21:46;githubbot;Github user martin-g commented on the issue:

    https://github.com/apache/wicket/pull/199
  
    @duesenklipper Ping!
","21/Mar/17 09:42;githubbot;Github user duesenklipper closed the pull request at:

    https://github.com/apache/wicket/pull/199
",,,,,,,,,,,,,,,,
UserGuide bugs/improvements,WICKET-6367,13070591,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,eximius,eximius,09/May/17 20:59,22/May/17 14:56,13/Mar/19 23:18,22/May/17 14:56,,,,,,,,,,,,,guide,,,0,,,,,,,,"While reading [this|https://ci.apache.org/projects/wicket/guide/8.x/single.pdf] guide I found potential bugs/problems/improvements.

Notice: all page numbers referr to the page number in page footer, not in PDF reader

* 30: {quote}//wrap disabled links with <b> tag{quote}
is copied from other listing and should be removed 

* 56, 140, 311: all
{quote}""*""{quote}
should be in separate lines
* 64: {quote}quiet{quote} -> {quote}quite{quote}
* 79: {quote}for example '<' becomes '< '{quote} -> {quote}for example '<' becomes '&amp;lt;'{quote}
* 81 and 85: LambdaModel should be also mentioned along with PropertyModel and CompoundPropertyModel
* 86: {quote}process1{quote} -> {quote}process{quote}
* 96: shouldn't be super.onDetach(); called at the end of the method?
* 98: {quote}pass row objects{quote} ->  {quote}pass raw objects{quote}, {quote}passing row objects{quote} ->  {quote}passing raw objects{quote}, {quote}Using models{quote} -> {quote}By using models{quote}
* 102: {quote}local-part\_domain{quote} -> {quote}local-part@domain{quote}, {quote}bigger than a lower bound{quote} -> {quote}greater than a lower bound{quote}, {quote}smaller than a upper bound{quote} -> {quote}less than a upper bound{quote}
* 107: instead saying that: {quote}As a consequence, we had to build a custom filter{quote} and later {quote}Since version 6.13.0 Wicket provides the additional filter class
org.apache.wicket.feedback.ExactLevelFeedbackMessageFilter{quote} just say the latter instead of the former
* 108: {quote}RadioChoice1{quote} -> {quote}RadioChoice{quote}
* 110, 122: {quote}paragraph 15{quote} -> {quote}Chapter 15{quote}
* 118: {quote}MultiPart(true)on{quote} -> {quote}setMultiPart(true) on{quote}
* 127: {quote}<input type= ../>[checkbox]{quote} -> {quote}<input type=""checkbox""/>{quote}
* 130: {quote}By default CheckBoxMultipleChoice inserts a <br/> tag as suffix after each option{quote} -> [not anymore|https://issues.apache.org/jira/browse/WICKET-5640]
* 135: listing is not respecting [this change|https://issues.apache.org/jira/browse/WICKET-5349]
* 140: {quote}Surename{quote} -> {quote}Surname{quote}
* 185: {quote}setJavaScriptCompressor(…) / setJavaScriptCompressor(…)""{quote} -> {quote}setCssCompressor(…) / setJavaScriptCompressor(…){quote}
* 191: {quote}extend the a built-in{quote} -> {quote}extend a built-in{quote}
* 228: {quote}Project WicketStuff provides a module with a stateless version of the most common AJAX components and behaviors.{quote} -> it in now part of Wicket (explained in 19.7)
* 238: missing javadoc for org.apache.wicket.lambda.Lambdas
* 244: {quote}WebSockets This means{quote} -> ?
* 244: {quote}WebSocketBehavior1.onMessage() or WebSocketResource1.onMessage(){quote} -> Did you mean: {quote}WebSocketBehavior#onMessage() or WebSocketResource#onMessage(){quote}
* 245: {quote}Beware that the API/implementation of wicket-native-websocket-javax may change before Wicket 7.0.0 is released{quote} -> it's already released
* 246: {quote}handler1.prependJavaScript(CharSequence) and handler1.appendJavaScript(CharSequence){quote} -> {quote}handler.prependJavaScript(CharSequence) and handler.appendJavaScript(CharSequence){quote}
* 276: {quote}int [_] indexes{quote} -> {quote}int[] indexes{quote}
* 292:  {quote}( ["")@)] xtField( ["")@)] te [)@)]{quote} -> ??
* 303: {quote}consider validators. How can I find all navigators that exist?{quote} ->  {quote}consider validators. How can I find all validators that exist?{quote}
* 306: {quote}the storage of pages' bytes{quote} -> {quote}the storage of page's bytes {quote}
* 311: {quote}Browser not caching files{quote} -> {quote}Browser is not caching files{quote}
* 319: {quote}annotated with _Aspect{quote} -> {quote}annotated with @Aspect{quote}
* 321: {quote}The additional parameter is written in bold{quote} -> it is not
* 325: {quote}Java developers : NetBeans{quote} -> {quote}Java developers: NetBeans{quote}
* 328: {quote}example [run-jetty-run]{quote} -> improper linking
* 329: Actual Qwickie url is https://github.com/count-negative/qwickie
* 338: {quote}(_see RequestCycleSettings1.RenderStrategy{quote} -> {quote}(see RequestCycleSettings.RenderStrategy{quote}

* 12, 13, 20, 40, 43,54, 55, 67, 171, 179, 263: {quote}<em>{quote}

* 10: {quote}_WebFilter.{quote}
* 20: {quote}_MarkupContainer_s.{quote}
* 112: {quote}_message{quote}
* 174: {quote}_ResourceReference{quote}
* 241: {quote}_EJB{quote}
* 242: {quote}_SpringBean{quote}
* 282: {quote}_Component{quote}
* 285: {quote}_Autowired{quote}
* 287: {quote}_Component{quote}
* 295: {quote}_onSubmit(){quote}
* 301: {quote}_SpringBean{quote}
* 307: {quote}_MarkupFactory{quote}
* 308: {quote}_IMarkupFilters_S{quote}, {quote}_IComponentResolver_s{quote}
* 319: {quote}_Aspect{quote}, {quote}_Around{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-10 15:54:40.136,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon May 22 14:56:30 UTC 2017,,,,,,0|i3eqjb:,9223372036854775807,,,,,,,,"10/May/17 15:54;jira-bot;Commit 32430207921f00ad59f36902d75667128c134eb1 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3243020 ]

WICKET-6367 UserGuide bugs/improvements","11/May/17 10:26;jira-bot;Commit 74e53e4de2f42c6db4acd5036e54a670d295880b in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=74e53e4 ]

WICKET-6367 additional fix","11/May/17 10:56;eximius;[~bitstorm]
[here|https://git-wip-us.apache.org/repos/asf?p=wicket.git;a=blobdiff;f=wicket-user-guide/src/main/asciidoc/modelsforms/modelsforms_1.adoc;h=b4212bdd4d4b654607ae4fce56169898ed280198;hp=a6042389a8d9cd3c26cc303331ef54cab6834e1f;hb=74e53e4;hpb=32430207921f00ad59f36902d75667128c134eb1] I believe you must add
{code}
&amp;
{code}
in order to have 
{code}
&lt;
{code}
displayed correctly, so you should have:
{code}
&amp;lt;
{code}
but you entered
{code}
>
{code}","11/May/17 12:52;bitstorm;[~eximius] you are right. I will correct it.

PS: thank you for your guide review!","11/May/17 13:20;eximius;no problem!
it will help everybody who is new to Wicket :)","12/May/17 09:22;jira-bot;Commit 43f9f74975cfeb3d9ac32f0cb4e49ecb68586e26 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=43f9f74 ]

WICKET-6367 Minor fix to userguide
","12/May/17 10:15;jira-bot;Commit 4e7f30f9c9067477468d44120df68828c4a91d7f in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4e7f30f ]

WICKET-6367 nearly all suggested changes have been applied
","12/May/17 12:35;jira-bot;Commit 02fa3f4874df79c7117d3028a075fd99bd6d3c80 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=02fa3f4 ]

WICKET-6367 added more fixes for unordered lists.
","16/May/17 11:01;eximius;[~bitstorm], please keep in mind that these irritating:
{code}<em>{code} are only visible on pages: 12, 13, 20, 40, 43,54, 55, 67, 171, 179, 263 in PDF but are not visible in HTML version","16/May/17 12:53;bitstorm;Hi,

this is a tricky issue. As you noted the html is ok, while I get an error when the pdf is produced and this created the <em> tag. Hope to find a solution quickly. ","19/May/17 14:14;jira-bot;Commit d129c980b8cf288948f1690fc0bccbe6807a032e in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d129c98 ]

WICKET-6367 Fix for parsing error when a wrong inner html anchor is found
","20/May/17 13:08;bitstorm;[~eximius] I think I've solved all the issues. Please let me know if you find some other issue.
Thank you!","22/May/17 14:38;eximius;Awesome! Thanks!
For listings I created separate bug: https://issues.apache.org/jira/browse/WICKET-6368",22/May/17 14:56;bitstorm;Thanks you too!,,,,,,,,,,,,,,,,,,,,,,
Exception caused by border extending another border with <wicket:extend>,WICKET-6374,13073399,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,ewienhold,ewienhold,19/May/17 11:32,21/May/17 18:50,13/Mar/19 23:18,21/May/17 12:57,7.7.0,8.0.0-M5,,,,,,,7.8.0,8.0.0-M7,,,wicket,,,2,,,,,,,,"Border components extended from a custom border component with {{<wicket:extend>}} fail to render in 7.7.0 (see stacktrace) and 8.0.0-M5. It renders fine with 7.6.0. The upgrade to 7.7.0 is necessary to get the fix for https://issues.apache.org/jira/browse/WICKET-6303.

{noformat}
org.apache.wicket.WicketRuntimeException: An error occurred while detaching component: [MyExtendedBorder [Component id = border, page = com.mycompany.HomePage, path = border, type = com.mycompany.MyExtendedBorder, isVisible = true, isVersioned = true, markup = [markup = file:/home/janedoe/myproject/target/classes/com/mycompany/HomePage.html
<div wicket:id=""border"">[body]</div>, index = 0, current =  '<div wicket:id=""border"">' (line 0, column 0)]], children =  [BorderBodyContainer [Component id = border_body]]]
	at org.apache.wicket.Component.detach(Component.java:1182)
	at org.apache.wicket.MarkupContainer.detachChildren(MarkupContainer.java:1761)
	at org.apache.wicket.Component.detach(Component.java:1187)
	at org.apache.wicket.core.request.handler.PageProvider.detach(PageProvider.java:330)
	at org.apache.wicket.core.request.handler.RenderPageRequestHandler.detach(RenderPageRequestHandler.java:156)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.detach(RequestCycle.java:906)
	at org.apache.wicket.request.RequestHandlerStack.detach(RequestHandlerStack.java:180)
	at org.apache.wicket.request.cycle.RequestCycle.onDetach(RequestCycle.java:641)
	at org.apache.wicket.request.cycle.RequestCycle.detach(RequestCycle.java:594)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:297)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
	at org.eclipse.jetty.server.Server.handle(Server.java:499)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.wicket.WicketRuntimeException: Detach called on component with id 'border' while it had a non-empty queue: ComponentQueue{queueSize=1, queue=[[BorderBodyContainer [Component id = border_body]], null, null, null, null, null, null, null]}
	at org.apache.wicket.MarkupContainer.onDetach(MarkupContainer.java:1943)
	at org.apache.wicket.Component.detach(Component.java:1163)
	... 30 more

Caused by:

org.apache.wicket.WicketRuntimeException: Detach called on component with id 'border' while it had a non-empty queue: ComponentQueue{queueSize=2, queue=[[BorderBodyContainer [Component id = border_body]], null, null, null, null, null, null, null]}
	at org.apache.wicket.MarkupContainer.onDetach(MarkupContainer.java:1943)
	at org.apache.wicket.Component.detach(Component.java:1163)
	at org.apache.wicket.MarkupContainer.detachChildren(MarkupContainer.java:1761)
	at org.apache.wicket.Component.detach(Component.java:1187)
	at org.apache.wicket.core.request.handler.PageProvider.detach(PageProvider.java:330)
	at org.apache.wicket.core.request.handler.RenderPageRequestHandler.detach(RenderPageRequestHandler.java:156)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.detach(RequestCycle.java:906)
	at org.apache.wicket.request.RequestHandlerStack.detach(RequestHandlerStack.java:180)
	at org.apache.wicket.request.cycle.RequestCycle.onDetach(RequestCycle.java:641)
	at org.apache.wicket.request.cycle.RequestCycle.detach(RequestCycle.java:594)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:297)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
	at org.eclipse.jetty.server.Server.handle(Server.java:499)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
	at java.lang.Thread.run(Thread.java:745)
{noformat}

The class hierarchy is as follows:

{code:java}
class MyBorder extends Border
class MyExtendedBorder extends MyBorder
{code}

{{MyBorder}} uses {{<wicket:border>}} and includes {{<wicket:body/>}} and {{<wicket:child/>}}. {{MyExtendedBorder}} uses {{<wicket:extend>}} and is used on the page.",,,,,,,,,,,,,,,,,,,,,,,,,19/May/17 11:32;ewienhold;myproject.tar.gz;https://issues.apache.org/jira/secure/attachment/12868926/myproject.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2017-05-20 17:22:54.902,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat May 20 17:39:26 UTC 2017,,,,,,0|i3f7tr:,9223372036854775807,,,,,,,,"20/May/17 17:22;jira-bot;Commit 266a57ce153c5b65e9701e74b13f1175d6dc3af7 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=266a57c ]

WICKET-6374 Exception caused by border extending another border with
<wicket:extend>","20/May/17 17:39;jira-bot;Commit a3f6677b5077d4576b7a9eedd44047e81f982c74 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a3f6677 ]

WICKET-6374 Exception caused by border extending another border with
<wicket:extend>",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stateless form does not work when RecreateBookmarkablePagesAfterExpiry is false,WICKET-6349,13060054,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,Jeroen1979,Jeroen1979,29/Mar/17 14:30,10/May/17 08:32,13/Mar/19 23:18,03/May/17 20:02,7.6.0,,,,,,,,7.7.0,,,,wicket,,,0,,,,,,,,"When you set RecreateBookmarkablePagesAfterExpiry to false, you get a PageExpiredException when you use a stateless form/page.

It is basically the same bug as described in https://issues.apache.org/jira/browse/WICKET-5521
",,,,,,,,,,,,,,,,,WICKET-5521,,,,,,,,03/May/17 20:02;mgrigorov;AjaxStatelessExample.java;https://issues.apache.org/jira/secure/attachment/12866261/AjaxStatelessExample.java,30/Mar/17 13:55;Jeroen1979;StatelessExpired.zip;https://issues.apache.org/jira/secure/attachment/12861235/StatelessExpired.zip,,,2.0,,,,,,,,,,,,,,,,,,,2017-03-29 14:34:20.685,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed May 10 08:32:45 UTC 2017,,,,,,0|i3cy5z:,9223372036854775807,,,,,,,,29/Mar/17 14:34;mgrigorov;Can you please provide a quickstart app / failing test case ?,"29/Mar/17 15:04;Jeroen1979;I added a quickstart project based on the stateless project of the wicket-example page: http://examples7x.wicket.apache.org/stateless/wicket/bookmarkable/org.apache.wicket.examples.stateless.AjaxStatelessExample. I added the following lines to the init method of the application:
{code}
getPageSettings().setRecreateBookmarkablePagesAfterExpiry(false);
getApplicationSettings().setPageExpiredErrorPage(ExpiredPage.class);
{code}

Steps to produce the failing case:

# Start example application
# Go to http://localhost:8080
# When you increment the counter, you end up on the expired page

Your console displays the following message: org.apache.wicket.protocol.http.PageExpiredException: Bookmarkable page with id 'null' has expired.","30/Mar/17 14:04;mgrigorov;Thank you!
We will take a look soon!",31/Mar/17 08:30;Jeroen1979;I see that in the Wicket 8 branch the first part of the check in the checkExpiration method in AbstractBookmarkableMapper has been changed (see https://issues.apache.org/jira/browse/WICKET-4201). It has been changed from provider.isNewPageInstance() to provider.wasExpired(). The wasExpired method checks if the pageId is not null. Maybe the fix for the Wicket 7 branch is to add provider.getPageId() != null to the check?,"07/Apr/17 20:29;jira-bot;Commit 05b8e686324651ba5f908331f10c2f7e1737ab97 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=05b8e68 ]

WICKET-6349 Stateless form does not work when RecreateBookmarkablePagesAfterExpiry is false
","07/Apr/17 20:47;mgrigorov;6.x and 8.x behave as expected!

Thank you!","07/Apr/17 20:50;jira-bot;Commit 5f4affeb62bbd4ec6286394e0572ec20633c939f in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5f4affe ]

WICKET-6349 Stateless form does not work when RecreateBookmarkablePagesAfterExpiry is false

Use the test cases from Wicket 7.x to protect us from regressions
","18/Apr/17 15:39;Jeroen1979;The counter is only updated once (from zero to one). The next click doesn't update the counter, so it is not behaving correctly.","01/May/17 19:59;mgrigorov;For me the counter increments with each click with 7.7.0-SNAPSHOT.
Could you please try again? ","01/May/17 20:05;mgrigorov;I'll re-close for now in case we release 7.7.0 in the next few days.
If you still face the issue we can reopen or create a new ticket for 7.8.0.

Please retest with 7.7.0-SNAPSHOT. I think you might have used older snapshot when it didn't work for you.
Thanks!","03/May/17 07:44;Jeroen1979;I just checked and the counter still increments only the first time. I just downloaded the zip file from this ticket, set the wicket.version to 7.7.0-SNAPSHOT in the pom.xml and rebuilt. The following wicket libraries are in the WEB-INF\lib folder:

wicket-core-7.7.0-20170501.193622-52.jar
wicket-extensions-7.7.0-20170501.193805-52.jar
wicket-request-7.7.0-20170501.193143-54.jar
wicket-util-7.7.0-20170501.193118-54.jar",03/May/17 07:56;mgrigorov;Strange. I'll re-check tonight again!,"03/May/17 20:01;mgrigorov;OK. Now I've spend more time on the application code and I think the problem is here.
Stateless applications should transfer the state back and forth with each request. This is what Wicket's StatelessLink does.
Your application updates the page parameters, but since the page is stateless a new instance is created for each click and thus the value of the counter always goes from 0 to 1.
You need to store the value with the Ajax response and send it back with the request.
Attaching a fixed version of AjaxStatelessExample.java...","10/May/17 08:32;Jeroen1979;Thank you for the updated version!

So basically if you set recreateBookmarkablePagesAfterExpiry to false, you have to ""remember"" the counter value. Maybe it is useful to put this example on the examples page (http://examples7x.wicket.apache.org/stateless)?",,,,,,,,,,,,,,,,,,,,,,
"Links on ""Contribute to the User Guide"" are broken",WICKET-6365,13069262,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,eximius,eximius,04/May/17 19:57,08/May/17 13:15,13/Mar/19 23:18,08/May/17 13:15,,,,,,,,,7.7.0,8.0.0-M6,,,site,,,0,,,,,,,,"I'd like to contribute to the documentation, unfortunatelly links on this webpage are broken: https://wicket.apache.org/contribute/userguide.html

How can report issues with documentation?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-04 20:42:53.103,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu May 04 20:42:53 UTC 2017,,,,,,0|i3eicv:,9223372036854775807,,,,,,,,"04/May/17 20:42;mgrigorov;I guess your first contribution will be the fix for this page! :-)
Please check https://ci.apache.org/projects/wicket/guide/7.x/single.html#_contributing_to_this_guide
Thank you for helping us!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebSocket fails when url-based jsessionid is used,WICKET-6360,13064808,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,doncferguson,doncferguson,18/Apr/17 17:22,28/Apr/17 19:36,13/Mar/19 23:18,28/Apr/17 18:44,8.0.0-M5,,,,,,,,8.0.0-M6,,,,wicket-native-websocket,,,0,,,,,,,,"When the session id is passed in the URL (versus in a cookie), the GET request to establish the websocket does not include the jsessionid parameter.

The following snippet comes from the NGINX access.log:

198.27.205.33 - - [18/Apr/2017:16:24:46 +0000] ""GET /quantumcamp/enrollment;jsessionid=10553zpxeq9lww6iq1qekcl17owsj195.10553?3 HTTP/1.1"" 200 11818 ""https://www.classprep.net/quantum
camp/signin;jsessionid=10553zpxeq9lww6iq1qekcl17owsj195.10553?1"" ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/5
37.36"" ""-""
198.27.205.33 - - [18/Apr/2017:16:24:46 +0000] ""GET /wicket/websocket?pageId=3&wicket-ajax-baseurl=quantumcamp%2Fenrollment%3F3&wicket-app-name=wicket.classprep HTTP/1.1"" 101 0 ""-"" ""
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36"" ""-""

Note the jsessionid in the initial request is not included in the websocket request.

This manifests itself an the NPE:

2017-04-18 16:51:45,028 - WARN  - WebSocketSession           - 
java.lang.NullPointerException
        at org.apache.wicket.protocol.ws.api.AbstractWebSocketProcessor.<init>(AbstractWebSocketProcessor.java:104)

This is easily reproduced.  Just disable cookies in your web browser.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-24 21:22:30.525,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Apr 28 19:36:19 UTC 2017,,,,,,0|i3drh3:,9223372036854775807,,,,,,,,"24/Apr/17 21:22;jira-bot;Commit c0181dd0d41629997d37a6699e8c032ac17bec2a in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c0181dd ]

WICKET-6360 WebSocket fails when url-based jsessionid is used

Manually append ';jsessionid=xyz' in the ws:// url when the session is tracked via URL or there is no cookie or the cookie value is invalid.

Works fine in Tomcat 8.5.13.
Fails on Jetty 9.4.4: https://github.com/eclipse/jetty.project/issues/1502
","24/Apr/17 21:24;mgrigorov;I've added an improvement that fixes the issue on Tomcat 8.5.x and 9.x.
Jetty 9.4.4 currently fails due to https://github.com/eclipse/jetty.project/issues/1502. I'll wait for their resolution before deciding whether to backport my fix to Wicket 7.x or to revert it.","28/Apr/17 18:44;mgrigorov;Jetty 9.4.5 will support also `;jsessionid=...` in WebSocket urls.
I will not backport the fix to 7.x for now. Only if someone requests for it!",28/Apr/17 19:36;doncferguson;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Proxy deserialization fails due to classloading issues,WICKET-6353,13061723,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,papegaaij,papegaaij,05/Apr/17 12:54,13/Apr/17 07:29,13/Mar/19 23:18,13/Apr/17 07:29,7.6.0,,,,,,,,7.7.0,8.0.0-M6,,,wicket,,,0,,,,,,,,"JavaSerializer.ClassResolverObjectInputStream overrides resolveClass to resolve classes via the Wicket ClassResolvers. This does however not happen for resolveProxyClass.

An example of how this can go wrong:
* A page with a large component tree is deserialized (war).
* LinkedMap (used in MarkupContainer) is loaded in a parent ClassLoader (ear).
* Via this stack, a proxy is hit implementing Spring classes (from the war)
* Due to LinkedMap determining the latestUserDefinedLoader, the ear-loader is used for the lookup of this interface, which fails

Unfortunately, writing a testcase for this is not easy, so I only have a proposed fix: see the classloadingfix branch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-05 12:55:12.863,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Apr 13 07:26:28 UTC 2017,,,,,,0|i3d8gv:,9223372036854775807,,,,,,,,"05/Apr/17 12:55;jira-bot;Commit 5b7ff7d03a9a4fe1ec20a7021ab7ec46ef2fbca8 in wicket's branch refs/heads/classloadingfix from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5b7ff7d ]

WICKET-6353: override resolveProxyClass to lookup classes in Wicket's ClassResolver
",05/Apr/17 18:21;svenmeier;Do you have a stack trace when lookup of the war's interface fails?,"05/Apr/17 18:41;papegaaij;It is not an 'official' stacktrace, because that's quite hard to get at that point. This is a dump of the stack from Eclipse, with some hints.

{code}
ClassNotFoundException: org.springframework.core.SerializableTypeWrapper$SerializableTypeProxy
In class: ModuleClassLoader
module: Module ""deployment.dev-bundle-2.49.04-SNAPSHOT.ear:main"" from Service Module Loader

ModuleClassLoader.findClass(String, boolean, boolean) line: 198	
ModuleClassLoader(ConcurrentClassLoader).performLoadClassUnchecked(String, boolean, boolean) line: 363	
ModuleClassLoader(ConcurrentClassLoader).performLoadClass(String, boolean, boolean) line: 351	
ModuleClassLoader(ConcurrentClassLoader).loadClass(String) line: 93	
Class<T>.forName0(String, boolean, ClassLoader, Class<?>) line: not available [native method]	
Class<T>.forName(String, boolean, ClassLoader) line: 348					<-- lookup SerializableTypeWrapper$SerializableTypeProxy
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).resolveProxyClass(String[]) line: 700	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readProxyDesc(boolean) line: 1566	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readClassDesc(boolean) line: 1518	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1781		<-- $Proxy326	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808		<-- ResolvableType
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readArray(boolean) line: 1714			<-- [ResolvableType]
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1347	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808		<-- ResolvableType
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808		<-- SpringBeanLocator
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808		<-- ProxyReplacement, resolves to 
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353			LazyInitProxyFactory$JDKHandler
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readArray(boolean) line: 1714
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1347
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject() line: 373	
ArrayList<E>.readObject(ObjectInputStream) line: 791	
GeneratedMethodAccessor312.invoke(Object, Object[]) line: not available	
DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
Method.invoke(Object, Object...) line: 498	
ObjectStreamClass.invokeReadObject(Object, ObjectInputStream) line: 1058	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1909	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject() line: 373	
ArrayList<E>.readObject(ObjectInputStream) line: 791	
GeneratedMethodAccessor312.invoke(Object, Object[]) line: not available	
DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
Method.invoke(Object, Object...) line: 498	
ObjectStreamClass.invokeReadObject(Object, ObjectInputStream) line: 1058	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1909	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject() line: 373	
LinkedMap<K,V>(AbstractHashedMap<K,V>).doReadObject(ObjectInputStream) line: 1268	
LinkedMap<K,V>.readObject(ObjectInputStream) line: 132	
NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
Method.invoke(Object, Object...) line: 498	
ObjectStreamClass.invokeReadObject(Object, ObjectInputStream) line: 1058	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1909	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readArray(boolean) line: 1714	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1347	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readArray(boolean) line: 1714	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1347	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).defaultReadFields(Object, ObjectStreamClass) line: 2018	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readSerialData(Object, ObjectStreamClass) line: 1942	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1808	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1353	
JavaSerializer$ClassResolverObjectInputStream(ObjectInputStream).readObject() line: 373	
DeflatedJavaSerializer(JavaSerializer).deserialize(byte[]) line: 122	
PerSessionPageStore(AbstractPageStore).deserializePage(byte[]) line: 152	
PerSessionPageStore(AbstractCachingPageStore<P>).getPage(String, int) line: 67	
PageStoreManager$SessionEntry.getPage(int) line: 211	
DecoratablePageManager$DecoratableRequestAdapter(PageStoreManager$PersistentRequestAdapter).getPage(int) line: 367	
DecoratablePageManager(AbstractPageManager).getPage(int) line: 82	
PageAccessSynchronizer$2(PageManagerDecorator).getPage(int) line: 50	
PageAccessSynchronizer$2.getPage(int) line: 246	
History.getPage(PageInformation) line: 33	
TargetBasedSecurePageLink$1.getPage() line: 39	
TargetBasedSecurePageLink<T>(SecurePageLink<T>).onClick() line: 106	
TargetBasedSecurePageLink<T>(Link<T>).onLinkClicked() line: 190	
NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
Method.invoke(Object, Object...) line: 498	
RequestListenerInterface.internalInvoke(Component, Object) line: 258	
RequestListenerInterface.invoke(IRequestableComponent) line: 216	
ListenerInterfaceRequestHandler.invokeListener() line: 241	
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
RequestCycle.execute(IRequestHandler) line: 265	
RequestCycle.processRequest() line: 222	
RequestCycle.processRequestAndDetach() line: 293	
WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
ManagedFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 61	
FilterHandler$FilterChainImpl.doFilter(ServletRequest, ServletResponse) line: 131	
CloseJpaTransactionAfterViewFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain) line: 85	
CloseJpaTransactionAfterViewFilter(OncePerRequestFilter).doFilter(ServletRequest, ServletResponse, FilterChain) line: 107	
ManagedFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 61	
FilterHandler$FilterChainImpl.doFilter(ServletRequest, ServletResponse) line: 131	
ActiveRequestsPerSessionFilter.doHttpRequestFilter(HttpServletRequest, HttpServletResponse, FilterChain) line: 176	
ActiveRequestsPerSessionFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 149	
ManagedFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 61	
FilterHandler$FilterChainImpl.doFilter(ServletRequest, ServletResponse) line: 131	
FilterHandler.handleRequest(HttpServerExchange) line: 84	
ServletSecurityRoleHandler.handleRequest(HttpServerExchange) line: 62	
ServletDispatchingHandler.handleRequest(HttpServerExchange) line: 36	
SecurityContextAssociationHandler.handleRequest(HttpServerExchange) line: 78	
PredicateHandler.handleRequest(HttpServerExchange) line: 43	
SSLInformationAssociationHandler.handleRequest(HttpServerExchange) line: 131	
ServletAuthenticationCallHandler.handleRequest(HttpServerExchange) line: 57	
PredicateHandler.handleRequest(HttpServerExchange) line: 43	
ServletConfidentialityConstraintHandler(AbstractConfidentialityHandler).handleRequest(HttpServerExchange) line: 46	
ServletConfidentialityConstraintHandler.handleRequest(HttpServerExchange) line: 64	
AuthenticationMechanismsHandler.handleRequest(HttpServerExchange) line: 60	
CachedAuthenticatedSessionHandler.handleRequest(HttpServerExchange) line: 77	
NotificationReceiverHandler.handleRequest(HttpServerExchange) line: 50	
SecurityInitialHandler(AbstractSecurityContextAssociationHandler).handleRequest(HttpServerExchange) line: 43	
PredicateHandler.handleRequest(HttpServerExchange) line: 43	
JACCContextIdHandler.handleRequest(HttpServerExchange) line: 61	
PredicateHandler.handleRequest(HttpServerExchange) line: 43	
PredicateHandler.handleRequest(HttpServerExchange) line: 43	
ServletInitialHandler.handleFirstRequest(HttpServerExchange, ServletRequestContext) line: 292	
ServletInitialHandler.access$100(ServletInitialHandler, HttpServerExchange, ServletRequestContext) line: 81	
ServletInitialHandler$2.call(HttpServerExchange, ServletRequestContext) line: 138	
ServletInitialHandler$2.call(HttpServerExchange, Object) line: 135	
ServletRequestContextThreadSetupAction$1.call(HttpServerExchange, C) line: 48	
ContextClassLoaderSetupAction$1.call(HttpServerExchange, C) line: 43	
LegacyThreadSetupActionWrapper$1.call(HttpServerExchange, C) line: 44	
LegacyThreadSetupActionWrapper$1.call(HttpServerExchange, C) line: 44	
LegacyThreadSetupActionWrapper$1.call(HttpServerExchange, C) line: 44	
LegacyThreadSetupActionWrapper$1.call(HttpServerExchange, C) line: 44	
LegacyThreadSetupActionWrapper$1.call(HttpServerExchange, C) line: 44	
LegacyThreadSetupActionWrapper$1.call(HttpServerExchange, C) line: 44	
ServletInitialHandler.dispatchRequest(HttpServerExchange, ServletRequestContext, ServletChain, DispatcherType) line: 272	
ServletInitialHandler.access$000(ServletInitialHandler, HttpServerExchange, ServletRequestContext, ServletChain, DispatcherType) line: 81	
ServletInitialHandler$1.handleRequest(HttpServerExchange) line: 104	
Connectors.executeRootHandler(HttpHandler, HttpServerExchange) line: 202	
HttpServerExchange$1.run() line: 805	
XnioWorker$TaskPool(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1142	
ThreadPoolExecutor$Worker.run() line: 617	
Thread.run() line: 745	
{code}","05/Apr/17 20:13;svenmeier;Thanks!

I was looking for a solution to interject the stack with method of our own class, loaded via our own classloader. This way we could take control the 'latestUserDefinedLoader'. But it seems this is not possible, since all relevant methods of ObjectInputStream are final or private :(.","06/Apr/17 09:47;mgrigorov;I'd be happy to have some new javadoc / inline comments for the new code.
At the moment I cannot make any relation between the description of the ticket with the checks for non-public interfaces in the code.
Without test case this might break easily with any change later. So let's put some rich documentation there!","06/Apr/17 12:44;jira-bot;Commit bdc9e66c2ad6bad97630e82eabf3dd947f20da59 in wicket's branch refs/heads/classloadingfix from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bdc9e66 ]

WICKET-6353: add some documentation
","06/Apr/17 12:46;papegaaij;I've added some docs. I can understand that the code seems strange, but it's simply copy-pasted from the superclass. Unfortunately, ObjectInputStream is not designed very well, so copy-pasting and reflection are the only way to get this working.","06/Apr/17 15:14;svenmeier;So we have the following call hierarchies now:

{code}
resolveClass() {
  try {
    super.resolveClass()
  } catch {
    resolveClassInWicket()
  }
}

resolveProxyClass() {
  resolveClassByName
    try {
      Class.forName(latestUserDefinedLoader())
    } catch {
      resolveClassInWicket()
    }
}
{code}

Why this discrepancy? And do we really need to fiddle with latestUserDefinedLoader() now?

Wouldn't it be better to call the super implementation first? Let it handle the latestUserDefinedLoader (your code is doing reflection twice now for each proxy).
For most deployments this will work just fine, and users won't have to pay a penalty (performance and stability) if they don't need to. If it fails, we can use resolveClassInWicket() as a fallback - but only for those who need it.","07/Apr/17 07:18;jira-bot;Commit 4b2718346c84520f197c0514c9c29320423a8b07 in wicket's branch refs/heads/classloadingfix from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4b27183 ]

WICKET-6353: restrict number of reflection calls
","07/Apr/17 07:23;papegaaij;This latest commit should restrict the number of reflective calls to latestUserDefinedLoader() to at most 1 per proxy class. Calling super.resolveProxyClass first may result in different classes. Note that there is no right way of doing this. Resolving the class from the Wicket's classloader may or may not be right, you cannot know. This setup is not very likely to fail, but when using complex classloader setups, such as osgi or jboss modules, it might.

If we want to do this entirely right, we should instrument the serialization as well to add classloader information. However, this would probably require explicit dependencies on classloader implementations, such as jboss modules.","07/Apr/17 11:10;mgrigorov;I just wonder how much more complex it will get with Java 9! :-)

Thanks, Emond!","13/Apr/17 06:50;jira-bot;Commit f295636ab57bcb13496ea5e700784a6dc89098f5 in wicket's branch refs/heads/master from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f295636 ]

WICKET-6353: override resolveProxyClass to lookup classes in Wicket's ClassResolver
","13/Apr/17 06:51;papegaaij;I would like to patch this in 7.x as well, any objections? And what about 6.x?","13/Apr/17 07:15;mgrigorov;+1 for 7.x!
6.x - only if someone request the backport.","13/Apr/17 07:26;jira-bot;Commit b915427b8185e52255805969b27f4fdc3fceeb2c in wicket's branch refs/heads/wicket-7.x from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b915427 ]

WICKET-6353: override resolveProxyClass to lookup classes in Wicket's ClassResolver
",,,,,,,,,,,,,,,,,,,,,
Stateless forms does not work when RecreateMountedPagesAfterExpiry turned off,WICKET-5521,12697655,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,01sas,01sas,27/Feb/14 10:47,29/Mar/17 14:31,13/Mar/19 23:18,27/Feb/14 15:51,6.13.0,6.14.0,,,,,,,6.15.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"If somebody will turn off RecreateMountedPagesAfterExpiry: getPageSettings().setRecreateMountedPagesAfterExpiry(false).

Then he will always get Page expired on stateless form submit.",,,,,,,,,,,,,,,,,WICKET-4997,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-27 13:22:12.748,,,no_permission,,,,,,,,,,,,376129,,,Thu Feb 27 15:51:09 UTC 2014,,,,,,0|i1stbz:,376425,,,,,,,,"27/Feb/14 10:51;01sas;I am not able to reproduce this bug in test, but it can be very easily reproduced on Wicket examples. For this you will need to perform the following steps:
# go to org.apache.wicket.examples.stateless.StatelessApplication class and add the following line to init method:
{code}
getPageSettings().setRecreateMountedPagesAfterExpiry(false). 
{code}
# Start example application
# go http://localhost:8080/stateless/foo
# Submit form","27/Feb/14 11:02;01sas;Possible reason of this bug is in invalid logic in Component#urlFor(Behavior,RequestListenerInterface, PageParameters) and Component#urlFor(RequestListenerInterface, PageParameters) methods. Both of this methods have the following lines of code:
{code}
if (getApplication().getPageSettings().getRecreateMountedPagesAfterExpiry() &&
       ((page.isBookmarkable() && page.wasCreatedBookmarkable()) || page.isPageStateless()))
{
    handler = new BookmarkableListenerInterfaceRequestHandler(provider, listener, id);
}
else
{
    handler = new ListenerInterfaceRequestHandler(provider, listener, id);
}
{code}

From my understanding something wrong with boolean expression in if statement. Condition page.isPageStateless() should be checked regardless of getRecreateMountedPagesAfterExpiry status. I think that this if statement should be changed to:
{code}
if (page.isPageStateless() || (getApplication().getPageSettings().getRecreateMountedPagesAfterExpiry() &&
        page.isBookmarkable() && page.wasCreatedBookmarkable()))
...
{code}
","27/Feb/14 13:22;svenmeier;Yes, an 'or' (||) makes more sense - no failing tests with the proposed change.","27/Feb/14 15:51;svenmeier;Changed the condition as proposed: page#isStateless() is sufficient to use a
BookmarkableListenerInterfaceRequestHandler",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong baseUrl in BaseWebSocketBehavior,WICKET-6342,13057565,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,vlastimil.dolejs,vlastimil.dolejs,20/Mar/17 15:39,20/Mar/17 20:59,13/Mar/19 23:18,20/Mar/17 16:32,7.6.0,,,,,,,,7.7.0,8.0.0-M5,,,wicket-native-websocket,,,0,,,,,,,,"When the WebSocketBehavior is used on 2 different pages URL of the first page is set as baseUrl and used also in second page.

Problem was introduced with this commit:
https://github.com/apache/wicket/commit/b6225514d9ad35a545750e2930485e212e95ca88

Method WebSocketSettings.getBaseUrl() should not set global baseUrl, but only return current baseUrl if global is not set.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-20 16:31:01.061,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 20 20:59:08 UTC 2017,,,,,,0|i3citj:,9223372036854775807,,,,,,,,"20/Mar/17 16:31;jira-bot;Commit 25bfd3a5201f4436b8747cd80ca4dc80e54c1a02 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=25bfd3a ]

WICKET-6342 Wrong baseUrl in BaseWebSocketBehavior
","20/Mar/17 16:31;jira-bot;Commit b41a682f4c03392b6270efcf1be23fc1e64cfdfa in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b41a682 ]

WICKET-6342 Wrong baseUrl in BaseWebSocketBehavior
",20/Mar/17 16:32;mgrigorov;Thanks!,"20/Mar/17 20:59;jira-bot;Commit f39b40dabe0ca11ddc5b96923bd6920403e8471e in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f39b40d ]

WICKET-6342 Wrong baseUrl in BaseWebSocketBehavior
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong class type in PageAccessSynchronizer,WICKET-6337,13050347,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mbppower,mbppower,12/Mar/17 19:31,14/Mar/17 14:33,13/Mar/19 23:18,13/Mar/17 21:28,,,,,,,,,8.0.0-M5,,,,,,,0,,,,,,,,"If you do this:

{noformat}
IPageManager pageManager = getSession().getPageManager();
System.out.println(""------>"" + pageManager.toString());
{noformat}

It will return PageAccessSynchronizer instead IPageManager:

{noformat}
------>org.apache.wicket.page.PageAccessSynchronizer$2@38834c7b
{noformat}

So I can't cast this to my custom class that extends IPageManager

*org.apache.wicket.page.Session.java*

{noformat}
public final IPageManager getPageManager()
	{
		IPageManager pageManager = Application.get().internalGetPageManager();
		return pageAccessSynchronizer.get().adapt(pageManager);
	}
{noformat}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-13 21:28:47.611,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Mar 14 14:33:03 UTC 2017,,,,,,0|i3baof:,9223372036854775807,,,,,,,,"13/Mar/17 21:28;mgrigorov;Improved with WICKET-6336.

PageManagerDecorator is actually implementing IPageManager already:
https://github.com/apache/wicket/blob/wicket-7.x/wicket-core/src/main/java/org/apache/wicket/page/PageManagerDecorator.java#L26
So I am not sure why you were not able to use it.","13/Mar/17 22:33;mbppower;I can't cast the class if I set a custom class because it looses my instance.

When the #getPageManager() returns pageAccessSynchronizer.get().adapt(pageManager), another instance is created and decorated with the custom class inside it.

So I can't cast it back to my custom class, this gives me a class cast exception:

((MyCustomPageStoreManager) getSession().getPageManager()).removePage(getPage());

The custom class is added to the application like this:

setPageManagerProvider(new MyCustomPageManagerProvider(this));

And inside its #get() I return the MyCustomPageStoreManager class

I can create a quick start if needed.

Thanks.




","13/Mar/17 22:55;mgrigorov;In the description you say 

bq. So I can't cast this to my custom class that extends IPageManager

that's why it wasn't clear. You are not casting to IPageManager but to MyCustomPageStoreManager.

In branch WICKET-6337-IPageManager-removePage-7.x I've added the methods to the classes (not to the interfaces). You will need to create a helper method that uses the if/elses from my previous comment to be able to remove a page.

If this works for you and other devs think this is OK to be merged to 7.x then we will merge it.
Maybe someone else will have a better idea how to accomplish this in 7.x without API breaks.","14/Mar/17 13:41;mbppower;Hi Martin, 

Your solution will work nice for me.

Another more generic option would be do add a #getDelegate() to PageManagerDecorator.java

Then I could do:
((MyCustomPageStoreManager) getSession().getPageManager().getDelegate()).myCustomMethod();",14/Mar/17 14:33;mgrigorov;I've thought about adding #getDelegate() but this method will make the need of PageManagerDecorator obsolete. This decorator is needed for the page locking management in PageAccessSynchronizer. With this method it will be possible to manage pages without locking/unlocking them. And this could lead to big issues. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AutoCompleteTextField: popup is hidden when clicking on scrollbar in IE,WICKET-6319,13043261,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,aka,aka,15/Feb/17 13:31,06/Mar/17 21:02,13/Mar/19 23:18,06/Mar/17 21:02,7.5.0,7.6.0,,,,,,,7.7.0,8.0.0-M5,,,wicket-extensions,,,0,,,,,,,,"When the user clicks into the text field, a list with suggestions is opened in a popup. When the user scrolls this list by clicking on the vertical scrollbar, the popup disappears.

Affects IE11 and Edge, not affected is Chrome.

this seems similar to WICKET-5882

I have resolved the issue by replacing lines 91+ in wicket-autcomplete.js with the following code:

{code:java}
Wicket.Event.add(obj, 'blur', function (jqEvent) {
        var menuId=getMenuId();

        //workaround for IE. Clicks on scrollbar trigger
        //'blur' event on input field. (See https://issues.apache.org/jira/browse/WICKET-5882)
        if (menuId !== document.activeElement.id && (menuId + ""-container"") !== document.activeElement.id) {
          window.setTimeout(hideAutoComplete, 500);
        } else {
          jQuery(this).trigger(""focus"");
        }
      });
{code}

quickstart attached",,,,,,,,,,,,,,,,,,,,,,,,,21/Feb/17 10:40;aka;wicket-autocomplete-ie.tar.gz;https://issues.apache.org/jira/secure/attachment/12853720/wicket-autocomplete-ie.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2017-03-06 21:01:45.28,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 06 21:02:40 UTC 2017,,,,,,0|i3a43z:,9223372036854775807,,,,,,,,21/Feb/17 10:40;aka;here is the quickstart. thanks!,"06/Mar/17 21:01;jira-bot;Commit befa7f0f7f29bdd43f19c2bd103fb9e92dfc8a11 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=befa7f0 ]

WICKET-6319 AutoCompleteTextField: popup is hidden when clicking on scrollbar in IE
","06/Mar/17 21:02;mgrigorov;Thank you for the fix, [~aka]!","06/Mar/17 21:02;jira-bot;Commit 3343025604ee226fd0e09efa52ca92c8d2ed3c84 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3343025 ]

WICKET-6319 AutoCompleteTextField: popup is hidden when clicking on scrollbar in IE
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Page parameter equality should not depend on named parameters order,WICKET-6283,13022076,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,pedrosans,pedrosans,pedrosans,21/Nov/16 03:16,06/Mar/17 05:57,13/Mar/19 23:18,21/Nov/16 03:41,7.5.0,8.0.0-M2,,,,,,,7.6.0,8.0.0-M3,,,,,,0,,,,,,,,"Wicket is falling to find the page instance for its request when the named parameters order differs from page's PagePamameter#namedParameter.

MountMapper, for instance first, decodes query parameters after the ? sign before the named parameters encoded in the URL segments. So:

the URL: segument/example?cid=0

decoded by: new MountMapper(MyPage.class, ""segment/${my_name}"");

is decoded as: cid=0, my_name=example

While there is no guarantee, nor documented requirement, that the page should set named parameters in an specific order, Wicket should ignore it and map the request to the page instance regardless of the named parameters order.

Wicket 6 is not affected since this order test was add during WICKET-4441 to versions 7+",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-11-21 03:26:57.666,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Nov 21 03:40:51 UTC 2016,,,,,,0|i36k67:,9223372036854775807,,,,,,,,"21/Nov/16 03:26;jira-bot;Commit 6e8808cc199d1804326be3d84f061b5232779513 in wicket's branch refs/heads/wicket-7.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6e8808c ]

WICKET-6283 ignoring named parameters order when testing PageParameter equality
","21/Nov/16 03:40;jira-bot;Commit d4347f2074cbe2b7e7496132429736f73666f672 in wicket's branch refs/heads/master from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d4347f2 ]

WICKET-6283 ignoring named parameters order when testing PageParameter equality
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AuthenticatedWebSession#signOut() calls twice after session invalidation,WICKET-6317,13040950,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mitring,mitring,07/Feb/17 11:39,05/Mar/17 20:57,13/Mar/19 23:18,05/Mar/17 20:57,7.6.0,,,,,,,,7.7.0,8.0.0-M5,,,wicket,wicket-auth-roles,,0,,,,,,,,"When the user wants to log out, I call AuthenticatedWebSession#invalidate(), which, in turn, calls AuthenticatedWebSession#signOut() and sets Session#sessionInvalidated to true.

After that, at the end of request processing, RequestCycle#onDetach() is called, which in turn calls Session#detach(). The last method checks Session#sessionInvalidated state, and because it is true, invalidates session again with Session#invalidateNow().

So, if I place some business logic code in #signOut() (as in example class BasicAuthenticationSession from [official guide|https://ci.apache.org/projects/wicket/guide/7.x/single.html#_using_roles_with_metadata]), this code also calls twice, which may be inappropriate in some cases.

I know about WICKET-6228 ticket - now #invalidate() doesn't call #signOut(), and this can be solution for issue, but that changes not ported to Wicket 7 branch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-02-07 12:04:16.354,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Mar 05 20:57:41 UTC 2017,,,,,,0|i39puv:,9223372036854775807,,,,,,,,"07/Feb/17 12:04;mgrigorov;WICKET-6228 is not applied to 7.x because it might break (silently) applications in production.
There is an entry in the migration guide for 8.x about it so hopefully the developers will take it into account.

We should definitely improve the example in the guide!

Thank you!","07/Feb/17 12:20;mitring;Thank you for quick response!

I realize that changes from WICKET-6228 is API break, no doubt about it.

But I didn't understand about 7.x branch - it is my incorrect implementation (probably because of the mistake in documentation) or bug? If it is the incorrect implementation, what is the right way to process user logout with some application-specific business rules?","07/Feb/17 12:27;mgrigorov;OK, I see. We should not call invalidate() in invalidateNow() if the session is already invalidated.
You can do the same in your signOut() in the meantime, just wrap your logic with ""if (!isSessionInvalidated()) { your logic here }"".","07/Feb/17 12:42;mitring;Martin, thank you! I already refactor my business code so it doesn't afraid of multiple signOut() calls now, but your tip still very useful!","05/Mar/17 20:57;jira-bot;Commit 237a830f4f412276cc31b236d46f67cec7498dd8 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=237a830 ]

WICKET-6317 AuthenticatedWebSession#signOut() calls twice after session invalidation

Do not call #invalidate() inside #invalidateNow() if the session is already invalidated.
","05/Mar/17 20:57;jira-bot;Commit 21ae5a9fb26eba66e593bf8566004c9296548001 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=21ae5a9 ]

WICKET-6317 AuthenticatedWebSession#signOut() calls twice after session invalidation

Do not call #invalidate() inside #invalidateNow() if the session is already invalidated.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StatelessLink not working,WICKET-6288,13023344,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,pedrosans,barbazan,barbazan,25/Nov/16 09:38,31/Jan/17 08:58,13/Mar/19 23:18,31/Jan/17 08:58,6.25.0,,,,,,,,6.26.0,7.6.0,8.0.0-M4,,wicket,,,0,,,,,,,,"Example:

{code:title=TestPage.html|borderStyle=solid}
<?xml version=""1.0"" encoding=""UTF-8""?>
<html xmlns:wicket=""http://wicket.apache.org/"">
<body>
    <a wicket:id=""statelessLink"">statelessLink</a>
    <a wicket:id=""statefullLink"">statefullLink</a>
</body>
</html>
{code}

{code:title=TestPage.java|borderStyle=solid}
public class TestPage extends WebPage {
    public TestPage(PageParameters pageParameters) {
        super(pageParameters);
        add(new StatelessLink(""statelessLink"") {
            @Override
            public void onClick() {
                System.err.println(""statelessLink.onClick()"");
            }
        });
        add(new Link(""statefullLink"") {
            @Override
            public void onClick() {
                System.err.println(""statefullLink.onClick()"");
            }
        });
    }
    @Override
    protected void onBeforeRender() {
        get(""statefullLink"").setVisible(false);
        super.onBeforeRender();
    }
}
{code}



So, StatelessLink not working in this case.
And if i remove the row get(""statefullLink"").setVisible(false); it works succesfull.
",,,,,,,,,,,,,,,,,,,,,,,,,26/Nov/16 04:22;barbazan;wicketerror.zip;https://issues.apache.org/jira/secure/attachment/12840555/wicketerror.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-11-25 09:47:56.649,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 25 20:45:15 UTC 2017,,,,,,0|i36rzz:,9223372036854775807,,,,,,,,"25/Nov/16 09:47;svenmeier;Could you be more specific on 'not working' please? What do you expect to happen, what does/does not happen.","25/Nov/16 09:48;mgrigorov;Priority ""Critical"" means that you cannot even start the application.",25/Nov/16 09:48;mgrigorov;It is not very clear to me how something that is not rendered (i.e. invisible) is supposed to be used by the user ?,"25/Nov/16 11:20;barbazan;Did you run this example? Try please. Even onClick() not called.
","25/Nov/16 11:27;mgrigorov;Please create a proper quickstart (http://wicket.apache.org/start/quickstart.html).
It makes it much easier for us to debug issues.

But as I said - I don't see how an invisible link could be clicked in the browser.","25/Nov/16 11:37;barbazan;I can not call ""statelessLink"", it is visible link, VISIBLE!!!!! Did you see it? Did you understand? 
Please read carefully, and run the example. Are you a programmer? Just run the example, and you will see with your own eyes.","25/Nov/16 12:05;reiern70;No need to be so unrespectful... you are talking to the persons that maintain something you use for free. It takes 5 minutes to create a quickstart. Copy your classes there, zip it and attach it to the issue.","25/Nov/16 12:10;mgrigorov;Oh, I read it wrong. The stateful link is invisible. Apologies!

I am a developer but I don't mind some help from you!","25/Nov/16 13:53;bitstorm;Drinking coffee is fine, but try to not drink more than 3 or 4 cups a day :-)",26/Nov/16 04:13;barbazan;attached example,26/Nov/16 04:14;barbazan;<wicket.version>6.25.0</wicket.version>,"28/Nov/16 05:23;jira-bot;Commit bc88aca39f514ea9b166d339a9f8821a6d480f4a in wicket's branch refs/heads/wicket-6.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bc88aca ]

WICKET-6288 using the page_id to check if the page was expired
","28/Nov/16 06:04;jira-bot;Commit b29055db8afff1fbbb5f83c92ea8148212ce7478 in wicket's branch refs/heads/wicket-6.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b29055d ]

WICKET-6288 assuming both component and the stateless state can't be correctly determined in a fresh page
","28/Nov/16 06:26;jira-bot;Commit 8d78d00caca97fa42db8670afec05a6c66152f42 in wicket's branch refs/heads/wicket-7.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8d78d00 ]

WICKET-6288 testing if the page is expired assuming both component and the stateless state can't be correctly determined in a fresh page
",01/Dec/16 21:54;mgrigorov;The fix has to be ported to 8.x too.,"01/Dec/16 22:32;pedrosans;The fix in the 8.x branch will use a new pageprovider API, I'm working on
it.


",02/Dec/16 07:19;mgrigorov;OK. I've assigned WICKET-4201 to you.,"25/Jan/17 06:03;jira-bot;Commit c4805d87012c2f0c2e80418453d0c60f3a5db7c7 in wicket's branch refs/heads/master from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c4805d8 ]

WICKET-6288 testing if the page if expired using IPageProvider API
","25/Jan/17 20:45;jira-bot;Commit 8b3e7d42202e6ccaa0d0bc2bfe4dabf87ffe03db in wicket's branch refs/heads/master from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8b3e7d4 ]

WICKET-6288 testing if the page if expired using IPageProvider API
",,,,,,,,,,,,,,,,,
Not possible to add WebSocketBehavior in ajax request,WICKET-6296,13026673,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,Vit Springl,Vit Springl,08/Dec/16 13:11,24/Jan/17 08:53,13/Mar/19 23:18,04/Jan/17 09:46,6.23.0,7.3.0,8.0.0-M1,,,,,,7.6.0,8.0.0-M3,,,wicket-native-websocket,,,0,,,,,,,,"Due to a change in WICKET-6152 the renderHead method in BaseWebSocketBehavior is never called if the WebSocketBehavior is added in an Ajax request. This makes using web sockets more complicated in a single ajax page scenario. -(Wouldn't it be possible to use page metadata instead of requestcycle metadata, for instance?)-",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-08 13:40:56.59,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jan 24 08:53:24 UTC 2017,,,,,,0|i37cjr:,9223372036854775807,,,,,,,,"08/Dec/16 13:40;mgrigorov;A (stateful) page could be rendered many times. In this case the header contributions should be done for each of them.

Another solution would be to remove the check for ""isAjax"" and contribute a JS HeaderItem with id. This way Wicket will not insert it twice in the page's DOM.
Do you want to give this a try and send us a Pull Request / attach a patch ?","08/Dec/16 16:35;Vit Springl;Hello, thank you for a quick reply. The thing is I am unable to replicate the problem described in WICKET-6152 and, therefore, I cannot verify that the fix doesn't break anything. I tried adding two websocket behaviors to different parts of the component tree of a page in a non-ajax and ajax requests and in both cases even if I delete the the whole renderHead method in WebSocketBehavior (i.e. the whole check whether the java script has already been contributed in the current request cycle) everything seems to work - the javascript reference is added only once to the DOM and the broadcast works properly too - the onConnect and onMessage methods have been called for both behaviors.
Adding the id to the JavaScriptHeaderItem doesn't seem to be necessary, it works with or without the id.","18/Dec/16 21:11;mgrigorov;Correct!
The change in WICKET-6152 is not needed because ResourceAggregator ignores the second OnDomReadyHeaderItem because it has the same renderTokens as the first one (see org.apache.wicket.markup.head.internal.HeaderResponse#wasItemRendered).
I'll revert it.","18/Dec/16 21:13;jira-bot;Commit 85e14e7e5151967ffa74d4f52fa9c0121fe84fae in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=85e14e7 ]

WICKET-6296 Not possible to add WebSocketBehavior in ajax request

Revert ""WICKET-6152 Allow to add more than one WebSocketBehavior in the component tree""

This reverts commit af67ba9e3a1e43d4ed4925ebb72efc8358e6565e.
","18/Dec/16 21:14;jira-bot;Commit 3ad040872fef47c5f63f618e71806735916cd74e in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3ad0408 ]

WICKET-6296 Not possible to add WebSocketBehavior in ajax request

Revert ""WICKET-6152 Allow to add more than one WebSocketBehavior in the component tree""

This reverts commit 0a1446208952bc237d983b1f6b0e9fe7349dd471.
","18/Dec/16 21:16;jira-bot;Commit aedb98764039ddabc30cce6cf1bec8c7cab1ca4e in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=aedb987 ]

WICKET-6296 Not possible to add WebSocketBehavior in ajax request

Revert ""WICKET-6152 Allow to add more than one WebSocketBehavior in the component tree""

This reverts commit b9a1ae901b8add3285d29a29d4a18ac2c23c8f86.
",20/Dec/16 08:45;mgrigorov;Reopening this ticket because I think I remember the use case in WICKET-6152. I'll have to retest!,"04/Jan/17 09:46;mgrigorov;Closing this as resolved.
I will create a new ticket for the reverted change in WICKET-6152",24/Jan/17 08:53;Vit Springl;Thanks a lot for the quick fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem with queued components and border,WICKET-6216,12992200,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,frido-lbm,frido-lbm,25/Jul/16 09:28,16/Jan/17 07:54,13/Mar/19 23:18,27/Jul/16 13:45,7.4.0,8.0.0-M1,,,,,,,7.5.0,8.0.0-M2,,,wicket,,,0,,,,,,,,"Every time we enqueue a component to a border we get ""Detach called on component with id 'border' while it had a non-empty queue"".

Quickstart attached. It is working with wicket 7.3.0!",,,,,,,,,,,,,,,,,,,,,,,,,25/Jul/16 09:43;frido-lbm;wicket-queuing.zip;https://issues.apache.org/jira/secure/attachment/12819886/wicket-queuing.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-07-25 16:36:04.33,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jul 27 13:45:34 UTC 2016,,,,,,0|i31g2n:,9223372036854775807,,,,,,,,25/Jul/16 16:36;bitstorm;I've removed Border#queue in WICKET-5730,"27/Jul/16 09:24;jira-bot;Commit 39685d81e97ede8f65ce27730d84dfec356d5764 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=39685d8 ]

WICKET-6216 Problem with queued components and border","27/Jul/16 12:50;jira-bot;Commit 29c5221c151e71e83e0c49cc653d3ed3dfe59d41 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=29c5221 ]

WICKET-6216 Problem with queued components and border",27/Jul/16 13:45;bitstorm;Restored Border#queue,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Border body not reachable for visitors,WICKET-6185,12980449,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,mgrigorov,mgrigorov,18/Jun/16 09:03,11/Jan/17 16:00,13/Mar/19 23:18,22/Jun/16 21:44,7.3.0,,,,,,,,7.4.0,8.0.0-M1,,,wicket,,,0,,,,,,,,After change https://github.com/apache/wicket/commit/f14e03f84454101fe6569bd1a1979b5835835246#diff-d1bbf49cc52782243da7166b955deca5L169 made for WICKET-5988 MarkupContainer#visitChildren() won't visit the Border's body unless it is manually added to the Border (i.e. as a child).,,,,,,,,,,,,,,,,,,,,,,,,,18/Jun/16 09:16;mgrigorov;myproject2.zip;https://issues.apache.org/jira/secure/attachment/12811569/myproject2.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-06-22 16:37:30.539,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 11 14:00:11 UTC 2017,,,,,,0|i2zo8f:,9223372036854775807,,,,,,,,"22/Jun/16 16:37;jira-bot;Commit 8c43b38a43efff07b22cc87ffa6946d7d88de379 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8c43b38 ]

WICKET-6185 Border body not reachable for visitors","22/Jun/16 18:55;jira-bot;Commit 52afdbdd2487f03238ea51386a05d476cf0df422 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=52afdbd ]

WICKET-6185 Border body not reachable for visitors","05/Aug/16 09:31;bhuism;Hi [~bitstorm], I think this commit introduced a bug.

In line Border.java:679 (Wicket .7.4.0) the statement

{{containerClass.equals(getClass())}}

returns false when containerClass is an anonymous inner class.

If the line:

{{boolean isBorderBodyTag = containerClass == null || containerClass.equals(getClass());}}

is changed to:

{{boolean isBorderBodyTag = containerClass == null || containerClass.isAssignableFrom(getClass());}}

all is fine again.

Do you want a PR for this?

Created bug: https://issues.apache.org/jira/browse/WICKET-6222.
","11/Jan/17 12:19;forchel;I would like to re-open this issue, as the same bug happens with Wicket 7.5.0 and Wicket 7.6.0. You can easily test this with the given quickstart (see attachment).","11/Jan/17 14:00;mgrigorov;Please open a new ticket and link it to this one.
Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No upload is seen as empty upload after WICKET-6210,WICKET-6270,13018132,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,papegaaij,papegaaij,04/Nov/16 14:57,04/Jan/17 09:43,13/Mar/19 23:18,07/Nov/16 18:36,6.25.0,7.5.0,8.0.0-M2,,,,,,7.6.0,8.0.0-M3,,,wicket,,,1,,,,,,,,"After WICKET-6210, FileUploadFiels always have a FileUpload, even if no file is actually uploaded. When the field is left empty, an empty FileUpload is created. It has no content and no filename. This broke several pages in our application.

IMHO, the check that was removed in WICKET-6210 should be reintroduced, but as:
{code}
if (item != null && (item.getSize() > 0 || !Strings.isEmpty(item.getName)))
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-11-04 16:23:45.845,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Nov 07 18:36:51 UTC 2016,,,,,,0|i35vtz:,9223372036854775807,,,,,,,,04/Nov/16 16:23;svenmeier;My bad.,"04/Nov/16 19:00;papegaaij;No problem, I should have tested the release :)","07/Nov/16 18:34;jira-bot;Commit 3a6eb04ca17789b859e6efea067ea4bfddafa2c8 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3a6eb04 ]

WICKET-6270 check name of uploaded file is not empty
","07/Nov/16 18:35;jira-bot;Commit 34d8ead0926269af5392d8d55cc2a001e9c3ecc3 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=34d8ead ]

WICKET-6270 check name of uploaded file is not empty
","07/Nov/16 18:35;jira-bot;Commit 2135f7b7d2e77d1c7a70cb03da744e0f4ef2de29 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2135f7b ]

WICKET-6270 check name of uploaded file is not empty
",07/Nov/16 18:36;svenmeier;File name is now used to identify an empty file input.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clicking Link in BrowserInfoPage results in infinite request loop,WICKET-6295,13026662,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,DRaduenz,DRaduenz,08/Dec/16 12:21,04/Jan/17 09:43,13/Mar/19 23:18,12/Dec/16 21:40,6.25.0,,,,,,,,,,,,wicket,,,0,,,,,,,,"Clicking on the link in the BrowserInfoPage used to gather extended browser information results in an infinite loop in which the browser is alternating between sending several GET and POST request per second for the BrowserInfoPage.

Based on QuickStart with Wicket 6.25:
{code:Java|title=WicketApplication.java}
...
	@Override
	public void init()
	{
		super.init();
		getRequestCycleSettings().setGatherExtendedBrowserInfo(true);
	}
...
{code}
{code:Java|title=Homapage.java}
public class HomePage extends WebPage {
	private static final long serialVersionUID = 1L;

	public HomePage(final PageParameters parameters) {
		super(parameters);

		// Get ClientInfo for example to conditionally add components
		// further down in the code
		ClientInfo clientInfo = Session.get().getClientInfo();

		// Run code that takes a few seconds, just long enough to allow
		// an impatient user to click the link in the BrowserInfoPage
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
		}

		add(new Label(""version"", getApplication().getFrameworkSettings().getVersion()));
    }
}
{code}

Wicket 7 does not exhibit this behavior. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-08 15:34:14.615,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Dec 14 20:26:28 UTC 2016,,,,,,0|i37chb:,9223372036854775807,,,,,,,,"08/Dec/16 15:34;jira-bot;Commit 7b239ca45a876a9b90da6e90001bcbb36578574b in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7b239ca ]

WICKET-6295 fallback to home page
a previous request might have consumed the original destination - this could happen if the meta refresh fires but the user is still able to link on the link
","08/Dec/16 15:35;svenmeier;The meta refresh consumes the original destination, the following click on the link will lead into a infinite loop of browserInfo pages.

Fixed. Could you give it a test drive? Thanks.
","09/Dec/16 11:30;DRaduenz;Thanks for the super quick response!
It does indeed fix the infinite loop, which is sufficient for my use case.

One observation I made while testing though, which also applies to Wicket 7:
The bug seems to result from the fact, that the BrowserInfoPage gets requested twice. Once from JavaScript (or the meta refresh, if JavaScript is disabled) and once from the user clicking the link. The first request probably consumes the originally requested destination and sets it to null. This leads to the the second request not having a destination to forward the user to and thus forwarding him to the home page.

Now of course it's open for discussion, how likely it is that the following constructed case will ever ocour in real life situations and if it's worth spending time on coming up with a fix for it, but I thought I should mention it for the sake of completeness.

*This can be tested as following:*
Disable JavaScript in your Browser and set the meta refresh time in BrowserInfoPage to 5 seconds. Depening on when you click the link on the BrowserInfoPage, you get a different page.
*Case 1:*
Clicking the link before the 5 seconds are over
{{continueToOriginalDestination()}} succeeds
{{setResponsePage(getApplication().getHomePage())}} never gets called
-> End result: User is redirected to requested page

*Case 2:*
Not clicking the link at all and waiting for meta refresh to happen 
{{continueToOriginalDestination()}} succeeds
{{setResponsePage(getApplication().getHomePage())}} never gets called
-> End result: User is redirected to requested page

*Case 3:*
Clicking the link after the 5 seconds are over and while the requested page is still loading (thus the link still being visible)
+First request from meta refresh+
{{continueToOriginalDestination()}} succeeds
{{setResponsePage(getApplication().getHomePage())}} never gets called
+Second request from user clicking the link while first request is still loading+
{{continueToOriginalDestination()}} fails
{{setResponsePage(getApplication().getHomePage())}} gets called
-> End result: User is redirected to the home page

",09/Dec/16 12:14;svenmeier;Reopened for further investigation.,"09/Dec/16 14:58;jira-bot;Commit ae7a0f8b925d97eec6c7a6a9d71d6cd92035b3b8 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ae7a0f8 ]

Revert ""WICKET-6295 fallback to home page""

This reverts commit 7b239ca45a876a9b90da6e90001bcbb36578574b.
","12/Dec/16 21:31;jira-bot;Commit 0519f72b4d57e6443b8a8d5805955fd0a516135c in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0519f72 ]

WICKET-6295 fallback to home page
a previous request might have consumed the original destination - this could happen if the meta refresh fires but the user is still able to link on the link
","12/Dec/16 21:40;svenmeier;I've backported parts of the changes from Wicket 7.x:
No redirect-loop should occur any longer

Note that if you click the continue link while the meta refresh is still loading, you'll end on the application's home page instead of the original destination.

This is inherent to the current implementation using an intercept page (on all branches): the meta refresh consumes the original destination :/.","14/Dec/16 16:38;DRaduenz;I've checked your new fix. The initial infinite loop is still fixed, but there is another one:

With JavaScript being enabled:
- Wait for the redirect to happen
- Press the back button in the browser -> infinite request loop

Probable cause:
When pressing the back button in the browser, the user ends up on the BrowserInfoPage instance from before again. The JavaScript in that page submits the BrowserInfoForm again, which triggers the {{afterSubmit()}} method
{code:Java|title=Wicket 6.26 SNAPSHOT}
protected void afterSubmit()
{
	continueToOriginalDestination();
}
{code}

Comparing this to Wicket 7, where this infinte loop does not happen, reveals that there is a fallback to the home page in this method as well.
So the Wicket 6 code probably should be like that as well:
{code:Java|title=Wicket 7.5}
protected void afterSubmit()
{
	continueToOriginalDestination();

	// switch to home page if no original destination was intercepted
	setResponsePage(getApplication().getHomePage());
}
{code}

When backporting this change from Wicket 7 to Wicket 6 as well, I get redirected to the home page after pressing the back button.

The redirect to the home page in itself, when the original destination is already consumed, is currently no issue in my project.

Maybe on instatiation of the BrowserInfoPage the original destination could be saved via {{RestartResponseAtInterceptPageException.getOriginalUrl();}} to a local field. Then using that, instead of {{continueToOriginalDestination()}}, might do the trick to always redirect the original destination, no matter if the user clicked the link twice or used the back button. But this probably warrants a seperate ticket at some point, since the implications of this potentiel solution are currently unclear to me. I'd need to dig deeper into the internals of Wicket and would have to do some extended testing.","14/Dec/16 20:18;jira-bot;Commit 5ce4f3e7051fcbc5039f4cc6ad485e10adde0913 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5ce4f3e ]

WICKET-6295 fallback to home page
","14/Dec/16 20:26;svenmeier;You're right, this is another thing I've fixed in 7.x and master:

Regardless how BrowserInfoPage is left, it will always try to redirect to the original destination and use the homepage as fallback.

If you have an idea how to keep the original destination for a second request, please open another ticket.",,,,,,,,,,,,,,,,,,,,,,,,,,
IllegalArgumentException: Argument 'filterPrefix' may not be null or empty with WebSocketBehavior,WICKET-6262,13015764,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,ilgrosso,ilgrosso,27/Oct/16 10:19,31/Dec/16 12:32,13/Mar/19 23:18,27/Oct/16 10:30,7.5.0,,,,,,,,7.6.0,8.0.0-M3,,,wicket-native-websocket,,,0,,,,,,,,"I am trying to upgrade the Apache Syncope console from 7.4.0 to recent 7.5.0, but I am getting an [exception|https://paste.apache.org/YSzq] and AFAIU this depends on the fact that the {{WebSocketSettings}} we are [using|https://github.com/apache/syncope/blob/2_0_X/client/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java#L91] have a null or empty {{filterPrefix}}: this works perfectly fine with 7.4.0.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-27 10:28:34.533,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Oct 27 10:29:12 UTC 2016,,,,,,0|i35h8n:,9223372036854775807,,,,,,,,"27/Oct/16 10:28;jira-bot;Commit 41c47a44eb1210ec672f0cbf3c30ce7ba775f2b6 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=41c47a4 ]

WICKET-6262 IllegalArgumentException: Argument 'filterPrefix' may not be null or empty with WebSocketBehavior
","27/Oct/16 10:29;jira-bot;Commit 70deb7fd78bcb4ecd917154075e0953fc67b39f4 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=70deb7f ]

WICKET-6262 IllegalArgumentException: Argument 'filterPrefix' may not be null or empty with WebSocketBehavior
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Button.onSubmit not called for multipart requests,WICKET-6292,13025380,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,socheat.khauv,socheat.khauv,04/Dec/16 06:01,06/Dec/16 13:32,13/Mar/19 23:18,06/Dec/16 13:32,8.0.0-M2,,,,,,,,8.0.0-M3,,,,,,,0,,,,,,,,"{code:title=HomePage.java|borderStyle=solid}
public class HomePage extends WebPage {
    private static final long serialVersionUID = 1L;

    public HomePage(final PageParameters parameters) {
        super(parameters);

        Form<Void> form = new Form<>(""form"");
        form.setMultipart(true);
        add(form);

        Button components = Button.onSubmit(""button"", this::buttonOnSubmit);
        form.add(components);
    }

    private void buttonOnSubmit(Button button) {
        System.out.println(""test"");
    }

}
{code}

{code:title=HomePage.html|borderStyle=solid}
<form wicket:id=""form"">
    <input type=""submit"" wicket:id=""button"" value=""Okay"">
</form>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-06 13:30:11.725,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Dec 06 13:32:38 UTC 2016,,,,,,0|i374kf:,9223372036854775807,,,,,,,,"06/Dec/16 13:30;jira-bot;Commit 3824853be87af927dcde0b9cc6761f59738051a9 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3824853 ]

WICKET-6292 revert WICKET-6041 - should not access parameters before handling multipart

This reverts commit ba393ffa2bf6480d4981e4b48c7aa6a19bd5b9c6.
This reverts commit ece7575f5ea74ec27f88618fd287e4348aa9cc35.
","06/Dec/16 13:32;svenmeier;Parameters should not be accessed before handling multipart, since they are not accessible via standard servlet api.

Reverted changes of WICKET-6041, since it is still undecided anyway.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Page instance isn't mapped to an URL just after the 'cid' parameter is add,WICKET-6257,13014112,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,pedrosans,pedrosans,pedrosans,21/Oct/16 03:46,21/Nov/16 03:41,13/Mar/19 23:18,21/Nov/16 03:41,,,,,,,,,7.6.0,8.0.0-M3,,,wicket-cdi,,,0,,,,,,,,CDI module redirects users to an URL containing the cid parameter as soon as a conversation is marked as long running. The problem is that this parameter isn't add to the page instance as soon it is redirected and causes the server to fail to find it since Wicket 7 (after WICKET-4441) checks if the request parameters matches with the parameters in the requested page.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-21 03:58:29.959,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Nov 21 03:40:49 UTC 2016,,,,,,0|i3571j:,9223372036854775807,,,,,,,,"21/Oct/16 03:58;jira-bot;Commit 48e39e9ac375f22c36d778ed152b8bd10afd477b in wicket's branch refs/heads/WICKET-6257-URL-cid-parameter from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=48e39e9 ]

WICKET-6257 testing the mapping to a page after a conversation is marked as long-running
","21/Nov/16 03:26;jira-bot;Commit fac2d71c0bbbf478e4da9ea9e629b46d9ba05b31 in wicket's branch refs/heads/wicket-7.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fac2d71 ]

WICKET-6257 adding the cid parameter to a page as soon as ConversationPropagator detects it
","21/Nov/16 03:40;jira-bot;Commit dedc55c6c153e4e830b75a38176433900f7f9f4b in wicket's branch refs/heads/master from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=dedc55c ]

WICKET-6257 adding the cid parameter to a page as soon as ConversationPropagator detects it
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fragment fails to report an error in development mode,WICKET-6219,12993547,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,pedrosans,developster,developster,29/Jul/16 14:15,28/Oct/16 09:40,13/Mar/19 23:18,28/Aug/16 03:05,6.24.0,,,,,,,,6.25.0,7.5.0,8.0.0-M2,,wicket,,,0,,,,,,,,"Fragment under certain circumstances fails to report errors while in development mode.

In my case Fragment had the same id as markupId. Probably this should be allowed but in this case it triggers a bigger problem, it is silently ignored errors and even works in development, and fails in deployment mode.

To trigger this bug, fragment must be inside a TransparentWebMarkupCotainer and <wicket:child>. If we leave out either TransparentWebMarkupCotainer or <wicket:child> it works, i.e. fails with correct message in either mode.

Please check attached sample project that exhibits this behavior. Try an run it with a different configuration type.",,,,,,,,,,,,,,,,,,,,,,,,,29/Jul/16 14:49;developster;fragmentbug.zip;https://issues.apache.org/jira/secure/attachment/12820980/fragmentbug.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-08-19 06:10:23.998,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Aug 28 03:05:27 UTC 2016,,,,,,0|i31odz:,9223372036854775807,,,,,,,,29/Jul/16 14:49;developster;Sample project,"19/Aug/16 06:10;jira-bot;Commit 381391bc2d4ae7567a385987152687453c213121 in wicket's branch refs/heads/wicket-6.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=381391b ]

WICKET-6219 testing the tag name to prevent conflict when resolving fragments and components markup
","19/Aug/16 06:23;jira-bot;Commit 6bbd60f6e9e9425cf5bb6de1741a7e24f6231f8f in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6bbd60f ]

WICKET-6219 Improve the check for <wicket:fragment> tag so that it works also when a custom namespace is used, like <w:fragment>
","20/Aug/16 02:40;jira-bot;Commit fe1dd3c7cd37e20c775ea7f388afb0e9bffc9680 in wicket's branch refs/heads/WICKET-6219-no-fragment-resolver from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fe1dd3c ]

WICKET-6219 removing FragmentResolver
","27/Aug/16 23:33;jira-bot;Commit 74aa7983f07b8e310e471b7b31ca76d81abed3e8 in wicket's branch refs/heads/wicket-7.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=74aa798 ]

WICKET-6219 removing FragmentResolver
","28/Aug/16 02:13;jira-bot;Commit 76678a429049af320cd5a79824cf1e172811290f in wicket's branch refs/heads/wicket-6.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=76678a4 ]

WICKET-6219 removing FragmentResolver
","28/Aug/16 02:51;jira-bot;Commit e72e54f09b7ede1f05ffa0a9acd6b607e7e1feaf in wicket's branch refs/heads/master from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e72e54f ]

WICKET-6219 removing FragmentResolver
",28/Aug/16 03:05;pedrosans;Wicket's rendering mechanism were improved and the reported usage of a Fragment type identifier matching its instance id is now valid.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket WebSockets problem behind HTTP proxy without servlet context,WICKET-6254,13009901,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,thomas.goetz,thomas.goetz,05/Oct/16 15:34,27/Oct/16 10:29,13/Mar/19 23:18,15/Oct/16 17:32,7.3.0,,,,,,,,7.5.0,8.0.0-M2,,,wicket-native-websocket,,,0,,,,,,,,"See discussion here:
http://apache-wicket.1842946.n4.nabble.com/Wicket-WebSockets-problem-with-servlet-context-td4675647.html",,,,,,,,,,,,,,,,,,,,,WICKET-6262,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-15 08:54:45.818,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Oct 15 09:22:32 UTC 2016,,,,,,0|i34h73:,9223372036854775807,,,,,,,,"15/Oct/16 08:54;jira-bot;Commit 41a3b04a57a731e5723493092bce748aca58588c in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=41a3b04 ]

WICKET-6254 Wicket WebSockets problem behind HTTP proxy without servlet context

Make it possible to override the parts needed to construct the WebSocket absolute url.
This is needed when the application runs in a servlet container that is proxied in front.
The constructed url has to point to the proxy server.
The application may use X-Forwarded-For-** headers set by the proxy, or custom configuration for different environments
","15/Oct/16 08:55;jira-bot;Commit 291541f4d567ca50cda05863600edeefda5dc3a6 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=291541f ]

WICKET-6254 Wicket WebSockets problem behind HTTP proxy without servlet context

Make it possible to override the parts needed to construct the WebSocket absolute url.
This is needed when the application runs in a servlet container that is proxied in front.
The constructed url has to point to the proxy server.
The application may use X-Forwarded-For-** headers set by the proxy, or custom configuration for different environments
","15/Oct/16 09:20;jira-bot;Commit 1236f50ad06a842c0efb68492038d51042f1b59d in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1236f50 ]

WICKET-6254 Wicket WebSockets problem behind HTTP proxy without servlet context

Extract the logic to calculate the url in WebSocketSettings. This way it could be configured globally and per behavior
","15/Oct/16 09:21;mgrigorov;I've made it possible to override the different parts that are used to construct the url both globally and per behavior.
Would that be enough for you?","15/Oct/16 09:22;jira-bot;Commit b6225514d9ad35a545750e2930485e212e95ca88 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b622551 ]

WICKET-6254 Wicket WebSockets problem behind HTTP proxy without servlet context

Extract the logic to calculate the url in WebSocketSettings. This way it could be configured globally and per behavior
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reload leads to unexpected RuntimeException 'Unable to find component with id',WICKET-6162,12966653,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,frido-lbm,frido-lbm,10/May/16 08:36,20/Sep/16 13:05,13/Mar/19 23:18,11/May/16 16:39,7.3.0,,,,,,,,7.4.0,8.0.0-M1,,,,,,0,,,,,,,,"The problem is related with component queuing in header.

Steps to reproduce:
1. render page (/)
2. do some ajax (/)
3. reload (!)

{code:title=HomePage.java|borderStyle=solid}
queue(new Label(""title"", ""test""));
add(new AjaxLink(""link"") {
  @Override
  public void onClick(AjaxRequestTarget ajaxRequestTarget) {
    ajaxRequestTarget.add(this);
  }
}.setOutputMarkupId(true));
{code}

{code:title=HomePage.html|borderStyle=solid}
<head>
<title wicket:id=""title"">test</title>
</head>
<body>
<ol>
  <li><a wicket:id=""link"">ajax</a></li>
  <li><a href=""#"" onclick=""location.reload();"">reload</a></li>
</ol>
</body>
{code}",,,,,,,,,,,,,,,,,WICKET-6246,,,,,,,,10/May/16 08:37;frido-lbm;wicket-queuing.zip;https://issues.apache.org/jira/secure/attachment/12803192/wicket-queuing.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-05-11 13:32:14.778,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 20 13:05:13 UTC 2016,,,,,,0|i2xfz3:,9223372036854775807,,,,,,,,"11/May/16 13:32;jira-bot;Commit 9ff894de08a85495b09fa343489d9eef1f14b001 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9ff894d ]

WICKET-6162 Reload leads to unexpected RuntimeException 'Unable to find
component with id'","20/Sep/16 13:05;jira-bot;Commit 664424a612c337ec200b276e0ec710fdd40b6ebc in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=664424a ]

WICKET-6246 backport change from WICKET-6162 replace original header container
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebSocket request while Ajax request leads to error regarding HtmlHeaderCotnainer,WICKET-6246,13006109,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,chrenkot,chrenkot,20/Sep/16 05:49,20/Sep/16 13:05,13/Mar/19 23:18,20/Sep/16 13:04,6.24.0,,,,,,,,6.25.0,,,,wicket,,,0,header,header-contribution,,,,,,"There is a problem with header contribution with leads to a ""Cannot replace a component which has not been added: id='_header_'...."" error.

Short:
- Add at least two components to an AjaxRequestTarget
- The (at least) second component must initiate a WebSocket push update of another component in onConfigure/onBeforeRender (maybe others)
- Exception at the end of ajax request (WebSocket request finishes without problem)

Long:
AbstractAjaxResponse iterates all components to update in writeComponents(Response, String). 
For each component writeComponent(Response, String, Component, String) is called in sub class XmlAjaxResponse which calls writeHeaderContribution(Response, Component) of AbstractAjaxResponse.
This method creates the HtmlHeaderContainer and adds is to the page when rendering of first component added to target starts.
Second component rendering (onConfigure/onBeforeRender) send a component update via websocket push to the client.
The websocket request replaces the HtmlHeaderContainer added to the page and at the end of the AbstractAjaxResponse.writeTo(Response, String) to header is again replaced with a default one.
But this default header is removed on MarkupContainer.detachChildren() method.
Now the ajax request is ""continued"" and writeHeaderContribution is called for the second component.
header is not null in writeHeaderContribution because it was already created when processing the first component, so the header is not added to the page again (remember it was replaced while websocket request).
Now at the end of writeTo method, wicket tries again to replace the header with a default one (comment there says ""restore normal header"").
This leads to an exception: Cannot replace a component which has not been added: id='_header_'.... 

A little notice:
The error would not happen, if second component would be processed before first component, because then the HeaderContainerItem of the ajax request isn't craeted before the websocket request is finished and so the header is added to the page on creation. So the problem is the removal of the HeaderContainerItem in detachChildren() after websocket request.

In Wicket 7.4 (the only one i tested, this works without problems)",,,,,,,,,,,,,,,,,,,,,,,,,20/Sep/16 05:54;chrenkot;quickstart.zip;https://issues.apache.org/jira/secure/attachment/12829331/quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-09-20 06:18:31.432,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 20 13:05:12 UTC 2016,,,,,,0|i33tun:,9223372036854775807,,,,,,,,20/Sep/16 05:54;chrenkot;Added quickstart to demonstrate. HomePage.java contains the long description again. ,20/Sep/16 05:59;chrenkot;The stackoverflow.com question where it all started: http://stackoverflow.com/questions/39511880/apache-wicket-push-websocket-component-update-while-ajax-request-rendering,"20/Sep/16 06:18;svenmeier;Thanks!

I'll try to find the difference to 7.x and why it works there.","20/Sep/16 13:04;svenmeier;Since WICKET-6162 the original header container is restored after a partial page update. This fixes this issue too, so I applied the change to 6.x too.","20/Sep/16 13:05;jira-bot;Commit 664424a612c337ec200b276e0ec710fdd40b6ebc in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=664424a ]

WICKET-6246 backport change from WICKET-6162 replace original header container
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Weak concurrency management in AuthenticatedWebSession#signedIn,WICKET-6242,13004063,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,10/Sep/16 11:10,19/Sep/16 19:45,13/Mar/19 23:18,19/Sep/16 19:45,7.4.0,8.0.0-M1,,,,,,,7.5.0,8.0.0-M2,,,wicket-auth-roles,,,0,,,,,,,,"Discussion at dev@: http://markmail.org/message/syo3m6hrf2ix55rz

Currently [1] uses a volatile boolean ""signedIn"" to control the state.
org.apache.wicket.authroles.authentication.panel.SignInPanel#onConfigure()
tries to make use of it.
IMO this implementation is a bit weak. There are big windows this state to
change in the meantime.

Usually this shouldn't be a big problem, the application will authenticate
the same user twice.
But if the application does something in ISessionListener#onBind() then it
becomes a problem [2].

1.
https://github.com/apache/wicket/blob/master/wicket-auth-roles/src/main/java/org/apache/wicket/authroles/authentication/AuthenticatedWebSession.java
2. https://issues.apache.org/jira/browse/ISIS-1481",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-09-10 11:13:08.964,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Sep 19 19:45:45 UTC 2016,,,,,,0|i33h8f:,9223372036854775807,,,,,,,,"10/Sep/16 11:13;jira-bot;Commit a384c6f75df0b13962b65a948d766f73b39e11ba in wicket's branch refs/heads/WICKET-6242-authenticate-once from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a384c6f ]

WICKET-6242 Weak concurrency management in AuthenticatedWebSession#signedIn
","10/Sep/16 11:24;jira-bot;Commit d5425534a568d0cc0d4c6749a8965af69f107b8e in wicket's branch refs/heads/WICKET-6242-authenticate-once from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d542553 ]

WICKET-6242 Weak concurrency management in AuthenticatedWebSession#signedIn

Unset signedIn to 'false' only if the authenticated has failed.
","10/Sep/16 20:58;jira-bot;Commit 56f947ee52e3b42e69481bac78838e6ec8325573 in wicket's branch refs/heads/WICKET-6242-authenticate-once from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=56f947e ]

WICKET-6242 testing signIn method atomicity
","13/Sep/16 07:10;githubbot;Github user martin-g commented on the issue:

    https://github.com/apache/wicket/pull/180
  
    Please amend the commit message before merging it.
    It should mention `WICKET-6242`.
","13/Sep/16 13:11;jira-bot;Commit 263e8c14476f9970d2ccfd8476f371149f2e2cb4 in wicket's branch refs/heads/WICKET-6242-authenticate-once from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=263e8c1 ]

WICKET-6242 Improved synchronization for signIn. Added missing header license.
","19/Sep/16 19:31;jira-bot;Commit a384c6f75df0b13962b65a948d766f73b39e11ba in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a384c6f ]

WICKET-6242 Weak concurrency management in AuthenticatedWebSession#signedIn
","19/Sep/16 19:31;jira-bot;Commit d5425534a568d0cc0d4c6749a8965af69f107b8e in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d542553 ]

WICKET-6242 Weak concurrency management in AuthenticatedWebSession#signedIn

Unset signedIn to 'false' only if the authenticated has failed.
","19/Sep/16 19:31;jira-bot;Commit 56f947ee52e3b42e69481bac78838e6ec8325573 in wicket's branch refs/heads/wicket-7.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=56f947e ]

WICKET-6242 testing signIn method atomicity
","19/Sep/16 19:31;jira-bot;Commit 263e8c14476f9970d2ccfd8476f371149f2e2cb4 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=263e8c1 ]

WICKET-6242 Improved synchronization for signIn. Added missing header license.
","19/Sep/16 19:31;jira-bot;Commit 87fa748998a5c8e54df37d7ee119ede6b98db740 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=87fa748 ]

Merge branch 'WICKET-6242-authenticate-once' into wicket-7.x
","19/Sep/16 19:45;jira-bot;Commit 4fdc8175cab0d842c7aeeb52366338ceaac250d9 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4fdc817 ]

WICKET-6242 Weak concurrency management in AuthenticatedWebSession#signedIn
","19/Sep/16 19:45;jira-bot;Commit d1fc5d2cc3c1ef5da9d8569328fa96a8de4abbad in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d1fc5d2 ]

WICKET-6242 Weak concurrency management in AuthenticatedWebSession#signedIn

Unset signedIn to 'false' only if the authenticated has failed.
","19/Sep/16 19:45;jira-bot;Commit 91b9dbac3ad2b05e2e8c7fe47370ea193a4763b5 in wicket's branch refs/heads/master from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=91b9dba ]

WICKET-6242 testing signIn method atomicity
","19/Sep/16 19:45;jira-bot;Commit 5e1ced34e30135f3e46c9ab8cea1b8137f72ca8d in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5e1ced3 ]

WICKET-6242 Improved synchronization for signIn. Added missing header license.
",,,,,,,,,,,,,,,,,,,,,,
"CheckingObjectOutputStream should track the original instance, before writeReplace()",WICKET-6241,13003960,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,09/Sep/16 20:19,09/Sep/16 20:23,13/Mar/19 23:18,09/Sep/16 20:23,7.4.0,8.0.0-M1,,,,,,,7.5.0,8.0.0-M2,,,wicket,,,0,,,,,,,,"The object passed for checking could be resolved by calling its #writeReplace() method at https://github.com/apache/wicket/blob/379f9e54359be17619be28b0b6303dc9ce3a8e81/wicket-core/src/main/java/org/apache/wicket/core/util/objects/checker/CheckingObjectOutputStream.java#L374.

Later the the original instance should be put in the ""checked"" map because otherwise it might fail with StackoverflowError.

I our case we have a JPA entity User that has a member field ""modifiedBy"". When this user is an admin it is possible that it modifies itself. So the original checked instance is a Javassist proxy, after #writeReplace() it is a plain object. Until now the plain object is ""checked"" and then when its fields are processed the ""modifiedBy"" is again the same Javassist proxy and the processing continues in loops.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-09-09 20:20:40.907,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Sep 09 20:22:21 UTC 2016,,,,,,0|i33glj:,9223372036854775807,,,,,,,,"09/Sep/16 20:20;jira-bot;Commit 3798d0fc3f42c7d2b8b3e8f691d59cf2f4fb0c05 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3798d0f ]

WICKET-6241 CheckingObjectOutputStream should track the original instance, before writeReplace()
","09/Sep/16 20:22;jira-bot;Commit 5ac20266773ec65038af18a57b625d6826b38380 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5ac2026 ]

WICKET-6241 CheckingObjectOutputStream should track the original instance, before writeReplace()
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PageRequestHandlerTracker doesn't work with IRequestHandlerDelegate,WICKET-6237,13003097,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,07/Sep/16 03:08,07/Sep/16 03:27,13/Mar/19 23:18,07/Sep/16 03:27,6.24.0,7.4.0,8.0.0-M1,,,,,,6.25.0,7.5.0,8.0.0-M2,,wicket,,,0,,,,,,,,"From https://github.com/apache/wicket/pull/178:

PageRequestHandlerTracker doesn't work with CryptoMapper.
In mapRequest method in CryptoMapper it is created instance of RequestSettingRequestHandler and PageRequestHandlerTracker doesn't looking for IPageRequestHandler inside IRequestHandlerDelegate.

Reproduce steps:
1 application init method

{code}
@Override
public void init() {
    super.init();
    getRequestCycleListeners().add(new PageRequestHandlerTracker());
    setRootRequestMapper(new CryptoMapper(getRootRequestMapper(), this));
}
{code}

2 Try to get last handler in page or component

{code}
@Override
protected void onBeforeRender() {
    super.onBeforeRender();
    RequestCycle cycle = getRequestCycle();
    IPageRequestHandler lastHandler = PageRequestHandlerTracker.getLastHandler(cycle);
    System.out.println(lastHandler.getPageClass().getCanonicalName());
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2016-09-07 03:08:07.0,,,,,,0|i33b9z:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TableTree#updateNode() fails if no corresponding node is visible,WICKET-6235,13001732,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,svenmeier,svenmeier,31/Aug/16 16:02,31/Aug/16 16:16,13/Mar/19 23:18,31/Aug/16 16:16,6.24.0,7.4.0,8.0.0-M1,,,,,,6.25.0,7.5.0,8.0.0-M2,,wicket-extensions,,,0,,,,,,,,"TableTree#updateNode() tries to locate the corresponding node by visiting all Item children. If this node is not visible currently (e.g. because a parental node is collapsed), the children visitor runs into the table header (which comes after the table body) - causing a ClassCastException when the Item is expected to have a NodeModel, which it doesn't inside the header (or footer).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-31 16:14:28.995,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Aug 31 16:16:19 UTC 2016,,,,,,0|i332vb:,9223372036854775807,,,,,,,,"31/Aug/16 16:14;jira-bot;Commit 19d70083324261cba5418af7a904756a8c2be37f in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=19d7008 ]

WICKET-6235 visit items in the table body only
","31/Aug/16 16:14;jira-bot;Commit efa1a6db247b1b5a9818d69d53f65deada047c00 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=efa1a6d ]

WICKET-6235 visit items in the table body only
","31/Aug/16 16:15;jira-bot;Commit ce14514a5052307b9e4999490da1ec3dc3ff65e1 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ce14514 ]

WICKET-6235 visit items in the table body only
",31/Aug/16 16:16;svenmeier;Items in the table body are visited only now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AutoCompleteTextField issue in Android 5.1.1,WICKET-6136,12955256,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,RaKauf,RaKauf,01/Apr/16 09:42,31/Aug/16 11:18,13/Mar/19 23:18,30/Aug/16 10:27,6.22.0,7.2.0,,,,,,,6.25.0,7.5.0,8.0.0-M2,,wicket-extensions,,,0,,,,,,,,"Quick note: we have only been able to reproduce this issue on Samsung devices running Android 5.1.1. The issue affects Chrome and the Samsung browser, whereas Firefox appears to be fine. _2016-08-15:_ customer told us that the AutoCompleteTextField has also begun to show the erroneous behaviour on Firefox now.

We were unable to reproduce the issue on a Nexus smartphone running Android 6. We were also unable to reproduce the issue on a Sony device running Android 5.1.1.

Reproduction steps:

1. Fire up the provided Quickstart.
2. Enter some text (e.g. ""un"") to summon the list of suggestions.
3. Tap on one of the suggested countries.
4. Observe that no country was selected.",Chrome on Samsung Galaxy Note 4 running Android 5.1.1,,,,,,,,,,,,,,,,,,,,,,,,16/Aug/16 13:45;RaKauf;HomePage.html;https://issues.apache.org/jira/secure/attachment/12823893/HomePage.html,06/Apr/16 07:44;RaKauf;quickstart (wicket 7).zip;https://issues.apache.org/jira/secure/attachment/12797259/quickstart+%28wicket+7%29.zip,01/Apr/16 09:42;RaKauf;quickstart.zip;https://issues.apache.org/jira/secure/attachment/12796508/quickstart.zip,,3.0,,,,,,,,,,,,,,,,,,,2016-04-05 13:53:48.175,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Aug 31 11:18:43 UTC 2016,,,,,,0|i2vic7:,9223372036854775807,,,,,,,,"05/Apr/16 13:53;svenmeier;Works fine here with stock Android browser on 5.1.1.

Please try out latest 7.x.","06/Apr/16 07:43;RaKauf;Hi Sven. Thank you for investigating this issue.

I attempted to reproduce the issue under Wicket 7.2 as per your request. Unfortunately, I still encountered the issue, both in the stock Samsung browser and in Chrome (49.0.2623.105). I have attached the Wicket 7.x Quickstart for your convenience.

Are you trying to reproduce the issue on a Samsung device? As I mentioned in the description, we were unable to reproduce the issue on a Sony device running Android 5.1.1, so it might be manufacturer-specific.","06/Apr/16 08:49;mgrigorov;I can reproduce the problem with Android 5.0 / Samsung device.
The selection works on the second attempt though.","03/May/16 07:23;RaKauf;Given that Martin managed to reproduce the problem, will you be addressing it in Wicket 6.23? Or do you feel that it is too specific of an problem (with a simple yet slightly annoying workaround) to bother fixing?","03/May/16 07:31;mgrigorov;6.23 is already built and voted. It will be released soon!

I am not sure how soon I'll find time for this problem. It is very low on my list of TODOs.
Maybe someone else will pick it up. Or someone will send a patch...","15/Aug/16 07:31;RaKauf;Just a quick update - the customer affected by this issue has reported that after updating to Firefox 48.0, the issue began occurring in Firefox as well. They have also since upgraded to Android 6.0.1, so it would seem that the issue is not limited to Android 5.x.

Customer also reported that the AutoComplete does still work correctly in the Puffin browser.","16/Aug/16 08:48;RaKauf;Looks like the issue has surfaced in Chrome 52 on our Nexus 9 running Android 6.0.1 as well.

As mister Grigorov mentioned earlier, selection does work on the second attempt. However, our application has _show list on focus gain_ set to false, which means that you do not get a second attempt, exacerbating the issue.","16/Aug/16 13:44;RaKauf;I spent some time on the issue today. Looks like the cause lies in the _input_ event being fired when the input element loses focus (e.g. because you click or tap on an option in the auto-complete dropdown). I'll try to explain how I came to this conclusion.

* When the incorrect behavior described in this call occurs, an error is logged to the browser console: _cannot read property 'attributes' of undefined_.
* This occurs in _wicket-autocomplete.js_, in the function _getSelectedValue()_, where the variable _selectableElement_ remains undefined after an assignment.
* The assignment _selectableElement = getSelectableElement(selected)_ fails because _selected_ is _-1_.
* Feels like I have [seen this before|https://issues.apache.org/jira/browse/WICKET-5959] somewhere.

When I click on an option in the autocomplete dropdown, the following sequence of actions occurs:

* First, the _mouseOverFunc_ event handler is triggered and correctly sets _selected_ to a value such as _2_.
* Then, the _inputChange_ event handler is erroneously triggered, and sets _selected_ back to _-1_ (via the _updateChoices()_ subroutine).
* Finally, the _clickFunc_ event handler is triggered, and proceeds to break because _selected_ is _-1_.

I also noticed that the _inputChange_ event handler is called when the input element simply loses focus. As such, the handler being triggered does not seem to be strictly related to clicking on an option in the autocomplete dropdown. Furthermore, I also noticed that the _inputChange_ event handler was never called when I used my desktop's browser rather than my Nexus tablet.

The _inputChange_ event type had me puzzled for a bit. If I understand correctly, it's an abstraction introduced by Wicket to work around some Internet Explorer issues. For modern browsers, it simply appears to bind an event handler to _input_ events on the input element through jQuery.

For further investigation, I created a simpler scenario with a plain input element and a simple jQuery _input_ event handler that logged something to the console. When using my Nexus tablet, entering a character in the input resulted in a log message, and then tapping outside the input to drop focus resulted in yet another log message. When using my desktop, typing a character in the input resulted in a log message, but clicking outside the input to drop focus would not.

I will attach a modified _homepage.html_ file which includes the simple input and event handler mentioned in the previous paragraph.

Looks like there's some fundamentally different behavior between mobile and desktop browsers in this regard, and I'm not sure how to proceed from here. Perhaps a quick and dirty solution would be to also store the last value of the text input, compare against that whenever the _inputChange_ event handler is triggered, and not executing any of the logic in the event handler when the old value matches the new one.

Hope this helps!","26/Aug/16 09:29;svenmeier;I'm debugging this right now, and it seems there are two problems at least:

Sometimes the mouseover-function is not called (which makes sense on a touch device) and in the click-function the selected index is still -1 (resulting in ""cannot read property 'attributes' of undefined"") - this was easy to fix.

There's another problem with the positioning of the popup, which is opened with a offset equalling the current scroll position:
If the window is scrolled between opening of the popup and selection of an entry, the popup is respositioned in onmouseover->render, resulting in the click being invoked on the wrong entry (or none at all if there's no longer an entry under the mouse).","26/Aug/16 12:00;jira-bot;Commit 72a7fb0145fa760df4cfab0aaf26273bb7cde15e in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=72a7fb0 ]

WICKET-6136 mouseOver might not be called
","26/Aug/16 12:00;jira-bot;Commit 829fd93c0f047cac457ce59a82e483783d68407f in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=829fd93 ]

WICKET-6136 mouseOver might not be called
","26/Aug/16 12:00;jira-bot;Commit 628091ab40eea0a26d824927b648899ed01b2a22 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=628091a ]

WICKET-6136 mouseOver might not be called
","26/Aug/16 12:02;svenmeier;I've pushed a first enhancement.

[~RaKauf] perhaps you could give it a try already?","29/Aug/16 14:44;RaKauf;Hey Sven, thank you for taking some time to investigate this issue. I would love to give your candidate fix a try, but I'm afraid I don't know how to merge your change into my Wicket Quickstart environment. Any pointers?","29/Aug/16 14:53;mgrigorov;Just change the version to 7.5.0-SNAPSHOT.
Wicket Quickstart pom.xml has the repository for snapshots already included at the bottom (https://github.com/apache/wicket/blob/1271f9a6cb88baa7eba557281d2f8e470e2fa5dd/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml#L170-L181)","30/Aug/16 07:38;RaKauf;Thank you, Martin.

Sven, I have tried your fix, and it seems to have fixed the issue. I do feel that the code path taken after tapping an option is a bit quirky, though. First, the _mouseOverFunc_ handler is triggered (this seems to happen consistenly on our Nexus at least), which correctly sets the selected element. Following this, the anonymous _inputChange_ handler is triggered, which then enters the default case due to _kc_ being _undefined_ and undoes the selection through _updateChoices()_. Finally, the _clickFunc_ handler is triggered, which now again sets the selected element due to your change. That said, if some devices do indeed not consistently trigger the _mouseOverFunc_ handler, then setting the selected element in the _clickFunc_ handler almost seems to be a necessity.

I was also able to reproduce the scrolling-related issue you mentioned, but while annoying, I'd say it's far less critical than not being able to select any options at all.","30/Aug/16 10:26;svenmeier;inputChange is called, because a 'click' (touch) on an entry will steal the focus from the input - that's expected.

Wrong positioning of the popup seems to be a jQuery issue on mobile devices:

https://github.com/jquery/jquery/issues/3187","30/Aug/16 10:27;svenmeier;Resolving since the main problem with selection is fixed now.

Correct positioning of the popup has to be fixed in jQuery","31/Aug/16 11:18;RaKauf;Huh. I was under the impression that _input_ events should only fire when the input's actual value is changed, not when it merely loses focus.

Regardless, thank you very much for addressing this issue!",,,,,,,,,,,,,,,,,
SecuritySettings.setEnforceMounts() should be applicable for all kind of pages,WICKET-6161,12965199,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,phantom,phantom,05/May/16 07:16,26/Aug/16 15:50,13/Mar/19 23:18,26/Aug/16 15:42,7.2.0,,,,,,,,8.0.0-M2,,,,wicket,,,0,mount,mountBookmarkablePage,security,,,,,"Currently SecuritySettings.setEnforceMounts(true) works only for pages which do have mount point and doesn't work other bookmarkable pages.

Issue discussed here: http://markmail.org/message/ctoac6eq26kt5jve

The point is to disallow of using /wicket/bookmarkable/ for all pages if enforceMounts was set to true.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-26 15:42:33.529,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Aug 26 15:42:33 UTC 2016,,,,,,0|i2x727:,9223372036854775807,,,,,,,,"26/Aug/16 15:42;jira-bot;Commit 4216e09a4cf23179cf9de3a23b1ad989caf7da91 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4216e09 ]

WICKET-6161 SecuritySettings.setEnforceMounts() should be applicable for all kind of pages

Revert 74e7767635b5f1f20c61c07be34c4141e1da2571 from WICKET-5094 and update javadocs
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Button wrongly sets its model object as 'value' attribute,WICKET-6225,12997283,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,15/Aug/16 13:11,24/Aug/16 22:05,13/Mar/19 23:18,15/Aug/16 13:33,6.24.0,7.4.0,,,,,,,6.25.0,7.5.0,8.0.0-M2,,wicket,,,0,,,,,,,,"Currently Button component uses its model object as a value for its 'value' attribute.
This is correct only when Button is used with <input type=""button"">, but is wrong when used with <button>. In the latter case the model object should be used as a child text.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-15 13:26:38.845,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Aug 15 14:33:40 UTC 2016,,,,,,0|i32bfj:,9223372036854775807,,,,,,,,"15/Aug/16 13:26;jira-bot;Commit f5cf5e8558861fa8fbcdcc25e37d71d76bacc209 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f5cf5e8 ]

WICKET-6225 Button wrongly sets its model object as 'value' attribute
","15/Aug/16 13:28;jira-bot;Commit 9b321e38996b1cffef5ef00aa5592277d14afab6 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9b321e3 ]

WICKET-6225 Button wrongly sets its model object as 'value' attribute
","15/Aug/16 13:32;jira-bot;Commit b591b255743bec37ef5ddf640755e234fdcd703d in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b591b25 ]

WICKET-6225 Button wrongly sets its model object as 'value' attribute
","15/Aug/16 14:30;jira-bot;Commit 73ff3da38f34c8781ae367b0be54463d78abd47f in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=73ff3da ]

WICKET-6225 Button wrongly sets its model object as 'value' attribute

If there is no model object then use the text from the markup
","15/Aug/16 14:33;jira-bot;Commit b8d6c23c662912a358b4da2da9828ddbbbe1cba2 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b8d6c23 ]

WICKET-6225 Button wrongly sets its model object as 'value' attribute

If there is no model object then use the text from the markup
","15/Aug/16 14:33;jira-bot;Commit fb0d87b7a06d54fbb1515a58ff50857b3c01c4b6 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fb0d87b ]

WICKET-6225 Button wrongly sets its model object as 'value' attribute

If there is no model object then use the text from the markup
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Infinite redirection when using UrlPathPageParametersEncoder,WICKET-6230,12998449,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,interface,interface,19/Aug/16 10:10,24/Aug/16 21:58,13/Mar/19 23:18,24/Aug/16 21:58,6.22.0,6.24.0,,,,,,,6.25.0,7.5.0,8.0.0-M2,,wicket,,,0,,,,,,,,"When you mount page with UrlPathPageParametersEncoder:
{code}
mount(new MountedMapper(""/test"", TestPage.class, new UrlPathPageParametersEncoder()));
{code}
and then user pass a special parameter value in url which ends with more than one dot and slash (eg. ""../"", "".../"", etc.) then application starts endless redirects. It leads to error in browser such as:
{quote}
The page isn’t redirecting properly
{quote}
Without last slash everything works ok.

I have attached a quickstart. Run this application and enter the following url in your browser:
{code}
http://localhost:8080/test/text/aaa.../
{code}",,,,,,,,,,,,,,,,,,,,,,,,,19/Aug/16 10:11;interface;mountingtest.zip;https://issues.apache.org/jira/secure/attachment/12824545/mountingtest.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-08-19 11:28:20.993,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Aug 24 21:58:39 UTC 2016,,,,,,0|i32imn:,9223372036854775807,,,,,,,,"19/Aug/16 11:15;interface;I think the problem can be inside UrlRenderer.renderRelativeUrl(url) method. This method returns the following results:
{code}
url = test/text/aaa./
result = ../aaa.
{code}
{code}
url = test/text/aaa.../
result = ../aaa.../
{code}

The last if in this method maybe is problematic:
{code}
		// add trailing slash if the url has no query string and ends with ..
		if (renderedUrl.indexOf('?') == -1 && renderedUrl.endsWith(""..""))
		{
			// WICKET-4401
			renderedUrl = renderedUrl + '/';
		}
{code}","19/Aug/16 11:28;mgrigorov;IMO all `../` should be stripped by UrlPathPageParametersEncoder, both in keys and values.
Do you have a valid use case where those should be preserved ?","19/Aug/16 11:31;interface;But this ""aaa..."" is a value for parameter with name ""text"". So this value can be entered by a user.","19/Aug/16 11:41;mgrigorov;If Wicket allows such ""../"" in the url then the web container will try to resolve them. Even if the web container leaves them as such then the browser would do the same.
Try ""https://issues.apache.org/jira/browse/WICKET-6230/../"" in your browser.","19/Aug/16 13:03;interface;Ok, so this url in such form is incorrect and value ""aaa..."" should be escaped (encoded) to be valid? Because for now the usage of MountedMapper with UrlPathPageParametersEncoder to encode page parameters as: /param1Name/param1Value/param2Name/param2Value is not fully proper supported by Wicket.

The same invalid url is generated by Wicket itself, when you create such link:
{code}
add(new BookmarkablePageLink<Void>(""test"", TestPage.class, new PageParameters().add(""text"", ""aaa..."")));
{code}","19/Aug/16 13:11;mgrigorov;Escaping dots should be OK in this case, I think.",19/Aug/16 13:16;interface;But it should be done by a framework when generating page url or by a programmer in code when he/she adds parameters to PageParameters?,19/Aug/16 13:56;mgrigorov;By Wicket.,"24/Aug/16 21:56;jira-bot;Commit e838d029f179e0b80c9035aff9d232d92c261963 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e838d02 ]

WICKET-6230 Infinite redirection when using UrlPathPageParametersEncoder

Treat specially only ""."" and "".."". Any longer sequence of dots should be left as is.
","24/Aug/16 21:57;jira-bot;Commit 25a6b7268f72a5b5225a500b6c3ba42c2a3d55d0 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=25a6b72 ]

WICKET-6230 Infinite redirection when using UrlPathPageParametersEncoder

Treat specially only ""."" and "".."". Any longer sequence of dots should be left as is.
",24/Aug/16 21:58;mgrigorov;It appeared to be a bug in UrlRenderer.,"24/Aug/16 21:58;jira-bot;Commit 1dff8aa94c91731e1f3b86d46a80c0d484d5d8d4 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1dff8aa ]

WICKET-6230 Infinite redirection when using UrlPathPageParametersEncoder

Treat specially only ""."" and "".."". Any longer sequence of dots should be left as is.
",,,,,,,,,,,,,,,,,,,,,,,,
CharSequenceResource calculates wrong length when there are unicode symbols,WICKET-6227,12997565,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,16/Aug/16 12:04,16/Aug/16 12:13,13/Mar/19 23:18,16/Aug/16 12:13,7.4.0,,,,,,,,6.25.0,7.5.0,8.0.0-M2,,wicket,,,0,,,,,,,,"At the moment CharSequenceResource#getLength() looks like:

{code}
@Override
	protected Long getLength(CharSequence data)
	{
		return (long) data.length();
	}
{code}

This returns wrong results when there are unicode symbols like ""\u1234"".

It should use org.apache.wicket.util.string.Strings#lengthInBytes() instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-16 12:12:23.889,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Aug 16 12:13:54 UTC 2016,,,,,,0|i32d67:,9223372036854775807,,,,,,,,"16/Aug/16 12:12;jira-bot;Commit e3f1b4e394d1fa4948e387573cd94833bd673200 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e3f1b4e ]

WICKET-6227 CharSequenceResource calculates wrong length when there are unicode symbols
","16/Aug/16 12:12;jira-bot;Commit d8c5ad3871a7fb3ece7d087bb67738e393da3b7b in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d8c5ad3 ]

WICKET-6227 CharSequenceResource calculates wrong length when there are unicode symbols
","16/Aug/16 12:13;jira-bot;Commit bec52515f1bb2570f09140ba6f457c369f3a56b1 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bec5251 ]

WICKET-6227 CharSequenceResource calculates wrong length when there are unicode symbols
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove recreateBookmarkablePagesAfterExpiry check in AbstractBookmarkableMapper#mapHandler,WICKET-6192,12986160,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,Ravi Knox,Ravi Knox,01/Jul/16 12:33,15/Aug/16 13:06,13/Mar/19 23:18,15/Aug/16 13:06,7.3.0,,,,,,,,7.5.0,8.0.0-M2,,,,,,0,,,,,,,,"In a nutshell that's what we try to archive:
Save a cookie on a client browser under the path of the current page.
The page does have a mandatory named parameter!
If the Session expires. The SessionExpiredPage will read the cookie and start a redirect.

After resolving Ticket [WICKET-6182|https://issues.apache.org/jira/browse/WICKET-6182]:
What happens now is that by the time the AbstractBookmarkableMapper wants to generate the URL of the component, before including the existent parameters,
it does an getRecreateMountedPagesAfterExpiry() check ([see here|https://github.com/apache/wicket/blob/f71a2d33c2ff9dbb669066a3dfc7b58229824b0e/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/AbstractBookmarkableMapper.java#L479]). which answers false and the existing parameters are not added to the new UrlInfo object.

That in return will lead to a failure when calling setPlaceholders(copy, url) ([see here|https://github.com/apache/wicket/blob/f71a2d33c2ff9dbb669066a3dfc7b58229824b0e/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/MountedMapper.java#L206]) and results in a null url return value, that lets wicket default to the generic URL we had before. ",,,,,,,,,,,,,,,,,,,,,,,,,13/Jul/16 22:30;mgrigorov;WICKET-6192.patch;https://issues.apache.org/jira/secure/attachment/12817818/WICKET-6192.patch,01/Jul/16 12:34;Ravi Knox;wicket-sandbox.7z;https://issues.apache.org/jira/secure/attachment/12815745/wicket-sandbox.7z,,,2.0,,,,,,,,,,,,,,,,,,,2016-07-13 22:08:52.214,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Aug 15 13:05:47 UTC 2016,,,,,,0|i30fc7:,9223372036854775807,,,,,,,,"13/Jul/16 22:08;mgrigorov;Any reason why you removed Start.java ?
Please don't make it harder for us to help you!",13/Jul/16 22:30;mgrigorov;Here is my suggested patch for this issue.,"13/Jul/16 22:32;mgrigorov;The idea is to preserve the named path parameters when creating the urls for ajax callbacks.
Without this the logic for finding the required named parameters fails and instead of MountedMapper Wicket uses BookmarkableMapper which has lower compatibility score and acts as a fallback.","18/Jul/16 07:33;Ravi Knox;Hi Martin,

Urls look good to me. All Ajax links point to 'page/param'.

Thanks!

As for the Start.java;
I uploaded the sandbox I use for testing stuff, where I deleted the Start.java.
Thanks for the HeadsUp. I 'll keep an eye out for it next time.","18/Jul/16 07:35;mgrigorov;Thanks for testing it!
I'll apply the patch soon! 
But it will not be part of 6.24/7.4 most probably because they are already being tested and voted.","15/Aug/16 13:00;jira-bot;Commit 9b3d644ac37a9b67f752ea48d1895f71a57aa92a in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9b3d644 ]

WICKET-6192 Remove recreateBookmarkablePagesAfterExpiry check in AbstractBookmarkableMapper#mapHandler
","15/Aug/16 13:05;jira-bot;Commit cf910b0317b60e55b5b9946c857d88102ee600b4 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=cf910b0 ]

WICKET-6192 Remove recreateBookmarkablePagesAfterExpiry check in AbstractBookmarkableMapper#mapHandler
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WicketTester - missing border path,WICKET-6221,12993761,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,marc-g,marc-g,30/Jul/16 20:40,05/Aug/16 13:21,13/Mar/19 23:18,04/Aug/16 19:14,7.4.0,8.0.0-M1,,,,,,,7.5.0,8.0.0-M2,,,,,,0,,,,,,,,"After upgrading from Wicket 7.3.0 to 7.4.0 my tests are failing cause of missing border component which are present in 7.3.0. If I run the application and test it manually there are no problems. 

I'm using a custom Border component to wrap my input fields.

{quote}
java.lang.AssertionError: path: 'form:passwordBorder:passwordBorder_body:password' does not exist for page: CustomerEditPage
{quote}

I don't know exactly whats the problem. You can try it out with the following example project:
https://github.com/MarcGiffing/wicket-spring-boot/
You only have to switch the wicket property in the parent module to 7.4.0.

CustomerEditPageTest

If you can't launch the example project I will try to reproduce the failing test in an simple quickstart project.",,,,,,,,,,,,,,,WICKET-6222,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-03 13:13:17.116,,,no_permission,,,https://github.com/MarcGiffing/wicket-spring-boot/issues/73,,,,,,,,,9223372036854775807,,,Wed Aug 03 19:36:16 UTC 2016,,,,,,0|i31ppj:,9223372036854775807,,,,,,,,"03/Aug/16 13:13;jira-bot;Commit 4f4ab530e96c880c7e5b635f5bb295eedeb7ad47 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4f4ab53 ]

WICKET-6221 WicketTester - missing border path","03/Aug/16 19:31;jira-bot;Commit 2273b397b5f348668fda3d7d8fb9f3806290a11d in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2273b39 ]

WICKET-6221 WicketTester - missing border path","03/Aug/16 19:36;bitstorm;The issue is fixed in the last snapshot version, but I've found another problem with PasswordTextField and WICKET-6211. 

[~marc-g]
To make your tests pass, you should call PasswordTextField#setResetPassword(false) where needed because now PasswordTextField set its model object to null when detached.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Empty redirect on redirect to home page if home page already shown,WICKET-6111,12947702,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,tschoening,tschoening,07/Mar/16 15:23,27/Jul/16 22:26,13/Mar/19 23:18,25/Mar/16 13:49,7.2.0,,,,,,,,6.23.0,7.3.0,8.0.0-M1,,wicket,,,0,,,,,,,,"Wicket seems to produce an empty redirect if a user already opened the home page of an app and gets redirected to the same page by e.g. clicking a link containing the following line:

{CODE}
RequestCycle.get().setResponsePage(Application.get().getHomePage(), ...);
{CODE}

In my case the purpose of the link is to sign out and redirect all users to a well known page afterwards. Involved URLs:

{CODE}
http://localhost:8080/org.example.frontend/?0
http://localhost:8080/org.example.frontend/?0-1.ILinkListener-home.signOut
{CODE}

In this case Wicket creates an empty target URL for a redirect and sends that to my Tomcat 7, which seem to just forward it to the browser, which does nothing. The result is that the user sits on a white page and needs to refresh manually using e.g. F5. In contrast with a qucikstart containing and embedded Jetty, Wicket generates the exact same empty target URL but Jetty seem to resolve it internally to a absolut URL and therefore the requests succeeds now.

Example from the browser using Tomcat 7:

{CODE}
Request URL:http://localhost:8081/org.example.frontend/?3-1.ILinkListener-html-body-pnNav-home.signOut
Request Method:GET
Status Code:302 Found
Remote Address:127.0.0.1:8081
Cache-Control:no-cache, no-store
Content-Length:0
Date:Sun, 06 Mar 2016 19:34:40 GMT
Expires:Thu, 01 Jan 1970 00:00:00 GMT
Location:
Pragma:no-cache
Server:Apache-Coyote/1.1
Set-Cookie:JSESSIONID=[...]; Path=/org.example.frontend/; HttpOnly
{CODE}

And from Jetty:

{CODE}
Request URL:http://localhost:8080/org.example.frontend/?0-1.ILinkListener-home.signOut
Request Method:GET
Status Code:302 Found
Remote Address:[::1]:8080
Response Headers
view source
Cache-Control:no-cache, no-store
Content-Length:0
Date:Mon, 07 Mar 2016 15:12:40 GMT
Expires:Thu, 01 Jan 1970 00:00:00 GMT
Location:http://localhost:8080/org.example.frontend/
Pragma:no-cache
Server:Jetty(9.2.13.v20150730)
{CODE}

Debugging lead to org.apache.wicket.protocol.http.servlet.ServletWebResponse#encodeRedirectURL and #sendRedirect:

This function behaves (nearly) the same for my URLs, the only difference is the following line:

{CODE}
Url originalUrl = Url.parse(url);
{CODE}

In my Tomcat I get a completely empty object, NOT null though, in the quickstart with Jetty I get an object containing ""."". But in the end that doesn't seem to make any difference, both requests go through the following:

{CODE}
if (fullUrl.equals(encodedFullUrl))
{
        // no encoding happened so just reuse the original url
        encodedUrl = url.toString();
}
{CODE}

encodedUrl is ""./"" using Tomcat and Jetty as well, while ""fullUrl"" contains an absolute URL in both cases:

{CODE}
http://localhost:8080/org.example.frontend/
{CODE}

""./"" is returned to ServletWebResponse.sendRedirect and runs into the following:

{CODE}
if (url.startsWith(""./""))
{
        /*
         * WICKET-4260 Tomcat does not canonalize urls, which leads to problems with IE
         * when url is relative and starts with a dot
         */
        url = url.substring(2);
}
{CODE}

And that empties my URL and forwards it to the servlet container, where Jetty instead of Tomcat seems to provide some magic to respond with an absolute URL in the end. But my debugger says that in both cases

{CODE}
httpServletResponse.sendRedirect(url);
{CODE}

gets called with an empty string.","Windows 8.1 x86-64, Tomcat 7.0.67",,,,,,,,,,,,,,,,,,,,,,,,07/Mar/16 15:25;tschoening;empty_redirect.zip;https://issues.apache.org/jira/secure/attachment/12791776/empty_redirect.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-03-25 13:44:43.142,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jul 27 22:24:06 UTC 2016,,,,,,0|i2ua53:,9223372036854775807,,,,,,,,07/Mar/16 15:25;tschoening;Quickstart added,"07/Mar/16 18:39;tschoening;Discussion on the users mailing list, which can't be included as web link for some reason.

http://mail-archives.apache.org/mod_mbox/wicket-users/201603.mbox/<583807698.20160306203900%40am-soft.de>","10/Mar/16 09:40;tschoening;If anybody else is interested, you can easily provide a workaround by overriding WebApplication#newWebResponse and provioding a custom implementation of ServletWebResponse extending the one from Wicket and overriding encodeRedirectURL. The following example implementation resolves the problem for my use case:

{CODE}
@Override
public String encodeRedirectURL(CharSequence url)
{
	String retVal = super.encodeRedirectURL(url);
	if (!retVal.equals(""./""))
	{
		return retVal;
	}

	UrlRenderer			urlRenderer			= this.getUrlRenderer();
	HttpServletResponse	httpServletResponse	= this.getContainerResponse();
	Url					originalUrl			= Url.parse(url);
	String				fullUrl				= urlRenderer.renderFullUrl(originalUrl);
						retVal				= httpServletResponse.encodeRedirectURL(fullUrl);

	return retVal;
}
{CODE}

One needs to duplicate getUrlRenderer though, it might be a good idea to make that abstract and usable by sub classes?

https://ci.apache.org/projects/wicket/apidocs/7.x/org/apache/wicket/protocol/http/WebApplication.html#newWebResponse(org.apache.wicket.request.http.WebRequest,%20javax.servlet.http.HttpServletResponse)","25/Mar/16 13:44;mgrigorov;There is no need of the special treatment of urls starting with ""./"" for Tomcat anymore.
Latest versions of Tomcat (7.0.68, 8.0.33, 8.5.0) handle properly such urls.
Now the problem is that if we remove this ""if"" statement then applications which run on old Tomcat may fail. WICKET-4260 had problems with IE8 which is not supported anymore, so it may be OK with newer IE versions.","25/Mar/16 13:48;jira-bot;Commit f5526509340234e730c5e252da7c7d3cdee91294 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f552650 ]

WICKET-6111 Empty redirect on redirect to home page if home page already shown

Remove the workaround for the incorrect behavior in old Tomcat versions.
","25/Mar/16 13:49;mgrigorov;I've removed the workaround introduced for WICKET-4260.
Applications are recommended to upgrade to latest Tomcat if they face this problem.","25/Mar/16 13:49;jira-bot;Commit ae2d5167c66531fdb13451645e82f5063c8cf3cc in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ae2d516 ]

WICKET-6111 Empty redirect on redirect to home page if home page already shown

Remove the workaround for the incorrect behavior in old Tomcat versions.
","25/Mar/16 13:50;jira-bot;Commit 77c94d57111aadf1876a35cde3a6783a2cfec6ea in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=77c94d5 ]

WICKET-6111 Empty redirect on redirect to home page if home page already shown

Remove the workaround for the incorrect behavior in old Tomcat versions.
","25/Mar/16 13:53;mgrigorov;I've tested the new code with:
a) web servers: Tomcat 7.0.68, 8.0.33, 8.5.0 and Jetty 9.2.13
b) browsers: Google Chrome 49, Firefox 45, IE 9 & 11","25/Mar/16 14:57;tschoening;Just another point of view: Recommending upgrading to the latest Tomcat might be a bit to fast, even the current Ubuntu 14.04 LTS Server provides ""only"" version 7.0.52[1]. Regarding the original bug report[2] the URL handling issue was fixed in 7.0.28|30, so using 14.04 should be save, but 12.04 is still supported as well, e.g. I use it in production currently, and that only provides Tomcat 7.0.26, so most likely with incorrect(?) URL handling. You can't expect people to bypass their package manager IF(!) they run into the problem of WICKET-4260. I wouldn't, I would need to add exactly that workaround to Wicket which you just removed. But since WICKET-4260 at least a lot of IE installations should have been upgraded already, so it might be OK to remove until people really complain.

[1]: http://packages.ubuntu.com/search?keywords=tomcat7
[2]: https://bz.apache.org/bugzilla/show_bug.cgi?id=53062#c8","25/Mar/16 17:10;mgrigorov;Such applications will have to use older version of Wicket as well.
I see no better solution. ","29/Mar/16 08:04;tschoening;I've tested 7.3.0.0-SNAPSHOT including your change and it does fix my mentioned problem, but in my web browser's dev tools I still get ""./"" as Location header even with a most current version of Tomcat 7. Is this the correct behavior? After reading Bug 53062 of Tomcat7 I thought it should send absolute URLs. Or do they only need to not send malformed absolute URLs, like they did in your report, and are free to send proper relative ones and do that now at least in some cases? I have the exact same case like in your bug report: http://localhost:8080/de.am_soft.sm_mtg.frontend[...].

[1]: https://bz.apache.org/bugzilla/show_bug.cgi?id=53062#c6","29/Mar/16 08:13;mgrigorov;There are many improvements in this area in Tomcat in the more recent versions. Check https://tomcat.apache.org/tomcat-7.0-doc/changelog.html and search for ""redirect"".
The one you look for is https://bz.apache.org/bugzilla/show_bug.cgi?id=56917.","27/Jul/16 22:24;mkrivan;Unfortunately it did not resolved not in 7.3.0 and 7.4.0 as well at least working with Glassfish 3.1.2.2. Maybe the problem is a little bit different but it appeared in version 7.3.0 first. It was good with 7.1.0 and 7.0.0. With 7.2.0 was something strange as well.
When an application mounted at root point, all of the first try to access the root point will be failed using IE11. It works with Chrome and Firefox. I did deep investigation and I have found that the redirect location looks something like http://localhost:port;jsessionid=abcd. If this happens 403 status occurs. But if return with http://localhost:port/;jsessionid=abcd everything works perfect. The solution is based on Thorsten Schöning comment but a little bit modified:

{noformat}
	public class WicketApplication extends WebApplication
	{
		...

		@Override
		public Class<? extends BasePage> getHomePage() {
			return IndexPage.class; // it has no mount mapping point defined because it is the root HomePage class
		}
		
		@Override
		protected WebResponse newWebResponse(WebRequest webRequest, HttpServletResponse httpServletResponse) {
			return new MyWebResponse((ServletWebRequest) webRequest, httpServletResponse);
		}
	}

	import org.apache.wicket.protocol.http.servlet.ServletWebRequest;
	import org.apache.wicket.protocol.http.servlet.ServletWebResponse;
	import org.apache.wicket.request.Url;
	import org.apache.wicket.request.UrlRenderer;

	public class MyWebResponse extends ServletWebResponse {

		private final static Pattern URL_PATTERN = Pattern.compile(""^(?:(https?)://)?([A-Za-z0-9\\-\\.]+)(?::([0-9]+))?(/)?(.*)$"");
		private final ServletWebRequest servletWebRequest;
		private final HttpServletResponse httpServletResponse;

		public MyWebResponse(ServletWebRequest servletWebRequest, HttpServletResponse httpServletResponse) {
			super(servletWebRequest, httpServletResponse);
			this.servletWebRequest = servletWebRequest;
			this.httpServletResponse = httpServletResponse;
		}

		private String ifNull(String o, String nullValue) {
			return o == null ? nullValue : o;
		}
		
		private String addMissingRootToUrl(String url) { // this is the correction util for missing root path (/)
			if (StringUtils.isBlank(url)) {
				return url;
			}
			Matcher m = URL_PATTERN.matcher(url);
			if (m.find()) {
				String protocol = ifNull(m.group(1), """");
				String host = ifNull(m.group(2), """");
				String port = ifNull(m.group(3), """");
				String root = ifNull(m.group(4), ""/"");
				String remaining = ifNull(m.group(5), """");
				StringBuilder resultUrl = new StringBuilder();
				if (StringUtils.isNotBlank(protocol)) {
					resultUrl.append(protocol).append(""://"");
				}
				if (StringUtils.isNotBlank(host)) {
					resultUrl.append(host);
				}
				if (StringUtils.isNotBlank(port)) {
					resultUrl.append("":"").append(port);
				}
				if (StringUtils.isNotBlank(root)) {
					resultUrl.append(root);
				}
				resultUrl.append(remaining);
				return resultUrl.toString();
			} else {
				return url;
			}
		}

		@Override
		public String encodeRedirectURL(CharSequence url) {
			String retVal = super.encodeRedirectURL(url); // this generates the problem for app root access in IE11
			if (!retVal.startsWith(""./"")) {
				return retVal;
			}
			UrlRenderer urlRenderer = new UrlRenderer(servletWebRequest);
			Url originalUrl = Url.parse(url);
			String fullUrlStr = urlRenderer.renderFullUrl(originalUrl);
			retVal = httpServletResponse.encodeRedirectURL(fullUrlStr);
			retVal = addMissingRootToUrl(retVal); // finally this is the corrected absolute path for 302 status message Location part
			return retVal; // this way IE11 works properly in Wicket 7.3.0 and 7.4.0 as well
		}
	}
{noformat}

Using this approach the Wicket is working again with IE11.
I know that it should be nicer approach but I could only solve this way.
I hope this helps to you.",,,,,,,,,,,,,,,,,,,,,,
WICKET-6172 makes TagTester.createTagsByAttribute stop working,WICKET-6173,12974343,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,bitstorm,bitstorm,31/May/16 20:34,27/Jul/16 21:21,13/Mar/19 23:18,02/Jun/16 09:30,,,,,,,,,7.4.0,8.0.0-M1,,,,,,0,,,,,,,,WICKET-6172 breaks TagTester.createTagsByAttribute as close tags are no more found.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-31 20:37:53.412,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jul 27 21:21:12 UTC 2016,,,,,,0|i2yrcf:,9223372036854775807,,,,,,,,"31/May/16 20:37;jira-bot;Commit 7febb298bc91b0619a162fb1271a69eff8aedf1a in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7febb29 ]

WICKET-6173 WICKET-6172 makes TagTester.createTagsByAttribute stop
working","31/May/16 20:41;jira-bot;Commit 8fe5a70d70c9a512fbfd35df9915ecea0237f548 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8fe5a70 ]

WICKET-6173 WICKET-6172 makes TagTester.createTagsByAttribute stop
working","17/Jun/16 16:34;jira-bot;Commit 86009a4436cf76b76a12e3c7f4dcb886c2041cf0 in wicket's branch refs/heads/WICKET-6183 from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=86009a4 ]

WICKET-6173 WICKET-6172 makes TagTester.createTagsByAttribute stop
working",27/Jul/16 11:47;hebelt;Wicket 6.24 is broken too. Can you fix this for 6.25 please?,27/Jul/16 12:11;mgrigorov;Please create a new ticket with a demo app with unit tests that fails.,"27/Jul/16 21:21;jira-bot;Commit 996e17c3c625411c14206c14cf6a6ac4e2296dc7 in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=996e17c ]

WICKET-6173 WICKET-6172 makes TagTester.createTagsByAttribute stop
working",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enclosure broken within Border/Panel,WICKET-6217,12992909,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,jonas,jonas,27/Jul/16 12:22,27/Jul/16 20:19,13/Mar/19 23:18,27/Jul/16 16:30,7.4.0,,,,,,,,7.5.0,8.0.0-M2,,,,,,0,,,,,,,,"One of our Panels that use Enclosure within a Border no longer works on Wicket 7.4.0, while on 7.3.0 it worked fine. I've created a simple application that reproduces the problem (see attachment). The stack trace looks like this:

java.lang.IllegalArgumentException: Argument 'markup' may not be null.
	at org.apache.wicket.util.lang.Args.notNull(Args.java:41)
	at org.apache.wicket.markup.MarkupStream.<init>(MarkupStream.java:65)
	at org.apache.wicket.markup.html.internal.Enclosure.getChild(Enclosure.java:136)
	at org.apache.wicket.markup.html.internal.Enclosure.isVisible(Enclosure.java:171)
	at org.apache.wicket.Component.determineVisibility(Component.java:4403)
	at org.apache.wicket.Component.isVisibleInHierarchy(Component.java:2152)
	at org.apache.wicket.Component.isStateless(Component.java:2069)
	at org.apache.wicket.Page$2.component(Page.java:481)
	at org.apache.wicket.Page$2.component(Page.java:477)
	at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:144)
	at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:162)
	at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:162)
	at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:123)
	at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:968)
...

Cheers,
Jonas
",,,,,,,,,,,,,,,,,,,,,,,,,27/Jul/16 12:23;jonas;6217.zip;https://issues.apache.org/jira/secure/attachment/12820433/6217.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-07-27 13:54:20.63,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jul 27 16:29:34 UTC 2016,,,,,,0|i31kg7:,9223372036854775807,,,,,,,,"27/Jul/16 13:54;jira-bot;Commit 615eff88fd48df2ff2493be18d796dac9e0219b6 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=615eff8 ]

WICKET-6217 Enclosure broken within Border/Panel","27/Jul/16 15:14;jira-bot;Commit 2e2ef50f62b3b7042f15423ec0c03688273b131c in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2e2ef50 ]

WICKET-6217 Added test case and improved code
","27/Jul/16 16:29;jira-bot;Commit 29d832f03220837fd14715c6a7e0c7350667fe1f in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=29d832f ]

WICKET-6217 Enclosure broken within Border/Panel","27/Jul/16 16:29;jira-bot;Commit 936b0336d74b101f84e03afb3c1a21001a52f842 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=936b033 ]

WICKET-6217 Added test case and improved code
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dequeue auto component can't resolve components if they are nested in child markup,WICKET-5730,12748880,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,bitstorm,bitstorm,17/Oct/14 12:47,25/Jul/16 16:36,13/Mar/19 23:18,02/Nov/14 22:25,7.0.0-M3,,,,,,,,7.0.0-M4,,,,,,,0,,,,,,,,"If a container has an auto component (ex: enclouse) in its markup but this later is nested inside a child, the autocomponent won't be resolved if child is a IQueueRegion. For example (taken from quickstart):

{code}
        <span wicket:id=""myBorder""> 
	   bar
	   
	   <wicket:enclosure>
              <span wicket:id=""c"">c</span>
	   </wicket:enclosure>
	</span>
{code}",,,,,,,,,,,,,,,,,WICKET-6216,,,,,,,,17/Oct/14 12:48;bitstorm;QueueBorder.tar.gz;https://issues.apache.org/jira/secure/attachment/12675475/QueueBorder.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2014-10-21 12:38:15.04,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 21 16:19:11 UTC 2014,,,,,,0|i21am7:,9223372036854775807,,,,,,,,17/Oct/14 12:49;bitstorm;A patch on its way...,"21/Oct/14 12:38;jira-bot;Commit db5be6ab05545e1bb95f566c3aeb23e05cf93437 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=db5be6a ]

WICKET-5730 Dequeue auto component can't resolve components if they are
nested in child markup
","21/Oct/14 12:47;bitstorm;I've found this issue while I was tring to port my main app from 6.x to 7.x. Most of the problems were related to Enclosure and  Border component. To solve the problem I've expanded markup filters HtmlHandler and RelativePathPrefixHandler. I've also refactored a little bit the component queuing code.

PS: I've forgotten to add a test case for the issue :).","21/Oct/14 16:19;jira-bot;Commit 6b879633f7d6f4cde571f510d8cc7ed4f09da1bb in wicket's branch refs/heads/improvingQueuing from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6b87963 ]

WICKET-5730 Dequeue auto component can't resolve components if they are
nested in child markup
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Closing a ModalWindow with jQuery 2.2.0 produces javascript errors,WICKET-6108,12946032,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,alexgrant,alexgrant,02/Mar/16 03:34,24/Jul/16 18:53,13/Mar/19 23:18,02/Mar/16 16:33,6.22.0,,,,,,,,6.23.0,7.3.0,8.0.0-M1,,wicket-extensions,,,0,,,,,,,,"I am using DynamicJQueryResourceReference, which in 6.22.0 uses jQuery 2.2.0 on modern browsers. After attempting to upgrade to 6.22.0 I discovered if I try to close a ModalWindow (using ModalWindow.close(AjaxRequestTarget) ) I receive a javascript error in the browser

In Chrome the error is

Uncaught TypeError: e.stopPropagation is not a function
jQuery.Event.stopPropagation @ jquery-2.2.0-ver-1456879150165.js:5020
jQuery.extend.Event.stop @ wicket-event-jquery-ver-1456879150165.js:193
jQuery.extend.Ajax._handleEventCancelation @ wicket-ajax-jquery-ver-1456879150165.js:1941
(anonymous function) @ wicket-ajax-jquery-ver-1456879150165.js:1995
fire @ jquery-2.2.0-ver-1456879150165.js:3182
self.add @ jquery-2.2.0-ver-1456879150165.js:3241
jQuery.fn.ready @ jquery-2.2.0-ver-1456879150165.js:3491
jQuery.fn.init @ jquery-2.2.0-ver-1456879150165.js:2922
jQuery @ jquery-2.2.0-ver-1456879150165.js:75
jQuery.extend.Event.add @ wicket-event-jquery-ver-1456879150165.js:228
(anonymous function) @ wicket-ajax-jquery-ver-1456879150165.js:1972
jQuery.extend.each @ jquery-2.2.0-ver-1456879150165.js:360
jQuery.extend.Ajax.ajax @ wicket-ajax-jquery-ver-1456879150165.js:1971
settings.onClose @ VM284:13Wicket.Window.close @ modal-ver-1456880110679.js:842
(anonymous function) @ VM287:14",,,,,,,,,,,,,,,,,,,,,WICKET-6214,,,,02/Mar/16 03:34;alexgrant;modal.zip;https://issues.apache.org/jira/secure/attachment/12790855/modal.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-03-02 08:07:00.73,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Jul 24 18:53:37 UTC 2016,,,,,,0|i2u0dr:,9223372036854775807,,,,,,,,02/Mar/16 03:34;alexgrant;I have attached a quick start - modal.zip.,02/Mar/16 03:35;alexgrant;I also tried upgrading to jQuery 2.2.1 but still received the same error (the quick start includes this and you can switch between them in WicketApplication.init() ).,"02/Mar/16 08:07;mgrigorov;Looks like a bug in jQuery 2.2.x. It fails also with Firefox.
It works well in debug mode though :-/
1.12.x also works fine.","02/Mar/16 16:31;jira-bot;Commit b4c5bd8aa70ed19fd5d9eccf2379cff08a7c1d19 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b4c5bd8 ]

WICKET-6108 Closing a ModalWindow with jQuery 2.2.0 produces javascript errors

Wicket should not try to stop 'domready' events.
In case of 'domready' Wicket uses jQuery.ready(handler) instead of jQuery.on(eventName, handler) and this makes the difference.

See https://github.com/jquery/jquery/issues/2963
","02/Mar/16 16:32;jira-bot;Commit ee56204b14b4b64eb5dab2e699c180ddc92f06c7 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ee56204 ]

WICKET-6108 Closing a ModalWindow with jQuery 2.2.0 produces javascript errors

Wicket should not try to stop 'domready' events.
In case of 'domready' Wicket uses jQuery.ready(handler) instead of jQuery.on(eventName, handler) and this makes the difference.

See https://github.com/jquery/jquery/issues/2963
","02/Mar/16 16:33;jira-bot;Commit 7b31893a030ade58ce10519a0ac0296ca8207058 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7b31893 ]

WICKET-6108 Closing a ModalWindow with jQuery 2.2.0 produces javascript errors

Wicket should not try to stop 'domready' events.
In case of 'domready' Wicket uses jQuery.ready(handler) instead of jQuery.on(eventName, handler) and this makes the difference.

See https://github.com/jquery/jquery/issues/2963
",02/Mar/16 16:33;mgrigorov;Thanks for reporting!,"02/Mar/16 23:25;alexgrant;Thank you for fixing that so promptly; much better!
Do you happen to have any idea when 6.23.0 will be released? We can't get the security fixes in 6.22.0 without this fix.","06/Mar/16 14:55;jira-bot;Commit fe3a6caf09bedb537f98cc157049584350e5877e in wicket's branch refs/heads/pr-160-master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fe3a6ca ]

WICKET-6108 Closing a ModalWindow with jQuery 2.2.0 produces javascript errors

Wicket should not try to stop 'domready' events.
In case of 'domready' Wicket uses jQuery.ready(handler) instead of jQuery.on(eventName, handler) and this makes the difference.

See https://github.com/jquery/jquery/issues/2963
","24/Jul/16 18:51;jira-bot;Commit 2f7a4e80bd1c215892c9a51273c521b613940d30 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2f7a4e8 ]

WICKET-6108 revert Event.fix(): passed event should always be fixed
","24/Jul/16 18:52;jira-bot;Commit e79fcb8787187108e8a16b2ae9ababecfcc76cf2 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e79fcb8 ]

WICKET-6108 revert Event.fix(): passed event should always be fixed
","24/Jul/16 18:53;jira-bot;Commit d380b638dd122fbe148b6a7adf1aebc10b9a0d41 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d380b63 ]

WICKET-6108 revert Event.fix(): passed event should always be fixed
",,,,,,,,,,,,,,,,,,,,,,,,
Test fail when non empty model is set to PasswordTextField,WICKET-6215,12992106,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,kevin94420,kevin94420,24/Jul/16 18:10,24/Jul/16 18:47,13/Mar/19 23:18,24/Jul/16 18:47,7.5.0,8.0.0-M1,,,,,,,7.5.0,8.0.0-M2,,,wicket,,,0,,,,,,,,"Since WICKET-6211 changes, when we set a non empty model to PasswordTextField, junit tests which try to start and assert rendered page failed.

This is due to the clean of password text field model object, when component is detached, which makes the page dirty, then create a new page id and finally send a redirect. At the end we have an infinite loop in request execution, and test failed on ""Possible infinite redirect detected. Bailing out."".

One possible solution is to change the call setModelObject(null) (responsible of dirty state) by getModel().setObject(null) in PasswordTextField.",JUnit tests with WicketTester.,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-24 18:47:01.933,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Jul 24 18:47:23 UTC 2016,,,,,,0|i31fhr:,9223372036854775807,,,,,,,,"24/Jul/16 18:47;jira-bot;Commit 6ebd64afc878a45b070d72adfcda797b9550fe08 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6ebd64a ]

WICKET-6215 use getModel().setObject(null) ínstead
","24/Jul/16 18:47;jira-bot;Commit ff3de1937d50ea28c8816715e4cd0e703440eff5 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ff3de19 ]

WICKET-6215 use getModel().setObject(null) ínstead
","24/Jul/16 18:47;svenmeier;You're absolutely right. I should have look more closely how FileUploadField is doing it, i.e. getModel().setObject(null).

Many thanks for testing this so early.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxRequestTarget.focusComponent does not work in modal window,WICKET-5858,12782212,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,klopfdreh,mikulka,mikulka,16/Mar/15 14:27,19/Jul/16 22:14,13/Mar/19 23:18,18/Mar/15 09:59,6.19.0,,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"Opening modal window and focusing a field in it does not work anymore.

This worked in Wicket 6.16.0 and older versions, but does not work in 6.17.0, 6.18.0 and 6.19.0.

This is basically same issue as WICKET-5781 but it was wrongly marked as duplicate of WICKET-5755 and resolved in 6.19.0. They are actually different problems and this problem is still not fixed in 6.19.0.",,,,,,,,,,,,,,,,,,,,,WICKET-6209,,,,16/Mar/15 14:31;mikulka;WICKET-5858.zip;https://issues.apache.org/jira/secure/attachment/12704781/WICKET-5858.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2015-03-17 15:57:49.415,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jul 19 22:14:42 UTC 2016,,,,,,0|i26t47:,9223372036854775807,,,,,,,,"16/Mar/15 14:31;mikulka;QuickStart example project. Clicking link opens modal window and field in modal window gets focused with Wicket 6.16.0, but no with Wicket 6.19.0.","17/Mar/15 15:57;jira-bot;Commit 95d65069ba45d611182afc8332614f128ad7ea36 in wicket's branch refs/heads/wicket-6.x from [~klopfdreh]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=95d6506 ]

WICKET-5858
","17/Mar/15 16:01;jira-bot;Commit a9ddabc70f5c0de656475c74710163fee9ba6c12 in wicket's branch refs/heads/master from [~klopfdreh]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a9ddabc ]

WICKET-5858",17/Mar/15 16:06;klopfdreh;Fixed in 6.20.0 / 7.0.0,"17/Mar/15 16:11;klopfdreh;Can you test it by using the current SNAPSHOT? I tested it with current versions of Safari / FF / Chrome and it seems to work on every platform, now.",17/Mar/15 20:50;mgrigorov;Is WICKET-5564 still working ?,"17/Mar/15 21:00;klopfdreh;You can wrap setTimeout in setTimeout, so this should continue working.","17/Mar/15 21:06;mgrigorov;Actually with WICKET-5564 we have removed the setTimeout() because it was causing issues.
Now I see more code is being put back in setTimeout().","17/Mar/15 21:15;klopfdreh;This is a different place. You said that you removed the timeout in ""steps.push(function(notify)"", but the setTimeout I applied is in the function ""requestFocus: function()"". 

The reason why I applied it is that if a modal window is opened it is done within a setTimeout - the call to request the focus is simply added behind that. So the focus is requested before the modal window is opened and the field is not receiving the focus:

<![CDATA[(function(){var element = document.getElementById(""content3"");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className=""w_blue"";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.mask=""semi-transparent"";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({""u"":""./?0-1.IBehaviorListener.1-window"",""c"":""window2""}); };
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();(function(){Wicket.Focus.setFocusOnId('field4');})();]]>",17/Mar/15 21:19;klopfdreh;Further information: http://stackoverflow.com/questions/1096436/document-getelementbyidid-focus-is-not-working-for-firefox-or-chrome,"17/Mar/15 21:34;mgrigorov;OK. Hopefully there won't be more regressions!
Thanks, Tobias!","17/Mar/15 21:44;klopfdreh;That you removed the timeout of https://issues.apache.org/jira/browse/WICKET-5564 is perfectly ok, because the whole code of requesting the focus is done async and this might cause issues if two focus requests within ajax calls are made.

I only set the focus request of the field to setTimeout, which will be delegated to the native component. All other code is done sync:

var WF = Wicket.Focus;
if (WF.refocusLastFocusedComponentAfterResponse && WF.lastFocusId) {
......

I don't see issues with this change, but you got lot more experience with this topic, so may we can discuss it.","18/Mar/15 08:56;mikulka;Tested current SNAPSHOT and focus in modal window works now (tested Firefox 36, Chrome 41, Opera 28, IE 11).","19/Jul/16 21:32;jira-bot;Commit 7fe591fa301f4e7da65141643c428ea9a3f01aa6 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7fe591f ]

WICKET-6209 move try-catch into function which is invoked via #setTimeout(), so IE errors get caught

;removed workaround for WicketWICKET-5755, i.e. directly call #requestFocus() since it now always uses #setTimeout() to request focus (see WICKET-5858)
","19/Jul/16 21:32;jira-bot;Commit 294de69449850b761f647a57fd13a46265aa4cb9 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=294de69 ]

WICKET-6209 move try-catch into function which is invoked via #setTimeout(), so IE errors get caught

;removed workaround for WicketWICKET-5755, i.e. directly call #requestFocus() since it now always uses #setTimeout() to request focus (see WICKET-5858)
","19/Jul/16 21:33;jira-bot;Commit 4d10d11a7894617364d23ac3a4f3068a60f7ec62 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4d10d11 ]

WICKET-6209 move try-catch into function which is invoked via #setTimeout(), so IE errors get caught

;removed workaround for WicketWICKET-5755, i.e. directly call #requestFocus() since it now always uses #setTimeout() to request focus (see WICKET-5858)
","19/Jul/16 22:14;jira-bot;Commit b93e1ba557f85cdbf77fd44a14721918feb23910 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b93e1ba ]

WICKET-6209 move try-catch into function which is invoked via #setTimeout(), so IE errors get caught

;removed workaround for WicketWICKET-5755, i.e. directly call #requestFocus() since it now always uses #setTimeout() to request focus (see WICKET-5858)
",,,,,,,,,,,,,,,,,,,
Restoring focus after Ajax replace no longer works in IE8,WICKET-5755,12754216,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,svenmeier,svenmeier,10/Nov/14 18:12,19/Jul/16 22:14,13/Mar/19 23:18,13/Nov/14 15:00,6.17.0,,,,,,,,6.19.0,7.0.0-M4,,,wicket,,,0,,,,,,,,"In IE8 focus is no longer reliably restored to the former focus owner after Ajax request.

This regression is caused by WICKET-5564.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-11 08:13:03.75,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jul 19 22:14:40 UTC 2016,,,,,,0|i226zr:,9223372036854775807,,,,,,,,"10/Nov/14 18:13;svenmeier;requestFocus() still has to be called asynchronously, otherwise focus will no be reliably set.","11/Nov/14 08:13;mgrigorov;Does it work well with newer versions of IE (9+) ?
If YES then maybe we should make it conditional: if (ie8) async else sync.","11/Nov/14 15:43;svenmeier;My customer works solely with IE8, I'll check whether I can get hold on IE 9 for comparison.","13/Nov/14 13:41;jira-bot;Commit 5e1ef91dcdc1026e13056ee21d6ba98638f37dd8 in wicket's branch refs/heads/wicket-6.x from svenmeier
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5e1ef91 ]

WICKET-5755 requestFocus must still be called via setTimeout in IE<9
","13/Nov/14 13:42;svenmeier;Just tested with IE9*, for that version the setTimout()-workaround is no longer needed.

*https://www.modern.ie/en-us/virtualization-tools","13/Nov/14 13:56;jira-bot;Commit a093deecefbab082e09116b42006ab8079a7516e in wicket's branch refs/heads/master from svenmeier
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a093dee ]

WICKET-5755 requestFocus must still be called via setTimeout in IE<9
",13/Nov/14 15:00;svenmeier;for IE<9 the previous solution with setTimeout() is restored; for IE>=9 this workaround is no longer necessary,"19/Jul/16 21:32;jira-bot;Commit 7fe591fa301f4e7da65141643c428ea9a3f01aa6 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7fe591f ]

WICKET-6209 move try-catch into function which is invoked via #setTimeout(), so IE errors get caught

;removed workaround for WicketWICKET-5755, i.e. directly call #requestFocus() since it now always uses #setTimeout() to request focus (see WICKET-5858)
","19/Jul/16 21:32;jira-bot;Commit 294de69449850b761f647a57fd13a46265aa4cb9 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=294de69 ]

WICKET-6209 move try-catch into function which is invoked via #setTimeout(), so IE errors get caught

;removed workaround for WicketWICKET-5755, i.e. directly call #requestFocus() since it now always uses #setTimeout() to request focus (see WICKET-5858)
","19/Jul/16 21:33;jira-bot;Commit 4d10d11a7894617364d23ac3a4f3068a60f7ec62 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4d10d11 ]

WICKET-6209 move try-catch into function which is invoked via #setTimeout(), so IE errors get caught

;removed workaround for WicketWICKET-5755, i.e. directly call #requestFocus() since it now always uses #setTimeout() to request focus (see WICKET-5858)
","19/Jul/16 22:14;jira-bot;Commit b93e1ba557f85cdbf77fd44a14721918feb23910 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b93e1ba ]

WICKET-6209 move try-catch into function which is invoked via #setTimeout(), so IE errors get caught

;removed workaround for WicketWICKET-5755, i.e. directly call #requestFocus() since it now always uses #setTimeout() to request focus (see WICKET-5858)
",,,,,,,,,,,,,,,,,,,,,,,,,
JMX Initializer's usage of CGLIB makes it impossible to upgrade to CGLIB 3.2.3,WICKET-6180,12979356,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,15/Jun/16 13:04,27/Jun/16 07:20,13/Mar/19 23:18,16/Jun/16 16:59,8.0.0-M1,,,,,,,,7.4.0,8.0.0-M1,,,wicket-jmx,,,0,,,,,,,,"See https://github.com/cglib/cglib/issues/75 for more details.

In short: 
- the class loader should be provided
- the usage of the special naming strategy leads to broken class definition caching
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-06-16 16:52:02.929,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jun 27 07:20:15 UTC 2016,,,,,,0|i2zhuf:,9223372036854775807,,,,,,,,"16/Jun/16 16:52;jira-bot;Commit 40d7994028551d2104dbdf0172ed50f20ab4362f in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=40d7994 ]

WICKET-6180 JMX Initializer's usage of CGLIB makes it impossible to upgrade to CGLIB 3.2.3

Set the application classloader as a loader for the newly created proxies. This way they might be unloaded (e.g. in OSGi environment).
","16/Jun/16 16:52;jira-bot;Commit bb9141058292241d3df9d06b001621d319b3a039 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bb91410 ]

WICKET-6180 JMX Initializer's usage of CGLIB makes it impossible to upgrade to CGLIB 3.2.3

Set the application classloader as a loader for the newly created proxies. This way they might be unloaded (e.g. in OSGi environment).
","16/Jun/16 16:59;mgrigorov;Fixed #1 - set class loader.
#2 (the problem with the naming strategy) - this will be improved in CGLIB. Nothing to do on our side.","27/Jun/16 07:20;jira-bot;Commit 53fdbc915fe16a8fb39445431c406f1a9b12e111 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=53fdbc9 ]

WICKET-6180 Update CGLIB to 3.2.4

https://github.com/cglib/cglib/issues/75
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enclosures rendered twice in derived component,WICKET-6187,12980624,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,wk,wk,19/Jun/16 05:31,21/Jun/16 17:51,13/Mar/19 23:18,21/Jun/16 17:51,7.3.0,,,,,,,,7.4.0,8.0.0-M1,,,,,,0,,,,,,,,"Minimal changes to the Quickstart causes it:

Add this to the HomePage:
{code:title=HomePage.html|html}
<p wicket:enclosure=""version"">
    Please mention the correct Wicket version: <wicket:container wicket:id=""version"">1.5-SNAPSHOT</wicket:container>.
</p>
<wicket:child/>
{code}

And then a new derived page:

{code:title=NewPage.java|java}
public class NewPage extends HomePage {
    public NewPage(PageParameters parameters) {
        super(parameters);

        add(new Label(""id"", ""test""));
    }
}
{code}
{code:title=NewPage.html|html}
<wicket:extend xmlns:wicket=""http://wicket.apache.org"">
    <div wicket:enclosure=""id"">
        xxx
        <wicket:container wicket:id=""id""></wicket:container>
    </div>
</wicket:extend>
{code}

Will fail with the following exception:

{code}
org.apache.wicket.markup.MarkupException: The component [Component id = version] was rendered already. You can render it only once during a render phase. Class relative path: org.apache.wicket.markup.html.basic.Label:version
	at org.apache.wicket.Page.componentRendered(Page.java:211) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.Component.rendered(Component.java:2623) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.Component.internalRender(Component.java:2384) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.Component.render(Component.java:2308) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1521) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1724) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1699) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1654) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:70) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.Component.internalRenderComponent(Component.java:2565) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1663) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.Component.internalRender(Component.java:2380) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.Component.render(Component.java:2308) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1521) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1724) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.Page.onRender(Page.java:879) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:141) ~[wicket-core-7.3.0.jar:7.3.0]
	at org.apache.wicket.Component.internalRender(Component.java:2380) ~.[wicket-core-7.3.0.jar:7.3.0]
.....
{code}

",,,,,,,,,,,,,,,,,WICKET-6088,,,,,,,,19/Jun/16 05:35;wk;WICKET6187.zip;https://issues.apache.org/jira/secure/attachment/12811696/WICKET6187.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-06-20 16:26:48.421,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jun 21 15:26:15 UTC 2016,,,,,,0|i2zpbb:,9223372036854775807,,,,,,,,19/Jun/16 05:35;wk;Attached quickstart with unit test,"19/Jun/16 05:43;wk;Quick investigation reveals that this is caused by two {{InlineEnclosure}} s in the same scope. It looks like the internal counter in {{InlineEnclosureHandler}} is being reset for the derived component, however they share the same scope. A temporary fix that worked for me was to specify a {{wicket:id}} for all enclosures in the derived markup like so:

{code:html}
<div wicket:enclosure=""child"" wicket:id=""enclosure-id"">
{code}","20/Jun/16 16:26;jira-bot;Commit 084590a07b80b3cb05d268965cc6b15f75afe95c in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=084590a ]

WICKET-6187 Enclosures rendered twice in derived component","20/Jun/16 16:49;jira-bot;Commit 841c961c7324224bda129aa36c1c89d6a84c937d in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=841c961 ]

Revert ""WICKET-6187 Enclosures rendered twice in derived component""

This reverts commit 084590a07b80b3cb05d268965cc6b15f75afe95c.
","21/Jun/16 14:39;jira-bot;Commit 529375ee1decde83f921db3b4a9dd8e436336c42 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=529375e ]

WICKET-6187 Enclosures rendered twice in derived component
","21/Jun/16 15:26;jira-bot;Commit c136b5335f17650064bed055dba3e59bb86ff9b5 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c136b53 ]

WICKET-6187 Enclosures rendered twice in derived component
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Performance bottleneck when using KeyInSessionSunJceCryptFactory,WICKET-6154,12964152,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,rainer.jung@kippdata.de,rainer.jung@kippdata.de,01/May/16 15:32,26/May/16 16:56,13/Mar/19 23:18,26/May/16 16:56,,,,,,,,,6.24.0,7.4.0,8.0.0-M1,,wicket,,,0,,,,,,,,"We observed a performance problem in production. As could be seen by thread dumps, many threads were waiting for the same lock, an instance of com.oracle.security.ucrypto.UcryptoProvider.

The base class java.security.Provider.java extends java.util.Properties and many methos are synchronized(). So calling lots of operations on the provider results in a bottleneck.

The calls stacks waiting for the lock were the following (line numbers for Wicket 6.0.22, but from looking at the code I expect the same problems should happen even for master).

First the frames close to the bottom of the stack, they are always the same:

at org.apache.wicket.core.request.mapper.CryptoMapper.encryptEntireUrl(CryptoMapper.java:313)
at org.apache.wicket.core.request.mapper.CryptoMapper.encryptUrl(CryptoMapper.java:295)
at com.mycorp.application.myapp.security.AppCryptoMapper.mapHandler(AppCryptoMapper.java:62)
at org.apache.wicket.request.cycle.RequestCycle.mapUrlFor(RequestCycle.java:429)
at org.apache.wicket.request.cycle.RequestCycle.urlFor(RequestCycle.java:529)
at org.apache.wicket.Component.urlFor(Component.java:3374)
at org.apache.wicket.markup.html.link.Link.getURL(Link.java:327)

Now the four most frequent detail stacks which sit above the common stack:

at java.util.Hashtable.get(Hashtable.java:433)
- waiting on (a com.oracle.security.ucrypto.UcryptoProvider@0xHEXADDR)
at java.util.Properties.getProperty(Properties.java:951)
at java.security.Provider.getProperty(Provider.java:390)
at java.security.Security.getProviderProperty(Security.java:262)
at java.security.Security.isCriterionSatisfied(Security.java:914)
at java.security.Security.getProvidersNotUsingCache(Security.java:889)
at java.security.Security.getAllQualifyingCandidates(Security.java:877)
at java.security.Security.getProviders(Security.java:625)
at java.security.Security.getProviders(Security.java:552)
at org.apache.wicket.util.crypt.SunJceCrypt.<init>(SunJceCrypt.java:81)
at org.apache.wicket.core.util.crypt.KeyInSessionSunJceCryptFactory.createCrypt(KeyInSessionSunJceCryptFactory.java:92)
at org.apache.wicket.core.util.crypt.KeyInSessionSunJceCryptFactory.newCrypt(KeyInSessionSunJceCryptFactory.java:82)


at java.security.Provider.getService(Provider.java:680)
- waiting on (a com.oracle.security.ucrypto.UcryptoProvider@0xHEXADDR)
at sun.security.jca.ProviderList.getService(ProviderList.java:331)
at sun.security.jca.GetInstance.getInstance(GetInstance.java:157)
at java.security.Security.getImpl(Security.java:695)
at java.security.MessageDigest.getInstance(MessageDigest.java:167)
at com.sun.crypto.provider.PBECipherCore.<init>(PBECipherCore.java:75)
at com.sun.crypto.provider.PBEWithMD5AndDESCipher.<init>(PBEWithMD5AndDESCipher.java:61)
at sun.reflect.GeneratedConstructorAccessor108.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
at java.security.Provider$Service.newInstance(Provider.java:1240)
at javax.crypto.Cipher.chooseProvider(Cipher.java:850)
at javax.crypto.Cipher.init(Cipher.java:1374)
at javax.crypto.Cipher.init(Cipher.java:1308)
at org.apache.wicket.util.crypt.SunJceCrypt.createCipher(SunJceCrypt.java:133)
at org.apache.wicket.util.crypt.SunJceCrypt.crypt(SunJceCrypt.java:114)
at org.apache.wicket.util.crypt.AbstractCrypt.encryptStringToByteArray(AbstractCrypt.java:172)
at org.apache.wicket.util.crypt.AbstractCrypt.encryptUrlSafe(AbstractCrypt.java:87)
at org.apache.wicket.core.request.mapper.CryptoMapper.encryptEntireUrl(CryptoMapper.java:313)


at java.security.Provider.getService(Provider.java:680)
- waiting on (a com.oracle.security.ucrypto.UcryptoProvider@0xHEXADDR)
at sun.security.jca.ProviderList$ServiceList.tryGet(ProviderList.java:443)
at sun.security.jca.ProviderList$ServiceList.access$200(ProviderList.java:375)
at sun.security.jca.ProviderList$ServiceList$1.hasNext(ProviderList.java:485)
at javax.crypto.Cipher.getInstance(Cipher.java:502)
at org.apache.wicket.util.crypt.SunJceCrypt.createCipher(SunJceCrypt.java:132)
at org.apache.wicket.util.crypt.SunJceCrypt.crypt(SunJceCrypt.java:114)
at org.apache.wicket.util.crypt.AbstractCrypt.encryptStringToByteArray(AbstractCrypt.java:172)
at org.apache.wicket.util.crypt.AbstractCrypt.encryptUrlSafe(AbstractCrypt.java:87)
at org.apache.wicket.core.request.mapper.CryptoMapper.encryptEntireUrl(CryptoMapper.java:313)


at java.security.Provider.getService(Provider.java:680)
- waiting on (a com.oracle.security.ucrypto.UcryptoProvider@0xHEXADDR)
at sun.security.jca.ProviderList$ServiceList.tryGet(ProviderList.java:436)
at sun.security.jca.ProviderList$ServiceList.access$200(ProviderList.java:375)
at sun.security.jca.ProviderList$ServiceList$1.hasNext(ProviderList.java:485)
at javax.crypto.SecretKeyFactory.nextSpi(SecretKeyFactory.java:292)
at javax.crypto.SecretKeyFactory.<init>(SecretKeyFactory.java:120)
at javax.crypto.SecretKeyFactory.getInstance(SecretKeyFactory.java:159)
at org.apache.wicket.util.crypt.SunJceCrypt.generateSecretKey(SunJceCrypt.java:152)
at org.apache.wicket.util.crypt.SunJceCrypt.crypt(SunJceCrypt.java:112)
at org.apache.wicket.util.crypt.AbstractCrypt.encryptStringToByteArray(AbstractCrypt.java:172)
at org.apache.wicket.util.crypt.AbstractCrypt.encryptUrlSafe(AbstractCrypt.java:87)
at org.apache.wicket.core.request.mapper.CryptoMapper.encryptEntireUrl(CryptoMapper.java:313)

There's a couple of possible improvements/solutions:

In SunJceCrypt.java when creating a new instance there's a check

Security.getProviders(""Cipher."" + cryptMethod).length > 0

The result of the check could be cached in a static ConcurrentSkipListSet<String>. Note that the method Security.getProviders() is in one of the synchronized stacks above.

The SecretKey derived from the string types session key is created in SunJceCrypt using method generateSecretKey() every time a crypt() call is executed. Since the SecretKey only depends on the cryptMethod and the string key, and furthermore it is serializable and should be thread-safe (read-only) it could be generated once and cached in the session. Creation of the SecretKey is another of the synchronized stacks above.

Furthemore one could cache the cipher per session, more precisely one instance created for encrypt mode and one for decrypt mode. Unfortunately the MetaDataKey based way of putting stuff into the session only allows serializable objects and Cipher is not serializable. The use of such cached ciphers per session would need to be synchronized on the cipher object, but that looks much better than stressing the global provider lock.

Regards,

Rainer
",,,,,,,,,,,,,,,,,,,,,,,,,22/May/16 12:00;mgrigorov;WICKET-6154-caching-demo.tgz;https://issues.apache.org/jira/secure/attachment/12805521/WICKET-6154-caching-demo.tgz,09/May/16 11:00;rainer.jung@kippdata.de;crypt-reuse.patch;https://issues.apache.org/jira/secure/attachment/12802967/crypt-reuse.patch,,,2.0,,,,,,,,,,,,,,,,,,,2016-05-02 21:12:32.942,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu May 26 16:56:47 UTC 2016,,,,,,0|i2x0lr:,9223372036854775807,,,,,,,,"02/May/16 21:12;jira-bot;Commit 051e294ab6159ec4054bbd1a5d305253093d1661 in wicket's branch refs/heads/WICKET-6154-jce-crypt-performance from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=051e294 ]

WICKET-6154 move provider registration to factory, so the check for the cipher's availability is done once only
","08/May/16 20:09;mgrigorov;Thank you for the detailed description, Rainer!
We will try to improve it for 6.24.0/7.4.0!

Did you mean "" but that looks much *better* than stressing the global provider lock"" ?","08/May/16 20:45;rainer.jung@kippdata.de;Yes, sorry for the slight confusion. Stressing a synchronized cipher per session IMHO would be better than stressing the global provider lock. Caching the SecretKey in the session would be an even easier quick win though.","09/May/16 11:00;rainer.jung@kippdata.de;The patch contains two parts which can be applied individually:

- reusing the PBEParameterSpec (new static member ""aspec"").

You might want to deprecate method createParameterSpec() which is no longer in use after the patch but marked as protected.

- Caching the SecretKey in the Session.

What the patch does not implement is reusing the Cipher object in the same session.

I must confess, that I have not yet tested the patch.","22/May/16 08:53;jira-bot;Commit a338eb9df15f3609d3fab78fc2d51cf1afacbb10 in wicket's branch refs/heads/WICKET-6154-jce-crypt-performance from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a338eb9 ]

WICKET-6154 Performance bottleneck when using KeyInSessionSunJceCryptFactory

Reduce the complexity of the method by removing a conditional branch that is not really needed.

Note: Security#getProviders() javadoc states that it may return null but the implementation (and the years in usage) show that it actually returns empty array
","22/May/16 08:54;jira-bot;Commit b1f21a399bb0b3f66fff15dd5c502786591ca640 in wicket's branch refs/heads/WICKET-6154-jce-crypt-performance from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b1f21a3 ]

WICKET-6154 Performance bottleneck when using KeyInSessionSunJceCryptFactory

Extract PARAMETER_SPEC constant - a PBEParameterSpec that is used by default.
","22/May/16 08:54;jira-bot;Commit 21bd7a42192a0e454ecac4b63799c462a4c6b376 in wicket's branch refs/heads/WICKET-6154-jce-crypt-performance from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=21bd7a4 ]

WICKET-6154 Performance bottleneck when using KeyInSessionSunJceCryptFactory

Fix typo in javadoc
","22/May/16 08:56;mgrigorov;I've made some small improvements.
Saving the SecretKey as suggested in the patch is not possible because we could not use Session class in wicket-util.

For this we should introduce some more specialization classes in wicket-core.
I'm going to investigate this idea.","22/May/16 12:00;mgrigorov;Attaching a mini/demo application that stores the created SunJceCrypt instances in the Application metadata and reuses the ciphers/keys/specs.

Note: this will break as soon as non-sticky sessions are used!

Another solution would be to make com.mycompany.CachingSunJceCrypt serializable, just to make it possible to put it in Session metatada, but it will fail as soon as session replication is used.

At the moment I don't see a generic solution that will work in all environments.

The earlier commits improved two out of the three described problems. Maybe this is enough for now ?
If further optimizations are needed then the application developer could do something like in the demo app that will take into account the requirements for his/her particular application.
WDYT ?","22/May/16 19:35;rainer.jung@kippdata.de;Thanks a bunch Martin. I think you've gone pretty far and especially your demo app is a helpful addition for further app specific optimization. We'll have a closer look, but it looks ery promising to me.","26/May/16 16:52;jira-bot;Commit 051e294ab6159ec4054bbd1a5d305253093d1661 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=051e294 ]

WICKET-6154 move provider registration to factory, so the check for the cipher's availability is done once only
","26/May/16 16:52;jira-bot;Commit a338eb9df15f3609d3fab78fc2d51cf1afacbb10 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a338eb9 ]

WICKET-6154 Performance bottleneck when using KeyInSessionSunJceCryptFactory

Reduce the complexity of the method by removing a conditional branch that is not really needed.

Note: Security#getProviders() javadoc states that it may return null but the implementation (and the years in usage) show that it actually returns empty array
","26/May/16 16:52;jira-bot;Commit b1f21a399bb0b3f66fff15dd5c502786591ca640 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b1f21a3 ]

WICKET-6154 Performance bottleneck when using KeyInSessionSunJceCryptFactory

Extract PARAMETER_SPEC constant - a PBEParameterSpec that is used by default.
","26/May/16 16:52;jira-bot;Commit 21bd7a42192a0e454ecac4b63799c462a4c6b376 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=21bd7a4 ]

WICKET-6154 Performance bottleneck when using KeyInSessionSunJceCryptFactory

Fix typo in javadoc
","26/May/16 16:52;jira-bot;Commit 0c4b417ffce6ebab4977a3d1bf777b5305acfe68 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0c4b417 ]

Merge branch 'WICKET-6154-jce-crypt-performance' into wicket-6.x
","26/May/16 16:53;jira-bot;Commit 8f5281dd2cb122b7d9e9f27b6837f03448ff53bc in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8f5281d ]

WICKET-6154 move provider registration to factory, so the check for the cipher's availability is done once only
","26/May/16 16:53;jira-bot;Commit 1b649ffa0b3cd517a196fd7ba3cedab3efdef290 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1b649ff ]

WICKET-6154 Performance bottleneck when using KeyInSessionSunJceCryptFactory

Reduce the complexity of the method by removing a conditional branch that is not really needed.

Note: Security#getProviders() javadoc states that it may return null but the implementation (and the years in usage) show that it actually returns empty array
","26/May/16 16:53;jira-bot;Commit 463dfda1ed6d1858781c2adbe04dafa4d0397a9a in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=463dfda ]

WICKET-6154 Performance bottleneck when using KeyInSessionSunJceCryptFactory

Extract PARAMETER_SPEC constant - a PBEParameterSpec that is used by default.
","26/May/16 16:53;jira-bot;Commit 633bc2875fbf2614deb1bd8b12a2a8445b0fec77 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=633bc28 ]

WICKET-6154 Performance bottleneck when using KeyInSessionSunJceCryptFactory

Fix typo in javadoc
","26/May/16 16:54;jira-bot;Commit 5546b62d458538196528d20d36ac8e4197b5044c in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5546b62 ]

WICKET-6154 move provider registration to factory, so the check for the cipher's availability is done once only
","26/May/16 16:54;jira-bot;Commit 21a5a7c779112b42d4488a3214f5b2aa4d0ed74f in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=21a5a7c ]

WICKET-6154 Performance bottleneck when using KeyInSessionSunJceCryptFactory

Reduce the complexity of the method by removing a conditional branch that is not really needed.

Note: Security#getProviders() javadoc states that it may return null but the implementation (and the years in usage) show that it actually returns empty array
","26/May/16 16:54;jira-bot;Commit c4fc8d50a34c152acfd1b67eca8a71a946236ed0 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c4fc8d5 ]

WICKET-6154 Performance bottleneck when using KeyInSessionSunJceCryptFactory

Extract PARAMETER_SPEC constant - a PBEParameterSpec that is used by default.
","26/May/16 16:54;jira-bot;Commit 2f1c14a546efd96f0ef5c92396d80d63d6ed1714 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2f1c14a ]

WICKET-6154 Performance bottleneck when using KeyInSessionSunJceCryptFactory

Fix typo in javadoc
","26/May/16 16:56;mgrigorov;The improvements are merged to 6.x, 7.x and 8.x branches.

Please let us know if you face any problems or if you see more room for improvements!

Thank you!",,,,,,,,,,,,
Problem with nested dialog with multipart form,WICKET-6171,12971466,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,rakesh.a,rakesh.a,20/May/16 08:54,25/May/16 15:40,13/Mar/19 23:18,25/May/16 15:40,6.22.0,,,,,,,,8.0.0-M1,,,,wicket-extensions,,,0,,,,,,,,"I observed that when I've a nested (second level) dialog with multipart form in it, after submitting this form, first level dialog form submit results a multipart form submit instead of normal form submit.

I've attached a quick start to reproduce this.

Steps:
1. Click the link on home page to open first level dialog
2. Click on the link to open 'multipart' dialog
3. Simply click 'Ok' on this dialog
4. Click 'Ok' on the first level dialog

I expect form submit of Step#4 to be a normal form submit, but I see its a 'multipart' form submit.",,,,,,,,,,,,,,,,,,,,,,,,,20/May/16 08:55;rakesh.a;nested-multipart-modal-window.7z;https://issues.apache.org/jira/secure/attachment/12805186/nested-multipart-modal-window.7z,,,,1.0,,,,,,,,,,,,,,,,,,,2016-05-25 14:20:11.273,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed May 25 15:40:51 UTC 2016,,,,,,0|i2y9lz:,9223372036854775807,,,,,,,,20/May/16 08:55;rakesh.a;Added quickstart,"25/May/16 14:20;svenmeier;You can use the following workaround in HomePage.java:
{code}
  public final void showModalWindow(String aTitle, MyModalContent aContent)
  {
    modalWindow.show(aContent, aTitle);
    
    getRequestCycle().find(AjaxRequestTarget.class).add(rootForm);
  }
{code}

... i.e. always render the root form when your show a modal window. This way the form's multipart will always be up-to-date.","25/May/16 15:37;jira-bot;Commit 447e4adcc48608bbc86338f2db7d6ddd23fa2582 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=447e4ad ]

WICKET-6171 clear multiPart hint on AjaxRequest, in case multiPart-components are added or removed; cache non-multiPart during render too
","25/May/16 15:40;svenmeier;I'm reluctant to change anything in released versions, because it might break existing applications.

In 8.x a Form will update its multiPart-hint on each AjaxRequest. I've also optimized the code to cache the multiPart hint in cases where no multiPart-component is present.

Please use the suggested workaround.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong requestmapper used for cache decorated resources,WICKET-6170,12971116,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,boschman,boschman,19/May/16 11:20,21/May/16 11:39,13/Mar/19 23:18,21/May/16 11:39,7.3.0,,,,,,,,7.4.0,8.0.0-M1,,,wicket,,,0,,,,,,,,"Introduced with the fix for WICKET-6094.

ResourceMapper.getCompatibilityScore now returns the score of AbstractBookmarkableMapper.getCompatibilityScore minus 1. Unfortunately AbstractBookmarkableMapper.getCompatibilityScore does not remove any caching decoration from the request url and will always return 0. So the score for the ResourceMapper that should handle the request is -1, and e.g. the HomePageMapper with a score of 0 will handle the request.

Example:
GET http://localhost/stylesheet.css -> stylesheet
GET http://localhost/stylesheet-ver-xxxx.css -> homepage

Somehow ResourceMapper.removeCachingDecoration should be used during getCompatibilityScore.",,,,,,,,,,,,,,,,,,,,,,,,,19/May/16 12:02;boschman;wicket-resourcemapper.zip;https://issues.apache.org/jira/secure/attachment/12804924/wicket-resourcemapper.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-05-21 10:22:46.798,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat May 21 11:39:12 UTC 2016,,,,,,0|i2y7g7:,9223372036854775807,,,,,,,,"21/May/16 10:22;mgrigorov;Your quickstart doesn't reproduce the described issue.
I get 404 for both urls (I needed to add port 8080).","21/May/16 10:34;sverre_boschman;just run the unit test (TestHomePage), the rest is default generated from the quickstart archetype.","21/May/16 11:38;jira-bot;Commit 3b14e585e0b8a025d2ddcb22d7f74ba5c7cde758 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3b14e58 ]

WICKET-6170 Wrong requestmapper used for cache decorated resources

Undecorate the url before passing it for compatibility score calculation.
","21/May/16 11:39;jira-bot;Commit 9d9c1f46891eaec473e7c4f5fb476741db7ba347 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9d9c1f4 ]

WICKET-6170 Wrong requestmapper used for cache decorated resources

Undecorate the url before passing it for compatibility score calculation.
",21/May/16 11:39;mgrigorov;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException accessing AbstractRequestLogger.getLiveSessions,WICKET-6169,12971058,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,boschman,boschman,19/May/16 07:30,21/May/16 11:14,13/Mar/19 23:18,21/May/16 11:14,7.3.0,,,,,,,,6.24.0,7.4.0,8.0.0-M1,,wicket,,,0,,,,,,,,"AbstractRequestLogger.getLiveSessions throws a NPE while sorting the liveSessions if a session is destroyed concurrently.

java.lang.NullPointerException
	at java.util.ComparableTimSort.countRunAndMakeAscending(ComparableTimSort.java:320)
	at java.util.ComparableTimSort.sort(ComparableTimSort.java:188)
	at java.util.Arrays.sort(Arrays.java:1246)
	at org.apache.wicket.protocol.http.AbstractRequestLogger.getLiveSessions(AbstractRequestLogger.java:139)
	at org.apache.wicket.requestlogger.RequestLoggerLiveSessionsTest.test(RequestLoggerLiveSessionsTest.java:27)",,,,,,,,,,,,,,,,,,,,,,,,,19/May/16 07:31;boschman;RequestLoggerLiveSessionsTest.java;https://issues.apache.org/jira/secure/attachment/12804888/RequestLoggerLiveSessionsTest.java,,,,1.0,,,,,,,,,,,,,,,,,,,2016-05-21 11:09:53.198,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat May 21 11:14:45 UTC 2016,,,,,,0|i2y73b:,9223372036854775807,,,,,,,,"21/May/16 11:09;jira-bot;Commit 4f1055e03ac13286619eba4ba5abe57a282555e7 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4f1055e ]

WICKET-6169 NullPointerException accessing AbstractRequestLogger.getLiveSessions
","21/May/16 11:10;jira-bot;Commit a58cac60516754a7f273780b529b3965bf189733 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a58cac6 ]

WICKET-6169 NullPointerException accessing AbstractRequestLogger.getLiveSessions
","21/May/16 11:10;jira-bot;Commit 809b2da16cc0796ee4e5aca8ef816c200c01baf2 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=809b2da ]

WICKET-6169 NullPointerException accessing AbstractRequestLogger.getLiveSessions
","21/May/16 11:12;jira-bot;Commit ea57ae1088b5b1a25dd23d532a17729028201d48 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ea57ae1 ]

WICKET-6169 NullPointerException accessing AbstractRequestLogger.getLiveSessions

Fix some more candidates for the same problem.
Remove implicit modifiers
","21/May/16 11:12;jira-bot;Commit 065cb0398fbcb5ca3e83f9ed614756ab81de13f3 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=065cb03 ]

WICKET-6169 NullPointerException accessing AbstractRequestLogger.getLiveSessions

Fix some more candidates for the same problem.
Remove implicit modifiers
","21/May/16 11:14;mgrigorov;The problem was that the array copy was created with a size.
Later during the copy of the elements they were less than the size and finally the sorting failed because of the trailing 'null' element in the array.

This particular problem is fixed in 6.x, 7.x and 8.x.
Similar candidates for the same problem are fixed only in 7.x and 8.x",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Find adequate ResourceReference with mount parameters,WICKET-6094,12938134,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,rene.dieckmann@menoto.de,rene.dieckmann@menoto.de,10/Feb/16 09:54,19/May/16 11:21,13/Mar/19 23:18,18/Feb/16 22:00,7.2.0,,,,,,,,7.3.0,8.0.0-M1,,,wicket,,,0,Mount,ResourceReference,URL,,,,,"When i mount a resource reference by url
/ajax/owners
and another one by url
/ajax/owners/${id}
only the second resource reference is usable (will be found). The other one will throw an exception because of the missing parameter value.
It would be nice if both urls / resource references would be usable.",,,,,,,,,,,,,,,,,,,,,WICKET-6170,,,,10/Feb/16 09:56;rene.dieckmann@menoto.de;resourcemount.zip;https://issues.apache.org/jira/secure/attachment/12787237/resourcemount.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-02-18 21:53:00.541,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Feb 18 22:00:39 UTC 2016,,,,,,0|i2snp3:,9223372036854775807,,,,,,,,10/Feb/16 09:56;rene.dieckmann@menoto.de;Quickstart with appropriate test,"18/Feb/16 21:53;jira-bot;Commit 294bb1b0cb599adeb239d0969a9586aa3592c326 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=294bb1b ]

WICKET-6094 Find adequate ResourceReference with mount parameters
","18/Feb/16 22:00;jira-bot;Commit d0b83efb22997664f797ff5f1fcb7c29e852d952 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d0b83ef ]

WICKET-6094 Find adequate ResourceReference with mount parameters
",18/Feb/16 22:00;mgrigorov;Thank you!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DebugBar not serializable exception,WICKET-6040,12914421,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,elvis.ciocoiu,elvis.ciocoiu,19/Nov/15 10:39,22/Apr/16 14:31,13/Mar/19 23:18,19/Nov/15 11:58,6.21.0,,,,,,,,6.22.0,,,,wicket-devutils,,,0,,,,,,,,"After upgrading to 6.21.0 I encountered NotSerializableException when refreshing DebugBar in an ajax event. Martin Grigorov suspects this is related to https://github.com/apache/wicket/commit/562d43ccdd7f305f8ca641817f4b63a07ee8b6a6.

To reproduce this:
1. start the application in development mode
2. override onEvent in Application to refresh the DebugBar
public void onEvent(IEvent<?> event) {
		if(event.getPayload() instanceof AjaxRequestTarget) {
			AjaxRequestTarget target = (AjaxRequestTarget) event.getPayload();			
		// if we are in development refresh the debugbar (if exists)
		if(getConfigurationType() == RuntimeConfigurationType.DEVELOPMENT) {
					Component debugBar = page.get(""debugBar"");
if(debugBar != null) target.add(debugBar);
		}
	}

From stacktrace it seems this is related to org.apache.wicket.ajax.AbstractAjaxResponse$AjaxHtmlHeaderContainer:

Caused by: java.lang.RuntimeException: An error occurred while getting the model object for Component: [Component id = data, page = ro.emp.wicket.StandaloneHomePage, path = 2:debugBar:content:contributors:3:contrib:link:data.Label, isVisible = true, isVersioned = true, markup = [markup = jar:file:/home/fanfy/.m2/repository/org/apache/wicket/wicket-devutils/6.21.0/wicket-devutils-6.21.0.jar!/org/apache/wicket/devutils/debugbar/StandardDebugPanel.html
<span wicket:id=""data""></span>, index = 0, current =  '<span wicket:id=""data"">' (line 0, column 0)]]
	at org.apache.wicket.Component.getDefaultModelObject(Component.java:1617) ~[wicket-core-6.21.0.jar:6.21.0]
	at org.apache.wicket.Component.getDefaultModelObjectAsString(Component.java:1640) ~[wicket-core-6.21.0.jar:6.21.0]
	at org.apache.wicket.markup.html.basic.Label.onComponentTagBody(Label.java:131) ~[wicket-core-6.21.0.jar:6.21.0]
	at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:71) ~[wicket-core-6.21.0.jar:6.21.0]
	at org.apache.wicket.Component.internalRenderComponent(Component.java:2536) ~[wicket-core-6.21.0.jar:6.21.0]
	... 132 common frames omitted
Caused by: org.apache.wicket.WicketRuntimeException: Internal error cloning object
	at org.apache.wicket.core.util.lang.WicketObjects.cloneObject(WicketObjects.java:361) ~[wicket-core-6.21.0.jar:6.21.0]
	at org.apache.wicket.core.util.lang.WicketObjects.sizeof(WicketObjects.java:425) ~[wicket-core-6.21.0.jar:6.21.0]
	at org.apache.wicket.devutils.debugbar.PageSizeDebugPanel$2.getObject(PageSizeDebugPanel.java:96) ~[wicket-devutils-6.21.0.jar:6.21.0]
	at org.apache.wicket.devutils.debugbar.PageSizeDebugPanel$2.getObject(PageSizeDebugPanel.java:89) ~[wicket-devutils-6.21.0.jar:6.21.0]
	at org.apache.wicket.Component.getDefaultModelObject(Component.java:1612) ~[wicket-core-6.21.0.jar:6.21.0]
	... 136 common frames omitted
Caused by: java.io.NotSerializableException: org.apache.wicket.ajax.AjaxRequestHandler$1
	- field (class ""org.apache.wicket.ajax.AbstractAjaxResponse$AjaxHtmlHeaderContainer"", name: ""this$0"", type: ""class org.apache.wicket.ajax.AbstractAjaxResponse"")
	- object (class ""org.apache.wicket.ajax.AbstractAjaxResponse$AjaxHtmlHeaderContainer"", [AjaxHtmlHeaderContainer [Component id = _header_]])
	- element of array (index: 9)
	- array (class ""[Ljava.lang.Object;"", size: 18)
	- field (class ""org.apache.wicket.MarkupContainer$ChildList"", name: ""childs"", type: ""class [Ljava.lang.Object;"")
	- object (class ""org.apache.wicket.MarkupContainer$ChildList"", [[Component id = applicationTitle], [FocusComponentFeedbackPanel [Component id = feedbackPanel]], [DebugBar [Component id = debugBar]], [StackComponentContainerImpl [Component id = contentContainer]], [GlobalMenuPanel [Component id = menu]], [Fragment [Component id = customHeader]], [Fragment [Component id = customFooter]], [WebMarkupContainer [Component id = localeContainer]], [WebMarkupContainer [Component id = userInformations]], [AjaxHtmlHeaderContainer [Component id = _header_]]])
	- field (class ""org.apache.wicket.MarkupContainer"", name: ""children"", type: ""class java.lang.Object"")
	- root object (class ""ro.emp.wicket.StandaloneHomePage"", [Page class = ro.emp.wicket.StandaloneHomePage, id = 2, render count = 3])
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1180) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1547) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1508) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1377) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1173) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1547) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1508) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1547) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1508) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177) ~[na:1.7.0_80]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:347) ~[na:1.7.0_80]
	at org.apache.wicket.core.util.lang.WicketObjects.cloneObject(WicketObjects.java:306) ~[wicket-core-6.21.0.jar:6.21.0]
	... 140 common frames omitted","jdk 7, ubuntu",,,,,,,,,,,,,,,,WICKET-6011,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-19 11:57:45.713,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Nov 19 11:58:06 UTC 2015,,,,,,0|i2omrb:,9223372036854775807,,,,,,,,"19/Nov/15 11:57;jira-bot;Commit a377eabcc4a0bd09b1ea2b1abceb8506dee11603 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a377eab ]

WICKET-6040 restore AjaxHtmlHeaderContainer to be static, so it can be serialized before AjaxRequest has finished
","19/Nov/15 11:58;svenmeier;Same as in WICKET-6011 : DebugBar serializes the page before the Ajax header container is removed, thus keep reference to AbstractAjaxResponse in transient member only.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when using ListView with missing markup,WICKET-6134,12954972,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,marc-g,marc-g,31/Mar/16 14:20,21/Apr/16 10:58,13/Mar/19 23:18,01/Apr/16 14:36,7.2.0,,,,,,,,7.3.0,8.0.0-M1,,,,,,0,,,,,,,,"Instead of getting the hint that you've added a component and missing the reference in the markup you get an NPE:


Unexpected RuntimeException
Last cause: null
WicketMessage: Error attaching this container for rendering: [Page class = com.mycompany.HomePage, id = 0, render count = 1]
Stacktrace
Root cause:
java.lang.NullPointerException
     at org.apache.wicket.DequeueContext.nextTag(DequeueContext.java:143)
     at org.apache.wicket.DequeueContext.<init>(DequeueContext.java:71)
     at org.apache.wicket.markup.html.list.ListItem.newDequeueContext(ListItem.java:106)
     at org.apache.wicket.MarkupContainer.dequeue(MarkupContainer.java:2029)
     at org.apache.wicket.MarkupContainer.addedComponent(MarkupContainer.java:1049)
     at org.apache.wicket.MarkupContainer.add(MarkupContainer.java:239)
     at org.apache.wicket.markup.html.list.ListView.onPopulate(ListView.java:519)
     at org.apache.wicket.markup.repeater.AbstractRepeater.onBeforeRender(AbstractRepeater.java:124)
     at org.apache.wicket.Component.internalBeforeRender(Component.java:949)
     at org.apache.wicket.Component.beforeRender(Component.java:1017)
     at org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1866)
     at org.apache.wicket.Component.onBeforeRender(Component.java:3877)
     at org.apache.wicket.Page.onBeforeRender(Page.java:801)
     at org.apache.wicket.Component.internalBeforeRender(Component.java:949)
     at org.apache.wicket.Component.beforeRender(Component.java:1017)
     at org.apache.wicket.Component.internalPrepareForRender(Component.java:2215)
     at org.apache.wicket.Page.internalPrepareForRender(Page.java:242)
     at org.apache.wicket.Component.render(Component.java:2304)
     at org.apache.wicket.Page.renderPage(Page.java:1018)
     at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124)
     at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:236)
     at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
     at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
     at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
     at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
     at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
     at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
     at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
     at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
     at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)
     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
     at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)
     at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)
     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
     at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
     at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)
     at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)
     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
     at org.eclipse.jetty.server.Server.handle(Server.java:499)
     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)
     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
     at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)
     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
     at java.lang.Thread.run(Thread.java:745)
Complete stack:
org.apache.wicket.WicketRuntimeException: Error attaching this container for rendering: [Page class = com.mycompany.HomePage, id = 0, render count = 1]
     at org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1878)
     at org.apache.wicket.Component.onBeforeRender(Component.java:3877)
     at org.apache.wicket.Page.onBeforeRender(Page.java:801)
     at org.apache.wicket.Component.internalBeforeRender(Component.java:949)
     at org.apache.wicket.Component.beforeRender(Component.java:1017)
     at org.apache.wicket.Component.internalPrepareForRender(Component.java:2215)
     at org.apache.wicket.Page.internalPrepareForRender(Page.java:242)
     at org.apache.wicket.Component.render(Component.java:2304)
     at org.apache.wicket.Page.renderPage(Page.java:1018)
     at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124)
     at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:236)
     at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
     at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
     at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
     at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
     at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
     at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
     at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)",,,,,,,,,,,,,,,,,,,,,,,,,31/Mar/16 14:21;marc-g;myproject.7z;https://issues.apache.org/jira/secure/attachment/12796309/myproject.7z,,,,1.0,,,,,,,,,,,,,,,,,,,2016-04-01 13:32:30.605,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Apr 21 10:58:16 UTC 2016,,,,,,0|i2vgl3:,9223372036854775807,,,,,,,,"01/Apr/16 13:32;jira-bot;Commit 7443da58c26e817217cffb9f496d50d5b66eaaa7 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7443da5 ]

WICKET-6134: Revert ""WICKET-6043 Cannot set wicket:enclosure on queued component in ListView""

This reverts commit 7bb27cc2e2386136190aadedbab8d7d5090af42d.
","01/Apr/16 14:17;jira-bot;Commit b465aedfb86e9dd72fcf5439da1ab4c26a2191a7 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b465aed ]

WICKET-6134 Added regression test for WICKET-6043
","01/Apr/16 14:29;jira-bot;Commit 8b5ba2060f7b9ea047378be13087b0ad9bf991cc in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8b5ba20 ]

WICKET-6134: Revert ""WICKET-6043 Cannot set wicket:enclosure on queued component in ListView""

This reverts commit 7bb27cc2e2386136190aadedbab8d7d5090af42d.

Conflicts:
	wicket-core/src/main/java/org/apache/wicket/markup/html/list/ListItem.java
","01/Apr/16 14:29;jira-bot;Commit 42b24d6656131d7c927366d5a9cf80a607959ba7 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=42b24d6 ]

WICKET-6134 Added regression test for WICKET-6043
","21/Apr/16 10:58;ceefour;Thanks you [~bitstorm] [~marc-g] , I just got this too today",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
There is no good way to get POST body content,WICKET-6135,12955149,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,phantom,phantom,01/Apr/16 00:08,19/Apr/16 20:52,13/Mar/19 23:18,19/Apr/16 20:52,7.2.0,,,,,,,,6.23.0,7.3.0,8.0.0-M1,,wicket,,,0,,,,,,,,"There is no way to obtain whole HTTP POST body.
The reason of that is the following:
Mappers invoke WebRequest.isAjax() and isAjax() is trying to
getRequestParameters() - so body of POST parsed prior to actual
getInputStream() in code. 

There is bad workaround: to collect body through something like getRequest().getPostParameters().getParameterNames().iterator().next().

But it's really bad because of the following reasons:

1) Map can not guarantee that order of keys remain the same. In my
case Jetty use HashMap as underling storage.
2) Some part of content might be URL encoded. So after collecting all
back: it's hard to revert exectly to initial value due to fact that
some parts contained URL encoded stuff.
3) POST can contain huge body. So it looks very strange.

As a work-around I use Filter configured prior to wicket to intercept
body whenever it's needed:
https://github.com/OrienteerDW/wicket-orientdb/commit/c9e706d9e84a828901a5ad97ed50aa46521f7bfb

Please find a good way to get required stuff in wicket.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-19 20:51:07.213,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Apr 19 20:52:40 UTC 2016,,,,,,0|i2vhof:,9223372036854775807,,,,,,,,"01/Apr/16 00:09;phantom;Is it really required for isAjax() method check POST parameters as
well? I mean, may be flag is in query string and there is even no goal
to check POST body. In this case fix will be easy.","19/Apr/16 20:51;jira-bot;Commit 3920131bf7e4ec631aa80058667e5cd27762c26b in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3920131 ]

WICKET-6135 There is no good way to get POST body content
","19/Apr/16 20:51;jira-bot;Commit eb1f07be5de3a7123eb8b84c0e90653ecc74e333 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=eb1f07b ]

WICKET-6135 There is no good way to get POST body content
","19/Apr/16 20:51;jira-bot;Commit 23ab412048c644d014219a671e9eec1f2c495fe9 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=23ab412 ]

WICKET-6135 There is no good way to get POST body content
",19/Apr/16 20:52;mgrigorov;WebRequest#isAjax() now uses only the GET parameters.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MarkupException due to ID collision in RelativePathPrefixHandler,WICKET-6093,12938027,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,mpiepk,mpiepk,09/Feb/16 22:58,12/Apr/16 19:27,13/Mar/19 23:18,25/Mar/16 13:15,7.1.0,7.2.0,,,,,,,7.3.0,,,,wicket,,,0,,,,,,,,"I get the following exception after refreshing a stateful page via F5:
{noformat}
23:21:30.945 [qtp1454031203-14] DEBUG org.apache.wicket.Page - Rendered [TransparentWebMarkupContainer [Component id = wicket_relative_path_prefix_0]]
23:21:30.948 [qtp1454031203-14] DEBUG org.apache.wicket.Page - Rendered [TransparentWebMarkupContainer [Component id = wicket_relative_path_prefix_1]]
23:21:30.948 [qtp1454031203-14] DEBUG org.apache.wicket.Page - Rendered [WicketHeadContainer [Component id = _header_]]
23:21:30.948 [qtp1454031203-14] DEBUG org.apache.wicket.Page - Rendered [HtmlHeaderContainer [Component id = _header_]]
23:21:30.949 [qtp1454031203-14] DEBUG org.apache.wicket.Page - Rendered [TransparentWebMarkupContainer [Component id = wicket_relative_path_prefix_1]]
23:21:30.949 [qtp1454031203-14] DEBUG org.apache.wicket.Page - Rendered [Component id = version]
23:21:30.949 [qtp1454031203-14] DEBUG org.apache.wicket.Page - Rendered [AutolinkBookmarkablePageLink [Component id = _autolink_4]]
23:21:30.949 [qtp1454031203-14] DEBUG org.apache.wicket.Page - Rendered [TransparentWebMarkupContainer [Component id = wicket_link3]]
23:21:30.950 [qtp1454031203-14] DEBUG org.apache.wicket.Page - Rendered [Page class = com.mycompany.Page2, id = 0, render count = 1]
23:21:30.951 [qtp1454031203-14] DEBUG org.apache.wicket.Page - ending request for page [Page class = com.mycompany.Page2, id = 0, render count = 1], request org.apache.wicket.protocol.http.servlet.ServletWebRequest@27d8cf0a
23:21:39.337 [qtp1454031203-27] DEBUG org.apache.wicket.Page - Rendered [TransparentWebMarkupContainer [Component id = wicket_relative_path_prefix_0]]
23:21:39.337 [qtp1454031203-27] DEBUG org.apache.wicket.Page - Rendered [TransparentWebMarkupContainer [Component id = wicket_relative_path_prefix_1]]
23:21:39.337 [qtp1454031203-27] DEBUG org.apache.wicket.Page - Rendered [WicketHeadContainer [Component id = _header_]]
23:21:39.337 [qtp1454031203-27] DEBUG org.apache.wicket.Page - Rendered [HtmlHeaderContainer [Component id = _header_]]
23:21:39.339 [qtp1454031203-27] WARN  RequestCycleExtra - ********************************
23:21:39.339 [qtp1454031203-27] WARN  RequestCycleExtra - Handling the following exception
org.apache.wicket.markup.MarkupException: The component [TransparentWebMarkupContainer [Component id = wicket_relative_path_prefix_1]] was rendered already. You can render it only once during a render phase. Class relative path: org.apache.wicket.markup.html.TransparentWebMarkupContainer:wicket_relative_path_prefix_1
	at org.apache.wicket.Page.componentRendered(Page.java:211) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Component.rendered(Component.java:2623) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Component.internalRender(Component.java:2384) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Component.render(Component.java:2308) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1524) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Page.onRender(Page.java:879) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:141) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Component.internalRender(Component.java:2380) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Component.render(Component.java:2308) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Page.renderPage(Page.java:1018) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:195) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) ~[wicket-request-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284) [wicket-core-7.2.0.jar:7.2.0]
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.server.Server.handle(Server.java:499) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) [jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_65]
{noformat}
The attached Quickstart reproduces the issue:
# Click the link to Page 2
# Press F5 to reload

I believe the issue was introduced by the fix for WICKET-5904 (commit https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=32a40bc ), which introduces a request-local ID generator for autocomponents. The IDs are stored along with the tags in the global MarkupCache, which can lead to collisions if the IDs are generated incrementally.

The mentioned crash can be observed in Wicket 7.2.0 and 7.3.0-SNAPSHOT, whereas 7.1.0 behaves differently and renders invalid markup, replacing the 2nd occurence of the colliding ID by the markup of the first.","Windows 10 x64, Java 8 u65, Quickstart",,,,,,,,,,,,,,,,,,,,,,,,09/Feb/16 22:58;mpiepk;quickstart.zip;https://issues.apache.org/jira/secure/attachment/12787167/quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-03-25 13:16:29.556,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Mar 25 13:16:29 UTC 2016,,,,,,0|i2sn1b:,9223372036854775807,,,,,,,,"25/Mar/16 13:16;bitstorm;Hi,

try again with 7.3.0-SNAPSHOT. This should be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IndexOutOfBoundsException in org.apache.wicket.core.request.mapper.CryptoMapper.decryptEntireUrl,WICKET-6131,12954287,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mac.miklas,mac.miklas,29/Mar/16 13:31,29/Mar/16 14:23,13/Mar/19 23:18,29/Mar/16 14:20,6.20.0,,,,,,,,6.23.0,7.3.0,8.0.0-M1,,wicket,,,0,,,,,,,,"We are getting following exception: 
{code}
java.lang.IndexOutOfBoundsException: Index: 2, Size: 2
	at java.util.ArrayList.rangeCheck(ArrayList.java:653)
	at java.util.ArrayList.get(ArrayList.java:429)
	at org.apache.wicket.core.request.mapper.CryptoMapper.decryptEntireUrl(CryptoMapper.java:537)
	at org.apache.wicket.core.request.mapper.CryptoMapper.decryptUrl(CryptoMapper.java:387)
	at org.apache.wicket.core.request.mapper.CryptoMapper.getCompatibilityScore(CryptoMapper.java:189)
	at org.apache.wicket.request.mapper.CompoundRequestMapper.mapRequest(CompoundRequestMapper.java:138)
	at org.apache.wicket.request.cycle.RequestCycle.resolveRequestHandler(RequestCycle.java:190)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:215)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:259)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:201)
	at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:282)
{code}

In order to fix it, you should change code in decryptEntireUrl from:
{code:java}
		for (; segNo < encryptedNumberOfSegments; segNo++)
		{
			if (segNo > originalNumberOfSegments)
			{
				break;
			}
{code}
to
{code:java}
		for (; segNo < encryptedNumberOfSegments; segNo++)
		{
			if (segNo >= originalNumberOfSegments) // > was replaced with >=
			{
				break;
			}
{code}",Ubuntu Server,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-03-29 14:19:27.68,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Mar 29 14:23:43 UTC 2016,,,,,,0|i2vccn:,9223372036854775807,,,,,,,,"29/Mar/16 14:19;jira-bot;Commit c0fb5d4b2f64160a64186fbd0dcdafcab6e83384 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c0fb5d4 ]

WICKET-6131 IndexOutOfBoundsException in org.apache.wicket.core.request.mapper.CryptoMapper.decryptEntireUrl
","29/Mar/16 14:20;jira-bot;Commit b708e2b47f01e57d429d1d42ca9efa7418076a8b in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b708e2b ]

WICKET-6131 IndexOutOfBoundsException in org.apache.wicket.core.request.mapper.CryptoMapper.decryptEntireUrl
",29/Mar/16 14:20;mgrigorov;Thank you!,"29/Mar/16 14:20;jira-bot;Commit 9e1fe5ae455bc5d4f12accbeeafec53de288ca69 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9e1fe5a ]

WICKET-6131 IndexOutOfBoundsException in org.apache.wicket.core.request.mapper.CryptoMapper.decryptEntireUrl
",29/Mar/16 14:23;mac.miklas;Thank you :),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception 'A child already exists' when backing to a page with some markups in a Border,WICKET-6116,12948902,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,gledson@gmail.com,gledson@gmail.com,10/Mar/16 20:03,19/Mar/16 16:04,13/Mar/19 23:18,19/Mar/16 16:04,7.2.0,,,,,,,,7.3.0,8.0.0-M1,,,wicket,,,0,,,,,,,,"The problem is easy to simulate and I am sending an example.
It occurs when you have a page with border containing an img tag.
Just leave the page and press the back button and the exception is thrown.

java.lang.IllegalArgumentException: A child 'TransparentWebMarkupContainer' with id 'wicket_relative_path_prefix_1' already exists:
[BorderBodyContainer [Component id = myborder_body]]
     at org.apache.wicket.MarkupContainer.add(MarkupContainer.java:234)
     at org.apache.wicket.markup.html.border.Border.add(Border.java:227)
     at org.apache.wicket.markup.html.border.Border.add(Border.java:140)
     at org.apache.wicket.MarkupContainer.autoAdd(MarkupContainer.java:312)
     at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1513)
     at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759)
     at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1734)
     at org.apache.wicket.MarkupContainer.renderAssociatedMarkup(MarkupContainer.java:797)
     at org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy.renderAssociatedMarkup(AssociatedMarkupSourcingStrategy.java:77)
     at org.apache.wicket.markup.html.panel.BorderMarkupSourcingStrategy.onComponentTagBody(BorderMarkupSourcingStrategy.java:46)
     at org.apache.wicket.Component.internalRenderComponent(Component.java:2565)
     at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1698)
     at org.apache.wicket.Component.internalRender(Component.java:2380)
     at org.apache.wicket.Component.render(Component.java:2308)
     at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1524)
     at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759)
     at org.apache.wicket.Page.onRender(Page.java:879)
     at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:141)
     at org.apache.wicket.Component.internalRender(Component.java:2380)
     at org.apache.wicket.Component.render(Component.java:2308)
     at org.apache.wicket.Page.renderPage(Page.java:1018)
     at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124)
     at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:195)
     at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
     at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
     at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
     at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
     at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
     at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
     at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
     at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
     at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)","MacBook Pro, OS X 10.11.3",,,,,,,,,,,,,,,,,,,,,,,,10/Mar/16 20:07;gledson@gmail.com;bordersample.zip;https://issues.apache.org/jira/secure/attachment/12792576/bordersample.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-03-18 15:11:05.707,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Mar 19 16:03:55 UTC 2016,,,,,,0|i2uhjr:,9223372036854775807,,,,,,,,"18/Mar/16 15:11;jira-bot;Commit d697562b731e5b439fcd435846cb9a6496f75f03 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d697562 ]

WICKET-6116 Exception 'A child already exists' when backing to a page with some markups in a Border

Now autocomponents are added to border and not to its body
","18/Mar/16 17:01;jira-bot;Commit 5dc37039ba5f034f9d61b69dd729febb49ad308c in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5dc3703 ]

WICKET-6116 Added missing license file
","19/Mar/16 16:03;jira-bot;Commit d259cf389808e6ed52e9af2f905400fe2e53a70f in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d259cf3 ]

WICKET-6116 Exception 'A child already exists' when backing to a page with some markups in a Border

Now autocomponents are added to border and not to its body
","19/Mar/16 16:03;jira-bot;Commit a367d02e1205f016b6ce63a8f01397161b302900 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a367d02 ]

WICKET-6116 Added missing license file
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support /META-INF/services/org.apache.wicket.IInitializer (backport to 6.x),WICKET-6030,12911593,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,sergiu,sergiu,09/Nov/15 17:14,16/Mar/16 20:14,13/Mar/19 23:18,14/Nov/15 10:28,6.20.0,,,,,,,,6.22.0,,,,,,,0,,,,,,,,Please backport the WICKET-5713 fix to 6.x branch.,Ubuntu Server 14.04,,,,,,,,,,,,,,,,WICKET-5997,WICKET-5713,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-14 10:05:31.937,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Mar 16 20:14:25 UTC 2016,,,,,,0|i2o5db:,9223372036854775807,,,,,,,,"14/Nov/15 10:05;mgrigorov;Sorry, but I didn't pay much attention to the ticket which you want to be backported.
The changes in WICKET-5713 proved to be problematic so we decided to rework it to use ServiceLoader instead with WICKET-5997.
I'm going to backport the ServiceLoader functionality instead.","14/Nov/15 10:28;mgrigorov;I've cherry picked the change from WICKET-5997 with:

=====================================
WICKET-5997 Compatibility problem with Websphere liberty profile

Use ServiceLoader instead of collecting the wicket.properties files in the classpath with custom logic

Branch: refs/heads/wicket-6.x
Commit: 3af549777a7ca81f5494525d8075fb2a050bd4be
Parents: 19f32b6

=====================================

Now it is possible to use ServiceLoader and the old way in Wicket 6.x.
In Wicket 7.x the old way is deprecated and will log warnings.","14/Mar/16 21:48;jira-bot;Commit 39f897aa4bb0df974f29b88399b4036afa98340e in wicket's branch refs/heads/WICKET-6030-use-IClassResolver-to-find-IInitializers from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=39f897a ]

WICKET-6030 Move the usage of ServiceLoader to DefaultClassResolver

TODO: Check whether such API could be used in OSGi
","16/Mar/16 20:14;jira-bot;Commit 36cb5824d3c3390d63b0c599385d2ed637d461eb in wicket's branch refs/heads/WICKET-6030-use-IClassResolver-to-find-IInitializers from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=36cb582 ]

WICKET-6030 Pass explicitly the application class loader to ServiceLoader#load().
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AutoComplete suggestion list disappear when I click on autoComplete scrollbar in IE,WICKET-5882,12820785,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,ravala,ravala,14/Apr/15 11:03,03/Mar/16 07:19,13/Mar/19 23:18,20/Jul/15 19:31,6.19.0,7.0.0-M6,,,,,,,6.21.0,7.1.0,,,wicket-extensions,,,0,,,,,,,,"I am using Wicket's(version 6.19.0) AutoCompleteTextField in my application to a form component, 
when I type something I will get the suggestion list and we will get a horizontal scroll bar for the suggestion list.
            The problem is when I scroll to view the text suggestion list is disappearing. This happens in all IE browser 
versions IE8, IE9, IE10 and IE11.
    I have attached the image to show suggestion list with scroll bar.
	and also the example zip file.","operating system : 64-bit, Windows 7 Professional.",,,,,,,,,,,,,,,,,,,,,,,,14/Apr/15 11:05;ravala;autocomplete.zip;https://issues.apache.org/jira/secure/attachment/12725197/autocomplete.zip,14/Apr/15 11:06;ravala;autocompleteScroll.png;https://issues.apache.org/jira/secure/attachment/12725198/autocompleteScroll.png,,,2.0,,,,,,,,,,,,,,,,,,,2015-07-20 17:56:27.209,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Mar 03 07:19:13 UTC 2016,,,,,,0|i2d80v:,9223372036854775807,,,,,,,,14/Apr/15 12:33;ravala;Added a QuickStart example showing the issue,"17/Apr/15 13:36;ravala;I have done bit investigation and came to known the below code is called in IE when we click on scroll bar.
Line no 96 in wicket-autocomplete.js
			Wicket.Event.add(obj, 'blur', function (jqEvent) {
				window.setTimeout(hideAutoComplete, 500);
			});
In all other browsers this is called only when we click on text not on scroll bar.
","20/Jul/15 17:56;jira-bot;Commit 13b06ad0f00f190976a2d60ee0107223ef2228ed in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=13b06ad ]

WICKET-5882 AutoComplete suggestion list disappear when I click on autoComplete scrollbar in IE
","20/Jul/15 19:25;jira-bot;Commit d415444054f520662406b9c9dced4f3d270d5697 in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d415444 ]

WICKET-5882 AutoComplete suggestion list disappear when I click on autoComplete scrollbar in IE
","20/Jul/15 19:30;jira-bot;Commit 0f48a1e718cacb123936a4d86e4948ecb91aff27 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0f48a1e ]

WICKET-5882 Added a comment about this fix for IE
","20/Jul/15 19:30;jira-bot;Commit 20e3acce7a936b517185bab1ddb96ccc10e99e39 in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=20e3acc ]

WICKET-5882 Added a comment about this fix for IE
","03/Mar/16 07:19;ravala;The fix for this call resulted in not closing the suggestion window in IE, 
when suggestion window has a horizontal scroll bar and if we make the horizontal scroll,
and then if we click on outside the autocomplete suggestion window it is not closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxTimerBehavior with failure handler cause memory leak in browser,WICKET-6085,12935611,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,vlastimil.dolejs,vlastimil.dolejs,01/Feb/16 12:55,06/Feb/16 21:43,13/Mar/19 23:18,06/Feb/16 21:43,6.21.0,7.1.0,,,,,,,6.22.0,7.3.0,8.0.0-M1,,wicket,,,0,,,,,,,,"Please see the attached quickstart.
Start the application and run memory profiler in browser. Memory consumption gets high very quickly.

I've tried to find the cause, but I'm too lame in Javascript to analyse that.
",,,,,,,,,,,,,,,,,,,,,,,,,01/Feb/16 12:56;vlastimil.dolejs;ajax-memory-leak-quickstart.zip;https://issues.apache.org/jira/secure/attachment/12785508/ajax-memory-leak-quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-02-05 14:06:16.047,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Feb 06 21:43:32 UTC 2016,,,,,,0|i2s8dz:,9223372036854775807,,,,,,,,"05/Feb/16 14:06;svenmeier;I've checked with Chrome's memory tool and it seems any function in the ajaxAttributes leaks a reference to the <evaluate> node from the response.

Moving eval(script) out of scope fixes this:

{code}
	safeEval = function(script) {
		return eval(script);
	};
{code}

I'll investigate further.","05/Feb/16 22:54;svenmeier;Actually it is even simpler to execute eval() in global scope, just call: window.eval(script).

Here's a good discussion of all  the options: http://perfectionkills.com/global-eval-what-are-the-options/

I can't think of any reason why a script returned inside an Ajax call might need access to the local scope in #processEvaluation().","05/Feb/16 23:21;jira-bot;Commit 330ba3b31aafffb0f39c5f41c391cb0f9b7726da in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=330ba3b ]

WICKET-6085 eval in global scope, to prevent leak of local variables into the evaluated script
","05/Feb/16 23:21;jira-bot;Commit 3e745e7b6ca98fc2ce5dc77137b36c5144525e0c in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3e745e7 ]

WICKET-6085 eval in global scope, to prevent leak of local variables into the evaluated script
","05/Feb/16 23:22;jira-bot;Commit 94f8fd3c66909694db043b33443a2f21b21fa784 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=94f8fd3 ]

WICKET-6085 eval in global scope, to prevent leak of local variables into the evaluated script
","05/Feb/16 23:26;svenmeier;All Javascript tests are ok, including those with deferred step notification.

All #eval() calls are done in global scope now.","06/Feb/16 15:05;mgrigorov;""asyncTest('processEvaluation with identifier|code.', function () ""  fails for me. It times out.
I'm reopening the ticket to not forget it, but I won't have time today to debug it.

To reproduce:
1) cd testing/wicket-js-tests
2) mvn test -Pjs-test

To see which tests times out enable the ""verbose"" argument for 'grunt' in pom.xml.","06/Feb/16 21:35;jira-bot;Commit 75422cc984fe2766b0ab2a481c16e032a7904d40 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=75422cc ]

WICKET-6085 return evaluated function so that it can be invoked
","06/Feb/16 21:36;jira-bot;Commit fb8c1e3e33f292504fbdffa3de3f175194a19549 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fb8c1e3 ]

WICKET-6085 return evaluated function so that it can be invoked
","06/Feb/16 21:37;jira-bot;Commit 77f30ce4eb5daa70da51ddb9bdf1599b159047fe in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=77f30ce ]

WICKET-6085 return evaluated function so that it can be invoked
","06/Feb/16 21:38;svenmeier;Strange, I thought all js tests worked fine when I executed them in the browser.","06/Feb/16 21:43;svenmeier;By evaluating the expression in the global scope, the result can of course no longer access any local variables:
- the resulting function could no longer be assigned to 'f', I fixed this by returning the function from the evaluated expression
- the JS evaluation can no longer access the 'context', so I removed the counter increment from twoEvaluationsWithIdentifier.xml - the qunit assertions should be sufficient to ensure the test outcome",,,,,,,,,,,,,,,,,,,,,,,,
Invalid AbstractRequestWrapperFactory.needsWrapper method scope: package - cannot create a custom implementation,WICKET-6087,12935936,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,interface,interface,02/Feb/16 11:13,05/Feb/16 19:19,13/Mar/19 23:18,05/Feb/16 19:19,6.21.0,,,,,,,,6.22.0,7.3.0,8.0.0-M1,,wicket,,,0,,,,,,,,Abstract method needsWrapper() in AbstractRequestWrapperFactory should be public or protected to allow create a custom implementations of AbstractRequestWrapperFactory outside of org.apache.wicket.protocol.http.servlet package.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-05 19:18:29.021,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 05 19:19:23 UTC 2016,,,,,,0|i2sae7:,9223372036854775807,,,,,,,,"05/Feb/16 19:18;jira-bot;Commit f60d958b2a0d76b90212a338749c87bab08d3913 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f60d958 ]

WICKET-6087 Invalid AbstractRequestWrapperFactory.needsWrapper method scope: package - cannot create a custom implementation

Make #needsWrapper() protected
","05/Feb/16 19:18;jira-bot;Commit 65eedbf84e0efab9416d365850d301354a175cc0 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=65eedbf ]

WICKET-6087 Invalid AbstractRequestWrapperFactory.needsWrapper method scope: package - cannot create a custom implementation

Make #needsWrapper() protected
","05/Feb/16 19:19;mgrigorov;I've made it protected.
Thank you!","05/Feb/16 19:19;jira-bot;Commit f20a495d8bee065b92b426701ff9845c2f3817ba in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f20a495 ]

WICKET-6087 Invalid AbstractRequestWrapperFactory.needsWrapper method scope: package - cannot create a custom implementation

Make #needsWrapper() protected
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in RequestLoggerRequestCycleListener when using native-websockets,WICKET-6091,12937031,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,jan-krakora,jan-krakora,05/Feb/16 13:05,05/Feb/16 19:13,13/Mar/19 23:18,05/Feb/16 19:13,7.2.0,,,,,,,,7.3.0,8.0.0-M1,,,wicket,wicket-native-websocket,,0,,,,,,,,"When using wicket-native-websockets and setting 
{code}
getRequestLoggerSettings().setRequestLoggerEnabled(true)
{code} 
in the Wicket application, I get 
{code}
java.lang.NullPointerException: null
	at org.apache.wicket.util.string.AppendingStringBuffer.<init>(AppendingStringBuffer.java:91) ~[wicket-util-7.2.0.jar:7.2.0]
	at org.apache.wicket.protocol.http.RequestLoggerRequestCycleListener.registerRequestedUrl(RequestLoggerRequestCycleListener.java:108) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.protocol.http.RequestLoggerRequestCycleListener.onBeginRequest(RequestLoggerRequestCycleListener.java:46) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycleListenerCollection$1.notify(RequestCycleListenerCollection.java:65) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycleListenerCollection$1.notify(RequestCycleListenerCollection.java:61) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80) ~[wicket-util-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onBeginRequest(RequestCycleListenerCollection.java:60) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycleListenerCollection$1.notify(RequestCycleListenerCollection.java:65) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycleListenerCollection$1.notify(RequestCycleListenerCollection.java:61) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80) ~[wicket-util-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onBeginRequest(RequestCycleListenerCollection.java:60) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:217) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.protocol.ws.api.AbstractWebSocketProcessor.broadcastMessage(AbstractWebSocketProcessor.java:242) [wicket-native-websocket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.protocol.ws.api.AbstractWebSocketProcessor.onConnect(AbstractWebSocketProcessor.java:173) [wicket-native-websocket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.protocol.ws.javax.JavaxWebSocketProcessor.<init>(JavaxWebSocketProcessor.java:48) [wicket-native-websocket-javax-7.2.0.jar:7.2.0]
	at org.apache.wicket.protocol.ws.javax.WicketEndpoint.onOpen(WicketEndpoint.java:58) [wicket-native-websocket-javax-7.2.0.jar:7.2.0]
	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.init(WsHttpUpgradeHandler.java:129) [tomcat7-websocket.jar:7.0.55]
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:637) [tomcat-coyote.jar:7.0.55]
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:314) [tomcat-coyote.jar:7.0.55]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_72]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_72]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-coyote.jar:7.0.55]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_72]
{code}
It happens when the WebSocket is created.
\\
\\The {{org.apache.wicket.protocol.ws.api.ServletRequestCopy}} should return the request URL or the {{org.apache.wicket.util.string.AppendingStringBuffer}} should accept {{null}} in its constructor.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-05 14:50:41.278,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 05 19:13:32 UTC 2016,,,,,,0|i2sh4f:,9223372036854775807,,,,,,,,"05/Feb/16 14:50;mgrigorov;Are you sure this fails in 7.2.0?
Because with https://github.com/apache/wicket/commit/e2725482f6d39ee9751193efe70b3d3442e5cbb9 the request url should not be null anymore.","05/Feb/16 15:44;jan-krakora;I'm sure. The request url from the original (copied) {{HttpServletRequest}} is {{null}}. 
Note that the original request is of type {{org.apache.wicket.protocol.ws.javax.JavaxUpgradeHttpRequest}} and its requestURL is {{null}} but its requestUri is {{/chystat/wicket/websocket?pageId=13&wicket-ajax-baseurl=monitoring%2Foverview%3F13&wicket-app-name=chystat.wicket}}","05/Feb/16 16:00;mgrigorov;OK.
I'll take a look soon.
Thank you!","05/Feb/16 19:07;jira-bot;Commit e0b3c7a6d53f57e44c44ac5e03e15d54af05530c in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e0b3c7a ]

WICKET-6091 NPE in RequestLoggerRequestCycleListener when using native-websockets

Use the upgrade request's uri as url
","05/Feb/16 19:12;jira-bot;Commit a06d33178857561d83e7d4b4b573f2bf7189a120 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a06d331 ]

WICKET-6091 NPE in RequestLoggerRequestCycleListener when using native-websockets

Use the upgrade request's uri as url
",05/Feb/16 19:13;mgrigorov;Fixed!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Border's body is not added as a child due to dequeuing,WICKET-6077,12930284,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,mgrigorov,mgrigorov,14/Jan/16 22:19,22/Jan/16 20:44,13/Mar/19 23:18,15/Jan/16 20:33,7.2.0,,,,,,,,7.2.0,,,,wicket,,,0,,,,,,,,It seems there is a regression (since 7.1.0) in the Border component due to the changes for component dequeuing.,,,,,,,,,,,,,,,,,,,,,,,,,14/Jan/16 22:23;mgrigorov;6077.tgz;https://issues.apache.org/jira/secure/attachment/12782382/6077.tgz,,,,1.0,,,,,,,,,,,,,,,,,,,2016-01-15 17:21:07.224,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jan 22 20:44:45 UTC 2016,,,,,,0|i2rbk7:,9223372036854775807,,,,,,,,"14/Jan/16 22:23;mgrigorov;Quickstart with unit test.

The problem is that during form submit FormGroup (a Border) doesn't have its ""body"" as a child, and thus doesn't traverse its children (FormComponents).

If I move the code in HomePage#onInitialize() to the constructor or if I swap lines 22 and 23 then everything is OK.",15/Jan/16 15:15;mgrigorov;The quickstart works fine in 7.1.0. It fails in 7.2.0 (voted),"15/Jan/16 17:21;jira-bot;Commit 3cca4f336edc12087c651b05fd44313618ca4f21 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3cca4f3 ]

WICKET-6077 Border's body is not added as a child due to dequeuing
","15/Jan/16 19:45;jira-bot;Commit ca7005234ee7d807edf0249207e038fd666b26f2 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ca70052 ]

WICKET-6077 Border's body is not added as a child due to dequeuing
","17/Jan/16 09:27;jira-bot;Commit f4298765b0af0c8a9e2d03c713d61dca9ece8d10 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f429876 ]

WICKET-6077 Border's body is not added as a child due to dequeuing

Apply the quickstart as a test case to prevent regressions
","22/Jan/16 20:44;jira-bot;Commit 10f360c57a713a054a5cfc63585d8ed5a17409a0 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=10f360c ]

WICKET-6077 Border's body is not added as a child due to dequeuing

Apply the quickstart as a test case to prevent regressions
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebSocketResponse.sendRedirect could be supported with <ajax-response><redirect>...</></>,WICKET-6064,12926976,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,interface,interface,04/Jan/16 13:52,15/Jan/16 12:25,13/Mar/19 23:18,10/Jan/16 19:10,6.21.0,,,,,,,,6.22.0,7.2.0,8.0.0-M1,,wicket-native-websocket,,,0,,,,,,,,"When you send a message using IWebSocketConnection.sendMessage() and an exeption is raised somewhere during processing of this message you can get the following exception (the orignal exception is lost):
{code}
Error during processing error message
java.lang.UnsupportedOperationException
    at org.apache.wicket.protocol.ws.api.WebSocketResponse.sendRedirect(WebSocketResponse.java:205)
    at org.apache.wicket.request.handler.render.WebPageRenderer.redirectTo(WebPageRenderer.java:176)
    at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:327)
    at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
    at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:890)
    at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
    at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:310)
    at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319)
    at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319)
    at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319)
    at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319)
    at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319)
    at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319)
    at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319)
    at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319)
    at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319)
    at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319)
    at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:233)
    at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289)
    at org.apache.wicket.protocol.ws.api.AbstractWebSocketProcessor.broadcastMessage(AbstractWebSocketProcessor.java:251)
    at org.apache.wicket.protocol.ws.api.AbstractWebSocketConnection.sendMessage(AbstractWebSocketConnection.java:43)
{code}
This is because WebPageRenderer by default calls redirectTo method. So it looks like WebSocketResponse.sendRedirect() should not throw exception in the default implementation?",,,,,,,,,,,,,,,,,,,,,,,,,04/Jan/16 13:53;interface;websocket-errors.zip;https://issues.apache.org/jira/secure/attachment/12780313/websocket-errors.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-01-10 19:05:06.783,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Jan 10 19:11:51 UTC 2016,,,,,,0|i2qr67:,9223372036854775807,,,,,,,,"04/Jan/16 13:53;interface;To simulate this problem run quickstart app and press ""Test send message with exception"" link.","10/Jan/16 19:05;jira-bot;Commit e8b3f46430c6c4182530fd7e920c2deff48bfeee in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e8b3f46 ]

WICKET-6064 WebSocketResponse.sendRedirect could be supported with <ajax-response><redirect>...</></>
","10/Jan/16 19:09;jira-bot;Commit e0502b8805df634237f421a9873db8e8b637909f in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e0502b8 ]

WICKET-6064 WebSocketResponse.sendRedirect could be supported with <ajax-response><redirect>...</></>
","10/Jan/16 19:11;jira-bot;Commit 01b7de0c68c1f2e8e7be7c04676c59c89f1ffb73 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=01b7de0 ]

WICKET-6064 WebSocketResponse.sendRedirect could be supported with <ajax-response><redirect>...</></>
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for WebSocketRequest#getUrl() and other properties which are available in the handshake request,WICKET-6063,12926974,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,interface,interface,04/Jan/16 13:47,15/Jan/16 12:24,13/Mar/19 23:18,10/Jan/16 19:44,6.21.0,,,,,,,,6.22.0,7.2.0,8.0.0-M1,,wicket-native-websocket,,,1,,,,,,,,"During request processing some components can want to access some request parameters, paths, etc. When this is done during web socket request it can lead to IllegalArgumentExceptions, because WebSocketRequest.getUrl() method returns null.
{code}
java.lang.IllegalArgumentException: Argument 'url' may not be null.
    at org.apache.wicket.util.lang.Args.notNull(Args.java:41)
    at
org.apache.wicket.request.parameter.UrlRequestParametersAdapter.<init>(UrlRequestParametersAdapter.java:48)
    at
org.apache.wicket.request.Request.getQueryParameters(Request.java:128)
    at
org.apache.wicket.request.Request.getRequestParameters(Request.java:136)
{code}
Maybe these methods should better return empty Url instead of null (
return new Url(); )?",,,,,,,,,,,,,,,,,,,,,,,,,04/Jan/16 13:49;interface;websocket-errors.zip;https://issues.apache.org/jira/secure/attachment/12780310/websocket-errors.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-01-10 19:40:26.1,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Jan 10 19:46:26 UTC 2016,,,,,,0|i2qr5r:,9223372036854775807,,,,,,,,"04/Jan/16 13:49;interface;To simulate this problem run quickstart app and press ""Test request url"" link. This calls:
{code}
Request request = RequestCycle.get().getRequest();
request.getRequestParameters() (...)
{code}
which causes a problem.","10/Jan/16 19:40;jira-bot;Commit e2725482f6d39ee9751193efe70b3d3442e5cbb9 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e272548 ]

WICKET-6063 Add support for WebSocketRequest#getUrl() and other properties which are available in the handshake request
","10/Jan/16 19:43;jira-bot;Commit 9ad1c7402660bce25c2ee0854b2b480e4011e114 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9ad1c74 ]

WICKET-6063 Add support for WebSocketRequest#getUrl() and other properties which are available in the handshake request
","10/Jan/16 19:46;jira-bot;Commit 2ec1b5524431393274d459e2da2649dcf4446233 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2ec1b55 ]

WICKET-6063 Add support for WebSocketRequest#getUrl() and other properties which are available in the handshake request
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxFormChoiceComponentUpdatingBehavior: Duplicate input values according to WICKET-5948,WICKET-6044,12915753,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,cwellekoetter,cwellekoetter,24/Nov/15 10:05,14/Jan/16 22:31,13/Mar/19 23:18,25/Nov/15 21:02,6.21.0,7.1.0,,,,,,,6.22.0,7.2.0,8.0.0-M1,,wicket,,,1,,,,,,,,"According to the changes for ticket WICKET-5948 the functionality of AjaxFormChoiceComponentUpdatingBehavior is broken:

* Input values are posted twice on ajax form choice update
",,,,,,,,,,WICKET-5948,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-25 16:57:22.11,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jan 14 22:31:04 UTC 2016,,,,,,0|i2ouyf:,9223372036854775807,,,,,,,,"25/Nov/15 16:57;jira-bot;Commit e200d82e5c31437601ff304178f9169ae70fca1e in wicket's branch refs/heads/WICKET-6044 from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e200d82 ]

WICKET-6044 AjaxFormChoiceComponentUpdatingBehavior: Duplicate input values according to WICKET-5948

Simplify AjaxFormChoiceComponentUpdatingBehavior. Since WICKET-5948 wicket-ajax.js collects all form elements children
",25/Nov/15 16:57;mgrigorov;[~svenmeier] Please review the change. Thanks!,"25/Nov/15 20:32;jira-bot;Commit 5d15d75d67b5defd7802cb8dfe6f52979de7f92c in wicket's branch refs/heads/WICKET-6044 from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5d15d75 ]

WICKET-6044 Simplify AjaxFormChoiceComponentUpdatingBehavior. Enclose input name in quotes
","25/Nov/15 20:48;jira-bot;Commit 659c47d52bb12f780ee4540becc9bcdcc926558a in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=659c47d ]

WICKET-6044 AjaxFormChoiceComponentUpdatingBehavior: Duplicate input values according to WICKET-5948

Simplify AjaxFormChoiceComponentUpdatingBehavior. Since WICKET-5948 wicket-ajax.js collects all form elements children
","25/Nov/15 20:48;jira-bot;Commit 09368fb0418e899450b1b48aa2d284ea59c8d15d in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=09368fb ]

WICKET-6044 Simplify AjaxFormChoiceComponentUpdatingBehavior. Enclose input name in quotes
","25/Nov/15 20:49;jira-bot;Commit d7a0b52f47f8871cde6e6ad8b0ba5c573252917a in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d7a0b52 ]

WICKET-6044 AjaxFormChoiceComponentUpdatingBehavior: Duplicate input values according to WICKET-5948

Simplify AjaxFormChoiceComponentUpdatingBehavior. Since WICKET-5948 wicket-ajax.js collects all form elements children
","25/Nov/15 20:49;jira-bot;Commit 8c33eeab9ccc0e8591fd9b69f68d0ca5d96c161f in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8c33eea ]

WICKET-6044 Simplify AjaxFormChoiceComponentUpdatingBehavior. Enclose input name in quotes
","25/Nov/15 20:56;jira-bot;Commit e200d82e5c31437601ff304178f9169ae70fca1e in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e200d82 ]

WICKET-6044 AjaxFormChoiceComponentUpdatingBehavior: Duplicate input values according to WICKET-5948

Simplify AjaxFormChoiceComponentUpdatingBehavior. Since WICKET-5948 wicket-ajax.js collects all form elements children
","25/Nov/15 20:56;jira-bot;Commit 5d15d75d67b5defd7802cb8dfe6f52979de7f92c in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5d15d75 ]

WICKET-6044 Simplify AjaxFormChoiceComponentUpdatingBehavior. Enclose input name in quotes
","25/Nov/15 21:02;svenmeier;I really like this simplification :).

Note that there are cases where we're sending more values to the server than needed (i.e. when a TextField is located inside a CheckGroup), but I don't see a problem with that.","14/Jan/16 22:29;jira-bot;Commit ddfd902f9adbf4fbb8f861dce383b6c060b2dea0 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ddfd902 ]

WicketWICKET-6044 AjaxFormChoiceComponentUpdatingBehavior: Duplicate input values according to WICKET-5948
","14/Jan/16 22:29;jira-bot;Commit 2dadf02416448d2960d8abfec148585d78b2d940 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2dadf02 ]

WicketWICKET-6044 AjaxFormChoiceComponentUpdatingBehavior: Duplicate input values according to WICKET-5948
","14/Jan/16 22:31;jira-bot;Commit 0fd33dec7b69ae84a58186df37acbcdc464ce582 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0fd33de ]

WicketWICKET-6044 AjaxFormChoiceComponentUpdatingBehavior: Duplicate input values according to WICKET-5948
",,,,,,,,,,,,,,,,,,,,,,,
Error in calculation of byte ranges,WICKET-6058,12924355,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,klopfdreh,klopfdreh,klopfdreh,26/Dec/15 13:02,04/Jan/16 12:26,13/Mar/19 23:18,26/Dec/15 21:04,7.1.0,8.0.0-M1,,,,,,,7.2.0,8.0.0-M1,,,wicket,,,0,,,,,,,,"curl --range 0-99 http://examples7x.wicket.apache.org/videos/wicket/resource/org.apache.wicket.examples.media.Home/video1-ver-538557E5F248D450160FC81033930591.mp4 -o /dev/null 

returns 99 bytes and not 100 as expected in this document: 

https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariWebContent/CreatingVideoforSafarioniPhone/CreatingVideoforSafarioniPhone.html#//apple_ref/doc/uid/TP40006514-SW6

But this:

curl --range 0-99 http://media.w3.org/2010/05/video/movie_300.mp4 -o /dev/null

returns 100 bytes.

So there is an issue in the byte range calculation.

Fix PRs:
Wicket 7.x: https://github.com/apache/wicket/pull/150
Wicket 8.x: https://github.com/apache/wicket/pull/149

Fixes:
Wicket 7.x: https://github.com/apache/wicket/commit/b5ee0cbf5a1234524a57983c6bfacb2fdf8aeb97
Wicket 8.x: https://github.com/apache/wicket/commit/a169eb1125d93867c64377a8dc4066491ef510c7",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-12-26 20:54:55.31,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Dec 26 20:59:49 UTC 2015,,,,,,0|i2qbef:,9223372036854775807,,,,,,,,26/Dec/15 13:04;klopfdreh;Changes will be committed tomorrow in the morning.,"26/Dec/15 20:54;jira-bot;Commit b5ee0cbf5a1234524a57983c6bfacb2fdf8aeb97 in wicket's branch refs/heads/wicket-7.x from [~klopfdreh]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b5ee0cb ]

WICKET-6058 Fixes error in calculation of byte ranges","26/Dec/15 20:59;jira-bot;Commit a169eb1125d93867c64377a8dc4066491ef510c7 in wicket's branch refs/heads/master from [~klopfdreh]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a169eb1 ]

WICKET-6058 Fixes error in calculation of byte ranges",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MockHttpSession should renew its id after invalidation,WICKET-6062,12926958,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,04/Jan/16 11:59,04/Jan/16 12:24,13/Mar/19 23:18,04/Jan/16 12:24,6.21.0,7.1.0,8.0.0-M1,,,,,,6.22.0,7.2.0,8.0.0-M1,,wicket,,,0,,,,,,,,"MockHttpSession never changes its id. It should renew it after invalidation.
The problem is reproducible only with HttpSessionStore.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-01-04 12:05:17.928,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jan 04 12:19:13 UTC 2016,,,,,,0|i2qr27:,9223372036854775807,,,,,,,,"04/Jan/16 12:05;jira-bot;Commit 8211cbe08484fa9bddee1ef11e549259a5701a82 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8211cbe ]

WICKET-6062 MockHttpSession should renew its id after invalidation
","04/Jan/16 12:09;jira-bot;Commit 3029816b110761fe87526d4c8c33244bae80bf0e in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3029816 ]

WICKET-6062 MockHttpSession should renew its id after invalidation

Use Supplier, not IProvider
","04/Jan/16 12:18;jira-bot;Commit 50a9bf15aa221c33db8f6ca83639487eb861993b in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=50a9bf1 ]

WICKET-6062 MockHttpSession should renew its id after invalidation
","04/Jan/16 12:19;jira-bot;Commit 36198d9e9586f4c0d5204d6e06188196dff83106 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=36198d9 ]

WICKET-6062 MockHttpSession should renew its id after invalidation
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CSS header contribution overlap,WICKET-6052,12922765,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,sebfz1,sebfz1,sebfz1,17/Dec/15 16:15,24/Dec/15 13:27,13/Mar/19 23:18,23/Dec/15 08:48,7.1.0,,,,,,,,6.22.0,7.2.0,8.0.0-M1,,wicket,,,0,,,,,,,,"There is an overlap of css header contribution in the following case:

A parent panel have a CSS HC (wicket:header + <style type=""text/css"">), a child panel also have a CSS HC.
If a child panel is completely newly added to the page via an ajax request, then the child CSS HC is not taken into account. I guess it is because both CSS HC share the same id...

{code:html}
<style type=""text/css"" id=""com-mycompany-panel-RedBox-0"">
    .box {
        width: 150px;
        border: 2px solid black;
    }
</style>
<style type=""text/css"" id=""com-mycompany-panel-RedBox-0"">
    .red {
        background-color: red;
    }
</style>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,17/Dec/15 16:34;sebfz1;WICKET-6052.zip;https://issues.apache.org/jira/secure/attachment/12778275/WICKET-6052.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2015-12-22 16:21:45.961,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Dec 24 13:27:20 UTC 2015,,,,,,0|i2q1nz:,9223372036854775807,,,,,,,,17/Dec/15 16:19;sebfz1;Attached quickstart,17/Dec/15 16:34;sebfz1;Replaced bad quickstart,"20/Dec/15 15:13;sebfz1;Hi, I need another opinion about the way to solve this...

h4. To sum-up
1/ The style's id is added by the HeadForceTagIdHandler markup filter:
MarkupParser: {{filters.add(new HeadForceTagIdHandler(containerInfo.getContainerClass()));}}

2/ The container-info actually holds the MarkupContainer class name (the final class), it is supplied to MarkupResourceStream through the DefaultMarkupResourceStreamProvider.
{{return new MarkupResourceStream(resourceStream, new ContainerInfo(container), containerClass);}}
Note that containerClass is the real class

h4. Some fix suggestions

a/ updating HeadForceTagIdHandler with a static counter, to obtain:
{code:html}
<style type=""text/css"" id=""com-mycompany-panel-RedBox-0"">
    .box {
        width: 150px;
        border: 2px solid black;
    }
</style>
<style type=""text/css"" id=""com-mycompany-panel-RedBox-1"">
    .red {
        background-color: red;
    }
</style>
{code}

Not very nice, impact is supposed to be the lowest but it breaks several tests: InheritanceHeadTest, HeaderScopingTest...

https://github.com/sebfz1/wicket/commit/fb7c5301e3b843ced22a20cf30e42230d925789c

b/ adding ContainerInfo (package visible?) ctor, to deal with the real class, and change call in DefaultMarkupResourceStreamProvider to obtain
{code:html}
<style type=""text/css"" id=""com-mycompany-panel-AbstractBox-0"">
    .box {
        width: 150px;
        border: 2px solid black;
    }
</style>
<style type=""text/css"" id=""com-mycompany-panel-RedBox-0"">
    .red {
        background-color: red;
    }
</style>
{code}

Medium impact, breaks one test: HeaderScopingTest
Question: should MarkupFactory be changed too?

https://github.com/sebfz1/wicket/commit/41fcfc4ea96e2c2d88752f929ce99572f5b615a8

c/ I also tried to update MarkupResourceStream ctor but it just breaks everything...
Just FYI, https://github.com/sebfz1/wicket/commit/cfaf97e889b48ec197c855388fc0d2908a57624d


WDYT?
Please Let me know if is there other ways to investigate...

Thanks in advance,
Sebastien.",22/Dec/15 16:21;mgrigorov;To me approach *b* looks the best.,"22/Dec/15 16:25;sebfz1;Thanks Martin. To me too actually...
I will try update the unit-test accordingly and do a PR asap for final review. By chance, it will be in the Christmas cut-off...
What branches need to be updated? master & wicket-7.x?","22/Dec/15 16:30;mgrigorov;wicket-6.x too, if it is broken too.
I may do the change for you tonight/tomorrow morning if you like. Martijn will cut 7.2.0 soon-ish...","22/Dec/15 17:19;sebfz1;Test corrected, I will do the PR for wicket-7.x in a few minutes
If you are ok to approve the PR, cherrypick to master & wicket-6.x, that would be great! :)
Btw, it repro on wicket-6.x...","22/Dec/15 17:34;githubbot;GitHub user sebfz1 opened a pull request:

    https://github.com/apache/wicket/pull/148

    WICKET-6052 CSS header contribution overlap

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sebfz1/wicket WICKET-6052

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/148.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #148
    
----
commit 4835bee496ac917ddf0660c1c69fd2f7efd56e68
Author: Sebastien <sebfz1@gmail.com>
Date:   2015-12-20T14:04:59Z

    WICKET-6052 CSS header contribution overlap

----
",23/Dec/15 08:36;mgrigorov;Merging it ...,"23/Dec/15 08:44;jira-bot;Commit 4835bee496ac917ddf0660c1c69fd2f7efd56e68 in wicket's branch refs/heads/wicket-7.x from [~sebfz1]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4835bee ]

WICKET-6052 CSS header contribution overlap
","23/Dec/15 08:44;jira-bot;Commit 4b141ccffe7c9422c527bab86725f1c905a31fa6 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4b141cc ]

Merge branch 'pr-148-WICKET-6052' into wicket-7.x
","23/Dec/15 08:45;jira-bot;Commit ffdefe28e9d89eb8c376f493a4b03e5c91dc7f26 in wicket's branch refs/heads/wicket-6.x from [~sebfz1]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ffdefe2 ]

WICKET-6052 CSS header contribution overlap
","23/Dec/15 08:45;jira-bot;Commit 4f125657ced04409bb7026fde7c774b71074c2c4 in wicket's branch refs/heads/master from [~sebfz1]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4f12565 ]

WICKET-6052 CSS header contribution overlap
","23/Dec/15 08:45;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/148
",23/Dec/15 09:07;sebfz1;Thank you very much Martin!! :),"23/Dec/15 09:39;githubbot;Github user klopfdreh commented on the pull request:

    https://github.com/apache/wicket/pull/148#issuecomment-166846713
  
    Hi :-)
    
    Is this also relevant for master? 
    
    Then we should cherypick it to master.
","23/Dec/15 09:42;mgrigorov;Branch: refs/heads/master
Commit: 4f125657ced04409bb7026fde7c774b71074c2c4
Parents: e49e041","23/Dec/15 09:43;githubbot;Github user martin-g commented on the pull request:

    https://github.com/apache/wicket/pull/148#issuecomment-166847659
  
    Branch: refs/heads/master
    Commit: 4f125657ced04409bb7026fde7c774b71074c2c4
    Parents: e49e041
","23/Dec/15 09:52;githubbot;Github user klopfdreh commented on the pull request:

    https://github.com/apache/wicket/pull/148#issuecomment-166850198
  
    Thanks! 😊
","24/Dec/15 07:24;mgrigorov;[~sebfz1] Could you please add the quickstart as a test case when you have time ?
Thanks!
Merry Christmas!","24/Dec/15 13:27;sebfz1;Hi Martin,

Sure, I will do it next week!

Merry Christmas to you too! :)",,,,,,,,,,,,,,,
Wicket Ajax (Wicket.From.serializeElement) causes 400 bad request,WICKET-6050,12921602,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,rakesh.a,rakesh.a,14/Dec/15 08:52,24/Dec/15 13:25,13/Mar/19 23:18,24/Dec/15 13:25,6.21.0,,,,,,,,6.22.0,7.2.0,8.0.0-M1,,wicket,,,0,,,,,,,,"Due to the recent change (WICKET-5948) in Wicket Ajax (JavaScript), Ajax calls add nested form element values as request parameters and result HTTP status code 400 when URL gets too long.
This happens when you add an Ajax behavior (custom event triggered from JavaScript) to a DOM element with nested form fields.
",,,,,,,,,,,,,,,,,WICKET-6006,,,,,,,,14/Dec/15 08:53;rakesh.a;WICKET-5948-2.7z;https://issues.apache.org/jira/secure/attachment/12777434/WICKET-5948-2.7z,,,,1.0,,,,,,,,,,,,,,,,,,,2015-12-14 09:40:24.939,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Dec 24 13:25:43 UTC 2015,,,,,,0|i2pui7:,9223372036854775807,,,,,,,,"14/Dec/15 08:53;rakesh.a;Attached quick start.
Quick start tries to integrate JQuery UI's 'Resizable' component. A Wicket Ajax behavior is used to initialize 'Resizable' component and add ajax callback to resize 'stop' event.
The panel[div] to which, this behavior is added contains two text fields.",14/Dec/15 08:58;rakesh.a;Please find the original discussion at http://apache-wicket.1842946.n4.nabble.com/Wicket-Ajax-adding-all-form-component-values-to-request-parameters-td4672911.html,"14/Dec/15 09:06;rakesh.a;By adding Wicket.Form.excludeFromAjaxSerialization[markupId] = 'true'; it probably can be avoided, but this needs to be done to all behaviors that were written prior to v6.21.0 (consider behaviors written for UI component integration - WiQuery, etc).

WICKET-5948 change in 6.21.0 has more impact I think.","14/Dec/15 09:40;svenmeier;This is a case where serializing all descendants (since WICKET-5948) is undesirable.

Maybe we have to make this configurable? What would be the default though?","14/Dec/15 10:20;mgrigorov;I think the functionality should be opt-in, i.e. only Ajax behaviors which want to serialize everything should explicitly ask for it. This way it will be backward compatible too.","14/Dec/15 12:06;rakesh.a;Yes, Ajax behaviors should not serialize nested form elements as default, and sub-classes can opt for it, if required.
A new 'Ajax attribute' may be ?","24/Dec/15 13:07;jira-bot;Commit 1daec2ef2b6b9ae5ff4f60d42ed5d119cbaaf4a0 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1daec2e ]

WICKET-6050 Wicket Ajax (Wicket.From.serializeElement) causes 400 bad request
WICKET-5948 wicket-ajax.js probably doesn't traverse the children of <div> or <span>
WICKET-6006 ModalWindow.closeCurrent() causes 414 status error

Introduce AjaxRequestAttributes#serializeRecursively with default value 'false'.
This is a flag indicating whether to collect (submit) the name/value pairs for all HTML form elements children of the HTML element with the JavaScript listener
","24/Dec/15 13:14;jira-bot;Commit 1d9c6b955553d72e36b029e44bc07e3206fa4e88 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1d9c6b9 ]

WICKET-6050 Wicket Ajax (Wicket.From.serializeElement) causes 400 bad request
WICKET-5948 wicket-ajax.js probably doesn't traverse the children of <div> or <span>
WICKET-6006 ModalWindow.closeCurrent() causes 414 status error

Introduce AjaxRequestAttributes#serializeRecursively with default value 'false'.
This is a flag indicating whether to collect (submit) the name/value pairs for all HTML form elements children of the HTML element with the JavaScript listener
","24/Dec/15 13:18;jira-bot;Commit abd958d4eb128056bc7e57ab943dfc69c23b3925 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=abd958d ]

WICKET-6050 Wicket Ajax (Wicket.From.serializeElement) causes 400 bad request
WICKET-5948 wicket-ajax.js probably doesn't traverse the children of <div> or <span>
WICKET-6006 ModalWindow.closeCurrent() causes 414 status error

Introduce AjaxRequestAttributes#serializeRecursively with default value 'false'.
This is a flag indicating whether to collect (submit) the name/value pairs for all HTML form elements children of the HTML element with the JavaScript listener
",24/Dec/15 13:25;mgrigorov;Added org.apache.wicket.ajax.attributes.AjaxRequestAttributes#setSerializeRecursively(boolean),,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxEventBehavior should not lower-case the event name,WICKET-5939,12841673,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,gabriel.bucher,gabriel.bucher,30/Jun/15 11:56,26/Nov/15 11:28,13/Mar/19 23:18,30/Jun/15 12:07,7.0.0-M5,7.0.0-M6,,,,,,,6.21.0,7.0.0,,,,,,0,,,,,,,,"I'm using the Bootstrap DatePicker js library (also included in wicket-boostrap)
doc: http://bootstrap-datepicker.readthedocs.org/

I extended AjaxEventBehavior to implement Bootstrap-DataPicker's 'changeDate' event.

my first attempted failed. My AjaxEventBehavior was never triggered. after further investigation I discovered that the event name was all in lowercase! (which prevented latest chrome to trigger it)

Wicket.Ajax.ajax({""u"":""./?2-2.IBehaviorListener.0-calendarLink"",""c"":""calendarLink6"",""dep"":[function(attrs){return [{'name':'newDate', 'value': attrs.event.format()}]}],""e"":""changedate""});;


the getEvent method in AjaxEventBehavior is lowercase the event name!

    public String getEvent()
    {
        String events = event.toLowerCase();


for my case, I just overridden the getEvent to make it work.

I couldn't find a clear description/specification related to case-sensitive or case-insensitive!
one possible hint https://en.wikipedia.org/wiki/DOM_events under Event object:
DOMString (type): The name of the event (case-insensitive in DOM level 2 but case-sensitive in DOM level 3).

should
  String events = event.toLowerCase()
be removed? 

and Martin Grigorov added the following comment
http://www.w3.org/TR/DOM-Level-3-Events/ confirms what you say.",,,,,,,,,,,,,,,,,,,,,WICKET-6047,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-30 12:04:39.567,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jun 30 12:07:19 UTC 2015,,,,,,0|i2golr:,9223372036854775807,,,,,,,,"30/Jun/15 12:04;jira-bot;Commit bbe9170a8de717804aa2418d30f9424f05608b2f in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bbe9170 ]

WICKET-5939 AjaxEventBehavior should preserve the event name as provided
","30/Jun/15 12:06;jira-bot;Commit c5452f75c12dca780d45d45ed7d449948735739e in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c5452f7 ]

WICKET-5939 AjaxEventBehavior should preserve the event name as provided

(cherry picked from commit bbe9170a8de717804aa2418d30f9424f05608b2f)
",30/Jun/15 12:07;mgrigorov;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ModalWindow vulnerable to Javascript injection through title model,WICKET-6037,12914083,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,tgierke,tgierke,18/Nov/15 11:22,19/Nov/15 09:14,13/Mar/19 23:18,19/Nov/15 09:14,1.5.11,7.1.0,,,,,,,1.5.15,6.22.0,7.2.0,8.0.0-M1,wicket-extensions,,,0,,,,,,,,"I came across this while fixing XSS vulnerabilities found during a penetration test of our application (which sadly still uses Wicket 1.5.x).

Just to be sure, I also checked the source from Wicket 7.1.0 and the issue is present as well.

The following lines in org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow#getWindowOpenJavaScript() are the culprit
------------------
		Object title = getTitle() != null ? getTitle().getObject() : null;
		if (title != null)
		{
			appendAssignment(buffer, ""settings.title"", escapeQuotes(title.toString()));
		}
-----------------

Using escapeQuotes() is not enough since Javascript written without quotes is still executed by at least the latest Firefox version (didn't bother checking other browsers).

For example having the title model return a string that contains

    <i onclick=alert(1)>stuff</i>

will make the browser show a JS popup when clicking on the dialog title.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-19 09:14:17.26,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Nov 19 09:14:17 UTC 2015,,,,,,0|i2oko7:,9223372036854775807,,,,,,,,"19/Nov/15 09:14;svenmeier;Escaping of ModalWindow's title is configurable now through #setEscapeModelValue(), default is true.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Nested TransparentWebMarkupContainer, markup of inner component not found",WICKET-6027,12911309,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,rfoerthe,rfoerthe,07/Nov/15 15:55,18/Nov/15 22:50,13/Mar/19 23:18,15/Nov/15 16:52,7.1.0,,,,,,,,7.2.0,8.0.0-M1,,,wicket,,,0,,,,,,,,"In the attached example page a FeedbackPanel should be rendered on AJAX-Request by pressing an AjaxButton. If you submit the form with empty input in TextField  'username"" you get a MarkupNotFoundError for the FeedbackPanel:

""org.apache.wicket.markup.MarkupNotFoundException: Markup not found for Component: [FeedbackPanel [Component id = feedback]]
     at org.apache.wicket.Component.internalRender(Component.java:2348)
     at org.apache.wicket.Component.render(Component.java:2308)
     at org.apache.wicket.page.XmlPartialPageUpdate.writeComponent(XmlPartialPageUpdate.java:119)
     at org.apache.wicket.page.PartialPageUpdate.writeComponents(PartialPageUpdate.java:245)""

The MarkupNotFoundError is associated to the two TransparentWebMarkupContainer's in the page. If you remove one of them for example, the problem is gone.  
  ",,,,,,,,,,,,,WICKET-6035,,,,,,,,,,,,07/Nov/15 15:57;rfoerthe;MarkupNotFoundPage.html;https://issues.apache.org/jira/secure/attachment/12771184/MarkupNotFoundPage.html,07/Nov/15 15:57;rfoerthe;MarkupNotFoundPage.java;https://issues.apache.org/jira/secure/attachment/12771185/MarkupNotFoundPage.java,,,2.0,,,,,,,,,,,,,,,,,,,2015-11-14 13:55:04.502,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Nov 15 15:56:33 UTC 2015,,,,,,0|i2o3mf:,9223372036854775807,,,,,,,,"14/Nov/15 13:55;mgrigorov;Seems to be broken by:
WICKET-5898 method searchMarkupInTransparentResolversrewritten to use container markup fragment (rev. ffdd0864c27a49f7ff1dbb616bf79e3f3b13987c)",14/Nov/15 15:16;bitstorm;Right. That's why 6.x is not affected.,14/Nov/15 16:11;bitstorm;I've finished to work to a fix. Still have to add JavaDocs and a unit test. ,"14/Nov/15 19:28;jira-bot;Commit 1d654bf6e6be146cd0658d3f4b79f7a044646ea0 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1d654bf ]

WICKET-6027 Nested TransparentWebMarkupContainer, markup of inner
component not found ","15/Nov/15 15:56;jira-bot;Commit 96a782238a06defd4d52bf8271625ff36924cac8 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=96a7822 ]

WICKET-6027 Nested TransparentWebMarkupContainer, markup of inner
component not found 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception raised while refreshing a page with queued components missing in the markup,WICKET-6001,12905383,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,darkvadaure,darkvadaure,16/Oct/15 00:25,18/Nov/15 22:48,13/Mar/19 23:18,16/Nov/15 16:13,7.0.0,,,,,,,,7.2.0,8.0.0-M1,,,wicket,,,0,,,,,,,,"An exception is raised when refreshing a page or panel containing queued components which are missing in the markup.
We can omit queued components in the markup when the page is created the first time but we cannot refresh it",,,,,,,,,,,,,WICKET-5962,,,,,,,,,,,,16/Oct/15 00:27;darkvadaure;myproject.war;https://issues.apache.org/jira/secure/attachment/12766934/myproject.war,,,,1.0,,,,,,,,,,,,,,,,,,,2015-11-03 20:56:25.695,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Nov 18 22:48:48 UTC 2015,,,,,,0|i2n3dr:,9223372036854775807,,,,,,,,"16/Oct/15 00:30;darkvadaure;in myproject.war : 2 links refresh 2 containers. The first one contains a listview with 2 labels (one is missing) and the second one contains a missing label.
Hitting F5 or clicking on the links generate the exception","03/Nov/15 20:56;bitstorm;Hi,

could you provide a quickstart (with source code) that reproduces the problem?","07/Nov/15 10:53;darkvadaure;hi, what about the attachment war file ?  doesn't it reproduce the problem ?","07/Nov/15 16:30;bitstorm;I see your war contains also source files so I could build a quickstart with them. A quickstart is much more helpful to spot an issue as we can see the code.

[~mgrigorov]
the problem is inside RequestHandlerStack#detach(). Every exception is caught and silently logged. I see you have changed the try/catch statement with this: https://git-wip-us.apache.org/repos/asf/wicket/repo?p=wicket.git;a=commitdiff;h=a5954823353f20a6157156704ae91d6067a1f5c8
A possible solution for this current issue could be adding another catch block for RuntimeException:

{code}
try
			{
				detach(handler);
			}
			catch (RuntimeException exception)
			{
				throw exception;
			}
			catch (Exception exception)
			{
				log.error(""Error detaching RequestHandler"", exception);
			}
{code} 

Could be this a problem in your opinion?","07/Nov/15 16:36;mgrigorov;I've changed it because it is bad practice to catch Throwable. It will catch Error too, e.g. OutOfMemoryError, ThreadDeath, VirtualMachineError, and those are not recoverable.
How this breaks the component queueing? 
What happens after the re-throw of the runtime exception?
","07/Nov/15 19:08;bitstorm;Well, I think the title of this issue is a little bit misleading. The problem is not about component queueing working bad. The really problem is that the exception is not re-throw and, as a result, it goes unnoticed by user.
If the same exception (thrown by MarkupContainer#onDetach) occurs during rendering phase, it's correctly displayed to user. I just asked you if my proposed change could break something you did in your commit.","09/Nov/15 09:10;mgrigorov;#onDetach() is called **after** writing the response headers to the browser in case of disabled response buffering. 
I guess we can check whether org.apache.wicket.settings.RequestCycleSettings#getBufferResponse() returns true and re-throw the exception in this case. Should be tested!","16/Nov/15 11:59;jira-bot;Commit 67b53cf0de66fb8f41a10831e96168b29ab240f2 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=67b53cf ]

WICKET-6001 Exception raised while refreshing a page with queued components missing in the markup
","16/Nov/15 15:50;jira-bot;Commit 8f42d7613c107581556534656f62e985f9e8a72a in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8f42d76 ]

WICKET-6001 Exception raised while refreshing a page with queued components missing in the markup
","18/Nov/15 22:48;jira-bot;Commit c6fe37d38f9d961a4227480bbee1ac2ed1d24599 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c6fe37d ]

WICKET-6001 Exception raised while refreshing a page with queued components missing in the markup

Check that there is an Application thread local first.
We've been bitten by such assumptions several times
","18/Nov/15 22:48;jira-bot;Commit 525995ec9dbdbea226c370e410aaf1ad81aaf498 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=525995e ]

WICKET-6001 Exception raised while refreshing a page with queued components missing in the markup

Check that there is an Application thread local first.
We've been bitten by such assumptions several times
",,,,,,,,,,,,,,,,,,,,,,,,,
Failure to process markup with nested tags inside a Label,WICKET-6036,12913572,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,papegaaij,papegaaij,17/Nov/15 07:36,18/Nov/15 22:32,13/Mar/19 23:18,18/Nov/15 22:32,7.0.0,7.1.0,,,,,,,7.2.0,8.0.0-M1,,,wicket,,,0,,,,,,,,"The fix for WICKET-5730 causes previously accepted markup to be rejected under some circumstances. In our case, we have a Label, which renders some markup (text and an image), and expressed this in the markup for the panel:
{code}
<wicket:panel>
	<span wicket:id=""test""> test <img src=""img.png"" /></span>
</wicket:panel>
{code}

When you add this Label to the panel, the following Exception is triggered:
{code}
java.lang.IllegalStateException: Tag '<img src=""img.png""/>' should be the closing one for '<span wicket:id=""test"">'
	at org.apache.wicket.MarkupContainer.dequeueChild(MarkupContainer.java:2163)
	at org.apache.wicket.MarkupContainer.dequeue(MarkupContainer.java:2120)
	at org.apache.wicket.MarkupContainer.dequeuePreamble(MarkupContainer.java:2075)
	at org.apache.wicket.MarkupContainer.dequeue(MarkupContainer.java:1993)
	at org.apache.wicket.MarkupContainer.addedComponent(MarkupContainer.java:1049)
	at org.apache.wicket.MarkupContainer.add(MarkupContainer.java:239)
	at org.apache.wicket.util.tester.BaseWicketTester.startComponentInPage(BaseWicketTester.java:1460)
	at org.apache.wicket.util.tester.BaseWicketTester.startComponentInPage(BaseWicketTester.java:1386)
	at org.apache.wicket.queueing.ComponentQueueingCompatibilityTest.nestedTags(ComponentQueueingCompatibilityTest.java:28)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
{code}

This is a regression since 6.x, introduced by commit db5be6ab05545e1bb95f566c3aeb23e05cf93437. I've added a disabled testcase to demonstrate the problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-17 07:38:16.949,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Nov 18 22:32:07 UTC 2015,,,,,,0|i2ohjb:,9223372036854775807,,,,,,,,"17/Nov/15 07:38;jira-bot;Commit 2224450fa70606e7a3ddabc1e44a9d30f7960658 in wicket's branch refs/heads/wicket-7.x from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2224450 ]

WICKET-6036: testcase demonstrating the problem
","17/Nov/15 07:39;jira-bot;Commit 95cb76329a5fe1665e65b9f2dfa9af3a45f50769 in wicket's branch refs/heads/master from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=95cb763 ]

WICKET-6036: testcase demonstrating the problem
","17/Nov/15 21:40;jira-bot;Commit 497a5d629b609d2e6039b2df6c35bc1035077984 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=497a5d6 ]

WICKET-6036 Failure to process markup with nested tags inside a Label

Take tags from the 'dequeue' until the closing one is found.
Throw an exception iff it cannot be found
",17/Nov/15 21:41;mgrigorov;[~bitstorm] Please review the improvement. Thanks!,"17/Nov/15 21:41;jira-bot;Commit 23cf287700a62ac77224478f1ab29feee2129159 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=23cf287 ]

WICKET-6036 Failure to process markup with nested tags inside a Label

Take tags from the 'dequeue' until the closing one is found.
Throw an exception iff it cannot be found
","18/Nov/15 07:28;papegaaij;The change looks correct to me. Thanks for taking care of this, I only had time to create a testcase and ticket. One minor comment: the error message is missing the word 'tag': ""Could not find the closing _tag_ for '%s'""",18/Nov/15 16:01;bitstorm;It's ok also for me. Just one thing. I'd prefer to add a test method to the existing ComponentQueueingTest class rather than creating a new one just for it.  ,"18/Nov/15 22:29;jira-bot;Commit 6970a4dadb5d1b3b73b8be63d1f321e61967ff13 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6970a4d ]

WICKET-6036 Failure to process markup with nested tags inside a Label

Move the new test from ComponentQueueingCompatibilityTest to ComponentQueueingTest.
Fix the exception message.
Remove some trailing spaces.
","18/Nov/15 22:32;jira-bot;Commit 89c285a1520e9d008fff9f4452fab6ba611b17da in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=89c285a ]

WICKET-6036 Failure to process markup with nested tags inside a Label

Move the new test from ComponentQueueingCompatibilityTest to ComponentQueueingTest.
Fix the exception message.
Remove some trailing spaces.
",,,,,,,,,,,,,,,,,,,,,,,,,,,
FileUploadField makes form-component models become null on submit,WICKET-6002,12905491,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,ceefour,ceefour,16/Oct/15 11:19,14/Nov/15 12:46,13/Mar/19 23:18,14/Nov/15 12:45,7.0.0,,,,,,,,7.2.0,8.0.0-M1,,,wicket,,,0,,,,,,,,"First form: (not working)

{code:java}
        final Form<Void> form = new Form<>(""form"");

        final ListModel<FileUpload> filesModel = new ListModel<>();
        final FileUploadField fileFld = new FileUploadField(""fileFld"", filesModel);
        form.add(fileFld);

        final Model<GrayscaleMode> modeImageModel = new Model<>(GrayscaleMode.WHITE_ON_BLACK);
        final RadioChoice<GrayscaleMode> modeImage = new RadioChoice<>(""modeImage"",
                modeImageModel, ImmutableList.copyOf(GrayscaleMode.values()));
        form.add(modeImage);

        form.add(new AjaxButton(""loadBtn2"") {
            @Override
            protected void onAfterSubmit(AjaxRequestTarget target, Form<?> form) {
                super.onAfterSubmit(target, form);
                log.info(""modeimageModel: {}"", modeImageModel.getObject());
            }
        });
        add(form);
{code}

Second form: exactly same as above, but remove the fileUploadField.

{code:java}
final Form<Void> form2 = new Form<>(""form2"");
final Model<GrayscaleMode> modeImage2Model = new Model<>(GrayscaleMode.WHITE_ON_BLACK);
final RadioChoice<GrayscaleMode> modeImage2 = new RadioChoice<>(""modeImage2"",
        modeImage2Model, ImmutableList.copyOf(GrayscaleMode.values()));
form2.add(modeImage2);
form2.add(new AjaxButton(""loadBtn3"") {
    @Override
    protected void onAfterSubmit(AjaxRequestTarget target, Form<?> form) {
        super.onAfterSubmit(target, form);
        log.info(""modeimageModel: {}"", modeImage2Model.getObject());
    }
});
add(form2);
{code}

Markup:

{code}
<form class=""col-md-3"" wicket:id=""form"">
    <p><strong>Original</strong></p>
    <div>
        <input type=""file"" wicket:id=""fileFld"" accept=""image/*""/>
        <p>
            <label>Mode</label>:
            <span wicket:id=""modeImage""></span>
        </p>
        <button class=""button"" wicket:id=""loadBtn2"">Load Biasa</button>
    </div>
</form>

<form class=""col-md-3"" wicket:id=""form2"">
    <p><strong>Original</strong></p>
    <div>
        <p>
            <label>Mode</label>:
            <span wicket:id=""modeImage2""></span>
        </p>
        <button class=""button"" wicket:id=""loadBtn3"">Load 3</button>
    </div>
</form>
{code}

With the non-working form, the request is multipart. This seems to cause all form components' model.getObject() become null.

{noformat}
POST /chaincode?0-1.IBehaviorListener.0-form-loadBtn2&wicket-ajax=true&wicket-ajax-baseurl=chaincode%3F0 HTTP/1.1
Host: localhost:8080
Connection: keep-alive
Content-Length: 576
Cache-Control: max-age=0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Origin: http://localhost:8080
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36
Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryv78rJ8mvP8YbHtBy
Referer: http://localhost:8080/chaincode?0
Accept-Encoding: gzip, deflate
Accept-Language: id,en-US;q=0.8,en;q=0.6,ms;q=0.4
Cookie: JSESSIONID=746B6931A8791427E02FCE5C1D20F1B7

------WebKitFormBoundaryv78rJ8mvP8YbHtBy
Content-Disposition: form-data; name=""form3_hf_0""


------WebKitFormBoundaryv78rJ8mvP8YbHtBy
Content-Disposition: form-data; name=""fileFld""; filename=""""
Content-Type: application/octet-stream


------WebKitFormBoundaryv78rJ8mvP8YbHtBy
Content-Disposition: form-data; name=""modeImage""

0
------WebKitFormBoundaryv78rJ8mvP8YbHtBy
Content-Disposition: form-data; name=""msgImage""


------WebKitFormBoundaryv78rJ8mvP8YbHtBy
Content-Disposition: form-data; name=""loadBtn2""

1
------WebKitFormBoundaryv78rJ8mvP8YbHtBy--
{noformat}

With the working form, the request is urlencoded form:

{noformat}
POST /chaincode?0-1.IBehaviorListener.0-form2-loadBtn3 HTTP/1.1
Host: localhost:8080
Connection: keep-alive
Content-Length: 36
Origin: http://localhost:8080
Wicket-FocusedElementId: loadBtn32
User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Accept: application/xml, text/xml, */*; q=0.01
X-Requested-With: XMLHttpRequest
Wicket-Ajax: true
Wicket-Ajax-BaseURL: chaincode?0
Referer: http://localhost:8080/chaincode?0
Accept-Encoding: gzip, deflate
Accept-Language: id,en-US;q=0.8,en;q=0.6,ms;q=0.4
Cookie: JSESSIONID=746B6931A8791427E02FCE5C1D20F1B7

form21_hf_0=&modeImage2=0&loadBtn3=1
{noformat}

""Probably"" related with WICKET-5924, but I don't have issue with FileUploadField, my issue is with other form components in the same form as FileUploadField. Probably related to: http://stackoverflow.com/questions/28784942/fileupload-field-wicket-error

*Test case:*

{code}
git clone https://github.com/tmdgitb/pengenalan_pola_shih.git -t WICKET-6002
{code}

1. Run {{DaemonApp}}
2. Go to ""ChainCode"" page 
3. click ""Load Biasa"" on the left, you'll see ""modeimageModel: null"". --> not working: using FileUploadField + multipart
4. click ""Load 3"" on the right, you'll see ""modeimageModel: WHITE_ON_BLACK"" --> works: using urlencoded
","Spring Boot 1.2.6, wicket-bootstrap 0.10.3, Tomcat 8",,,,,,,,,,,,,,,,,,,,,,,WICKET-5924,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-18 09:16:34.266,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Nov 14 12:46:47 UTC 2015,,,,,,0|i2n41r:,9223372036854775807,,,,,,,,16/Oct/15 11:24;ceefour;Workaround described in WICKET-5924 (https://issues.apache.org/jira/browse/WICKET-5924?focusedCommentId=14586051&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14586051): either {{(exclude = MultipartAutoConfiguration.class)}} or {{multipart.enabled=false}} *works!*,"18/Oct/15 09:16;mgrigorov;How to run the application in my IDE? If you use non-standard ways to do that then please add it in the steps to reproduce! I'm wasting my spare time trying to figure out what to do with this rather big application.
Trying to start id.ac.itb.sigit.pengenalanpola.PlatNomorApp as SpringBoot app fails with:
Exception in thread ""main"" java.lang.IllegalStateException: Failed to execute CommandLineRunner
	at org.springframework.boot.SpringApplication.runCommandLineRunners(SpringApplication.java:676)
	at org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:691)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:139)
	at id.ac.itb.sigit.pengenalanpola.PlatNomorApp.main(PlatNomorApp.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
Caused by: java.lang.NullPointerException
	at org.bytedeco.javacpp.helper.opencv_core$AbstractArray.createIndexer(opencv_core.java:175)
	at org.bytedeco.javacpp.helper.opencv_core$AbstractArray.createIndexer(opencv_core.java:165)
	at id.ac.itb.sigit.pengenalanpola.ChainCodeWhiteConverter.getChainCode(ChainCodeWhiteConverter.java:49)
	at id.ac.itb.sigit.pengenalanpola.PlatNomorApp.run(PlatNomorApp.java:58)
	at org.springframework.boot.SpringApplication.runCommandLineRunners(SpringApplication.java:673)
	... 9 more

Also please don't scratch your comments but delete them and leave only the latest version. It is hard to follow you this way.

Now on the issue itself: Spring Boot uses Servlet 3.0 MultipartConfig by default. Wicket 7.0.0 supports it partially - there is no support for progress notifications.
I'd recommend to use (exclude = MultipartAutoConfiguration.class) in Wicket applications.","18/Oct/15 09:27;ceefour;Sorry about that, the main class is DaemonApp.","18/Oct/15 10:34;mgrigorov;The app starts fine now.
But in ChainCode page there are neither 'Load Biasa' nor 'Load 3' labels/buttons.

Selecting a file in the file upload, a radio button and entering some text in the text field leads to these INFOs:

2015-10-18 12:32:20.249  INFO 348 --- [nio-8080-exec-9] i.a.i.s.p.web.ChainCodePage              : mode: BLACK_ON_WHITE 
2015-10-18 12:32:20.249  INFO 348 --- [nio-8080-exec-9] i.a.i.s.p.web.ChainCodePage              : Message: jji 
2015-10-18 12:32:20.249  INFO 348 --- [nio-8080-exec-9] i.a.i.s.p.web.ChainCodePage              : Loaded file 20150221_102929.jpg (image/jpeg)
2015-10-18 12:32:41.295  INFO 348 --- [nio-8080-exec-9] i.a.i.s.pengenalanpola.ChainCodeService  : Processing input image image/jpeg: 1267512 bytes ...
2015-10-18 12:32:41.470  INFO 348 --- [nio-8080-exec-9] i.a.i.s.pengenalanpola.ChainCodeService  : Image mat: rows=1836 cols=3264 depth=0 type=16
2015-10-18 12:32:41.702  INFO 348 --- [nio-8080-exec-9] i.a.i.s.p.ChainCodeWhiteConverter        : ukuran gambar rows=1836 cols=3264 type=0 depth=0

I've copied 
{code}
info(""Loaded file "" + first.getClientFileName() + "" ("" + first.getContentType() + "")"");
{code}

to 
{code}
log.info(""Loaded file "" + first.getClientFileName() + "" ("" + first.getContentType() + "")"");
{code}
and put it before the call to ""chainCodeService.loadInput(first.getContentType(), first.getBytes(), mode)""

So everything looks OK until here. Wicker property updates the model objects. You can verify this by setting a breakpoint at FormComponent#updateModel().

But right after that the app breaks with:

Caused by: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:653)
	at java.util.ArrayList.get(ArrayList.java:429)
	at id.ac.itb.sigit.pengenalanpola.RelKodeBelok.penyederhanaanKodeBelok(RelKodeBelok.java:34)
	at id.ac.itb.sigit.pengenalanpola.RelKodeBelok.<init>(RelKodeBelok.java:16)
	at id.ac.itb.sigit.pengenalanpola.ChainCodeWhiteConverter.getChainCode(ChainCodeWhiteConverter.java:67)
	at id.ac.itb.sigit.pengenalanpola.ChainCodeService.processChainCode(ChainCodeService.java:80)
	at id.ac.itb.sigit.pengenalanpola.ChainCodeService.loadInput(ChainCodeService.java:58)
	at id.ac.itb.sigit.pengenalanpola.ChainCodeService.loadInput(ChainCodeService.java:50)
	at WICKET_id.ac.itb.sigit.pengenalanpola.ChainCodeService$$FastClassByCGLIB$$aa228630.invoke(<generated>)
	at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.apache.wicket.proxy.LazyInitProxyFactory$AbstractCGLibInterceptor.intercept(LazyInitProxyFactory.java:350)
	at WICKET_id.ac.itb.sigit.pengenalanpola.ChainCodeService$$EnhancerByCGLIB$$e75ed40d.loadInput(<generated>)
	at id.ac.itb.sigit.pengenalanpola.web.ChainCodePage$4.onSubmit(ChainCodePage.java:132)
	at org.apache.wicket.ajax.markup.html.form.AjaxButton$1.onSubmit(AjaxButton.java:113)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit(AjaxFormSubmitBehavior.java:215)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1307)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:974)

For me everything looks fine.",18/Oct/15 11:35;ceefour;Can you check that you use the WICKET-6002 tag? From your description it seems you use the master branch instead.,18/Oct/15 11:59;mgrigorov;Please provide simple quickstart.,"23/Oct/15 08:18;ceefour;[~mgrigorov] Here's the quickstart, please reopen: https://github.com/ceefour/wicket-6002

In code for {{HomePage.java}} you can add {{fileFld.setVisible(false);}} which will make the {{TextField}} ""work"" again.","14/Nov/15 12:45;jira-bot;Commit 374865e57412b6447e3edf85bd211961b9270d39 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=374865e ]

WICKET-6002 FileUploadField makes form-component models become null on submit

Use #entrySet() while looping over a map
","14/Nov/15 12:45;jira-bot;Commit d2db957866a8a24450c23dcb8c1fd27ec49c41ab in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d2db957 ]

WICKET-6002 FileUploadField makes form-component models become null on submit

Use the Part's content type to decide whether it is a fileupload or standard form field.
",14/Nov/15 12:45;mgrigorov;Thank you for the simpler quickstart!,"14/Nov/15 12:46;jira-bot;Commit 1c44a3b6ba97467a10b9033fe0d4a04d2ce1c00f in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1c44a3b ]

WICKET-6002 FileUploadField makes form-component models become null on submit

Use #entrySet() while looping over a map
","14/Nov/15 12:46;jira-bot;Commit e8faee175f6e394a14f36203d4b049e4a3c51ebd in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e8faee1 ]

WICKET-6002 FileUploadField makes form-component models become null on submit

Use the Part's content type to decide whether it is a fileupload or standard form field.
",,,,,,,,,,,,,,,,,,,,,,,,
Tests fail when executed with not expected locale,WICKET-6017,12909500,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,01/Nov/15 18:48,14/Nov/15 12:45,13/Mar/19 23:18,14/Nov/15 10:23,6.20.0,,,,,,,,6.22.0,7.2.0,8.0.0-M1,,wicket,,,0,,,,,,,,"Running tests with:

  LANG=C.UTF-8 LC_ALL=C.UTF-8 mvn test

fails with:

noDuplicateVariations(org.apache.wicket.util.resource.locator.ResourceNameIteratorTest): expected:<6> but was:<4>

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-14 10:22:49.659,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Nov 14 12:45:10 UTC 2015,,,,,,0|i2nsk7:,9223372036854775807,,,,,,,,"14/Nov/15 10:22;jira-bot;Commit dbd0fa83eea755fbf64bca17065762899ceffc7a in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=dbd0fa8 ]

WICKET-6017 Tests fail when executed with not expected locale

Use a random locale that has both a country and a language
","14/Nov/15 10:23;jira-bot;Commit 8c6461207c6cef90c3645e71a99e61e31d149a48 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8c64612 ]

WICKET-6017 Tests fail when executed with not expected locale

Use a random locale that has both a country and a language
","14/Nov/15 12:45;jira-bot;Commit e8b874f8d6a23ef419396412815b5b2742e5fca2 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e8b874f ]

WICKET-6017 Tests fail when executed with not expected locale

Use a random locale that has both a country and a language
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in PackageResourceReference#getResource() when there is no request,WICKET-6031,12912108,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,dvendt,dvendt,11/Nov/15 09:29,14/Nov/15 09:59,13/Mar/19 23:18,14/Nov/15 09:59,7.1.0,,,,,,,,7.2.0,8.0.0-M1,,,,,,0,,,,,,,,"This is my first filed issue, so please help me if I'm not filing this correctly.

This issue came across when migrating Apache 6.19.0 to 7.1.0. In our original implementation we added the pie.htc to the applications shared resources in MyWebApplication#init()
{code:java}
getSharedResources().add(""/pie.htc"", new PackageResourceReference(MyWebApplication.class, ""pie.htc"").getResource());
{code}

The resource file is next to the MyWebApplication's file and it worked in 6.19.0. Now, in 7.1.0, the method PackageResourceReference#getResource() has been extended and now takes into account the variation, style and locale of the request url.
So, obtaining the resource now depends on the request, which is not available when initializing the application, which results in a NullPointerException in the following line:

{code}
org.apache.wicket.request.resource.PackageResourceReference.getResource(PackageResourceReference.java:115)
{code}

{code}
final Url url = RequestCycle.get().getRequest().getUrl();
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-14 09:59:34.202,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Nov 14 09:59:42 UTC 2015,,,,,,0|i2o8jz:,9223372036854775807,,,,,,,,"14/Nov/15 09:59;jira-bot;Commit f37581bae1241b3a96e912378fc6ce43dee8f780 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f37581b ]

WICKET-6031 NPE in PackageResourceReference#getResource() when there is no request
","14/Nov/15 09:59;jira-bot;Commit e4399d74234b657435f44eb137969db1a22896d5 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e4399d7 ]

WICKET-6031 NPE in PackageResourceReference#getResource() when there is no request
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Downloading filenames containing ',' or ';' gives problems",WICKET-6010,12907312,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,laurenshop,laurenshop,23/Oct/15 07:44,13/Nov/15 20:29,13/Mar/19 23:18,13/Nov/15 20:29,7.0.0,,,,,,,,7.2.0,8.0.0-M1,,,wicket,,,0,,,,,,,,"Since WICKET-4934 the ""filename"" in the Content-Disposition header is encoded in both ASCII and UTF-8 to show the filename in a cross browser compatible way. However, the implementation is not completely correct, and specifically causes problems when the filename contains ',' or ';' characters. Depending on the browser, the characters after the ',' or ';' are ignored, or an error is throwed.

Downloading of a file ""Test; 'ä'.txt"" gives the following Content-Disposition header:
{code}
attachment; filename=""Test;%20%27%C3%A4%27.txt""; filename*=UTF-8''Test;%20%27%C3%A4%27.txt
{code}

I am not completely familiar with the standards and current browser support, but http://greenbytes.de/tech/tc2231/ suggests that the ASCII ""filename"" field should not be URL encoded, just specified using plain ISO-8859-1, surrounded by double quotes, escaping double quotes by '\'. But this is not my biggest concern.

The UTF-8 ""filename*"" field is (correctly) not surrounded by quotes. As a result, all characters except ALPHA / DIGIT / ""!"" / ""#"" / ""$"" / ""&"" / ""+"" / ""-"" / ""."" / ""^"" / ""_"" / ""`"" / ""|"" / ""~"" [should be URL encoded|https://tools.ietf.org/html/rfc5987#section-3.2.1]. This includes ',' and ';'. Wicket's (PATH) UrlEncoder however does not encode '*', ',', ':', '@', '=' and ';'. Not encoding the ';' or ',' causes browsers to ignore the remainder of the filename or even to throw errors.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-23 11:03:41.038,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Nov 13 20:29:12 UTC 2015,,,,,,0|i2nf4f:,9223372036854775807,,,,,,,,23/Oct/15 11:03;svenmeier;since WICKET-4409 ';' is no longer encoded,"25/Oct/15 14:38;jira-bot;Commit a4578ceac5723c581a84871726e308252073309f in wicket's branch refs/heads/WICKET-6010-url-encoder from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a4578ce ]

WICKET-6010 UrlEncoder#FULL_PATH is no longer used in Wicket
","25/Oct/15 14:44;svenmeier;I'd propose to add an additional specialization to UrlEncoder:

- see branch WICKET-6010-url-encoder for an implementation of UrlEncoder.HEADER
- UrlEncoder.FULL_PATH isn't used in Wicket any longer - to simplify things we should remove it in Wicket 8 and deprecate it in Wicket 7
- we could rename UrlEncoder to something better, perhaps just URIEncoder, PercentEncoder or just Encoder?","28/Oct/15 09:55;laurenshop;I have tested your changes in the WICKET-6010-url-encoder branch and they work fine. I'm not sure about renaming the UrlEncoder. The term URL encoding is widely used. Percent encoding is the more official term however, maybe this is the best candidate.","28/Oct/15 19:59;jira-bot;Commit 5d51aedc42de72728f72c66f84339d2b96a2d235 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5d51aed ]

WICKET-6010 UrlEncoder#FULL_PATH is no longer used in Wicket
","28/Oct/15 20:46;jira-bot;Commit 0872534bc3f5e5ad5f47ff2cd4c48286d9d2153a in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0872534 ]

 WICKET-6010 UrlEncoder#FULL_PATH is no longer used in Wicket
",13/Nov/15 20:29;svenmeier;We have a specific encoder instance for header values now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem in detecting child id on nested <wicket:enclosure>,WICKET-6026,12911302,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,rfoerthe,rfoerthe,07/Nov/15 14:14,08/Nov/15 17:15,13/Mar/19 23:18,07/Nov/15 21:12,7.1.0,,,,,,,,7.2.0,8.0.0-M1,,,wicket,,,0,,,,,,,,"If you nest <wicket:enclosure> as following 

		<wicket:enclosure child=""labelOuter"">
			Outer Enclosure <span wicket:id=""labelOuter""/>

			<wicket:enclosure>
				Inner Enclosure <span wicket:id=""labelInner"" />
			</wicket:enclosure>
		</wicket:enclosure>

you get an error:

""You most likely forgot to register the EnclosureHandler with the MarkupParserFactory
 MarkupStream: [unknown]
	at org.apache.wicket.markup.html.internal.Enclosure.<init>(Enclosure.java:112)
	at org.apache.wicket.markup.parser.filter.EnclosureHandler$1.newComponent(EnclosureHandler.java:62)""

The error occurs independent of the visibility of the enclosed components.   
This markup works perfect in Wicket 6.20.0


 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-07 20:18:01.805,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Nov 08 17:15:17 UTC 2015,,,,,,0|i2o3kv:,9223372036854775807,,,,,,,,"07/Nov/15 20:18;jira-bot;Commit 98a2189d68fae0785724d5d29a04cee72d2f1323 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=98a2189 ]

WICKET-6026 Problem in detecting child id on nested <wicket:enclosure>
","07/Nov/15 20:35;jira-bot;Commit 9585b007215961e6a272515b6db95926a620a636 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9585b00 ]

WICKET-6026 Problem in detecting child id on nested <wicket:enclosure>
","08/Nov/15 17:15;jira-bot;Commit 9585b007215961e6a272515b6db95926a620a636 in wicket's branch refs/heads/lambdas from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9585b00 ]

WICKET-6026 Problem in detecting child id on nested <wicket:enclosure>
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"TransparentWebMarkupContainer is not really ""transparent""",WICKET-6018,12909510,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,bitstorm,bitstorm,01/Nov/15 20:25,02/Nov/15 21:22,13/Mar/19 23:18,02/Nov/15 21:22,7.1.0,,,,,,,,7.2.0,8.0.0-M1,,,,,,1,,,,,,,,"TransparentWebMarkupContainer is not really ""transparent"" in component hierarchy. See quickstart",,,,,,,,,,,,,,,,,,,,,,,,,01/Nov/15 20:25;bitstorm;myproject.zip;https://issues.apache.org/jira/secure/attachment/12770005/myproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2015-11-02 14:49:00.31,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Nov 02 15:18:15 UTC 2015,,,,,,0|i2nsmf:,9223372036854775807,,,,,,,,"02/Nov/15 14:49;jira-bot;Commit 052c4032153baeaa1479a51793511b6f39645516 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=052c403 ]

WICKET-6018 TransparentWebMarkupContainer is not really 'transparent'
","02/Nov/15 15:18;jira-bot;Commit bb2ba2805f5dfb2988c54911cb0008bd4fc84ae0 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bb2ba28 ]

WICKET-6018 TransparentWebMarkupContainer is not really 'transparent'
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GuiceFieldValueFactory returns the NULL_SENTINEL from the cache,WICKET-6020,12909767,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,02/Nov/15 20:01,02/Nov/15 20:24,13/Mar/19 23:18,02/Nov/15 20:18,6.21.0,7.1.0,,,,,,,6.22.0,7.2.0,8.0.0-M1,,wicket-guice,,,0,,,,,,,,"org.apache.wicket.guice.GuiceFieldValueFactory#getFieldValue() returns the org.apache.wicket.guice.GuiceFieldValueFactory#NULL_SENTINEL instead of null when found in the cache.

Broken-by: WICKET-5935",,,,,,,,,,,ISIS-1223,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-02 20:18:24.637,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Nov 02 20:24:36 UTC 2015,,,,,,0|i2nu9j:,9223372036854775807,,,,,,,,"02/Nov/15 20:18;jira-bot;Commit 21d80950b9eb6aa7265ace8b27056e8d112f2330 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=21d8095 ]

WICKET-6020 GuiceFieldValueFactory returns the NULL_SENTINEL from the cache
","02/Nov/15 20:18;jira-bot;Commit 68f8390cf18dcaa8a847300698df7913f69fbcb6 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=68f8390 ]

WICKET-6020 GuiceFieldValueFactory returns the NULL_SENTINEL from the cache
","02/Nov/15 20:24;jira-bot;Commit 14cba19c77b0b0cc49cf93d51110de23e9ed163c in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=14cba19 ]

WICKET-6020 GuiceFieldValueFactory returns the NULL_SENTINEL from the cache
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TransparentWebMarkupContainer breaks OnChangeAjaxBehavior for Select2,WICKET-6014,12908693,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,,phenderson,phenderson,28/Oct/15 20:44,02/Nov/15 09:04,13/Mar/19 23:18,01/Nov/15 20:23,7.1.0,,,,,,,,7.2.0,8.0.0-M1,,,wicket,,,0,,,,,,,,"A TransparentWebMarkupContainer which contains a Select2Choice control.
Select2Choice control has an OnChangeAjaxBehavior add.

Wicket 7.0.0  change events are processed correctly.
Wicket 7.1.0 change events are not processes correctly, a ComponentNotFoundException is thrown. 


Please excuse the quality of the Java in the quick start. It was converted from Scala (with me cursing Java's verbosity)

","Linux, Java 8, tomcat 7.54",,,,,,,,,,,,,,,,WICKET-6018,,,,,,,,28/Oct/15 20:46;phenderson;TransparentMarkupContainerBug.tar.gz;https://issues.apache.org/jira/secure/attachment/12769396/TransparentMarkupContainerBug.tar.gz,30/Oct/15 20:49;tahitiangabriel;myproject.zip;https://issues.apache.org/jira/secure/attachment/12769862/myproject.zip,,,2.0,,,,,,,,,,,,,,,,,,,2015-10-28 21:20:56.349,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Nov 01 20:22:11 UTC 2015,,,,,,0|i2nnkv:,9223372036854775807,,,,,,,,28/Oct/15 20:46;phenderson;Quick Start,28/Oct/15 21:20;tahitiangabriel;It is also breaking all unit tests with wickettester that are using TransparentWebMarkupContainer as the path of the component is added to the wicket path.,"30/Oct/15 10:55;jira-bot;Commit abb286614b943d082c861291fe273c085dbfafdb in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=abb2866 ]

WICKET-6014 TransparentWebMarkupContainer breaks OnChangeAjaxBehavior for Select2
","30/Oct/15 11:54;jira-bot;Commit ac010c466fa8534e31f9c777a1448cfdc875581f in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ac010c4 ]

WICKET-6014 TransparentWebMarkupContainer breaks OnChangeAjaxBehavior for Select2
","30/Oct/15 14:52;bitstorm;[~tahitiangabriel]

Could you provide another quickstart showing your problem with transparent containers? I'm not 100% sure that the two problems are caused by the same change in the code.",30/Oct/15 15:18;bitstorm;I solved the issue slightly changing the queueing algorithm (now MarkupContainer#dequeueChild propagates queueing also to IQueueRegionS).  ,"30/Oct/15 20:49;tahitiangabriel;quickstart with a wicket-bootstrap project

In the InlineFormGroup class I have a TransparentWebMarkupContainer with ""input"" as ID

It doesn't appear in the wicket path in 7.0.0 and it is added in 7.1.0.
A unit test is in the project.","31/Oct/15 18:53;jira-bot;Commit 730ab3d9a41efcf83cd075c3547ec6539ea6a7af in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=730ab3d ]

WICKET-6014 improvement for borders with enclosures inside their body
","31/Oct/15 20:14;jira-bot;Commit 297c4e51a925ef08c3ff903e4db26d2f910fe084 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=297c4e5 ]

WICKET-6014 improvement for borders with enclosures inside their body
",01/Nov/15 20:22;bitstorm;[~tahitiangabriel] I will open a new issue to track your specific problem.,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket Ajax fires calls scheduled by AbstractAjaxTimerBehavior even after unload of the page,WICKET-5607,12718370,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,vlastimil.dolejs,vlastimil.dolejs,04/Jun/14 12:51,29/Oct/15 10:16,13/Mar/19 23:18,16/Jun/14 15:25,6.15.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket,,,0,,,,,,,,"You have page with AbstractAjaxTimerBehavior, that loads slowly. Go to that page, refresh this page (F5) -> StalePageException.

This is because timer behavior send request to old version of page. If page load is fast enough you probably won't hit the problem, but if models load for significant time, then exception is thrown on every refresh.

Quickstart is included - just go to localhost:8080 and press F5.",,,,,,,,,,,,,,,,,,,,,WICKET-5822,,,,04/Jun/14 12:52;vlastimil.dolejs;timer-quickstart.zip;https://issues.apache.org/jira/secure/attachment/12648326/timer-quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2014-06-04 12:58:25.819,,,no_permission,,,,,,,,,,,,396569,,,Thu Oct 29 10:16:47 UTC 2015,,,,,,0|i1w9x3:,396690,,,,,,,,04/Jun/14 12:58;mgrigorov;Link to WICKET-4733. They look very similar.,"27/Oct/15 10:02;jan-krakora;I think the problem is that some browsers ([Firefox and Chrome|http://stackoverflow.com/questions/18808376/why-does-reloading-page-in-firefox-or-chrome-cause-the-unload-event-handler-to-t]) handle the unload event AFTER the page reload itself. 
So the page render count is already increased when processing the unload request and the StalePageException is thrown.","29/Oct/15 09:50;svenmeier;You're right, ""unload"" is fired too late probably.

But you see these exceptions in the logs only - your application is still functional, right?","29/Oct/15 10:16;jan-krakora;Sorry guys. My observations are about the TimerPushBehavior from the wicketstuff-push-timer project and not the AbstractAjaxTimerBehavior itself. 

The TimerPushBehavior registers itself on window.unload event. When this event occurs, the behavior disconnects all registered nodes from its push service. 
But as I wrote above, when an user refresh a page this event is fired after (only on some browsers) the browser send a request for the page.

To answer your question [~svenmeier], Yes. We can see these exceptions only in the logs. But the TimerPushBehavior doesn't disconnect nodes from the push service.
I'm not sure if its a big problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaScript/Css PackageResource should use the same charset for compressing,WICKET-5946,12843507,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,08/Jul/15 13:36,29/Oct/15 07:43,13/Mar/19 23:18,08/Jul/15 13:41,6.20.0,7.0.0-M6,,,,,,,6.21.0,7.0.0,,,wicket,,,0,,,,,,,,WICKET-5827 lead to a regression in org.apache.wicket.request.resource.CssPackageResource#processResponse(). Now Wicket again uses the platform default encoding for reading the compressed JS/CSS as bytes.,,,,,,,,,,,,,,,WICKET-4460,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-07-08 13:40:39.169,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Jul 18 14:54:35 UTC 2015,,,,,,0|i2gzqf:,9223372036854775807,,,,,,,,"08/Jul/15 13:40;jira-bot;Commit 42fa46e1134a60d4c8d584f46b141ba8b8236592 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=42fa46e ]

WICKET-5946 JavaScript/Css PackageResource should use the same charset for compressing
","08/Jul/15 13:40;jira-bot;Commit aa97182a3c8d6a55cfc1593d89e3999c75fa5dc1 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=aa97182 ]

WICKET-5946 JavaScript/Css PackageResource should use the same charset for compressing

(cherry picked from commit 949acdad2e65ff352a781064550facbcd103ba5e)
",18/Jul/15 14:54;klopfdreh;Thank you Martin - I even didn't noticed it. (y),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxFormValidatingBehavior not updates initially hidden feedback component,WICKET-5999,12904793,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,amorozov,amorozov,14/Oct/15 09:09,18/Oct/15 08:28,13/Mar/19 23:18,15/Oct/15 12:39,6.20.0,7.0.0,,,,,,,7.1.0,8.0.0-M1,,,wicket,,,0,,,,,,,,"I've found that AjaxFormValidatingBehavior not updates any feedback component that was initially hidden (setOutputMarkupPlaceholderTag is set to true).

I have added unit test and changed behavior of AjaxFormValidatingBehavior. Please, review and apply my PR.","Ubuntu x64, Oracle JDK 8u60",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-14 09:12:00.32,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Oct 18 08:28:01 UTC 2015,,,,,,0|i2mzqn:,9223372036854775807,,,,,,,,"14/Oct/15 09:12;githubbot;GitHub user shuraa opened a pull request:

    https://github.com/apache/wicket/pull/139

    WICKET-5999 fix IFeedback visitor in AjaxFormValidatingBehavior

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/shuraa/wicket master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/139.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #139
    
----
commit 7c78d1d8db8c89f49b16ba4a6d379a8ddf35b7c5
Author: Aleksander Morozov <alexander.v.morozov@gmail.com>
Date:   2015-10-14T09:10:06Z

    WICKET-5999 fix IFeedback visitor in AjaxFormValidatingBehavior

----
","14/Oct/15 14:29;githubbot;Github user shuraa commented on the pull request:

    https://github.com/apache/wicket/pull/139#issuecomment-148067064
  
    @svenmeier I've reworked the patch.
","15/Oct/15 12:00;githubbot;Github user svenmeier commented on the pull request:

    https://github.com/apache/wicket/pull/139#issuecomment-148366011
  
    That looks better.
","15/Oct/15 12:33;jira-bot;Commit d636c3d43543b8a1da77276b405b0ef160fb451b in wicket's branch refs/heads/master from [~amorozov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d636c3d ]

WICKET-5999 fix IFeedback visitor in AjaxFormValidatingBehavior by calling #configure()
","15/Oct/15 12:33;jira-bot;Commit 3017bea9e8d40fcf120960576ed231a5738b8656 in wicket's branch refs/heads/wicket-7.x from [~amorozov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3017bea ]

WICKET-5999 fix IFeedback visitor in AjaxFormValidatingBehavior by calling #configure()
",15/Oct/15 12:39;svenmeier;Feedback#configure() allows the component to check its visibility first.,"17/Oct/15 17:50;githubbot;Github user shuraa closed the pull request at:

    https://github.com/apache/wicket/pull/139
","18/Oct/15 08:28;jira-bot;Commit c2ba28d27cf62e93fd9f99cd7eae81a3564b540a in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c2ba28d ]

WICKET-5999 AjaxFormValidatingBehavior not updates initially hidden feedback component

Add links to the ticket for the tests
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
WicketRuntimeException from AjaxPagingNavigator#onAjaxEvent,WICKET-6005,12905507,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,buurmansven,buurmansven,16/Oct/15 12:33,16/Oct/15 13:31,13/Mar/19 23:18,16/Oct/15 13:31,1.5.13,6.20.0,7.0.0,8.0.0-M1,,,,,1.5.14,6.21.0,7.1.0,8.0.0-M1,wicket,,,0,ajax,navigator,,,,,,"In WICKET-5974 a change was added where the AjaxPagingNavigator checks if its {{pageable}} has a parent that is a) not a repeater and b) has outputMarkupId set to {{true}}. If not, a WicketRuntimeException is thrown (""Unable to find a parent component that is no repeater and has setOutputMarkupId(true)"")

This is a significant break from the logic before, where the AjaxPagingNavigator checked if its {{pageable}} has a parent that is not a repeater and if so, added it to the AjaxRequestTarget, which then would check if the component has {code}setOutputMarkupId(true){code} *or if it is a page*.  (see AjaxRequestHandler#add(Component...) )

This last part is significant because it means that any repeater added directly to a page before would work with the AjaxPagingNavigator but now it will only work if that page has {code}setOutputMarkupId(true){code}. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-16 13:25:00.734,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 16 13:31:56 UTC 2015,,,,,,0|i2n45b:,9223372036854775807,,,,,,,,"16/Oct/15 13:25;jira-bot;Commit ba809b31e999d1218e28595d71efd80a48ac1f33 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ba809b3 ]

WICKET-6005 allow updating of whole page
","16/Oct/15 13:26;jira-bot;Commit 30c733b5690c6994f488aca74c1ecc7b37912028 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=30c733b ]

WICKET-6005 allow updating of whole page
","16/Oct/15 13:27;jira-bot;Commit 3de49fb86a9e484e3b7575ea322341001729cf8a in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3de49fb ]

WICKET-6005 allow updating of whole page
","16/Oct/15 13:29;jira-bot;Commit 312bf4e7d167fa97d033c82f1b7c4680c920c2ce in wicket's branch refs/heads/wicket-1.5.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=312bf4e ]

WICKET-6005 allow updating of whole page
",16/Oct/15 13:31;svenmeier;You're right. Many thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileUploadField does not work with Servlet 3.0 multipart config,WICKET-5924,12837815,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,meo,meo,15/Jun/15 11:52,16/Oct/15 11:25,13/Mar/19 23:18,28/Jun/15 20:09,7.0.0-M5,,,,,,,,7.0.0,,,,wicket,,,0,,,,,,,,"quickstart: https://github.com/krasa/krasa-wicket-spring-boot-quickstart
- run: krasa.wicket.Start
- go to: http://localhost:8080/
- upload a file
- FileUploadField#getFileUploads will be empty

I have tried the same with normal quickstart and the same Jetty version,  it worked.
","Win 7, Chrome, Firefox, Jetty 9.2, Spring Boot",,,,,,,,,,,,,,,,WICKET-5192,,,,,,,,16/Jun/15 16:08;meo;quickstartWithoutSpringBoot_WICKET-5924.rar;https://issues.apache.org/jira/secure/attachment/12739885/quickstartWithoutSpringBoot_WICKET-5924.rar,,,,1.0,,,,,,,,,,,,,,,,,,,2015-06-15 12:59:49.793,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jul 06 20:45:59 UTC 2015,,,,,,0|i2g1lr:,9223372036854775807,,,,,,,,"15/Jun/15 12:59;mgrigorov;If it works without Spring Boot then why the issue is reported here and not in Spring Boot's issue tracker?
My guess is that SB configures Jetty in a such a way that something happens with the binary request parameters... I have no idea what exactly goes wrong though.","15/Jun/15 13:44;meo;Seems like Wicket specific problem to me, as I have found nothing relevant about such problem with Spring Boot. 
I debugged it a little bit and it seems to be caused by configured javax.servlet.MultipartConfigElement which is then passed in 
org.eclipse.jetty.servlet.ServletHolder#prepare and because of that the logic goes through different places...","15/Jun/15 13:49;meo;I found a workaround:
{code}
@EnableAutoConfiguration(exclude = {MultipartAutoConfiguration.class})
{code}

or

{code}
multipart.enabled=false
{code}
","15/Jun/15 13:52;mgrigorov;Where is that MultipartConfigElement configured?
Wicket uses standard Servlet APIs to read the uploaded data.

In my eyes if the application works fine in plain container and fails in ""modified"" container then the problem is not in a library.
AFAIK you can use Spring Boot either with Jetty or with Tomcat. Is it easy for you to try SB with embedded Tomcat?","15/Jun/15 13:53;mgrigorov;This workaround says is pretty clearly that the problem is in Spring Boot code, not in Wicket's.","15/Jun/15 14:10;meo;It is configured in org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration with some default values.

It behaves the same on Tomcat.
","16/Jun/15 06:37;mgrigorov;My guess is that when this config is enabled it consumes the request body before Wicket.
At https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java#L86 I see that it actually deletes the Part's at some point (to be compatible with Resin...).","16/Jun/15 15:15;meo;I debugged that and it is never called. 

In my understanding, by default, there is a DispatcherServlet configured on the root path (DispatcherServletAutoConfiguration), which uses configuration from MultipartAutoConfiguration. 

On top of that, I have added a WicketFilter. 

When the app-server processes a request, it takes the multipart configuration from a servlet, which in my case was DispatcherServlet, in a normal situation, there would be no servlet on the WicketFilter's path, so the app-server would take the configuration from a default servlet, which is created without us knowing - e.g. org.eclipse.jetty.servlet.DefaultServlet and which do not have multipart configured. 

Unfortunately Wicket is not compatible with that multipart config, I have no idea whether it is ok or not. 

So that's about it, Spring Boot magic breaking things :-)","16/Jun/15 15:22;mgrigorov;Wicket uses Apache commons-fileupload for reading the request body. If Wicket is not compatible then many other apps are not compatible as well.
I suggest to ask in SB forums for help/more details.
","16/Jun/15 16:14;meo;That would be probably reasonable. 

Meanwhile I attached a quickstart without SB, the multipart-config on the underlaying servlet is the problem indeed:
{code}
	<servlet>
	    <servlet-name>RootServlet</servlet-name>
	    <servlet-class>org.eclipse.jetty.servlet.DefaultServlet</servlet-class>\
		<!-- multipart-config breaks file upload -->
	    <multipart-config>
	        <max-file-size>10485760</max-file-size>
	        <max-request-size>20971520</max-request-size>
	        <file-size-threshold>5242880</file-size-threshold>
	    </multipart-config>
	</servlet>
	<servlet-mapping>
	    <servlet-name>RootServlet</servlet-name>
	    <url-pattern>/*</url-pattern>
	</servlet-mapping>
{code}","16/Jun/15 16:17;meo;Hmm, Apache commons-fileupload is not compatible with multipart config http://stackoverflow.com/a/14457148/685796","16/Jun/15 20:23;mgrigorov;Now everything is clear! Thanks for the link!

I've tried once to use these Servlet 3 APIs (WICKET-5192) but there were some limitations...","26/Jun/15 11:41;jira-bot;Commit e27588e9e8d1cce0cb355a3629d927ed7e039c4a in wicket's branch refs/heads/WICKET-5924-fallback-to-servlet-parts from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e27588e ]

WICKET-5924 FileUploadField does not work with Spring Boot

Add support for reading file uploads from Servlet request's parts
","28/Jun/15 20:02;jira-bot;Commit 8b9c87ac745654757c63d9aafa67d2e594f1e43f in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8b9c87a ]

WICKET-5924 FileUploadField does not work with Spring Boot

Add support for reading file uploads from Servlet request's parts
","28/Jun/15 20:02;jira-bot;Commit ccfcf28d7ba9888869ed553265950a881d8e371c in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ccfcf28 ]

WICKET-5924 FileUploadField does not work with Spring Boot

Extract ServletPartFileItem as a separate class
","28/Jun/15 20:02;jira-bot;Commit a6988b0681932917753016ffd9d83412889ec2b3 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a6988b0 ]

WICKET-5924 FileUploadField does not work with Spring Boot

Add WicketTester support for Servlet 3.0 multipart uploads
","28/Jun/15 20:02;jira-bot;Commit 07f4872d848d06d29ff82554bd0dfdae59c7a7f7 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=07f4872 ]

WICKET-5924 FileUploadField does not work with Spring Boot

Add some documentation
","28/Jun/15 20:09;mgrigorov;The quickstart now works with 7.0.0-SNAPSHOT.
Please test it with Spring Boot.
Thank you!","05/Jul/15 20:58;meo;Thanks, it seems to work.

But not sure if this behaviour is intended - when the file is too big, it fails on this ugly error:
 
{code}
Unexpected RuntimeException

Last cause: Multipart Mime part fileInput exceeds max filesize

Stacktrace

Root cause:

java.lang.IllegalStateException: Multipart Mime part fileInput exceeds max filesize
     at org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.write(MultiPartInputStreamParser.java:111)
     at org.eclipse.jetty.util.MultiPartInputStreamParser.parse(MultiPartInputStreamParser.java:681)
     at org.eclipse.jetty.util.MultiPartInputStreamParser.getParts(MultiPartInputStreamParser.java:400)
     at org.eclipse.jetty.server.Request.getParts(Request.java:2139)
     at org.eclipse.jetty.server.Request.extractMultipartParameters(Request.java:385)
     at org.eclipse.jetty.server.Request.extractContentParameters(Request.java:308)
     at org.eclipse.jetty.server.Request.extractParameters(Request.java:256)
     at org.eclipse.jetty.server.Request.getParameterMap(Request.java:839)
     at org.apache.wicket.protocol.http.servlet.ServletWebRequest.generatePostParameters(ServletWebRequest.java:286)
     at org.apache.wicket.protocol.http.servlet.ServletWebRequest.getPostRequestParameters(ServletWebRequest.java:336)
     at org.apache.wicket.protocol.http.servlet.ServletWebRequest.access$000(ServletWebRequest.java:59)
     at org.apache.wicket.protocol.http.servlet.ServletWebRequest$1.getParameterValue(ServletWebRequest.java:364)
     at org.apache.wicket.request.parameter.CombinedRequestParametersAdapter.getParameterValue(CombinedRequestParametersAdapter.java:70)
     at org.apache.wicket.request.http.WebRequest.isAjax(WebRequest.java:117)
     at org.apache.wicket.protocol.http.servlet.ServletWebRequest.getClientUrl(ServletWebRequest.java:145)
     at org.apache.wicket.core.request.mapper.BookmarkableMapper.matches(BookmarkableMapper.java:195)
     at org.apache.wicket.core.request.mapper.BookmarkableMapper.getCompatibilityScore(BookmarkableMapper.java:184)
     at org.apache.wicket.request.mapper.CompoundRequestMapper.mapRequest(CompoundRequestMapper.java:136)
     at org.apache.wicket.request.cycle.RequestCycle.resolveRequestHandler(RequestCycle.java:189)
     at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:219)
     at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
     at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
     at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
     at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)
     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
     at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)
     at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)
     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
     at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
     at org.eclipse.jetty.server.Server.handle(Server.java:499)
     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)
     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
     at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)
     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
     at java.lang.Thread.run(Thread.java:745)

{code}","06/Jul/15 20:45;mgrigorov;Yes, indeed it is ugly.
Apache Commons FileUpload has org.apache.commons.fileupload.FileUploadException, which Wicket handles at org.apache.wicket.markup.html.form.Form#handleMultiPart.
But Jetty throws IllegalStateException ... It is too broad exception type :-/ It may throw it for many other reasons. We cannot use the exception message because it will be different in Tomcat, WildFly, WebLogic, ...
Using Servlet 3.x Part really leads to regressions, as explained at WICKET-5192.",,,,,,,,,,,,,,,,
Wicket Tree rendering broken in 7.x,WICKET-5271,12657048,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,mgrigorov,mgrigorov,10/Jul/13 10:33,13/Oct/15 13:25,13/Mar/19 23:18,13/Oct/15 07:47,7.0.0-M1,,,,,,,,7.0.0-M1,,,,wicket-extensions,,,0,,,,,,,,"While testing WICKET-5267 (EventDelegationBehavior) I've noticed that the Tree component renders with broken layout in Wicket 7.x.
It looks like a CSS related issue.",,,,,,,,,,,,,,,,,WICKET-4904,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-10 10:57:28.228,,,no_permission,,,,,,,,,,,,337271,,,Tue Oct 13 13:25:37 UTC 2015,,,,,,0|i1m6b3:,337594,,,,,,,,10/Jul/13 10:57;svenmeier;links are no longer rendered as <span> when disabled,"12/Oct/15 23:04;rmartin7c;The CSS for these themes does not work correctly on leaf nodes in trees. On these nodes, isEnabled reports them as disabled if they have no children. This causes them to render as <span> in my installation of Wicket 7.0.0. The tree-junction elements don't match theme.css and render poorly.

IMHO there's no reason to specify tag type span or a on class .tree-junction. The CSS works fine for me if I change all instances of ""tree-theme-* a.tree-junction"" to just ""tree-theme-* .tree-junction"". Can we get this CSS generalized so that it doesn't depend on the specifics of disabled link behavior?","13/Oct/15 07:46;jira-bot;Commit 489c88f8b005c2c796cd0b3d3e9809827d4bf0f5 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=489c88f ]

WICKET-5271 generalize styles so junctions work for spans and anchors alike
","13/Oct/15 07:46;jira-bot;Commit b0878a845114745d7eb9ed87e25b6f91dc55b70e in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b0878a8 ]

WICKET-5271 generalize styles so junctions work for spans and anchors alike
",13/Oct/15 07:47;svenmeier;juctions styles are now generalized to work for anchor and span alike.,13/Oct/15 13:25;rmartin7c;Thank you!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mounted TemplateResourceReference throws  org.apache.wicket.WicketRuntimeException when https is used,WICKET-5994,12902700,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,sfeher,sfeher,06/Oct/15 13:51,11/Oct/15 22:24,13/Mar/19 23:18,11/Oct/15 18:08,6.20.0,7.0.0,,,,,,,6.21.0,7.1.0,8.0.0-M1,,,,,0,https,resources,,,,,,"I mount a css file as a resource and use it to include styles into my emails' headers. 
But if I switch to https then I get  
org.apache.wicket.WicketRuntimeException: failed to locate stream
when I try to include the resource.
Weird thing is if I simply enter https://localhost:8443/css/mail.css into my browser then the css file appears fine without errors.
I created a quickstart project for better understanding.

https://github.com/sfeher/TemplateResourceReferenceTestApplication.git
","Win 7 64 bit Jetty 9, JDK 8, Tomcat 7",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-11 13:11:11.221,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Oct 11 18:08:20 UTC 2015,,,,,,0|i2mn0v:,9223372036854775807,,,,,,,,"11/Oct/15 13:11;mgrigorov;For me the error is: CertificateException: No name matching localhost found
Do you see this error too next to ""WicketRuntimeException: failed to locate stream"" ?","11/Oct/15 15:47;sfeher;Yes.  But in my production environment where ssl issues by real CA there is no such error message related to certificate.


This is my full stacktrace:

17:43:19.527 [qtp1367452483-13] ERROR org.apache.wicket.DefaultExceptionMapper - Unexpected error occurred
org.apache.wicket.WicketRuntimeException: failed to locate stream from https://localhost:8443/css/mail.css
	at org.apache.wicket.resource.ResourceUtil.readString(ResourceUtil.java:262) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.markup.html.include.Include.importUrl(Include.java:213) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.markup.html.include.Include.importAbsoluteUrl(Include.java:187) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.markup.html.include.Include.importRelativeUrl(Include.java:173) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.markup.html.include.Include.importAsString(Include.java:135) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.markup.html.include.Include.onComponentTagBody(Include.java:146) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:70) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.Component.internalRenderComponent(Component.java:2564) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.markup.html.WebComponent.onRender(WebComponent.java:56) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.Component.internalRender(Component.java:2379) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.Component.render(Component.java:2307) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1407) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1604) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1579) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1502) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.markup.html.internal.HtmlHeaderContainer.renderHeaderTagBody(HtmlHeaderContainer.java:224) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy.renderRootComponent(AbstractHeaderRenderStrategy.java:118) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy.renderHeader(ChildFirstHeaderRenderStrategy.java:60) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.markup.html.internal.HtmlHeaderContainer.onComponentTagBody(HtmlHeaderContainer.java:171) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:70) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.Component.internalRenderComponent(Component.java:2564) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1543) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.Component.internalRender(Component.java:2379) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.Component.render(Component.java:2307) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1407) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1604) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.Page.onRender(Page.java:879) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:143) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.Component.internalRender(Component.java:2379) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.Component.render(Component.java:2307) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.Page.renderPage(Page.java:1018) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:236) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:865) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) ~[wicket-request-7.0.0.jar:7.0.0]
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265) [wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222) [wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293) [wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261) [wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203) [wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284) [wicket-core-7.0.0.jar:7.0.0]
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [jetty-servlet-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585) [jetty-servlet-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577) [jetty-security-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) [jetty-servlet-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.server.Server.handle(Server.java:499) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540) [jetty-io-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529]
	at java.lang.Thread.run(Thread.java:724) [?:1.7.0_25]
Caused by: org.apache.wicket.util.resource.ResourceStreamNotFoundException: Resource https://localhost:8443/css/mail.css could not be opened
	at org.apache.wicket.core.util.resource.UrlResourceStream.getInputStream(UrlResourceStream.java:188) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.resource.ResourceUtil.readString(ResourceUtil.java:238) ~[wicket-core-7.0.0.jar:7.0.0]
	... 61 more
Caused by: javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException: No name matching localhost found
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:1.7.0_25]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57) ~[?:1.7.0_25]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:1.7.0_25]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:526) ~[?:1.7.0_25]
	at sun.net.www.protocol.http.HttpURLConnection$6.run(HttpURLConnection.java:1674) ~[?:1.7.0_25]
	at sun.net.www.protocol.http.HttpURLConnection$6.run(HttpURLConnection.java:1672) ~[?:1.7.0_25]
	at java.security.AccessController.doPrivileged(Native Method) ~[?:1.7.0_25]
	at sun.net.www.protocol.http.HttpURLConnection.getChainedException(HttpURLConnection.java:1670) ~[?:1.7.0_25]
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1243) ~[?:1.7.0_25]
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:254) ~[?:1.7.0_25]
	at org.apache.wicket.core.util.resource.UrlResourceStream.getInputStream(UrlResourceStream.java:179) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.resource.ResourceUtil.readString(ResourceUtil.java:238) ~[wicket-core-7.0.0.jar:7.0.0]
	... 61 more
Caused by: javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException: No name matching localhost found
	at sun.security.ssl.Alerts.getSSLException(Alerts.java:192) ~[?:1.7.0_25]
	at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1886) ~[?:1.7.0_25]
	at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:276) ~[?:1.7.0_25]
	at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:270) ~[?:1.7.0_25]
	at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1341) ~[?:1.7.0_25]
	at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:153) ~[?:1.7.0_25]
	at sun.security.ssl.Handshaker.processLoop(Handshaker.java:868) ~[?:1.7.0_25]
	at sun.security.ssl.Handshaker.process_record(Handshaker.java:804) ~[?:1.7.0_25]
	at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1016) ~[?:1.7.0_25]
	at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1312) ~[?:1.7.0_25]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1339) ~[?:1.7.0_25]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1323) ~[?:1.7.0_25]
	at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:515) ~[?:1.7.0_25]
	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185) ~[?:1.7.0_25]
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1299) ~[?:1.7.0_25]
	at sun.net.www.protocol.http.HttpURLConnection.getHeaderField(HttpURLConnection.java:2677) ~[?:1.7.0_25]
	at java.net.URLConnection.getHeaderFieldLong(URLConnection.java:639) ~[?:1.7.0_25]
	at java.net.URLConnection.getContentLengthLong(URLConnection.java:511) ~[?:1.7.0_25]
	at java.net.URLConnection.getContentLength(URLConnection.java:495) ~[?:1.7.0_25]
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getContentLength(HttpsURLConnectionImpl.java:398) ~[?:1.7.0_25]
	at org.apache.wicket.core.util.resource.UrlResourceStream.getData(UrlResourceStream.java:120) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.core.util.resource.UrlResourceStream.getInputStream(UrlResourceStream.java:178) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.resource.ResourceUtil.readString(ResourceUtil.java:238) ~[wicket-core-7.0.0.jar:7.0.0]
	... 61 more
Caused by: java.security.cert.CertificateException: No name matching localhost found
	at sun.security.util.HostnameChecker.matchDNS(HostnameChecker.java:208) ~[?:1.7.0_25]
	at sun.security.util.HostnameChecker.match(HostnameChecker.java:93) ~[?:1.7.0_25]
	at sun.security.ssl.X509TrustManagerImpl.checkIdentity(X509TrustManagerImpl.java:347) ~[?:1.7.0_25]
	at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:203) ~[?:1.7.0_25]
	at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:126) ~[?:1.7.0_25]
	at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1323) ~[?:1.7.0_25]
	at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:153) ~[?:1.7.0_25]
	at sun.security.ssl.Handshaker.processLoop(Handshaker.java:868) ~[?:1.7.0_25]
	at sun.security.ssl.Handshaker.process_record(Handshaker.java:804) ~[?:1.7.0_25]
	at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1016) ~[?:1.7.0_25]
	at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1312) ~[?:1.7.0_25]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1339) ~[?:1.7.0_25]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1323) ~[?:1.7.0_25]
	at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:515) ~[?:1.7.0_25]
	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185) ~[?:1.7.0_25]
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1299) ~[?:1.7.0_25]
	at sun.net.www.protocol.http.HttpURLConnection.getHeaderField(HttpURLConnection.java:2677) ~[?:1.7.0_25]
	at java.net.URLConnection.getHeaderFieldLong(URLConnection.java:639) ~[?:1.7.0_25]
	at java.net.URLConnection.getContentLengthLong(URLConnection.java:511) ~[?:1.7.0_25]
	at java.net.URLConnection.getContentLength(URLConnection.java:495) ~[?:1.7.0_25]
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getContentLength(HttpsURLConnectionImpl.java:398) ~[?:1.7.0_25]
	at org.apache.wicket.core.util.resource.UrlResourceStream.getData(UrlResourceStream.java:120) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.core.util.resource.UrlResourceStream.getInputStream(UrlResourceStream.java:178) ~[wicket-core-7.0.0.jar:7.0.0]
	at org.apache.wicket.resource.ResourceUtil.readString(ResourceUtil.java:238) ~[wicket-core-7.0.0.jar:7.0.0]
	... 61 more

","11/Oct/15 17:29;mgrigorov;Is this from production or from DEV environment?
Because the error message is exactly the same as in my comment.","11/Oct/15 18:05;jira-bot;Commit 500f9b9aa99f044153130713f026ba27757e81c5 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=500f9b9 ]

WICKET-5994 Mounted TemplateResourceReference throws org.apache.wicket.WicketRuntimeException when https is used

Use ServletContext to read local resources
","11/Oct/15 18:05;sfeher;Deployment.

 <init-param>
            <param-name>configuration</param-name>
            <param-value>deployment</param-value>
</init-param>","11/Oct/15 18:05;jira-bot;Commit 6edf1541748fb2de969ee695bf988573e621cafd in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6edf154 ]

WICKET-5994 Mounted TemplateResourceReference throws org.apache.wicket.WicketRuntimeException when https is used

Use ServletContext to read local resources
","11/Oct/15 18:05;jira-bot;Commit 99371edcfb10fcc5d8d715ae4d970971cad6ef72 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=99371ed ]

WICKET-5994 Mounted TemplateResourceReference throws org.apache.wicket.WicketRuntimeException when https is used

Use ServletContext to read local resources
","11/Oct/15 18:08;mgrigorov;I've reworked a bit Include component to not use external requests for local resources.

This solves the problem with the quickstart but doesn't solve the issue if someone tries to load the resource as external (i.e. with absolute url). I believe the issue there is with the self-issued SSL certificate we use for the quickstart.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"AjaxButton - image is not shown even though type=""image"" is in html-template ",WICKET-5993,12902408,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,adrian.max,adrian.max,05/Oct/15 12:12,05/Oct/15 22:54,13/Mar/19 23:18,05/Oct/15 22:54,7.0.0,,,,,,,,7.1.0,8.0.0-M1,,,,,,0,,,,,,,,"It seems that in html-template type=""image"" is changed to type=""button"".

There is not much to do.
in html:
<form wicket:id=""form"">
	<input wicket:id=""button"" type=""image"" src=""add.png"" value='this must be an image></input>
</form>

in java:
Form form = new Form<>(""form"");
add(form);
form.add(new AjaxButton(""button"") {});

As image use any.

In Wicket 6.20.0 it worked.","Wicket Quickstart, Eclipse 4.5.0, Windows 8.1",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-05 20:05:14.607,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Oct 05 22:54:59 UTC 2015,,,,,,0|i2ml87:,9223372036854775807,,,,,,,,"05/Oct/15 20:05;mgrigorov;The change has been made with WICKET-5594 to prevent non-Ajax submits but I admit I haven't considered type=""image"" use case.","05/Oct/15 22:31;jira-bot;Commit e5e2cdade107d3afb843981791eccc4ea5b9e230 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e5e2cda ]

WICKET-5993 change type attribute when submit only
","05/Oct/15 22:45;jira-bot;Commit 56c209e6986be98abe8c4f5f866267512f11cc95 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=56c209e ]

WICKET-5993 change type attribute if submit only
","05/Oct/15 22:46;jira-bot;Commit 672f9f792f0788c730df12bc1313ef835e8bfa9f in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=672f9f7 ]

WICKET-5993 change type attribute when submit only
","05/Oct/15 22:46;jira-bot;Commit 796d9418d336dc0b278260fd27331194ee4d8f83 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=796d941 ]

WICKET-5993 change type attribute if submit only
","05/Oct/15 22:54;svenmeier;Indeed, that was an oversight on my part. Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BaseWicketTester#startComponentInPage fails for pages with <wicket:header-items></wicket:header> placeholder,WICKET-5989,12901933,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,ephraimrosenfeld,ephraimrosenfeld,01/Oct/15 16:30,03/Oct/15 11:08,13/Mar/19 23:18,03/Oct/15 11:08,6.20.0,,,,,,,,6.21.0,7.1.0,,,wicket,,,0,,,,,,,,"I am using the {{[BaseWicketTester.html#startComponentInPage(C)|https://ci.apache.org/projects/wicket/apidocs/6.x/org/apache/wicket/util/tester/BaseWicketTester.html#startComponentInPage(C)]}} to validate individual components/panels.

I am overriding the {{[BaseWicketTester.html#createPage()|https://ci.apache.org/projects/wicket/apidocs/6.x/org/apache/wicket/util/tester/BaseWicketTester.html#createPage()]}} and {{[BaseWicketTester.html#createPageMarkup(java.lang.String)|https://ci.apache.org/projects/wicket/apidocs/6.x/org/apache/wicket/util/tester/BaseWicketTester.html#createPageMarkup(java.lang.String)]}} methods to return a dummy page that contains a placeholder for components-to-be-tested. The dummy page extends my base page class.

My base page class makes use of the [<wicket:header-items/>|https://cwiki.apache.org/confluence/display/WICKET/Wicket's+XHTML+tags#Wicket'sXHTMLtags-Elementwicket:header-items] placeholder tag.

When attempting to use {{[BaseWicketTester.html#createPage()|https://ci.apache.org/projects/wicket/apidocs/6.x/org/apache/wicket/util/tester/BaseWicketTester.html#createPage()]}} method, the method fails with the following error message:
|Error while parsing the markup for the autogenerated page: More than one <wicket:header-items/> detected in the <head> element. Only one is allowed.

If I remove the {{[<wicket:header-items/>|https://cwiki.apache.org/confluence/display/WICKET/Wicket's+XHTML+tags#Wicket'sXHTMLtags-Elementwicket:header-items]}} placeholder tag from my base page class, the test runs successfully.

The test only fails when using the {{[BaseWicketTester.html#startComponentInPage(C)|https://ci.apache.org/projects/wicket/apidocs/6.x/org/apache/wicket/util/tester/BaseWicketTester.html#startComponentInPage(C)]}}, which only accepts one argument. If I use the {{[BaseWicketTester.html#startComponentInPage(C, org.apache.wicket.markup.IMarkupFragment)|https://ci.apache.org/projects/wicket/apidocs/6.x/org/apache/wicket/util/tester/BaseWicketTester.html#startComponentInPage(C, org.apache.wicket.markup.IMarkupFragment)]}} and pass in the {{MarkupFragment}} of the test class as the second argument, then the test runs successfully, e.g. 
{code}
tester.startComponentInPage(new MyPanel(DummyPanelPage.TEST_PANEL_ID),  new MyDummyPanelPage(new PageParameters()).getMarkup());
{code}

It would seem that the {{[<wicket:header-items/>|https://cwiki.apache.org/confluence/display/WICKET/Wicket's+XHTML+tags#Wicket'sXHTMLtags-Elementwicket:header-items]}} placeholder tag clashes with the {{[ContainerInfo|https://ci.apache.org/projects/wicket/apidocs/6.x/org/apache/wicket/markup/ContainerInfo.html]}} class used by the testing framework, but this is by no means my area of expertise.

I am attaching a quick-start app with a {{TestHomePage}} test class that reproduces the issue.

Thank you in advance!","Windows 7, Java 7",,,,,,,,,,,,,,,,,,,,,,,,01/Oct/15 16:31;ephraimrosenfeld;myproject.zip;https://issues.apache.org/jira/secure/attachment/12764634/myproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2015-10-03 11:06:37.204,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Oct 03 11:07:56 UTC 2015,,,,,,0|i2miaf:,9223372036854775807,,,,,,,,"03/Oct/15 11:06;jira-bot;Commit d50e18c7334dbc26ce5180fa3bbdba4e16cec463 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d50e18c ]

WICKET-5989 BaseWicketTester#startComponentInPage fails for pages with <wicket:header-items></wicket:header> placeholder

Ignore closing tags when checking for 'foundHeaderItemsTag'
","03/Oct/15 11:07;jira-bot;Commit a255bbca2066588cc65947bbbc6ccb52e977bdcc in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a255bbc ]

WICKET-5989 BaseWicketTester#startComponentInPage fails for pages with <wicket:header-items></wicket:header> placeholder

Ignore closing tags when checking for 'foundHeaderItemsTag'
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket doesn't encrypt links and Ajax URLs for mounted pages when CryptoMapper is used,WICKET-5326,12665262,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,jesselong,wicket.x.ttp,wicket.x.ttp,23/Aug/13 16:55,06/Sep/15 21:52,13/Mar/19 23:18,15/Oct/14 00:34,6.10.0,,,,,,,,6.18.0,7.0.0-M4,,,,,,0,security,,,,,,,"URL encryption does not work in Wicket links and Ajax URLs.

For links the URL appears unencrypted in the href attribute value and is only later forwarded to the encrypted URL using a 302 response.

I am uploading a quickstart.",Linux,,,,,,,,,,,,,,,,,,,,WICKET-5977,,,,23/Aug/13 17:01;wicket.x.ttp;5326.tar.gz;https://issues.apache.org/jira/secure/attachment/12599656/5326.tar.gz,17/Sep/14 08:34;jesselong;QueryParameterCryptoMapper.java;https://issues.apache.org/jira/secure/attachment/12669366/QueryParameterCryptoMapper.java,17/Sep/14 09:30;jesselong;QueryParameterCryptoMapper2.java;https://issues.apache.org/jira/secure/attachment/12669374/QueryParameterCryptoMapper2.java,16/Sep/14 18:31;satgutta;Wicket_6_1_6_QuickStart.zip;https://issues.apache.org/jira/secure/attachment/12669127/Wicket_6_1_6_QuickStart.zip,4.0,,,,,,,,,,,,,,,,,,,2013-08-23 18:28:29.522,,,no_permission,,,,,,,,,,,,345202,,,Wed Oct 15 00:34:39 UTC 2014,,,,,,0|i1nj1r:,345503,,,,,,,,23/Aug/13 17:01;wicket.x.ttp;I left the priority at the standard value. Please change it as you see fit.,"23/Aug/13 18:28;svenmeier;Since WICKET-4865 urls to the home page are no longer encrypted. See CryptoMapperTest#homePageWithParameters():
""When the home page url is requested, with parameters, the url will contain only page parameters. It should not be encrypted, otherwise we get needless redirects.""

I'm not sure which redirects @Martin is referring to. A quick test with removing the check url.getSegments().isEmpty() from CryptoMapper works fine for the quickstart.
","27/Aug/13 15:17;wicket.x.ttp;I think the problem is, that currently a plain text URL is rewritten in a 302 redirect to an encrypted URL. To encrypt it after the request makes no sense, of course, because it is accessible directly and the user knows the fixed URL of the page. 

The default should possibly be to encrypt internal Wicket links and Ajax requests only. There should be an exception for internal links to mounted pages. The URLs in those links should not be encrypted (at least when BookmarkablePageLink is used), because these pages are meant to be accessed directly with parameters not encrypted by Wicket.","02/Sep/13 13:26;jesselong;Hi Walter,

1. True. IRequestListener URLs on the home page are displayed to the user unencrypted.

2. The URLs in your link and ajax fallback link are not absolute urls to the target page, they are session relative links like ""?1-1.ILinkListener-link"". The ""?1-1"" part means execute ILinkListener on component path ""-link"" for page number ""1"" (which has been rendered once). I know, it would be nicer if these were encrypted, but remember, if the links were encrypted, the encryption would probably not add anything to your security - the user would still have a link, which if he clicked would load Page2. He would still ""know the fixed URL of the page"" as much as he does now, considering what I said about ""session relative"". The encrypted URL are also session relative.

3. Wicket does not know the target page for the AjaxFallbackLink or the Link - the target page is only set once the link is clicked, so Wicket would have no way of directly generating an encrypted URL for Page2. If you use BookmarkableLink you will see that the result is the same as your external link. This is because for bookmarkable and external link, Wicket already knows what the target page is, and so it can render an encrypted URL for the that target page.

4. This ""not encrypting IRequestListener URLs"" behaviour only presents itself on the home page. The reason is: the home page is effectively a mounted page, mounted at ""/"". Some users want to have their own page parameters supplied to the home page. They want to be able to link to the home page using a BookmarkableLink with page parameters like: ""/?startDate=2013-08-01&endDate=2013-09-02"" etc etc. They dont want these page parameters to be encrypted. Ordinarily, when using the CryptoMapper, you mount pages AFTER the CryptoMapper is set as the root request mapper, so all mounted pages have that effect - page parameters are not encrypted. Because home page is ""mounted"" before CryptoMapper is set, the default behaviour would be to encrypt the page parameters, but we make a special effort to not encrypt the URLs to the home page, so that the home page may have very similar if not exactly the same behaviour as normal mounted pages.

Having said all of that, maybe it is beneficial for us to encrypt URLs for the home page, when, and only when, the URL is a IRequestListener URL. Something like:

// to encrypt or not to encrypt, that is the question.
if (url.getSegments().isEmpty()){
    // this is for home page
    if (url.getQueryParameters().size() == 1 && 
            Strings.isEmpty(url.getQueryParameters().get(0).getValue() && 
            PageComponentInfo.parse(url.getQueryParameters().get(0).getName()) != null){
        // return encrypted url
    }else{
        // return unencrypted url
    }
}

Sven, Martin-g, what do you think?","02/Sep/13 14:05;jesselong;@Sven - needless redirect are my comments.

Here is wget output first without the special home page handling, then without.

jesse@rhino:~$ wget -O - http://localhost:8081/?a=b
--2013-09-02 15:49:09--  http://localhost:8081/?a=b
Resolving localhost (localhost)... 127.0.0.1
Connecting to localhost (localhost)|127.0.0.1|:8081... connected.
HTTP request sent, awaiting response... 302 Found
Location: http://localhost:8081/-Ot5f2933f8;jsessionid=om7i3o5tdfne1ts38f1txzn07 [following]
--2013-09-02 15:49:09--  http://localhost:8081/-Ot5f2933f8;jsessionid=om7i3o5tdfne1ts38f1txzn07
Reusing existing connection to localhost:8081.
HTTP request sent, awaiting response... 302 Found
Location: http://localhost:8081/O3QeXdCceYI [following]
--2013-09-02 15:49:09--  http://localhost:8081/O3QeXdCceYI
Reusing existing connection to localhost:8081.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: ‘STDOUT’

jesse@rhino:~$ wget -O - http://localhost:8081/?a=b
--2013-09-02 15:50:17--  http://localhost:8081/?a=b
Resolving localhost (localhost)... 127.0.0.1
Connecting to localhost (localhost)|127.0.0.1|:8081... connected.
HTTP request sent, awaiting response... 302 Found
Location: http://localhost:8081/;jsessionid=qgxwldmg7lv01mphmrgdwmkn?0&a=b [following]
--2013-09-02 15:50:18--  http://localhost:8081/;jsessionid=qgxwldmg7lv01mphmrgdwmkn?0&a=b
Reusing existing connection to localhost:8081.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: ‘STDOUT’

The request is always to http://localhost:8081/?a=b.

Without special home page handling user is first redirected to ""encrypted(?a=b)"", then to ""encrypted(?0&a=b)"".

With special home page handling, user is redirected once to ""?0&a=b"".

That is the unnecessary redirect I was talking about.

Also, like I said in the comment above, it is nice to give the user ""mounted page"" like behaviour for the home page, where his user-provided page parameters are visible in the URL.","05/Sep/13 13:07;wicket.x.ttp;Hello Jesse,

it also seems to me, that the ""home page"" could have the same behavior as mounted pages in that it should stay reachable by an unencrypted URL and should be referenced by that URL in Wicket, when it is constructed using the PageParameters constructor or the no-args constructor. This should be true only for the page itself and not for URLs referencing other objects (like Ajax URLs etc.). 

I think it would be nice to find conditions for the page to be referenced and reachable by an unencrypted URL and not the other way round. This might need more work, but seems the right approach.

What you wrote under 2. is possibly not completely true for us. We use CryptoMapper with KeyInSessionSunJceCryptFactory as the ""CryptFactory"" (this was the default in Wicket 1.4). That means that the URLs are different in every session.","18/Sep/13 13:11;aka;Hi Walter,

I think I am facing a similiar issue. Does it help if you do not mount the pages directly, but mount a page which redirects to the actual page? This way, links to the destination page will properly be encrypted.

public class LoginPageRedirect extends WebPage {
    protected void onInitialize() {
        throw new RestartResponseException(LoginPage.class);
    }
}
webApplication.mountPage(""login"", LoginPageRedirect.class);","03/Sep/14 15:06;dantehicks42;Walter,

any updates / resolution to your issue ? We seem to have encountered the same problem as you using CryptoMapper and KeyInSessionSunJceCryptFactory.

I'm kinda concerned this hasn't been updated for a year now. I would have assumed this to be a common use case. ",03/Sep/14 15:26;mgrigorov;[~dantehicks42] could you please explain what exactly is the issue when using KeyInSessionSunJceCryptFactory ?,"03/Sep/14 16:52;jesselong;Hi Eric, Walter, Andreas,

Please try QueryParameterCryptoMapper.java attached. You should use it in combination with normal CryptoMapper, but this one after all mounted pages.

Like:

setRootRequestMapper(new CryptoMapper(...));
mountPage(....);
mountPage(...);
setRootRequestMapper(new QueryParameterCryptoMapper(...));

I just did this now, not sure if it works or not. Seems to work for the quickstart and one of my apps.

Please update if there is any issues.","16/Sep/14 18:33;satgutta;I work with Eric Hamel and in response for the comment made by Eric Hamel on - 03/Sep/14 16:06. I am attaching Wicket_6_1_6_QuickStart which covers 1 and 2 explained below.
Please note I have web.xml entry ""<session-timeout>2</session-timeout>"" which makes it easier to replicate session expiry in 2 mins

Quick Start Application flow: 
        i. Hit root url http://localhost:8080, you will navigate to home page with a link to First Navigation page.
	ii. In First Navigation Page we have a link to Second Navigation Page.
	iii. In Second Navigation Page we have a link back to home page.
    
1. To prevent XSRF attacks we have overridden the following default wicket settings in org.apache.wicket.protocol.http.WebApplication#init() method.

			getSecuritySettings().setCryptFactory(new KeyInSessionSunJceCryptFactory());		
			setRootRequestMapper(new CryptoMapper(getRootRequestMapperAsCompound(), this));
	   
	        With the above setting home page urls/links are unencrypted and exposed. When you navigate past home page, urls/links are encrypted.
	   
	        This problem I am trying to explain is already in comments posted by Walter B. Rasmann  on - 05/Sep/13 14:07, 
			but I am not finding a clear answer explaining this behavior.
						 
2. The second problem is on Session expiry, you click on a link in home page

	          You are remain on home page, you neither navigated to the link you clicked nor redirected to PageExpired page which is configured 
			  in org.apache.wicket.protocol.http.WebApplication#init() method as follows
			  
			  getApplicationSettings().setPageExpiredErrorPage(PageExpired.class);
		      mountPage(""/"" + PageExpired.STATUS_CODE, PageExpired.class);
			  
			  With that said, the behavior is different when links on other pages (link in First Navigation page from quick start) 
			  are clicked on session expiry, you actually hit PageExpired page. 
			  
			  Why is the behavior different for home page links compared to links on other pages when it comes to session expiry ? ",17/Sep/14 09:30;jesselong;QueryParameterCryptoMapper2.java - CryptoMapper that only encrypts the PageComponentInfo query parameter. ,"17/Sep/14 09:56;jesselong;Satish,

Regarding issue #1:

The reason for the behavior is explained in my first comment, item 4.

Walter and others pointed out that item 2 in my first comment was not always correct, as KeyInSessionSunJceCryptFactory solves that problem.

I have provided a solution - QueryParameterCryptoMapper. I have uploaded two versions to this ticket. QueryParameterCryptoMapper2.java (needs to be renamed on your side) only encrypts the PageComponentInfo query parameter, while QueryParameterCryptoMapper.java encrypts all query parameters.

Please test one of the QueryParameterCryptoMapper classes as described above and let us know if this meets the requirement.

Regarding issue #2.

This is a separate issue, and you will probably see the same behavior without CryptoMapper. Please post this question to an appropriate forum, like the wicket-users mailing list.","17/Sep/14 15:34;satgutta;
Jesse,

Regarding issue #1:

I tried QueryParameterCryptoMapper2.java as you recommended.

First I see home page urls/links are encrypted.

Second I tried to do XSRF test by copying a link in the home page and pasting it in a different browser 
and the link was successfully executed, was expecting Page expired page which did not happen.

To my understanding the home page links are still XSRF vulnerable.

The same XSRF test was done using links from non home pages by copying and pasting in a new browser and I was able to see Page expired page.


Regarding issue #2.
I have sent an email to wicket-users mailing list.","09/Oct/14 16:21;jira-bot;Commit c63989018a8fb11a3dbbc68253e74f3fd2117430 in wicket's branch refs/heads/sandbox/cryptomapper-request-listener from [~jesselong]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c639890 ]

WICKET-5326 Wicket doesn't encrypt links and Ajax URLs when CryptoMapper is used
","15/Oct/14 00:26;jira-bot;Commit 6af2d593dbe042925c5cc9d3b0e89fc63ffe8efb in wicket's branch refs/heads/wicket-6.x from [~jesselong]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6af2d59 ]

WICKET-5326 Wicket doesn't encrypt links and Ajax URLs when CryptoMapper is used
","15/Oct/14 00:27;jira-bot;Commit ded3c58375c9560b6bfcc499ecfe2817135133aa in wicket's branch refs/heads/master from [~jesselong]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ded3c58 ]

WICKET-5326 Wicket doesn't encrypt links and Ajax URLs when CryptoMapper is used

(cherry picked from commit 6af2d593dbe042925c5cc9d3b0e89fc63ffe8efb)

Conflicts:
	wicket-core/src/main/java/org/apache/wicket/core/request/mapper/CryptoMapper.java
	wicket-core/src/test/java/org/apache/wicket/core/request/mapper/CryptoMapperTest.java
",15/Oct/14 00:34;jesselong;Desired behavior is implemented by installing CryptoMapper after mounting pages in Wicket 6.18.0 and 7.0.0-M4.,,,,,,,,,,,,,,,,,,
IllegalArgumentException 'bytes' cannot be negative. on opening Inspector,WICKET-5973,12858303,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,patrick1701,patrick1701,24/Aug/15 13:59,06/Sep/15 21:36,13/Mar/19 23:18,06/Sep/15 21:29,6.19.0,,,,,,,,6.21.0,7.1.0,,,wicket-devutils,,,0,,,,,,,,"

    Root cause:

    java.lang.IllegalArgumentException: 'bytes' cannot be negative.
    at org.apache.wicket.util.lang.Bytes.<init>(Bytes.java:111)
    at org.apache.wicket.util.lang.Bytes.bytes(Bytes.java:124)
    at org.apache.wicket.devutils.inspector.EnhancedPageView$8.populateItem(EnhancedPageView.java:242)
    at org.apache.wicket.extensions.markup.html.repeater.data.grid.AbstractDataGridView.populateItem(AbstractDataGridView.java:156)
    at org.apache.wicket.markup.repeater.RefreshingView$1.newItem(RefreshingView.java:114)
    at org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1.next(DefaultItemReuseStrategy.java:75)
    at org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1.next(DefaultItemReuseStrategy.java:56)
    at org.apache.wicket.markup.repeater.RefreshingView.addItems(RefreshingView.java:189)
    at org.apache.wicket.markup.repeater.RefreshingView.onPopulate(RefreshingView.java:97)
    at org.apache.wicket.markup.repeater.AbstractRepeater.onBeforeRender(AbstractRepeater.java:123)
    at org.apache.wicket.markup.repeater.AbstractPageableView.onBeforeRender(AbstractPageableView.java:115)
    at org.apache.wicket.Component.internalBeforeRender(Component.java:949)
    at org.apache.wicket.Component.beforeRender(Component.java:1017)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-09-06 21:27:59.619,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Sep 06 21:36:52 UTC 2015,,,,,,0|i2jacf:,9223372036854775807,,,,,,,,"06/Sep/15 21:27;jira-bot;Commit 25242467abf4c13b99b7d97bd1ed9b5bb30172cb in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2524246 ]

WICKET-5973 IllegalArgumentException 'bytes' cannot be negative. on opening Inspector

Component#getSizeInBytes() should not return negative size when there is an error in the calculation.
Errors are just logged and the size could be used at the call site. For example, this breaks Bytes.bytes()
","06/Sep/15 21:36;jira-bot;Commit 8870b0a85d425a9ef748768afc41722898c174ea in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8870b0a ]

WICKET-5973 IllegalArgumentException 'bytes' cannot be negative. on opening Inspector

Component#getSizeInBytes() should not return negative size when there is an error in the calculation.
Errors are just logged and the size could be used at the call site. For example, this breaks Bytes.bytes()
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CGLib proxy should not intercept protected methods,WICKET-5910,12831174,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,gsmet,gsmet,19/May/15 21:12,02/Sep/15 09:12,13/Mar/19 23:18,20/May/15 12:25,7.0.0-M5,,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"Hi,

When trying to inject a Jackson 2 ObjectMapper, we end up with the following exception:
{quote}
java.lang.IllegalArgumentException: Protected method: defaultClassIntrospector()Lcom/fasterxml/jackson/databind/introspect/ClassIntrospector;
     at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:209)
     at org.apache.wicket.proxy.LazyInitProxyFactory$CGLibInterceptor.intercept(LazyInitProxyFactory.java:329)
     at WICKET_com.fasterxml.jackson.databind.ObjectMapper$$EnhancerByCGLIB$$b8a70988.defaultClassIntrospector(<generated>)
     at com.fasterxml.jackson.databind.ObjectMapper.<init>(ObjectMapper.java:465)
     at com.fasterxml.jackson.databind.ObjectMapper.<init>(ObjectMapper.java:391)
     at WICKET_com.fasterxml.jackson.databind.ObjectMapper$$EnhancerByCGLIB$$b8a70988.<init>(<generated>)
     at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
     at net.sf.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:228)
     at net.sf.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:220)
     at net.sf.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:216)
     at net.sf.cglib.proxy.Enhancer.createUsingReflection(Enhancer.java:643)
     at net.sf.cglib.proxy.Enhancer.firstInstance(Enhancer.java:538)
     at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:231)
     at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377)
     at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285)
     at org.apache.wicket.proxy.LazyInitProxyFactory.createProxy(LazyInitProxyFactory.java:170)
     at org.apache.wicket.spring.injection.annot.AnnotProxyFieldValueFactory.getFieldValue(AnnotProxyFieldValueFactory.java:164)
     at org.apache.wicket.injection.Injector.inject(Injector.java:111)
     at org.apache.wicket.spring.injection.annot.SpringComponentInjector.inject(SpringComponentInjector.java:124)
     at fr.openwide.core.wicket.more.console.maintenance.task.model.BatchReportBeanModel.<init>(BatchReportBeanModel.java:45)
{quote}

I ended up on this thread which explains the issue and how the people at Spring fixed the issue:
http://comments.gmane.org/gmane.comp.java.cglib.devel/720

There are 2 ways to fix the issue:
- either use invokeSuper() instead of invoke() if the method is protected;
- or do not override at all the calls to protected methods.

Spring did it the second way and that's what I implemented in the PR to come.",,,,,,,,,,,,,,,,,,,,,WICKET-5978,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-05-19 21:20:02.938,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed May 20 12:25:09 UTC 2015,,,,,,0|i2eyd3:,9223372036854775807,,,,,,,,"19/May/15 21:20;githubbot;GitHub user gsmet opened a pull request:

    https://github.com/apache/wicket/pull/119

    WICKET-5910 Do not intercept the protected methods with CGLib.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/openwide-java/wicket WICKET-5910-cglib-and-protected-methods

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/119.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #119
    
----
commit b48d6cca6669c076b8283854ea677822a98c4a70
Author: Guillaume Smet <guillaume.smet@gmail.com>
Date:   2015-05-19T21:15:02Z

    WICKET-5910 Do not intercept the protected methods with CGLib.

----
",19/May/15 21:20;gsmet;PR: https://github.com/apache/wicket/pull/119,"20/May/15 07:11;githubbot;Github user martin-g commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/119#discussion_r30675808
  
    --- Diff: wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java ---
    @@ -157,14 +164,26 @@ else if (type.isInterface())
     		}
     		else
     		{
    -			CGLibInterceptor handler = new CGLibInterceptor(type, locator);
    +			CGLibInterceptor handler = new CGLibInterceptor(type, locator) {
    +				@Override
    +				public Object intercept(Object object, Method method, Object[] args, MethodProxy proxy)
    +						throws Throwable {
    +					// TODO Auto-generated method stub
    +					return super.intercept(object, method, args, proxy);
    --- End diff --
    
    What is the purpose of this override? It seems to just call super.
","20/May/15 07:13;githubbot;Github user martin-g commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/119#discussion_r30675893
  
    --- Diff: wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java ---
    @@ -349,6 +368,33 @@ public Object writeReplace() throws ObjectStreamException
     	}
     
     	/**
    +	 * Serializable implementation of the NoOp callback.
    +	 */
    +	public static class SerializableNoOpCallback implements NoOp, Serializable
    +	{
    +		private static final long serialVersionUID = 1L;
    +	}
    +
    +	/**
    +	 * CGLib callback filter: does not intercept protected methods.
    +	 * 
    +	 * Otherwise CGLib throws an IllegalArgumentException: protected method.
    +	 */
    +	private static class CGLibCallbackFilter implements CallbackFilter {
    --- End diff --
    
    Please add a link to the description of the problem with protected methods in the Javadoc.
","20/May/15 11:12;githubbot;Github user gsmet commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/119#discussion_r30690880
  
    --- Diff: wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java ---
    @@ -157,14 +164,26 @@ else if (type.isInterface())
     		}
     		else
     		{
    -			CGLibInterceptor handler = new CGLibInterceptor(type, locator);
    +			CGLibInterceptor handler = new CGLibInterceptor(type, locator) {
    +				@Override
    +				public Object intercept(Object object, Method method, Object[] args, MethodProxy proxy)
    +						throws Throwable {
    +					// TODO Auto-generated method stub
    +					return super.intercept(object, method, args, proxy);
    --- End diff --
    
    Urgh, sorry, it was a leftover of my work on it. Shouldn't have been there.
","20/May/15 11:30;githubbot;Github user gsmet commented on the pull request:

    https://github.com/apache/wicket/pull/119#issuecomment-103849877
  
    I think I addressed your concerns.
","20/May/15 12:22;jira-bot;Commit 077e1c3d54d044ccfe7b56cc4decf4baf2cc6717 in wicket's branch refs/heads/master from [~gsmet]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=077e1c3 ]

WICKET-5910 Do not intercept the protected methods with CGLib.
","20/May/15 12:22;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/119
","20/May/15 12:25;jira-bot;Commit 98f9c7aa83337e20fc47b02f03b73e6024138101 in wicket's branch refs/heads/wicket-6.x from [~gsmet]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=98f9c7a ]

WICKET-5910 Do not intercept the protected methods with CGLib.

(cherry picked from commit 077e1c3d54d044ccfe7b56cc4decf4baf2cc6717)
",20/May/15 12:25;mgrigorov;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,
Page header isn't rendered for pages where URL has changed during render,WICKET-5960,12851098,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,dashorst,dashorst,03/Aug/15 13:37,15/Aug/15 14:37,13/Mar/19 23:18,10/Aug/15 12:56,7.0.0,,,,,,,,6.21.0,7.1.0,,,wicket,,,0,,,,,,,,"Due to the changes in WICKET-5309, a page is re-rendered when any of the URL segments is modified during the request:

From WebPageRenderer.java:

{code}
	// the url might have changed after page has been rendered (e.g. the
	// stateless flag might have changed because stateful components
	// were added)
	final Url afterRenderUrl = requestCycle
		.mapUrlFor(getRenderPageRequestHandler());

	if (beforeRenderUrl.getSegments().equals(afterRenderUrl.getSegments()) == false)
	{
		// the amount of segments is different - generated relative URLs
		// will not work, we need to rerender the page. This can happen
		// with IRequestHandlers that produce different URLs with
		// different amount of segments for stateless and stateful pages
		response = renderPage(afterRenderUrl, requestCycle);
	}

	if (currentUrl.equals(afterRenderUrl))
{code}

The re-render causes the <head> section to be empty because it was already rendered in the first try.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-08-03 14:30:10.418,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Aug 15 14:37:09 UTC 2015,,,,,,0|i2i9lb:,9223372036854775807,,,,,,,,"03/Aug/15 14:30;jira-bot;Commit 541a81d127deabf2c355985dfbfdde38f76389ec in wicket's branch refs/heads/master from [~dashorst]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=541a81d ]

WICKET-5960 Page header isn't renderen for pages where URL has changed during render

This adds a disabled test case for the linked issue.
","03/Aug/15 15:03;svenmeier;Problem is that HtmlHeaderContainer#headerResponse is kept until detach is called - i.e. during seconds rendering when Component#internalRenderHead() calls response#wasRendered(this), the component's header is already marked as rendered :/.",04/Aug/15 12:27;mgrigorov;Should we detach the page before re-rendering it?,"04/Aug/15 14:58;svenmeier;If we detach the page, we will lose all feedback messages :(","04/Aug/15 16:55;svenmeier;We could drop HtmlHeaderContainer's headerResponse after rendering:

{code}
	@Override
	protected void onAfterRender() {
		super.onAfterRender();
		
		headerResponse = null;
	}
{code}

The test works fine after this change.","04/Aug/15 19:29;jira-bot;Commit 03663750c3da6703ab56751ce17e9aaa273d3a07 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0366375 ]

WICKET-5960 drop headerResponse and renderedComponentsPerScope in #onAfterRender(), so a second rendering re-renders the header
","04/Aug/15 19:30;svenmeier;moving the code in #onDetach() to #onAfterRender() seems to fix the issue, I didn't notice any negative side effect","04/Aug/15 19:44;mgrigorov;Yes. I also thought about similar solution. Some other components (like IPageables) clear their cache in onBeforeRender().
I think onConfigure/onBeforeRender should be a bit better if an error happens during rendering and onAfterRender is not called. Then if the application tries to re-render (also Wicket does this with org.apache.wicket.request.cycle.RequestCycle#getExceptionRetryCount) the page the cache will be still there.","05/Aug/15 10:07;jira-bot;Commit 4601ff3a7a3cfec6db3f54d913050faf03a5536b in wicket's branch refs/heads/wicket-6.x from [~dashorst]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4601ff3 ]

WICKET-5960 Page header isn't renderen for pages where URL has changed during render

This adds a disabled test case for the linked issue.
","05/Aug/15 10:07;jira-bot;Commit c34f2f9dd2838d075968280b042b8826e325f012 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c34f2f9 ]

WICKET-5960 drop headerResponse and renderedComponentsPerScope in #onAfterRender(), so a second rendering re-renders the header
","05/Aug/15 11:54;svenmeier;#afterRender() and thus #onAfterRender() are called from a finally block in component, so I think this cleanup is pretty safe.",10/Aug/15 11:56;mgrigorov;Anything else to be done here?,"10/Aug/15 11:58;svenmeier;[~dashorst] Martijn, are you satisfied with the solution?",10/Aug/15 12:52;dashorst;If it fixes the testcase I'm content!,10/Aug/15 12:56;svenmeier;Thanks for the test!,"12/Aug/15 14:16;dashorst;It appears that this fix doesn't solve all our problems. While the test case is fixed, we encounter reproducible empty <head> sections. 

From what I gather it is mostly to do with 'back' navigations where we tell wicket to rerender a previous page from the page store (setResponsePage(....getPage(pageId)));. However I'm investigating if this is the cause, or something else is in play.","12/Aug/15 14:37;svenmeier;Perhaps a case where #onAfterRender() is not called, as Martin has guessed?","13/Aug/15 09:57;dashorst;Apparently this is caused by line 475 from PartialPageUpdate.java:

{code:java}
	protected void writeHeaderContribution(final Response response, final Component component)
	{
		headerRendering = true;

		// create the htmlheadercontainer if needed
		if (header == null)
		{
			header = new PartialHtmlHeaderContainer(this);
			final Page parentPage = component.getPage();
			parentPage.addOrReplace(header);
		}
{code}

the offending line is ""parentPage.addOrReplace(header);""",13/Aug/15 10:07;svenmeier;Any idea how to reproduce this?,"13/Aug/15 13:06;dashorst;https://github.com/dashorst/wicket-5960

Scenario:
 - have ajax update render a component
 - click on normal submit
 - see background go from gray to white
(and header be empty)
",13/Aug/15 14:31;dashorst;It appears that HtmlHeaderResponse's onAfterRender is not called when rendering an AJAX response.,"13/Aug/15 14:44;dashorst;Fixing the HtmlHeaderResponse such that also an onDetach is present to clear out the temporary state, it solves this issue.","13/Aug/15 15:19;jira-bot;Commit 8fbe6c7d5810debbab10395893a31aea7423aaad in wicket's branch refs/heads/master from [~dashorst]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8fbe6c7 ]

Re-introduced onDetach to fix WICKET-5960

This might be a temporary fix for WICKET-5960, because it is odd that
HtmlHeaderContainer.onAfterRender is not called during an AJAX render.

Adding onDetach fixes the bug introduced by renaming it to onAfterRender.
","13/Aug/15 15:19;jira-bot;Commit 8fbe6c7d5810debbab10395893a31aea7423aaad in wicket's branch refs/heads/master from [~dashorst]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8fbe6c7 ]

Re-introduced onDetach to fix WICKET-5960

This might be a temporary fix for WICKET-5960, because it is odd that
HtmlHeaderContainer.onAfterRender is not called during an AJAX render.

Adding onDetach fixes the bug introduced by renaming it to onAfterRender.
","13/Aug/15 20:59;svenmeier;I don't understand your commit:
Why should the HtmlHeaderContainer of RerenderAjaxPage be rendered at all, when just the feedback is updated via Ajax?",14/Aug/15 08:06;dashorst;I see... Apparently I didn't commit the accompanying test case. There's a separate test case for this.,"14/Aug/15 08:16;jira-bot;Commit 02d586477a0e9dabf82ab839bd53499c1b78d616 in wicket's branch refs/heads/master from [~dashorst]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=02d5864 ]

Added test case for WICKET-5960
","14/Aug/15 08:17;dashorst;The AJAX request replaces (or introduces) the PartialMarkupHtmlHeadContainer in the page when it is performing the render of the feedback panel. My guess is to capture any new header contributions. The issue is not this, it is that at the end of the AJAX request the PartialMarkupHeaderContainer is still attached to the page and the subsequent non-AJAX request uses this container to render the head section, causing an empty <head>.

When you renamed onDetach to onAfterRender this problem was introduced because somehow onAfterRender is not called in an AJAX update for the , but onDetach is.

I've committed the test case. When you comment out the two lines in HtmlHeaderContainer's onDetach you can reproduce the bug.","15/Aug/15 13:34;svenmeier;The PartialHtmlHeaderContainer isn't rendered actually, it's just used to provide the Ajax header response.
Thus #onAfterRender() is not called until after the next full render of the page.","15/Aug/15 13:40;jira-bot;Commit a9056384f018e10e6d7cfc0af674057f6660d906 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a905638 ]

WICKET-5960 remove PartialHtmlHeaderContainer from page after writing to the response
","15/Aug/15 14:37;jira-bot;Commit 562d43ccdd7f305f8ca641817f4b63a07ee8b6a6 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=562d43c ]

WICKET-5960 remove PartialHtmlHeaderContainer from page after writing to the response
",,,,,
Url.parse/toString should support fragment,WICKET-5717,12745612,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,gsmet,gsmet,02/Oct/14 21:56,12/Aug/15 11:05,13/Mar/19 23:18,08/Oct/14 10:27,6.17.0,,,,,,,,6.18.0,7.0.0-M4,,,wicket,,,0,,,,,,,,"Hi,

Starting with Wicket 6.16, we have issues redirecting to an absolute
URL containing a fragment: the # is escaped by Wicket.

Changes in the commit
https://fisheye6.atlassian.com/changelog/wicket-git?cs=e1f29e90ff3a35e117bb3ddc5ee2aefd900c13c8
are causing the regression but as far as we can see, the commit is not
the problem: the issue is that Url.parse then toString encodes the
anchor.

Before this commit, as we were using an absolute Url, we were in the
case where the Url wasn't escaped.

We think the right fix would be to make org.apache.wicket.request.Url
anchor aware.

Pull request to come.",,,,,,,,,,,,,,,,,WICKET-5938,,,,,,,,02/Oct/14 21:57;gsmet;redirect-url-anchor.tar.gz;https://issues.apache.org/jira/secure/attachment/12672661/redirect-url-anchor.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2014-10-02 22:02:40.119,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 10 07:17:39 UTC 2014,,,,,,0|i20r1r:,9223372036854775807,,,,,,,,02/Oct/14 21:57;gsmet;Added a quick start showing the issue.,"02/Oct/14 22:02;githubbot;GitHub user gsmet opened a pull request:

    https://github.com/apache/wicket/pull/78

    WICKET-5717 Support fragment in Url parse and toString

    Note: this PR is for the wicket-6.x branch.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/openwide-java/wicket support-fragment-in-url

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/78.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #78
    
----
commit f35ae4303333ee741ca7dd517ed09647d1a28a1f
Author: Guillaume Smet <guillaume.smet@gmail.com>
Date:   2014-09-30T23:42:27Z

    WICKET-5717 Support fragment in Url parse and toString

----
","08/Oct/14 09:31;githubbot;Github user martin-g commented on the pull request:

    https://github.com/apache/wicket/pull/78#issuecomment-58332442
  
    After merging this PR to wicket-6.x the following tests fail:
    ```
    Failed tests:   optionPlaceholderDecode1(org.apache.wicket.core.request.mapper.MountedMapperTest)
      optionPlaceholderDecodeEagerMatchParameters(org.apache.wicket.core.request.mapper.MountedMapperTest)
      optionPlaceholderDecode2(org.apache.wicket.core.request.mapper.MountedMapperTest)
      optionPlaceholderDecode3(org.apache.wicket.core.request.mapper.MountedMapperTest)
      optionPlaceholderDecodeWithIndexParams(org.apache.wicket.core.request.mapper.MountedMapperTest)
      optionPlaceholderEncode1(org.apache.wicket.core.request.mapper.MountedMapperTest): expected:<some/[p1/path/p2/i1/i2?a=b&b=c]> but was:<some/[/i1/i2?a=b&b=c&param1=p1&param2=p2]>
      optionPlaceholderEncode2(org.apache.wicket.core.request.mapper.MountedMapperTest): expected:<some/[path/p2/p3/i1/i2?a=b&b=c]> but was:<some/[/i1/i2?a=b&b=c&param2=p2&param3=p3]>
    ```
    
    I'll investigate.
","08/Oct/14 10:21;jira-bot;Commit 58fa34bc8ff9b531b61e9258ac33480296cc66f6 in wicket's branch refs/heads/wicket-6.x from [~gsmet]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=58fa34b ]

WICKET-5717 Support fragment in Url parse and toString

(cherry picked from commit ca70ec70a0b7ea20f51db849ea866aa7c3d6cd11)
","08/Oct/14 10:26;jira-bot;Commit 8489bcbebfef5a5096b24c0543d2b767c98f325e in wicket's branch refs/heads/master from [~gsmet]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8489bcb ]

WICKET-5717 Support fragment in Url parse and toString

(cherry picked from commit ca70ec70a0b7ea20f51db849ea866aa7c3d6cd11)
","08/Oct/14 10:27;mgrigorov;There was a problem that '#{optionalPathParam}' was treated as url fragment.
I've fixed it!

Thanks!","10/Oct/14 07:17;githubbot;Github user gsmet commented on the pull request:

    https://github.com/apache/wicket/pull/78#issuecomment-58620519
  
    Thanks!
","10/Oct/14 07:17;githubbot;Github user gsmet closed the pull request at:

    https://github.com/apache/wicket/pull/78
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTML input placeholder text breaks AutoCompleteTextField in IE11,WICKET-5959,12850597,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,RaKauf,RaKauf,31/Jul/15 13:25,11/Aug/15 12:56,13/Mar/19 23:18,10/Aug/15 12:57,6.20.0,,,,,,,,6.21.0,7.1.0,,,wicket-extensions,,,0,,,,,,,,"Reproduction steps are provided below:

1. Configure an AutoCompleteTextField so that the suggestion list shows on focus gain, and shows even if the input is still empty.
2. Link the AutoCompleteTextField to an HTML input element that has a value assigned to its ""placeholder"" attribute.
3. Embed the AutoCompleteTextField on a webpage, and open the webpage in Internet Explorer 11.
4. Click on the HTML input so that it receives focus. Do not enter any text.
5. Click on an item from the AutoComplete dropdown list. Observe that nothing happens.

Opening the console reveals that an error has occurred in the ""getSelectedValue()"" function in the ""wicket-autocomplete.js"" file. The error is caused by the fact that the variable ""selected"" has a value of ""-1"", which causes the ""getSelectableElement(selected)"" call to go wrong and return ""undefined"".

I have recreated the issue in a Quickstart.",Windows 8.1 + Internet Explorer 11,,,,,,,,,,,,WICKET-5432,,,,,,,,,,,,31/Jul/15 13:26;RaKauf;quickstart.zip;https://issues.apache.org/jira/secure/attachment/12748172/quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2015-08-10 11:45:38.002,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Aug 10 13:08:24 UTC 2015,,,,,,0|i2i6j3:,9223372036854775807,,,,,,,,"10/Aug/15 11:45;svenmeier;IE11 sends an ""input"" event, when the placeholder is shown:

http://stackoverflow.com/questions/19289396/jquery-input-event-fired-on-placeholder-in-ie","10/Aug/15 11:55;mgrigorov;I've linked this ticket to two other tickets related to bugs in IE with ""input"" event.
WICKET-5432 has a link to a bug report at Microsoft that is opened for almost 2 years now.",10/Aug/15 11:59;svenmeier;Here's the iE bug: https://connect.microsoft.com/IE/feedback/details/856700,"10/Aug/15 12:31;svenmeier;We have a fallback in wicket-ajax-jquery.js for IE<11 already. I propose to expand it to all IE versions with a placeholder attribute present:

{code}
    if (Wicket.Browser.isIELessThan11() || (Wicket.Browser.isIE() && jQuery(this).attr('placeholder'))) {
      // use old 'keydown cut paste keyup' solution
    }
{code}

Objections?","10/Aug/15 12:34;mgrigorov;IMO the check should be just: if (Wicket.Browser.isIE()) { // use keydown }

This may fix WICKET-5432 too.","10/Aug/15 12:52;jira-bot;Commit 345c9138b11ac2fcfee898ed2957a50f43636bd4 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=345c913 ]

WICKET-5959 input event is not reliable in IE
","10/Aug/15 12:52;jira-bot;Commit e69fb6f4cc1725abf38885dbc7e2dcf94853ae85 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e69fb6f ]

WICKET-5959 input event is not reliable in IE
","10/Aug/15 12:57;svenmeier;""input"" event is not reliable in IE (even in versions >=11), so we're using the old solution with ""keydown keyup cut paste"" now.",10/Aug/15 13:08;RaKauf;Thank you very much for addressing this issue.,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ajax Form example is broken due to 9716f2a7e799133fdf3f7927d0093e6dfe16f529,WICKET-5741,12751350,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,mgrigorov,mgrigorov,29/Oct/14 10:34,31/Jul/15 16:46,13/Mar/19 23:18,29/Oct/14 18:58,7.0.0-M3,,,,,,,,7.0.0-M4,,,,wicket,wicket-examples,,0,,,,,,,,"After

commit 9716f2a7e799133fdf3f7927d0093e6dfe16f529
Author: Andrea Del Bene <an.delbene@gmail.com>
Date:   Tue Oct 21 11:35:35 2014 +0200

    WICKET-5197 Rename AjaxRequestAttributes#allowDefault to #preventDefault
    
    (AJAX Guestbook example was broken)

http://localhost:8080/ajax/form doesn't allow to enter any text in the input fields.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-10-29 17:43:34.735,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Oct 30 15:38:14 UTC 2014,,,,,,0|i21pon:,9223372036854775807,,,,,,,,"29/Oct/14 17:43;jira-bot;Commit 7cd51be5a33ace110cc3295da238735219ab035c in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7cd51be ]

WICKET-5741 Form example is broken due to
9716f2a7e799133fdf3f7927d0093e6dfe16f529

",29/Oct/14 18:58;bitstorm;now AjaxFormValidatingBehavior sets prevent default to false.,"30/Oct/14 15:36;jira-bot;Commit 27cef4f1e8c5186eb04ad45fad25e5cce5cdea0a in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=27cef4f ]

WICKET-5741 Ajax Form example is broken due to 9716f2a7e799133fdf3f7927d0093e6dfe16f529
WICKET-5197 Rename AjaxRequestAttributes#allowDefault to #preventDefault
","30/Oct/14 15:38;mgrigorov;Reverted both changes.
As discussed at http://markmail.org/message/ztowpuwcb5foxkas every application should decide for itself whether preventing the default behavior of the JS event should be done or not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not use jQuery's $ in String snippets in Java code,WICKET-5917,12835078,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,03/Jun/15 14:54,04/Jun/15 19:45,13/Mar/19 23:18,03/Jun/15 14:56,6.19.0,,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"Wicket components and behaviors should not use jQuery's '$' in JS generated by Java code.

This will break if:
1) the application uses custom wicket-ajax.js (IJavaScriptLibrarySettings#setWicketAjaxReference()) that is not based on jQuery
2) the application use jQuery.noConflict()",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-03 14:55:15.401,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jun 04 19:45:14 UTC 2015,,,,,,0|i2fky7:,9223372036854775807,,,,,,,,"03/Jun/15 14:55;jira-bot;Commit b7620f499adb8098903aa2c806c54e0b0a85e4c5 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b7620f4 ]

WICKET-5917 Do not use jQuery's $ in String snippets in Java code
","03/Jun/15 14:55;jira-bot;Commit b48042da7ad6e9ba7fb37526715990a0d9a0368b in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b48042d ]

WICKET-5917 Do not use jQuery's $ in String snippets in Java code

(cherry picked from commit b7620f499adb8098903aa2c806c54e0b0a85e4c5)
","04/Jun/15 19:45;jira-bot;Commit 811190ee1d09428c663e25b692c13bf3cd8aabeb in wicket's branch refs/heads/WICKET-5906-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=811190e ]

WICKET-5917 Do not use jQuery's $ in String snippets in Java code

(cherry picked from commit b7620f499adb8098903aa2c806c54e0b0a85e4c5)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in FormComponent#updateCollectionModel in case of no converted input and unmodifiable collection,WICKET-5881,12820744,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,amorozov,amorozov,14/Apr/15 07:47,04/Jun/15 08:45,13/Mar/19 23:18,14/Apr/15 10:46,6.19.0,7.0.0,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,There are 2 issues with FormComponent#updateCollectionModel. 1) converted input is not checked for null before wrapping it to ArrayList 2) converted input is not checked for null then model returns unmodifiable collection. The both issues causes NPE.,"Windows 7 Pro SP1 x64, JDK 7u75 x64, Wildfly 8.2.0.Final",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-14 07:50:12.849,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Apr 14 12:28:55 UTC 2015,,,,,,0|i2d7rz:,9223372036854775807,,,,,,,,"14/Apr/15 07:50;githubbot;GitHub user shuraa opened a pull request:

    https://github.com/apache/wicket/pull/115

    WICKET-5881 FormComponent#updateCollectionModel must check convertedInpu...

    ...t for null before wrapping into ArrayListFormComponent#updateCollectionModel must check convertedInput for null before wrapping into ArrayList

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/shuraa/wicket wicket-6.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/115.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #115
    
----
commit 4362e6ee287993715de8867d0952aae775f99b85
Author: Alexander Morozov <amorozov@frte.ru>
Date:   2015-04-14T07:39:31Z

    WICKET-5881 FormComponent#updateCollectionModel must check convertedInput for null before wrapping into ArrayListFormComponent#updateCollectionModel must check convertedInput for null before wrapping into ArrayList

----
",14/Apr/15 08:35;svenmeier;Out of curiosity: Which component calls #updateCollectionModel() with a null argument?,"14/Apr/15 10:29;jira-bot;Commit 8c83c5c50161b040fab0b748232a4fb5e7855e68 in wicket's branch refs/heads/master from [~amorozov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8c83c5c ]

WICKET-5881 FormComponent#updateCollectionModel must check convertedInput for null before wrapping into ArrayListFormComponent#updateCollectionModel must check convertedInput for null before wrapping into ArrayList
","14/Apr/15 10:30;jira-bot;Commit 273814a957d2a7c742ff2ced3de4372f9a955eb7 in wicket's branch refs/heads/wicket-6.x from [~amorozov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=273814a ]

WICKET-5881 FormComponent#updateCollectionModel must check convertedInput for null before wrapping into ArrayListFormComponent#updateCollectionModel must check convertedInput for null before wrapping into ArrayList
","14/Apr/15 10:46;svenmeier;if null, convertedInput is now replaced with empty list","14/Apr/15 12:28;amorozov;We got this issue in wicketstuff-select2 component. But now... I'm in doubt. It might be that something wrong with select2choice, not with FormComponent.","14/Apr/15 12:28;githubbot;Github user shuraa closed the pull request at:

    https://github.com/apache/wicket/pull/115
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"LoadableDetachableModel caches null value if load() fails, bug in getObject() {attached = true;}",WICKET-5772,12757132,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,mmakundi,mmakundi,22/Nov/14 01:23,29/May/15 17:06,13/Mar/19 23:18,24/Nov/14 20:10,1.4.23,6.18.0,7.0.0-M4,,,,,,7.0.0-M5,,,,wicket,,,0,easyfix,easytest,patch,,,,,"If you have a LoadableDetachableModel whose load() operation fails at an instance, the LoadableDetachableModel will cache null value because 

getObject() method sets attached = true; before load() invocation has returned.

This results in methods trusting LoadableDetachableModel using the null value for their operations which is logically incorrect as null might not be a legal value at all. Such behavior would result in unexpected difficult-to-debug behavior in depending components.

Easy fix:
Move:
attached = true;
after line:
transientModelObject = load();

Test case:


/**
   * LoadableDetachableModel must not return null as an attached value if load()
   * fails.
   */
  public void testWhenLoadFails() {
    final LoadableDetachableModel<Void> loadableDetachableModel = new LoadableDetachableModel<Void>() {
      /**
       * @see org.apache.wicket.model.LoadableDetachableModel#load()
       */
      @Override
      protected Void load() {
        throw new UnsupportedOperationException(""Let's assume this fails for some reason."");
      }
    };
    try {
      loadableDetachableModel.getObject();
      fail(UnsupportedOperationException.class + "" expected."");
    } catch (final UnsupportedOperationException e) {
      LoggerFactory.getLogger(LoadableDetachableModel.class).debug(""Expected behavior due to "" + UnsupportedOperationException.class);
    }

    try {
      assertNotSame(LoadableDetachableModel.class + "" should not return null if it's load() has failed\n"", null,
          loadableDetachableModel.getObject());
    } catch (final UnsupportedOperationException e) {
      LoggerFactory.getLogger(LoadableDetachableModel.class).debug(""Expected behavior due to "" + UnsupportedOperationException.class);
    }
  }",,600,600,,0%,600,600,,,,,,,,,,,,,,WICKET-5916,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-24 16:08:40.268,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Nov 26 13:02:10 UTC 2014,,,,,,0|i22ofb:,9223372036854775807,,,,,,,,"24/Nov/14 16:08;jira-bot;Commit 61d6264b2bfa1a68b18a1c223945ad1cd9a3b8de in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=61d6264 ]

WICKET-5772 set attached after load, so failuer of load() will not keep null value
","24/Nov/14 16:11;svenmeier;The fix is trivial indeed.

@devs: any objections against this change on 6.x? Although unlikely, even such a small change could break existing applications.","24/Nov/14 16:15;mgrigorov;Looks like a safe change to me.
The only negative effect I see is that it may make second/third/... attempt to load the model object in case it fails and the impl of #load() handles this explicitly.","24/Nov/14 20:08;jira-bot;Commit fd3de0085e1f9f0dc98dbf456106d38a4b779f9e in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fd3de00 ]

WICKET-5772 set attached after load, so failuer of load() will not keep null value
","24/Nov/14 20:10;svenmeier;#attached is now set after calling #load(), as suggested.

Thanks Martin!","26/Nov/14 12:54;jira-bot;Commit 1c1c151da0636d4c433e198de97c84ca63f885a8 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1c1c151 ]

Revert ""WICKET-5772 set attached after load, so failuer of load() will not keep null value""

This reverts commit fd3de0085e1f9f0dc98dbf456106d38a4b779f9e.
","26/Nov/14 12:54;jira-bot;Commit ae76a350f2646e5246bebc3b38ea938ebba9fd43 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ae76a35 ]

WICKET-5772 added javadoc
","26/Nov/14 12:55;svenmeier;This is improved in 7.x only. To prevent regressions in existing projects, the fix is not applied to 6.x.",26/Nov/14 13:02;mgrigorov;Linked to http://markmail.org/message/wc2b4wwcyduuqkzl,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE after editing a markup file in debug mode,WICKET-5904,12828802,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,gsmet,gsmet,11/May/15 13:01,19/May/15 07:18,13/Mar/19 23:18,18/May/15 13:15,7.0.0-M5,,,,,,,,7.0.0-M6,,,,wicket,,,0,,,,,,,,"Hi,

I have a weird behavior with 7.0.0-SNAPSHOT: if I update the markup in Eclipse debug mode (just add a class in a class attribute for instance, nothing fancy), I get the following exception when I reload the page without removing the ?version parameter:

java.lang.IllegalArgumentException: Argument 'markup' may not be null.
     at org.apache.wicket.util.lang.Args.notNull(Args.java:41)
     at org.apache.wicket.markup.MarkupStream.<init>(MarkupStream.java:65)
     at org.apache.wicket.markup.html.internal.Enclosure.getChild(Enclosure.java:133)
     at org.apache.wicket.markup.html.internal.Enclosure.onConfigure(Enclosure.java:148)
     at org.apache.wicket.Component.configure(Component.java:1055)
     at org.apache.wicket.Component.internalBeforeRender(Component.java:940)
     at org.apache.wicket.Component.beforeRender(Component.java:1017)
     at org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1712)
     at org.apache.wicket.Component.onBeforeRender(Component.java:3876)
     at org.apache.wicket.Component.internalBeforeRender(Component.java:949)
     at org.apache.wicket.Component.beforeRender(Component.java:1017)
     at org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1712)
     at org.apache.wicket.Component.onBeforeRender(Component.java:3876)
     at org.apache.wicket.Page.onBeforeRender(Page.java:801)
     at org.apache.wicket.Component.internalBeforeRender(Component.java:949)
     at org.apache.wicket.Component.beforeRender(Component.java:1017)
     at org.apache.wicket.Component.internalPrepareForRender(Component.java:2214)
     at org.apache.wicket.Page.internalPrepareForRender(Page.java:242)

I can reproduce it every time.

If the issue isn't obvious, I can try to extract a quick start.",,,,,,,,,,,,,,,,,,,,,,,,,15/May/15 14:33;gsmet;npe-markup.tar.gz;https://issues.apache.org/jira/secure/attachment/12733152/npe-markup.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2015-05-15 11:13:49.212,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue May 19 07:18:00 UTC 2015,,,,,,0|i2ejzz:,9223372036854775807,,,,,,,,15/May/15 11:13;bitstorm;Any news about this issue? Could you try the last snapshot? It might contain a fix for this problem,15/May/15 14:14;gsmet;I still have the issue with the latest snapshots. Working on a quick start.,"15/May/15 14:33;gsmet;OK, got it reproduced with a simple quickstart!

How to reproduce:
- start the application using Start.java in debug mode;
- Go to the home page: you should be directed to /?0 as I added a statelessHint to false;
- then, in Eclipse, add something to the HomePage.html markup. For instance, I added "" 2"" just after the ""Test"" string which is in the enclosure;
- refresh the page in the browser (keeping the /?0 parameter)

You should end up with:
java.lang.IllegalArgumentException: Argument 'markup' may not be null.
     at org.apache.wicket.util.lang.Args.notNull(Args.java:41)
     at org.apache.wicket.markup.MarkupStream.<init>(MarkupStream.java:65)
     at org.apache.wicket.markup.html.internal.Enclosure.getChild(Enclosure.java:133)
     at org.apache.wicket.markup.html.internal.Enclosure.onConfigure(Enclosure.java:148)
     at org.apache.wicket.Component.configure(Component.java:1055)
     at org.apache.wicket.Component.internalBeforeRender(Component.java:940)
     at org.apache.wicket.Component.beforeRender(Component.java:1017)
     at org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1712)
     at org.apache.wicket.Component.onBeforeRender(Component.java:3876)
     at org.apache.wicket.Component.internalBeforeRender(Component.java:949)
     at org.apache.wicket.Component.beforeRender(Component.java:1017)
     at org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1712)
     at org.apache.wicket.Component.onBeforeRender(Component.java:3876)
     at org.apache.wicket.Page.onBeforeRender(Page.java:801)
     at org.apache.wicket.Component.internalBeforeRender(Component.java:949)","16/May/15 15:15;jira-bot;Commit 32a40bc1de5302f17bbcc19cd3ab769b0dc0f274 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=32a40bc ]

WICKET-5904 NPE after editing a markup file in debug mode
","16/May/15 18:35;jira-bot;Commit a1c83cbc9cba919cf0106ff5b7c5fa69cac27ef7 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a1c83cb ]

WICKET-5904 minor typos
","17/May/15 13:15;jira-bot;Commit 6dfe99f17a989c9d9759cd6ce2830f7962a9090d in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6dfe99f ]

WICKET-5904 Use integer instead of long

We don't expect that many components in the tree.

Minor cleanup:
- remove unused logger
- reuse the looked up RequestCycle
",18/May/15 14:49;gsmet;Thanks Andrea!,"19/May/15 07:18;jira-bot;Commit b65635188d73e3e46d4523b7643fa4ddcc509ca0 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b656351 ]

WICKET-5904 NPE after editing a markup file in debug mode
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
A new HtmlHeaderContainer is added each time a page instance is rendered,WICKET-5908,12830644,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,bitstorm,bitstorm,18/May/15 10:04,18/May/15 13:15,13/Mar/19 23:18,18/May/15 13:15,7.0.0-M5,,,,,,,,7.0.0-M6,,,,,,,0,,,,,,,,"A new HtmlHeaderContainer is added each time a page instance is rendered. To avoid this we must keep in synch the component id with the corresponding tag id, as we already did with all the other autocomponents. It would be also nice if markup parser could detect if our page has more than one <head> tag in its markup.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2015-05-18 10:04:52.0,,,,,,0|i2ev47:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
validateHeaders fails to detect missing head/body (regression),WICKET-5895,12825263,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,aditsu,aditsu,27/Apr/15 23:30,29/Apr/15 14:10,13/Mar/19 23:18,29/Apr/15 14:10,6.5.0,,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"I have a page that adds a panel which has a markup header contribution (wicket:head). The page has no head or body tag. In wicket 1.4, this logs a conspicuous error message, but in wicket 6 it ignores it silently.
I see that validateHeaders still tries to render the header and check if there was anything added, but the problem is that the header does not get rendered into the response object it's checking.",,,,,,,,,,,,,,,,,,,,,,,,,28/Apr/15 06:49;aditsu;bug5895.zip;https://issues.apache.org/jira/secure/attachment/12728716/bug5895.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2015-04-28 06:20:34.048,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Apr 29 14:10:05 UTC 2015,,,,,,0|i2dz3b:,9223372036854775807,,,,,,,,"28/Apr/15 06:20;mgrigorov;Please provide a quickstart application.
Thank you!","28/Apr/15 06:49;aditsu;Still not sure how to do that, here's a very small eclipse project.","28/Apr/15 06:54;mgrigorov;If you use Maven then it is as easy as copy/pasting the text from the textarea at http://wicket.apache.org/start/quickstart.html.
I have no experience with Ivy.
But it is easy to copy/paste the Java/HTML files from your attachment. Thanks!","29/Apr/15 13:04;jira-bot;Commit 042a55dc6fc5c7669a3c110a60eac9add94323af in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=042a55d ]

WICKET-5895 validateHeaders fails to detect missing head/body (regression)

(cherry picked from commit 008cdad4766d9e355c078e8a8a4285e11e20e97a)
","29/Apr/15 13:04;jira-bot;Commit 008cdad4766d9e355c078e8a8a4285e11e20e97a in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=008cdad ]

WICKET-5895 validateHeaders fails to detect missing head/body (regression)
","29/Apr/15 13:04;mgrigorov;Fixed.
TODO: add a test case.","29/Apr/15 14:09;jira-bot;Commit 635ce53e84e42063cd699478b39abaff41ebd745 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=635ce53 ]

WICKET-5895 validateHeaders fails to detect missing head/body (regression)
","29/Apr/15 14:10;jira-bot;Commit ddc7d415eb1711f41e8c7458efd77bfaae962208 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ddc7d41 ]

WICKET-5895 validateHeaders fails to detect missing head/body (regression)

(cherry picked from commit 635ce53e84e42063cd699478b39abaff41ebd745)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SecurePackageResourceGuard is blocking access to web fonts,WICKET-5126,12640023,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,ivaynberg,ivaynberg,ivaynberg,01/Apr/13 01:34,27/Apr/15 17:37,13/Mar/19 23:18,01/Apr/13 01:39,6.6.0,,,,,,,,6.7.0,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,320491,,,2013-04-01 01:34:53.0,,,,,,0|i1jaqf:,320832,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CookieUtils should use the original response when saving a cookie,WICKET-5893,12823732,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,24/Apr/15 12:21,24/Apr/15 13:07,13/Mar/19 23:18,24/Apr/15 12:22,6.19.0,7.0.0-M5,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"Report at users@: http://markmail.org/message/7ep5kar6kvmn766l

It is not possible to save a cookie inside Component#renderHead() method because at that time Wicket sets temporarily a StringResponse for collecting the header contributions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-24 12:22:36.802,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Apr 24 13:07:29 UTC 2015,,,,,,0|i2dpq7:,9223372036854775807,,,,,,,,"24/Apr/15 12:22;jira-bot;Commit e3808b8df3625b0134f0ca8bef6e45f9ccf27995 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e3808b8 ]

WICKET-5893 CookieUtils should use the original response when saving a cookie
","24/Apr/15 12:45;jira-bot;Commit bffd084c96f7a93fa391251a2fc59445a5424cf6 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bffd084 ]

WICKET-5893 CookieUtils should use the original response when saving a cookie

(cherry picked from commit e3808b8df3625b0134f0ca8bef6e45f9ccf27995)
","24/Apr/15 13:07;jira-bot;Commit 80e1dbbc49101508d0eae0090fd3aa3d427e3c97 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=80e1dbb ]

WICKET-5893 CookieUtils should use the original response when saving a cookie

Fallback to the original response only if the current one is not WebResponse. This way the buffering (BufferedWebResponse) is preserved if possible
","24/Apr/15 13:07;jira-bot;Commit b88977e225a070ebdce6872547702264cfa4b447 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b88977e ]

WICKET-5893 CookieUtils should use the original response when saving a cookie

Fallback to the original response only if the current one is not WebResponse. This way the buffering (BufferedWebResponse) is preserved if possible

(cherry picked from commit 80e1dbbc49101508d0eae0090fd3aa3d427e3c97)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parsing of ChinUnionPay credit card should use the first 6 characters,WICKET-5891,12823321,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,23/Apr/15 07:17,23/Apr/15 07:27,13/Mar/19 23:18,23/Apr/15 07:25,6.19.0,,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"User report:

A China UnionPay number has to start with 622 (622126-622925) and has to have a length between 16 and 19. The source code of CreditCardValidator is:

  220   	private boolean isChinaUnionPay(String creditCardNumber)
  221   	{
  222   		cardId = CreditCardValidator.INVALID;
  223   		boolean returnValue = false;
  224   
  225   		if ((creditCardNumber.length() >= 16 && creditCardNumber.length() <= 19) &&
  226   			(creditCardNumber.startsWith(""622"")))
  227   		{
  228   			int firstDigits = Integer.parseInt(creditCardNumber.substring(0, 5));
  229   			if (firstDigits >= 622126 && firstDigits <= 622925)
  230   			{
  231   				cardId = CreditCardValidator.CHINA_UNIONPAY;
  232   				returnValue = true;
  233   			}
  234   		}
  235   
  236   		return returnValue;
  237   	}
The problem is on the line 228 because the substring returns the first 5 digits and it is compared to 6 digits, so ""firstDigits"" is always < than 622126. The fix is to do #substring(0, 6).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-23 07:27:32.548,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Apr 23 07:27:36 UTC 2015,,,,,,0|i2dn8f:,9223372036854775807,,,,,,,,"23/Apr/15 07:27;jira-bot;Commit 2d9ebf9af8f9efb9cc195959b7e925d70a97a533 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2d9ebf9 ]

WICKET-5891 Parsing of ChinUnionPay credit card should use the first 6 characters

(cherry picked from commit d02ad24424d72fa944066c2b7e47c86b1d3e6480)
","23/Apr/15 07:27;jira-bot;Commit fd33ad02d4d4824c1cabdae0bdce41343926bf7f in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fd33ad0 ]

WICKET-5891 Parsing of ChinUnionPay credit card should use the first 6 characters
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AuthenticatedWebSession.get() returns a new session with signedIn false,WICKET-5845,12779173,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,yirco,yirco,03/Mar/15 20:32,19/Apr/15 12:19,13/Mar/19 23:18,27/Mar/15 20:42,6.19.0,7.0.0-M5,,,,,,,6.20.0,7.0.0-M6,,,wicket-auth-roles,,,0,,,,,,,,"A change from Wicket 6.18.0 to Wicket 6.19.0 causes that after a successful authentication {{AuthenticatedWebSession.get()}} returns a new session with the {{signedIn}} variable set to {{false}} although during the authentication the original session sets {{signedIn}} to {{true}}. 

Wicket 6.18.0
{{org.apache.wicket.authroles.authentication.AuthenticatedWebSession}}
{code}
public final boolean signIn(final String username, final String password)
	{
		signedIn = authenticate(username, password);
		if (signedIn)
		{
			bind();
		}
		return signedIn;
	}
{code}

Wickey 6.19.0

{code}
public final boolean signIn(final String username, final String password)
	{
		signedIn = authenticate(username, password);
		if (signedIn)
		{
			replaceSession();
		}
		return signedIn;
	}
{code}","java version ""1.7.0_75"", Windows 7",,,,,,,,,,,,,,,,,,,,,,WICKET-5886,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-27 20:41:18.872,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Mar 27 20:42:18 UTC 2015,,,,,,0|i26b6f:,9223372036854775807,,,,,,,,"27/Mar/15 20:41;jira-bot;Commit 972746aa01094db5ca6a0ea6aafe6528451eef03 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=972746a ]

WICKET-5845 AuthenticatedWebSession.get() returns a new session with signedIn false

Revert WICKET-5775. It has broken several scenaria
","27/Mar/15 20:41;jira-bot;Commit 1cdeee62fca61946d8948d0d4b8223596ef89121 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1cdeee6 ]

WICKET-5845 AuthenticatedWebSession.get() returns a new session with signedIn false

Revert WICKET-5775. It has broken several scenaria

(cherry picked from commit 972746aa01094db5ca6a0ea6aafe6528451eef03)
","27/Mar/15 20:42;mgrigorov;Reverted the change made with WICKET-5775.
It caused several issues so far.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resources served by Wicket are not compressable,WICKET-5873,12818630,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,nickpratt,nickpratt,06/Apr/15 16:29,07/Apr/15 11:02,13/Mar/19 23:18,07/Apr/15 11:01,6.19.0,,,,,,,,6.20.0,,,,,,,0,,,,,,,,"In AbstractResource.java, we are flushing the outputstream after writing the headers.  Based on a comment therein, this was due to some image loading problem with Firefox (assuming an older Firefox build).  This was fixed in the 7.0 branch 18 months ago:

https://github.com/apache/wicket/commit/7ea31ba59b6f027000a2bcd4b6e31eb5eaf35d21

Please could this fix (the header flush) be backported so that the Jetty Gzip filter can compress CSS and JS resources.",All,,,,,,,,,,,,,,,,WICKET-5392,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-07 11:01:22.403,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Apr 07 11:01:58 UTC 2015,,,,,,0|i2cuwn:,9223372036854775807,,,,,,,,"07/Apr/15 11:01;jira-bot;Commit c31a65f31463fb2238896990a052a8da930d2bc9 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c31a65f ]

WICKET-5873 Resources served by Wicket are not compressable
",07/Apr/15 11:01;mgrigorov;The improvement in 7.x didn't lead to any problems so far so I think it is safe to downport the fix to 6.x.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Responses for package resources cannot be compressed,WICKET-5392,12675209,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,23/Oct/13 08:04,07/Apr/15 10:37,13/Mar/19 23:18,28/Oct/13 09:24,6.11.0,,,,,,,,7.0.0-M1,,,,wicket,,,0,,,,,,,,"Applying Jetty's GZipFilter in web.xml works only for the page content but doesn't for any AbstractResource.

The problem is that org.apache.wicket.request.resource.AbstractResource#flushResponseAfterHeaders flushes the headers and GZipFilter cannot do anything after this.",,,,,,,,,,,,,,,,,,,,,,,,,24/Oct/13 07:55;mgrigorov;WICKET-5392.patch;https://issues.apache.org/jira/secure/attachment/12610067/WICKET-5392.patch,23/Oct/13 08:16;mgrigorov;WICKET-5392.patch;https://issues.apache.org/jira/secure/attachment/12609821/WICKET-5392.patch,,,2.0,,,,,,,,,,,,,,,,,,,2013-10-23 10:43:13.273,,,no_permission,,,,,,,,,,,,354829,,,Mon Oct 28 09:24:20 UTC 2013,,,,,,0|i1p67r:,355118,,,,,,,,"23/Oct/13 08:16;mgrigorov;Attaching possible solution.
Unfortunately Clirr plugin breaks the build because the patch introduces new methods in IResourceSettings interface.

Suggestions how to apply this change in 6.x ?","23/Oct/13 10:43;svenmeier;Isn't this a bug in Jetty?

{code:title=org.eclipse.jetty.http.gzip.CompressedResponseWrapper.java}
    public void flushBuffer() throws IOException
    {
        if (_writer!=null)
            _writer.flush();
        if (_compressedStream!=null)
            _compressedStream.finish();
        else
            getResponse().flushBuffer();
    }
{code}

When AbstractResponse flushes the headers, no body was written yet, thus the response is just flushed.
Later on - after writing something to the body - AbstractCompressedStream#flush() takes care of setting the appropriate ""Content-Encoding"" before flushing. But that's too late for Wicket, because we flush the headers before the body.","23/Oct/13 11:22;mgrigorov;IMO the flush for the resources is not really needed these days.
I think it is a workaround for some obsolete issue with Firefox version that is fixed in newer versions.
I remember a Wicket user needing to disable the flushing of the headers exactly for a case where the response is an image and the browser is Firefox.

I'm not sure whether it is a bug in Jetty's GZipFilter classes. I also think it should not try to do anything if the application flushes the response earlier.","24/Oct/13 07:37;svenmeier;I didn't find the originating commit, but I agree it's probably safe to not flush after the headers by default.","24/Oct/13 07:51;mgrigorov;I'll apply an improvement only in master branch (7.x).
The behavior will be the same - flush the headers by default, but with the new setting this can be suppressed application-wide. It is possible even now to suppress it for particular AbstractResource by overriding #flushResponseAfterHeaders() and leaving it empty.

6.x users can use frontend proxy, like httpd or nginx, to gzip/deflate when needed.","24/Oct/13 07:55;mgrigorov;Here is a new patch for master branch.
It passes the AbstractResourse as parameter to the new IResourceSettings#shouldFlushResponseHeaders() method.

This way the logic could be more flexible, but to apply it the application developer should extend ResourceSettings, instead of just calling a setter method.

Is that OK ?","24/Oct/13 11:10;svenmeier;Extending a settings object is rather unusual in Wicket, isn't it?","24/Oct/13 11:18;mgrigorov;I have never did it. But it is not impossible - org.apache.wicket.Application#setResourceSettings.
And this is the main reason why Clirr doesn't allow the change in 6.x branch.

I think the new patch is much more flexible. The AbstractResource is passed as argument and the custom impl of IResourceSettings can make more complex decisions.","26/Oct/13 10:51;svenmeier;Yes, it's possible to subclass settings. But currently all their properties have setter/getter pairs, so I don't think it's a good idea to introduce that new usage just for this issue.

How about introducing
- IResourceStrategy (similar to IResourceCachingStrategy)
- IResourceStrategy#decorateHeaders(AbstractResource, AbstractResource.ResourceResponse)
- DefaultResourceStrategy calls response.flush() in decorateHeaders()

Perhaps we should just remove the I*Settings interfaces in 7.x, so we make it easier to add new settings in the future.","28/Oct/13 09:05;mgrigorov;Removing IResourceSettings and introducing IResourceStrategy will lead to the same problem - not able to add new settings in IRStrategy for the lifetime of the stable release.

How about not applying my suggested patches at all and just remove the flush of the headers for resources in 7.x ? ",28/Oct/13 09:14;svenmeier;+1 keep it simple,"28/Oct/13 09:24;mgrigorov;Done.
Thanks for the discussion, Sven!",,,,,,,,,,,,,,,,,,,,,,,,
CryptoMapper clears feedback messages,WICKET-5814,12768629,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,guyw,guyw,20/Jan/15 09:19,30/Mar/15 19:17,13/Mar/19 23:18,30/Mar/15 19:17,6.18.0,,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"Wicket 6.18 breaks the behaviour when using a CryptoMapper:
the feedback messages are cleared for pages that don't use the
CryptoMapper.

This was added to WicketApplication.init():

  mountPage(""page1"", Page1.class);
  setRootRequestMapper(new CryptoMapper(getRootRequestMapper(), this));
  mountPage(""page2"",Page2.class);

Page1 and Page2 contain both a form and a FeedbackPanel.
With Wicket 6.17 there are no problems. When using Wicket 6.18, no
feedback messages are displayed on Page2.",,,,,,,,,,,,,,,,,,,,,,,,,20/Jan/15 09:21;guyw;cryptomapper_quickstart.tar.gz;https://issues.apache.org/jira/secure/attachment/12693269/cryptomapper_quickstart.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2015-01-20 11:36:47.215,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 30 19:17:04 UTC 2015,,,,,,0|i24jz3:,9223372036854775807,,,,,,,,"20/Jan/15 11:36;jesselong;I'm not sure exactly what the problem is, I haven't dug down to investigate, but 6.19.0-SNAPSHOT works.

Some work has gone into CryptoMapper since 6.18.0, and that may have solved the problem.",27/Mar/15 21:34;mgrigorov;I can reproduce the problem both with 6.19.0 and current 6.20.0-SNAPSHOT.,"27/Mar/15 21:52;mgrigorov;The problem is that the page is rendered and stored for rendering after redirect (REDIRECT_TO_BUFFER strategy).
But after the redirect BufferedResponseMapper is not used but the page is re-rendered again, the feedback message is already marked as rendered in the first request and thus doesn't appear in the second page render.","27/Mar/15 22:09;jira-bot;Commit d5c51b89766872c6dc1c6e71f8cf37b922954020 in wicket's branch refs/heads/WICKET-5814-use-systemmapper-for-inner-compounds from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d5c51b8 ]

WICKET-5814 CryptoMapper clears feedback messages
","27/Mar/15 22:10;mgrigorov;I've pushed a possible fix to branch 'WICKET-5814-use-systemmapper-for-inner-compounds'.
Please review.","30/Mar/15 19:16;jira-bot;Commit d5c51b89766872c6dc1c6e71f8cf37b922954020 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d5c51b8 ]

WICKET-5814 CryptoMapper clears feedback messages
","30/Mar/15 19:16;jira-bot;Commit 0288e4ad712ac5ddbf2aa1c78544701f28526516 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0288e4a ]

Merge branch 'WICKET-5814-use-systemmapper-for-inner-compounds' into wicket-6.x
","30/Mar/15 19:17;jira-bot;Commit 8298b2f19120e7b94a127a4926a5beb2fcebb7f1 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8298b2f ]

WICKET-5814 CryptoMapper clears feedback messages

(cherry picked from commit d5c51b89766872c6dc1c6e71f8cf37b922954020)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
RememberMe functionality seems to be broken after the change of the default crypt factory,WICKET-5855,12781008,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,10/Mar/15 22:25,30/Mar/15 19:10,13/Mar/19 23:18,30/Mar/15 19:10,6.19.0,7.0.0-M5,,,,,,,6.20.0,7.0.0-M6,,,wicket-auth-roles,,,0,,,,,,,,"The fix for CVE-2014-7808 seems to break the ""rememberMe"" functionality in wicket-auth-roles.
DefaultAuthenticationStrategy uses the crypt factory to encrypt the user credentials. After restart of the application a new crypt factory is created with a new secret key. Now it is not possible to decrypt the saved credentials.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-27 20:21:21.938,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 30 19:10:37 UTC 2015,,,,,,0|i26ltb:,9223372036854775807,,,,,,,,"27/Mar/15 20:21;jira-bot;Commit 904965a491ab64e01cb9034088798c06fb3018f8 in wicket's branch refs/heads/WICKET-5855-fix-rememberMe from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=904965a ]

WICKET-5855 RememberMe functionality seems to be broken after the change of the default crypt factory
","27/Mar/15 20:35;jira-bot;Commit b435cd14a34c8b79b8023f2ecab119ddcee751a9 in wicket's branch refs/heads/WICKET-5855-fix-rememberMe from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b435cd1 ]

WICKET-5855 RememberMe functionality seems to be broken after the change of the default crypt factory
","30/Mar/15 19:05;jira-bot;Commit c682e71225f10e1cbcf359f667406077a55d6019 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c682e71 ]

WICKET-5855 RememberMe functionality seems to be broken after the change of the default crypt factory
","30/Mar/15 19:05;jira-bot;Commit d606f2a5f981e2f20510b2b40c09f17fc81b6b77 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d606f2a ]

WICKET-5855 RememberMe functionality seems to be broken after the change of the default crypt factory
","30/Mar/15 19:10;jira-bot;Commit 6056a5c0a54efb95eb60f507ac568ca882d7cc5d in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6056a5c ]

WICKET-5855 RememberMe functionality seems to be broken after the change of the default crypt factory

(cherry picked from commit c682e71225f10e1cbcf359f667406077a55d6019)
","30/Mar/15 19:10;jira-bot;Commit 6d679279365f840b61a3798fa65c3a1af6428b74 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6d67927 ]

WICKET-5855 RememberMe functionality seems to be broken after the change of the default crypt factory

(cherry picked from commit d606f2a5f981e2f20510b2b40c09f17fc81b6b77)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multipart Ajax form submit does not release the channel in case of connection failure,WICKET-5864,12785336,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,24/Mar/15 22:35,27/Mar/15 21:21,13/Mar/19 23:18,24/Mar/15 22:52,6.19.0,,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"http://apache-wicket.1842946.n4.nabble.com/wicket-abort-ajax-handling-of-multipart-form-when-the-server-is-stopped-td4670076.html

If the server is down when trying to submit a multipart form then Wicket doesn't call failure handler and doesn't unlock the channel.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-24 22:50:23.29,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Mar 25 16:48:53 UTC 2015,,,,,,0|i27b0v:,9223372036854775807,,,,,,,,"24/Mar/15 22:50;jira-bot;Commit f1683074e6d349262e24dfdcb121c326acf5b806 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f168307 ]

WICKET-5864 Multipart Ajax form submit does not release the channel in case of connection failure
","24/Mar/15 22:52;jira-bot;Commit 51cd2e56b2771919f3a231f2bdc5137c0bf99945 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=51cd2e5 ]

WICKET-5864 Multipart Ajax form submit does not release the channel in case of connection failure

(cherry picked from commit f1683074e6d349262e24dfdcb121c326acf5b806)
","25/Mar/15 09:01;svenmeier;Hi Martin,

> attrs.rt || 5000

AFAIKS Wicket doesn't have a default request timeout set. With the line above you're forcing a 5 seconds timeout on all multipart ajax uploads, don't you?

Sven","25/Mar/15 09:26;mgrigorov;Hi Sven,

By default jQuery#ajax() uses 0 as a request timeout, so the timeout depends on the browser. That's why Wicket doesn't set a default request timeout too.

In the current case we need to fire the error handler at some point.
5000 is just a random number, yes. The application may tune it with AjaxRequestAttributes to whatever value it find appropriate for its needs. Globally or per form submitter.

The best would be if iframe supported onerror for notifying when there is a problem with the normal load of the page, but unfortunately this seems to be not supported.

Ideas for better handling of this are welcome!
","25/Mar/15 09:44;svenmeier;>if iframe supported onerror ... but unfortunately this seems to be not supported.

Yes, regretfully this seems to be the case.

>Ideas for better handling of this are welcome

Since we can't know the appropriate timeout, the user should have to set it explicitly:

{code}
if (attrs.rt) {
  // an error handler that is used when the connection to the server fails for any reason
  context.errorHandle = setTimeout(jQuery.proxy(function() {
    this.failure(context, null, ""No XML response in the IFrame document"", ""Failure"");

    context.steps.push(context.endStep);
    var executer = new FunctionsExecuter(context.steps);
    executer.start();
  }, this), attrs.rt);
}
{code}","25/Mar/15 09:57;mgrigorov;I think it'd be better to have a default timeout. It could be bigger, e.g. 10000, and we can log an INFO/ERROR when it is fired with explanation why it has fired.
This way it will be easier for the developer to debug what happens and increase the timeout if needed.
Without the error handling the application will just hang as explained at users@ and the developer will have to debug all this by her/himself to find the 'if' statement and understand what it actually means.","25/Mar/15 10:34;svenmeier;I disagree: A timeout will always be too low. Someone will do heavy uploads through 'ajax' and require not to have any timeout.

Normal Ajax requests don't have a default timeout, why should it be different for multipart 'ajax' uploads? IMHO this issue is a rare case: if you're server isn't responding at all, you have worse problems.","25/Mar/15 16:45;jira-bot;Commit 02568ddbf2d067ec20d334d1904153b73ec1e333 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=02568dd ]

WICKET-5864 Multipart Ajax form submit does not release the channel in case of connection failure
","25/Mar/15 16:48;mgrigorov;""worse problems"" could be a temporary network problem on the client side.

I've applied your suggestion. Also added 'else Wicket.Log.info()' with suggestion to use AjaxRequestAttributes#setRequestTimeout() if error handling is needed.","25/Mar/15 16:48;jira-bot;Commit 183a6fd78fe02df205c66660a22b0c6ec3ea4829 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=183a6fd ]

WICKET-5864 Multipart Ajax form submit does not release the channel in case of connection failure

(cherry picked from commit 3bb7c251854a7b83235241a28c26f229a447f703)
",,,,,,,,,,,,,,,,,,,,,,,,,,
CryptoMapper doesn't work with context relative UrlResourceReferences,WICKET-5843,12779078,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,ntkoopman,ntkoopman,03/Mar/15 14:09,27/Mar/15 21:17,13/Mar/19 23:18,27/Mar/15 21:17,6.19.0,,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"Adding a CryptoMapper to the application causes context relative URL's to be rendered twice, causing them to stop working.

For example a webjar resource is rendered as:

||page||rendered url||
|/|./webjars/jquery/1.11.2/jquery.js|
|/admin|./webjars/jquery/1.11.2/jquery.js|
|/admin/configuration|../../webjars/jquery/1.11.2/jquery.js|
|/admin/configuration/|../../../../webjars/jquery/1.11.2/jquery.js|

The last two urls won't work as they point to urls outside the context root.

The reason this happens is because UrlResourceReference#getUrl returns a UrlResourceReference$CalculatedUrl, which is normally skipped by UrlRenderer#renderRelativeUrl.
But in the case of CryptoMapper, this CalculatedUrl is converted to a normal Url (in CryptoMapper#encryptRequestListenerParameter) which isn't skipped.

So, when you have a CryptoMapper all context relative urls are converted twice: once by UrlRenderer#renderContextRelativeUrl and again by UrlRenderer#renderRelativeUrl.

A quick fix would be to ignore all url's of type IUrlRenderer in CrytoMapper's mapHandler, but I don't know it this the wanted solution. It seems pretty weird to me that conversion is done twice at all.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-09 20:27:42.39,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Mar 27 21:17:07 UTC 2015,,,,,,0|i26am7:,9223372036854775807,,,,,,,,"09/Mar/15 20:27;bitstorm;Hi,

could you provide a quickstart to reproduce the problem?

Thank you.","27/Mar/15 21:16;jira-bot;Commit 55f164e4bc20ef4d54aaafbfbc79ffeb58f37caa in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=55f164e ]

WICKET-5843 CryptoMapper doesn't work with context relative UrlResourceReferences

Return the original Url if there was no encryption.
","27/Mar/15 21:16;jira-bot;Commit 03d94aae2d56d6d15787e470f39372256b122e56 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=03d94aa ]

WICKET-5843 CryptoMapper doesn't work with context relative UrlResourceReferences

Return the original Url if there was no encryption.

(cherry picked from commit 55f164e4bc20ef4d54aaafbfbc79ffeb58f37caa)
","27/Mar/15 21:17;mgrigorov;Fixed by returning the original Url in case there was no encryption of any parameter.

Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket Container visibility bug,WICKET-5862,12784766,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,giovanni.cuccu,giovanni.cuccu,23/Mar/15 08:59,25/Mar/15 18:40,13/Mar/19 23:18,25/Mar/15 18:40,6.19.0,7.0.0-M5,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"See the attached quick start. Changing the visibility of a container triggers and error in wicket 6.19 but in wicket 6.15 no exception is throw. Note that while in development mode wicket throws an error in deployment mode it does not show the content of the container (i.e. wicket is ""failing quietly"").",java 1.7 windows,,,,,,,,,,,,,,,,,,,,,,,,23/Mar/15 09:00;giovanni.cuccu;container.zip;https://issues.apache.org/jira/secure/attachment/12706482/container.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2015-03-25 17:32:07.195,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Mar 25 18:39:15 UTC 2015,,,,,,0|i277tb:,9223372036854775807,,,,,,,,23/Mar/15 09:00;giovanni.cuccu;quickstart; change the wicket version to 6.15 to see the previous behaviour.,"25/Mar/15 17:32;jira-bot;Commit b87ce0834a20041861d4f950f4965636c360826f in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b87ce08 ]

WICKET-5862 Wicket Container visibility bug
","25/Mar/15 18:39;jira-bot;Commit 36e8db064f6f71c42dd31f1e907c9d8c648ad0ea in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=36e8db0 ]

WICKET-5862 Wicket Container visibility bug
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxRequestTarget.focusComponent() does not work when two Ajax responses arrive next to each other,WICKET-5564,12709246,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,0xabadea,0xabadea,18/Apr/14 11:17,17/Mar/15 20:51,13/Mar/19 23:18,09/Jul/14 13:08,,,,,,,,,6.17.0,7.0.0-M3,,,wicket,,,1,,,,,,,,"I have an AjaxButton. Its onSubmit() handler calls AjaxRequestTarget.focusComponent(). After the Ajax response is handled, that component should get the focus, but it does not. Wicket.Focus.setFocusOnId() is called correctly and it does set the lastFocusId field, but Wicket.Focus.requestFocus() finds that Wicket.Focus.refocusLastFocusedComponentAfterResponse is false and does nothing.

What happens is that, before Wicket.Focus.requestFocus() runs (it scheduled by the first response via setTimeout(0), so it is not synchronous) another Ajax response is  handled. This calls markFocusComponent(), then check checkFocusedComponentReplaced(). The latter method (correctly) determines the focused component was not replaced by the second Ajax response, so it sets Wicket.Focus.refocusLastFocusedComponentAfterResponse to false. When requestFocus() does run, later, it thinks it is just supposed to refocus the component that already has the focus.

The second Ajax response is triggered by wicket-atmosphere, but  to me this issue is not caused by wicket-atmosphere. The core problem is that two Ajax responses can clobber each other's focus-related state in Wicket.Focus.",,,,,,,,,,,,,,,,,,,,,WICKET-5755,WICKET-5858,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-07-09 13:08:00.776,,,no_permission,,,,,,,,,,,,387568,,,Wed Jul 09 13:08:00 UTC 2014,,,,,,0|i1urj3:,387830,,,,,,,,"09/Jul/14 13:08;mgrigorov;The timeout has been done with https://github.com/apache/wicket/commit/a4d7cea1c50c6640e124518af93afa2e14ca3220 at Jun 4 2007 for Internet Explorer. 
IE8 has been released Mar 19 2009 (http://en.wikipedia.org/wiki/Internet_Explorer_8). 
So the fix is for IE 6/7.
Since there is no info how to test whether the fix is still needed for IE8+ I will remove the timeout and wait for feedback from users whether it breaks in any conditions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StackOverFlowError when working with transparent containers,WICKET-5856,12781541,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,marcokleijer,marcokleijer,12/Mar/15 16:20,17/Mar/15 07:39,13/Mar/19 23:18,17/Mar/15 07:39,7.0.0-M4,7.0.0-M5,,,,,,,7.0.0-M6,,,,wicket,,,1,,,,,,,,"While upgrading to Wicket 7.0.0-M5 we encounter StackOverflowErrors in several parts of our application.
I managed to isolate the problem into a quick start project (see attached file).

The problem seems to arise when working with (nested) transparent containers like TransparentWebMarkupContainer and possibly Enclosure.

To reproduce: Start project, load home page, refresh browser.",,,,,,,,,,,,,,,,,,,,,,,,,12/Mar/15 16:21;marcokleijer;stackoverflowerror-quickstart.zip;https://issues.apache.org/jira/secure/attachment/12704180/stackoverflowerror-quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2015-03-16 11:52:27.014,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 16 14:20:18 UTC 2015,,,,,,0|i26p1r:,9223372036854775807,,,,,,,,"16/Mar/15 11:52;jira-bot;Commit cd09ff5fc5b11977a6c967c23eeca631bcb61a10 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=cd09ff5 ]

WICKET-5856
",16/Mar/15 13:14;bitstorm;Fixed. You can test the nex snapshot release. Is currently under building.,"16/Mar/15 14:20;marcokleijer;The snapshot is not available yet, however I tested your change in our environment. It resolves the StackOverFlowError in the quickstart as well as the errors in our application.

I'll wait for the snapshot so I can confirm the above.

[edit]
New snapshot is available, the issue is fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PackageResourceTest#packageResourceGuard test fails under Windows,WICKET-5851,12780129,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,amorozov,amorozov,06/Mar/15 17:45,12/Mar/15 08:25,13/Mar/19 23:18,12/Mar/15 08:25,6.19.0,,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"I'm emphasized assert statement which causes the issue
{code:java}
	@Test
	public void packageResourceGuard() throws Exception
	{
		PackageResourceGuard guard = new PackageResourceGuard();
		assertTrue(guard.acceptExtension(""txt""));
		assertFalse(guard.acceptExtension(""java""));
		assertTrue(guard.acceptAbsolutePath(""foo/Bar.txt""));
		assertFalse(guard.acceptAbsolutePath(""foo/Bar.java""));
		assertTrue(guard.accept(PackageResourceTest.class,
			Packages.absolutePath(PackageResourceTest.class, ""Bar.txt"")));
		assertTrue(guard.accept(PackageResourceTest.class,
			Packages.absolutePath(PackageResourceTest.class, ""Bar.txt."")));
		assertTrue(guard.accept(PackageResourceTest.class,
			Packages.absolutePath(PackageResourceTest.class, "".Bar.txt"")));
		assertTrue(guard.accept(PackageResourceTest.class,
			Packages.absolutePath(PackageResourceTest.class, "".Bar.txt."")));
		assertTrue(guard.accept(PackageResourceTest.class,
			Packages.absolutePath(PackageResourceTest.class, "".Bar"")));
>>>>	assertTrue(guard.accept(PackageResourceTest.class,
			Packages.absolutePath(PackageResourceTest.class, "".java"")));
		assertFalse(guard.accept(PackageResourceTest.class,
			Packages.absolutePath(PackageResourceTest.class, ""Bar.java"")));
	}
{code}

There is another issue in PackageResourceGuardTest 
{code:java}
	@Test
	public void acceptAbsolutePath()
	{
		PackageResourceGuard guard = new PackageResourceGuard();
		guard.setAllowAccessToRootResources(false);

		assertTrue(guard.acceptAbsolutePath(""/test/test.js""));
		assertFalse(guard.acceptAbsolutePath(""/test.js""));

>>> File.pathSeparator must be replaced with File.separator
>>>		if (""\\"".equals(File.pathSeparator))
		{
			assertTrue(guard.acceptAbsolutePath(""c:\\test\\org\\apache\\test.js""));
			assertTrue(guard.acceptAbsolutePath(""\\test\\org\\apache\\test.js""));
			assertFalse(guard.acceptAbsolutePath(""c:\\test.js""));
			assertFalse(guard.acceptAbsolutePath(""\\test.js""));

			// java also generates file paths with '/' on windows
			assertTrue(guard.acceptAbsolutePath(""c:/test/org/apache/test.js""));
			assertTrue(guard.acceptAbsolutePath(""/test/org/apache/test.js""));
			assertFalse(guard.acceptAbsolutePath(""c:/test.js""));
			assertFalse(guard.acceptAbsolutePath(""/test.js""));
		}
	}
{code}
","Windows 8.1 Pro, Oracle JDK 7u72 x64",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-06 17:57:34.438,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Mar 12 08:25:42 UTC 2015,,,,,,0|i26gjj:,9223372036854775807,,,,,,,,"06/Mar/15 17:57;githubbot;GitHub user shuraa opened a pull request:

    https://github.com/apache/wicket/pull/107

    WICKET-5851 Fix PackageResourceTest and PackageResourceGuardTest under Windows

    Please, review PR.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/shuraa/wicket wicket-6.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/107.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #107
    
----
commit e00c54c310000924290476f91797a2197a756782
Author: Alexander Morozov <alexander.v.morozov@gmail.com>
Date:   2015-03-05T18:16:59Z

    WICKET-5850 Fix class loading issue in LazyInitProxyFactory in case of multimodule deployment

commit 830776e90ffd564d7b8e678c8d850d18a41e5142
Author: Alexander Morozov <alexander.v.morozov@gmail.com>
Date:   2015-03-06T17:07:16Z

    Merge remote-tracking branch 'upstream/wicket-6.x' into wicket-6.x
    
    Conflicts:
    	wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java

commit 2ed52c012c5d84c9dfcb5ffb571b9541c0575073
Author: Alexander Morozov <alexander.v.morozov@gmail.com>
Date:   2015-03-06T17:51:13Z

    WICKET-5851 Fix PackageResourceTest and PackageResourceGuardTest under Windows

----
",06/Mar/15 17:59;amorozov;I can make PR to master after review of PR in wicket-6.x.,"12/Mar/15 08:03;githubbot;Github user martin-g commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/107#discussion_r26284011
  
    --- Diff: wicket-core/src/main/java/org/apache/wicket/markup/html/PackageResourceGuard.java ---
    @@ -85,7 +85,8 @@ protected boolean acceptAbsolutePath(String path)
     		int len = path.length();
     		final String ext;
     		if (ixExtension <= 0 || ixExtension == len ||
    -			(path.lastIndexOf(File.separator) + 1) == ixExtension)
    --- End diff --
    
    What is wrong here with `File.separator` ?
","12/Mar/15 08:10;githubbot;Github user shuraa commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/107#discussion_r26284201
  
    --- Diff: wicket-core/src/main/java/org/apache/wicket/markup/html/PackageResourceGuard.java ---
    @@ -85,7 +85,8 @@ protected boolean acceptAbsolutePath(String path)
     		int len = path.length();
     		final String ext;
     		if (ixExtension <= 0 || ixExtension == len ||
    -			(path.lastIndexOf(File.separator) + 1) == ixExtension)
    --- End diff --
    
    Check PackageResourceGuardTest:
    
    assertTrue(guard.acceptAbsolutePath(""c:\\test\\org\\apache\\.java""));
    assertTrue(guard.acceptAbsolutePath(""c:/test/org/apache/.java""));
    
    Under Win one can use both separator styles.
","12/Mar/15 08:16;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/107
",12/Mar/15 08:25;mgrigorov;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LazyInitProxyFactory causes NoClassDefFound org/apache/wicket/proxy/ILazyInitProxy in case of multimodule deployment,WICKET-5850,12779827,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,amorozov,amorozov,05/Mar/15 16:37,06/Mar/15 16:32,13/Mar/19 23:18,06/Mar/15 06:28,6.18.0,6.19.0,,,,,,,6.20.0,7.0.0-M6,,,,,,0,,,,,,,,"In case of multimodule deployment, LazyInitProxyFactory#createProxy() ends up with NoClassDefFound error while trying to wrap a class which is being injected into a Wickets component.

{code:java}
			CGLibInterceptor handler = new CGLibInterceptor(type, locator);

			Enhancer e = new Enhancer();
			e.setInterfaces(new Class[] { Serializable.class, ILazyInitProxy.class,
					IWriteReplace.class });
			e.setSuperclass(type);
			e.setCallback(handler);
			e.setNamingPolicy(new DefaultNamingPolicy()
			{
				@Override
				public String getClassName(final String prefix, final String source,
					final Object key, final Predicate names)
				{
					return super.getClassName(""WICKET_"" + prefix, source, key, names);
				}
			});

			return e.create();
{code}

As we can see, Enhancer is not configured with an context-relative classloader. This is the root of the issue.","Windows 7 Pro x64, Oracle JDK 7u45 x64, Glassfish 3 (EE6)",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-05 18:27:12.751,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Mar 06 16:32:24 UTC 2015,,,,,,0|i26epr:,9223372036854775807,,,,,,,,05/Mar/15 16:42;amorozov;I'll make PR in the nearest 7 days.,"05/Mar/15 18:27;githubbot;GitHub user shuraa opened a pull request:

    https://github.com/apache/wicket/pull/105

    WICKET-5850 Fix class loading issue in LazyInitProxyFactory

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/shuraa/wicket wicket-6.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/105.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #105
    
----
commit e00c54c310000924290476f91797a2197a756782
Author: Alexander Morozov <alexander.v.morozov@gmail.com>
Date:   2015-03-05T18:16:59Z

    WICKET-5850 Fix class loading issue in LazyInitProxyFactory in case of multimodule deployment

----
","05/Mar/15 18:28;githubbot;GitHub user shuraa opened a pull request:

    https://github.com/apache/wicket/pull/106

    WICKET-5850 Fix class loading issue in LazyInitProxyFactory

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/shuraa/wicket master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/106.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #106
    
----
commit 0ed0a786a3bbe56c5821b9293410b56511aa7ac0
Author: Alexander Morozov <alexander.v.morozov@gmail.com>
Date:   2015-03-05T18:16:59Z

    WICKET-5850 Fix class loading issue in LazyInitProxyFactory in case of multimodule deployment
    (cherry picked from commit e00c54c)

----
","06/Mar/15 06:09;jira-bot;Commit c0f187b57cb55151db775306a70c57cb3d1d3f4e in wicket's branch refs/heads/wicket-6.x from [~amorozov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c0f187b ]

WICKET-5850 Fix class loading issue in LazyInitProxyFactory in case of multimodule deployment
","06/Mar/15 06:10;jira-bot;Commit 73b8ebf87d6d21a72bfd9cd21a961e2b260f6591 in wicket's branch refs/heads/master from [~amorozov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=73b8ebf ]

WICKET-5850 Fix class loading issue in LazyInitProxyFactory in case of multimodule deployment
",06/Mar/15 06:28;svenmeier;Many thanks!,"06/Mar/15 07:52;githubbot;Github user klopfdreh commented on the pull request:

    https://github.com/apache/wicket/pull/105#issuecomment-77519903
  
    It's integrated: https://github.com/apache/wicket/commit/c0f187b57cb55151db775306a70c57cb3d1d3f4e
    
    Can be closed.
","06/Mar/15 07:53;githubbot;Github user klopfdreh commented on the pull request:

    https://github.com/apache/wicket/pull/106#issuecomment-77519983
  
    It's integrated: https://github.com/apache/wicket/commit/73b8ebf87d6d21a72bfd9cd21a961e2b260f6591
    
    Can be closed.
","06/Mar/15 10:06;jira-bot;Commit eafffd7d393e194881662b0faf3368e045c3e27c in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=eafffd7 ]

WICKET-5850 Fix formatting
","06/Mar/15 10:06;jira-bot;Commit fbde00fda83dc1f8e8c61866665d1222823a50fb in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fbde00f ]

WICKET-5850 Fix formatting

(cherry picked from commit eafffd7d393e194881662b0faf3368e045c3e27c)
","06/Mar/15 16:30;githubbot;Github user shuraa commented on the pull request:

    https://github.com/apache/wicket/pull/106#issuecomment-77588461
  
    Ok
","06/Mar/15 16:30;githubbot;Github user shuraa closed the pull request at:

    https://github.com/apache/wicket/pull/106
","06/Mar/15 16:32;githubbot;Github user shuraa closed the pull request at:

    https://github.com/apache/wicket/pull/105
",,,,,,,,,,,,,,,,,,,,,,,
Deployment of wicket-examples.war fails in Tomcat,WICKET-5825,12770701,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,,mgrigorov,mgrigorov,28/Jan/15 15:59,03/Mar/15 12:55,13/Mar/19 23:18,03/Mar/15 12:55,7.0.0-M5,,,,,,,,7.0.0-M6,,,,wicket-examples,,,0,,,,,,,,"Trying to deploy wicket-examples.war in Tomcat 7(.0.55) and 8(.0.17) fails with:

Caused by: java.lang.ClassNotFoundException: javax.validation.constraints.Pattern$Flag
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1720)
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)
	... 51 more

It seems javax-validation-api.jar should be added to the dependencies ?!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-02 09:42:17.109,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Mar 03 12:55:03 UTC 2015,,,,,,0|i24wif:,9223372036854775807,,,,,,,,"28/Jan/15 16:01;mgrigorov;At the moment ""mvn dependency:tree"" returns;
INFO] +- org.hibernate:hibernate-validator:jar:5.1.2.Final:compile
[INFO] |  +- javax.validation:validation-api:jar:1.1.0.Final:provided
","02/Mar/15 09:42;klopfdreh;Since commit:

https://github.com/apache/wicket/commit/bf118fbf67ab4d8f39aba57ddca746390eb07b8a#diff-1e12ef18fcf88b883ec6c8e33acaa471

The dependency:

<dependency>
<groupId>org.hibernate</groupId>
<artifactId>hibernate-validator</artifactId>
<version>5.1.2.Final</version>
</dependency>

has been replaced by:

<dependency>
<groupId>org.hibernate</groupId>
<artifactId>hibernate-validator</artifactId>
<scope>compile</scope>
</dependency>

Maybe just remove the scope and try again. :-)","02/Mar/15 14:03;klopfdreh;Oh, just saw that the parent declares hibernate-validator with scope test, so let it away would not solve the issue. It seems that there is an issue by overriding the scope. 

I try to fix it this afternoon.","02/Mar/15 16:00;klopfdreh;Ok, the server is providing the api 1.0.x, but because hibernate-validator has been upgraded to 5.x the dependency must be given to the project dependencies (because of new spec JSR-303 -> JSR-349):

http://stackoverflow.com/questions/14730329/jpa-2-0-exception-to-use-javax-validation-package-in-jpa-2-0

The exception is not the same, but the reason which leads to the exception is the same.

I add the validation dependency 1.1.x and we have to try it again.","02/Mar/15 16:06;githubbot;GitHub user klopfdreh opened a pull request:

    https://github.com/apache/wicket/pull/102

    WICKET-5825

    See https://issues.apache.org/jira/browse/WICKET-5825 for more information.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/klopfdreh/wicket WICKET-5825_validation

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/102.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #102
    
----
commit f8d0b587425c6e2132301bcb610313215762ecb1
Author: klopfdreh <klopfdreh@192.168.2.110>
Date:   2015-03-02T16:03:37Z

    WICKET-5825

----
","03/Mar/15 12:36;jira-bot;Commit f8d0b587425c6e2132301bcb610313215762ecb1 in wicket's branch refs/heads/master from klopfdreh
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f8d0b58 ]

WICKET-5825","03/Mar/15 12:36;jira-bot;Commit 12d98aab38ee5bdfd12a84a4905497d87fac35d5 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=12d98aa ]

Merge branch 'pr-102-WICKET-5825_validation'
","03/Mar/15 12:36;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/102
","03/Mar/15 12:55;mgrigorov;Thank you, Tobias!",,,,,,,,,,,,,,,,,,,,,,,,,,,
continueToOriginalDestination() discards new cookies,WICKET-5841,12777581,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,matbraun,matbraun,25/Feb/15 16:21,25/Feb/15 21:43,13/Mar/19 23:18,25/Feb/15 21:07,6.17.0,,,,,,,,6.20.0,7.0.0-M6,,,,,,0,,,,,,,,"When you set a cookie before calling Component.continueToOriginalDestination() the cookie is discarded and not passed to the client browser.

Example code:
new CookieUtils().save(""mycookie"", ""value"");
continueToOriginalDestination();

The cookie ""mycookie"" does not get set.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-02-25 21:05:42.837,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Feb 25 21:43:22 UTC 2015,,,,,,0|i261jz:,9223372036854775807,,,,,,,,"25/Feb/15 16:28;matbraun;Looks like this only happens if the code is called during page construct or onInitialize().
In an AJAX request setting the cookies works.

An AJAX request is not an option in my case because I'm using this for an auto-login implementation","25/Feb/15 21:05;jira-bot;Commit 0d59023763786644867bcd16c9817ef9cff638c1 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0d59023 ]

WICKET-5841 continueToOriginalDestination() discards new cookies

(cherry picked from commit 90f751dc64a6532e25da672944e1c7c7d1c4bcec)
","25/Feb/15 21:06;jira-bot;Commit 3585c68bace57fbf93bd3cad87a0a413f767167c in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3585c68 ]

WICKET-5841 continueToOriginalDestination() discards new cookies
","25/Feb/15 21:07;mgrigorov;Fixed!

Danke, Matthias!","25/Feb/15 21:37;jira-bot;Commit 5a2ca37ec2e8b1fff8592572b0080f642adb96d2 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5a2ca37 ]

WICKET-5841 Fix broken test

The test needs to use a proper request cycle to submit the form so that NonResettingRestartResponseException is handled by Wicket
","25/Feb/15 21:43;jira-bot;Commit 2f85cb6ecd725199a0b6428850c04f468e67cab6 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2f85cb6 ]

WICKET-5841 Fix broken test

The test needs to use a proper request cycle to submit the form so that NonResettingRestartResponseException is handled by Wicket

(cherry picked from commit 5a2ca37ec2e8b1fff8592572b0080f642adb96d2)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Last-modified header of external markup is ignored,WICKET-5838,12776088,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,stoal,stoal,19/Feb/15 06:57,20/Feb/15 22:15,13/Mar/19 23:18,20/Feb/15 22:15,1.5.12,,,,,,,,1.5.14,6.20.0,7.0.0-M6,,wicket,,,0,,,,,,,,"When using external base markup(in my case a drupal page with a wicket:child element in it) this markup is supposed to be cached after first fetch. For subsequent requests the last-modified header is checked to see if the markup has changed and when it has the markup is fetched again.

This does not work, Connections.getLastModified(URL url) always returns 0 when the URL is a http url(in fact, when url.openConnection returns a sun.net.www.protocol.http.HttpURLConnection.

Solution could be to not setDoInput to false on this URLConnection(tested that)
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-02-20 22:12:18.072,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 20 22:15:54 UTC 2015,,,,,,0|i25sq7:,9223372036854775807,,,,,,,,"20/Feb/15 22:12;jira-bot;Commit e93fdd5ab088d8638c5f1f58e2d337823cbcc020 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e93fdd5 ]

WICKET-5838 Last-modified header of external markup is ignored

Remove urlConnection#setDoInput(false) when checking for the last modification time of a URL.
The commit that introduced this change assumed that the URL is always pointing to a file in some .jar but this is not correct - the resource could be remote too.
","20/Feb/15 22:12;jira-bot;Commit 471b19e8ff69af18049c924c35438d5f6bb11866 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=471b19e ]

WICKET-5838 Last-modified header of external markup is ignored

Remove urlConnection#setDoInput(false) when checking for the last modification time of a URL.
The commit that introduced this change assumed that the URL is always pointing to a file in some .jar but this is not correct - the resource could be remote too.

(cherry picked from commit e93fdd5ab088d8638c5f1f58e2d337823cbcc020)
","20/Feb/15 22:12;jira-bot;Commit 1804ad34448961f9f41e7220516fb8a8fb5a4550 in wicket's branch refs/heads/wicket-1.5.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1804ad3 ]

WICKET-5838 Last-modified header of external markup is ignored

Remove urlConnection#setDoInput(false) when checking for the last modification time of a URL.
The commit that introduced this change assumed that the URL is always pointing to a file in some .jar but this is not correct - the resource could be remote too.

(cherry picked from commit e93fdd5ab088d8638c5f1f58e2d337823cbcc020)
",20/Feb/15 22:15;mgrigorov;Thanks !,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JUnit tests may fail because of AbstractDefaultAjaxBehavior,WICKET-5837,12775139,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,klopfdreh,klopfdreh,14/Feb/15 13:54,17/Feb/15 06:45,13/Mar/19 23:18,16/Feb/15 13:40,6.19.0,7.0.0-M5,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,test,,,,,,,"Because JSONObject is used in the method org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.renderAjaxAttributes(Component, AjaxRequestAttributes)
which internally uses a HashMap to store the key value pairs - see org.apache.wicket.ajax.json.JSONObject.JSONObject() - it is not ensured the attributes rendered in a specific order. This can cause the unit tests to pass in one run and fail in the next run.

One suggestion would be to switch the HashMap and replace it with at LinkedHashMap to preserve the insertion order.

See stack trace in comment.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-02-14 14:34:34.464,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Feb 17 06:45:12 UTC 2015,,,,,,0|i25n3b:,9223372036854775807,,,,,,,,"14/Feb/15 13:56;klopfdreh;junit.framework.ComparisonFailure: org/apache/wicket/ajax/AjaxHeaderContributionPage_expected.html expected:<...
Wicket.Ajax.ajax({""[u"":""./org.apache.wicket.ajax.AjaxHeaderContributionPage?0-1.IBehaviorListener.0-link"",""e"":""click"",""c"":""link1]""});;
Wicket.Event.p...> but was:<...
Wicket.Ajax.ajax({""[c"":""link1"",""u"":""./org.apache.wicket.ajax.AjaxHeaderContributionPage?0-1.IBehaviorListener.0-link"",""e"":""click]""});;
Wicket.Event.p...>
	at junit.framework.Assert.assertEquals(Assert.java:85)
	at org.apache.wicket.util.tester.DiffUtil.validatePage(DiffUtil.java:160)
	at org.apache.wicket.util.tester.WicketTester.assertResultPage(WicketTester.java:590)
	at org.apache.wicket.ajax.AjaxHeaderContributionTest.ajaxHeaderContribution(AjaxHeaderContributionTest.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
",14/Feb/15 14:15;klopfdreh;I'm currently working on it - seems to be a small bit more then only changing the HashMap to LinkedHashMap but I investigate it.,"14/Feb/15 14:32;klopfdreh;Ok, nearly finished. I'm going to open a pull request.",14/Feb/15 14:34;bitstorm;Thank you once again Tobias!,"14/Feb/15 15:00;githubbot;GitHub user klopfdreh opened a pull request:

    https://github.com/apache/wicket/pull/90

    WICKET-5837 JUnit tests may fail because of AbstractDefaultAjaxBehavior

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/klopfdreh/wicket WICKET-5837

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/90.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #90
    
----
commit 53566ad3b189c1f018a527b7a53345f5c0b14679
Author: klopfdreh <klopfdreh@192.168.2.110>
Date:   2015-02-14T14:57:18Z

    WICKET-5837 JUnit tests may fail because of AbstractDefaultAjaxBehavior

----
","14/Feb/15 15:08;githubbot;Github user klopfdreh commented on the pull request:

    https://github.com/apache/wicket/pull/90#issuecomment-74378512
  
    Linked ticket: https://issues.apache.org/jira/browse/WICKET-5837
","14/Feb/15 15:10;githubbot;GitHub user klopfdreh opened a pull request:

    https://github.com/apache/wicket/pull/91

    WICKET-5837 JUnit tests may fail because of AbstractDefaultAjaxBehavior

    little adjustment for master

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/klopfdreh/wicket WICKET-5837-master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/91.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #91
    
----
commit 5445d7c6171d980a8bc1344005a2709ae748aad0
Author: klopfdreh <klopfdreh@192.168.2.110>
Date:   2015-02-14T15:09:33Z

    WICKET-5837 JUnit tests may fail because of AbstractDefaultAjaxBehavior

----
","14/Feb/15 15:14;klopfdreh;For Wicket 7.0.0-M5 the work was already done. The JSONObject in there already uses a LinkedHashMap. The changes are also made for Wicket 6.19.0, now. I also fixed the JUnit test for MultiFileUploadFieldTest in the Wicket 6.19.0 commit.

Edit: Forgot to say that I applied a little change to 7.0.0-M5 so that an JSONObject created based on a Map also uses a LinkedHashMap.","14/Feb/15 15:16;githubbot;Github user klopfdreh commented on the pull request:

    https://github.com/apache/wicket/pull/91#issuecomment-74378760
  
    Linked ticket: https://issues.apache.org/jira/browse/WICKET-5837
","15/Feb/15 13:55;githubbot;Github user bitstorm commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/90#discussion_r24722572
  
    --- Diff: wicket-core/src/main/java/org/apache/wicket/ajax/AbstractDefaultAjaxBehavior.java ---
    @@ -233,12 +246,6 @@ protected final CharSequence renderAjaxAttributes(final Component component,
     				attributesJson.put(AjaxAttributeName.MARKUP_ID.jsonName(), componentId);
     			}
     
    --- End diff --
    
    I'm just curious...why have you moved the 5 lines below at the beginning of the method (line 223)?
","15/Feb/15 15:51;githubbot;Github user klopfdreh commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/90#discussion_r24723488
  
    --- Diff: wicket-core/src/main/java/org/apache/wicket/ajax/AbstractDefaultAjaxBehavior.java ---
    @@ -233,12 +246,6 @@ protected final CharSequence renderAjaxAttributes(final Component component,
     				attributesJson.put(AjaxAttributeName.MARKUP_ID.jsonName(), componentId);
     			}
     
    --- End diff --
    
    Because the Unit Tests check the Order of the Parameter 
","15/Feb/15 20:34;jira-bot;Commit 9240b8ab99ae56afad7de0d42aa4dcafce595c49 in wicket's branch refs/heads/master from klopfdreh
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9240b8a ]

WICKET-5837 JUnit tests may fail because of AbstractDefaultAjaxBehavior
","15/Feb/15 21:06;githubbot;Github user bitstorm commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/90#discussion_r24726057
  
    --- Diff: wicket-core/src/test/java/org/apache/wicket/markup/html/form/upload/MultiFileUploadFieldTest.java ---
    @@ -63,13 +64,16 @@ protected void onSubmit()
     				for (int i = 1; i < 2; i++)
     				{
     					FileUpload fileUpload = uploads.get(i);
    -					assertEquals(MultiFileUploadFieldTest.class.getSimpleName()+i+"".txt"", fileUpload.getClientFileName());
    +					assertEquals(MultiFileUploadFieldTest.class.getSimpleName() + (i - 1) + "".txt"",
    --- End diff --
    
    There's a problem with '(i - 1)'. I've reverted it to simply 'i' and test passes with success.  Can you confirm that this change is not necessary?
","15/Feb/15 21:43;klopfdreh;I run the test with i-1 and it was success, but maybe the code at this place changed a bit. So if it passing revert it.

Thanks a lot!","15/Feb/15 21:59;githubbot;Github user klopfdreh commented on the pull request:

    https://github.com/apache/wicket/pull/90#issuecomment-74439535
  
    I run the test with i-1 and it was success, but maybe the code at this place changed a bit. So if it passing revert it.
    
    Thanks a lot!
","15/Feb/15 22:00;githubbot;Github user klopfdreh commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/90#discussion_r24726639
  
    --- Diff: wicket-core/src/test/java/org/apache/wicket/markup/html/form/upload/MultiFileUploadFieldTest.java ---
    @@ -63,13 +64,16 @@ protected void onSubmit()
     				for (int i = 1; i < 2; i++)
     				{
     					FileUpload fileUpload = uploads.get(i);
    -					assertEquals(MultiFileUploadFieldTest.class.getSimpleName()+i+"".txt"", fileUpload.getClientFileName());
    +					assertEquals(MultiFileUploadFieldTest.class.getSimpleName() + (i - 1) + "".txt"",
    --- End diff --
    
    I run the test with i-1 and it was success, but maybe the code at this place changed a bit. So if it passing revert it.
    
    Thanks a lot!
","15/Feb/15 22:01;githubbot;Github user klopfdreh commented on the pull request:

    https://github.com/apache/wicket/pull/91#issuecomment-74439630
  
    Integrated - thanks a lot!
","15/Feb/15 22:01;githubbot;Github user klopfdreh closed the pull request at:

    https://github.com/apache/wicket/pull/91
","15/Feb/15 22:02;jira-bot;Commit 1a6f1bde1a6b576f39bf6fd6d5129d577319c2a7 in wicket's branch refs/heads/wicket-6.x from klopfdreh
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1a6f1bd ]

WICKET-5837 JUnit tests may fail because of AbstractDefaultAjaxBehavior
","16/Feb/15 17:11;githubbot;Github user klopfdreh commented on the pull request:

    https://github.com/apache/wicket/pull/90#issuecomment-74541335
  
    @bitstorm - everything ok with this PR - or should I change something?
    
    There are two ways to proceed - one is to change all 14 unit tests and the other is to change the order of the parameters at the central place.
","16/Feb/15 23:00;githubbot;Github user bitstorm commented on the pull request:

    https://github.com/apache/wicket/pull/90#issuecomment-74585821
  
    actually I have already applied your commit to 6.x (hash 1a6f1bde1a6b576f39bf6fd6d5129d577319c2a7 ). So now its ok. I forgot to notify you about it.
","17/Feb/15 06:45;githubbot;Github user klopfdreh commented on the pull request:

    https://github.com/apache/wicket/pull/90#issuecomment-74624272
  
    Ah ok! :-) - thanks a lot - so I'm closing this PR, now!
","17/Feb/15 06:45;githubbot;Github user klopfdreh closed the pull request at:

    https://github.com/apache/wicket/pull/90
",,,,,,,,,,,,,
NPE in DefaultPropertyResolver,WICKET-5834,12773762,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,papegaaij,papegaaij,10/Feb/15 10:38,10/Feb/15 10:50,13/Mar/19 23:18,10/Feb/15 10:50,6.19.0,,,,,,,,6.20.0,7.0.0-M6,,,wicket-bean-validation,,,0,,,,,,,,"The fix for WICKET-5811 causes the following NPE if no model can be found:
{code}
java.lang.NullPointerException
	at org.apache.wicket.bean.validation.DefaultPropertyResolver.resolveProperty(DefaultPropertyResolver.java:27)
	at org.apache.wicket.bean.validation.BeanValidationConfiguration.resolveProperty(BeanValidationConfiguration.java:165)
	at nl.topicus.cobra.web.components.form.AutoFieldSet.addBeanValidator(AutoFieldSet.java:483)
	at nl.topicus.cobra.web.components.form.AutoFieldSet.postProcessValidators(AutoFieldSet.java:440)
	at nl.topicus.cobra.web.components.form.AutoFieldSet.onBeforeRenderApply(AutoFieldSet.java:391)
	at nl.topicus.cobra.web.components.form.AutoFieldSet.onBeforeRender(AutoFieldSet.java:321)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-02-10 10:49:17.65,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Feb 10 10:49:47 UTC 2015,,,,,,0|i25ezz:,9223372036854775807,,,,,,,,"10/Feb/15 10:49;jira-bot;Commit 013a56ae3cd59e63caae180072040a03f3e10385 in wicket's branch refs/heads/wicket-6.x from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=013a56a ]

WICKET-5834: return null, no model means no property
","10/Feb/15 10:49;jira-bot;Commit bd577a413cfcec88eb05c7e3917b5781c168bae6 in wicket's branch refs/heads/master from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bd577a4 ]

WICKET-5834: return null, no model means no property
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Infinite loop issue in PropertyValidator#createUnresolvablePropertyMessage(FormComponent<>) ,WICKET-5811,12768419,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,amorozov,amorozov,19/Jan/15 11:15,10/Feb/15 10:39,13/Mar/19 23:18,19/Jan/15 14:20,6.18.0,7.0.0-M4,,,,,,,6.19.0,7.0.0-M5,,,wicket-bean-validation,,,0,,,,,,,,"In case of trivial model, attached to a FormComponent, PropertyValidator#createUnresolvablePropertyMessage(FormComponent<>) has no chances to find suitable model and falls into infinite loop.

{code}
		IModel<?> model = component.getModel();
		// Code sadly copied over from DefaultPropertyResolver
		while (true)
		{
			if (model == null)
			{
				break;
			}
			if (model instanceof IPropertyReflectionAwareModel)
			{
				break;
			}
			if (model instanceof IWrapModel<?>)
			{
				model = ((IWrapModel<?>)model).getWrappedModel();
				continue;
			}
                        // FIXME issue is here
		}
{code}","Windows Pro x64, Oracle JDK 7u72",,,,,,,,,,,,,,,,,,,,WICKET-5834,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-19 14:19:22.061,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jan 19 14:20:04 UTC 2015,,,,,,0|i24ipz:,9223372036854775807,,,,,,,,"19/Jan/15 11:36;amorozov;PR https://github.com/apache/wicket/pull/83 and https://github.com/apache/wicket/pull/84
","19/Jan/15 14:19;jira-bot;Commit 7acdaaf25cb3eaf5533c400bee9544b85169b5cf in wicket's branch refs/heads/master from [~amorozov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7acdaaf ]

WICKET-5811 Fix issue with infinite loop in PropertyValidator#createUnresolvablePropertyMessage(FormComponent<>) in case or trivial model (new Model<>(...));
(cherry picked from commit 5fe2682)
","19/Jan/15 14:19;jira-bot;Commit 5fe26827a24f4e4eb1a64a96aa0df8f8558b84e7 in wicket's branch refs/heads/wicket-6.x from [~amorozov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5fe2682 ]

WICKET-5811 Fix issue with infinite loop in PropertyValidator#createUnresolvablePropertyMessage(FormComponent<>) in case or trivial model (new Model<>(...));
","19/Jan/15 14:20;mgrigorov;PRs are merged!
Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VariableInterpolator & #getThrowExceptionOnMissingResource,WICKET-5790,12762543,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,sebfz1,sebfz1,18/Dec/14 12:06,07/Feb/15 17:08,13/Mar/19 23:18,07/Feb/15 15:28,6.18.0,7.0.0-M4,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"This ticket is a 2 in 1 issue:

h4. #getThrowExceptionOnMissingResource() is given as VariableInterpolator ctor arg.

When you want to raise a validation error like:
{code:java}
            ValidationError error = new ValidationError();
            error.addKey(""MyComponent.ConversionError"");
            error.setVariable(""myvar"", myvalue);

            this.error(error);
{code}

A call is made to FormComponent.MessageSource.substitute which returns {{new VariableInterpolator(...).toString()}}

The second arg to VariableInterpolator is meant for ""exceptionOnNullVarValue"" but what is supplied in #substitute() is {{Application.get().getResourceSettings().getThrowExceptionOnMissingResource().}}

That's where it looks strange because #getThrowExceptionOnMissingResource() represents a flag about missing resources (like _MyComponent.properties_) and has nothing related to null values in my understanding.

h4. ${var} is not replaced in case of null value (and null is allowed)
In the previous example, if *#getThrowExceptionOnMissingResource()* return *false* (meaning *exceptionOnNullVarValue* is *false*) and *myvalue* is *null*, the validation error message gives something of the form ""value of myvar: ${myvar}"" instead of ""value of myvar: null"".",,,,,,,,,,,,,,,,,,,,,,,,,18/Dec/14 12:08;sebfz1;WICKET-5790.zip;https://issues.apache.org/jira/secure/attachment/12688021/WICKET-5790.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2015-02-06 11:56:22.102,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Feb 07 17:08:41 UTC 2015,,,,,,0|i23kj3:,9223372036854775807,,,,,,,,18/Dec/14 12:08;sebfz1;Attached quickstart,"18/Dec/14 12:52;sebfz1;About point 2/ (variable patten not replaced). It seems to have been done intentionally in VariableInterpolator
https://github.com/apache/wicket/blob/master/wicket-util/src/main/java/org/apache/wicket/util/string/interpolator/VariableInterpolator.java#L163

But, as #substitute is private and there is no factory method for creating the VariableInterpolator, I think we can change in #substitute
https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java#L218

{code:java}
if (value == null)
{
	return null;
}
else if (value instanceof String)
{
	// small optimization - no need to bother with conversion
	// for String vars, e.g. {label}
	return (String)value;
}
{code}
by
{code:java}
if (value == null || value instanceof String)
{
	return String.valueOf(value);
}
{code}

",06/Feb/15 11:56;bitstorm;Honestly I don't have any idea about point 1 :-/. But I agree with the proposed improvement for point 2.,"07/Feb/15 14:28;jira-bot;Commit 1ddb483f0338b41f9b89909f167ce7cb463d2fc8 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1ddb483 ]

WICKET-5790 VariableInterpolator & #getThrowExceptionOnMissingResource","07/Feb/15 15:28;jira-bot;Commit 0f18f9340aafda92603193d77d9a865f3ff61f31 in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0f18f93 ]

WICKET-5790 VariableInterpolator & #getThrowExceptionOnMissingResource
","07/Feb/15 15:55;sebfz1;Hi Andrea,

Thank you very much for the fix. 

I saw you marked this ticket as resolved. Sorry to not have replied earlier but I have still some concerns about point 1/.
""Missing Resource"" and ""null var value"" have different meaning to me.
But I would see 2 (or 3) ways of solving this, either:

a/ Adding a new ResourceSettings properties that will replace #getThrowExceptionOnMissingResource call in VariableInterpolator call (something like getThrowExceptionOnNullVarValue)
b/ Having a factory method: FormComponent#newVariableInterpolator(String string, boolean throwExceptionOnMissingResource). This way the user can override it to call super just changing the boolean value
c/ A mix of a/ and b/, giving FormComponent#newVariableInterpolator(String string, boolean throwExceptionOnNullVarValue). But maybe is it a little bit overkill...

The cons of a/ is that it might induce a silent api break, except if default value returns #getThrowExceptionOnMissingResource. Furthermore adding a new ResourceSettings properties leads to a little bit more of complicity in term of settings configuration, and finally we should ensure that it is used where it is suppose to be (I've quickly checked and I do not see other potential usage other than VariableInterpolator call yet)

My 2 cents! :)
 
Thanks & best regards,
Sebastien

","07/Feb/15 16:28;bitstorm;You're welcome!

IMHO the best solution would be a/. This would solve any ambiguity with API methods name. Strictly speaking introducing a new setting flag is not an API break for Wicket 7 as it doesn't cause any compilation problem for code written before this change. On the contrary this is not acceptable for 6.x as it uses an interface for settings (IResourceSettings). Personally I would apply a/ to 7 and leave 6.x as it is, but we'd better ask dev list for more opinions.   ","07/Feb/15 17:08;sebfz1;Hi Andrea,

> Strictly speaking introducing a new setting flag is not an API break for Wicket 7 as it doesn't cause any compilation problem

Right, that's the reason why I call this a ""silent api break"": it does not cause any compilation problem but it silently breaks the functionality. (in this case, except if #getThrowExceptionOnMissingResource is returned as a default value, to be discussed). It was just to be clear on the semantic (a quick Google search indicates that this term seems to be widely used.... by 3 or 4 people in the world!.. :s)

I agree with you for opting for a/. That's the cleanest way IMHO... I will vote in that sense.

Thanks & talk to you soon,
Sebastien",,,,,,,,,,,,,,,,,,,,,,,,,,,,
PageProvider not serializable,WICKET-5828,12772681,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,Taag,Taag,05/Feb/15 12:18,06/Feb/15 20:19,13/Mar/19 23:18,06/Feb/15 20:19,7.0.0-M4,,,,,,,,7.0.0-M6,,,,,,,0,,,,,,,,"Creating an InlineFrame for a Page gives ObjectCheckException: The object type is not Serializable! 

The PageProvider is not serializable.

InlineFrame iframe = new InlineFrame( ""iframe"", new Page(){});
add( iframe );
should be enough to reproduce it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-02-05 12:41:30.153,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 06 20:18:37 UTC 2015,,,,,,0|i258gf:,9223372036854775807,,,,,,,,"05/Feb/15 12:41;klopfdreh;I checked this ticket - the PageProvider can be set to transient to solve this issue:

private transient final IPageProvider pageProvider;","05/Feb/15 12:45;mgrigorov;What if the page is loaded from the page storage (disk) ? 
This will break with NullPointerException.","05/Feb/15 12:49;klopfdreh;Mh, I think the PageProvider itself should not be serialized, but the code of the PageProvider is executed and loads the page from disk - or am I wrong?

Code in which the pageProvider is used:

	@Override
	public final void onLinkClicked()
	{
		setResponsePage(pageProvider.getPageInstance());
	}","05/Feb/15 12:57;mgrigorov;Flow:
- PageA has InlineFrame
- the user navigates from PageA, to PageB, ..., to PageX
- then the user navigates back to PageA
- PageA is loaded from the disk
- #onComponentTag() is executed on every render, so #onLinkClicked() is executed and => NPE","05/Feb/15 13:06;klopfdreh;Thanks for the explanation, then set org.apache.wicket.core.request.handler.PageProvider to:

public class PageProvider implements IPageProvider, IClusterable with a default serializable id.

I checked the class attributes. They are all serializable / clusterable.
","05/Feb/15 13:28;Taag;Just tried to implement my own PageProvider like explained above, and that worked as expected =)","05/Feb/15 13:34;mgrigorov;It is a bad practice one page to keep a reference to another page.
It will be PageA->PageProvider->PageForInlineFrame, if PageProvider is used with https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageProvider.java#L149. ",05/Feb/15 13:39;svenmeier;Why not declare pageInstance as transient? The pageId should be sufficient to restore the page instance after deserialization.,"05/Feb/15 13:42;klopfdreh;[~martin-g] Jep thats true, because of circular dependencies. You are right.
","05/Feb/15 13:51;mgrigorov;I've expected this suggestion! 
Just waited Tobias to make it :-)
I see no problems with it.","05/Feb/15 14:34;klopfdreh;Mh, I feel tricked, now ;-) - so PR or a commit from you?","06/Feb/15 19:44;githubbot;GitHub user klopfdreh opened a pull request:

    https://github.com/apache/wicket/pull/89

    WICKET-5828 PageProvider not serializable

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/klopfdreh/wicket WICKET-5828

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/89.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #89
    
----
commit b7630fd160e6e710f1ed7cae72c65758b926d9ce
Author: klopfdreh <klopfdreh@tobiass-mbp>
Date:   2015-02-06T19:40:13Z

    WICKET-5828 PageProvider not serializable

----
",06/Feb/15 19:48;klopfdreh;*click* ;-),"06/Feb/15 20:18;jira-bot;Commit b7630fd160e6e710f1ed7cae72c65758b926d9ce in wicket's branch refs/heads/master from klopfdreh
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b7630fd ]

WICKET-5828 PageProvider not serializable","06/Feb/15 20:18;jira-bot;Commit 5c42e992b0cffbdd1e65cb7dbdf5633b156bb5b9 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5c42e99 ]

Merge branch 'WICKET-5828' of https://github.com/klopfdreh/wicket into pr-89-WICKET-5828
","06/Feb/15 20:18;jira-bot;Commit 5c42e992b0cffbdd1e65cb7dbdf5633b156bb5b9 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5c42e99 ]

Merge branch 'WICKET-5828' of https://github.com/klopfdreh/wicket into pr-89-WICKET-5828
","06/Feb/15 20:18;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/89
","06/Feb/15 20:18;githubbot;Github user martin-g commented on the pull request:

    https://github.com/apache/wicket/pull/89#issuecomment-73305327
  
    Thank you, Tobias!
",,,,,,,,,,,,,,,,,,
Request for static resource creating a session in 6.13.0+,WICKET-5793,12763562,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,chrisc,chrisc,23/Dec/14 21:49,31/Jan/15 01:36,13/Mar/19 23:18,14/Jan/15 21:48,6.13.0,7.0.0-M4,,,,,,,6.19.0,7.0.0-M5,,,wicket,,,0,searchengines,seo,session,,,,,"Up to version 6.12.0 we were not seeing any session being established when static resources were being requested - which is desirable because often search engines will hit thousands of times a day and most don't use cookies or session rewriting so we end up creating a new session for every static resource request that a search engine makes and that just blows out the number of sessions.
 
We use:


    // Use message digest over resource content for resource caching
    // cache the version information for the lifetime of the application
    IResourceVersion resourceVersion = new CachingResourceVersion(new MessageDigestResourceVersion());
 
    // cache resource with a version string in the filename
    IResourceCachingStrategy cachingStrategy =
            new
FilenameWithVersionResourceCachingStrategy(""-ver-static-"",
resourceVersion);
    
    resourceSettings.setCachingStrategy(cachingStrategy);
 
and this worked fine up to version 6.12.0 where the code for FilenameWithVersionResourceCachingStrategy.decorateReponse was:
 
            /**
             * set resource caching to maximum and set cache-visibility to 'public'
             * 
             * @param response
             */
            @Override
            public void
decorateResponse(AbstractResource.ResourceResponse response, IStaticCacheableResource resource)
            {
                        response.setCacheDurationToMaximum();
 
response.setCacheScope(WebResponse.CacheScope.PUBLIC);
            }
 
Unfortunately in 6.13.0+ this code became:
 
            /**
             * set resource caching to maximum and set cache-visibility to 'public'
             * 
             * @param response
             */
            @Override
            public void
decorateResponse(AbstractResource.ResourceResponse response, IStaticCacheableResource resource)
            {
                        String requestedVersion = RequestCycle.get().getMetaData(URL_VERSION);
---- >                 String calculatedVersion =
this.resourceVersion.getVersion(resource);     < ------------
                        if (calculatedVersion != null &&
calculatedVersion.equals(requestedVersion))
                        {
 
response.setCacheDurationToMaximum();
 
response.setCacheScope(WebResponse.CacheScope.PUBLIC);
                        }
            }
 
So the line marked above calls code that always creates a new session.
You can see the stack of this scenario below:
 
        at
com.sas.av.ui.wicket.templates.WicketModelExposerApplication.newSession(
WicketModelExposerApplication.java:157)
        at
org.apache.wicket.Application.fetchCreateAndSetSession(Application.java:
1569)
        at org.apache.wicket.Session.get(Session.java:171)
        at
org.apache.wicket.request.resource.PackageResource.getCurrentStyle(Packa
geResource.java:192)
        at
org.apache.wicket.request.resource.PackageResource.getCacheableResourceS
tream(PackageResource.java:398)
        at
org.apache.wicket.request.resource.PackageResource.getCacheKey(PackageRe
source.java:230)
        at
org.apache.wicket.request.resource.caching.version.CachingResourceVersio
n.getVersion(CachingResourceVersion.java:100)
        at
org.apache.wicket.request.resource.caching.FilenameWithVersionResourceCa
chingStrategy.decorateResponse(FilenameWithVersionResourceCachingStrateg
y.java:200)
 
PackageResource.getCurrentStyle() seems to be the culprit.

Does wicket really need to create a session when a static resource is requested? 
 
I hope the answer is no because I think the 6.12.0 approach worked well because it did not create a new session for each static request from a search engine.
 
Martijn-G said in email group:
{quote}
It creates a temporary Wicket Session, no http session but it could be avoided.
{quote}

We end up doing a lot of work in the WicketSession because it is an object and it's typed and we can extend it to hold any interesting pieces we need, such as a reference to the current User object etc.,
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-03 20:49:02.196,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Jan 31 01:36:52 UTC 2015,,,,,,0|i23qpz:,9223372036854775807,,,,,,,,"03/Jan/15 20:49;bitstorm;{quote}
Martijn-G said in email group:
    {quote}
    It creates a temporary Wicket Session, no http session but it could be avoided.
    {quote}
We end up doing a lot of work in the WicketSession because it is an object and it's typed and we can extend it to hold any interesting pieces we need, such as a reference to the current User object etc.,
{quote}

As Martin said this shouldn't be a problem *per se* as the lifespan of a temporary session is equal to the one of the current request (in our case the request for a static resource). Hence you shouldn't see an explosion of the number of open session. Maybe your custom Session becomes permanent by default (does it call Session#bind() ? ).","03/Jan/15 21:46;chrisc;We have code in our override of WebApplication.newSession that we expected would not be called for static resources - and indeed wasn't up to 6.12.0 - but since 6.13.0 is. The code assumes that if newSession is called that it should perform all kinds of determination of cookies, current user, traffic statistics etc., which is all pretty much a waste of CPU and other resources when simply serving a static resource. Some of this code assumes that if newSession is being called that a Servlet session is also present.

Apache webserver is more efficient at serving static resources than a servlet container like Apache Tomcat and so I was thinking that reducing any extra processing on top of the processing that the servlet container already does when serving static resources would help make serving static resources more efficient.","14/Jan/15 21:36;jira-bot;Commit b78aedb09bce8e10d0970aa1746cc1d9da1e5878 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b78aedb ]

WICKET-5793 Request for static resource creating a session in 6.13.0+","14/Jan/15 21:43;jira-bot;Commit 160c0f64356da6f66cff33101fe59e2f7b355da3 in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=160c0f6 ]

WICKET-5793 Request for static resource creating a session in 6.13.0+
",14/Jan/15 21:47;bitstorm;Added a check inside PackageResource.getCurrentStyle() and PackageResource.getCurrentLocale() to see if we have already a session. Couldn't find a better solution.,"31/Jan/15 01:36;chrisc;Confirmed this fix is working. We no longer have a session created for static resource requests.

Thanks for your quick response.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxSelfUpdatingTimer stops working after ajax download,WICKET-5822,12770598,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,elvis.ciocoiu,elvis.ciocoiu,28/Jan/15 06:41,30/Jan/15 10:45,13/Mar/19 23:18,30/Jan/15 10:45,6.18.0,,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"I've encountered a strange behavior related to AjaxSelfUpdatingTimerBahavior. It triggers normally until I click a link that downloads a dynamic resource. The ajax download link is constructed using the recommendations from:

https://cwiki.apache.org/confluence/display/WICKET/AJAX+update+and+file+download+in+one+blow

The problem seems to be related to:
target.appendJavaScript(""setTimeout(\""window.location.href='""
+ url + ""'\"", 100);""); 
from ajax download initiate, but if i comment it the download doesn't work
anymore.",Linux,,,,,,,,,,,,,,,,,,,,,,,,28/Jan/15 06:44;elvis.ciocoiu;timer test.zip;https://issues.apache.org/jira/secure/attachment/12694929/timer+test.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2015-01-30 09:10:36.897,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jan 30 10:45:33 UTC 2015,,,,,,0|i24vvj:,9223372036854775807,,,,,,,,28/Jan/15 06:44;elvis.ciocoiu;A sample page to reproduce the problem,"30/Jan/15 09:10;svenmeier;wicket-ajax-query.js clears all timers on ""beforeunload"" - initiating the download will trigger this event, although the page is never left.","30/Jan/15 09:21;mgrigorov;This is to prevent memory leaks.
There is no way how to detect with JS whether the page is really left/closed :-/

I wonder whether window.open() could be used instead of location.href for setting the download url ?
This should keep the current page state. 
The question is when/how to close the new window after the download. Maybe setTimeout(function() {downloadWindow.close()}, 100) will do the job ?","30/Jan/15 09:29;svenmeier;What's the reason you didn't use ""unload"" instead? Do you see a memory leak problem with that?

JavaScript event handlers have the ability to stop unloading from ""beforeunload"". It wouldn't be nice to lose all timers on the page, just because a confirmation popup returns false.

I just tried ""unload"" instead on Firefox, this seems to work fine.","30/Jan/15 09:34;mgrigorov;AFAIR the support for ""unload"" differs in the browsers. ""beforeunload"" is more consistent.
If using ""unload"" works also in IE and Chrome then change it!","30/Jan/15 09:53;svenmeier;To my knowledge it is ""beforeunload"" which had mixed support on browser:

https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers.onbeforeunload
https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers.onunload","30/Jan/15 10:15;reiern70;By the way:

https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js#L2830

Wouldn't it be nicer to have a generic way for components register beforeunload JS handlers? and for other events? So, that handling of timers remove is just part of something more general/abstract? e.g. there where also some memory leaks with YUI date pickers... They could be handled by the same machinery ","30/Jan/15 10:38;svenmeier;I don't know how that could be improved into something more abstract, but go ahead an suggest something ;)","30/Jan/15 10:41;jira-bot;Commit 5f1a816768cfc143ba84a8e1d74c44b374663be7 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5f1a816 ]

WICKET-5822 use unload instead of beforeunload, so timers are not cleared when browser downloads a file
","30/Jan/15 10:42;jira-bot;Commit f17820482841d1440db2c2229d5736e8daec3351 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f178204 ]

WICKET-5822 use unload instead of beforeunload, so timers are not cleared when browser downloads a file
","30/Jan/15 10:45;svenmeier;Now using ""unload"" instead.",,,,,,,,,,,,,,,,,,,,,,,,,
Wicket-JMX should depend on asm-util,WICKET-5817,12769100,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,21/Jan/15 20:34,21/Jan/15 20:36,13/Mar/19 23:18,21/Jan/15 20:35,7.0.0-M4,,,,,,,,7.0.0-M5,,,,wicket-jmx,,,0,,,,,,,,"Trying to start an application that depends on wicket-jmx fails with:

 java.lang.NoClassDefFoundError: org/objectweb/asm/Type
        at net.sf.cglib.core.TypeUtils.parseType(TypeUtils.java:184)
        at net.sf.cglib.core.KeyFactory.<clinit>(KeyFactory.java:66)
        at net.sf.cglib.proxy.Enhancer.<clinit>(Enhancer.java:69)
        at org.apache.wicket.jmx.Initializer.createProxy(Initializer.java:256)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-21 20:36:06.103,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jan 21 20:36:06 UTC 2015,,,,,,0|i24mun:,9223372036854775807,,,,,,,,"21/Jan/15 20:36;jira-bot;Commit a13482896e06f7ae7b9ad95ba40923b71aa285ca in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a134828 ]

WICKET-5817 Wicket-JMX should depend on asm-util
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AtmosphereBehavior wrongly sets Ajax base url to '.',WICKET-5812,12768449,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,19/Jan/15 14:10,19/Jan/15 15:58,13/Mar/19 23:18,19/Jan/15 14:11,6.18.0,,,,,,,,6.19.0,7.0.0-M5,,,wicket-atmosphere,,,0,,,,,,,,AtmosphereBehavior should use requestCycle.getUrlRenderer().getBaseUrl() ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-19 14:10:44.292,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jan 19 14:10:57 UTC 2015,,,,,,0|i24iwn:,9223372036854775807,,,,,,,,"19/Jan/15 14:10;jira-bot;Commit 4e39ebdb3a8d8e15284dfd7c7be7251758179bdb in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4e39ebd ]

WICKET-5812 AtmosphereBehavior wrongly sets Ajax base url to '.'
","19/Jan/15 14:10;jira-bot;Commit 24c8c5d277fd8b481b245d8b60efe3c2932fba51 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=24c8c5d ]

WICKET-5812 AtmosphereBehavior wrongly sets Ajax base url to '.'

(cherry picked from commit 4e39ebdb3a8d8e15284dfd7c7be7251758179bdb)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ModalWindow is not visible in Safari when opened from a link at the bottom of a large page,WICKET-5224,12652222,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,ivaynberg,jeredm@maplewoodsoftware.com,jeredm@maplewoodsoftware.com,11/Jun/13 15:25,16/Jan/15 18:51,13/Mar/19 23:18,14/Jun/14 11:46,6.15.0,6.8.0,,,,,,,6.13.0,7.0.0-M1,,,wicket-extensions,,,0,,,,,,,,"I am not able to see a ModalWindow in Safari and I expect to see it centered on my view port.

Steps:
1. Start with a large web page with a link to open the ModalWindow at the bottom of the page.  You need a large page where you have to scroll down to find the link.
2. Click the link
3. Observe that the mask for the ModalWindow displays, but the ModalWindow does not.  Scrolling back up, re-sizing, and maximizing will still not display the ModalWindow.","Safari 5.1.7 (7534.57.2) Windows, Safari (iOS 6.1.3)",3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,11/Jun/13 16:38;jeredm@maplewoodsoftware.com;safariscroll.zip;https://issues.apache.org/jira/secure/attachment/12587252/safariscroll.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-25 14:32:41.989,,,no_permission,,,,,,,,,,,,332546,,,Fri Jan 16 18:51:28 UTC 2015,,,,,,0|i1ld8n:,332875,,,,,,,,"11/Jun/13 16:44;jeredm@maplewoodsoftware.com;When I remove the patch in WICKET-4948 on line 486 in modal.js, the problem seems to be resolved.  I do not have a way to test on the Mac version of Safari.  I am using Safari 5.1.7 on Windows.","17/Jun/13 17:23;jeredm@maplewoodsoftware.com;I replicated this problem with an iPad (iOS 6.1.3) with Safari.  There is a difference from my Windows Safari tests, in that I am able to see the ModalWindow when I scroll to the top of the page and then rapidly scroll back down to the bottom of the page.  As soon as the window stops scrolling, the modal seems to move down out of site again...so the modal seems to move with the scroll bar.","24/Jul/13 14:56;jeredm@maplewoodsoftware.com;Has anybody been able to look into this yet?  It is holding back a release for me as my application depends on the ModalWindow being available for Safari users.  I can do a custom Wicket build and patch by removing the fix for WICKET-4948, but I would rather not do that if this is going to be addressed soon.",25/Jul/13 14:32;mgrigorov;[~ivaynberg] Ping,"27/Jul/13 05:05;ivaynberg;confirmed, safari mustve changed its behavior between than and now",29/Jul/13 15:38;jeredm@maplewoodsoftware.com;The quickstart passes now.  Thanks!,10/Dec/13 16:50;ivaynberg;looks like this issue is back :/,"10/Dec/13 17:05;ivaynberg;reverted the revert, seems to have fixed it.",07/May/14 12:20;lukedjn;The supplied quickstart is broken when using Wicket 6.13.0. I have tested this in Safari on iOS 6 and 7 and Mac OS X. Reverting the changes made by [~ivaynberg] (https://github.com/apache/wicket/commit/61ebe2dbd55ff2ff5ac6f73909708021bb1acf4d) fixes the problem. ,"13/Jun/14 15:01;jeredm@maplewoodsoftware.com;[~ivaynberg],
I can confirm that this bug is replicating again in 6.13.0.  I also tested in Wicket 6.15.0 and the bug replicates.  Is it possible to get a fix for this in 6.16.0?","14/Jun/14 11:46;mgrigorov;Please follow WICKET-5616.
Here it is hard to follow where this problem started, in which version it has been fixed, in which version it appeared again, ...","16/Jan/15 17:17;thestijn;I have the same issue using Safari 8 on a mac on Wicket 6.14. 
Could this issue be reopened?","16/Jan/15 18:51;jeredm@maplewoodsoftware.com;[~thestijn], this case was fixed and was broken again, so WICKET-5616 is the latest. The patch should be in Wicket 6.17.",,,,,,,,,,,,,,,,,,,,,,,
wicket:enclosure within FormComponentPanel causes exception related to dequeueing,WICKET-5800,12764877,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,mscoon,mscoon,05/Jan/15 10:29,05/Jan/15 11:56,13/Mar/19 23:18,05/Jan/15 11:56,7.0.0-M4,,,,,,,,7.0.0-M5,,,,,,,0,,,,,,,,"Steps to reproduce: 
- Create a component extending FormComponentPanel and use a wicket:enclosure in it
- Create a component ""MyTab"" extending Panel with a form which includes component above
- In your page, add an AjaxTabbedPanel with two tabs and add ""MyTab"" twice

When changing tabs the exception shown below is thrown.

The problem occurs with both 7.0.0-M4 and 7.0.0-SNAPSHOT

I am also attaching a quickstart to reproduce the problem.

org.apache.wicket.WicketRuntimeException: Detach called on component with id 'component' while it had a non-empty queue: ComponentQueue{queueSize=1, queue=[[Enclosure [Component id = wicket_enclosure0]], null, null, null, null, null, null, null]}
     at org.apache.wicket.MarkupContainer.onDetach(MarkupContainer.java:1936)
     at org.apache.wicket.markup.html.form.LabeledWebMarkupContainer.onDetach(LabeledWebMarkupContainer.java:46)
     at org.apache.wicket.markup.html.form.FormComponent.onDetach(FormComponent.java:1409)
     at org.apache.wicket.Component.detach(Component.java:1162)
     at org.apache.wicket.MarkupContainer.detachChildren(MarkupContainer.java:1653)
     at org.apache.wicket.Component.detach(Component.java:1186)
     at org.apache.wicket.MarkupContainer.detachChildren(MarkupContainer.java:1653)
     at org.apache.wicket.Component.detach(Component.java:1186)
     at org.apache.wicket.MarkupContainer.removedComponent(MarkupContainer.java:1355)
     at org.apache.wicket.MarkupContainer.replace(MarkupContainer.java:742)
     at org.apache.wicket.MarkupContainer.addOrReplace(MarkupContainer.java:214)
     at org.apache.wicket.extensions.markup.html.tabs.TabbedPanel.setCurrentTab(TabbedPanel.java:439)
     at org.apache.wicket.extensions.markup.html.tabs.TabbedPanel.setSelectedTab(TabbedPanel.java:397)
     at org.apache.wicket.extensions.ajax.markup.html.tabs.AjaxTabbedPanel$1.onClick(AjaxTabbedPanel.java:81)
     at org.apache.wicket.ajax.markup.html.AjaxFallbackLink$1.onEvent(AjaxFallbackLink.java:90)
     at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:156)
     at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:575)
     at java.lang.reflect.Method.invoke(Method.java:606)
     at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
     at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:241)
     at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:248)
     at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
     at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:837)
     at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
     at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
     at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
     at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
     at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
     at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
     at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)
     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
     at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)
     at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)
     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1125)
     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
     at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1059)
     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
     at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)
     at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)
     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
     at org.eclipse.jetty.server.Server.handle(Server.java:497)
     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:313)
     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:248)
     at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)
     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:626)
     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:546)
     at java.lang.Thread.run(Thread.java:745)
",,,,,,,,,,,,,,,,,,,,,,,,,05/Jan/15 10:31;mscoon;dequeue2.zip;https://issues.apache.org/jira/secure/attachment/12690061/dequeue2.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2015-01-05 11:55:33.235,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jan 05 11:56:50 UTC 2015,,,,,,0|i23y73:,9223372036854775807,,,,,,,,"05/Jan/15 11:55;jira-bot;Commit 8a3bd97825647301833751e906f441577e3fb3a5 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8a3bd97 ]

WICKET-5800 wicket:enclosure within FormComponentPanel causes exception related to dequeueing
",05/Jan/15 11:56;bitstorm;FormComponentPanel didn't implement IQueueRegion,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reload of page leads to WicketRuntimeException,WICKET-5777,12758183,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,Karsten Winkler,Karsten Winkler,27/Nov/14 10:15,09/Dec/14 13:36,13/Mar/19 23:18,09/Dec/14 13:36,7.0.0-M4,,,,,,,,7.0.0-M5,,,,wicket,,,0,,,,,,,,"Reloading (CTRL-R) causes an unexpected WicketRuntimeException, due to versioning parameter (still working in M3).
{quote}
Last cause: Cannot modify component hierarchy after render phase has started (page version cant change then anymore)
{quote}

Root cause:

org.apache.wicket.WicketRuntimeException: Cannot modify component hierarchy after render phase has started (page version cant change then anymore)
at org.apache.wicket.Component.checkHierarchyChange(Component.java:3615)
at org.apache.wicket.MarkupContainer.add(MarkupContainer.java:165)
at org.apache.wicket.markup.resolver.HtmlHeaderResolver.resolve(HtmlHeaderResolver.java:110)
at org.apache.wicket.markup.resolver.ComponentResolvers.resolveByApplication(ComponentResolvers.java:87)
at org.apache.wicket.markup.resolver.ComponentResolvers.resolve(ComponentResolvers.java:63)
at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1391)
at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1601)
at org.apache.wicket.Page.onRender(Page.java:879)
at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:142)
at org.apache.wicket.Component.internalRender(Component.java:2372)
at org.apache.wicket.Component.render(Component.java:2300)
at org.apache.wicket.Page.renderPage(Page.java:1018)
at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124)
at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:195)
at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:837)
at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
at org.apache.wicket.protocol.ws.AbstractUpgradeFilter.processRequestCycle(AbstractUpgradeFilter.java:59)
at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118)
at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:150)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:199)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50)
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192)
at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160)
at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344)
at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)
at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)
at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:950)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1040)
at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607)
at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:315)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
at java.lang.Thread.run(Thread.java:745)",Windows 7/JDK7/Tomcat7,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-03 13:22:52.461,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Dec 09 09:18:15 UTC 2014,,,,,,0|i22ufb:,9223372036854775807,,,,,,,,"03/Dec/14 13:22;mgrigorov;The exception suggest usage of <wicket:head> in the page.
I've tried several pages from wicket-examples but I'm not able to reproduce the problem.
Can you provide a quickstart application please ?
Thanks!",03/Dec/14 13:54;bitstorm;Try also to use 7.0.0-SNAPSHOT. It might contain changes that could be helpful for your problem.,"08/Dec/14 09:33;Karsten Winkler;*Test-Scenario:*
* use Wicket Quickstart with M4
* change HomePage.html (e.g. add a link) and wicket:head meta:
{code:title=HomePage.html}
<!DOCTYPE html>
<html xmlns:wicket=""http://wicket.apache.org"">
<wicket:head>
    <meta http-equiv=""X-UA-Compatible"" content=""IE=10; IE=9; IE=8; IE=7; IE=EDGE""/>
</wicket:head>
<body>
    <a href=""#"" wicket:id=""foo"">a dynamic link</a>
</body>
</html>
{code}
* change HomePage.java e.g. add an AjaxLink (change from static to dynamic)
{code:title=HomePage.java|borderStyle=solid}
package com.mycompany;

import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.AjaxLink;
import org.apache.wicket.request.mapper.parameter.PageParameters;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.WebPage;

public class HomePage extends WebPage {
	private static final long serialVersionUID = 1L;

	public HomePage(final PageParameters parameters) {
		super(parameters);
    }

	@Override
	protected void onInitialize() {
		super.onInitialize();
		add(new AjaxLink<Void>(""foo"") {
			@Override
			public void onClick(AjaxRequestTarget ajaxRequestTarget) {
			}
		});

	}
}
{code}
* start application in Tomcat 7
* press CTRL-R on HomePage -> error

* repeat with with M3 -> no error
Thank you...","08/Dec/14 22:06;jira-bot;Commit 4c931bd975a16acd8c05572a5d81e636c390bb93 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4c931bd ]

WICKET-5777 Reload of page leads to WicketRuntimeException","09/Dec/14 09:18;jira-bot;Commit 2d514dc1098b821e5965f8b50192045eaa1c8153 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2d514dc ]

WICKET-5777 Code review",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple events in AjaxEventBehavior with prefix 'on',WICKET-5783,12759498,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,froque,froque,04/Dec/14 19:41,05/Dec/14 11:33,13/Mar/19 23:18,05/Dec/14 11:33,,,,,,,,,6.19.0,7.0.0-M5,,,,,,0,,,,,,,,"if multiple events are used and one starts with ""on"", it only works if it is the first one, because of:

{code}
		if (event.startsWith(""on""))
		{
			event = event.substring(2);
		}
{code}

Why are events possible to start with ""on"" ? 

Is this legacy? Perhaps should be removed for Wicket 7 ?
",,,,,,,,,,,,,,,,,,,,,,,,,04/Dec/14 19:42;froque;events.zip;https://issues.apache.org/jira/secure/attachment/12685154/events.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-04 20:18:45.151,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Dec 05 11:33:36 UTC 2014,,,,,,0|i232gv:,9223372036854775807,,,,,,,,04/Dec/14 19:42;froque;quicktstart,"04/Dec/14 20:18;mgrigorov;Wicket 7.x logs a warning that 'on' is not needed. Again only for the first event name, if there are.
Wicket 8.x won't cut the leading 'on' because custom events may have any name.
Wicket 6.x/7.x cuts it because many apps come from pre-6.0 and they usually start with 'on'.

What do you suggest ?","05/Dec/14 09:58;froque;OK. Some suggestions are:
- update the documentation to reflect this behavior
- split the event variable by the space character and remove the leading 'on' if it exists","05/Dec/14 11:26;jira-bot;Commit 6d2334974f63ac931e9bad640cc1661527800365 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6d23349 ]

WICKET-5783 Multiple events in AjaxEventBehavior with prefix 'on'
","05/Dec/14 11:31;jira-bot;Commit 7b8b676733254d9119fa21aa2bc6e769899431a7 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7b8b676 ]

WICKET-5783 Multiple events in AjaxEventBehavior with prefix 'on'

(cherry picked from commit 3878a8822e63453d5a9447d57178f14ac815e7c0)
","05/Dec/14 11:33;mgrigorov;I've added javadoc to the class explaining why Wicket cuts the prefix 'on'.
Also I've moved the logic to #getEvent() method. This way is the application needs to use custom event with name like ""one"" or even ""on"" then it could override this method.
The method cuts 'on' for all event names.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing escaping in MultiFileUploadField.js - sort of XSS,WICKET-5782,12759430,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mpl,mpl,04/Dec/14 14:24,04/Dec/14 16:49,13/Mar/19 23:18,04/Dec/14 16:18,6.17.0,,,,,,,,6.19.0,7.0.0-M5,,,,,,0,,,,,,,,"When uploading files via org.apache.wicket.markup.html.form.upload.MultiFileUploadField component, names of uploaded files are added into a table. 

Inside MultiFileUploadField.js is line that adds names of files:

{code}
contentsColumn.innerHTML = this.getOnlyFileNames(element);
{code}

This code is missing any escaping, so if you upload file named: 
{code}
<code onmouseover=alert(1)>.doc
{code}

and hover on the name, you trigger sort of an XSS.

It is unlikely to be a real threat, as you can probably only attack yourself with this bug and it very uncommon to have files with ""<"" or "">"" characters in their name, but ""&"" can be relatively common in names of files and ""&"" needs proper escaping too.

So before adding the filename to contentsColumn.innerHtml, it needs to be properly escaped.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-04 16:18:28.117,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Dec 04 16:49:24 UTC 2014,,,,,,0|i23227:,9223372036854775807,,,,,,,,"04/Dec/14 16:18;jira-bot;Commit 354e07129e587043d1eba32e08b0d82c4fc404e0 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=354e071 ]

WICKET-5782 Missing escaping in MultiFileUploadField.js - sort of XSS
","04/Dec/14 16:18;jira-bot;Commit bbc5dbbdb435485571c428783560045b13624d3e in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bbc5dbb ]

WICKET-5782 Missing escaping in MultiFileUploadField.js - sort of XSS

(cherry picked from commit 354e07129e587043d1eba32e08b0d82c4fc404e0)
","04/Dec/14 16:49;jira-bot;Commit c41701506c862f761d56235e4d29e00938cf9330 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c417015 ]

WICKET-5782 Missing escaping in MultiFileUploadField.js - sort of XSS

Rename 'char' to 'ch'
","04/Dec/14 16:49;jira-bot;Commit f7fc5d09517d9d774bc0d06a38f94a9b472d5bc7 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f7fc5d0 ]

WICKET-5782 Missing escaping in MultiFileUploadField.js - sort of XSS

Rename 'char' to 'ch'

(cherry picked from commit c41701506c862f761d56235e4d29e00938cf9330)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxRequestAttributes extra parameters aren't properly handled in getCallbackFunction(),WICKET-5759,12754950,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,froque,froque,13/Nov/14 02:11,24/Nov/14 19:33,13/Mar/19 23:18,18/Nov/14 09:34,,,,,,,,,6.19.0,7.0.0-M5,,,,,,0,,,,,,,,"extra parameters of an Ajax behaviour can be accessed by getRequest().getRequestParameters().getParameterValue(key)

but if one uses getCallbackFunction() of an AbstractDefaultAjaxBehavior, these parameters get screwed and can no longer be accessed in the same manner. 

the problem seems to be the merge in attrs.ep = Wicket.merge(attrs.ep, params);
",,,,,,,,,,,,,,,,,,,,,,,,,13/Nov/14 02:12;froque;callbackparameter.tgz;https://issues.apache.org/jira/secure/attachment/12681209/callbackparameter.tgz,14/Nov/14 03:50;froque;fix-WICKET-5759.patch;https://issues.apache.org/jira/secure/attachment/12681483/fix-WICKET-5759.patch,,,2.0,,,,,,,,,,,,,,,,,,,2014-11-18 09:23:44.888,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Nov 24 19:33:52 UTC 2014,,,,,,0|i22b9r:,9223372036854775807,,,,,,,,13/Nov/14 02:12;froque;quickstart to demonstrate the issue,14/Nov/14 03:50;froque;an attempt to solve the problem.,"18/Nov/14 09:23;jira-bot;Commit 18667ac778a96dcd85f03936c094d1fad2884424 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=18667ac ]

WICKET-5759 AjaxRequestAttributes extra parameters aren't properly handled in getCallbackFunction()
","18/Nov/14 09:34;jira-bot;Commit 0374c040577410ab76cfd37a1ff0f79f74bca368 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0374c04 ]

WICKET-5759 AjaxRequestAttributes extra parameters aren't properly handled in getCallbackFunction()

(cherry picked from commit 18667ac778a96dcd85f03936c094d1fad2884424)
",18/Nov/14 09:34;mgrigorov;Thank you for the good analysis and the patch !,"24/Nov/14 19:25;jira-bot;Commit 6e2034d4f68ea2601f50b2d0b930a86f5aba45ac in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6e2034d ]

WICKET-5759 AjaxRequestAttributes extra parameters aren't properly handled in getCallbackFunction()

(cherry picked from commit 8e00eb9f8ddae6d59950b33b6a2d38de27198886)
","24/Nov/14 19:25;jira-bot;Commit 46386490d633cf9a480c3550cb8190e87e983e7c in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4638649 ]

WICKET-5759 AjaxRequestAttributes extra parameters aren't properly handled in getCallbackFunction()
","24/Nov/14 19:33;jira-bot;Commit e71ba640cd890fa27c1569ef3e02b265dbc9a980 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e71ba64 ]

WICKET-5759 AjaxRequestAttributes extra parameters aren't properly handled in getCallbackFunction()

Fix test expectations
","24/Nov/14 19:33;jira-bot;Commit 0004c20da872d984976def5244abcd84030b80d1 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0004c20 ]

WICKET-5759 AjaxRequestAttributes extra parameters aren't properly handled in getCallbackFunction()

Fix test expectations

(cherry picked from commit e71ba640cd890fa27c1569ef3e02b265dbc9a980)
",,,,,,,,,,,,,,,,,,,,,,,,,,,
PageParametersEncoder should not decode parameters with no name,WICKET-5770,12756652,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,20/Nov/14 08:24,20/Nov/14 08:27,13/Mar/19 23:18,20/Nov/14 08:27,6.18.0,7.0.0-M4,,,,,,,6.19.0,7.0.0-M5,,,wicket,,,0,,,,,,,,"From dev@ mailing list: http://markmail.org/message/khuc2v37aakzyfth

PageParametersEncoder should ignore query parameters like ""&=&"" and ""&=value"" because they make no sene and lead to exceptions later at PageParameters#add() call.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-20 08:25:43.17,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Nov 20 08:26:58 UTC 2014,,,,,,0|i22lif:,9223372036854775807,,,,,,,,"20/Nov/14 08:25;jira-bot;Commit 2200ad261d11d0354bd66c89d3665fce651f816e in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2200ad2 ]

WICKET-5770 PageParametersEncoder should not decode parameters with no name
","20/Nov/14 08:26;jira-bot;Commit cf6172bd5acceac19f4322dcf7ce2ec7aef76a38 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=cf6172b ]

WICKET-5770 PageParametersEncoder should not decode parameters with no name

(cherry picked from commit 2200ad261d11d0354bd66c89d3665fce651f816e)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in IntHashMap,WICKET-5751,12753699,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,garretwilson,garretwilson,07/Nov/14 13:48,18/Nov/14 07:41,13/Mar/19 23:18,18/Nov/14 07:41,7.0.0-M3,,,,,,,,7.0.0-M5,,,,,,,0,,,,,,,,"I was looking through a tester's log file to track down a separate issue. I came across a {{NullPointerException}} with {{IntHashMap}}, apparently when the server was shutting down.

See also WICKET-5584, which also deals with a {{NullPointerException}} with {{IntHashMap}}, and also seems to relate to a {{null}} {{modCount}} (judging by the line number).

{noformat}
INFO  (ExampleServer) [2014-11-06 00:49:24,979] - com.example.server.ExampleServer.stopServer(ExampleServer.java:268): Stopping server.
INFO  (ServerConnector) [2014-11-06 00:49:24,982] - org.eclipse.jetty.server.AbstractConnector.doStop(AbstractConnector.java:306): Stopped ServerConnector@3b7d3a38{HTTP/1.1}{0.0.0.0:8099}
INFO  (Application) [2014-11-06 00:49:24,983] - org.apache.wicket.Application.destroyInitializers(Application.java:588): [org.apache.wicket.protocol.http.WicketFilter-55b0dcab] destroy: Wicket core library initializer
INFO  (Application) [2014-11-06 00:49:24,983] - org.apache.wicket.Application.destroyInitializers(Application.java:588): [org.apache.wicket.protocol.http.WicketFilter-55b0dcab] destroy: Wicket extensions initializer
ERROR (DiskDataStore) [2014-11-06 00:49:24,988] - org.apache.wicket.pageStore.DiskDataStore.saveIndex(DiskDataStore.java:282): Couldn't write DiskDataStore index to file C:\Windows\SERVIC~2\NETWOR~1\AppData\Local\Temp\org.apache.wicket.protocol.http.WicketFilter-55b0dcab-filestore\DiskDataStoreIndex.
java.lang.NullPointerException
	at org.apache.wicket.util.collections.IntHashMap$HashIterator.<init>(IntHashMap.java:777)
	at org.apache.wicket.util.collections.IntHashMap$EntryIterator.<init>(IntHashMap.java:871)
	at org.apache.wicket.util.collections.IntHashMap$EntryIterator.<init>(IntHashMap.java:871)
	at org.apache.wicket.util.collections.IntHashMap.newEntryIterator(IntHashMap.java:896)
	at org.apache.wicket.util.collections.IntHashMap$EntrySet.iterator(IntHashMap.java:1055)
	at org.apache.wicket.util.collections.IntHashMap.writeObject(IntHashMap.java:1128)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:988)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
	at java.util.HashMap.internalWriteEntries(HashMap.java:1777)
	at java.util.HashMap.writeObject(HashMap.java:1354)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:988)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
	at org.apache.wicket.pageStore.DiskDataStore.saveIndex(DiskDataStore.java:274)
	at org.apache.wicket.pageStore.DiskDataStore.destroy(DiskDataStore.java:106)
	at org.apache.wicket.pageStore.AsynchronousDataStore.destroy(AsynchronousDataStore.java:118)
	at org.apache.wicket.pageStore.AbstractPageStore.destroy(AbstractPageStore.java:53)
	at org.apache.wicket.pageStore.AbstractCachingPageStore.destroy(AbstractCachingPageStore.java:102)
	at org.apache.wicket.page.PageStoreManager.destroy(PageStoreManager.java:437)
	at org.apache.wicket.Application.internalDestroy(Application.java:659)
	at org.apache.wicket.protocol.http.WebApplication.internalDestroy(WebApplication.java:607)
	at org.apache.wicket.protocol.http.WicketFilter.destroy(WicketFilter.java:605)
	at org.eclipse.jetty.servlet.FilterHolder.destroyInstance(FilterHolder.java:173)
	at org.eclipse.jetty.servlet.FilterHolder.doStop(FilterHolder.java:151)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73)
	at org.eclipse.jetty.servlet.ServletHandler.doStop(ServletHandler.java:230)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73)
	at org.eclipse.jetty.security.SecurityHandler.doStop(SecurityHandler.java:411)
	at org.eclipse.jetty.security.ConstraintSecurityHandler.doStop(ConstraintSecurityHandler.java:457)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73)
	at org.eclipse.jetty.server.session.SessionHandler.doStop(SessionHandler.java:127)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73)
	at org.eclipse.jetty.server.handler.ContextHandler.doStop(ContextHandler.java:833)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStop(ServletContextHandler.java:215)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73)
	at org.eclipse.jetty.server.Server.doStop(Server.java:456)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)
	at com.example.server.ExampleServer.stopServer(ExampleServer.java:269)
	at com.example.server.ExampleServer.stop(ExampleServer.java:279)
INFO  (ContextHandler) [2014-11-06 00:49:24,990] - org.eclipse.jetty.server.handler.ContextHandler.doStop(ContextHandler.java:863): Stopped o.e.j.s.ServletContextHandler@63f259c3{/,null,UNAVAILABLE}
{noformat}","Windows 7 Profession 64-bit
Embedded Jetty 9.2.3.v20140905",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-18 07:39:50.859,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Nov 18 07:41:15 UTC 2014,,,,,,0|i223vj:,9223372036854775807,,,,,,,,18/Nov/14 07:39;mgrigorov;Broken with: https://github.com/apache/wicket/commit/90fa7ed0f228a66d8867dd741fb56e743cd55f61,"18/Nov/14 07:41;jira-bot;Commit bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bcea89f ]

WICKET-5751 NullPointerException in IntHashMap
WICKET-5584 DiskDataStore error

Initialize modCount in readObject()
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DiskDataStore error,WICKET-5584,12712678,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,sebfz1,sebfz1,06/May/14 21:19,18/Nov/14 07:41,13/Mar/19 23:18,18/Nov/14 07:41,7.0.0-M1,,,,,,,,7.0.0-M5,,,,wicket,,,0,,,,,,,,"Hi,

I was experiencing runtime exception(s) with tomcat 7 (not with jetty), with a simple quickstart (nothing special in the quickstart).

I had these errors when I start (or restart) the server and reach the homepage. One time the first error, next time the second error, etc.

I am not sure how I can reproduce this outside my dev env (eclipse + tomcat)... Also, to be honest, it does not repro today (tried both M1 & SNAPSHOT) but... I have seen same errors while testing at work (tomcat 7.0.23).

Please find bellow the 2 stacktraces:

* Exception #1

INFO: Server startup in 959 ms
Exception in thread ""Wicket-PageSavingThread"" java.lang.NullPointerException
    at org.apache.wicket.util.collections.IntHashMap.put(IntHashMap.java:303)
    at org.apache.wicket.pageStore.PageWindowManager.putWindowIndex(PageWindowManager.java:97)
    at org.apache.wicket.pageStore.PageWindowManager.createPageWindow(PageWindowManager.java:396)
    at org.apache.wicket.pageStore.DiskDataStore$SessionEntry.savePage(DiskDataStore.java:348)
    at org.apache.wicket.pageStore.DiskDataStore.storeData(DiskDataStore.java:188)
    at org.apache.wicket.pageStore.AsynchronousDataStore$PageSavingRunnable.run(AsynchronousDataStore.java:355)
    at java.lang.Thread.run(Thread.java:744)


* Exception #2

INFO: Server startup in 929 ms
ERROR - DiskDataStore              - Couldn't load DiskDataStore index from file /opt/apache-tomcat/work/Catalina/localhost/myproject/wicket.myproject-filestore/DiskDataStoreIndex.
java.io.EOFException
    at java.io.DataInputStream.readInt(DataInputStream.java:392)
    at java.io.ObjectInputStream$BlockDataInputStream.readInt(ObjectInputStream.java:2820)
    at java.io.ObjectInputStream.readInt(ObjectInputStream.java:971)
    at org.apache.wicket.util.collections.IntHashMap.readObject(IntHashMap.java:1163)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1017)
    at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1893)
    at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)
    at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)
    at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1990)
    at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1915)
    at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)
    at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)
    at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1990)
    at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1915)
    at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)
    at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)
    at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)
    at java.util.HashMap.readObject(HashMap.java:1184)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1017)
    at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1893)
    at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)
    at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)
    at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)
    at org.apache.wicket.pageStore.DiskDataStore.loadIndex(DiskDataStore.java:226)
    at org.apache.wicket.pageStore.DiskDataStore.<init>(DiskDataStore.java:83)
    at org.apache.wicket.DefaultPageManagerProvider.newDataStore(DefaultPageManagerProvider.java:85)
    at org.apache.wicket.DefaultPageManagerProvider.get(DefaultPageManagerProvider.java:56)
    at org.apache.wicket.DefaultPageManagerProvider.get(DefaultPageManagerProvider.java:38)
    at org.apache.wicket.Application.internalGetPageManager(Application.java:1405)
    at org.apache.wicket.Session.getPageManager(Session.java:895)
    at org.apache.wicket.Page.dirty(Page.java:278)
    at org.apache.wicket.markup.html.WebPage.dirty(WebPage.java:324)
    at org.apache.wicket.Page.init(Page.java:717)
    at org.apache.wicket.Component.<init>(Component.java:684)
    at org.apache.wicket.MarkupContainer.<init>(MarkupContainer.java:121)
    at org.apache.wicket.Page.<init>(Page.java:170)
    at org.apache.wicket.Page.<init>(Page.java:159)
    at org.apache.wicket.markup.html.WebPage.<init>(WebPage.java:106)
    at com.mycompany.HomePage.<init>(HomePage.java:17)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
    at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:171)
    at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:76)
    at org.apache.wicket.DefaultMapperContext.newPageInstance(DefaultMapperContext.java:133)
    at org.apache.wicket.core.request.handler.PageProvider.resolvePageInstance(PageProvider.java:268)
    at org.apache.wicket.core.request.handler.PageProvider.getPageInstance(PageProvider.java:166)
    at org.apache.wicket.request.handler.render.PageRenderer.getPage(PageRenderer.java:78)
    at org.apache.wicket.request.handler.render.WebPageRenderer.isPageStateless(WebPageRenderer.java:300)
    at org.apache.wicket.request.handler.render.WebPageRenderer.shouldRenderPageAndWriteResponse(WebPageRenderer.java:342)
    at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:203)
    at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
    at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:837)
    at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
    at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
    at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
    at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
    at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
    at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
    at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)
    at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1023)
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)
    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:744)",Tomcat 7.0.41,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-05-20 20:17:19.785,,,no_permission,,,,,,,,,,,,390994,,,Tue Nov 18 07:41:16 UTC 2014,,,,,,0|i1vcdr:,391225,,,,,,,,"20/May/14 20:17;mgrigorov;I cannot reproduce the issue with plain quickstart, Tomcat 7.0.52 and current 7.0.0-SNAPSHOT.

I guess the issue at your side is caused by active Tomcat persistent sessions. You have created the sessions with a quickstart using Wicket 6.x and then after redeploy you try to restore the sessions with Wicket 7.x.
If persistent sessions is not active then Tomcat would invalidate the http sessions and Wicket will clean the disk data store.

If you can reproduce it with a fresh Tomcat installation and a quickstart app then please comment here with the steps to reproduce and we will reopen the ticket.

Thanks!","27/Jul/14 12:56;sebfz1;Cannot reproduce either, assuming it's ok :)
Thank you very much!",18/Nov/14 07:39;mgrigorov;Broken with: https://github.com/apache/wicket/commit/90fa7ed0f228a66d8867dd741fb56e743cd55f61,"18/Nov/14 07:41;jira-bot;Commit bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bcea89f ]

WICKET-5751 NullPointerException in IntHashMap
WICKET-5584 DiskDataStore error

Initialize modCount in readObject()
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket Ajax Click handling gets requeued in OnDomReady so fire out of order,WICKET-5747,12752434,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,nickpratt,nickpratt,03/Nov/14 14:21,17/Nov/14 15:48,13/Mar/19 23:18,17/Nov/14 15:48,6.17.0,,,,,,,,6.19.0,7.0.0-M5,,,wicket,,,0,ajax,javascript,,,,,,"While debugging some jquery script ordering, we noticed the following and I'm looking for views on why this is done and/or if it's a bug:

1. Wicket assembles all ajax click handlers and writes them out into a single Wicket.Event.add(window,""domready"" function(event) { .... script invocation written in to the <head> element of the page.
2. For things like click handlers, Wicket writes out Wicket.Ajax.ajax( {""c"": ""selection4e2"", ""u"":""....."", ""m"":""POST""}) calls that execute within the onDomReady function defined in (1)
3. This invocation of (2) in turn invokes jquery( fn );  This requeues the function invocation at the back of the jquery event queue for onDomReady processing
4. Any custom scripts that we added using OnDomReadyHeaderItem, regardless of where we put them on the page after the standard Wicket click handler JS, are now invoked, according to page order.
5. The re-queued functions from (3) now execute after my custom scripts.  

These custom scripts modify the DOM (table paging/filtering etc) and this mechanism now results in Wicket JS errors since the Wicket click handler binding fail to find the required elements in the DOM.

Is this re-queueing intentional, and is there a reason that we couldnt just execute the click handler additions in step (1) rather than re-queuing the JS call?

A workaround for this is to wrap all of our application JS functions in a separate jQuery( ... ) invocation, so that we can requeue all of our functions after all the requeued Wicket ones.  It works, but we dont understand the need for Wicket to perform this requeueing instead of just executing the function as and where defined on the page.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-17 14:42:02.692,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Nov 17 15:48:36 UTC 2014,,,,,,0|i21w9j:,9223372036854775807,,,,,,,,"17/Nov/14 14:42;mgrigorov;Wicket usually adds 'e' to {""c"": ""selection4e2"", ""u"":""....."", ""m"":""POST""}. It looks like: 'e': 'click' (or 'change', 'focus', 'my-event', etc.).

At https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js#L1902 Wicket uses 'domready' only if there is no specified event, so it will execute the function as soon as the DOM is ready.

To resolve the problem you need to use an event.
The flow then would be:
1) all OnDomReadyHeaderItems are executed at Wicket.Event.add(window,""domready"", ...)
2) they will bind JS event listeners for the event they are interested in (e.g. ""For things like click handlers"" the event is 'click' and it will be handled by the 'else' branch at https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-event-jquery.js#L213, not by the 'if (type === 'domready') {' branch). So there won't be rescheduling.
","17/Nov/14 14:55;nickpratt;Im not sure I follow here - the events in question that are firing out of order are the basic Ajax click events for standard Wicket components (not ours) in the usual Wicket onDomReady header block.  Wicket is requeuing those events, which results in an out-of-order sequence in the browser. What we cant understand is why the standard Wicket click handlers are being requeued and not simply executed at the time of eval.

We're using Wicket 6.17.0

Our work around for the time being is to cause all of our application specific events to be requeued.  That way, they fire after the requeued Wicket events.  ","17/Nov/14 14:59;mgrigorov;Please update the flow in your description with the new knowledge from my comment.
Better add a new comment with the flow.
I don't see any requeueing if there is 'e' in the Ajax attributes.","17/Nov/14 15:04;nickpratt;The line you referred to (line 213) invokes: jquery( fn ) <--- That *requeues* the event (check the docs for the jquery function) to the *back* of the jquery onDomReady event queue.  The function that invokes line 213 is running inside the jquery ondomready function, so invoking jquery( anyFn ) causes it to be requeued to the back of the jquery event queue which leads to an out-of-order sequencing of the events listed in the <head> script on the page.",17/Nov/14 15:10;mgrigorov;OK. I see. It's because of WICKET-5181,"17/Nov/14 15:16;nickpratt;Is there a reason why we couldn't execute those standard Wicket JS handlers directly during invocation of the 

Wicket.Event.add(window, ""domready"", function(event) { ... }

method so that all events contained therein fire in the order as laid out on the page (assuming we could detect that we were running inside the jquery domready function?","17/Nov/14 15:45;jira-bot;Commit 626d93fb0f8aa1997d534f6b2f150db72d06fde6 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=626d93f ]

WICKET-5747 Wicket Ajax Click handling gets requeued in OnDomReady so fire out of order
","17/Nov/14 15:48;jira-bot;Commit 5fb0c772b4259eae31514272f9479fbdbe6c6470 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5fb0c77 ]

WICKET-5747 Wicket Ajax Click handling gets requeued in OnDomReady so fire out of order

(cherry picked from commit 626d93fb0f8aa1997d534f6b2f150db72d06fde6)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem with OnEventHeaderItem and Wicket.Event.add,WICKET-5181,12646380,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,bitstorm,bitstorm,07/May/13 09:15,17/Nov/14 15:10,13/Mar/19 23:18,08/May/13 13:30,6.7.0,,,,,,,,6.8.0,7.0.0-M1,,,,,,0,,,,,,,,"OnEventHeaderItem uses function Wicket.Event.add from wicket-event-jquery.js to bind a script to specific event fired for a given DOM element.
The function allows to specify the DOM element using its id. In this case the element is retrieved with standard function document.getElementById. 
However, this scenario fails when we apply it through OnEventHeaderItem because Wicket.Event.add is invoked before the DOM is ready (see attached quickstart). Therefore, we should modify the function to check for DOM-ready state (see attached patch).",,,,,,,,,,,,,,,,,WICKET-5747,,,,,,,,07/May/13 09:20;bitstorm;Quickstart.zip;https://issues.apache.org/jira/secure/attachment/12582065/Quickstart.zip,07/May/13 09:19;bitstorm;WICKET-5181.patch;https://issues.apache.org/jira/secure/attachment/12582064/WICKET-5181.patch,,,2.0,,,,,,,,,,,,,,,,,,,2013-05-08 13:30:42.563,,,no_permission,,,,,,,,,,,,326738,,,Wed May 08 13:30:42 UTC 2013,,,,,,0|i1kd9r:,327083,,,,,,,,08/May/13 13:30;mgrigorov;I simplified the patch by removing the check for #isReady(). jQuery(fn) will execute immediately if the DOM is ready.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StackOverflowError while trying to get the Markup of WicketHeadContainer,WICKET-5748,12752755,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,mgrigorov,mgrigorov,04/Nov/14 16:09,13/Nov/14 11:54,13/Mar/19 23:18,13/Nov/14 11:54,7.0.0-M4,,,,,,,,7.0.0-M5,,,,wicket,,,0,,,,,,,,"I'm migrating our main app to Wicket 7.x
One of the tests fail with StackOverflowError.
Attaching a debugger shows that there are multiple instances of HtmlHeaderResolver$WicketHeadContainer with the same id.

See the attached screenshot.",,,,,,,,,,,,,,,,,,,,,,,,,05/Nov/14 21:27;bitstorm;WICKET-5748.zip;https://issues.apache.org/jira/secure/attachment/12679633/WICKET-5748.zip,04/Nov/14 16:10;mgrigorov;stackoverflow-getMarkup.png;https://issues.apache.org/jira/secure/attachment/12679244/stackoverflow-getMarkup.png,,,2.0,,,,,,,,,,,,,,,,,,,2014-11-04 17:27:17.427,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Nov 13 11:53:13 UTC 2014,,,,,,0|i21y6n:,9223372036854775807,,,,,,,,"04/Nov/14 16:10;mgrigorov;A screenshot showing the problem.
org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy#getMarkup() is called with 'container' and 'child' being the same component instance.",04/Nov/14 16:14;mgrigorov;[~jesselong] You have worked in this area recently (WICKET-5569). Do you have an idea why this may happen ?,04/Nov/14 17:27;bitstorm;Could you reproduce with a quickstart?,"05/Nov/14 14:56;mgrigorov;It turned out to be a problem in the test.
It uses tester.startComponentInPage(aLinkWithSomeId, Markup.of(""<wicket:head></wicket:head><a wicket:id='wrongId'>Blah</a>""));

The <wicket:head> thingy is there to allow collecting the Ajax bindings (Wicket.Ajax.ajax()) and later assert on them. This causes the need of WicketHeadContainer.
But the problem goes away once fixing the 'wrongId' !
So Wicket confuses itself somehow due to the different id of the link and the one in the provided markup. If <wicket:head> is not there then Wicket properly reports ""Cannot find a component with id 'wrongId'. Similar: ..."" But when <wicket:head> is there it fails with StackOverflowError...

I'll try to isolate it in a small test case and attach it later.",05/Nov/14 21:28;bitstorm;I've created a quickstart following your indications. The problem is present since M2. With M1 looks good.,"06/Nov/14 14:55;bitstorm;Component HtmlHeaderResolver#WicketHeadContainer is used to add a placeholder for <wicket:head>. We could change it from to TransparentWebMarkupContainer to simply WebMarkupContainer. Could be this a problem? Sounds safe to me...
Tried and all tests pass.","13/Nov/14 11:53;jira-bot;Commit 82fbbad78973b900d84def5eebebb4986c412401 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=82fbbad ]

WICKET-5748 StackOverflowError while trying to get the Markup of
WicketHeadContainer",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Queueing component in autocomponent,WICKET-5724,12746679,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,darkvadaure,darkvadaure,08/Oct/14 10:00,02/Nov/14 22:26,13/Mar/19 23:18,02/Nov/14 22:26,7.0.0-M3,,,,,,,,7.0.0-M4,,,,wicket,,,0,,,,,,,,"There is an exception when a component is added to queue when its parent is an auto component

<body>
		<a href=""panier.html"">
			<span wicket:id=""inlink""></span>
		</a>
	</body>


Last cause: Unable to find component with id 'inlink' in [TransparentWebMarkupContainer [Component id = wicket_relative_path_prefix_1]]
	Expected: 'wicket_relative_path_prefix_1:inlink'.
	Found with similar names: ''",,,,,,,,,,,,,,,,,WICKET-5730,,,,WICKET-5731,,,,08/Oct/14 13:42;darkvadaure;queueing-problem.zip;https://issues.apache.org/jira/secure/attachment/12673594/queueing-problem.zip,08/Oct/14 21:13;darkvadaure;queueing-solution.zip;https://issues.apache.org/jira/secure/attachment/12673708/queueing-solution.zip,09/Oct/14 15:11;bitstorm;wicket5724.patch;https://issues.apache.org/jira/secure/attachment/12673904/wicket5724.patch,,3.0,,,,,,,,,,,,,,,,,,,2014-10-09 06:33:45.787,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 21 06:53:04 UTC 2014,,,,,,0|i20xgv:,9223372036854775807,,,,,,,,"08/Oct/14 13:42;darkvadaure;Replaced the quickstart app, i had made a mistake (Link instead of Label, but the problem is the same)","08/Oct/14 21:13;darkvadaure;What do you think about this solution :

The problem is when a dequeue is processed after adding an autocomponent, it is not retrieved in MarkupContainer#dequeue(DequeueContext), line 2079 in 7.0.0-M3
Component child = get(tag.getId()); returns null because the tag id is different from the autocomponent id.

I tried this solution with success : in tag resolvers RelativePathPrefixHandler and HtmlHeaderResolver i checked the isOpen status of the tag. when true, i modify the tag id to the newly created autocomponent
ex if(tag.isOpen()) //WICKET-5724
{
   tag.setId(id);
}
return new TransparentWebMarkupContainer(id);

then, the dequeue process tries the ""get(id)"" witch returns the autocomponent.

(Not sure to be comprehensible :) )

I tried with HtmlHeaderResolver because i create ""title component"" in title meta head tag, and it works good.

Maybe it could be interesting to do the same thing to the others ""Auto-Open Tags Resolvers"" ?

Just added queueing-solution.zip in attachments, and as in WICKET-5722, you can follow WICKET-5724 in RelativePathPrefixHandler and HtmlHeaderResolver

","09/Oct/14 06:33;mgrigorov;Thank you for your help in testing and improving the new functionality!

Maybe it will be a bit easier if you attach patches with your changes or use Pull Requests in GitHub.
To see what kind of changes you did now I copy your copies over the originals, revert all non-related changes (removal of the Apache licence, fix whitespeces, etc.) and then I figure out what is the real change.

Yesterday I took a brief look at this ticket and my first thought was that RelativePathPrefixHandler needs to set its own IAutoComponentFactory. At the moment only EnclosureHandler and InlineEnclosureHandler do this. I think all IMarkupFilter+IComponentResolver implementations have to do this.

I'll take a look at your changes later today or tomorrow.","09/Oct/14 07:56;darkvadaure;I had tried (quickly) to set a IAutoComponentFactory on RelativePathPrefixHandler  and HtmlHeaderResolver yesterday, but it didn't worked. I was missing something that I corrected today and  indeed this is better !!
I test if it's an open tag and if so, i create a new id (like enclosure), set the tag as ""modified"" and set the IAutoComponentFactory.

And now i can try to make a patch, i don't really know how to do it :)","09/Oct/14 10:01;bitstorm;I also worked with ComponentTag.IAutoComponentFactory, which should be the standard way to enable queueing inside auto component. I've applied the factory inside RelativePathPrefixHandler#onComponentTag and it solves the problem of the issue, but it also creates problems with other TransparentWebMarkupContainer created by this handler that must not be queued. Today I will have a look to to Palancher's solution.
[~darkvadaure] to create a patch try to run 'git diff' on your working folder and put the output into a text file.","09/Oct/14 15:11;bitstorm;I've attached a possible fix. TransparentWebMarkupContainer can be inside head section or inside body. In the first case we can not queue them because  HtmlHeaderSectionHandler is added after the MarkupContainer#dequeueAutoComponents is invoked.
I changed RelativePathPrefixHandler in order to add an auto component factory only if tag is outside head section.
Let me know what do you think.","13/Oct/14 09:21;bitstorm;As side note: I see that there are some classes (like RelativePathPrefixHandler) that implement both IMarkupFilter and IComponentResolver.  Although this is not a problem per se, I thing it can be confusing and might lead to future problems because IMarkupFilter implementations don't need to be thread safe while IComponentResolverS have to (they are registered at application level inside Application#internalInit()).","13/Oct/14 12:31;mgrigorov;[~bitstorm] Please convert the quickstart as a test case and add some comments in the code why we need to track whether this is inside <head> or not.
I have no better solution than yours so I'm +1 to apply it.","13/Oct/14 18:07;jira-bot;Commit b92591f6496c15bf5615765539017ad702c67a43 in wicket's branch refs/heads/master from adelbene
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b92591f ]

WICKET-5724 Queueing component in autocomponent","14/Oct/14 08:01;jira-bot;Commit d8e292ecd90aec9bc7d7da4c52875aeef13008e4 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d8e292e ]

WICKET-5724 Queueing component in autocomponent

Improve javadoc of IAutoComponentFactory#newComponent()
","14/Oct/14 14:53;mgrigorov;Opening wicket-examples' http://localhost:8080/upload/single leads to the following error log""

ERROR - RequestHandlerStack        - Error detaching RequestHandler
org.apache.wicket.WicketRuntimeException: Detach called on component with id '0' while it had a non-empty queue: ComponentQueue{queueSize=1, queue=[[TransparentWebMarkupContainer [Component id = wicket_relative_path_prefix_0]], null, null, null, null, null, null, null]}
	at org.apache.wicket.MarkupContainer.onDetach(MarkupContainer.java:1962)
	at org.apache.wicket.Page.onDetach(Page.java:868)
	at org.apache.wicket.Component.detach(Component.java:1160)
	at org.apache.wicket.core.request.handler.PageProvider.detach(PageProvider.java:327)
","15/Oct/14 10:33;jira-bot;Commit 8953bd2cb91f8b62d4f26395156986b19e161720 in wicket's branch refs/heads/master from adelbene
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8953bd2 ]

WICKET-5724 Queueing component in autocomponent","15/Oct/14 10:38;bitstorm;With this new solution auto components are queued if our component queue is not empty. This solves the problem and (to me) is simplier than the previous solution. 
In addition, I've removed some old and unclear code from MarkupContainer#detachChildren","15/Oct/14 12:41;mgrigorov;It is not very clear to me :-/

Why ""auto components are queued if our component queue is not empty"" ?
What happens if ""our component queue is empty"" ?

I've noticed a new method called ""innerQueue"". Usually such methods are named ""internalXyz"". And usually it is ""private"".

Why the auto components are not removed anymore at the end of the rendering ?
They are in their correct position only when queue() is used. But if add() is used then they are still auto and should be removed, IMO.","15/Oct/14 13:34;bitstorm;{quote} 
It is not very clear to me :-/

Why ""auto components are queued if our component queue is not empty"" ?
What happens if ""our component queue is empty"" ?
{quote} 

Autocomponets that are added with autoAdd are not available when we call method queue(Component... components). This is what causes the issue. With my solution we perform again queuing if a container autocomponent is added with autoAdd. This makes sense only if the outer container has some unfound components in its queue (if  component queue is empty everything is fine).

{quote} 
Why the auto components are not removed anymore at the end of the rendering ?
They are in their correct position only when queue() is used. But if add() is used then they are still auto and should be removed, IMO.
{quote} 

If we remove auto components also their children components get removed. This causes a ""component not found"" exception in situations like the one of the quickstart project, i.e. queued components are inside auto components. 
I didn't know that autocomponent should be removed ""by contract"". The previous comment inside detachChildren was a little ambiguous about it. IMHO we can leave autocomponents where they are. 
","15/Oct/14 13:36;jira-bot;Commit c075bff017f456a46e68b714b89ff22cfe7c53a7 in wicket's branch refs/heads/master from adelbene
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c075bff ]

WICKET-5724 Renamed innerQueue to internalQueue","15/Oct/14 14:42;jira-bot;Commit dab8cbfff95d1db2744f91de05efec65960ad092 in wicket's branch refs/heads/master from adelbene
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=dab8cbf ]

WICKET-5724 Code improved as suggested by Martin Grigorov.","15/Oct/14 22:31;jira-bot;Commit c0015419ce465a8b56a9a220cccbb465ae7e7b23 in wicket's branch refs/heads/master from adelbene
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c001541 ]

WICKET-5724 Refactoring of the current solution.","21/Oct/14 06:53;jira-bot;Commit 358b8d6a6086c9bfd39844f2d4b61ade47d15415 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=358b8d6 ]

WICKET-5724 better comment and fix whitespaces
",,,,,,,,,,,,,,,,,
ContextNotActiveException thrown when using both CDI & Native WebSocket,WICKET-5733,12750306,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,sebfz1,sebfz1,24/Oct/14 08:11,29/Oct/14 13:19,13/Mar/19 23:18,29/Oct/14 09:07,7.0.0-M4,,,,,,,,7.0.0-M4,,,,wicket-cdi,wicket-native-websocket,,0,,,,,,,,"Native Websockets does not works anymore while used in conjunction with CDI. Repro step are quite simple, please see attached quickstart.

WARN  [RequestCycleExtra] Handling the following exception: org.jboss.weld.context.ContextNotActiveException: WELD-001303: No active contexts for scope type javax.enterprise.context.RequestScoped
        at org.jboss.weld.manager.BeanManagerImpl.getContext(BeanManagerImpl.java:680) [weld-core-impl-2.1.2.Final.jar:2014-01-09 09:23]
        at org.jboss.weld.bean.proxy.ContextBeanInstance.getInstance(ContextBeanInstance.java:79) [weld-core-impl-2.1.2.Final.jar:2014-01-09 09:23]
        at org.jboss.weld.bean.proxy.ProxyMethodHandler.invoke(ProxyMethodHandler.java:99) [weld-core-impl-2.1.2.Final.jar:2014-01-09 09:23]
        at org.jboss.weld.proxies.Conversation$795552506$Proxy$_$$_WeldClientProxy.getId(Unknown Source) [weld-core-impl-2.1.2.Final.jar:]
        at org.apache.wicket.cdi.ConversationPropagator.onRequestHandlerResolved(ConversationPropagator.java:107) [wicket-cdi-1.1-7.0.0-20141021.124705-313.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:155) [wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:151) [wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80) [wicket-util-7.0.0-20141021.123902-532.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onRequestHandlerResolved(RequestCycleListenerCollection.java:150) [wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:155) [wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:151) [wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80) [wicket-util-7.0.0-20141021.123902-532.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onRequestHandlerResolved(RequestCycleListenerCollection.java:150) [wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:155) [wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:151) [wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80) [wicket-util-7.0.0-20141021.123902-532.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onRequestHandlerResolved(RequestCycleListenerCollection.java:150) [wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:264) [wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222) [wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293) [wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.protocol.ws.api.AbstractWebSocketProcessor.broadcastMessage(AbstractWebSocketProcessor.java:219) [wicket-native-websocket-core-7.0.0-SNAPSHOT.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.protocol.ws.api.AbstractWebSocketProcessor.onClose(AbstractWebSocketProcessor.java:157) [wicket-native-websocket-core-7.0.0-SNAPSHOT.jar:7.0.0-SNAPSHOT]
        at org.apache.wicket.protocol.ws.javax.WicketEndpoint.onClose(WicketEndpoint.java:71) [wicket-native-websocket-javax-7.0.0-SNAPSHOT.jar:7.0.0-SNAPSHOT]
        at io.undertow.websockets.jsr.UndertowSession.close(UndertowSession.java:181) [undertow-websockets-jsr-1.0.15.Final.jar:1.0.15.Final]
        at io.undertow.websockets.jsr.ServerWebSocketContainer.close(ServerWebSocketContainer.java:464) [undertow-websockets-jsr-1.0.15.Final.jar:1.0.15.Final]
        at io.undertow.websockets.jsr.Bootstrap$WebSocketListener.contextDestroyed(Bootstrap.java:82) [undertow-websockets-jsr-1.0.15.Final.jar:1.0.15.Final]
        at io.undertow.servlet.core.ApplicationListeners.contextDestroyed(ApplicationListeners.java:185) [undertow-servlet-1.0.15.Final.jar:1.0.15.Final]
        at io.undertow.servlet.core.DeploymentImpl.destroy(DeploymentImpl.java:224) [undertow-servlet-1.0.15.Final.jar:1.0.15.Final]
        at io.undertow.servlet.core.DeploymentManagerImpl.undeploy(DeploymentManagerImpl.java:572) [undertow-servlet-1.0.15.Final.jar:1.0.15.Final]
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.stopContext(UndertowDeploymentService.java:119)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.stop(UndertowDeploymentService.java:101)
        at org.jboss.msc.service.ServiceControllerImpl$StopTask.stopService(ServiceControllerImpl.java:2056)
        at org.jboss.msc.service.ServiceControllerImpl$StopTask.run(ServiceControllerImpl.java:2017)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [rt.jar:1.7.0_65]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [rt.jar:1.7.0_65]
        at java.lang.Thread.run(Thread.java:745) [rt.jar:1.7.0_65]

Thanks & best regards,
Sebastien",WildFly-8,,,,,,,,,,,,,,,,,,,,,,,,28/Oct/14 16:34;sebfz1;quickstart-cdi-websocket-7.0.0-SNAPSHOT.zip;https://issues.apache.org/jira/secure/attachment/12677630/quickstart-cdi-websocket-7.0.0-SNAPSHOT.zip,24/Oct/14 08:11;sebfz1;quickstart-cdi-websocket.zip;https://issues.apache.org/jira/secure/attachment/12676866/quickstart-cdi-websocket.zip,,,2.0,,,,,,,,,,,,,,,,,,,2014-10-28 14:21:13.476,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Oct 29 13:19:19 UTC 2014,,,,,,0|i21jc7:,9223372036854775807,,,,,,,,24/Oct/14 08:11;sebfz1;Attached quickstart,"28/Oct/14 14:21;jira-bot;Commit c799cd74d1164f5cf330896592945013a2e54ec4 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c799cd7 ]

WICKET-5733 ContextNotActiveException thrown when using both CDI & Native WebSocket
",28/Oct/14 14:22;mgrigorov;Added a check to CDI 1.1 ConversationPropagator to not do anything when the resolved request handler is web socket related one (native web sockets and Atmosphere).,"28/Oct/14 16:34;sebfz1;Updated quickstart to use 7.0.0-SNAPSHOT

Repro steps are:
> mvn clean install
> deploy on WildFly-8
> reach the homepage

If there is no stacktrace and a ""client is connected"" message, that's all ok.

Thanks in advance,
Sebastien","29/Oct/14 09:04;jira-bot;Commit 133426c4be4572a01c9c2402ed01d211affe0e0d in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=133426c ]

WICKET-5733 ContextNotActiveException thrown when using both CDI & Native WebSocket

Add a check for WebSocketMessageBroadcastHandler too

(cherry picked from commit edc912d01ed430c480fbd0f611165d1273d0e333)
","29/Oct/14 09:07;mgrigorov;Added a check for WebSocketMessageBroadcastHandler too.
The INFO log ""11:01:55,763 INFO  [com.mycompany.HomePage] (default task-117) Client connected"" is there and there are no errors logged now.","29/Oct/14 13:19;sebfz1;Hi Martin,

Tested latest update, working well! Thank you very much!
Would you like me to close the issue?

Best regards,
Sebastien",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException may occur when calling EventBus.post(),WICKET-5619,12721383,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,interface,interface,16/Jun/14 10:37,27/Oct/14 15:55,13/Mar/19 23:18,14/Aug/14 11:30,6.15.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket-atmosphere,,,0,atmosphere,,,,,,,"ConcurrentModificationException may occur when calling EventBus.post() because subscriptionsForPage collection can be modified by another thread during a loop inside AtmosphereRequestHandler.executeHandlers:
{code}
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextNode(HashMap.java:1429)
	at java.util.HashMap$KeyIterator.next(HashMap.java:1453)
	at com.google.common.collect.AbstractMultimap$WrappedCollection$WrappedIterator.next(AbstractMultimap.java:540)
	at java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1102)
	at com.google.common.collect.Iterators$8.computeNext(Iterators.java:735)
	at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:143)
	at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:138)
	at org.apache.wicket.atmosphere.AtmosphereRequestHandler.executeHandlers(AtmosphereRequestHandler.java:79)
	at org.apache.wicket.atmosphere.AtmosphereRequestHandler.respond(AtmosphereRequestHandler.java:74)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:862)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289)
	at org.apache.wicket.atmosphere.EventBus.post(EventBus.java:417)
	at org.apache.wicket.atmosphere.EventBus.postToSingleResource(EventBus.java:393)
	at org.apache.wicket.atmosphere.EventBus.post(EventBus.java:346)
	at org.apache.wicket.atmosphere.EventBus.post(EventBus.java:329)
{code}

I think the problem is inside in EventBus.postToSingleResource() method:
{code}
subscriptionsForPage = Collections2.filter(			Collections.unmodifiableCollection(subscriptions.get(key)), new EventFilter(event));
{code}
I think collection get from ""subscriptions.get(key)"" should be copied first and then assigned to subscriptionsForPage variable. Now it is a pass as a reference (not directly but it is) and it can lead to ConcurrentModificationException.

It is not easy to reproduce this problem (more that one thread must call post at the same time), but sometimes it happen.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-14 11:30:30.463,,,no_permission,,,,,,,,,,,,399579,,,Mon Oct 27 15:55:22 UTC 2014,,,,,,0|i1wsc7:,399688,,,,,,,,"14/Aug/14 11:30;jira-bot;Commit 18f269e13b4c6f14ede7b44a495c2f0782d1a0f6 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=18f269e ]

WICKET-5619 ConcurrentModificationException may occur when calling EventBus.post()

Use Iterables#filter() as suggested at com.google.common.collect.Collections2#filter
","14/Aug/14 11:31;jira-bot;Commit 7ad823c99c959657449f0625c3814b2b57050f89 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7ad823c ]

WICKET-5619 ConcurrentModificationException may occur when calling EventBus.post()

Use Iterables#filter() as suggested at com.google.common.collect.Collections2#filter

(cherry picked from commit 18f269e13b4c6f14ede7b44a495c2f0782d1a0f6)
","14/Aug/14 11:32;jira-bot;Commit 18f269e13b4c6f14ede7b44a495c2f0782d1a0f6 in wicket's branch refs/heads/wicket-atmosphere-tester from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=18f269e ]

WICKET-5619 ConcurrentModificationException may occur when calling EventBus.post()

Use Iterables#filter() as suggested at com.google.common.collect.Collections2#filter
","15/Aug/14 07:51;jira-bot;Commit 78fc5b53eb09a76a2e7f307f2ce5fbbd2c8f6c0a in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=78fc5b5 ]

WICKET-5619 ConcurrentModificationException may occur when calling EventBus.post()

Use Iterables#filter() as suggested at com.google.common.collect.Collections2#filter
","27/Oct/14 15:55;dke;This issue still occurs in our webapplication. 
The exception is easy reproducable on the following way:

You have multiple users surfing a page (Page A) which has subscribes for an event (Event A). Now a user (User A) does an action which triggers the Event A to get posted to the Eventbus. While the eventbus posts the event to the registered listeners, a User B leaves the page and unregisters for the event, f.e because he now want's surfs another page, which does not subscribe to the event. Now the ConcurrentModificationException occurs because the unregistering of User B changed the list of listeners while the eventbus is still posting the event to the different listeners. This happen because the unregistin

In my opinion this issue can be solved if the line: 
{code} Collection<EventSubscription> eventSubscriptions = subscriptions.get(key);
subscriptionsForPage = Iterables.filter(eventSubscriptions, new EventFilter(event)); {code}
makes an copy of the EventSubscriptions an works on this copy instead on the original list. When the eventbus now trys to post the event on a component which does not exists anymore he could try to unregister the component from the original subscribers list. 

Also:
{code}
Iterable<EventSubscription> subscriptionsForPage;
 		synchronized (this)
 		{
 			key = trackedPages.get(resource.uuid());
			Collection<EventSubscription> eventSubscriptions = subscriptions.get(key);
			subscriptionsForPage = Iterables.filter(eventSubscriptions, new EventFilter(event));
 		}
{code}
creates a lazy iterator on the the {{eventSubscriptions}}, and will be iterated outside the synchronized block.
You need to create a copy of the eventSubscriptions, because this might be changed during the unregistering process:

{code}
public synchronized void unregister(Component component)
	{
		...	
		Collection<EventSubscription> subscriptionsForPage = subscriptions.get(pageKey);
		Iterator<EventSubscription> it = subscriptionsForPage.iterator();
		while (it.hasNext())
		{
			if (it.next().getComponentPath().equals(componentPath))
				it.remove();
		}
	}
{code}
{{it.remove()}} changes the iterator within the lazy Iterator!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Using ""Submit"" button in Ajax DropDownChoice example leads to broken HTML page",WICKET-5731,12749448,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,mgrigorov,mgrigorov,21/Oct/14 07:26,21/Oct/14 13:26,13/Mar/19 23:18,21/Oct/14 13:26,6.17.0,7.0.0-M3,,,,,,,6.18.0,7.0.0-M4,,,wicket-examples,,,0,,,,,,,,"Using ""Submit"" button in Ajax DropDownChoice example leads to broken HTML page because style.css is not contributed.",,,,,,,,,,,,,,,,,WICKET-5730,,,,,,,,21/Oct/14 07:48;mgrigorov;WICKET-5731-autocomponent-disappears-tree.mp4;https://issues.apache.org/jira/secure/attachment/12676055/WICKET-5731-autocomponent-disappears-tree.mp4,21/Oct/14 07:41;mgrigorov;WICKET-5731-autocomponent-disappears.mp4;https://issues.apache.org/jira/secure/attachment/12676053/WICKET-5731-autocomponent-disappears.mp4,,,2.0,,,,,,,,,,,,,,,,,,,2014-10-21 07:27:49.957,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 21 12:50:50 UTC 2014,,,,,,0|i21e4n:,9223372036854775807,,,,,,,,"21/Oct/14 07:27;jira-bot;Commit 93ff3f45b64f9c7a7126a3c03724cbb5d11c95dc in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=93ff3f4 ]

WICKET-5731 Using ""Submit"" button in Ajax DropDownChoice example leads to broken HTML page
","21/Oct/14 07:28;jira-bot;Commit 13dc33049ad51db4969778cb5f2dcf6a1cf6df28 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=13dc330 ]

WICKET-5731 Using ""Submit"" button in Ajax DropDownChoice example leads to broken HTML page

(cherry picked from commit 93ff3f45b64f9c7a7126a3c03724cbb5d11c95dc)
","21/Oct/14 07:33;mgrigorov;Reopening because I see the same problem at http://localhost:8080/ajax/editable-label (Wicket Examples).

To reproduce:
1) set a new value for an editable text field or text area
2) click ""refresh"" link at the bottom of the page","21/Oct/14 07:41;mgrigorov;Attaching a screencast.

I think this is related to WICKET-5724 because an auto component is created for style.css (https://github.com/apache/wicket/blob/master/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/BasePage.html#L5) and this autocomponent disappears after clicking the link.",21/Oct/14 07:48;mgrigorov;A screencast for another similar problem in the Tree demo,"21/Oct/14 10:22;jira-bot;Commit 1d64d4ccfa9d1114986594ffd8f68cb6e41c09bc in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1d64d4c ]

WICKET-5731 Using ""Submit"" button in Ajax DropDownChoice example leads
to broken HTML page","21/Oct/14 10:27;bitstorm;That was a problem in 7.x because we don't remove autocomponents anymore. Btw, transient fields should not ""survive"" serialization, right? But I see that field ajaxResponse inside AbstractAjaxResponse.AjaxHtmlHeaderContainer is not set to null after page serialization, I have to do it manually with onDetach...could be this a bug with serialization?

","21/Oct/14 12:38;mgrigorov;'transient' fields are not (de)serialized.

*But*: the used pages from the last request cycle are stored in first level cache (the http session) as *live* instances (unless session replication is in place) !
Only when the pages are loaded from the second (application-scoped and deactivated by default) and third (the disk) they are deserialized.

See http://wicket.apache.org/guide/guide/internals.html#pagestoring",21/Oct/14 12:50;bitstorm;Sometimes I should also read the guide :D,,,,,,,,,,,,,,,,,,,,,,,,,,,
Component queuing breaks with html tags that don't require close tag.,WICKET-5728,12748562,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,bitstorm,bitstorm,16/Oct/14 10:46,16/Oct/14 12:17,13/Mar/19 23:18,16/Oct/14 12:17,7.0.0-M3,,,,,,,,7.0.0-M4,,,,,,,0,,,,,,,,Component queuing try to skip to close tag also for those tags that don't have one. This leads to a EmptyStackException (see ArrayListStack#peek).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-10-16 10:52:51.054,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Oct 16 10:52:51 UTC 2014,,,,,,0|i218qn:,9223372036854775807,,,,,,,,"16/Oct/14 10:52;jira-bot;Commit 3cc3fe95cbb3ebd72ff37817dd1860d828181b5e in wicket's branch refs/heads/master from adelbene
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3cc3fe9 ]

WICKET-5728 Component queuing breaks with html tags that don't require
close tag.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FencedFeedbackPanel is broken with RefreshingView(and it's implementations),WICKET-5265,12656448,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,cmenzel,vineetsemwal,vineetsemwal,06/Jul/13 10:33,14/Oct/14 08:04,13/Mar/19 23:18,14/Oct/14 08:04,,,,,,,,,6.18.0,7.0.0-M4,,,,,,0,DataView,FencedFeedbackPanel,RefreshingView,,,,,"FencedFeedbackPanel doesn't work correctly if inner form(s) are in RefreshingView(or it's implementations)..
in this case outerform feedbackpanel just starts including messages meant for inner feedbackpanel.
with ListView FencedFeedbackPanel works correctly..
actually one user(Mike Dundee) created this issue in quickview https://github.com/vineetsemwal/quickview/issues/19
 so in that link he has described his problem and pasted the code you can use to reproduce ...
there i have also explained why it's broken with RefreshingView and it's implementations currently(it's a little complex so i am trying to avoid explaining all again ,also english is not my first language :-) ) 

thank you !
",,,,,,,,,,,,,,,,,,,,,,,,,14/Aug/14 11:45;cmenzel;0001-WICKET-5265-recreate-fence-mark-when-needed.patch;https://issues.apache.org/jira/secure/attachment/12661699/0001-WICKET-5265-recreate-fence-mark-when-needed.patch,07/Jul/13 20:13;vineetsemwal;WICKET-5265.patch;https://issues.apache.org/jira/secure/attachment/12591141/WICKET-5265.patch,18/Aug/14 08:58;cmenzel;fencedfeedbacktest.tar.gz;https://issues.apache.org/jira/secure/attachment/12662457/fencedfeedbacktest.tar.gz,09/Jul/13 08:52;vineetsemwal;second.patch;https://issues.apache.org/jira/secure/attachment/12591399/second.patch,4.0,,,,,,,,,,,,,,,,,,,2013-07-08 13:29:16.15,,,no_permission,,,,,,,,,,,,336671,,,Mon Sep 29 11:15:21 UTC 2014,,,,,,0|i1m2lz:,336994,,,,,,,,07/Jul/13 13:20;vineetsemwal;in short it's broken when  child (inner FencedFeedbackPanel) is removed and then added back later and this is the reason it's broken with RefreshingView  ..,"07/Jul/13 20:38;vineetsemwal;i have provided the patch that fixes the problem ,all current tests pass and i added one more case for current problem,
 i have also posted code in gist in case if someone just wants to review  FencedFeedbackPanel 
https://gist.github.com/vineetsemwal/5944773 
","08/Jul/13 13:29;svenmeier;With your patch it is no longer possible to use multiple feedbacks for the same fence, right?","08/Jul/13 18:12;vineetsemwal;if those multiple feedbacks for same fence are on same level then it will work ,say 2 inner feedbacks on same fence ,then some outer feedback  will find one or the other from metadata when it will try to recurse into component.. is this the case you are asking?","09/Jul/13 08:54;vineetsemwal;i have tried another approach and uploaded (second.patch ) .this keeps set of fencedfeedbacks for same fence as metadata  so the set is iterated and if any one  is found then false is returned ie. (it tells do not recurse into component) else true. 

  ","12/Sep/13 18:27;svenmeier;The problem I see with both of your patches is that you're introducing a possible memory leak: If FencedFeedbackPanels are removed, a component might still keep a reference to it in its metaData.
If we follow that path, we might equally well keep the current solution with a counter and just remove #onRemove(), so users will have to do the housekeeping by themselves.","13/Sep/13 12:37;vineetsemwal;i was thinking of using weakreference/weakhashmap when i created those patches,are you ok if those are used now?
if you are ok with that,i will create one more patch (will improve second patch) .. 
i have no problem with your suggested solution too in fact that was the first thing i did when i noticed this bug...","14/Aug/14 11:41;cmenzel;We encountered the same problem, except rather than with RefreshingView, we saw it with Wizard components. The underlying issue is the same: In onRemove the FencedFeedbackPanel removes the fence mark from its fence component, but if the FFP is added back later, the fence mark is not restored.

I'll attach a much simpler patch that simply verifies whether the fence mark is still there and recreates it if necessary. All tests run, including one checking for the bad behavior.

[~svenmeier], if you have no objections to this patch, I'll commit it for 6.x and 7.",14/Aug/14 11:45;cmenzel;A simpler fix.,14/Aug/14 11:58;mgrigorov;Looks good to me!,"15/Aug/14 13:00;cmenzel;It fixes the easy case, but in our application I'm still seeing an issue when using FencedFeedbackPanels together with Wizards. It seems that the onbeforerender/onconfigure thing of the FencedFeedbackPanel inside the WizardStep comes too late in restoring its fence. By that time the outer one in the Wizard itself has already grabbed all the messages.

I'm investigating this. Unfortunately we do not have an onAdd like we have an onRemove. I'm not certain yet, but I have a feeling that I'll need an onAdd to fix this (and onAdd might be useful in general). I'll update here once I have found out more.","15/Aug/14 13:04;mgrigorov;Can you use onInitialize() ?
The idea is almost the same.
It should be called really soon if the container/parent has a ref to the page.","15/Aug/14 17:53;cmenzel;Not really. onInitialize is a very different thing. It's only called exactly once and is basically a delayed constructor. I need something that will be called whenever a component is added *or re-added* to the page component tree. onRemove is called on the entire tree that is removed, we have no complement for that when something is added back.

I've tried it, and it fixed the problem in this ticket. I'll clean it up a little and push it in a branch so you can have a look at it.","15/Aug/14 21:00;cmenzel;The problem in the Wizard is when you go one step forward by calling next() and then come back with previous(). next() causes onRemove() in the WizardStep and all its children, so the FencedFeedbackPanel clears the fence marker. When you come back to that WizardStep with previous() it is re-added to the page but obviously not re-initialized. The component has no way of knowing that this happened, so it can't reliably recreate the fence.

I have a quickstart for this that I'll upload, to illustrate.","18/Aug/14 07:09;mgrigorov;I remember there was onAdd() in 1.2.x but it has been removed for some reason. Ask in dev@ and hopefully someone from the other devs will give more details.

I think having onInitialize() and onAdd() will lead to more confusion.
You can think of onInitialize() as a delayed constructor but I see it as a callback method which is called when the component has access to bot its parent and its markup. The extra bonus is that you can call overridable methods there, like AjaxLink's newAjaxEventBehavior(String event) and be sure that the AjaxLink component is fully initialized.

By having onAdd() additionally the application developer will be confused because it won't be clear which callback is called first and which second and what semantics they provide.

Better ask in dev@. Very few devs are subscribed to JIRA notifications.",18/Aug/14 08:40;cmenzel;I created WICKET-5677 to track the improvement I think we need for this.,"18/Aug/14 08:58;cmenzel;A quickstart that demonstrates the problem. A single info message is generated and should be shown only in the ""container feedback"" panel. After using ""next"" and ""previous"" to step backwards and forwards, the message shows up twice - once where it is supposed to be, and once in the FFP used by the wizard.","18/Aug/14 12:09;jira-bot;Commit 30a2849ed6276ac9eb91287a467a77cc0e36dc80 in wicket's branch refs/heads/WICKET-5265 from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=30a2849 ]

Merge branch 'WICKET-5677' into WICKET-5265
","18/Aug/14 12:09;jira-bot;Commit 19af28e9c506433316500a0d56151bc49551acfa in wicket's branch refs/heads/WICKET-5265 from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=19af28e ]

WICKET-5265 FencedFeedbackPanel uses onReAdd to recreate fence mark
","18/Aug/14 12:11;cmenzel;I pushed branch ""WICKET-5265"" with a fix based on WICKET-5677. (if nobody objects in the next couple days, i will do a squash merge to have one clean commit in the main branch later, including issue number, of course.)","29/Sep/14 11:06;jira-bot;Commit 0eb596df3003006cb3d99988fc2e1f65e16c14cb in wicket's branch refs/heads/master from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0eb596d ]

WICKET-5265 recreate fence mark when removing and readding a fencedfeedbackpanel
","29/Sep/14 11:15;jira-bot;Commit 734ecfbe1bec8436d31248612aa1bfe868e32342 in wicket's branch refs/heads/wicket-6.x from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=734ecfb ]

WICKET-5265 recreate fence mark when removing and readding a fencedfeedbackpanel
",,,,,,,,,,,,,,
CheckGroupSelector with disabled checks,WICKET-5723,12746444,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,froque,froque,07/Oct/14 17:14,07/Oct/14 21:58,13/Mar/19 23:18,07/Oct/14 21:58,6.17.0,,,,,,,,6.18.0,7.0.0-M4,,,wicket,,,0,,,,,,,,"to replicate use a CheckGroupSelector with some disabled Check's.

Clicking on the ""select all"" checkbox selects all enabled checkboxes but does not select itself as checked, as it should 

clicking once more on the ""select all"" checkbox selects itself but does nothing to the checkboxes. 

clicking a third time on the ""select all"" checkbox deselects all checkboxes.",,,,,,,,,,,,,,,,,,,,,,,,,07/Oct/14 17:15;froque;checkgroup.tgz;https://issues.apache.org/jira/secure/attachment/12673386/checkgroup.tgz,,,,1.0,,,,,,,,,,,,,,,,,,,2014-10-07 21:56:26.522,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 07 21:58:41 UTC 2014,,,,,,0|i20w1j:,9223372036854775807,,,,,,,,07/Oct/14 17:15;froque;quickstart to better explain the problem,"07/Oct/14 21:56;jira-bot;Commit c609909e28e7b305661a8e8cb89cb0c531d987f0 in wicket's branch refs/heads/master from svenmeier
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c609909 ]

WICKET-5723 CheckGroupSelector with disabled checks","07/Oct/14 21:56;jira-bot;Commit a256f030ede93addb67f3a7bf0582c37b29d663b in wicket's branch refs/heads/wicket-6.x from svenmeier
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a256f03 ]

WICKET-5723 CheckGroupSelector with disabled checks
",07/Oct/14 21:58;svenmeier;disabled checkboxes are now ignored when updating the state of the selector,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MockHttpServletRequest.buildRequest() should work for parameters with multiple values with multipart content type,WICKET-5714,12745482,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,dennis.waldherr@bosch-fs.com,dennis.waldherr@bosch-fs.com,02/Oct/14 12:41,07/Oct/14 09:20,13/Mar/19 23:18,02/Oct/14 13:15,1.5.11,,,,,,,,1.5.13,6.18.0,7.0.0-M4,,wicket,,,0,,,,,,,,"The following code in the method MockHttpServletRequest.buildRequest() iterates over all values of a parameter. When writing the value to the outputstream it doesn't use the iteration variable, but instead retrieves the value with ""post.getParameterValue(parameterName)"" which always returns the first element of the list.
{code}
			List<StringValue> values = post.getParameterValues(parameterName);
				for (StringValue value : values)
				{
					newAttachment(out);
					out.write(""; name=\"""".getBytes());
					out.write(parameterName.getBytes());
					out.write(""\"""".getBytes());
					out.write(crlf.getBytes());
					out.write(crlf.getBytes());
					out.write(post.getParameterValue(parameterName).toString().getBytes());
					out.write(crlf.getBytes());
				}
{code}
So for a given list of values ""3"", ""2"" and ""1"", it actually writes ""3"", ""3"" and ""3"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-10-02 13:15:08.551,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 07 09:20:59 UTC 2014,,,,,,0|i20q4n:,9223372036854775807,,,,,,,,"02/Oct/14 13:15;jira-bot;Commit fb1f57f4d2be9534580b3a8e54ce98eb07adf77f in wicket's branch refs/heads/wicket-1.5.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fb1f57f ]

WICKET-5714 MockHttpServletRequest.buildRequest() should work for parameters with multiple values with multipart content type
","02/Oct/14 13:15;jira-bot;Commit 7ee559486f53c62947171a150508893c9a5d16d1 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7ee5594 ]

WICKET-5714 MockHttpServletRequest.buildRequest() should work for parameters with multiple values with multipart content type

(cherry picked from commit fb1f57f4d2be9534580b3a8e54ce98eb07adf77f)
","02/Oct/14 13:15;jira-bot;Commit 41e71f9de5d84f24b80da12d2c5bd76216a5cf00 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=41e71f9 ]

WICKET-5714 MockHttpServletRequest.buildRequest() should work for parameters with multiple values with multipart content type

(cherry picked from commit fb1f57f4d2be9534580b3a8e54ce98eb07adf77f)
","02/Oct/14 13:15;mgrigorov;Fixed!
Thank you!","02/Oct/14 14:24;dennis.waldherr@bosch-fs.com;Thanks, that was quick :)","06/Oct/14 09:04;dennis.waldherr@bosch-fs.com;Hi, when is 1.5.13 going to be released?","07/Oct/14 06:35;mgrigorov;We recently released 1.5.12. This issue is the only one so far for 1.5.x series - https://issues.apache.org/jira/browse/WICKET/?selectedTab=com.atlassian.jira.jira-projects-plugin:roadmap-panel
Is it possible to workaround it locally ? If it is not possible then I'll release 1.5.13 when 6.18.0 is released.","07/Oct/14 09:20;dennis.waldherr@bosch-fs.com;Thanks, we ""patched"" our unit tests locally as a workaround.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket-atmosphere should warn about phone home,WICKET-5719,12745732,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,papegaaij,papegaaij,03/Oct/14 13:17,03/Oct/14 13:41,13/Mar/19 23:18,03/Oct/14 13:41,6.17.0,7.0.0-M3,,,,,,,6.18.0,7.0.0-M4,,,wicket-atmosphere,,,0,,,,,,,,"Atmosphere has phone home code, which not only calls home, but also Google Analytics. This call is completely silent. Although it's not Wicket's job to condemn this behavior, I believe it's not a good thing that this is enabled by default and completely silent. We should at least warn our users if this option is not disabled.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-10-03 13:36:08.623,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 03 13:41:28 UTC 2014,,,,,,0|i20rrj:,9223372036854775807,,,,,,,,"03/Oct/14 13:36;jira-bot;Commit 2ab12e9520c9b3de194a49bc257a250ccf126e16 in wicket's branch refs/heads/wicket-6.x from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2ab12e9 ]

WICKET-5719: log warning if atmosphere google analytics is enabled
","03/Oct/14 13:39;jira-bot;Commit f0a6399c0bda530513734a6c76c7941d028b4c6f in wicket's branch refs/heads/master from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f0a6399 ]

WICKET-5719: log warning if atmosphere google analytics is enabled
","03/Oct/14 13:41;papegaaij;Wicket will now log a warning at startup if Google Analytics is enabled. To disable the Google Analytics call, you need to upgrade to Atmosphere 2.3 (as of today not yet released) and disable its analytics.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"wicket-autocomplete prevents ""change""-listener when leaving input via mouse click",WICKET-5716,12745503,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,svenmeier,svenmeier,02/Oct/14 13:54,03/Oct/14 06:45,13/Mar/19 23:18,03/Oct/14 06:45,6.17.0,7.0.0-M3,,,,,,,6.18.0,7.0.0-M4,,,wicket-extensions,,,0,,,,,,,,"wicket-autocomplete's ignoreChange is true initially, this prevents ""change"" events being fired when the user enters something and then clicks somewhere else",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-10-03 06:44:31.87,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 03 06:45:26 UTC 2014,,,,,,0|i20q9b:,9223372036854775807,,,,,,,,"03/Oct/14 06:44;jira-bot;Commit 110a4f98a07c1cbaf3995792edc8f9fd62f23861 in wicket's branch refs/heads/wicket-6.x from svenmeier
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=110a4f9 ]

WICKET-5716 trigger change reliably after closing the popup
","03/Oct/14 06:44;jira-bot;Commit c93d0186c60e52e2108fd5c0d2f4dfa893931830 in wicket's branch refs/heads/master from svenmeier
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c93d018 ]

WICKET-5716 trigger change reliably after closing the popup
","03/Oct/14 06:45;svenmeier;""change"" is now triggered reliably after closing of the popup",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Autocomplete example renders the search term,WICKET-5684,12737028,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,mgrigorov,mgrigorov,27/Aug/14 07:20,03/Oct/14 05:49,13/Mar/19 23:18,28/Aug/14 09:23,6.17.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket-examples,wicket-extensions,,0,,,,,,,,"While testing 6.17 release candidate I noticed that the example for the autocompleter is broken.
Entering ""g"" and selecting ""Germany"" from the drop down adds both ""g"" and ""Germany"" to the list below. It should add only ""Germany"".",,,,,,,,,,,,,,,,,,,,,WICKET-5716,,,,27/Aug/14 12:00;bitstorm;myproject.tar.gz;https://issues.apache.org/jira/secure/attachment/12664628/myproject.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2014-08-27 07:38:10.087,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Aug 28 09:20:47 UTC 2014,,,,,,0|i1zdov:,9223372036854775807,,,,,,,,27/Aug/14 07:22;mgrigorov;I'm testing with latest wicket-6.x so it may be related to a commit after the cut of 6.17.0 (e.g. Emond's window onload change in wicket-event-jquery.js),"27/Aug/14 07:38;svenmeier;The problem shows up in the 6.17.0 release candidate too.

Probably caused by WICKET-5609.",27/Aug/14 12:01;bitstorm;Looks like the problem was present long before. See attached quickstart with ver. 6.2.0,"27/Aug/14 12:13;jira-bot;Commit cfab8755bfeb51bfba8b7daeae4cfebe4c695cbe in wicket's branch refs/heads/master from adelbene
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=cfab875 ]

WICKET-5684 Autocomplete example renders the search term",27/Aug/14 12:25;bitstorm;I've improved ignoreChange logic. I think it's ok now.,27/Aug/14 12:33;mgrigorov;Yep. Wicket 7 works fine now.,"27/Aug/14 17:00;jira-bot;Commit 594d36ec8ccec75b0a88ab4d9d967db5c8a05ecd in wicket's branch refs/heads/wicket-6.x from adelbene
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=594d36e ]

WICKET-5684 Autocomplete example renders the search term
",28/Aug/14 09:20;dashorst;can this issue be resolved? Then I can rebuild the releases tomorrow...,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnChangeAjaxBehavior should listen for both 'inputchange' and 'change' events for TextField and TextArea,WICKET-5711,12744932,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,30/Sep/14 12:41,30/Sep/14 13:40,13/Mar/19 23:18,30/Sep/14 13:02,6.17.0,,,,,,,,6.18.0,7.0.0-M4,,,wicket,,,0,,,,,,,,"WICKET-5603 introduced a regression that a TextField using OnChangeAjaxBehavior doesn't work anymore when used as date picker, or Select2.
The problem is that usually extensions like DatePicker and Select2 will fire 'change' event when they update the text input.

OnChangeAjaxBehavior should use both 'inputchange"" and ""change"" events for TextField and TextArea components.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-30 12:55:52.656,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 30 13:40:05 UTC 2014,,,,,,0|i20mqv:,9223372036854775807,,,,,,,,"30/Sep/14 12:55;jira-bot;Commit 6501ab7396e888b0eccd70b0b502334a69c823a8 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6501ab7 ]

WICKET-5711 OnChangeAjaxBehavior should listen for both 'inputchange' and 'change' events for TextField and TextArea
","30/Sep/14 12:59;jira-bot;Commit 5837817c94c7bb707f187526fb4e4e084f10d8f3 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5837817 ]

WICKET-5711 OnChangeAjaxBehavior should listen for both 'inputchange' and 'change' events for TextField and TextArea

(cherry picked from commit 6501ab7396e888b0eccd70b0b502334a69c823a8)

Conflicts:
	wicket-core/src/main/java/org/apache/wicket/ajax/form/OnChangeAjaxBehavior.java
	wicket-core/src/test/java/org/apache/wicket/ajax/form/OnChangeAjaxBehaviorTestPage_expected.html
","30/Sep/14 13:02;mgrigorov;Fixed it by using both ""inputchange"" and ""change"" for text field and area. And just ""change"" for everything else.

[~svenmeier] I like this approach better than the one with the warning in 6.x and exception in 7.x because there is a way to support them without limitations.
Please reopen if you don't agree.",30/Sep/14 13:40;svenmeier;I'm fine with this change now. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnChangeAjaxBehavior attached to DropDownChoice produces two Ajax requests in Chrome v35,WICKET-5603,12717112,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,redfield,redfield,28/May/14 19:49,30/Sep/14 12:42,13/Mar/19 23:18,30/Sep/14 12:32,6.9.1,7.0.0-M1,,,,,,,6.17.0,7.0.0-M3,,,wicket,,,1,,,,,,,,"I have a DropDownChoice with attached OnChangeAjaxBehavior, like this:
{code:borderStyle=solid}
new DropDownChoice<>(""dd"", new Model<>(), Arrays.asList( ""First"", ""Second""))
    .add( new OnChangeAjaxBehavior() {
        @Override
        protected void onUpdate(AjaxRequestTarget target) {
            System.out.println( ""update"" );
        }
});
{code}

When selecting any of drop down options, two Ajax requests being generated.
It behaves OK in IE, FF and Chrome v34, only Chrome v35 is affected 
 ",Chrome 35.0.1916.114,,,,,,,,,,,,,,,,,,,,WICKET-5711,,,,28/May/14 19:50;redfield;test.zip;https://issues.apache.org/jira/secure/attachment/12647194/test.zip,05/Jun/14 17:47;bitstorm;wicket.patch;https://issues.apache.org/jira/secure/attachment/12648523/wicket.patch,,,2.0,,,,,,,,,,,,,,,,,,,2014-05-31 14:26:21.309,,,no_permission,,,,,,,,,,,,395320,,,Tue Sep 30 12:32:00 UTC 2014,,,,,,0|i1w2an:,395451,,,,,,,,"31/May/14 14:26;bitstorm;OnChangeAjaxBehavioris triggered by two events: 'inputchange' and 'change'. Some browser (like Chrome and Opera) are compatible with boyh of them, that's why AJAX request is done twice.
I did some tests and I think we could solve this issue using just 'change' event. I've tried this fix with Opera, Chrom Firefox and IE 8.
In the meantime as workaround you could substitute OnChangeAjaxBehavior with 'new AjaxFormComponentUpdatingBehavior(""change"")' .","31/May/14 15:02;mgrigorov;To listen for changes on HTMLSelect element one should use ""change"" event (with AjaxFormComponentUpdatingBehavior).
It seems with ver. 35 Chrome started firing ""input"" event is for HTMLSelect too. I have no idea why ...
""input"" event is for <input type=""text""> and is fired on every added/removed character.

Another solution is to stop the event propagation (org.apache.wicket.ajax.attributes.AjaxRequestAttributes.EventPropagation#STOP_IMMEDIATE) but this may have side effects for the different applications.

So I think OnChangeAjaxBehavior should be disallowed for anything but TextField and TextArea.
See:
- http://help.dottoro.com/ljhxklln.php
- http://msdn.microsoft.com/en-us/library/ie/gg592978(v=vs.85).aspx
- https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers.oninput
","31/May/14 15:06;mgrigorov;By disallow I mean :
- log a warning in 6.x
- throw an exception in 7.x","03/Jun/14 12:12;bitstorm;Why not checking for the type of component inside updateAjaxAttributes? we could use event 'inputchange' for TextArea and TextField, while event 'change' will be used for any other component.","03/Jun/14 12:21;mgrigorov;Yes, this should work !","05/Jun/14 03:09;ceefour;Hopefully this gets fixed in Wicket 6.16. We're using {{OnChangeAjaxBehavior}} extensively :)

[~bitstorm] Thanks for the workaround. ",05/Jun/14 17:47;bitstorm;I'm working on the fix that I've attached as patch file. I will test it in the verz next days and if everything is ok it will be part of 6.16,"05/Jun/14 18:27;mgrigorov;I think Clirr will complain on:

  -	public static final String EVENT_NAME = ""inputchange change"";

You can keep it deprecated.
The rest looks OK. I haven't tested it locally though!

AFAIK 6.16.0 will be cut tomorrow. But don't rush. There is a workaround.",05/Jun/14 18:45;bitstorm;Ok. The problem is that I'm not at home these days and I don't have a VM to extensively test it. I must wait until tomorrow evening (CET),"11/Jun/14 12:00;ceefour;I was hoping this to get into 6.16 :( but anyway, if 6.16 has been released, I haven't seen it in maven.org yet?","30/Sep/14 09:21;svenmeier;This change breaks applications using OnChangeAjaxBehavior on TextFields together with a datepicker.
When the datepicker sets a value into the input, no ""inputchange"" is fired.","30/Sep/14 09:24;svenmeier;IMHO the original request was invalide: using a DropDownChoice together with OnChangeAjaxBehavior is bogus.

OnChangeAjaxBehavior is a special solution for TextFields, and it should listen for ""inputchange"" *and* ""change"" as it has done previously.
A check as Martin has suggested (warning for 6.x, exception for 7.x) would be the right fix.","30/Sep/14 09:41;ceefour;I'd like to add that {{wicket-select2}} no longer works with 6.17's {{OnChangeAjaxBehavior}} (previously works with 6.16).

I had to use {{new AjaxFormComponentUpdatingBehavior(""change"")}} instead for 6.17.","30/Sep/14 12:30;mgrigorov;I like the automatic detection with #updateAjaxAttributes().
We just need to revert the support for ""change"" for TextField and TextArea.","30/Sep/14 12:32;mgrigorov;Closing this ticket. 
A new one will fix the regression and link back to this.",,,,,,,,,,,,,,,,,,,,,
WebApplication#unmount() unmounts the whole compound mapper if some of its inner ones matches,WICKET-5698,12740391,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,jesselong,mgrigorov,mgrigorov,10/Sep/14 12:10,29/Sep/14 21:40,13/Mar/19 23:18,29/Sep/14 21:40,6.17.0,7.0.0-M3,,,,,,,6.18.0,7.0.0-M4,,,wicket,,,0,,,,,,,,"From dev@ mailing lists: http://markmail.org/message/wmdgbrhvrvaeygvr

WebApplication.unmount() calls getRootRequestMapperAsCompound(), and 
calls unmount() on that.

getRootRequestMapperAsCompound() checks if the root request mapper is a 
compound, if not, wraps it in a compound, sets the compound as root and 
returns the compound.

CompoundRequestMapper.unmount() identifies which of the mappers added 
directly to the compound handle the url, and removes them.

The problem:
If the original root mapper was a single wrapper, or layer of wrappers, 
with the actual mounted mapper wrapped some levels down, then the whole 
wrapper is removed, not just the specific MountedMapper that is wrapped. 
This has the effect of removing every single mapper, leaving root mapper 
as an empty compound.

I would like to attempt to provide a patch to fix this, but would like 
guidance on the approach. I have come up with three approaches:

1. Introduce interface IWrappedRequestMapper. This will be an interface 
which has one method: IRequestMapper getWrappedRequestMapper(). We can 
then have all wrapper mappers implement this and work down the tree to 
find the correct MountedMapper (wicket 6) to remove.

2. Have WebApplication hold a reference to a specific 
CompoundRequestMapper, and have all mount()/unmount() operations add and 
remove from this mapper. This compound would need to be added to the 
default list during init. This makes it complicated to work out how to 
do things like have CryptoMapper not apply to mounted pages.

3. Add method unmount() to IRequestMapper, so that wrappers can 
delegate. This obviously can only be done in wicket 7, but we're making 
mounting a problem of every single request mapper, when not even 
Application cares about mounting.",,,,,,,,,,,,,,,,,,,,,,,,,22/Sep/14 23:58;jesselong;WICKET-5698-2.patch;https://issues.apache.org/jira/secure/attachment/12670545/WICKET-5698-2.patch,24/Sep/14 09:51;jesselong;WICKET-5698-3.patch;https://issues.apache.org/jira/secure/attachment/12670942/WICKET-5698-3.patch,22/Sep/14 13:27;mgrigorov;WICKET-5698.patch;https://issues.apache.org/jira/secure/attachment/12670415/WICKET-5698.patch,,3.0,,,,,,,,,,,,,,,,,,,2014-09-22 08:38:55.588,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Sep 29 21:34:20 UTC 2014,,,,,,0|i1zvmv:,9223372036854775807,,,,,,,,"22/Sep/14 08:38;jira-bot;Commit f45ce896d02aeda3c09d56bc4ceac425929973a1 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f45ce89 ]

WICKET-5698 WebApplication#unmount() unmounts the whole compound mapper if some of its inner ones matches
","22/Sep/14 08:42;jira-bot;Commit 6b906d53a917257454cc5f10c5b1d91b321ce8ed in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6b906d5 ]

WICKET-5698 WebApplication#unmount() unmounts the whole compound mapper if some of its inner ones matches

(cherry picked from commit f45ce896d02aeda3c09d56bc4ceac425929973a1)
",22/Sep/14 13:26;mgrigorov;Reopening because compound -> wrapper -> compound -> mapper is not covered.,22/Sep/14 13:27;mgrigorov;Attaching Jesse Long's patch from dev@ mail thread.,"22/Sep/14 23:34;jesselong;WICKET-5698-2.patch - A neatened up version of the patch, with tests.

Summary of patch:

Add new interface IWrappedRequestMapper to mark wrapping request mappers.

Implement IWrappedRequestMapper where appropriate.

Remove ICompoundRequestMapper#unmount(), as WebApplication now takes responsibility for this.

Remove package private CompoundRequestMapper#size() which was only used in now non-existant tests.

Implement mapper tree traversing unmount in WebApplication.

Create WebApplicationTest to test unmounting.",22/Sep/14 23:58;jesselong;Lets do that without ConcurrentModificationExceptions,"24/Sep/14 08:27;mgrigorov;We already have org.apache.wicket.request.IRequestHandlerDelegate.
To keep it consistent in the naming I suggest to rename IWrappedRequestMapper to IRequestMapperDelegate","24/Sep/14 08:45;mgrigorov;in WebApplication.java:
{code}
/*
 * Only attempt to unmount if root request mapper is either a compound, or wraps a compound to avoid
 * leaving the application with no mappers installed.
 */
{code}

leaving an empty compound mapper is no much better than no mapper at all. But it is OK this way.","24/Sep/14 08:53;mgrigorov;Looks good to me!
It is just the name of IWrappedRequestMapper that bothers me. Maybe it is more accurate than IRequestHandlerDelegate but the consistency is more important IMO.","24/Sep/14 09:51;jesselong;WICKET-5698-3.patch

I agree that IRequestMapperDelegate is a slightly less accurate name, but that consistency is more important in this case. I have attached an updated patch.

As a side effect of the rename, protected final CryptoMapper#getWrappedMapper() has been renamed to #getDelegateMapper(). Slight further incompatibility with Wicket 6, felt only by subclasses of CryptoMapper.","24/Sep/14 10:05;mgrigorov;We can keep the old method as deprecated and remove it in Wicket 8.
This is what the migration-friendly libraries do :-)","29/Sep/14 21:19;jira-bot;Commit d06f84d1b87011e5c152c5fb3f05ae50c1c58cda in wicket's branch refs/heads/master from [~jesselong]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d06f84d ]

WICKET-5698 WebApplication#unmount() unmounts the whole compound mapper if some of its inner ones matches
","29/Sep/14 21:34;jira-bot;Commit ed07f6b38ff29d3ff46357db8252656ca2cc2b97 in wicket's branch refs/heads/wicket-6.x from [~jesselong]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ed07f6b ]

WICKET-5698 WebApplication#unmount() unmounts the whole compound mapper if some of its inner ones matches
",,,,,,,,,,,,,,,,,,,,,,,
WebSocketRequestHandler is not set as a scheduled and thus RequestCycle#find(AjaxRequestTarget.class) doesn't work ,WICKET-5701,12742059,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,17/Sep/14 07:00,17/Sep/14 12:47,13/Mar/19 23:18,17/Sep/14 12:45,6.17.0,,,,,,,,6.18.0,7.0.0-M4,,,wicket-native-websocket,,,0,,,,,,,,"As discussed at https://groups.google.com/d/topic/wicket-jquery-ui/fw6TdyO5o18/discussion AbstractWebSocketProcessor doesn't schedules the WebSocketRequestHandler in the request cycle and thus it is not reachable for user code via RequestCycle#find(Class) API.

Additionally the configured application RequestCycle listeners are not notified.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-17 12:45:01.205,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 17 12:47:11 UTC 2014,,,,,,0|i2057b:,9223372036854775807,,,,,,,,"17/Sep/14 12:45;jira-bot;Commit 087c0a26c90f433748c3132b463a640c41cbb0f2 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=087c0a2 ]

WICKET-5701 WebSocketRequestHandler is not set as a scheduled and thus RequestCycle#find(AjaxRequestTarget.class) doesn't work

(cherry picked from commit 482c595f5c1b2ee5032140ed0ede79d9f48af26f)
","17/Sep/14 12:47;jira-bot;Commit 482c595f5c1b2ee5032140ed0ede79d9f48af26f in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=482c595 ]

WICKET-5701 WebSocketRequestHandler is not set as a scheduled and thus RequestCycle#find(AjaxRequestTarget.class) doesn't work
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wicket-atmosphere 0.20 should use wicket-webjars 0.4.3,WICKET-5699,12740704,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,rudi,rudi,11/Sep/14 07:25,11/Sep/14 07:31,13/Mar/19 23:18,11/Sep/14 07:30,6.17.0,,,,,,,,6.18.0,,,,wicket-atmosphere,,,0,,,,,,,,"wicket-atmosphere 0.20 still used wicket-webjars 0.4.2, should use wicket-webjars 0.4.3

perhaps a 0.20.1 is good",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-11 07:28:21.149,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Sep 11 07:31:43 UTC 2014,,,,,,0|i1zwy7:,9223372036854775807,,,,,,,,"11/Sep/14 07:28;mgrigorov;Why ?
Is there a new functionality in 0.4.3 that would make wicket-atmosphere better ?

You can declare 0.4.3 in your pom.xml and it will be used by wicket-atmosphere instead of 0.4.2.","11/Sep/14 07:30;jira-bot;Commit e954a5e18064c90aaa3e530f3666609c5c205907 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e954a5e ]

WICKET-5699 wicket-atmosphere 0.20 should use wicket-webjars 0.4.3
",11/Sep/14 07:31;mgrigorov;Updated it to 0.4.3 but I don't see a reason to make a release just for this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AbstractAjaxTimerBehavior fails to trigger,WICKET-5682,12736461,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,papegaaij,papegaaij,25/Aug/14 05:56,29/Aug/14 07:54,13/Mar/19 23:18,29/Aug/14 07:54,6.16.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket,,,0,,,,,,,,"AbstractAjaxTimerBehavior fails to trigger in some circumstances. Wicket.Event.add is called to trigger Wicket.Timer.set on the load event. The code in Wicket.Event.add adds a domready listener, which registers the onload listener as soon as the dom is ready. However, the browser fires onload before it fires domready, therefore the registered listener is never triggered and Wicket.Timer.set is not called.

I'm not sure if this behavior is specific to recent versions of Google Chrome, but it happens quite consistently (but not always). I think a special case for onload is needed:
$(window).load(function() {
    $(document).ready(function() { ... });
});",Chrome 36,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-25 15:07:28.128,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Aug 25 15:13:42 UTC 2014,,,,,,0|i1za8f:,9223372036854775807,,,,,,,,"25/Aug/14 13:59;papegaaij;I've been able to verify this behavior with our application, using the following code:
{code}
response.render(OnLoadHeaderItem.forScript(""console.log('wicket window load');""));
response.render(OnDomReadyHeaderItem.forScript(""console.log('dom ready');""));
response.render(JavaScriptHeaderItem.forScript(""jQuery(window).on('load', function() {console.log('js window load');});"", ""test""));
{code}

Sometimes it shows:
{code}
dom ready
js window load
wicket window load 
{code}

But sometimes it shows:
{code}
js window load
dom ready
{code}

This proves that the load event is not always triggered after dom ready (at least not the jQuery dom ready event). I'll try to fix the bug with the code snippet I added to the bug description.","25/Aug/14 15:07;jira-bot;Commit cf8fce943b5cc22ab54c4e028a062f6a17dafa3c in wicket's branch refs/heads/wicket-6.x from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=cf8fce9 ]

WICKET-5682: always trigger onload after domready
","25/Aug/14 15:09;jira-bot;Commit 82d40d499c6d89fbd565492fa4098553a47c6ddd in wicket's branch refs/heads/master from [~papegaaij]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=82d40d4 ]

WICKET-5682: always trigger onload after domready
","25/Aug/14 15:13;papegaaij;Fixed by adding a special case for 'load' on window, which registers a load listener wrapping the code in a domready listener. Both normal order (domready -> load) and reversed order (load -> domready) now trigger the onload code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restore the functionality an IPageManager to be able to clean all data/pages for the current session ,WICKET-5688,12737358,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,28/Aug/14 11:14,29/Aug/14 06:43,13/Mar/19 23:18,29/Aug/14 06:43,6.16.0,7.0.0-M2,,,,,,,6.17.0,7.0.0-M3,,,wicket,,,0,,,,,,,,"As agreed at http://markmail.org/message/gcqk5hilaxo2jo7t IPageManager#sessionExpired(String sessionId) should be reworked to IPageManager#clear().
The new method intentionally doesn't receive the sessionId as a parameter because the sessionId could be replaced by the web container for security reasons. The implementation of #clear() knows how to find the sessionId used to store the pages for the current http session.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-28 11:18:45.636,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Aug 29 06:43:12 UTC 2014,,,,,,0|i1zfpb:,9223372036854775807,,,,,,,,"28/Aug/14 11:18;jira-bot;Commit b8382271ed8bcf57157a4b10c02f6a4948e4a35a in wicket's branch refs/heads/5688-IPageManager-clear from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b838227 ]

WICKET-5688 Restore the functionality an IPageManager to be able to clean all data/pages for the current session
","28/Aug/14 11:22;mgrigorov;The same change can be applied to 6.x without the API changes, i.e. IPageManager#sessionExpired(String) will do the same as the new #clear() method ignoring the passed sessionId.

I think it is a good fix!",28/Aug/14 19:31;svenmeier;Agreed!,"29/Aug/14 06:38;jira-bot;Commit b8382271ed8bcf57157a4b10c02f6a4948e4a35a in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b838227 ]

WICKET-5688 Restore the functionality an IPageManager to be able to clean all data/pages for the current session
","29/Aug/14 06:43;jira-bot;Commit 14b2db712e1cc432327157c4cd3bd5de00a85b23 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=14b2db7 ]

WICKET-5688 Restore the functionality an IPageManager to be able to clean all data/pages for the current session
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PageStoreManager.SessionEntry keeps outdated sessionId when container changes sessionId,WICKET-5164,12645382,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,svenmeier,svenmeier,30/Apr/13 07:25,28/Aug/14 11:16,13/Mar/19 23:18,11/Jul/13 12:11,6.7.0,7.0.0-M1,,,,,,,6.10.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"PageStoreManager keeps the initial sessionId for each SessionEntry.
If the container changes the sessionId later (e.g. Tomcat's ""Session Fixation Protection""), all pages continue to be stored under the the initial sessionId. This is necessary to be able to access old pages even after a change to the sessionId.

However PageStoreManager#sessionExpired(String) passes the *current* sessionId to the PageStore. If it is not longer equal the original sessionId, the PageStore will fail to remove the stored pages for the session. ",,,,,,,,,,,,,,,,,WICKET-5103,,,,WICKET-5688,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-11 11:52:31.312,,,no_permission,,,,,,,,,,,,325744,,,Thu Jul 11 12:11:25 UTC 2013,,,,,,0|i1k75b:,326089,,,,,,,,"09/Jul/13 11:14;svenmeier;PageStoreManger.SessionEntry now implements HttpSessionBindingListener to pass the correct identifier to the PageStore.

This breaks somewhat the abstraction of IPageManagerContext :(. But I didn't find another solution to access the initial sessionId which is used for all access to PageStore.","11/Jul/13 11:52;mgrigorov;I just got:

2013-07-11 14:48:54.278:WARN:oejuc.AbstractLifeCycle:Thread-2: FAILED org.eclipse.jetty.maven.plugin.JettyServer@16bd02f6: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.wicket.page.PageStoreManager$SessionEntry.valueUnbound(PageStoreManager.java:303)
	at org.eclipse.jetty.server.session.AbstractSession.unbindValue(AbstractSession.java:581)
	at org.eclipse.jetty.server.session.AbstractSession.clearAttributes(AbstractSession.java:413)
	at org.eclipse.jetty.server.session.AbstractSession.doInvalidate(AbstractSession.java:380)
	at org.eclipse.jetty.server.session.HashedSession.doInvalidate(HashedSession.java:90)
	at org.eclipse.jetty.server.session.AbstractSession.invalidate(AbstractSession.java:370)
	at org.eclipse.jetty.server.session.HashSessionManager.invalidateSessions(HashSessionManager.java:411)
	at org.eclipse.jetty.server.session.AbstractSessionManager.doStop(AbstractSessionManager.java:274)
	at org.eclipse.jetty.server.session.HashSessionManager.doStop(HashSessionManager.java:139)

while stopping Jetty9.

org.apache.wicket.page.PageStoreManager.SessionEntry#getPageStore() returns null.","11/Jul/13 12:10;svenmeier;It seems Jetty9 destroys the filter/application before unbinding the session values, strange.",11/Jul/13 12:11;svenmeier;now checks whether pageStore is destroyed already,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Inject should require the bean dependency instead of setting null,WICKET-5686,12737040,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,AntonKurniawan,AntonKurniawan,27/Aug/14 08:25,28/Aug/14 09:22,13/Mar/19 23:18,28/Aug/14 09:21,6.16.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket-spring,,,1,,,,,,,,"When using {{@SpringBean}}, if the bean cannot be injected then Wicket will throw {{Exception}}.

However current behavior if when using {{@Inject}} inside component, the field will be left as null. This is inconsistent behavior with what CDI spec and how the ""real"" Spring does it.

Wicket should change its behavior so that {{@Inject}} is always required. If the dependency is optional the user can use {{@SpringBean(required=false)}} as always.",Spring 4.0.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-27 08:40:01.393,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Aug 28 09:22:59 UTC 2014,,,,,,0|i1zdrj:,9223372036854775807,,,,,,,,27/Aug/14 08:27;AntonKurniawan;Tag [~ceefour],27/Aug/14 08:40;mgrigorov;Please give a reference to the chapter in CDI spec saying that the value is required.,"27/Aug/14 08:49;mgrigorov;I tend to agree with the suggested change.
http://stackoverflow.com/questions/19485878/can-inject-be-made-optional-in-jsr-330-like-autowirerequired-false and http://stackoverflow.com/questions/7837010/replacing-com-google-inject-with-javax-inject suggest that Spring/Guice specific annotations should be used when optional dependency is needed.
CDI suggests to use {{@Inject Instance<Type> optionalType}} for this case too.","28/Aug/14 09:03;jira-bot;Commit ee4ebba656ceaa3f55f74158e681a4b46b339c74 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ee4ebba ]

WICKET-5686 @Inject should require the bean dependency instead of setting null

Make fields annotated with @Inject required (Spring)
","28/Aug/14 09:04;jira-bot;Commit f5ce3f27cfaf9a0ece3f6c0c203cde578337d8fc in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f5ce3f2 ]

WICKET-5686 @Inject should require the bean dependency instead of setting null

Add test case for Guice
","28/Aug/14 09:21;mgrigorov;Changed to required for Spring.
Wicket-Guice already threatened it as required.
Added test cases for both.","28/Aug/14 09:21;jira-bot;Commit 8e794fc468c1142b218d33ea3cbb67584d6c1441 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8e794fc ]

WICKET-5686 @Inject should require the bean dependency instead of setting null

Make fields annotated with @Inject required (Spring)

(cherry picked from commit ee4ebba656ceaa3f55f74158e681a4b46b339c74)
","28/Aug/14 09:22;jira-bot;Commit b28027421458ccc47b832631d434ea7f5329b290 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b280274 ]

WICKET-5686 @Inject should require the bean dependency instead of setting null

Add test case for Guice

(cherry picked from commit f5ce3f27cfaf9a0ece3f6c0c203cde578337d8fc)
","28/Aug/14 09:22;ceefour;Thank you [~mgrigorov]
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow preserving of the parsed PageParameters when re-creating an expired page,WICKET-5539,12702749,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,phantom,phantom,20/Mar/14 22:30,26/Aug/14 17:08,13/Mar/19 23:18,12/Aug/14 08:51,6.14.0,,,,,,,,6.17.0,,,,wicket,,,1,expiration,mountBookmarkablePage,,,,,,"There is a bookmarkable page mounted, for example, to:
/page/${entityId}

This page contains StatelessForm.
Submitting of form after session expire lead to following:

org.apache.wicket.core.request.mapper.MountedMapper invokes AbstractBookmarkableMapper.processListener to obtain IRequestHandler to handle submitting of form. 
But there is cleaning of PageParameters within processListener on line 256 (Wicket 6.14) which cleaning ""entityId"" parameter as well and created page finally has no ""enityId"" and (in our case) redirects to 404.

I see that this cleaning of page parameters was implemented due to Wicket-4594. But I think, just checking for pageId is unsufficient, because pageId might be not null, but actual page may be already expired and new instance should be created.",,,,,,,,,,,,,,,,,WICKET-5669,WICKET-4594,,,,,,,01/Apr/14 14:21;phantom;wicket5539.zip;https://issues.apache.org/jira/secure/attachment/12638070/wicket5539.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2014-03-21 14:18:28.066,,,no_permission,,,,,,,,,,,,381087,,,Wed Aug 13 16:06:37 UTC 2014,,,,,,0|i1tnpj:,381363,,,,,,,,"21/Mar/14 14:18;mgrigorov;Please try with 6.15.0-SNAPSHOT.
There were some regressions - see WICKET-5521",24/Mar/14 03:51;phantom;Exactly the same behaviour:( During investigation also found that if 'getPageSettings().setRecreateMountedPagesAfterExpiry(false);' SignInPage doesn't allow to login because unpredictable PageExpiredException.,"24/Mar/14 07:50;mgrigorov;Please provide a quickstart.
Thanks!","24/Mar/14 09:06;mgrigorov;I've re-read the ticket description and I think this is the expected behavior.
Regardless the fact that you use StatelessForm it is obvious that your page is stateful because of another component/behavior that makes it stateful. 
If the pageId was missing, i.e. the page was truly stateless, then the form submit would create a new page instance and pass the entityId as a parameter.","01/Apr/14 14:21;phantom;Please find quick start is in attachment.

TestCase:
1) Run mvn clean package jetty:run
2) Goto ""home page""
3) Try to find ""some entity"": just enter some not empty query and click submit.
4) Try several time click to ""ajax link"".
5) Wait for >1 min
6) Try to click ""ajax link"" one more time

Expected results: page rerendered, entityId is the same, but count reseted to 0, because page was recreated due to http timeout.

Actual results: page lost ""entityId"" and rendered without corresponding ""entity"" ","01/Apr/14 17:06;phantom;Martin,

The problem is in following your statement:

""If the pageId was missing, i.e. the page was truly stateless, then the form submit would create a new page instance and pass the entityId as a parameter.""
Actual results: new page instance recreated with empty PageParameters. And imho - that's a bug.

P.S. In quick start common Form has been used. So it's not related to ""stateless"" nature of StatelessForm.","25/Apr/14 09:51;mgrigorov;In the quickstart there is a usage of Form component, not StatelessForm.
But even if it was StatelessForm there are also Ajax components in use. 
Stateful pages cannot be recreated as in their last state after session/page expiration.

The form submit request or Link click request is a request to a Wicket interface listener (i.e. #onSubmit(), #onClick(), etc.). Their request parameters are not used to update the Page's #getPageParameters() in normal (not expired) requests. This is the reason why these parameters are not used for the recreation of the page too.

Imagine your form submit sends sensitive data, like a password. Without the current behavior the sensitive data will appear in the page's url as a plain text in the query parameters when a page is recreated. This I would call a BUG !","25/Apr/14 09:52;mgrigorov;Please start discussion in dev@ mailing list if you don't agree with me.
I'd be glad to hear more opinions from other developers and users.","05/May/14 13:14;mgrigorov;Added a link to the mail discussion at dev@ mailing list.
Unfortunately there were no other opinions ... :-(","07/May/14 19:14;bgooren;Too bad that this is closed... We are running into the same issue in quite some of our projects.

We use stateful, bookmarkable urls so that after session expiry the requested page can be recreated.
Practical example: an app manages any number of sites. We have a screen where you can see the orders for a certain site, mounted at /site/${site}/orders/list. When clicking an order (stateful link) on this screen, after session expiry I'd expect to at least see a fresh instance of the page (with the ""site"" param still intact!).

Since WICKET-4594 throws away the page parameters, we can no longer render the list of orders. In effect this means there is absolutely no benefit in making this page bookmarkable.
The url looks bookmarkable, but isn't.
Going a step further, I think this behavior contradicts what IPageSettings#getRecreateMountedPagesAfterExpiry() is for:

bq. When enabled (default), urls on mounted pages will contain the full mount path, including PageParameters, allowing wicket to reinstantiate the page if got expired. When disabled, urls only use the page id. If this setting is enabled, you should take care that names form fields on mounted pages do not clash with the page parameters.

I've always read that in the sense that *I am responsible* for not putting sensitive data in the url when this is enabled, and that wicket will provide me the page parameters so I can recreate the page.

Now I understand the scenario described by Martin: what if there is sensitive parameters in the url? But I think that (A) such parameters should not be in the URL in the first place (GET vs POST) and (B) that specific scenario should not stop us (me and the ticket creator) from working as we do.

Can we make this configurable? E.g. a setting like recreateMountedPagesAfterExpiry, maybe getRecreateMountedPagesAfterExpiryWithPageParameters, which determines if page parameters should be passed on to the new page or not. Why should it behave any different from the processing of hybrid urls?",12/Jul/14 18:37;mgrigorov;Reopening to reconsider.,"23/Jul/14 14:01;mgrigorov;Any patches/tests, etc. are welcome!","23/Jul/14 14:06;mgrigorov;In the provided quickstart app there is a form.

Assuming that the null-ification of the PageParameters is removed:
- Initially I search for ""X"". 
- ""X"" is set as named parameter in the url path.
- I wait for session expiration and search for ""Y"".
- Here ""Y"" is ignored and ""X"" still stays in the url.

Is this the desired behavior ?
Or you expect ""Y"" to be set in the url ?
Why ?","08/Aug/14 12:41;gsmet;Hi Martin,

My 2 cents: I really think we should stay with only the parameters of the initial request. It's far more predictive. Combining the parameters might lead to unexpected results.

If the page is expired, being redirected to the exact same page again is OK AFAICS. Maybe, we should even consider adding a warning message in the session or provide a way to do so as it's still a bit surprising for the user.

IIRC there was a project to have 2 sorts of parameters in 7. Is it still in the way? I must admit I was too busy these last months to keep an eye on 7 development.

-- 
Guillaume","08/Aug/14 12:53;mgrigorov;But how to differentiate which params are from the page and which are link/form specific ?
E.g. a page is mounted at ""/some/${path}"" and the initial page request is: /some/a/b?c=d
So the page parameters are: path=a, c=d (named) and 0=b (indexed)
Then the page is expired and a link or a form is clicked/submitted.
How to differentiate ""path"" and ""c"" from any custom parameters the link and form could submit ?
OK, maybe we can improve PageParameters to be aware of named path parameters, so named parameters will be the set of named path and query string ones.
Is is OK to use only the named path parameters and the indexed ones and ignore any query string ones ?","08/Aug/14 12:59;gsmet;Some further thoughts.

Could we keep the pageParameters as is in the processListener method (we don't set it to null) and change getPageParameters() to something like:
{code:java}
        @Override
	public PageParameters getPageParameters()
	{
		if (isNewPageInstance() == false)
		{
			return pageInstance.getPageParameters();
		}
                else
                {
                        return pageParameters;
                }
	}
{code}

This way, the page instance page parameters have precedence.

Maybe we should rename the pageParameters attribute with something like currentRequestPageParameters or candidatePageParameters? I think the current name is misleading as the getter is more clever than we expect it to be and it doesn't always return pageParameters.","08/Aug/14 13:25;gsmet;Martin,

As for now, I was trying to find a mostly working solution for 6.

As for future development, I think that what you propose would work. And I think it could also fix elegantly the problem worked around by the PageParameterAwareMountedMapper of Johannes (namely having a page which doesn't respect the parameter because another page with the pageId already exists for this user): we could check that the ""vital"" parameters are *exactly* the same before considering the page instance is the one you want EVEN if the page id is ok.

I'm wondering if it shouldn't be the responsability of the developer to define the ""vital"" parameters for its pages. The default could be to use the named path parameter but it could be nice to be able to override it.

As for PageParameters, I concur we should have a better separation between the various types of parameters.","11/Aug/14 10:14;jira-bot;Commit 5f0e63c8a91ea74c57ed6ba65a9f8a60d30eb130 in wicket's branch refs/heads/5539-named-parameters-type from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5f0e63c ]

WICKET-5539 Incorrect recreation of page in case of PageExpire

Support named parameters type.
The type is a hint from where the parameter has been read from - the url path, the url query string, or manually set
","11/Aug/14 10:14;jira-bot;Commit e8773fb18da2d763d62a2857335b3c73d491d064 in wicket's branch refs/heads/5539-named-parameters-type from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e8773fb ]

WICKET-5539 Incorrect recreation of page in case of PageExpire

Add javadoc and method to read all named parameters with a given type
","11/Aug/14 10:15;mgrigorov;I've added support for named parameters type in branch ""5539-named-parameters-type"" (branched from Wicket 7.x) - QUERY_STRING, PATH and MANUAL.
I'll extend the quickstart app to have as much use cases as I imagine and make it a proper test case.","11/Aug/14 11:25;mgrigorov;In Wicket 7.x it is possible to re-create the page, pass (all) request parameters as page parameters, and depending on org.apache.wicket.Component#canCallListenerInterfaceAfterExpiry() and org.apache.wicket.settings.PageSettings#getCallListenerInterfaceAfterExpiry() decide whether to execute the action (onClick, onSubmit, etc.).

The change is:
https://git-wip-us.apache.org/repos/asf?p=wicket.git;a=commit;h=a1f862629c223b675a31c4ba9fb7e07c27279090","11/Aug/14 11:35;jira-bot;Commit 46b9ed395b562a82880ffcc6e6cfc1f01e8b172d in wicket's branch refs/heads/5539-hook-for-listener-parameters from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=46b9ed3 ]

WICKET-5539 Incorrect recreation of page in case of PageExpire

Make it possible for custom MountedMappers to use the parsed PageParameters while processing a listener interface

This is a temporary workaround for Wicket 6.x. It is done in a better/configurable way in Wicket 7.x with https://git-wip-us.apache.org/repos/asf?p=wicket.git;a=commit;h=a1f862629c223b675a31c4ba9fb7e07c27279090
","11/Aug/14 11:39;mgrigorov;For Wicket 6.x I could suggest this workaround: http://git-wip-us.apache.org/repos/asf/wicket/commit/46b9ed39
The applications will have to do:
MyApplication#init()
{code}
  mount(new MountedMapper(""/some/path"", SomePage.class) {
    @Override protected PageParameters getPageParametersForListener(PageInfo pageInfo, PageParameters pageParameters) {
       return pageParameters;
    }
});
{code}

instead of 
{code}
  mountPage(""/some/path"", SomePage.class);
{code}

because we could not add new methods to interfaces (like IPageSettings, INamedParameters).

Opinions ?","11/Aug/14 12:16;gsmet;Hi Martin,

Thanks for pursuing this.

The workaround for 6 looks OK to me. It's not pretty but it does the job.

I like what you did in your branch. Maybe it would be a good idea to provide a way to configure:
- which parameters have to be kept using the names
- which parameters have to be kept using the types you introduced
when you define the mapping?

I don't have a specific need for it myself but I think it might be something cool in case someone really wants to define the behavior specifically.","11/Aug/14 14:22;florianbraunsa@gmail.com;Hi Martin,

Thanks for taking a look at this and sorry for joining the conversation late, I was on vacation for a few days.

With the proposed solution for Wicket 6 developers need to know that mountPage should not be used (if PageParameters need to be preserved on page recovery). 
We are maintaining a BaseWebApplication that is used by many separate Wicket applications and I’m concerned developers will miss this and continue using mountPage. And we can’t override mountPage in our BaseApplication since it is final.
Would it be possible to remove final from mountPage so we can provide the overridden MountedMapper to all consumers? 
Or can you think of a another way this can be handled more globally (instead of having to address it with every page mount)?",11/Aug/14 14:26;mgrigorov;I think it is OK to remove final for all mount() methods.,11/Aug/14 14:29;florianbraunsa@gmail.com;Great. I'll work on that change.,"12/Aug/14 07:55;jira-bot;Commit f6eaa937d4cdda9fd04c3c5312eaca66d5fb52a2 in wicket's branch refs/heads/5539-hook-for-listener-parameters from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f6eaa93 ]

WICKET-5539 Allow preserving of the parsed PageParameters when re-creating an expired page

Remove 'final' modifier for all mount related methods in WebApplication
","12/Aug/14 07:55;jira-bot;Commit 46b9ed395b562a82880ffcc6e6cfc1f01e8b172d in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=46b9ed3 ]

WICKET-5539 Incorrect recreation of page in case of PageExpire

Make it possible for custom MountedMappers to use the parsed PageParameters while processing a listener interface

This is a temporary workaround for Wicket 6.x. It is done in a better/configurable way in Wicket 7.x with https://git-wip-us.apache.org/repos/asf?p=wicket.git;a=commit;h=a1f862629c223b675a31c4ba9fb7e07c27279090
","12/Aug/14 07:56;jira-bot;Commit f6eaa937d4cdda9fd04c3c5312eaca66d5fb52a2 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f6eaa93 ]

WICKET-5539 Allow preserving of the parsed PageParameters when re-creating an expired page

Remove 'final' modifier for all mount related methods in WebApplication
","12/Aug/14 07:58;jira-bot;Commit d6897c9b56a26215f9a50e5fb5779bb593a77777 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d6897c9 ]

WICKET-5539 Allow preserving of the parsed PageParameters when re-creating an expired page

Remove 'final' modifier for all mount related methods in WebApplication

(cherry picked from commit f6eaa937d4cdda9fd04c3c5312eaca66d5fb52a2)
","12/Aug/14 08:01;jira-bot;Commit a01a674b57fdc274f68fe7e9acfda1914190c878 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a01a674 ]

WICKET-5539 Allow preserving of the parsed PageParameters when re-creating an expired page

Mark the workaround method as deprecated because it is not available in Wicket 7.x
","12/Aug/14 08:51;mgrigorov;'final' modifier is removed from all #mount() methods in WebApplication.
The application can now use the suggested workaround for Wicket 6.x.
The new method is marked as deprecated to indicate that it is not available in Wicket 7.x and to give a hint how to do it there.

If you have time to test the new APIs in Wicket 7.x I'll be really thankful for your feedback!",13/Aug/14 16:02;florianbraunsa@gmail.com;I've pulled the latest changes in Wicket 7 and tested them with a few of my examples. They seem to be working great and I like the general configuration in PageSettings. Thanks for making the changes!,"13/Aug/14 16:06;mgrigorov;Thanks for testing Wicket 7.x, Florian!
Please make sure that Wicket 6.x is also prepared for your needs. 6.17.0 is coming soon!",
PropertyResolver does not scan for NotNull in annotation tree,WICKET-5656,12730736,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,ivaynberg,tkruse,tkruse,30/Jul/14 09:38,22/Aug/14 16:27,13/Mar/19 23:18,22/Aug/14 16:27,6.16.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket-bean-validation,,,0,,,,,,,,"When annotating a field of a bean with e.g. org.hibernate.validator.constraints.NotEmpty, this implies
javax.validation.constraints.NotNull, but PropertyValidator only checks for the annotations immediately on the filed not the tree of annotations. As a result Wicket does not mark the field as required in the UI, which it should.

Also PropertyResolver.findNotNullConstraints() is not even protected, so cannot be patched in a simple way.

So as a solution I suggest changing findNotNullConstraints() to be protected and rather be something like findConstraints(filter), or findConstraints(clazz), and then in that method method recursively invoking getComposingConstraints to get all constraints, but collecting only those of interest. Possibly some care needs to be taken to prevent infinite recursion where constraints are composed of each other (if that compiles).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-04 12:34:06.736,,,no_permission,,,,,,,,,,,,408809,,,Fri Aug 22 12:47:56 UTC 2014,,,,,,0|i1yc9r:,408807,,,,,,,,04/Aug/14 12:34;mgrigorov;A patch is welcome!,"04/Aug/14 12:57;mgrigorov;I may be totally off here but here is how I see it:

- org.apache.wicket.bean.validation.ConstraintIterator is not really needed. All that is needed is its logic to get the *root* constraint descriptors.
- org.apache.wicket.bean.validation.PropertyValidator#findNotNullConstraints() (or however better name we give it) should return a List<ConstraintDescriptor> of all ConstraintDescriptors which are either NotNull (the filter) or have composing constraints which are NotNull.
- org.apache.wicket.bean.validation.PropertyValidator#isRequired() should use ConstraintDescriptor#getGroups() instead of NotNull#groups()
- org.apache.wicket.bean.validation.PropertyValidator#isRequired() may need extra logic to handle javax.validation.groups.Default. See javax.validation.metadata.ConstraintDescriptor#getGroups()

[~ivaynberg] is the above correct ? I may rework it if I'm on the right track","04/Aug/14 14:39;tkruse;It might be YAGNI, but I think it would be nice to have code to get Constraints of a certain type, not just NotNull. This could in the future help to provide additional client-side features based on Bean-validation annotations.",04/Aug/14 15:23;mgrigorov;Agreed on this!,"22/Aug/14 11:09;jira-bot;Commit f539c18cb16deffdcdc86b9ec69dd80f4f3abe0d in wicket's branch refs/heads/master from adelbene
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f539c18 ]

WICKET-5656 PropertyResolver does not scan for NotNull in annotation
tree","22/Aug/14 12:09;bitstorm;Pretty weird...ConstraintIterator and PropertyValidator work well and they find NotNull even when it is nested. But when NotNull is directly applied its Group array is empty, while it contains 'Default' when it is nested in another constraint.
For now I just improved the if condition inside PropertyValidator.isRequired (see commit), so we could fix it for the next release.","22/Aug/14 12:47;jira-bot;Commit bc4a55fccea6810d0970d924fdd9d84392960995 in wicket's branch refs/heads/wicket-6.x from adelbene
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bc4a55f ]

WICKET-5656 PropertyResolver does not scan for NotNull in annotation
tree
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RenderStrategy REDIRECT_TO_RENDER lets fail test with BaseWicketTester#startComponentInPage,WICKET-5679,12735351,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,forchel,forchel,20/Aug/14 08:33,20/Aug/14 10:05,13/Mar/19 23:18,20/Aug/14 10:05,6.16.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket,,,0,,,,,,,,"After changing the RenderStrategy from REDIRECT_TO_BUFFER to REDIRECT_TO_RENDER tests with BaseWicketTester#startComponentInPage fail.

Stacktrace:

org.apache.wicket.markup.MarkupNotFoundException: Can not determine Markup. Component is not yet connected to a parent. [Page class = org.apache.wicket.util.tester.BaseWicketTester$StartComponentInPage, id = 0, render count = 1]
        at org.apache.wicket.Component.getMarkup(Component.java:749)
        at org.apache.wicket.util.tester.BaseWicketTester$StartComponentInPage.getMarkup(BaseWicketTester.java:1453)
        at org.apache.wicket.Component.internalRender(Component.java:2309)
        at org.apache.wicket.Component.render(Component.java:2272)
        at org.apache.wicket.Page.renderPage(Page.java:1024)
        at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:122)
        at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:221)
        at org.apache.wicket.util.tester.BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(BaseWicketTester.java:2657)
        at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
        at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:862)
        at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
        at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261)
        at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218)
        at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289)
        at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:654)
        at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:712)
        at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:593)
        at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:818)
        at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:835)
        at org.apache.wicket.util.tester.BaseWicketTester.startComponentInPage(BaseWicketTester.java:1387)
        at org.apache.wicket.util.tester.BaseWicketTester.startComponentInPage(BaseWicketTester.java:1317)
        at org.foo.StatelessTest.testComponents(StatelessTest.java:97) ",,,,,,,,,,,,,,,,,,,,,,,,,20/Aug/14 08:35;forchel;quickstart.zip;https://issues.apache.org/jira/secure/attachment/12663084/quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2014-08-20 10:05:33.387,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Aug 20 10:05:47 UTC 2014,,,,,,0|i1z4dr:,9223372036854775807,,,,,,,,"20/Aug/14 08:35;forchel;quickstart attached. The test StatelessTest#testComponents() fails, after changing the render strategy.","20/Aug/14 10:05;jira-bot;Commit c3795bd0ed0df1a9e73fcba37cf911192307dbe1 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c3795bd ]

WICKET-5679 RenderStrategy REDIRECT_TO_RENDER lets fail test with BaseWicketTester#startComponentInPage
","20/Aug/14 10:05;jira-bot;Commit 70368f1238dcd0ddf897ce9ccaa989b7ffd46631 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=70368f1 ]

WICKET-5679 RenderStrategy REDIRECT_TO_RENDER lets fail test with BaseWicketTester#startComponentInPage

(cherry picked from commit c3795bd0ed0df1a9e73fcba37cf911192307dbe1)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IllegalArgumentException: Argument 'page' may not be null. - when sending event from asynchronous process,WICKET-5371,12670491,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,meo,meo,25/Sep/13 14:20,15/Aug/14 10:00,13/Mar/19 23:18,14/Aug/14 13:23,6.10.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket-atmosphere,,,0,,,,,,,,"I never reproduced it on local, it happens a lot on linux server behind apache proxy(could be just coincidence). I could try to debug it, if you have no idea why it could happen. It also seems that it happens only after server is running for some time. 

I am sending multiple events to update different panels from asynchronous process like this: 
 
EventBus.get(Application.get(WicketApplication.class.getName())).post(new ComponentBuildEvent());



15:16:36 ERROR o.a.w.DefaultExceptionMapper [refreshExecutor-4]: - Unexpected error occurred
java.lang.IllegalArgumentException: Argument 'page' may not be null.
        at org.apache.wicket.util.lang.Args.notNull(Args.java:41) ~[wicket-util-6.10.0.jar:6.10.0]
        at org.apache.wicket.ajax.AjaxRequestHandler.<init>(AjaxRequestHandler.java:112) ~[wicket-core-6.10.0.jar:6.10.0]
        at org.apache.wicket.protocol.http.WebApplication$DefaultAjaxRequestTargetProvider.get(WebApplication.java:961) ~[wicket-core-6.10.0.jar:6.10.0]
        at org.apache.wicket.protocol.http.WebApplication$DefaultAjaxRequestTargetProvider.get(WebApplication.java:954) ~[wicket-core-6.10.0.jar:6.10.0]
        at org.apache.wicket.protocol.http.WebApplication.newAjaxRequestTarget(WebApplication.java:805) ~[wicket-core-6.10.0.jar:6.10.0]
        at org.apache.wicket.atmosphere.AtmosphereRequestHandler.respond(AtmosphereRequestHandler.java:69) ~[wicket-atmosphere-0.13.jar:0.13]
        at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:861) ~[wicket-core-6.10.0.jar:6.10.0]
        at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) ~[wicket-request-6.10.0.jar:6.10.0]
        at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261) [wicket-core-6.10.0.jar:6.10.0]
        at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218) [wicket-core-6.10.0.jar:6.10.0]
        at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289) [wicket-core-6.10.0.jar:6.10.0]
        at org.apache.wicket.atmosphere.EventBus.post(EventBus.java:368) [wicket-atmosphere-0.13.jar:0.13]
        at org.apache.wicket.atmosphere.EventBus.postToSingleResource(EventBus.java:344) [wicket-atmosphere-0.13.jar:0.13]
        at org.apache.wicket.atmosphere.EventBus.post(EventBus.java:319) [wicket-atmosphere-0.13.jar:0.13]
        at krasa.build.backend.facade.AsyncService.sendRefresh(AsyncService.java:28) [classes/:na]
        at krasa.build.backend.facade.AsyncService$$FastClassByCGLIB$$8fb726ed.invoke(<generated>) [spring-core-3.2.3.RELEASE.jar:na]
        at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) [spring-core-3.2.3.RELEASE.jar:3.2.3.RELEASE]
        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:698) [spring-aop-3.2.3.RELEASE.jar:3.2.3.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) [spring-aop-3.2.3.RELEASE.jar:3.2.3.RELEASE]
        at org.springframework.aop.interceptor.AsyncExecutionInterceptor$1.call(AsyncExecutionInterceptor.java:89) [spring-aop-3.2.3.RELEASE.jar:3.2.3.RELEASE]
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) [na:1.7.0_03]
        at java.util.concurrent.FutureTask.run(FutureTask.java:166) [na:1.7.0_03]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) [na:1.7.0_03]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) [na:1.7.0_03]
        at java.lang.Thread.run(Thread.java:722) [na:1.7.0_03]




sometimes it even shows me this page, unfortunatelly I only found out later in not used tabs:
http://svn.tmdev:8765/wicket/page?23


Unexpected RuntimeException

Last cause: Argument 'page' may not be null.

Stacktrace

Root cause:

java.lang.IllegalArgumentException: Argument 'page' may not be null.
....",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-01 12:23:48.406,,,no_permission,,,,,,,,,,,,350320,,,Fri Aug 15 10:00:58 UTC 2014,,,,,,0|i1oej3:,350613,,,,,,,,"01/Oct/13 12:17;meo;problems seems to be in org.apache.wicket.atmosphere.AtmosphereRequestHandler#respond

Application.get().getMapperContext().getPageInstance(pageKey.getPageId()); is returning null


problem is that it affects pages which are in my case half minute old.","01/Oct/13 12:23;mgrigorov;Is it possible that the page has never been stored due to some error during serialization ?

I'm not sure why Application.get().getMapperContext() is used instead of PageProvider. With PageProvider it will throw more descriptive PageExpiredException.","01/Oct/13 13:03;meo;I do not think so, there are no other types of errors.","01/Oct/13 13:24;mgrigorov;What server do you use ?
Is it Glassfish by chance ?

A quickstart application will be needed to be able to help you more.","01/Oct/13 13:41;meo;it is jetty-8.1.9.v20130131

I understand, I am not even able to reproduce it myself on localhost. I can only remote debug it when it starts do this things.","01/Oct/13 14:46;papegaaij;Did you enable session support in atmosphere in your web.xml?
<init-param>
    <param-name>org.atmosphere.cpr.sessionSupport</param-name>
    <param-value>true</param-value>
</init-param>","01/Oct/13 14:48;meo;Yes, see https://github.com/krasa/SVNMergeInfo/blob/master/src/main/webapp/WEB-INF/web.xml","20/Jan/14 17:04;meo;After upgrading to Wicket 6.13.0 and Wicket-Atmosphere 0.15, the behaviour changed a little bit:
It throws now:
{code}
java.lang.RuntimeException: org.eclipse.jetty.io.EofException
        at org.atmosphere.cpr.AtmosphereResponse.write(AtmosphereResponse.java:959) ~[atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AtmosphereResponse.write(AtmosphereResponse.java:924) ~[atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AtmosphereInterceptorWriter.writeReady(AtmosphereInterceptorWriter.java:89) ~[atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AtmosphereInterceptorWriter.invokeInterceptor(AtmosphereInterceptorWriter.java:78) ~[atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AtmosphereInterceptorWriter.write(AtmosphereInterceptorWriter.java:64) ~[atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AtmosphereInterceptorWriter.write(AtmosphereInterceptorWriter.java:59) ~[atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AtmosphereResponse$2.write(AtmosphereResponse.java:498) ~[atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.handler.AbstractReflectorAtmosphereHandler.onStateChange(AbstractReflectorAtmosphereHandler.java:176) ~[atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.DefaultBroadcaster.invokeOnStateChange(DefaultBroadcaster.java:1028) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.DefaultBroadcaster.prepareInvokeOnStateChange(DefaultBroadcaster.java:1048) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.DefaultBroadcaster.executeAsyncWrite(DefaultBroadcaster.java:890) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.DefaultBroadcaster$3.run(DefaultBroadcaster.java:546) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) [na:1.7.0_03]
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) [na:1.7.0_03]
        at java.util.concurrent.FutureTask.run(FutureTask.java:166) [na:1.7.0_03]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) [na:1.7.0_03]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) [na:1.7.0_03]
        at java.lang.Thread.run(Thread.java:722) [na:1.7.0_03]
Caused by: org.eclipse.jetty.io.EofException: null
        at org.eclipse.jetty.http.HttpGenerator.flushBuffer(HttpGenerator.java:914) ~[jetty-http-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.http.AbstractGenerator.blockForOutput(AbstractGenerator.java:523) ~[jetty-http-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:170) ~[jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:117) ~[jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.atmosphere.cpr.AtmosphereResponse.write(AtmosphereResponse.java:950) ~[atmosphere-runtime-2.0.0.jar:2.0.0]
        ... 17 common frames omitted
Caused by: java.io.IOException: Broken pipe
        at sun.nio.ch.FileDispatcherImpl.write0(Native Method) ~[na:1.7.0_03]
        at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47) ~[na:1.7.0_03]
        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:89) ~[na:1.7.0_03]
        at sun.nio.ch.IOUtil.write(IOUtil.java:60) ~[na:1.7.0_03]
        at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:450) ~[na:1.7.0_03]
        at org.eclipse.jetty.io.nio.ChannelEndPoint.flush(ChannelEndPoint.java:293) ~[jetty-io-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.flush(SelectChannelEndPoint.java:362) ~[jetty-io-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.io.nio.ChannelEndPoint.flush(ChannelEndPoint.java:341) ~[jetty-io-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.flush(SelectChannelEndPoint.java:336) ~[jetty-io-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.http.HttpGenerator.flushBuffer(HttpGenerator.java:841) ~[jetty-http-8.1.9.v20130131.jar:8.1.9.v20130131]
        ... 21 common frames omitted
{code}

and several similar to this:

{code}
17:21:02  WARN RequestCycleExtra [qtp1533857509-214]: - ********************************
17:21:02  WARN RequestCycleExtra [qtp1533857509-214]: - Handling the following exception
java.lang.IllegalStateException: STREAM
        at org.eclipse.jetty.server.Response.getWriter(Response.java:707) ~[jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.atmosphere.cpr.AtmosphereResponse.getWriter(AtmosphereResponse.java:711) ~[atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.apache.wicket.protocol.http.servlet.ServletWebResponse.write(ServletWebResponse.java:109) ~[wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.protocol.http.HeaderBufferingWebResponse.write(HeaderBufferingWebResponse.java:174) ~[wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.ajax.AjaxRequestHandler.respond(AjaxRequestHandler.java:361) ~[wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:861) ~[wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) ~[wicket-request-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:97) ~[wicket-request-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:259) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:201) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:282) [wicket-core-6.13.0.jar:6.13.0]
        at org.atmosphere.util.AtmosphereFilterChain.doFilter(AtmosphereFilterChain.java:155) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.util.AtmosphereFilterChain.invokeFilterChain(AtmosphereFilterChain.java:132) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.handler.ReflectorServletProcessor$FilterChainServletWrapper.service(ReflectorServletProcessor.java:359) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.handler.ReflectorServletProcessor.onRequest(ReflectorServletProcessor.java:204) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AsynchronousProcessor.action(AsynchronousProcessor.java:237) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AsynchronousProcessor.suspended(AsynchronousProcessor.java:163) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.container.Jetty7CometSupport.service(Jetty7CometSupport.java:94) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.container.JettyAsyncSupportWithWebSocket.service(JettyAsyncSupportWithWebSocket.java:67) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AtmosphereFramework.doCometSupport(AtmosphereFramework.java:1675) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AtmosphereServlet.doPost(AtmosphereServlet.java:177) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AtmosphereServlet.doGet(AtmosphereServlet.java:163) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:735) [javax.servlet-3.0.0.v201112011016.jar:na]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:848) [javax.servlet-3.0.0.v201112011016.jar:na]
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669) [jetty-servlet-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:457) [jetty-servlet-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557) [jetty-security-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384) [jetty-servlet-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.Server.handle(Server.java:368) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:932) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:994) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:640) [jetty-http-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235) [jetty-http-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628) [jetty-io-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52) [jetty-io-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608) [jetty-util-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543) [jetty-util-8.1.9.v20130131.jar:8.1.9.v20130131]
        at java.lang.Thread.run(Thread.java:722) [na:1.7.0_03]
:

{code}
,ending with:
{code}
17:21:02 ERROR o.a.w.r.c.RequestCycle [qtp1533857509-214]: - Error during processing error message
java.lang.IllegalStateException: STREAM
        at org.eclipse.jetty.server.Response.getWriter(Response.java:707) ~[jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.atmosphere.cpr.AtmosphereResponse.getWriter(AtmosphereResponse.java:711) ~[atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.apache.wicket.protocol.http.servlet.ServletWebResponse.sendRedirect(ServletWebResponse.java:251) ~[wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.protocol.http.HeaderBufferingWebResponse.sendRedirect(HeaderBufferingWebResponse.java:117) ~[wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.handler.render.WebPageRenderer.redirectTo(WebPageRenderer.java:158) ~[wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:317) ~[wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:165) ~[wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:861) ~[wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) ~[wicket-request-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:310) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:319) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:233) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:259) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:201) [wicket-core-6.13.0.jar:6.13.0]
        at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:282) [wicket-core-6.13.0.jar:6.13.0]
        at org.atmosphere.util.AtmosphereFilterChain.doFilter(AtmosphereFilterChain.java:155) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.util.AtmosphereFilterChain.invokeFilterChain(AtmosphereFilterChain.java:132) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.handler.ReflectorServletProcessor$FilterChainServletWrapper.service(ReflectorServletProcessor.java:359) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.handler.ReflectorServletProcessor.onRequest(ReflectorServletProcessor.java:204) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AsynchronousProcessor.action(AsynchronousProcessor.java:237) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AsynchronousProcessor.suspended(AsynchronousProcessor.java:163) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.container.Jetty7CometSupport.service(Jetty7CometSupport.java:94) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.container.JettyAsyncSupportWithWebSocket.service(JettyAsyncSupportWithWebSocket.java:67) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AtmosphereFramework.doCometSupport(AtmosphereFramework.java:1675) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AtmosphereServlet.doPost(AtmosphereServlet.java:177) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at org.atmosphere.cpr.AtmosphereServlet.doGet(AtmosphereServlet.java:163) [atmosphere-runtime-2.0.0.jar:2.0.0]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:735) [javax.servlet-3.0.0.v201112011016.jar:na]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:848) [javax.servlet-3.0.0.v201112011016.jar:na]
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669) [jetty-servlet-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:457) [jetty-servlet-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557) [jetty-security-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384) [jetty-servlet-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.Server.handle(Server.java:368) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
        at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:932) [jetty-server-8.1.9.v20130131.jar:8.1.9.v20130131]
:
{code}



","08/Jul/14 10:51;dlock-gmac;Hi.
This issue is also happening for me.  Application will run fine, leave a page open for a while, real-time update comes in and is posted onto the EventBus and wham...

{code:borderStyle=solid}
java.lang.IllegalArgumentException: Argument 'page' may not be null.
     at org.apache.wicket.util.lang.Args.notNull(Args.java:41)
     at org.apache.wicket.ajax.AjaxRequestHandler.<init>(AjaxRequestHandler.java:112)
     at org.apache.wicket.protocol.http.WebApplication$DefaultAjaxRequestTargetProvider.get(WebApplication.java:962)
     at org.apache.wicket.protocol.http.WebApplication$DefaultAjaxRequestTargetProvider.get(WebApplication.java:956)
     at org.apache.wicket.protocol.http.WebApplication.newAjaxRequestTarget(WebApplication.java:807)
     at org.apache.wicket.atmosphere.AtmosphereRequestHandler.respond(AtmosphereRequestHandler.java:73)
     at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:862)
     at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
     at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261)
     at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218)
     at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289)
     at org.apache.wicket.atmosphere.EventBus.post(EventBus.java:397)
     at org.apache.wicket.atmosphere.EventBus.postToSingleResource(EventBus.java:362)
     at org.apache.wicket.atmosphere.EventBus.post(EventBus.java:337)
    ...
{code}

Note, this doesn't happen all the time, it is quite sporadic.

Using the following dependencies...
wicket 6.15.0
wicket-atmosphere-0.18
atmosphere-runtime-native-2.0.4

deployed on Tomcat 7

Any ideas?
","08/Jul/14 10:59;mgrigorov;org.apache.wicket.atmosphere.AtmosphereRequestHandler#respond looks like:

{code}
@Override
public void respond(IRequestCycle requestCycle)
{
	Page page = (Page)Application.get().getMapperContext().getPageInstance(pageKey.getPageId());
	AjaxRequestTarget target = WebApplication.get().newAjaxRequestTarget(page);
	executeHandlers(target, page);
}
{code}
[~papegaaij] What do you think ?","08/Jul/14 11:09;papegaaij;Page is null when either the session is lost or the page is not found in the page store. Atmosphere requires you to explicitly enable session support (see earlier comment). If session support is enabled, we will need a quickstart to be able to debug this.","08/Jul/14 11:15;dlock-gmac;
Session support is enabled.

{code:borderStyle=solid}
<init-param>
        <param-name>org.atmosphere.cpr.sessionSupport</param-name>
	<param-value>true</param-value>
</init-param>
{code}

When I get chance I will try to put together a quickstart based on the dependencies I am using.",08/Jul/14 11:15;mgrigorov;Is it good idea to check for non-null page and log a warning if the page is null explaining what could be the reasons ?,"08/Jul/14 11:33;papegaaij;It can be rather difficult to find out why the page is not found. I wouldn't know what to log, except the sessionSupport perhaps. Perhaps it's possible to find out if the session is actually bound?","14/Aug/14 13:22;jira-bot;Commit b26481d59dc6d38718a5c176a7b921b9d00d6240 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b26481d ]

WICKET-5371 IllegalArgumentException: Argument 'page' may not be null. - when sending event from asynchronous process

Log a warning and unregister all subscriptions for a page when it is no more in the page stores for any reason
","14/Aug/14 13:22;jira-bot;Commit a60736c411d43582ffd7f710c2880de210cceb9d in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a60736c ]

WICKET-5371 IllegalArgumentException: Argument 'page' may not be null. - when sending event from asynchronous process

Log a warning and unregister all subscriptions for a page when it is no more in the page stores for any reason

(cherry picked from commit b26481d59dc6d38718a5c176a7b921b9d00d6240)
","14/Aug/14 13:23;jira-bot;Commit b26481d59dc6d38718a5c176a7b921b9d00d6240 in wicket's branch refs/heads/wicket-atmosphere-tester from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b26481d ]

WICKET-5371 IllegalArgumentException: Argument 'page' may not be null. - when sending event from asynchronous process

Log a warning and unregister all subscriptions for a page when it is no more in the page stores for any reason
",14/Aug/14 13:23;mgrigorov;From now on if the page is not found a WARN log message will be logged and all subscriptions for this pageKey will be removed.,"14/Aug/14 13:26;jira-bot;Commit d817855dda158f4c376042f236da5f19223a8823 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d817855 ]

WICKET-5371 IllegalArgumentException: Argument 'page' may not be null. - when sending event from asynchronous process

Mark the page as dirty to keep it around in case there is no other usage with it (component added/removed/etc.)
","14/Aug/14 13:26;jira-bot;Commit 02bcd85239753f1c1beac254a9a5e9fe53fcee63 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=02bcd85 ]

WICKET-5371 IllegalArgumentException: Argument 'page' may not be null. - when sending event from asynchronous process

Mark the page as dirty to keep it around in case there is no other usage with it (component added/removed/etc.)

(cherry picked from commit d817855dda158f4c376042f236da5f19223a8823)
","14/Aug/14 13:27;jira-bot;Commit d817855dda158f4c376042f236da5f19223a8823 in wicket's branch refs/heads/wicket-atmosphere-tester from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d817855 ]

WICKET-5371 IllegalArgumentException: Argument 'page' may not be null. - when sending event from asynchronous process

Mark the page as dirty to keep it around in case there is no other usage with it (component added/removed/etc.)
","14/Aug/14 13:28;mgrigorov;Additionally if the page is there it will be marked as dirty so it will be stored at the end of the artificial request cycle.
I guess this was the problem here - the page has not be used by other means (component added/removed) and at some point the disk store has been filled up with other pages and this one removed as the oldest one.","15/Aug/14 07:51;jira-bot;Commit 1d1b4782dbb9dbc41cec097031f338ad889c0f77 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1d1b478 ]

WICKET-5371 IllegalArgumentException: Argument 'page' may not be null. - when sending event from asynchronous process

Log a warning and unregister all subscriptions for a page when it is no more in the page stores for any reason
","15/Aug/14 07:51;jira-bot;Commit 50df0c168b956f7ed4ffbb5884b7ab15e2d2ff52 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=50df0c1 ]

WICKET-5371 IllegalArgumentException: Argument 'page' may not be null. - when sending event from asynchronous process

Mark the page as dirty to keep it around in case there is no other usage with it (component added/removed/etc.)
","15/Aug/14 10:00;jira-bot;Commit 1d1b4782dbb9dbc41cec097031f338ad889c0f77 in wicket's branch refs/heads/5674-jquery-atmo-webjar from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1d1b478 ]

WICKET-5371 IllegalArgumentException: Argument 'page' may not be null. - when sending event from asynchronous process

Log a warning and unregister all subscriptions for a page when it is no more in the page stores for any reason
","15/Aug/14 10:00;jira-bot;Commit 50df0c168b956f7ed4ffbb5884b7ab15e2d2ff52 in wicket's branch refs/heads/5674-jquery-atmo-webjar from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=50df0c1 ]

WICKET-5371 IllegalArgumentException: Argument 'page' may not be null. - when sending event from asynchronous process

Mark the page as dirty to keep it around in case there is no other usage with it (component added/removed/etc.)
",,,,,,,,,,
WebPageRenderer should bind a Session if redirect is required and the session is temporary.,WICKET-5643,12727445,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,bitstorm,bitstorm,15/Jul/14 19:29,07/Aug/14 08:53,13/Mar/19 23:18,24/Jul/14 07:37,6.16.0,7.0.0-M2,,,,,,,1.5.12,6.17.0,7.0.0-M3,,,,,0,,,,,,,,"WebApplication.storeBufferedResponse does not check if sessionId is null. This could lead to wrong behaviors as it happens  in the quickstart project. Let's say we have a stateless home page with page parameters that are populated inside page constructor. Under these conditions class WebPageRenderer will call storeBufferedResponse and will redirect the response to the final URL (line 289). But as the session is temporary, the buffered response is not consumed and  WebPageRenderer will rise a warning (line 194).

I think we should check for null sessionId inside WebApplication or inside WebPageRender.
",,,,,,,,,,,,,,,,,WICKET-5666,,,,,,,,15/Jul/14 19:39;bitstorm;wicket5578.tar.gz;https://issues.apache.org/jira/secure/attachment/12655846/wicket5578.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2014-07-17 13:39:59.119,,,no_permission,,,,,,,,,,,,405551,,,Thu Aug 07 08:53:05 UTC 2014,,,,,,0|i1xsif:,405577,,,,,,,,15/Jul/14 19:30;bitstorm;I didn't check if 6.x is affected as well...,16/Jul/14 18:04;bitstorm;added a check for session id and some JavaDoc,"17/Jul/14 13:39;mgrigorov;I am a bit concerned from the silent way this is going to be handled - if the sessionId is null then nothing happens! 
So Wicket attempts to store a buffered response and make a redirect to it.
But the response is not stored and what happens after the redirect ? I guess again the warning is logged. I have to run the quickstart to be sure.

I think WebApplication#storeBufferedResponse() should blow when a null is passed as sessionId. But this may break applications in production.
So we need to log a warning and return immediately. This way the users will see the warning and notify us that some combination in WebPageRenderer is not covered (like in your case).
But the fix IMO should be in WebPageRenderer.


What is the use case of having a stateless page and populate its page parameters in its constructor ? Do you expect that the url in the browser address bar should show the parameters ?","17/Jul/14 14:28;bitstorm;>I am a bit concerned from the silent way this is going to be handled - if the sessionId is null then nothing happens!
>So Wicket attempts to store a buffered response and make a redirect to it.
>But the response is not stored and what happens after the redirect ? I guess again the warning is logged. I have to run the quickstart to be sure.

Yes we could generate a warning, but we still have a use-case (the one described in the issue) that is perfectly acceptable but nonetheless it generates a warning...

>What is the use case of having a stateless page and populate its page parameters in its constructor ? Do you expect that the url in the browser address bar should show the >parameters ?

Yes, or at least, that is actually what Wicket tries to do (show parameters in address bar).

","17/Jul/14 14:36;mgrigorov;I think the use case described in this ticket should be handled in WebPageRenderer:
1) Wicket should not try to make a redirect but just render the response
2) if you think that the added page parameters in the constructor of the stateless page should be shown in the address bar then Wicket should bind the session and make a redirect. 

I think 2) is the one with less surprise in its behavior","17/Jul/14 14:46;bitstorm;>I think 2) is the one with less surprise in its behavior

I agree. So we should simply check for a permanent session in WebPageRender.storeBufferedResponse. If we don't have it we will call bind()
",17/Jul/14 18:36;bitstorm;done on master,"18/Jul/14 08:07;bitstorm;>I think WebApplication#storeBufferedResponse() should blow when a null is passed as sessionId. But this may break applications in production.

I think I will also add a log warning in WebApplication#storeBufferedResponse() as suggested. Of course we should never see it.","18/Jul/14 08:15;mgrigorov;If the warning is logged then the developer should create a bug report with a quickstart.
It would be nice to communicate this somehow to the developer. Either in the WARN message itself or as a comment next to the LOG.warn() statement.","22/Jul/14 16:20;jira-bot;Commit 0b0e0980d6ac9cff063be2ec5b93bf7d37fe8bc8 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0b0e098 ]

WICKET-5643 WebPageRenderer should bind a Session if redirect is
required and the session is temporary.

Added a warning log if a null session id is provided.",22/Jul/14 16:22;bitstorm;I will try to back port the fix on 6.x as soon as possible.,"24/Jul/14 07:33;jira-bot;Commit 0b2dbaab794918c159f913b50fbfb2958deb98d9 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0b2dbaa ]

WICKET-5643 WebPageRenderer should bind a Session if redirect is required and the session is temporary.
","24/Jul/14 07:37;jira-bot;Commit ca08c1f543874767a0ccede40b66e63c74147582 in wicket's branch refs/heads/wicket-1.5.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ca08c1f ]

WICKET-5643 WebPageRenderer should bind a Session if redirect is required and the session is temporary.

(cherry picked from commit 0b2dbaab794918c159f913b50fbfb2958deb98d9)
",24/Jul/14 07:37;mgrigorov;The fix is ported to 6.x and 1.5.x,"24/Jul/14 11:28;jira-bot;Commit 8e24bfbd46a37103ea635bda63988c50c84d606e in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8e24bfb ]

WICKET-5643 WebPageRenderer should bind a Session if redirect is required and the session is temporary.

Check for """" too.
Log as an ERROR and do nothing more to really prevent serving a response to another client
","24/Jul/14 11:29;jira-bot;Commit 44962e84e496e6495c16313c132270509d02e351 in wicket's branch refs/heads/wicket-1.5.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=44962e8 ]

WICKET-5643 WebPageRenderer should bind a Session if redirect is required and the session is temporary.

Check for """" too.
Log as an ERROR and do nothing more to really prevent serving a response to another client

(cherry picked from commit 8e24bfbd46a37103ea635bda63988c50c84d606e)
","24/Jul/14 12:18;mgrigorov;Since WebPageRenderer is the only place we call WebApplication#storeBufferedResponse() and we bind the session if it is temporary I decided to change the warning log to an error because if the sessionId is null or empty then it is a problem in the application code. 
Additionally I reverted the ""return;"" that Andrea used initially to prevent storing buffered response in a slot that may be used by several sessions/users.","24/Jul/14 13:24;jira-bot;Commit 90b7ca90d3c1afe5dfbbc1672d9410484790414a in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=90b7ca9 ]

WICKET-5643 WebPageRenderer should bind a Session if redirect is required and the session is temporary.

Check for """" too.
Log as an ERROR and do nothing more to really prevent serving a response to another client

(cherry picked from commit 8e24bfbd46a37103ea635bda63988c50c84d606e)
","25/Jul/14 21:07;jira-bot;Commit 1064d372b48a048bdee292564ec5f45cd00fd3c4 in wicket's branch refs/heads/wicket-6.x from andrea del bene
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1064d37 ]

WICKET-5643 storeBufferedResponse should check if session is temporary.

Code changed as suggested by Martin
","25/Jul/14 21:08;jira-bot;Commit 6b8439f93e1809e5fc8b5fb283a4c0ff8c0dac47 in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6b8439f ]

WICKET-5643 WebPageRenderer should bind a Session if redirect is
required and the session is temporary.

Added a warning log if a null session id is provided.
","28/Jul/14 09:31;jira-bot;Commit f95e3130b1a0b9d40e77f90f2bf869d21fd851e0 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f95e313 ]

WICKET-5643 storeBufferedResponse should check if session is temporary.

Revert 1064d372b48a048bdee292564ec5f45cd00fd3c4 by adelbene
","07/Aug/14 08:50;jira-bot;Commit 743240ab6ace1d2faedbcf80bfb09152d72b1cc2 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=743240a ]

WICKET-5666 WicketTester ""page was null"" for reused stateless Form
WICKET-5643 WebPageRenderer should bind a Session if redirect is required and the session is temporary.

Add the quickstart from WICKET-5666 as a test case
","07/Aug/14 08:53;jira-bot;Commit bdf0f9f7ac10a888bfc79a0a6340749af45d82f3 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bdf0f9f ]

WICKET-5666 WicketTester ""page was null"" for reused stateless Form
WICKET-5643 WebPageRenderer should bind a Session if redirect is required and the session is temporary.

Add the quickstart from WICKET-5666 as a test case

(cherry picked from commit 743240ab6ace1d2faedbcf80bfb09152d72b1cc2)
",,,,,,,,,,,,,
"@SpringBean(name=""something"", required=false) still throws org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'something' is defined",WICKET-5662,12731925,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,ceefour,ceefour,05/Aug/14 04:40,07/Aug/14 02:43,13/Mar/19 23:18,05/Aug/14 07:50,6.16.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket-spring,,,0,,,,,,,,"Example:

{code}
public class TwitterLoginLink extends StatelessLink<Void> {
			
	@SpringBean(name=""twitterMgr"", required=false)
	private TwitterManager twitterMgr;
{code}

still throws:

{code}
org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'twitterMgr' is defined
at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:641)
at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1159)
at org.springframework.beans.factory.support.AbstractBeanFactory.isSingleton(AbstractBeanFactory.java:418)
at org.springframework.context.support.AbstractApplicationContext.isSingleton(AbstractApplicationContext.java:1002)
at org.apache.wicket.spring.SpringBeanLocator.isSingletonBean(SpringBeanLocator.java)
at org.apache.wicket.spring.injection.annot.AnnotProxyFieldValueFactory.getFieldValue(AnnotProxyFieldValueFactory.java:141)
at org.apache.wicket.injection.Injector.inject(Injector.java:111)
at org.apache.wicket.spring.injection.annot.SpringComponentInjector.inject(SpringComponentInjector.java:124)
at org.apache.wicket.spring.injection.annot.SpringComponentInjector.onInstantiation(SpringComponentInjector.java:130)
at org.apache.wicket.application.ComponentInstantiationListenerCollection$1.notify(ComponentInstantiationListenerCollection.java:38)
at org.apache.wicket.application.ComponentInstantiationListenerCollection$1.notify(ComponentInstantiationListenerCollection.java:34)
at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80)
at org.apache.wicket.application.ComponentInstantiationListenerCollection.onInstantiation(ComponentInstantiationListenerCollection.java:33)
at org.apache.wicket.Component.<init>(Component.java:686)
at org.apache.wicket.MarkupContainer.<init>(MarkupContainer.java:121)
at org.apache.wicket.markup.html.WebMarkupContainer.<init>(WebMarkupContainer.java:52)
at org.apache.wicket.markup.html.link.AbstractLink.<init>(AbstractLink.java:57)
at org.apache.wicket.markup.html.link.AbstractLink.<init>(AbstractLink.java:44)
at org.apache.wicket.markup.html.link.Link.<init>(Link.java:105)
at org.apache.wicket.markup.html.link.StatelessLink.<init>(StatelessLink.java:42)
at org.soluvas.web.login.twitter.TwitterLoginLink.<init>(TwitterLoginLink.java:40)
at org.soluvas.web.login.DedicatedLoginPanel$FormSignIn.<init>(DedicatedLoginPanel.java:90)
at org.soluvas.web.login.DedicatedLoginPanel.onInitialize(DedicatedLoginPanel.java:58)
at org.apache.wicket.Component.fireInitialize(Component.java:876)
at org.apache.wicket.MarkupContainer$3.component(MarkupContainer.java:967)
at org.apache.wicket.MarkupContainer$3.component(MarkupContainer.java:963)
at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:144)
at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:123)
at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:192)
at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:875)
at org.apache.wicket.MarkupContainer.internalInitialize(MarkupContainer.java:962)
at org.apache.wicket.Page.isPageStateless(Page.java:463)
at org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper.getPageInfo(AbstractBookmarkableMapper.java:447)
at org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper.mapHandler(AbstractBookmarkableMapper.java:391)
at org.apache.wicket.core.request.mapper.MountedMapper.mapHandler(MountedMapper.java:395)
at org.apache.wicket.request.mapper.CompoundRequestMapper.mapHandler(CompoundRequestMapper.java:215)
at org.apache.wicket.request.cycle.RequestCycle.mapUrlFor(RequestCycle.java:429)
at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:273)
at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:862)
at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261)
at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218)
at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289)
at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:259)
at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:201)
at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:282)
at org.soluvas.web.site.SecuredWicketAtmosphereHandler$CustomFilterChain.doFilter(SecuredWicketAtmosphereHandler.java:199)
at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344)
at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261)
at org.soluvas.web.site.SecuredWicketAtmosphereHandler$CustomFilterChain.doFilter(SecuredWicketAtmosphereHandler.java:199)
at org.soluvas.web.site.SecuredWicketAtmosphereHandler$CustomFilterChain.invokeFilterChain(SecuredWicketAtmosphereHandler.java:185)
at org.soluvas.web.site.SecuredWicketAtmosphereHandler.onRequest(SecuredWicketAtmosphereHandler.java:91)
at org.atmosphere.cpr.AsynchronousProcessor.action(AsynchronousProcessor.java:187)
at org.atmosphere.cpr.AsynchronousProcessor.suspended(AsynchronousProcessor.java:98)
at org.atmosphere.container.Tomcat7CometSupport.service(Tomcat7CometSupport.java:96)
at org.atmosphere.cpr.AtmosphereFramework.doCometSupport(AtmosphereFramework.java:1809)
at org.atmosphere.cpr.AtmosphereServlet.event(AtmosphereServlet.java:255)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilterEvent(ApplicationFilterChain.java:484)
at org.apache.catalina.core.ApplicationFilterChain.doFilterEvent(ApplicationFilterChain.java:377)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)
at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:123)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java)
at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
at org.apache.catalina.core.StandardHostValve.__invoke(StandardHostValve.java:171)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)
at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1023)
at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)
at org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor.run(AprEndpoint.java:1810)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
{code}

Workaround:

{code}
    @Autowire(required=false)
    private TwitterManager twitterMgr;
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-05 06:22:23.862,,,no_permission,,,,,,,,,,,,409954,,,Thu Aug 07 02:43:00 UTC 2014,,,,,,0|i1yj7j:,409948,,,,,,,,"05/Aug/14 06:22;mgrigorov;The workaround is not correct.
Wicket doesn't care about Autowired and that's why it is skipped.

Looking at the code I think the workaround is to remove the explicit name attribute of SpringBean.","05/Aug/14 07:47;jira-bot;Commit 9aec4f332aae9ec380d09dab1c68b0cd15927644 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9aec4f3 ]

WICKET-5662 @SpringBean(name=""something"", required=false) still throws org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'something' is defined
","05/Aug/14 07:51;jira-bot;Commit b05f17278bdf2bda64e578baa24c224ca0a2a131 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b05f172 ]

WICKET-5662 @SpringBean(name=""something"", required=false) still throws org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'something' is defined

(cherry picked from commit 9aec4f332aae9ec380d09dab1c68b0cd15927644)
",07/Aug/14 02:43;ceefour;Thanks Martin for resolving it quickly :),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wicket-autocomplete may fail after preceeding Ajax request,WICKET-5657,12730831,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,svenmeier,svenmeier,30/Jul/14 16:49,30/Jul/14 17:28,13/Mar/19 23:18,30/Jul/14 17:28,6.16.0,7.0.0-M2,,,,,,,6.17.0,7.0.0-M3,,,wicket-extensions,,,0,,,,,,,,"The following processing sequence leads to a JavaScript error:

- form is shown including an autoCompleteTextField
- user enters criteria and immediately presses enter
- actualUpdateChoices() is scheduled by the throttler
- form is submitted via ajax
- autoCompleteTextField is removed from DOM
- throttler executes actualUpdateChoices()
- wicket-autocomplete fails with precondition, since element is no longer in DOM:

    var elementVal =  Wicket.$(elementId).value;
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-07-30 17:27:55.538,,,no_permission,,,,,,,,,,,,408904,,,Wed Jul 30 17:28:21 UTC 2014,,,,,,0|i1ycun:,408902,,,,,,,,"30/Jul/14 17:27;jira-bot;Commit 8ee88f13ceff97dfc0a4818f4c368525d1f799eb in wicket's branch refs/heads/master from svenmeier
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8ee88f1 ]

WICKET-5657 wicket-autocomplete may fail after preceeding Ajax request","30/Jul/14 17:28;jira-bot;Commit fd2dcbe5185cef2c5ed58e0a2446ecfe37ba8fb1 in wicket's branch refs/heads/wicket-6.x from svenmeier
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fd2dcbe ]

WICKET-5657 wicket-autocomplete may fail after preceeding Ajax request",30/Jul/14 17:28;svenmeier;Existence of markup element is now checked in precondition.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PriorityHeaderItem+OnDomReadyHeaderItem has no priority in Ajax response,WICKET-5315,12663213,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,12/Aug/13 13:45,28/Jul/14 11:57,13/Mar/19 23:18,12/Aug/13 13:53,6.9.1,,,,,,,,6.11.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"PriorityHeaderItems+OnDomReadyHeaderItem have no priority in Ajax responses.

org.apache.wicket.ajax.AbstractAjaxResponse.AjaxHeaderResponse#render() doesn't extract the wrapped header item and thus doesn't process OnDomReady/OnLoad/OnEvent header items properly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,343214,,,2013-08-12 13:45:04.0,,,,,,0|i1n6tj:,343518,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update StatelessForm's and AbstractRepeater's javadoc that FormComponents should be repeated only with RepeatingView,WICKET-5636,12726510,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,newgro,newgro,10/Jul/14 06:34,21/Jul/14 10:27,13/Mar/19 23:18,21/Jul/14 10:26,6.16.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket,,,0,Form,ListView,"Stateless,",Submit,,,,"I would like to submit some input fields added to a repeater by a stateless form. My added test is working by using a Form.class but not with a StatelessForm.class.

The hint by Martin to use another repeater than a listview has the same results. I've added both repeaters to the quickstart code.

What i don't understand is that there is nothing in the request parameters while i debugged the WicketFilter.class.",,,,,,,,,,,,,,,,,,,,,,,,,10/Jul/14 15:24;mgrigorov;myproject-repeatingview.tgz;https://issues.apache.org/jira/secure/attachment/12655009/myproject-repeatingview.tgz,10/Jul/14 06:35;newgro;myproject.zip;https://issues.apache.org/jira/secure/attachment/12654949/myproject.zip,,,2.0,,,,,,,,,,,,,,,,,,,2014-07-10 15:24:53.692,,,no_permission,,,,,,,,,,,,404617,,,Mon Jul 21 10:26:03 UTC 2014,,,,,,0|i1xmvr:,404655,,,,,,,,10/Jul/14 06:35;newgro;Here is the quickstart containing two tests. One is failing.,10/Jul/14 15:24;mgrigorov;Here is a working version with RepeatingView.,"10/Jul/14 17:58;mgrigorov;The problem with ListView and RefreshingView is that they create their children at render time.
Since the page is re-created (due to being stateless) there are no FormComponents at the action phase (onSubmit) to consume the posted data and populate the model.

I'll update the javadoc of all related components to explain this behavior.",21/Jul/14 10:26;mgrigorov;Updated the javadoc of StatelessForm and AbstractRepeater.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
missing generic cast causes compile error on OS X / jdk 8,WICKET-5647,12727891,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,pete,pete,pete,17/Jul/14 10:02,17/Jul/14 11:49,13/Mar/19 23:18,17/Jul/14 10:18,6.16.0,7.0.0-M2,,,,,,,6.17.0,7.0.0-M3,,,wicket,,,0,,,,,,,,"when trying to compile wicket-7 from HEAD it fails under OS X / JDK 1.8.0_11. Casting a NULL to generic type (T) solves the issues. This seems like some odd case of failing type inference.

The problematic source line is:

    {code}return getEnumImpl(key, eClass, null);{code}

The compiler error is:

  {code}Error:(792, 35) java: incompatible types: inference variable T has incompatible upper bounds java.lang.Enum<T>,T{code}

This will fix the issue:

    {code}return getEnumImpl(key, eClass, (T)null);{code}

I found that there is a fix WICKET-5427 which does not work in most current JDK 1.8.0_11 anymore. --Could not change the wicket-6 branch since the change will break the clirr plugin (see WICKET-5427).--","OS X 10.9.4
JDK 1.8.0_11",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,405996,,,2014-07-17 10:02:55.0,,,,,,0|i1xv7b:,406016,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"NumberTextField should support ""any"" as valid step attribute value",WICKET-5467,12688204,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,newgro,newgro,10/Jan/14 09:12,17/Jul/14 10:46,13/Mar/19 23:18,15/Jan/14 10:15,6.13.0,,,,,,,,6.14.0,7.0.0-M1,,,wicket,,,0,WICKET-5096,,,,,,,"The NumberTextField removes the any value from step attribute added to markup.
E.g. <input type=""number"" step=""any"" wicket:id=""myNumber"" />
and add(new NumberTextField<Double>(""myNumber"", numModel);

leads to markup
<input type=""number"" id=""myNumber"" />
but should be
<input type=""number"" step=""any"" id=""myNumber"" />

I can see 2 possbile solutions
1. Don't remove the step attribute
2. Add a constant ANY to NumberTextField
public static final Number ANY = 0;
and let this be configurable to users (setStep(ANY))",wicket 6.11.0,,,,,,,,,,,,,,,,,,,,,,,,10/Jan/14 10:43;newgro;fix-WICKET-5467-src.zip;https://issues.apache.org/jira/secure/attachment/12622375/fix-WICKET-5467-src.zip,10/Jan/14 10:27;newgro;fix-WICKET-5467.patch;https://issues.apache.org/jira/secure/attachment/12622373/fix-WICKET-5467.patch,,,2.0,,,,,,,,,,,,,,,,,,,2014-01-10 10:31:16.884,,,no_permission,,,,,,,,,,,,367223,,,Wed Jan 15 10:15:26 UTC 2014,,,,,,0|i1rarb:,367532,,,,,,,,"10/Jan/14 10:31;mgrigorov;The patch contains a lot of white space changes. Even in pom.xml.
It is not very clear what is the real change.
Feel free to attach the complete sources of the changes classes here and we will deal with them.
Thank you! ","10/Jan/14 10:36;newgro;The patch was created by git fomat-patch command. I hope it is still usable.
Additionally I've added the clirr-maven-plugin to m2e configuration. It would be helpful if you could adjust this because i get compile errors in eclipse if i clone wicket repository.",10/Jan/14 10:43;newgro;These are the changed sources,"15/Jan/14 10:15;mgrigorov;The patch is applied.
Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stateless/Statefull pages - incorrect behaviour,WICKET-5578,12712327,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,phantom,phantom,05/May/14 14:56,16/Jul/14 07:44,13/Mar/19 23:18,16/Jul/14 07:44,6.15.0,7.0.0-M1,,,,,,,7.0.0-M3,,,,wicket,,,0,stateful,stateless,,,,,,"Please advise how to do in following situation or confirm that's a bug and should be fixed.

There is a page (login page) with stateless form. That page has lots of common components (menu and etc.). There are some stateful components in the components tree that are visible only for signed in users: but once user isn't signed in - that components are hidden. That's why page is becoming ""stateless"" (no visible components) and form prepared correspondingly. But when form data is submitted: during obtaining of form component to process request - wicket thinks that page actually is stateful. As a result - the page is recreated and fully rendered - instead of processing of the form.

There is a workaround: setStatelessHint(false). But imho reason is a little bit another:
1) After construction of page: page is stateful - because of some stateful components are in the tree.
2) After initialization of page: page is still stateful - because there are that stateful components
3) After configuration of page (method onConfigure) - page is becoming stateless - because all stateful components marked as invisible.
4) Form has been rendered as stateless - with no version number is in the URL.
5) Page can'be reconstructed correctly because of p.1 and p.2

I think that stateless flag should be precalculated right after initialization step and should be changed due to some stuff in ""configuration"" methods.

What do you think?

Will provide ""quick start"" in near future!",,,,,,,,,,,,,,,,,WICKET-5539,,,,,,,,05/May/14 17:23;phantom;wicket5578.zip;https://issues.apache.org/jira/secure/attachment/12643393/wicket5578.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2014-05-06 22:02:00.561,,,no_permission,,,,,,,,,,,,390643,,,Sun Jul 13 18:00:37 UTC 2014,,,,,,0|i1vabz:,390890,,,,,,,,"05/May/14 17:23;phantom;Please find quick start is in attachment.

You can find ""special"" stateful component on HomePage which is making loginin impossible because of explained by me earler reasons.

You can:
1) Either comment line HomePage#62
2) Or remove component ""ajaxLink"" from the page
to make logging process to work perfectly.","05/May/14 17:25;phantom;May be I'm wrong, but in our case this issue directly related to issue WICKET-5539 which was closed with reason ""Won't fix"".","06/May/14 22:02;bitstorm;The issue is also related to WICKET-5426. We could solve it adding isStateless to canCallListenerInterfaceAfterExpiry inside Component class:

@Override
	public boolean canCallListenerInterfaceAfterExpiry()
	{
		return isStateless() || getApplication().getPageSettings()
			.getCallListenerInterfaceAfterExpiry();
	}

I successfully tested it, but I need to know the opinion of the other developers.","08/May/14 05:43;phantom;Imho flag stateless/statefull should be checked once after onInitialize and if page is statefull it shouldn't be turned to stateless on the next steps of the page's life-cycle...
","08/May/14 09:49;mgrigorov;The statefulness is checked for every render of the page.
The page may hide (setVisible(false)) or remove(statefulComponent) its stateful components at anytime and Wicket should respect that.
There was a ticket by another user recently exactly for this problem. See WICKET-5424, WICKET-5426.","08/May/14 15:54;bitstorm;And what about using isStateless inside canCallListenerInterfaceAfterExpiry? 
IMHO it makes perfectly sense to always invoke listener on stateless component, even on new instances. This would avoid to enter into the if statement in class ListenerInterfaceRequestHandler at line 197.","08/May/14 16:44;phantom;I understand that there are workarounds. But, I think, logic is stright forward:
1) Page is stateful after creation and initialization
2) Page is becoming stateless after configuration
3) Once page is stateless: server side will not store any ""state""
4) Any internal request on the stateless page will request ""recreation"" of the page instance for request processing. But once page is statefull right after initialization: there will be an incorrect behaviour like on provided quick start.","09/Jul/14 13:59;mgrigorov;An easy workaround for the current case is to use:
{code}
AjaxLink#isVisible() {return AuthenticatedWebSession.get().isSignedIn() && super.isVisible(); } 
{code}

instead of using 
{code}
onConfigure() { setVisible(AuthenticatedWebSession.get().isSignedIn()) }
{code}

The problem with onConfigure() is that it is called at the RENDER phase (onBeforeRender, onConfigure, render, onAfterRender) of the component lifecycle. By using #isVisible() you have the chance to decide whether the page is stateless also in the ACTION phase (onClick/onSubmit/etc.).

[~bitstorm] canCallListenerInterfaceAfterExpiry() is only in 7.x. I agree with your suggested change. Please convert the attached quickstart to a unit test and apply it in 7.x. Thanks!","13/Jul/14 18:00;bitstorm;I've committed my change to 7.x. Rather than creating a new test case, I've added a testing method to WicketTesterLazyIsPageStatelessRedirectToBufferTest which was created by Sven for WICKET-5426. I think it makes sense, but if you don't agree let me know.
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix the encoding of the Chinese translations for Wizard component,WICKET-5637,12726589,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,10/Jul/14 13:56,10/Jul/14 13:57,13/Mar/19 23:18,10/Jul/14 13:56,6.16.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket-extensions,,,0,,,,,,,,Reported on the users@ mailing lists: http://markmail.org/message/wbdffw5llrxfjqlq,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,404696,,,Thu Jul 10 13:56:56 UTC 2014,,,,,,0|i1xndb:,404734,,,,,,,,10/Jul/14 13:56;mgrigorov;Fixed by re-applying the patches from WICKET-2462,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CLONE - ModalWindow is not visible in Safari when opened from a link at the bottom of a large page,WICKET-5616,12721247,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,jeredm@maplewoodsoftware.com,mgrigorov,14/Jun/14 11:45,09/Jul/14 09:45,13/Mar/19 23:18,15/Jun/14 15:37,6.15.0,6.8.0,,,,,,,6.17.0,7.0.0-M3,,,wicket-extensions,,,0,,,,,,,,"I am not able to see a ModalWindow in Safari and I expect to see it centered on my view port.

Steps:
1. Start with a large web page with a link to open the ModalWindow at the bottom of the page.  You need a large page where you have to scroll down to find the link.
2. Click the link
3. Observe that the mask for the ModalWindow displays, but the ModalWindow does not.  Scrolling back up, re-sizing, and maximizing will still not display the ModalWindow.","Safari 5.1.7 (7534.57.2) Windows, Safari (iOS 6.1.3)",3600,3600,,0%,3600,3600,,,,,WICKET-5224,,,,,,,,,,,,,14/Jun/14 11:45;mgrigorov;safariscroll.zip;https://issues.apache.org/jira/secure/attachment/12650445/safariscroll.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2014-06-15 15:37:28.671,,,no_permission,,,,,,,,,,,,399443,,,Wed Jul 09 09:45:02 UTC 2014,,,,,,0|i1wri7:,399552,,,,,,,,"15/Jun/14 15:37;mgrigorov;Reverted https://github.com/apache/wicket/commit/61ebe2dbd55ff2ff5ac6f73909708021bb1acf4d

Please test on iOS device.",17/Jun/14 15:24;jeredm@maplewoodsoftware.com;This fix passes on: Safari for Windows 5.1.7 (7534.57.2).  iOS 7.1 and 7.1.1.  I don't have a Mac at this time to test with.  Thanks Martin!,"24/Jun/14 10:23;seignate;This fix is not complete. It was good to set the scroll parameter for safari too, but there is the next code part, that didn't set the css correctly. Means the modal.js, 336: createDom: function(). It's missing the ""this.window.style.position = ""absolute"""" for Safary browser explicit.

Basically, in modal.css we find:
{code}div.wicket-modal {	
	position: fixed;
	_position: absolute;
	z-index: 20001; 
	visibility: hidden;
}{code}
This leads to position=fixed for Safari, too. However in Wicket.Window.center we find that the absolute position is set for Safari. The conflict generated by this is resolved in createDom as outlined above by overriding the position=fixed from modal.css for Gecko but Safari is missing in the _if_ following the comment starting with _HACK_.

Can You correct it in the next versions? I'm happy to provide further information.","24/Jun/14 10:30;mgrigorov;Please provide a patch.
Thank you!","09/Jul/14 09:45;seignate;thanx for answer,
I'm so sorry, but the patch would work for the version 6.15 with which we tested. However we verified in the meantime that Wicket's master branch does not longer have the problem. Thus it seems pointless to provide a patch for an already resolved problem.

Thanks for your time and sorry about the confusion caused.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow submitting with POST method for PhantomJS,WICKET-5631,12723644,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,ajbanck,ajbanck,25/Jun/14 14:30,02/Jul/14 08:26,13/Mar/19 23:18,02/Jul/14 08:26,6.16.0,,,,,,,,6.17.0,7.0.0-M3,,,,,,0,,,,,,,,"With the PhantomJS browser form submit is done using get instead of post due to change [1] since 6.12.0
This is incorrect and fails with larger requests, PhantomJS only allows a limited get request size. For PhantomJS post must be used as for other browsers.


[1] https://git-wip-us.apache.org/repos/asf?p=wicket.git;a=commitdiff;h=f0b251e3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-06-25 14:36:46.811,,,no_permission,,,,,,,,,,,,401829,,,Wed Jul 02 08:14:27 UTC 2014,,,,,,0|i1x5y7:,401898,,,,,,,,"25/Jun/14 14:36;mgrigorov;I did this change because this was failing our JS tests.
I hope PhantomJS has been fixed in the meanwhile.
I will test this soon!","25/Jun/14 14:50;mgrigorov;Unfortunately reverting this change breaks our JS tests as before ... :-/
You can try it yourself:
- git clone http://git-wip-us.apache.org/repos/asf/wicket.git
- cd wicket
- npm install
- grunt

Any help to overcome this problem is very welcome!","26/Jun/14 16:38;ajbanck;I see the problem. The solution is dubious as I can easily write a test that would fail with GET and the method descriptions stating it will do a POST no longer holds true.

Looking at the the debug output the response is 405 ""Method not Allowed"", I tried changing the options to disable web-security but that didn't work so far","30/Jun/14 10:39;ajbanck;I verified the test failure is not related to PhantomJS but fails on Chrome and Firefox as well.
To test in chrome
- Follow the steps to set-up the build environment
- Start the server with grunt connect:server:keepalive
- Open localhost:38888/test/js/all.html?module=Wicket.Ajax in Chrome

The Submit nested form test fails in Chrome with a 405 Method Not Allowed (Allow: GET, HEAD, OPTIONS) error just as in PhantomJS. Same result with Firefox. With GET the tests pass. So PhantomJS is not a special case / this is not a PhantomJS bug but a problem with the test.




","30/Jun/14 11:28;mgrigorov;Confirmed. It does break in Google Chrome when running this way!
But it does work when running with Apache HTTPD.

So it could be that the test is broken or Node.JS Connect is the problem.
In any case I'll remove the PhantomJS check in wicket-ajax-jquery.js for Wicket 6.17.0.

Thanks!  ","02/Jul/14 08:14;mgrigorov;https://github.com/gruntjs/grunt-contrib-connect/issues/97#issuecomment-40915008 - POST is indeed not supported.
Now let's figure how to change the submit method for this particular tests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AbstractAutoCompleteBehavior.WrappedHeaderItem should depend on wicket-ajax.js,WICKET-5555,12707693,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,a.morozov,a.morozov,10/Apr/14 12:33,01/Jul/14 09:34,13/Mar/19 23:18,14/Apr/14 08:43,6.12.0,,,,,,,,6.16.0,7.0.0-M1,,,wicket-extensions,,,0,,,,,,,,"Class
org.apache.wicket.extensions.ajax.markup.html.autocomplete.AbstractAutoCompleteBehavior.WrappedHeaderItem inherits empty list from HeaderItem in

{code:java}
	public Iterable<? extends HeaderItem> getDependencies()
	{
		return Collections.emptyList();
	}
{code}

Using JavaScriptFilteredIntoFooterHeaderResponse causes rendering
{code:javascript}
Wicket.Event.add(window, ""domready"", function(event) { new Wicket.AutoComplete(
{code}
before jQuery refrence.



Please, add JQueryResourceReference (other if needed) into dependency list of 
org.apache.wicket.extensions.ajax.markup.html.autocomplete.AbstractAutoCompleteBehavior.WrappedHeaderItem

","Windows x64, jdk1.7.0_45 x64 (target 1.6), wicket 6.12",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-04-14 08:43:07.757,,,no_permission,,,,,,,,,,,,386016,,,Tue Jul 01 09:30:35 UTC 2014,,,,,,0|i1uhzj:,386280,,,,,,,,"14/Apr/14 08:43;mgrigorov;Improved!

Congrats for the fancy ticket number!","01/Jul/14 09:17;a.morozov;{code:java}
WrappedHeaderItem.getDependencies()
{code}
is still empty in 6.15.0.
It's a pity that we can not check HeaderItem.getDependencies().isEmpty? to determine if this item has dependencies, or not.","01/Jul/14 09:25;mgrigorov;It is more pity that no one has found a way to change the past. Or at least (s)he didn't shared this knowledge with me!
Fortunately we all know how to rule the future and we were able to modify this code for 6.16.0 !! 
And 6.16.0 IS already released !

https://github.com/apache/wicket/blob/master/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/AbstractAutoCompleteBehavior.java#L92","01/Jul/14 09:30;a.morozov;{quote}
And 6.16.0 IS already released !
{quote}
I just see here 
{quote}
Fix Version/s: 7.0.0-M1, 6.15.0
{quote}
Maybe this field could be updated so nobody would be confused ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConcatBundleResource#reportError() doesn't print the resource attributes,WICKET-5626,12723089,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,23/Jun/14 09:23,23/Jun/14 09:26,13/Mar/19 23:18,23/Jun/14 09:26,6.16.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket,,,0,,,,,,,,"org.apache.wicket.resource.bundles.ConcatBundleResource#reportError() prints just the scope and the name of the missing resource.

It will be much more useful if the attributes (locale, style and variation) are printed too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,401276,,,2014-06-23 09:23:23.0,,,,,,0|i1x2lb:,401353,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not throw when WebSocket is not supported,WICKET-5624,12722769,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,0xabadea,0xabadea,20/Jun/14 13:03,20/Jun/14 19:09,13/Mar/19 23:18,20/Jun/14 19:08,6.15.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket-native-websocket,,,0,,,,,,,,"When the browser does not support WebSocket, /wicket-websocket-jquery.js throws an ""is not supported"" string from the initialize() method, which runs in the DOM ready event. This break any other initialization of the page that takes place after the WebSocket initialization, leading to less than graceful degradation of functionality.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-06-20 19:08:40.069,,,no_permission,,,,,,,,,,,,400956,,,Fri Jun 20 19:08:40 UTC 2014,,,,,,0|i1x0of:,401041,,,,,,,,"20/Jun/14 13:05;0xabadea;So the (very complex) patch would go like this :-)

{noformat}
diff --git a/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/res/js/wicket-websocket-jquery.js b/wicket-native-websocket/wicket
index 4e8f68d..d24647b 100644
--- a/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/res/js/wicket-websocket-jquery.js
+++ b/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/res/js/wicket-websocket-jquery.js
@@ -91,7 +91,6 @@
                        } else {
                                var errMessage = '[WebSocket.initialize] WebSocket is not supported in your browser!';
                                Wicket.Log.error(errMessage);
-                               throw errMessage;
                        }
                },
 
{noformat}
","20/Jun/14 13:19;0xabadea;It just occurred to me that perhaps even nicer would be to send an event to, say, /websocket/unsupported.","20/Jun/14 19:08;mgrigorov;The suggestion is applied!
The event name is ""/websocket/notsupported"" (or Wicket.Event.Topic.WebSocket.NotSupported)
Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Atmosphere: updates infinitly with long polling transport,WICKET-5595,12715109,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,dutrieux,dutrieux,19/May/14 07:20,05/Jun/14 10:52,13/Mar/19 23:18,19/May/14 07:46,6.16.0,,,,,,,,6.16.0,7.0.0-M2,,,wicket-atmosphere,,,0,atmosphere,long_polling,loop,,,,,"I found a problem when I use long polling for the transport :

When the EventBus loop to the list of AtmosphereResource (on post method) and if the update is too long of each AtmosphereResource, the list of AtmosphereResource is update and reorder (because atmosphere remove and registry the AtmosphereResource due to long polling) and then the loop on EventBus never stop and update is infinitie.

To solve the probleme I do that on line 366 of EventBus.java :

{code}for (AtmosphereResource resource : 
ImmutableList.copyOf(broadcaster.getAtmosphereResources())){code}

rather than

{code}for (AtmosphereResource resource : broadcaster.getAtmosphereResources()){code}

Best regards",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-05-19 07:46:03.774,,,no_permission,,,,,,,,,,,,393395,,,Mon May 19 07:46:03 UTC 2014,,,,,,0|i1vqpj:,393557,,,,,,,,19/May/14 07:46;papegaaij;I've applied your changes. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DataTable component must throw an exception when attached to non-<table> element,WICKET-5534,12701433,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,14/Mar/14 08:38,30/May/14 11:13,13/Mar/19 23:18,14/Mar/14 08:39,6.14.0,,,,,,,,6.15.0,7.0.0-M1,,,wicket-extensions,,,0,,,,,,,,"As reported in the users@ mailing list - http://markmail.org/message/4xkyroiyqt6l4thg

Same is valid for AbstractToolbar - its root HTML element must be <tr> - http://markmail.org/message/nciogmxjdf54rpyo. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-05-30 09:20:52.543,,,no_permission,,,,,,,,,,,,379779,,,Fri May 30 11:13:17 UTC 2014,,,,,,0|i1tfqv:,380064,,,,,,,,"30/May/14 09:20;davidvdd;Hello,

This new behaviour seems ok but it has broken some tables in my application.
I was using the DataTable on the <tr> element in the <tbody> in stead of the <table>.
The reason I did this was because I wanted to specify rowspan and colspan in the <thead> myself. Now I keep on getting this error message. I've found no other way to use the datatable without losing the <thead> structure.

How should I solve this problem? Should I be using a different repeater?(ListView?) 

Example:
{code}
            <table>
                <thead>
                    <tr>
                        <th rowspan=""2""><wicket:message key=""LBL_NAME""/></th>
                        <th rowspan=""2""><wicket:message key=""LBL_SURNAME""/></th>
                        <th colspan=""2""><wicket:message key=""LBL_NUMBER""/></th>
                        <th colspan=""2""><wicket:message key=""LBL_DURATION""/></th>
                    </tr>
                    <tr>
                        <th><wicket:message key=""LBL_FROM""/></th>
                        <th><wicket:message key=""LBL_UNTIL""/></th>
                        <th><wicket:message key=""LBL_START""/></th>
                        <th><wicket:message key=""LBL_END""/></th>
                    </tr>
                </thead>
                <tbody>
                    <tr wicket:id=""personDetails""> <!-- This doesn't work anymore in wicket 6.15 add(new DataTable(""personDetails"",...-->
                    </tr>
                </tbody>
            </table>
{code}
","30/May/14 09:49;mgrigorov;Hi,

See http://markmail.org/message/32qt75kl34kilysh.

Do you extend DataTable and provide custom .html ? Because I cannot imagine how the default DataTable impl will work when attached to a <tr>.","30/May/14 10:09;davidvdd;Hi,

Thank you for the quick response.You're workaround seems to work, but you are right.
After this trick the table has 2 tbody's. One empty and one with data. I've never checked the generated html in 6.14 so I guess it would have been the same. I'm not extending the DataTable or providing any custom html (except from the example?) .

Maybe I should use a different repeater? I've tried to find information on rowspan and colspan in wicket but I can't seem to find a good example without inserting html in javacode.","30/May/14 10:31;mgrigorov;A table with two bodies is OK. The bigger problem would arise when you add some toolbar to the data table - it will try to add <thead> or <tfoot> to the <tr> and this will produce invalid HTML.

You can set any attribute to the header by overriding org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn#getHeader() for the respective column:

@Override
public Component getHeader(final String componentId)
{
    Component header = super.getHeader(componentId);
    header.add(AttributeAppender.append(""colspan"", Model.of(""3"")));
    return header;
} ",30/May/14 11:13;davidvdd;I did not use the header functionality on this table because I didn't know how to modify it's header in this way. I'll try to modify my code using you're override. I think it will be tricky since the header has 4 columns and the last two columns have 2 'subcolumns'. So I only have 4 IColumn in the list and need 6 headers.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AbstractSingleSelectChoice fails with NullPointerException when its choice renderer returns null from #getIdValue() ,WICKET-5601,12716801,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,27/May/14 13:06,27/May/14 13:12,13/Mar/19 23:18,27/May/14 13:12,6.15.0,,,,,,,,6.16.0,,,,wicket,,,0,,,,,,,,"The issue has been reported at the users@ mailing list - http://markmail.org/message/5qrxmqcywcdbia3k

We should add a check for null before comparing it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,395009,,,Tue May 27 13:12:10 UTC 2014,,,,,,0|i1w0en:,395144,,,,,,,,"27/May/14 13:12;mgrigorov;Improved to not fail with NPE.
There is no such problem in Wicket 7.x because it uses the newly introduced IChoiceRenderer#getObject()",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
button behaviour changed,WICKET-5597,12715399,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,phenderson,phenderson,20/May/14 09:59,21/May/14 05:17,13/Mar/19 23:18,21/May/14 05:17,7.0.0-M1,,,,,,,,7.0.0-M2,,,,wicket,,,0,,,,,,,,"The behaviour of a <button> component with no type=""button"" attribute has changed between 6.15 and 7 M1.   

When the button is connected to an AjaxLink.
In 6.15 there is no form submit
In 7 M1 the form is submitted.

I think the code should control if the form is submitted or not, using AjaxSubmitLink or AjaxLink not the markup.
",tomcat linux,,,,,,,,,,,,,,,,,,,,,,,,20/May/14 10:05;phenderson;myproject.tar.gz;https://issues.apache.org/jira/secure/attachment/12645764/myproject.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2014-05-20 11:33:09.609,,,no_permission,,,,,,,,,,,,393685,,,Wed May 21 05:17:47 UTC 2014,,,,,,0|i1vshr:,393847,,,,,,,,20/May/14 10:05;phenderson;Quick start,20/May/14 11:33;mgrigorov;Looks like a duplicate of WICKET-5594,20/May/14 12:57;svenmeier; WICKET-5594 is related but not a duplicate,"20/May/14 14:07;svenmeier;Wicket 7 initializes AjaxRequestAttributes#preventDefault=false, thus the browser submits the containing form after the Ajax request.

For now you can use type=""button"" in your markup.

Wicket could do this automatically (as for AjaxButton in WICKET-5594).
But AjaxLink and AjaxSubmitLink know nothing about form buttons currently, so I'm not sure this is the right solution.","20/May/14 14:13;mgrigorov;We can do the same as WICKET-5594 - if the tag's name is ""button"" then set 'type=""button""' in AjaxLink and AjaxSubmitLink.","20/May/14 14:23;mgrigorov;org.apache.wicket.ajax.markup.html.form.AjaxButton#onComponentTag doesn't check that it is attached to a <button> HTML element.
It seems it just assumes that this is the case.

I am not sure that we have to use #checkComponentTag(tag, ""button"") though, because I did this recently for DataTable component and there was a complaint by a user who uses custom DataTable with a <div> ...

So maybe we can do: if (""button"".equalsIgnorecase(tag.getName())) {tag.put(""type"", ""button"")}","21/May/14 05:17;svenmeier;Unwanted submit of <button> tag is now prevented by type=""button"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CachingRes​ourceStrea​mLocator is not extension-​aware,WICKET-5581,12712564,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,MacrosorcH,MacrosorcH,06/May/14 12:36,20/May/14 20:06,13/Mar/19 23:18,20/May/14 20:06,6.15.0,,,,,,,,6.16.0,7.0.0-M2,,,wicket,,,0,,,,,,,,"Consider, as a real case scenario, an application that integrates with Apache FOP in a way that, by overriding Page's getMarkupType(), makes it possible to have a component render its .fo markup (to generate a PDF) instead of the usual html, depending on whether it is added to a Page with the fo MarkupType or the standard html one.

This means the typical Panel of such application has two markup files, an html one and a fo one: Panel.html and Panel.fo.

The default CachingRes​ourceStrea​mLocator makes use of ResourceReference#Key for the cache. That Key completely ignores the extension of the file or, better, assumes it is part of the name, while for markup files this is apparently not the case. Basically, Panel.html and Panel.fo have the same Key, the name of which is simply ""Panel"".

Therefore, when a Panel is first rendered in html, its html markup reference is cached and there is no way to make it render again in fo, because the cache will always return the html markup reference.

A workaround suggested by Martin Grigorov in the Users mailing list is to override #getVariation() for the pages and return ""html"" and ""fo"" respectively.

However, the solution would be to fix CachingResourceStreamLocator to fully support this use case and properly cache different markup files of the same class.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,390880,,,2014-05-06 12:36:25.0,,,,,,0|i1vbpj:,391115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When using an Ajax request to display initially hidden components inside inline enclosures, only the first one appears.",WICKET-5553,12707270,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,jamesflagg,jamesflagg,08/Apr/14 21:54,25/Apr/14 09:04,13/Mar/19 23:18,25/Apr/14 09:04,6.14.0,,,,,,,,6.16.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"Consider a simple page with an Ajax link and two initially hidden labels, each of which is inside its own inline enclosure.  Clicking the link makes the labels visible and adds each to the AjaxRequestTarget. 

Here is the behavior I see:  Upon initial page render, each of the two labels is rendered as a hidden inline enclosure div.  This is correct.  But upon clicking the Ajax link, only the first label appears, and I get an AJAX DEBUG error indicating that the second label couldn't be found.

I've isolated the issue.  In the class org.apache.wicket.protocol.http.AjaxEnclosureListener, there is a call to ""visit.stop(key)"".  This halts the entire visitation, and therefore only the first inline enclosure is added to the AjaxRequestTarget.

The fix, IMO, would be to simply remove the current key from the map once an enclosure is added to the target.  Don't call stop, and get rid of the local variable ""key"" which limits the logic of AjaxEnclosureListener to a single enclosure.

It was working for multiple enclosures prior to the checkin of 2013-08-06.","Windows, Java 7",,,,,,,,,,,,,,,,,,,,,,,,08/Apr/14 21:57;jamesflagg;TestAjaxWithMultipleInlineEnclosures.html;https://issues.apache.org/jira/secure/attachment/12639274/TestAjaxWithMultipleInlineEnclosures.html,08/Apr/14 21:57;jamesflagg;TestAjaxWithMultipleInlineEnclosures.java;https://issues.apache.org/jira/secure/attachment/12639275/TestAjaxWithMultipleInlineEnclosures.java,09/Apr/14 15:42;jamesflagg;wicket5553.zip;https://issues.apache.org/jira/secure/attachment/12639420/wicket5553.zip,,3.0,,,,,,,,,,,,,,,,,,,2014-04-09 06:30:46.273,,,no_permission,,,,,,,,,,,,385593,,,Wed Apr 09 15:50:36 UTC 2014,,,,,,0|i1ufdz:,385859,,,,,,,,08/Apr/14 21:57;jamesflagg;Files to reproduce the problem.,"09/Apr/14 06:30;mgrigorov;Hi,

What do you mean with ""prior to the checkin of 2013-08-06"" ? Any particular commit ?

Please package the attached files in a proper Maven based application (wicket.apache.org/start/quickstart.html), so it is easier for us to test and debug it. Thanks !",09/Apr/14 15:42;jamesflagg;Maven Quckstart to reproduce the issue.,"09/Apr/14 15:50;jamesflagg;Commit fa01402233fb56abc0709bcdc6f6a6c008a1abc7 adds the call to visit.stop on line 87 of AjaxEnclosureListener.  This stops visitation of any additional InlineEnclosure after the first match is found.  Thus, when multiple initially hidden components are inside inline enclosures, and more than one of these components becomes visible during a single Ajax Request, only one will actually become visible in the browser, and others will generate errors in the Ajax console.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dequeueing problem when there is TransparentWebMarkupContainer around <wicket:child/>,WICKET-5572,12710313,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,24/Apr/14 13:47,25/Apr/14 08:19,13/Mar/19 23:18,25/Apr/14 08:19,7.0.0-M1,,,,,,,,7.0.0-M1,,,,wicket,,,0,,,,,,,,"While testing 7.0.0-M1 release I've found an issue with wicket-bootstrap's sample application.

Here is a minified version of it that reproduces the problem.
The two important things are:
- a TransparentWebMarkupContainer (TWMC) is attached to <html> tag in the base page
- the sub page is requested

It appears that dequeueing logic cannot find the closing tag of the TWMC and thinks that </wicket:child> is the closing tag.",,,,,,,,,,,,,,,,,,,,,,,,,24/Apr/14 13:48;mgrigorov;5572.tgz;https://issues.apache.org/jira/secure/attachment/12641717/5572.tgz,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,388635,,,Fri Apr 25 08:19:15 UTC 2014,,,,,,0|i1uy1j:,388886,,,,,,,,24/Apr/14 13:48;mgrigorov;Attaching a quickstart app.,"25/Apr/14 07:54;mgrigorov;Reworked the quickstart to a test case:
 org.apache.wicket.queueing.transparentresolvers.DequeueingTransparentWebMarkupContainerTest#startSubPageWithTWMCinTheParentPage",25/Apr/14 08:19;mgrigorov;Fixed by allowing dequeuing in <wicket:child> tags.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Autolinking does not always work in inheritted markup,WICKET-5558,12708231,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,jesselong,jesselong,14/Apr/14 11:21,14/Apr/14 12:08,13/Mar/19 23:18,14/Apr/14 12:08,6.14.0,,,,,,,,6.15.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"If you have auto-linked auto components that point to package resource, like:

{noformat}
<wicket:link><img src=""myimage.png""/></wicket:link>
{noformat}

defined in the grandparent markup, where the grandparent and parent are from different packages, then they do get rendered correctly.

Problem is this: AutoLinkResolver checks that the package resource actually exists. It checks by creating a PackageResourceReference and attempts to get the reference from that. The class used as the context for the PackageResourceReference is the class which owns the markup in which the auto-link appeared. The key is the original reference (href or src) in the tag. So far everything is correct.

Wicket knows which class owned the markup by using ComponentTag#getMarkupClass(). It is therefore important that ComponentTag#getMarkupClass() always returns the correct class. But it doesn't.

When we have a three level merged markup (child, parent, grandparent), this happens: parent markup is merged into grandparent using MergedMarkup. All ComponentTags that were originally from grandparent are called :#setMarkupClass(GrandParent.class), so that they will know they came from the grandparent. So far so good.

Now, in order to get the child markup stream, we merge child markup onto the parent markup. Now, all ComponentTags in the parent markup are setMarkupClass(Parent.class). Problem is, this is not true. Some of these ComponentTags actually came from the grandparent, so the ComponentTag ends up returning the incorrect class (Parent.class instead of GrandParent.class) in #getMarkupClass().

Because ComponentTag#getMarkupClass() can return the wrong value, if the Parent and GrandParent are in different packages, then a resource that would be loadable by the grandparent is no longer loadable, because we are using the parent, which cannot find it.

Solution, fix MergedMarkup to only setMarkupClass() if getMarkupClass() == null.",,,,,,,,,,,,,,,,,,,,,,,,,14/Apr/14 11:46;jesselong;WICKET-5558.patch;https://issues.apache.org/jira/secure/attachment/12640057/WICKET-5558.patch,14/Apr/14 11:47;jesselong;quickstart.tar.gz;https://issues.apache.org/jira/secure/attachment/12640059/quickstart.tar.gz,,,2.0,,,,,,,,,,,,,,,,,,,2014-04-14 12:08:15.469,,,no_permission,,,,,,,,,,,,386554,,,Mon Apr 14 12:08:15 UTC 2014,,,,,,0|i1ulan:,386818,,,,,,,,14/Apr/14 11:46;jesselong;WICKET-5558.patch - Patch for Wicket 6.,"14/Apr/14 11:47;jesselong;quickstart.tar.gz

Quickstart that demonstrates the problem",14/Apr/14 12:08;mgrigorov;Thanks for the investigation and the patch!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error in wicket-autocomplete.js bad reference of $,WICKET-5556,12707700,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,dmalescot,dmalescot,10/Apr/14 13:23,14/Apr/14 08:15,13/Mar/19 23:18,14/Apr/14 08:15,6.14.0,,,,,,,,6.15.0,7.0.0-M1,,,wicket-extensions,,,0,,,,,,,,"Since wicket 6.14, autocomplete component throw an error when positionning autocomplete-menu. 

TypeError: $(...).offset is not a function 

In fact, in wicket-autocomplete.js (line 592), getPosition use $(obj) instead of Wicket.$(obj) : 

For apps with other js lib, it's really critique because a JS error freeze other js action.

Quick fix is to change :
line 592 of wicket-autocomplete.js 
--> Wicket.$(obj) instead of $(obj) 

Thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-04-14 08:15:18.158,,,no_permission,,,,,,,,,,,,386023,,,Mon Apr 14 08:15:18 UTC 2014,,,,,,0|i1ui13:,386287,,,,,,,,10/Apr/14 14:48;dmalescot;or fix : jQuery(obj).offset();,"14/Apr/14 08:15;mgrigorov;Duplicate of https://github.com/apache/wicket/pull/71

jQuery() should be used instead of $().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Websocket initialization URL is not valid when filter is not mapped to root.,WICKET-5548,12704380,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,Ronni,Ronni,28/Mar/14 21:56,02/Apr/14 20:33,13/Mar/19 23:18,02/Apr/14 20:33,6.14.0,,,,,,,,6.15.0,7.0.0-M1,,,wicket-native-websocket,,,0,,,,,,,,"When configuration the WebSocketFilter to map to '/test/*'
for example
<code language=""xml"">
    <filter-mapping>
		<filter-name>websocket.filter</filter-name>
		<url-pattern>/test/*</url-pattern>
	</filter-mapping>
</code>
Will result in not being able to establish a websocket connection, because of the following line in wicket-websocket-jquery.js :
<code>
  line 47: 				url = protocol + '//' + document.location.host + Wicket.WebSocket.contextPath + '/wicket/websocket';
</code>
This line doesn't take in account the filter mapping.
",,,,,,,,,,,,,,,,,,,,,,,,,02/Apr/14 17:42;Ronni;Added_fillterPrefix_to_websocket_url_.patch;https://issues.apache.org/jira/secure/attachment/12638298/Added_fillterPrefix_to_websocket_url_.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2014-04-02 19:49:36.532,,,no_permission,,,,,,,,,,,,382714,,,Wed Apr 02 20:33:02 UTC 2014,,,,,,0|i1txnz:,382982,,,,,,,,29/Mar/14 16:04;Ronni;Maybe it's missing 'filterPrefix'?,"02/Apr/14 17:42;Ronni;I added the filterPrefix to the websocket on my locally patched version.
Can you review and give me comments if it should be done differently?","02/Apr/14 19:49;mgrigorov;Thanks for providing a patch !

Initially I thought that the patch is perfect but then I tested it with the Javax/JSR356 impl and the app failed.
The problem is that JSR356 doesn't pass the Upgrade connection to the Servlet Filters at all. So the newly added filterPrefix in the ws:// url breaks it.

I will think on a solution.","02/Apr/14 20:33;mgrigorov;Thank you for the report and the patch!

I've applied it with other minor improvements.
Please test with 6.15.0-SNAPSHOT or 7.0.0-SNAPSHOT and let us know if there are any other issues.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in SubscribeAnnotationEventSubscriptionInvoker on remove of component from page,WICKET-5541,12703200,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,cwellekoetter,cwellekoetter,24/Mar/14 14:00,01/Apr/14 19:24,13/Mar/19 23:18,01/Apr/14 19:24,6.14.0,,,,,,,,6.15.0,7.0.0-M1,,,wicket-atmosphere,,,0,,,,,,,,"Following NullPointerException occurs on atmosphere event subscription, if the component, belonging to this event was removed from page before:


java.lang.NullPointerException: null
        at org.apache.wicket.atmosphere.SubscribeAnnotationEventSubscriptionInvoker.invoke(SubscribeAnnotationEventSubscriptionInvoker.java:34) ~[wicket-atmosphere-0.16.jar:0.16]
        at org.apache.wicket.atmosphere.AtmosphereRequestHandler.invokeMethod(AtmosphereRequestHandler.java:104) ~[wicket-atmosphere-0.16.jar:0.16]
        at org.apache.wicket.atmosphere.AtmosphereRequestHandler.executeHandlers(AtmosphereRequestHandler.java:81) ~[wicket-atmosphere-0.16.jar:0.16]
        at org.apache.wicket.atmosphere.AtmosphereRequestHandler.respond(AtmosphereRequestHandler.java:70) ~[wicket-atmosphere-0.16.jar:0.16]
        at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:862) ~[wicket-core-6.14.0.jar:6.14.0]
        at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) ~[wicket-request-6.14.0.jar:6.14.0]
        at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261) [wicket-core-6.14.0.jar:6.14.0]
        at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218) [wicket-core-6.14.0.jar:6.14.0]
        at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289) [wicket-core-6.14.0.jar:6.14.0]
        at org.apache.wicket.atmosphere.EventBus.post(EventBus.java:372) [wicket-atmosphere-0.16.jar:0.16]
        at org.apache.wicket.atmosphere.EventBus.postToSingleResource(EventBus.java:348) [wicket-atmosphere-0.16.jar:0.16]
        at org.apache.wicket.atmosphere.EventBus.post(EventBus.java:323) [wicket-atmosphere-0.16.jar:0.16]
...

If you have got a component on a page with a public  method that has a ""Subscribe"" annotation, the component / the path to the component gets registered to the corresponding page. But if you remove the component from the page the subscription does not get removed. A following atmosphere event could invoke this exception.

As a workaround I added a null check in my own SubscribeAnnotationEventSubscriptionInvoker:

public void invoke(AjaxRequestTarget target, EventSubscription subscription, Object base, AtmosphereEvent event, AjaxRequestInitializer ajaxRequestInitializer) {
        if (base != null) {
...
        }
}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-28 19:20:43.329,,,no_permission,,,,,,,,,,,,381538,,,Tue Apr 01 19:24:32 UTC 2014,,,,,,0|i1tqh3:,381813,,,,,,,,"28/Mar/14 19:20;papegaaij;If the component is removed, the subscription for that component should be removed as well. The if-statement will prevent the NPE, but the added debug statement will continue to be triggered until the page is closed. I'll see if I can come up with a fix next week.","01/Apr/14 19:24;papegaaij;Subscriptions are now automatically unregistered when a component cannot be found during event handling. It is also possible to manually unregister subscriptions for a component. It should be noted that this is preferred for performance reasons.

I've investigated the possibility to automatically unregister subscriptions when a component is removed, but this would required adding behaviors to all components with subscriptions and would still not cover unbound behaviors, so I decided to not implement it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot use redirect in ModalWindow's page#onInitialize(),WICKET-5545,12703947,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,27/Mar/14 10:18,27/Mar/14 10:21,13/Mar/19 23:18,27/Mar/14 10:21,6.14.0,,,,,,,,6.15.0,7.0.0-M1,,,wicket-extensions,,,0,,,,,,,,"With WICKET-5415 Wicket no more stores pages which were not rendered, even if they are stateful.
To do this we moved the code that marks the page as used from its constructor to #onInitialize() (IPageManager#touch(page)). 
A ModalWindow with a Page needs to store the page to be able to reference it from the iframe.
With commit f36fa20 we added logic to fully initialize the modalwindow's page. This breaks use cases where the application needs to use any code that will lead to a redirect (e.g. setResponsePage(), or scheduleRequestHandler()).

The fix is to just touch the page, but not fully initialize it. ",,,,,,,,,,,,,,,,,,,,,,,,,27/Mar/14 10:19;mgrigorov;HelpModal.zip;https://issues.apache.org/jira/secure/attachment/12637122/HelpModal.zip,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,382281,,,Thu Mar 27 10:19:01 UTC 2014,,,,,,0|i1tv0n:,382552,,,,,,,,27/Mar/14 10:19;mgrigorov;A quickstart provided by a user in users@ mailing lists,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket examples' MailTemplate from Page is broken,WICKET-5509,12695468,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,17/Feb/14 09:02,24/Mar/14 08:43,13/Mar/19 23:18,17/Feb/14 10:35,6.14.0,,,,,,,,6.15.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"While testing 6.14.0 release I found out that the mail template examples doesn't work with the page.
 
http://localhost:8080/we/mailtemplate/ ",,,,,,,,,,,,,,,,,,,,,,,,,17/Feb/14 10:17;svenmeier;WICKET-5509.patch;https://issues.apache.org/jira/secure/attachment/12629357/WICKET-5509.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-17 10:17:58.98,,,no_permission,,,,,,,,,,,,373976,,,Mon Feb 17 10:35:26 UTC 2014,,,,,,0|i1sg3b:,374276,,,,,,,,"17/Feb/14 09:24;mgrigorov;It is broken by WICKET-5484.
[~svenmeier] Please take a look.","17/Feb/14 10:17;svenmeier;Why not just render the page? IMHO we can just skip WebPageRenderer, since we just want the page's output.

[~mgrigorov]] WDYT?","17/Feb/14 10:35;mgrigorov;Yes.
This simplifies it a lot!

I think executing the rendering in its own RequestCycle is better than before.

Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Wicket.DOM.toggleClass is called with additional ""#"" inside AutoLabelResolver",WICKET-5537,12702395,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,ppetermair,ppetermair,19/Mar/14 15:16,19/Mar/14 15:31,13/Mar/19 23:18,19/Mar/14 15:31,6.13.0,6.14.0,,,,,,,6.15.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"With WICKET-5411 (commit 484415796aab76fc4f635b375cbf2b0cd604457f) JavaScript calls in AutoLabelResolver.updateFrom() where changed to use Wicket.DOM.toggleClass().

In one instance the leading ""#"" has been removed. The other two Wicket.DOM.toggleClass() calls still start with '#%s' which leads to double hashmarks and JS errors like the following in the browser:

Wicket.Ajax: Wicket.Ajax.Call.processEvaluation: Exception evaluating javascript: Error: Syntax error, unrecognized expression: ##myComponentId7e-w-lbl, text",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-19 15:31:46.066,,,no_permission,,,,,,,,,,,,380734,,,Wed Mar 19 15:31:46 UTC 2014,,,,,,0|i1tlkf:,381013,,,,,,,,"19/Mar/14 15:31;mgrigorov;Fixed!
Sorry about this!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Too deep recursion in AbstractHierarchyIterator,WICKET-5284,12659556,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mpl,mpl,24/Jul/13 12:39,18/Mar/14 13:00,13/Mar/19 23:18,18/Mar/14 13:00,6.9.1,,,,,,,,6.15.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"In application we have code as follows:

        MarkupContainer mc = ...;
        ComponentHierarchyIterator iter = mc.visitChildren(FormComponent.class);
        for (Component c : iter) {
           ...
        }

However, when run, on many pages this causes java.lang.StackOverflowError, with lots of the stacktrace filled with lines like this:

...
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:302)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:302)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:259)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:297)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:259)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:297)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:302)
	org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:259)
...

It seems that the search for next component in the iteration produces too deep recursion here (not infinite, but too deep for processing a typical page with relatively lots of components) and I suspect that the length of the stack used by the iterator is proportional to the total number of components in the page.",,,,,,,,,,,,,,,,,WICKET-3789,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-24 12:44:26.011,,,no_permission,,,,,,,,,,,,339749,,,Tue Mar 18 13:00:24 UTC 2014,,,,,,0|i1mlk7:,340068,,,,,,,,"24/Jul/13 12:44;mgrigorov;HierarchyIterator classes are kind of experimental.
They were supposed to replace the visitor based component tree traversal but haven't been tested well enough.

Please provide a quickstart app that shows the problem and we will investigate the problem.
In the meantime you can use org.apache.wicket.MarkupContainer#visitChildren(IVisitor<Component, R> visitor) method.","29/Jul/13 10:28;mgrigorov;Did you try with MarkupContainer#visitChildren(IVisitor<Component, R> visitor) ?
Do you see the same problem with IVisitor with the same page where AbstractHierarchyIterator fails ?","30/Jul/13 08:09;mpl;I replaced the ComponentHierarchyIterator with this:

{code}
mc.visitChildren(FormComponent.class, new IVisitor<FormComponent, FormComponent>() {
  @Override
    public void component(FormComponent c, IVisit<FormComponent> visit) {
    ...
    }
  });
{code}

... and it works without crashing as expected. So the visitor based component traversal works fine.",30/Jul/13 08:11;mgrigorov;Thanks for confirming !,"18/Mar/14 13:00;mgrigorov;Component hierarchy iterators have been marked deprecated and will be removed in Wicket 8.0.
Applications are recommended to use IVisitor based methods. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE calling PackageResource.getResourceStream() if there is no RequestCycle defined,WICKET-5532,12699787,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,gsmet,gsmet,10/Mar/14 14:37,17/Mar/14 09:49,13/Mar/19 23:18,11/Mar/14 13:29,6.13.0,6.14.0,,,,,,,6.15.0,7.0.0-M1,,,,,,0,,,,,,,,"From my email on the list:

Since the introduction of the ProcessingResourceStream, it's not
possible to call PackageResource.getResourceStream() anymore if there
is no RequestCycle defined.

Typically, we call it in our Application init() to prepare (mostly
preprocess and cache) a couple of resources before opening the
application to the public.

We now have a NPE here:
https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java#L496

This problem was introduced by this commit:
https://github.com/apache/wicket/commit/29b26ffffdd619f4e2fe86aa2d2b02ff3e1d6017#diff-428db8d5278d2ac567e471efd377c7c7

Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-11 13:29:56.707,,,no_permission,,,,,,,,,,,,378133,,,Mon Mar 17 09:49:06 UTC 2014,,,,,,0|i1t5nj:,378425,,,,,,,,"11/Mar/14 13:29;mgrigorov;Please test it with 6.15.0-SNAPSHOT if you can before we release 6.15.0.
Thanks!","17/Mar/14 09:49;gsmet;Hi Martin,

I confirm it's OK with 6.15.0-SNAPSHOT.

Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failing HTTPS redirect to RequireHttps annotated pages with ONE_PASS_RENDER strategy,WICKET-5522,12697667,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,dimarzio,dimarzio,27/Feb/14 11:55,13/Mar/14 10:14,13/Mar/19 23:18,13/Mar/14 10:13,6.13.0,6.14.0,,,,,,,6.15.0,7.0.0-M1,,,wicket,,,0,redirect,"RequireHttps,",,,,,,"Activated JS: Start the quickstart -> Press the submit buttons -> See the secured page with https!

Deactivates JS: (NoScript Firefox Plugin): Start the quickstart -> Press the submit buttons -> See the secured page BUT with HTTP!

There was no proper https redirect.

If I change the rendering strategy to REDIRECT_TO_BUFFER everything works fine, but if I change the strategy to ONE_PASS_RENDER the https forwarding does't work anymore. But only if I deactivate all scripts...

Regards,
Dmitriy",,,,,,,,,,,,,,,,,,,,,,,,,27/Feb/14 12:53;svenmeier;WICKET-5522.patch;https://issues.apache.org/jira/secure/attachment/12631520/WICKET-5522.patch,27/Feb/14 11:57;dimarzio;renderstrategyproblem.zip;https://issues.apache.org/jira/secure/attachment/12631511/renderstrategyproblem.zip,,,2.0,,,,,,,,,,,,,,,,,,,2014-02-27 12:53:09.806,,,no_permission,,,,,,,,,,,,376141,,,Wed Mar 05 13:26:59 UTC 2014,,,,,,0|i1sten:,376437,,,,,,,,27/Feb/14 11:57;dimarzio;Quickstart attached.,27/Feb/14 12:53;svenmeier;Possible fix with yet another condition in WebPageRenderer,"27/Feb/14 13:24;dimarzio;There is a workaround for the problem:

Extend RedirectPage -> anotate it with RequireHttps -> insert this page between source (http) and target (https) pages.

The second redirect leads to the https page!

If the fix will be made in WebPageRenderer is it possible also to execute a TODO above the respond method :) ? ",05/Mar/14 13:26;mgrigorov;[~svenmeier] Please add test case(s) with the new variable and apply your suggested fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inefficient DefaultPageStore.SerializedPagesCache,WICKET-5527,12699161,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,06/Mar/14 14:24,13/Mar/14 09:10,13/Mar/19 23:18,13/Mar/14 09:10,6.14.0,,,,,,,,7.0.0-M1,,,,wicket,,,0,,,,,,,,"We have identified some problems in org.apache.wicket.pageStore.DefaultPageStore.SerializedPagesCache.

Some history first: 
At https://cwiki.apache.org/confluence/display/WICKET/Page+Storage I have explained how the page storage management works in Wicket 1.5+ 

In brief:
First level cache/store is the HttpSession - here Wicket saves the live instances of all touched pages in the last request cycle.
Second level cache/store is DefaultPageStore.SerializedPagesCache - here Wicket saves the last N (org.apache.wicket.settings.StoreSettings#getInmemoryCacheSize) used pages in the whole application (by default 40 pages)
Third level cache/store is DiskDataStore - here Wicket stores all pages and depending on org.apache.wicket.settings.StoreSettings#getMaxSizePerSession it will ""recycle"" the file contents

The identified problems:

- org.apache.wicket.pageStore.DefaultPageStore.SerializedPagesCache uses ArrayList as a data structure to keep SerializedPage instances. When the limit N (StoreSettings#getInmemoryCacheSize) is reached the ArrayList uses #remove() to remove the oldest entry. The #remove(0) operation internally uses System.arraycopy() to compact the internal array structure. As you already realize this ArrayList is constantly being recompacted in any application in production.

-  DefaultPageStore.SerializedPagesCache#cache (the same ArrayList) is used as synchronization monitor for every operation (read/write/remove). I.e. we have synchronization on application level !!

- at the moment DefaultPageStore.SerializedPagesCache stores org.apache.wicket.pageStore.DefaultPageStore.SerializedPage. This is a structure of {String sessionId, int pageId, byte[] data}. 
Since this data is stored in the application scope it is never replicated, so there is no need to serialize the live page instance to byte[] at all. Only the third level cache (IDataStore) should work with byte[]


A workaround to avoid the slowness caused by this is to set 0 or negative value to org.apache.wicket.settings.StoreSettings#setInmemoryCacheSize",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,377508,,,2014-03-06 14:24:09.0,,,,,,0|i1t1tj:,377802,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"JS: High stack size in Function Executor causes ""too much recursion""",WICKET-5243,12653881,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,tobiashaupt,tobiashaupt,20/Jun/13 07:50,05/Mar/14 20:02,13/Mar/19 23:18,05/Mar/14 08:49,6.8.0,,,,,,,,6.15.0,7.0.0-M1,,,wicket,,,1,javascript,perfomance,,,,,,"The Function Executor in wicket-ajax-jquery.js uses recursion and deferred calls to the notify() function to ensure synchronous execution of all tasks contained in an AjaxResponse.
Each task calls notif() when it is finished. This causes a recursive call to processNext() thus raising the stack for each execution. If there are a lot of task to handle, the stack size will increase beyond the possible stack size in the client causing a ""too much recursion"" exception and increasingly low performance.

The deferred execution of notify is only necessary if the task executor has to wait for long running tasks to finish at some uncertain point in the future. Examples: downloading of external resources (js, css, images). These task can call back the executor as soon as they are really finished (e.g. load event triggerd).

The problem is that the majority of tasks don't need to wait but return instantly instead. Examples: exchanging components, executing custom javascripts that do not use the ""|-syntax"" to include the notify callback.

Current fix: The depth of the stack is counted and if a depth of >= 1000 is reached, a timeout will interrupt the synchronous task queue execution. A new executor will continue with an empty stack.
Problems with that approach: 
- why 1000?
- several ajax requests might interrupt each other because the synchronous execution is broken.
- if an executed custom javascript creates a big stack itself (e.g. by using jquery a lot) the stack will add to the stack used by the Function Executor so that it may still be too big.

Proposal to fix this: see also the attached patch.
Another callback notifyContinue() is supported that can be called whenever the task will return instantly. This callback avoids the recursive call to processNext and continues in a simple loop over all the tasks.

",Tested on Firefox,,,,,,,,,,,,,,,,WICKET-4675,WICKET-4881,WICKET-5039,,,,,,20/Jun/13 07:52;tobiashaupt;WICKET-5243-avoid-recursion.patch;https://issues.apache.org/jira/secure/attachment/12588779/WICKET-5243-avoid-recursion.patch,04/Mar/14 13:52;mgrigorov;WICKET-5243-notify-only-when-async.patch;https://issues.apache.org/jira/secure/attachment/12632504/WICKET-5243-notify-only-when-async.patch,20/Jun/13 08:36;tobiashaupt;response.xml;https://issues.apache.org/jira/secure/attachment/12588789/response.xml,04/Mar/14 13:52;mgrigorov;wicket-ajax-jquery.js;https://issues.apache.org/jira/secure/attachment/12632505/wicket-ajax-jquery.js,4.0,,,,,,,,,,,,,,,,,,,2013-06-20 08:06:21.798,,,no_permission,,,,,,,,,,,,334158,,,Wed Mar 05 20:02:33 UTC 2014,,,,,,0|i1ln67:,334484,,,,,,,,"20/Jun/13 08:06;mgrigorov;> why 1000 ?
See https://issues.apache.org/jira/browse/WICKET-4675?focusedCommentId=13426609&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13426609
It is a random number that most of the browsers can handle. But it depends on how much data is in each stack frame ...

There is problem with your assumption that you should not wait when components are changed and JS is executed.
The contract is:
1) load all header contributions. This is needed because a script in prependJavaScript may need some library to do its job
2) execute prependJavaScript scripts
3) replace the components
4) execute all OnDomReady, OnLoad and OnEvent header contributions
5) execute all appendJavaScript scripts

prependJS and appendJS scripts are combined in one step each (See WICKET-4675), so this shouldn't be the problem in your case.
I guess you don't have hundreds of header contributions so probably you have many components to be replaced ?!

Can you copy the Ajax response when you face this problem and attach it to the ticket so we can investigate what is the reason ?","20/Jun/13 08:17;tobiashaupt;> why 1000?
Actually I first noticed that bug on a very old system (500MB Ram, WinXP, ...). In my opinion any number is just an assumption of a certain system.

I do not make the assumption that you should not wait. I totally agree that every task has to be finished completly until the next task is executed. Parallel execution has to be avoided to hold the contract that you specified above. Thats clear and the patch I use does not break that principle, does it?

But (in most of the cases!) you dont need recursion to wait for the current task to finish. You can also wait in a simple loop. Still some task need the recursion.",20/Jun/13 08:36;tobiashaupt;Added a response that triggered that error before applying the patch.,"20/Jun/13 08:40;tobiashaupt;In my example I do use a lot of header contributions to attach events to my own event queue. I trigger that queue at the very end of the whole response. I can see that this is not optimal because I may use prependJS in future to avoid the header contributions totally. The application was ported from 1.4 to 1.5 now to 6.x and this is some aspect that I can do better with the changed api possibilities. I may even gain some speed in the execution. 

Anyway wicket should not simply crash or freeze the browser with this number of header contributions, components etc.","20/Jun/13 09:21;mgrigorov;In Wicket 1.5 and before the check to reset the depth and use setTimeout was:

  if (this.depth > 50 || Wicket.Browser.isKHTML() || Wicket.Browser.isSafari()) 

i.e. it used 50 for old WebKits. I'm not sure how it worked for Firefox in your case - there was no upper bound.

I'll feel better if we decrease the check from 1000 to 50 for all browsers than to change the logic for the scheduling and notifications.
Can you check with what number your use case don't break with ""too much recursion"" ?","20/Jun/13 09:26;mgrigorov;Actually

   if (this.depth > 50 || Wicket.Browser.isKHTML() || Wicket.Browser.isSafari()) 

says what I just proposed - 50 for all. Just old WebKits use setTimeout *always*! I read it wrong the first time.","20/Jun/13 09:52;tobiashaupt;Using the timeout in general makes the result of the execution unpredictable because it switches from a synchronous to an asynchronous (or even parallel) way of execution.

I will check the 50 asap.","20/Jun/13 09:59;mgrigorov;You are correct.
We will have to think some more on this.","20/Jun/13 10:10;tobiashaupt;Instead of decreasing the depth threshold, I used prependJavascript instead of header contributions in my application. This fixed my problem even with a number of 1000 and is also much more elegant.

Still the patch fixed my initial problem and should be considered. It avoids the usage (firing) of the threshold in a lot more cases. It will probably increase the support of old browsers without the need of lowering the threshold conditionally.

Thanks for the quick response Martin.","20/Jun/13 10:14;mgrigorov;I prefer to not change this logic until really needed.
I'll leave the ticket open for some time so someone else can work on it.","20/Jun/13 15:18;mgrigorov;JS test ""Wicket.Ajax: Process response with 2k+ evaluations"" also suffers with this symptom on IE9 and older. All other browsers are OK, including IE10.
Decreasing the threshold to 500 fixes it.

Reworking the FunctionExecuter to use Promises (jQuery.Deferred) will probably solve this issue. But this will take some time.","26/Feb/14 17:25;gsmet;FWIW, starting with Firefox 23, we started to have Too much recursion error when we replace too many components with Wicket (with ""too many"" quite low unfortunately).

It looks like a Firefox regression and we filled a bug here:
https://bugzilla.mozilla.org/show_bug.cgi?id=960523

People at Mozilla are currently looking into it.

Some other people started to have problems too here:
https://bugzilla.mozilla.org/show_bug.cgi?id=966173

Thought it might be useful information.

-- 
Guillaume",27/Feb/14 09:46;ihorpts;@[~damieng] thank you for the info - we've got the same issue now with Wicket 6.5.0 + Firefox 24 when a page is trying to replace too many components,"04/Mar/14 13:19;mgrigorov;I have an idea how to simplify Wicket's code.
First let me reproduce the problem with FunctionExecuter involved.","04/Mar/14 13:52;mgrigorov;Here are a patch and a patched wicket-ajax-jquery.js.
The idea is that notify() is used only when there is something asynchronous. In all other cases the functions return state. When the state is DONE (i.e. the execution has finished without problems) FunctionsExecuter will execute the next scheduled function without allocating a new stack frame.

Now only loading a new <script>, a new <link> and JavaScript execution (appendJavaScript/prependJavaScript) with manual control will require new stack frame.

Please test this suggested fix with your applications and give feedback.","04/Mar/14 14:03;ihorpts;Thank you Martin.

As far as we can test it - I'll give immediate feedback here.","04/Mar/14 15:43;gsmet;Hi Martin,

I can confirm that your patch fixes our ""too much recursion"" issues with Firefox.

We will continue to follow up on the Firefox issue to see if we can get the limit back to what it was before there, but it's really nice to have it fixed in Wicket.

-- 
Guillaume","04/Mar/14 15:45;mgrigorov;Thanks for testing, Guillaume!
I will clean and document the new functionality and push it. It will be part of 6.15.","04/Mar/14 15:56;gsmet;Thanks Martin!

We look forward to 6.15!","05/Mar/14 08:49;mgrigorov;The suggested patch has been applied to wicket-6.x and master branches.
From now on recursion will not be used when there is no need to wait for notify() calls.
notify() is needed only for JS/CSS resources' download and JS execution with manual control.

This reduces a lot the need of allocating stack frames (i.e. using recursion) but still doesn't remove this completely.","05/Mar/14 08:57;mgrigorov;The fix has been tested locally on:
- IE 8 (XP), 9 and 11 (Windows 7)
- Chrome 32 (Linux), 27 (Windows)
- Firefox 27 (Linux), 25 (Windows)
- Opera 16 (Windows)
- Safari 5.1.7 (Windows)","05/Mar/14 20:02;ihorpts;Hi Martin

Your patch has fixed our problem as well (it was merged for Wicket 6.5.0).

Thank you!",,,,,,,,,,,,,,
Ajax indicator not working when display is set to none in css,WICKET-5523,12697986,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,VaclavC,VaclavC,28/Feb/14 18:33,05/Mar/14 12:48,13/Mar/19 23:18,05/Mar/14 12:48,6.14.0,,,,,,,,6.15.0,7.0.0-M1,,,,,,0,,,,,,,,"I created a simple quickstart with one AjaxLink and one div used as ajax indicator (id ajax_indicator). When I set display: none to ajax_indicator in css, is does not show up when pressing link. When I remove display:none from css, it disappears after when ajax request is finished and works fine for next ajax requests.","Ubuntu 13.10 x86_64
JavaSE-1.6",,,,,,,,,,,,,,,,,,,,,,,,28/Feb/14 18:34;VaclavC;ajax_indicator_test.zip;https://issues.apache.org/jira/secure/attachment/12631805/ajax_indicator_test.zip,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,376460,,,2014-02-28 18:33:44.0,,,,,,0|i1svdj:,376756,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Header rendering of components inside of InlineEnclosure,WICKET-5479,12690071,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,frido-lbm,frido-lbm,21/Jan/14 17:48,05/Mar/14 10:02,13/Mar/19 23:18,05/Mar/14 10:02,6.13.0,,,,,,,,7.0.0-M1,,,,,,,0,enclosure,,,,,,,"AjaxLink inside of an InlineEnclosure doesnt work, if container is made visible via ajax.
It is possible to use a WebMarkupContainer instead as workaround.

The Question is: should the InlineEnclosure work, which looks straight forward to me, or is this problem hard to fix and I should keep using the workaround?",,,,,,,,,,,,,,,,,,,,,,,,,21/Jan/14 17:49;frido-lbm;ajax-enclosure.zip;https://issues.apache.org/jira/secure/attachment/12624167/ajax-enclosure.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-27 15:00:06.173,,,no_permission,,,,,,,,,,,,369028,,,Wed Mar 05 10:02:24 UTC 2014,,,,,,0|i1rlt3:,369333,,,,,,,,21/Jan/14 17:50;frido-lbm;Quickstart is attached,"27/Jan/14 15:00;mgrigorov;This is yet another example of a problem that (Inline)Enclosure has - as an auto component it exists only during the rendering phase and is invisible for its real children.

Here is what happens:
1) 'link2' has no idea that its parent is InlineEnclosure and at org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor#preCheck the visibility check says that it is visible and its renderHead() is called. But since the InlineEnclosure itself reports that it is invisible, because its controlling child 'link1' is invisible, it doesn't render the markup of link1 and link2. So Wicket registers Wicket.Ajax.ajax(""c"": ""link2"", ...) but there is no DOM node for 'link2' and thus the error in the console.

2) later when you click 'activate' Wicket makes the InlineEnclosure visible but since it doesn't know what is inside it (i.e. its #children member variable is null) it doesn't call #renderHead() for link1 and link2 in the Ajax request (see org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy#renderChildHeaders) and thus there are no Wicket.Ajax.ajax() snippets in the Ajax response and clicking on the links is noop.

This is a well known problem with Wicket Enclosure and InlineEnclosure components. I have suggested to remove them once but other people think that it is worth to keep them because they work most of the time...


You used EnclosureContainer instead of InlineEnclosure in your initial description. Just to make it clear - EnclosureContainer is something like WebMarkupContainer that manages its visibility automatically. This is the component that I recommend when you need such functionality.
<div wicket:enclosure> resolves to InlineEnclosure - this one has the problems.",27/Jan/14 15:05;mgrigorov;Linked to WICKET-4874 - a ticket that links to all other known issues with enclosures.,"05/Mar/14 10:02;mgrigorov;Fixed by using the new queueing mechanism (WICKET-3335) - https://www.42lines.net/2014/02/28/component-queueing-in-wicket-7/

This is the new code:

link1.setOutputMarkupPlaceholderTag(true).setVisible(false);
queue(activate, link1, link2);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem with nested InlineEnclosures,WICKET-5457,12686606,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,kaakku,kaakku,28/Dec/13 09:54,05/Mar/14 09:54,13/Mar/19 23:18,05/Mar/14 09:54,6.13.0,,,,,,,,7.0.0-M1,,,,wicket,,,4,enclosure,,,,,,,"Nested InlineEnclosures do not work. InlineEnclosures also have problems on pages that use wicket:extend and wicket:child. This issue is a continuation of issues WICKET-3947 and WICKET-4700. They are both marked as duplicates for issue WICKET-4874 that has been open for over a year. The problem still exists on latest 1.6.x branch.

A patch for similar problem in 1.4 branch can be found in WICKET-5458.",,,,,,,,,,,,,,,,,,,,,,,,,28/Dec/13 09:55;kaakku;Quickstart  WICKET-5457.zip;https://issues.apache.org/jira/secure/attachment/12620726/Quickstart++WICKET-5457.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2014-03-05 09:54:25.144,,,no_permission,,,,,,,,,,,,365597,,,Wed Mar 05 09:54:25 UTC 2014,,,,,,0|i1r0pz:,365904,,,,,,,,28/Dec/13 09:55;kaakku;This quick start demonstrates the problem.,"05/Mar/14 09:54;mgrigorov;The quickstart was a bit broken - it had to use .setOutputMarkupPlaceholderTag(true) instead of .setOutputMarkupId(true) for the labels.
But even with this correction hiding label1 didn't hide the inner inline enclosure, i.e. label2 was still visible.

The problem is fixed by using the new queueing functionality in Wicket 7 - https://www.42lines.net/2014/02/28/component-queueing-in-wicket-7/",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxRequestTarget.append/prependJavaScript cannot handle scripts with new-lines anymore,WICKET-5504,12694331,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,p.huijnen,p.huijnen,10/Feb/14 19:42,17/Feb/14 20:18,13/Mar/19 23:18,17/Feb/14 20:18,6.12.0,6.13.0,,,,,,,6.15.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"Previously (version <= 6.0.8, but I suspect <= 6.0.11) , code like the following worked:

public void onSomething(AjaxRequestTarget target) {
target.prependJavaScript(
   ""notify|jQuery('#someSelector').slideUp({\n"" +
      ""   complete: function() {\n"" +
      ""        doSomething();\n"" +
      ""        notify();\n"" +
      ""   }\n"" +
      ""});""
);
}

Note two things about this code:
* it uses the ""notify|...."" method to delay execution of other scripts until the animation is complete;
* it contains some new line characters.

In Wicket 6.0.12 (and 6.0.13) this script fails silently: the slideUp doesn't get executed.

When I remove the new-line-characters ""\n"" from the script, it works again.

Cause: line 1075 of wicket-ajax-jquery.js states:

var scriptSplitterR = new RegExp(""\\(function\\(\\)\\{.*?}\\)\\(\\);"", 'gi');

This regular expression does NOT match my script, while it should. This is caused by the the dot not matching the new line character.

A solution (according to various sources) could be the following, as [\S\s] matches any character (including new line characters):

var scriptSplitterR = new RegExp(""\\(function\\(\\)\\{[\s\S]*?}\\)\\(\\);"", 'gi');

Additional info: on github, I see the following lines in wicket-ajax-jquery.js have changed between 6.0.11 and 6.0.12:

var scripts = cleanArray(text.split(scriptSplitterR));

has become:

var scripts = [];
var scr;
while ( (scr = scriptSplitterR.exec(text) ) != null ) {
    scripts.push(scr[0]);
}

I suspect this change now causes my little problem.
   ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-10 19:52:08.769,,,no_permission,,,,,,,,,,,,372840,,,Mon Feb 10 20:03:39 UTC 2014,,,,,,0|i1s94n:,373144,,,,,,,,10/Feb/14 19:45;p.huijnen;This is my first bug report for Wicket: how do I get some nice code formatting in the description? I am used to JIRA using the Confluence wiki markup language.,"10/Feb/14 19:52;mgrigorov;A simple quickstart would help to resolve this ticket faster.
Thanks!

About code formatting: Apache sysadmins switched off this functionality long time ago.","10/Feb/14 20:03;p.huijnen;OK, I will see if I can find that extra half an hour to do that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebPageRenderer must not render full page in Ajax requests,WICKET-5484,12690739,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,svenmeier,svenmeier,23/Jan/14 10:26,17/Feb/14 09:23,13/Mar/19 23:18,23/Jan/14 21:53,6.13.0,7.0.0-M1,,,,,,,6.14.0,7.0.0-M1,,,wicket,,,1,,,,,,,,"WebPageRenderer renders the full page when WebRequest#shouldPreserveClientUrl() is true or RedirectStrategy.NEVER_REDIRECT is configured.

For Ajax request this means that wicket-ajax-js will not be able to parse the HTML response.",,,,,,,,,,,,,,,,,,,,,WICKET-5509,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,369475,,,Thu Jan 23 21:53:12 UTC 2014,,,,,,0|i1rojz:,369780,,,,,,,,23/Jan/14 21:53;svenmeier;A page is never rendered-and-written to the response on Ajax requests now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Evaluation of returned data (which includes alot of javascript) very slow after ajax call in IE10.,WICKET-5132,12640963,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,basveenema,basveenema,05/Apr/13 08:14,17/Feb/14 09:10,13/Mar/19 23:18,13/May/13 10:22,6.0.0,,,,,,,,6.7.0,,,,wicket,,,0,javascript,performance,,,,,,"We're using ajax to update a treetable. In IE10, when the ajax call returns the data, which contains alot of javascript code, processEvaluation in wicket-ajax-jquery.js stalls on var text = jQuery(node).text();
In jQuery procedure Sizzle.getText is called, which eventually returns property elem.textContent. In IE10 this last statement takes about 26 seconds for our case while the same statement in chrome takes about 6 ms.

It seems strange that IE10 takes this long to return the textContent of a node, but why is this necessary in the first place?
The purpose of var text = jQuery(node).text() would be to get the text of the node. I think it would suffice to state var text = node.childNodes[0].nodeValue instead of var text = Query(node).text(), because the text is in the node itself, and it's not necessary to get the text from its descendants, because it has no descendants.

In our case this modification improves the duration from 25915 ms to 8 ms in IE10.",IE10,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,05/Apr/13 12:04;basveenema;response_script.txt;https://issues.apache.org/jira/secure/attachment/12577204/response_script.txt,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-05 08:34:09.537,,,no_permission,,,,,,,,,,,,321417,,,Mon Feb 17 09:10:41 UTC 2014,,,,,,0|i1jggn:,321762,,,,,,,,"05/Apr/13 08:34;mgrigorov;This report looks like it should be reported to jQuery project instead.

Can you attach a sample response that takes that long time ? I'd like to reproduce this because it looks like a problem in your installation of IE10. I cannot imagine how such simple thing can take that long time. Have you tried with IE9 too ?","05/Apr/13 12:02;basveenema;I'll attach the javascript that is in the response. Javascript part is being tuned... but this is the example that takes about 25 seconds to process in IE10.

In IE9 there's no performance issue because elem.textContent is undefined, which results in traversing its children and eventually returning elem.nodeValue, which performs as expected. 

I understand what you're saying about reporting to the jQuery project instead, however, it seems a bit overkill to call a jQuery function to get the text from a node when you can get the text from the node directly.

Maybe you can take a look at http://jsperf.com/xml-text-selection-jquery-vs-textcontent-vs-nodevalue. Performance of $(node).text() on my machine (using chrome) is 93% slower than node.firstChild.nodeValue.

So unless of course there's a good reason to use jQuery's .text() it seems to me that it's a bit overkill for this particular usage.",05/Apr/13 12:04;basveenema;response (only the javascript) which takes 25 secondes to process.,"05/Apr/13 12:21;mgrigorov;The reason to use jQuery is that IE is notorious of not following W3C standards and jQuery task is to handle browser inconsistencies.
In your example you use node.textContent but in older IE versions there is no such property and one has to use node.text instead.
I ran the jsperf comparison and I see the big benefit. The suggested improvement will be applied! I just need to install IE 7/8 here to test that they still work.",05/Apr/13 13:19;basveenema;Great! Thanks!,"05/Apr/13 16:20;bitstorm;@Martin
I'm testing IE 7/8 right now. I will wrote the result as soon as possible.",05/Apr/13 17:24;bitstorm;If used 'node.childNodes[0].nodeValue' in place of ' jQuery(node).text()' as suggested by Bas and I successfully tested it with IE7/8 and Firefox 20,"08/Apr/13 10:12;mgrigorov;Thanks, Andrea!

In the JSPerf link Bas provided there is no usage of childNodes[0].nodeValue.
Can you check with s = node.textContent and s = node.firstChild.nodeValue ?
It would be nice if you run the test on IE 7 and 8 so we can see the results. Scroll to the bottom in the JSPerf page and you will see the current results for different browsers.","08/Apr/13 15:57;bitstorm;Unfortunately it is not possible running Bas's test with  IE 7/8 because they don't define method  createDocument (see http://help.dottoro.com/ljqlhagh.php). However, node.firstChild.nodeValue works fine with both 7 and 8.","09/Apr/13 07:08;mgrigorov;From now on node.firstChild.nodeValue will be used.
jQuery(node).text() will be used as a fallback if an error occurs. The fallback will be removed later if there are no issues reported.

Thanks all for the help!","02/May/13 01:56;damien.hollis;Martin,

This change seems to be causing us problems.  When we open a popup, we get the following error:

ERROR: Wicket.Ajax.Call.processEvaluation: Exception evaluating javascript: SyntaxError: Unexpected end of input, text: (function(){var e = Wicket.$('ok198--ajax-indicator'); if (e != null && typeof(e.parentNode) != 'undefined') e.parentNode.removeChild(e);})();(function(){var e = Wicket.$('cancel199--ajax-indicator'); if (e != null && typeof(e.parentNode) != 'undefined') e.parentNode.removeChild(e);})();(function(){

When I debug the javascript code I see that the result of evaluating node.firstChild.nodeValue is

""(function(){var e = Wicket.$('ok198--ajax-indicator'); if (e != null && typeof(e.parentNode) != 'undefined') e.parentNode.removeChild(e);})();(function(){var e = Wicket.$('cancel199--ajax-indicator'); if (e != null && typeof(e.parentNode) != 'undefined') e.parentNode.removeChild(e);})();(function(){""

but evaluating jQuery(node).text() provides the expected javascript:

""(function(){var e = Wicket.$('ok198--ajax-indicator'); if (e != null && typeof(e.parentNode) != 'undefined') e.parentNode.removeChild(e);})();(function(){var e = Wicket.$('cancel199--ajax-indicator'); if (e != null && typeof(e.parentNode) != 'undefined') e.parentNode.removeChild(e);})();(function(){var e = Wicket.$('link19a--ajax-indicator'); if (e != null && typeof(e.parentNode) != 'undefined') e.parentNode.removeChild(e);})();(function(){var e = Wicket.$('link19b--ajax-indicator'); if (e != null && typeof(e.parentNode) != 'undefined') e.parentNode.removeChild(e);})();""

So it seems that the two approaches do not produce the same result.

I'm testing on Chrome but our users are reporting problems on a variety of browsers.

Can this change be reverted?",02/May/13 05:26;mgrigorov;Can you provide a test case ?,"10/May/13 14:11;rototor;I can confirm this problem. I just upgraded to Wicket 6.7.0 and got this error. 

Within my application i can reproduce this error very easy: Just open a (Ajax) ModalWindow and add many Javascript behaviors to it, so that the Javascript to evaluate is not too small (i.e. > 2 kb).

The problem here is, that according to the Chrome ""Network""-Tab the <evaluate> element has one CDATA. But in the DOM it is split (for whatever reason) into 3 CDATA nodes. 

jquery(node).text() will concat the text of all those nodes. ""text = node.firstChild.nodeValue; "" will not ....

You need to put a loop here. Something like

var text =""""; var n = node.firstChild; while(n) { text = text + n.nodeValue; n = n.nextSibling; }

I'll downgrade to Wicket 6.6 till this is fixed.",13/May/13 10:22;mgrigorov;The issue will be solved with WICKET-5185.,"13/May/13 11:38;mgrigorov;The improvement is applied.
Please test with 6.8.0-SNAPSHOT/7.0.0-SNAPSHOT if you can.

https://git-wip-us.apache.org/repos/asf/wicket/repo?p=wicket.git;a=commitdiff;h=62562dc4581046ad268c11a66f0dc71d92ddf456","13/May/13 12:15;rototor;With the snapshot wicket-core-6.8.0-20130513.120220-37.jar it works for me. Thanks!

Just a small nitpick: When using an old ancient browser (IE8 ...), concating text is slow. Using an array and join() is faster there ... I.e. 

var result = [];

result.push(...);

result.join("""");

(Und guess what browser one of my customers is using ...)
","13/May/13 12:25;mgrigorov;Good point, Emmeran!
I'll improve it.","13/May/13 13:05;mgrigorov;https://git-wip-us.apache.org/repos/asf/wicket/repo?p=wicket.git;a=commitdiff;h=3c7d371ea7cd787b0c931779c30e54d7b34b9f6d
Improved.
Thanks!","13/Feb/14 14:50;nkuehn;To be honest, I'm a little confused whether the issue is solved or just the subtask. 

we are currently experiencing a massive performance problem with IE11 on Win8 when applying large (ca. 800kb) wicket ajax updates under wicket 6.8.0 release (ca 26 seconds to apply the server answer).  The issue is in the IE11  implementation of   .textcontent   - if we switch the IE mode to 10 or 9  the  issue is gone. 

Looks like there's no really clean way to circumvent this in the application code. 

Is this the same Issue or a new one?   (this one is officially labeled IE10, but it's the same context of things). ","13/Feb/14 15:21;mgrigorov;Can you identify which code exactly is slow in IE11 ?
I see Wicket uses jQuery.text() in three other places. I can send you patched wicket-ajax-jquery.js that uses the same solution as for the above problem so you can test it locally ?","14/Feb/14 15:58;nkuehn;It's a little hard to debug because the debugger itself interferes with the behavior (hover over ""node"" and it tries to generate a preview which calls .textcontent itself etc...).  

A more specialized colleague of mine is looking into the issue, too, but as far as I could find out this  https://github.com/apache/wicket/blob/build/wicket-6.8.0/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js#L996   is the place where ""it"" happens.  The access is still via jquery text()  (which again uses Sizzle for getText) in the master repo. 

is there a chance that the issue is resolved with the update to jQuery 1.9  in newer wicket versions?   We're currently hesitating from migrating, but if that fixes it we would. 

Greets and thank you!","15/Feb/14 19:57;Booya;Colleague here - well it is indeed the fact that jquery {{getText()}} invokes the problematic {{.textContent}} lines:

{code:javascript}
getText = Sizzle.getText = function( elem ) {
        ...
	if ( nodeType ) {
		if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (see #11153)
			if ( typeof elem.textContent === ""string"" ) {
				return elem.textContent;
                        }
                 ...
                 }
         ...
        }
...
}
{code}

In our case of the mentioned 800kb XML each access to {{.textContent}} takes at least 10 seconds+ 
the call stack looks like this

{noformat}
getText [Line: 3997, Col: 4], jquery-ver-1391007748983.js
getText [Line: 4014, Col: 4], jquery-ver-1391007748983.js
Anonymous function [Line: 5705, Col: 4], jquery-ver-1391007748983.js
access [Line: 828, Col: 3], jquery-ver-1391007748983.js
text [Line: 5704, Col: 3], jquery-ver-1391007748983.js
parse [Line: 1873, Col: 6], wicket-ajax-jquery-ver-1391007748983.js
processContribution [Line: 1906, Col: 6], wicket-ajax-jquery-ver-1391007748983.js
processHeaderContribution [Line: 1123, Col: 4], wicket-ajax-jquery-ver-1391007748983.js
loadedCallback [Line: 914, Col: 7], wicket-ajax-jquery-ver-1391007748983.js
processAjaxResponse [Line: 729, Col: 6], wicket-ajax-jquery-ver-1391007748983.js
success [Line: 610, Col: 7], wicket-ajax-jquery-ver-1391007748983.js
fire [Line: 974, Col: 5], jquery-ver-1391007748983.js
fireWith [Line: 1084, Col: 7], jquery-ver-1391007748983.js
done [Line: 7803, Col: 5], jquery-ver-1391007748983.js
callback [Line: 8518, Col: 8], jquery-ver-1391007748983.js
{noformat}

thanks and regards,

Marcel Lucas","17/Feb/14 09:10;mgrigorov;I've created https://issues.apache.org/jira/browse/WICKET-5510.
Please add yourselves as watchers. I'll attach an improved wicket-ajax-jquery.js so you can test it.
Thanks! ",,,,,,,,,,,,,
Page is not touched during initialization,WICKET-5499,12693334,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,davesman,davesman,05/Feb/14 12:40,11/Feb/14 19:35,13/Mar/19 23:18,11/Feb/14 19:35,6.13.0,,,,,,,,6.14.0,7.0.0-M1,,,wicket,,,0,dirty,expired,page,touch,wicket,,,"After migration from 6.12.0 to 6.13.0 our app stopped working.
I figured out that there is a new condition in Page#dirty(final boolean isInitialization) on line 288:

if (isInitialization == false)
{
	pageManager.touchPage(this);
}

That means that nely constructed page does not get touched thus is not stored in page store.
The problem is that when I do something like this

printPage = new PrintPage(event.getFormId(), event.getFormData());
PageProvider pp = new PageProvider(printPage);
RenderPageRequestHandler rh = new RenderPageRequestHandler(pp);
CharSequence url = RequestCycle.get().urlFor(rh);

I get an URL pointing to page with id X - but that page is not found because it was not stored and I ends with nonsense PageExpired exception.

I notice that 6.13.0 version fixed some bugs with stateless / statefull pages, etc. so that may be the cause. Nevertheless I think it's a bug.
If you do not want to touch page during creation, then it must get touched whenever it is involved in some request handler.

","Windows 7 64-bit
JDK/JRE 1.6.0_29",,,,,,,,,,,,,,,,,,,,,,,,11/Feb/14 16:25;mgrigorov;WICKET-5499-2.patch;https://issues.apache.org/jira/secure/attachment/12628247/WICKET-5499-2.patch,11/Feb/14 16:01;svenmeier;WICKET-5499.patch;https://issues.apache.org/jira/secure/attachment/12628242/WICKET-5499.patch,,,2.0,,,,,,,,,,,,,,,,,,,2014-02-05 12:46:46.868,,,no_permission,,,,,,,,,,,,371919,,,Tue Feb 11 19:35:00 UTC 2014,,,,,,0|i1s3hb:,372223,,,,,,,,05/Feb/14 12:46;mgrigorov;WICKET-5471 addresses this issue but maybe it doesn't cover your use case.,"05/Feb/14 12:54;davesman;I think that it may solve our issue. We could even use your workaround - but on many places. So it is better to stay on 6.12.0 until it is fixed.
Could you tell me how this will be fixed? Will you revert to touch during init or touch the page when it gets referenced by some handler, etc....",05/Feb/14 12:55;mgrigorov;Touch the page when it is passed to PageProvider(Page) constructor,"05/Feb/14 12:55;svenmeier;We can probably just move the following line from #setResponsePage() to somewhere in RenderPageRequestHandler:

		Session.get().getPageManager().touchPage(page);
","05/Feb/14 13:30;davesman;OK, thanks for info... I'll watch this issue a come back to it when 6.14.0 is released.",11/Feb/14 12:54;mgrigorov;Touching the page in PageProvider(Page) constructor causes a lot of failing tests...,11/Feb/14 16:01;svenmeier;Many tests don't have a session attached to the thread.,"11/Feb/14 16:25;mgrigorov;Here is more complete patch.
Should we apply it before Martijn cut the release tonight ?","11/Feb/14 19:27;svenmeier;Patch looks very good, thanks Martin!

+1 on applying it today.",11/Feb/14 19:35;mgrigorov;Done.,,,,,,,,,,,,,,,,,,,,,,,,,,
Patch FileUploadBase to fix CVE-2014-0050,WICKET-5502,12693896,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,07/Feb/14 14:15,07/Feb/14 14:47,13/Mar/19 23:18,07/Feb/14 14:16,1.5.11,6.13.0,,,,,,,1.5.12,6.14.0,7.0.0-M1,,wicket,,,0,,,,,,,,"Wicket has local copy of commons-fileupload files to avoid having dependency to third party libraries.
Recently a security vulnerability has been found in commons-fileupload that is fixed in 1.3.1.
Wicket copy should be patched as well.",,,,,,,,,,,,,,,,,WICKET-5503,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,372405,,,2014-02-07 14:15:09.0,,,,,,0|i1s6gv:,372709,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ignore the path parameters when reading the page class,WICKET-5500,12693523,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,06/Feb/14 09:20,06/Feb/14 10:37,13/Mar/19 23:18,06/Feb/14 10:37,6.13.0,,,,,,,,6.14.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"http://localhost:8080/linkomatic/wicket/bookmarkable/org.apache.wicket.examples.linkomatic.Page3;myjsessionid=123456 leads to :

WARN  - AbstractRepeater           - Child component of repeater org.apache.wicket.markup.repeater.RepeatingView:area has a non-safe child id of page1. Safe child ids must be composed of digits only.
WARN  - WicketObjects              - Could not resolve class [org.apache.wicket.examples.linkomatic.Page3;blass=koko]
java.lang.ClassNotFoundException: org/apache/wicket/examples/linkomatic/Page3;blass=koko
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:264)
	at org.apache.wicket.application.AbstractClassResolver.resolveClass(AbstractClassResolver.java:108)
	at org.apache.wicket.core.util.lang.WicketObjects.resolveClass(WicketObjects.java:72)
	at org.apache.wicket.core.request.mapper.AbstractComponentMapper.getPageClass(AbstractComponentMapper.java:139)
	at org.apache.wicket.core.request.mapper.BookmarkableMapper.parseRequest(BookmarkableMapper.java:118)
	at org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper.mapRequest(AbstractBookmarkableMapper.java:292)
	at org.apache.wicket.request.mapper.CompoundRequestMapper.mapRequest(CompoundRequestMapper.java:152)
	at org.apache.wicket.request.cycle.RequestCycle.resolveRequestHandler(RequestCycle.java:190)
...

Such request at the moment works only if the the path parameter name is 'jsessionid'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-06 09:50:39.426,,,no_permission,,,,,,,,,,,,372108,,,Thu Feb 06 10:37:05 UTC 2014,,,,,,0|i1s4nj:,372413,,,,,,,,"06/Feb/14 09:31;mgrigorov;When 'myjsessionid' is set as a custom jsessionid with -Dwicket.jsessionid.name=myjsessionid Wicket properly removes it from the url here:

stripJSessionId():924, Strings {org.apache.wicket.util.string}, Strings.java
getContextRelativeUrl():184, ServletWebRequest {org.apache.wicket.protocol.http.servlet}, ServletWebRequest.java
<init>():113, ServletWebRequest {org.apache.wicket.protocol.http.servlet}, ServletWebRequest.java
<init>():83, ServletWebRequest {org.apache.wicket.protocol.http.servlet}, ServletWebRequest.java
newWebRequest():449, WebApplication {org.apache.wicket.protocol.http}, WebApplication.java
createWebRequest():494, WebApplication {org.apache.wicket.protocol.http}, WebApplication.java
processRequest():196, WicketFilter {org.apache.wicket.protocol.http}, WicketFilter.java
....

So it seems the reporter in the mailing list discussion (http://markmail.org/message/gxapm54ekwhcrdl4) didn't set it properly.

Now the question is: Should Wicket remove any other path parameters from the parsed class name from the url ? In my opinion it should.","06/Feb/14 09:50;svenmeier;Since BookmarkableMapper interprets the path segment, it should clean up any path parameters.",06/Feb/14 10:37;mgrigorov;Done.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in JsonUtils when the value is null,WICKET-5497,12692628,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,phantom,phantom,01/Feb/14 00:42,02/Feb/14 10:20,13/Mar/19 23:18,02/Feb/14 10:20,6.13.0,,,,,,,,6.14.0,7.0.0-M1,,,wicket,,,0,json,wicket,,,,,,"Most part of org.apache.wicket.ajax.json.JsonUtils.asArray(Map<String, Object> map) is trying carefully avoid null value. But there is following line

else if (value.getClass().isArray())

which cause NPE in case of empty value for some key.


P.S. Will provide patch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,371223,,,2014-02-01 00:42:55.0,,,,,,0|i1rz7z:,371526,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket-guice doesn't support @javax.inject.Named annotations,WICKET-5482,12690307,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,phantom,phantom,22/Jan/14 16:46,02/Feb/14 09:06,13/Mar/19 23:18,02/Feb/14 09:06,6.13.0,,,,,,,,6.14.0,7.0.0-M1,,,wicket-guice,,,0,injection,,,,,,,"Following annotations in wicket commponent have not been supported now:

@Inject
@Named(""myproperty"")
private String myproperty;

And instead of throwing exception, wicket-guice just substitute """" for String fields. And that is making debuging of problems quite difficult task.

The problem, from my point of view, lies in org.apache.wicket.guice.GuiceFieldValueFactory.findBindingAnnotation(); or can be fixed one level up (org.apache.wicket.guice.GuiceFieldValueFactory.getFieldValue())",,,,,,,,,,,,,,,,,,,,,,,,,31/Jan/14 13:51;mgrigorov;WICKET-5482.patch;https://issues.apache.org/jira/secure/attachment/12626300/WICKET-5482.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-22 19:32:03.578,,,no_permission,,,,,,,,,,,,369260,,,Sun Feb 02 09:06:00 UTC 2014,,,,,,0|i1rn87:,369565,,,,,,,,22/Jan/14 19:32;mgrigorov;Test + patch are welcome !,"22/Jan/14 23:25;phantom;Martin, no problem - will do.
Btw, question: I know procedure of uploading patches to JIRA and etc., but is it possible to become contributor? I have lots of interesting stuff for Wicket and can show that to someone from contributers to decide.
","23/Jan/14 14:35;mgrigorov;To become contributor to Wicket itself you have to show your skills to code (by providing patches), or that you know it very well (by helping in the forums or write a book).
But it is much easier to contribute to WicketStuff (https://github.com/wicketstuff/core). This is another way to show us your desire to help Wicket.
Please ask in the mailing lists for more details.","31/Jan/14 13:53;mgrigorov;Guice's @com.google.inject.name.Named works without problem.
But I cannot find how to make a binding with JSR330's javax.inject.Named.
See attached patch. Find a way to add the binding and we will reopen this ticket.","02/Feb/14 05:22;phantom;According to google guice code it doesn't matter which particular annotation was used - either @javax.inject.Named or @com.google.inject.name.Named. You can take a look com.google.inject.internal.Annotations.canonicalizeIfNamed.

But if you want explicetly test that with Named binding , I think, you can use this:

@Provides
@javax.inject.Named(""mystring"")
public String provideMyString()
{
    return ""this is my string"";
}","02/Feb/14 09:06;mgrigorov;OK. That gave me idea what is needed to do the binding.
I think there must be a simpler way but I cannot find any example in the web.
See org.apache.wicket.guice.GuiceInjectorTest#testInjectionAndSerialization and org.apache.wicket.guice.JavaxInjectTestComponent#named1 for example how to do it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"AuthenticatedWebSession#authenticate should be protected, not public",WICKET-5308,12662397,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,cmenzel,cmenzel,cmenzel,07/Aug/13 14:56,31/Jan/14 14:54,13/Mar/19 23:18,07/Aug/13 17:34,6.9.1,7.0.0-M1,,,,,,,7.0.0-M1,,,,wicket-auth-roles,,,0,,,,,,,,"A common source of confusion in trainings is that when implementing security using wicket-auth-roles, you have to implement #authenticate in your own session class, but in the login form's #onSubmit you have to call #signIn.

Both #authenticate and #signIn are public and both have identical signatures. Their names mean basically the same thing too. This is rather error-prone.

I propose changing the visibility of #authenticate to protected. That way, it will still work the same as it does now, except it won't show up in code-completion anymore and won't compete with #signIn anymore.

This should not be an API break, since #authenticate is abstract anyway and is always implemented in user code. Raising visibility from protected to public is always legal, so user code should not break from this change.

Opinions?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-07 15:06:26.309,,,no_permission,,,,,,,,,,,,342401,,,Wed Aug 07 17:34:57 UTC 2013,,,,,,0|i1n1tj:,342706,,,,,,,,"07/Aug/13 15:06;mgrigorov;The change will be API break and thus cannot be made in 6.x branch.
I understand that all user apps already override this method and it is 'public' in their code, so after changing it to 'protected' in wicket-auth-roles their code should still work, but maven-clirr-plugin won't let you do this. It is not that smart.

I'd suggest you to ask for opinions in dev@ because not all Wicket developers are subscribed to the Jira mails (commits@ mailing list) and even more users (non-core developers).","07/Aug/13 16:47;cmenzel;[mode: nitpick!] That means that technically it's not an API break but a bug in clirr ;-)

That said, I don't mind if we skip this for 6.x and just put it in 7.",07/Aug/13 17:34;cmenzel;pushed the change to master (7) only,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebApplication ignores a SecurityException when reading the configuration type,WICKET-5492,12691985,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,a.zwaan,a.zwaan,29/Jan/14 09:33,30/Jan/14 08:54,13/Mar/19 23:18,30/Jan/14 08:48,1.4.18,,,,,,,,1.5.12,6.14.0,7.0.0-M1,,wicket,,,0,exception-handling,security,,,,,,"The WebApplication class has a piece of code in the method getConfigurationType(), that ignores a SecurityException.

Code snippet:
               try
               {
                       result = System.getProperty(""wicket."" + Application.CONFIGURATION);
               }
               catch (SecurityException e)
               {
                       // Ignore - we're not allowed to read system properties.
               }

This apparently causes a performance problem at one of our customers, where they had shared classloading enabled. 

Permissions were set differently on shared classloader level, which caused the retrieval of the property to fail silently, while taking about 10ms longer. This code is called everytime Component.getMarkupId is called, which means with 300+ components on a page, you get a delay of 3 seconds or more.

Ofcourse the problem can be (and has been) solved with a correct configuration. My request however is that the exception is atleast logged at some level (warning for example), so spotting the problem will become a lot easier (it took us 2 weeks to narrow it down).",WebSphere 6.1 with shared classloading enabled. Linux system.,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-29 09:41:19.19,,,no_permission,,,,,,,,,,,,370575,,,Wed Jan 29 10:21:32 UTC 2014,,,,,,0|i1rvav:,370885,,,,,,,,"29/Jan/14 09:41;svenmeier;But the configurationType is set to DEVELOPMENT if it cannot be determined otherwise, so how can this code be called 'everytime Component.getMarkupId is called'?","29/Jan/14 09:43;mgrigorov;The configuration type is initialized just once.
See at https://github.com/apache/wicket/blob/wicket-1.5.x/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java?source=c#L702 - if it is null then it is set to DEVELOPMENT.

This would explain some slowessness.
But I don't think WebApplication#getConfigurationType() would fail again and again with SecurityException.

Can you please re-check that again ?
Logging a warning once at app start is OK-ish. But logging warnings again and again when SecurityManager forbids System#getProperty() would be problematic.","29/Jan/14 10:10;a.zwaan;[~svenmeier] [~martin-g] 

We have the servlet configuration in the web.xml set to DEPLOYMENT.

		<init-param>
			<param-name>configuration</param-name>
			<param-value>DEPLOYMENT</param-value>
		</init-param>

The logging at our customer shows this call being the problem:

[1/28/14 10:14:56:361 CET] 0000007f SecurityManag 3   
Java SecurityException:
perm.getName<>: wicket.configuration
e.getMessage<>: Access denied (java.util.PropertyPermission wicket.configuration read)
Begin SecurityException
java.security.AccessControlException: Access denied (java.util.PropertyPermission wicket.configuration read)
      at java.security.AccessController.throwACE(AccessController.java:99)
      at java.security.AccessController.checkPermission(AccessController.java:173)
      at java.lang.SecurityManager.checkPermission(SecurityManager.java:558)
      at com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:214)
      at java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1311)
      at java.lang.System.getProperty(System.java:397)
      at java.lang.System.getProperty(System.java:381)
      at org.apache.wicket.protocol.http.WebApplication.getConfigurationType(WebApplication.java:582)
      at org.apache.wicket.Component.getMarkupId(Component.java:1609)
      at org.apache.wicket.Component.getMarkupId(Component.java:1645)

Looking at the code in the component class, this line is calling the getConfigurationType:

		if (!Application.get().getConfigurationType().equals(Application.DEPLOYMENT))

which is in the getMarkupId method, as seen in the stacktrace.

Checking the link it seems that 1.5.x indeed only initializes it once, the 1.4.x version however does not yet have this check.

So in 1.5.x it still ignores the exception, but only in 1.4.18 it causes the problems we have. I'll updated affected versions.

Unfortunately we are still stuck on WebSphere 6.1 and therefore Wicket 1.4.18 for a little while, we are working on moving to Websphere 7 or above, but it is a slow process.
","29/Jan/14 10:15;mgrigorov;Right, now I remember that we had the same problem in early 1.5.0-SNAPSHOT days and I made the improvement to initialize the config type just once at app start.
I think it is OK to log a warning when the system property cannot be read.
But we will do this only for 1.5.x, 6.x and 7.x branches.
1.4.x branch receives only security related fixes and I don't want to port the improvement.","29/Jan/14 10:21;a.zwaan;Understood, I already kind of expected 1.4.x would no longer get these kind of changes. 

Thanks for the feedback and responses, hopefully we will be able to switch to 1.5.x or higher in the near future.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken links in wicket guide,WICKET-5485,12690772,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,froque,froque,23/Jan/14 14:26,28/Jan/14 16:21,13/Mar/19 23:18,27/Jan/14 16:22,,,,,,,,,,,,,guide,,,0,documentation,easyfix,,,,,,"There are some broken links in the Wicket Guide: 

http://wicket.apache.org/guide/ref/Httpsissuesapacheorgjirabrowse%20WICKET/JIRA.html
http://en.wikipedia.org/wiki/Dynamic_HTM
 http://wicket.apache.org/guide/ref/Httpssvnapacheorgreposasfwicketcommonsitetrunksite/site.html
https://github.com/wicketstuff/core.

See this link checker: http://validator.w3.org/checklink?uri=http%3A%2F%2Fwicket.apache.org%2Fguide%2Fguide%2Fsingle.html&hide_type=all&depth=&check=Check",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-27 16:22:27.93,,,no_permission,,,,,,,,,,,,369510,,,Tue Jan 28 16:21:55 UTC 2014,,,,,,0|i1rorr:,369815,,,,,,,,"27/Jan/14 16:22;mgrigorov;I have fixed them.
After the update of the site the link checker still see these errors :-/ 
I guess it still sees old caches.",28/Jan/14 16:21;bitstorm;Now the checker sees no error. Thank you!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"AuthenticatedWebApplication#onUnauthorizedPage() should work with Component, not Page",WICKET-5490,12691598,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,28/Jan/14 10:26,28/Jan/14 10:26,13/Mar/19 23:18,28/Jan/14 10:26,6.13.0,7.0.0-M1,,,,,,,7.0.0-M1,,,,wicket,,,0,,,,,,,,"As discussed at http://markmail.org/message/o2ayjxt7vb7dyjvf org.apache.wicket.authroles.authentication.AuthenticatedWebApplication#onUnauthorizedPage() should have a parameter with type 'Component', not 'Page' because this Page is partially constructed - on the constructor of org.apache.wicket.Component is executed.
All other super constructors (e.g. MarkupContainer, Page, WebPage, YourPage) are not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,370343,,,2014-01-28 10:26:05.0,,,,,,0|i1rttz:,370644,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket rebinds the SessionEntry session attribute and this causes problems in Glassfish,WICKET-5380,12671341,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,30/Sep/13 10:38,28/Jan/14 09:56,13/Mar/19 23:18,30/Sep/13 10:42,6.10.0,6.11.0,,,,,,,6.12.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"With WICKET-5164 Wicket made org.apache.wicket.page.PageStoreManager.SessionEntry a javax.servlet.http.HttpSessionBindingListener to be notified when this session attribute is removed to be able to clean the disk data store when the session is replaced.

This causes problems on Glassfish server (ver. 3 and 4) because GF notifies the HttpSessionBindingListener no matter whether the new value is different from the old one.
Jetty and Tomcat check the new against the old value by identity and there is no problem.

See this mail discussion for more details:
http://markmail.org/thread/uigzwllvib2iohvu",,,,,,,,,,,,,,,,,,,,,WICKET-5473,WICKET-5390,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-30 18:03:41.014,,,no_permission,,,,,,,,,,,,351047,,,Fri Jan 17 09:38:43 UTC 2014,,,,,,0|i1oizr:,351339,,,,,,,,30/Sep/13 10:42;mgrigorov;From now on SessionEntry is set as an attribute in the http session only after creating it. It won't be re-set on every request as until now.,30/Sep/13 18:03;paulbors;Proposed fix was also tested on GlassFish 3.1.2.2 which works just as well as GF 4.x,30/Sep/13 18:07;paulbors;Also affects version 6.10.0 as this was caused by WICKET-5164.,"17/Jan/14 09:38;laeubi;As mentioned in WICKET-5473 this is a bad idea since it prevents the underlying session completelty from detecting changes in the set object.
So if session is persited and afterwards restored (e.g. server restart), an old state might be presented to the application.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ajax form-component-label repainting fails when setResponsePage() is used to navigate away from the page that has previously failed form validaiton,WICKET-5462,12687489,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,ivaynberg,ivaynberg,ivaynberg,06/Jan/14 18:22,27/Jan/14 09:13,13/Mar/19 23:18,06/Jan/14 18:27,,,,,,,,,6.14.0,7.0.0-M1,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-27 09:13:42.431,,,no_permission,,,,,,,,,,,,366491,,,Mon Jan 27 09:13:42 UTC 2014,,,,,,0|i1r68v:,366802,,,,,,,,"27/Jan/14 09:13;mgrigorov;Before 6.14.0 is released an application with this problem can try to workaround it by using ""throw new RestartResponseException()"" instead of ""setResponsePage()"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CSS class is not applied to <TD> for data filter,WICKET-5477,12689684,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,phantom,phantom,18/Jan/14 23:52,20/Jan/14 16:46,13/Mar/19 23:18,20/Jan/14 16:46,6.12.0,,,,,,,,6.14.0,7.0.0-M1,,,wicket,,,0,table,,,,,,,"There is a possibility to specify CSS class for the column. But class is applied only for header and data cells and not for cell which contains filter.

Btw, it will be very good if instead of

@Override
	public String getCssClass()
	{
		return null;
	}

there were some GET/SET methods. Sometimes it's inconvient to override Column class just to specify CSS class for that column.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-19 11:54:02.305,,,no_permission,,,,,,,,,,,,368651,,,Mon Jan 20 16:46:46 UTC 2014,,,,,,0|i1rjh3:,368955,,,,,,,,"19/Jan/14 11:54;mgrigorov;It is not very clear for which class(es) you talk about.
Patch/quickstart is welcome.",20/Jan/14 16:46;svenmeier;FilterToolbar uses the column's style now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"UrlRenderer#renderRelativeUrl potentially appends ""/"" after query parameters",WICKET-5468,12688227,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mfrankerl,mfrankerl,10/Jan/14 12:03,15/Jan/14 10:02,13/Mar/19 23:18,15/Jan/14 10:02,6.12.0,,,,,,,,6.14.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"The current implementation of the UrlRenderer appends a slash at the end of the full rendered URL. This causes invalid URLs if there is query parameter value which let the full URL matching the condition in line 294.

Example of calling ""renderRelativeUrl""
before: ./path/?param=value..
after: ./path/?param=value../

I think the condition and conversion of the URL should affect only the path, like this:
before: ./path/..?param=value..
after: ./path/../?param=value..


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-15 10:02:43.81,,,no_permission,,,,,,,,,,,,367246,,,Wed Jan 15 10:02:43 UTC 2014,,,,,,0|i1rawf:,367555,,,,,,,,"15/Jan/14 10:02;mgrigorov;Fixed.
Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PackageResource#internalGetResourceStream() should return ProcessingResourceStream only when the resource is existing,WICKET-5472,12688859,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,14/Jan/14 21:21,14/Jan/14 21:22,13/Mar/19 23:18,14/Jan/14 21:22,6.13.0,,,,,,,,6.14.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"The fix for WICKET-4762 introduced ProcessingResourceStream - a resource stream that wraps another IResourceStream and processes its InputStream (e.g. compresses it).

There is a bug that even when the resource is not found, i.e. the resource stream is null, Wicket still wraps it in ProcessingResourceStream.

Another inefficiency is that ResourceStreamWrapper (the parent of ProcessingResourceStream) declares its method #getDelegate() as protected. It should be public.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,367826,,,2014-01-14 21:21:30.0,,,,,,0|i1refr:,368133,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ListenerInterfaceRequestHandler#respond throws ComponentNotFoundException as a side-effect,WICKET-5466,12687922,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,laeubi,laeubi,08/Jan/14 19:25,14/Jan/14 16:01,13/Mar/19 23:18,14/Jan/14 16:01,6.12.0,,,,,,,,6.14.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"The following exception occurs instead of a generic WicketRuntimeException:

16:27:56.181 WARN  (RequestCycle.java:343) Handling the following exception [qtp9826071-207]
org.apache.wicket.core.request.handler.ComponentNotFoundException: Could not find component 'xyz' on page 'class MyPage’
       at org.apache.wicket.core.request.handler.PageAndComponentProvider.getComponent(PageAndComponentProvider.java:182) ~[org.apache.wicket.core_6.12.0.jar:6.12.0]
       at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.getComponent(ListenerInterfaceRequestHandler.java:90) ~[org.apache.wicket.core_6.12.0.jar:6.12.0]
       at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:231) ~[org.apache.wicket.core_6.12.0.jar:6.12.0]
       at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:861) ~[org.apache.wicket.core_6.12.0.jar:6.12.0]
       at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) ~[org.apache.wicket.request_6.12.0.jar:6.12.0]
       at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261) [org.apache.wicket.core_6.12.0.jar:6.12.0]
       at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218) [org.apache.wicket.core_6.12.0.jar:6.12.0]
       at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289) [org.apache.wicket.core_6.12.0.jar:6.12.0]
       at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:259) [org.apache.wicket.core_6.12.0.jar:6.12.0]

in fact, this is a side effect, if you look at the code:

       @Override
       public void respond(final IRequestCycle requestCycle)
       {
             final IRequestablePage page = getPage();
             final boolean freshPage = pageComponentProvider.isPageInstanceFresh();
             final boolean isAjax = ((WebRequest)requestCycle.getRequest()).isAjax();
             IRequestableComponent component = null;
             try
             {
                    component = getComponent();
             }
             catch (ComponentNotFoundException e)
             {
                    // either the page is stateless and the component we are looking for is not added in the
                    // constructor
                    // or the page is stateful+stale and a new instances was created by pageprovider
                    // we denote this by setting component to null
                    component = null;
             }
             if ((component == null && freshPage) ||

                    (component != null && getComponent().getPage() == page))

             {
             [....]
             }

             else

             {

                    throw new WicketRuntimeException(""Component "" + getComponent() +

                          "" has been removed from page."");

             }

       }

You see that getComponent() is called twice.

1) Once guarded by a catch 
 - and -
2) once unguarded

So if the component can't be found AND freshPage is false, as a sideeffect instead of the WicketRuntimeException with the removed message a componentnotfound exception is raised as a side effect.

I see two possible solutions for this

a) either it is intentional that a ComponentNotFoundException is thrown, then it should be thrown from the catch block like

             catch (ComponentNotFoundException e)
             {
                    if (!freshPage) {
                       throw e;
                    }
             }

b) if it is unintentionall in the else case ther should be a simple check like this

 if (component == null) {
                        throw new WicketRuntimeException(""Component for path "" + getPath() +
                          "" and page ""+page.getClass().getName()+"" has been removed from page."");
                    } else {
                       throw new WicketRuntimeException(""Component "" + component +
                          "" has been removed from page."");
                    }


Beside this: it would be a good idea to mention at least the page class in either case.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-14 16:01:38.263,,,no_permission,,,,,,,,,,,,366929,,,Tue Jan 14 16:01:38 UTC 2014,,,,,,0|i1r8yf:,367240,,,,,,,,09/Jan/14 11:53;laeubi;Maybe variant b is more usefull since there might be other pathes where it passes by with no component avaiable.,14/Jan/14 16:01;svenmeier;The component path is now used to report the missing component.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AbstractAjaxTimerBehavior does not work in combination with Wizards,WICKET-5464,12687673,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,marcus@thiesen.org,marcus@thiesen.org,07/Jan/14 16:20,08/Jan/14 20:18,13/Mar/19 23:18,08/Jan/14 20:18,6.12.0,,,,,,,,6.14.0,,,,wicket,,,0,,,,,,,,"AbstractAjaxTimerBehavior calls stop() in it's onRemove() method. When used in a Wizard onRemove is triggered by onActiveStepChanged. This disabled, but never re-enables the behavior if the component tree is reused during wizard stepping. 

In my opinion it is more correct to disable the frontend timer but keep the internal state of the Bahavior as is (or resetting headRendered to false as the Behavior is in the pre render state after the onRemove) in order to re-enable the Timer when the step using the Behavior is rendered again.

",,,,,,,,,,,,,,,,,WICKET-5439,,,,,,,,08/Jan/14 08:54;marcus@thiesen.org;ajaxwizard-quickstart.tar.bz2;https://issues.apache.org/jira/secure/attachment/12621948/ajaxwizard-quickstart.tar.bz2,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-07 18:13:59.53,,,no_permission,,,,,,,,,,,,366673,,,Wed Jan 08 20:18:20 UTC 2014,,,,,,0|i1r7db:,366984,,,,,,,,"07/Jan/14 18:13;svenmeier;I agree with the reporter.

With my recent changes on master it should be easier to remove the timer in the browser without actually stopping the AbstractAjaxTimerBehavior.

[~mgrigorov] WDYT?","07/Jan/14 19:54;mgrigorov;[~svenmeier] +1

As a workaround in 6.x the application can override onRemove() and do nothing.","08/Jan/14 07:17;marcus@thiesen.org;I don't think that overwriting onRemove with nothing is enough for two reasons: 

- onRemove does the deactivation of the timer on the client side, without that the timer would still fire regularly
- headRendered would still be true even if the enabling JavaScript has never been written to the current state in the client","08/Jan/14 07:29;mgrigorov;> onRemove does the deactivation of the timer on the client side, without that the timer would still fire regularly
wicket-ajax.js has additional logic to stop timers which components are no more in the DOM

Can you please provide quickstart application so we can test the improvements ?
Thanks!","08/Jan/14 08:45;svenmeier;I've just seen that I improved this on master already: onRemote() the timer will not be stopped, but the timeout is just cleared.","08/Jan/14 08:54;marcus@thiesen.org;This Quickstart demonstrates the issue and has an alternate implementation that does show how it can be avoided.

Does ""master"" mean it will be in 6.13 ?","08/Jan/14 09:14;svenmeier;""master"" is 7.x","08/Jan/14 09:19;svenmeier;If others agree, I can backport the improvements to 6.x. It introduces a minor functional change only: #restart() and #stop() no longer updates the hosting component automatically.","08/Jan/14 09:44;mgrigorov;I'm -0.
The fact that #restart() and #stop() no longer update the component is a good improvement!
If the application depends on this then it can add the component in #onTimer() explicitly.
But still this is a functional change that may introduce regression in some apps and users don't expect such changes in minor updates.","08/Jan/14 09:55;marcus@thiesen.org;From my point of view as a user: I didn't expect this behavior and needed some time to figure out what actually happens. I can't actually think up a case where you expect the behavior to be disabled due to adding/removal (especially when it is implicit due to other components like a Wizard). I use my own implementation of the behavior now in order to avoid the bug, so I wouldn't be affected by this change in mainstream Wicket. When you actually need the behavior to be disabled at a certain point one should (and guess would) call #stop() explicitly. So I'm +1 here.

If you decide not to fix this in 6.x., you should at least update the documentation to explain when this Behavior will be stopped and how to re-enable it.","08/Jan/14 15:14;svenmeier;I could backport the changes to 6.x while making the Ajax update optional:

{code}
    // updates the component on restart - will be removed in 7.x
    protected void onRestart(ART target) {
      return target.add(getComponent());
    }
{code}

Minor correction to my previous comment: This change effect #restart() only, #stop() didn't trigger an Ajax update in 6.x",08/Jan/14 15:22;mgrigorov;This sounds good!,"08/Jan/14 20:18;svenmeier;onRemove() just clears the timer, without stopping the behavior",,,,,,,,,,,,,,,,,,,,,,,
onBeforeRender called too early on stateless page,WICKET-5460,12687305,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,martin geisse,martin geisse,04/Jan/14 10:10,06/Jan/14 20:17,13/Mar/19 23:18,06/Jan/14 20:17,6.12.0,7.0.0-M1,,,,,,,6.14.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"I'm having a problem with a ListView that displays an outdated list.
In my test, the ListView uses a Model that returns a static variable just to make sure the model is independent from any page instance. As far as I can tell, this problem has nothing to do with the model, but with the way Wicket prepares for a request listener invocation.

The exact setup is this:
- the page contains a ListView and (outside of the list) a Link that
adds an item to the list in its onClick(). The list itself is stored
in a static variable.
- the page is stateless
- the page's components are created in onInitialize()

Result:
The list doesn't show the most recently added item. Reloading the
original page shows the correct list. Note that by ""reloading"" I mean
entering the page's original URL since the browser's address bar now contains the request listener URL due to the page being stateless.

This is how I think is happens:
- Initially rendering the page works fine. The page is then discarded
since it's stateless.
- Clicking on the link creates a new page instance to invoke the
link's request listener.
- IPageAndComponentProvider.getComponent() cannot find the link yet
since it is not created until onInitialize() has been called.
- as a consequence, it calls page.internalInitialize() and
internalPrepareForRender(false)
- this creates the link, but it also creates the ListView and prepares
it for rendering. This in turn polls the ListView's model and creates
list items. It also marks the ListView as ""prepared for render"", which
is the crucial point.
- The link's request listener runs and adds an item to the list.
- After the request listener handler, the page render handler runs
- That handler renders the page, including the ListView
- ... but it doesn't call onBeforeRender() on the ListView anymore,
because it's already marked as ""prepared for render""! So it doesn't
pick up the new, up-to-date list from its model.

I'm not sure if I'm ""doing it wrong"", but then it doesn't seem quite
right that onBeforeRender() gets called before invoking the listener,
but not actually before rendering. There's probably some kind of logic
behind the decision to run onBeforeRender() only when this hasn't yet
happened, right? Is there a general way to ""unprepare"" the component
in onClick()?

---
Re: #internalPrepareForRender(false) should not mark the page as rendered (thus the false parameter).

The problem is, I think, not that the component is being marked as
*rendered*, but as *prepared for render*. From class Component:

protected void onBeforeRender()
{
  setFlag(FLAG_PREPARED_FOR_RENDER, true);
  onBeforeRenderChildren();
  setRequestFlag(RFLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED, true);
}

Note the first line. This causes subsequent invocations of
internalBeforeRender() to skip the relevant part.",,,,,,,,,,,,,,,,,,,,,,,,,04/Jan/14 10:12;martin geisse;beforerender-bug.zip;https://issues.apache.org/jira/secure/attachment/12621460/beforerender-bug.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-06 12:40:31.755,,,no_permission,,,,,,,,,,,,366303,,,Mon Jan 06 20:17:15 UTC 2014,,,,,,0|i1r53b:,366614,,,,,,,,04/Jan/14 10:12;martin geisse;attached quickstart that shows the problem,"06/Jan/14 12:40;svenmeier;This can be easily fixed by always resetting the flag:

diff --git a/wicket-core/src/main/java/org/apache/wicket/Component.java b/wicket-core/src/main/java/org/apache/wicket/Component.java
index fa0fe96..4f08edf 100644
--- a/wicket-core/src/main/java/org/apache/wicket/Component.java
+++ b/wicket-core/src/main/java/org/apache/wicket/Component.java
@@ -4175,9 +4175,10 @@
 	 */
 	void internalMarkRendering(boolean setRenderingFlag)
 	{
+		setFlag(FLAG_PREPARED_FOR_RENDER, false);
+
 		if (setRenderingFlag)
 		{
-			setFlag(FLAG_PREPARED_FOR_RENDER, false);
 			setFlag(FLAG_RENDERING, true);
 		}
 		else

Tests seems to be unaffected by this change, but I still want to look for caveats.",06/Jan/14 14:51;svenmeier;I pushed a fix in the master branch.,06/Jan/14 20:17;svenmeier;FLAG_PREPARED_FOR_RENDER is now reset,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when logging out with wicket-atmosphere,WICKET-5402,12676684,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,0xabadea,0xabadea,30/Oct/13 17:39,19/Dec/13 14:39,13/Mar/19 23:18,19/Dec/13 14:39,6.8.0,,,,,,,,6.13.0,7.0.0-M1,,,wicket-atmosphere,,,0,,,,,,,,"We get the attached NPE when a user logs out.

Apparently what happens is that there are multiple concurrent requests to one session: one ""regular"" request and a logout request. The logout request calls Session.get().invalidate(), so the session is invalidated at the end of the request. If this happens when ""regular"" request is already past the authentication check, it will retrieve the session with a now-invalid cookie, resulting in the creation of a new Session object with a null id. This is then put in a PageKey object for an EventBus subscription. When another, unrelated user logs out, EventBus iterates all PageKey-s and chokes on the one that has a null sessionId.
",,,,,,,,,,,,,,,,,,,,,,,,,30/Oct/13 17:40;0xabadea;stack-trace.txt;https://issues.apache.org/jira/secure/attachment/12611125/stack-trace.txt,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,356116,,,Wed Oct 30 17:40:12 UTC 2013,,,,,,0|i1pe5b:,356404,,,,,,,,30/Oct/13 17:40;0xabadea;Attaching NPE stack trace.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Double escaping when using EnumChoiceRenderer and DropDownChoice,WICKET-5450,12685252,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,gsmet,gsmet,17/Dec/13 21:07,18/Dec/13 09:24,13/Mar/19 23:18,18/Dec/13 09:14,6.12.0,,,,,,,,6.13.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"From my post on the dev@ list:

Currently, EnumChoiceRenderer escapes the value via the postprocess method.

It seems to be redundant with the fact that DropDownChoice already
escapes the value by default (in AbstractChoice).

Typically, in a default setup, if you use EnumChoiceRenderer and
DropDownChoice together, your value is escaped twice which leads to a
double escaped value.

Should I open a JIRA so that we remove the escaping of EnumChoiceRenderer?

References:
https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/markup/html/form/EnumChoiceRenderer.java#L111
https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/markup/html/form/AbstractChoice.java#L402",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-18 09:14:26.673,,,no_permission,,,,,,,,,,,,364329,,,Wed Dec 18 09:24:18 UTC 2013,,,,,,0|i1qsr3:,364629,,,,,,,,"18/Dec/13 09:14;mgrigorov;Removed the escaping.
The #postprocess() method is preserved, so the application can override it and revert to the old behavior.",18/Dec/13 09:24;gsmet;Thanks Martin!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorporate Wicket Guide into website,WICKET-5321,12664246,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,dashorst,dashorst,18/Aug/13 14:10,18/Dec/13 09:16,13/Mar/19 23:18,18/Dec/13 09:16,,,,,,,,,6.13.0,,,,site,,,0,,,,,,,,Andrea del Bene has donated the Wicket Guide to the Apache Software Foundation. This issue will track the progress into incorporating the document into our website.,,,,,,,,,,,,,,,,,,,,,,,,,18/Aug/13 14:12;dashorst;Wicket free guide.odt;https://issues.apache.org/jira/secure/attachment/12598663/Wicket+free+guide.odt,20/Aug/13 17:23;bitstorm;Wicket free guide_asf.odt;https://issues.apache.org/jira/secure/attachment/12598986/Wicket+free+guide_asf.odt,30/Sep/13 15:00;bitstorm;grails-generator.zip;https://issues.apache.org/jira/secure/attachment/12605908/grails-generator.zip,,3.0,,,,,,,,,,,,,,,,,,,2013-08-20 17:25:39.314,,,no_permission,,,,,,,,,,,,344247,,,Wed Dec 18 09:16:50 UTC 2013,,,,,,0|i1nd67:,344547,,,,,,,,"18/Aug/13 14:12;dashorst;This file was sent to me by Andrea on July 8, 2013.",20/Aug/13 17:25;bitstorm;File updated with the Apache License 2.0. I didn't inserted the full license but just the header. Let me know if the full license is required.,"30/Sep/13 07:57;mgrigorov;What is needed to move this task to completion ?

I suggest to attach a zip with the new sources (the one that generates the HTML). Then we can put the generated HTMLs at https://svn.apache.org/repos/asf/wicket/common/site/trunk. Since the generator is not based on Jekyll we can commit the raw (non-HTML) files somewhere else (either Git or SVN) and just copy the generated HTML files in wicket/common/site/trunk/_site/guide/ folder. This way the guide will be available at http://wicket.apache.org/guide. 
It is not the simplest setup but we can automate the process with a Shell script or something.

[~bitstorm]: Please attach the new sources as an archive and I'll do the rest.","30/Sep/13 14:34;paulbors;There are couple of proof reads pending on the Wicket Guide's [issues list|http://code.google.com/p/wicket-guide/issues/list] on Google Code.

Mainly [Issue 18|http://code.google.com/p/wicket-guide/issues/detail?id=18] and few other small typos.

Once this is incorporated, should [~bitstorm] take down the Google Code site so people won't get confused?
Or is that guide different from the one on this ticket?","30/Sep/13 14:41;mgrigorov;It is the same guide. Just the text format is different/better.
At GoogleCode you can download PDF that is exported from OpenOffice document.
The new format is something based on http://grails.org/doc/2.3.x/ref/Command%20Line/doc.html (AFAIK). So it should be much easier to apply patches/Pull Requests from the community.
And yes, I agree that the Google Code project should be deprecated (big red text explaining that the project has moved).","30/Sep/13 14:46;bitstorm;Martin has anticipated what I wanted to write. As soon as the guide will be available on apache server, I will make clear on GoogleCode that the project is moved away. In the meantime I won't publish any update on the original site to avoid any confusion.
I'm preparing to load the code, I will notify you when I'm done.",30/Sep/13 15:02;bitstorm;I've attached the source. To generate the documentation extract the content and run 'grails doc' on the content root. ,"30/Sep/13 15:14;mgrigorov;Downloaded Grails 2.3.0.
Unzipped it in ~/devel/grails-2.3.0.
$ export PATH=$PATH:~/devel/grails-2.3.0/bin
/tmp/grails-generator $ grails doc
Configuring classpath
| Error Resolve error obtaining dependencies: Failed to resolve dependencies (Set log level to 'warn' in BuildConfig.groovy for more information):

- org.grails.plugins:tomcat:2.3.0

 (Use --stacktrace to see the full trace)
| Error Resolve error obtaining dependencies: Failed to resolve dependencies (Set log level to 'warn' in BuildConfig.groovy for more information):

- org.grails.plugins:hibernate:2.3.0

 (Use --stacktrace to see the full trace)
| Error Resolve error obtaining dependencies: Failed to resolve dependencies (Set log level to 'warn' in BuildConfig.groovy for more information):

- org.grails.plugins:hibernate:2.3.0

 (Use --stacktrace to see the full trace)
| Error Failed to resolve dependencies (Set log level to 'warn' in BuildConfig.groovy for more information):

- org.grails.plugins:tomcat:2.3.0

| Run 'grails dependency-report' for further information.


What I did wrong ?","30/Sep/13 15:22;mgrigorov;I've created a new Grails app:
$ grails create-app helloworld
$ grailsw doc (Note the 'w' at the end!)
this downloaded again grails-2.3.0 (120Mb) and again failed with the error above :-) Let ask Google","30/Sep/13 15:27;paulbors;Hey [~bitstorm],

Will the new version of the guide in the new format incorporate the fixes from the old project's home page?","30/Sep/13 15:31;mgrigorov;http://www.jworks.nl/2013/09/11/upgrading-grails-2-2-4-to-2-3-0/ solved the issue with Tomcat. But Hibernate dependency still fails.
I'll download 2.2.0","30/Sep/13 15:43;mgrigorov;http://wicket.apache.org/guide/
Almost works. Some CSS files are missing.","30/Sep/13 15:52;bitstorm;[~paulbors] yes of course. Unfortunately lately my spare time has greatly decreased and I didn't manage to incorporate your second part of the proof reading.
[~mgrigorov] I'm also using grails 2.2.0 under Ubuntu and I've install it using the instructions you find on the site: http://grails.org/download/ubuntu. Unfortunately I've found another problem :) when I try to generate the pdf, but to solve it I think we must change the document source. Here is the error:

$ grails doc --pdf
| Built user manual at /home/andrea/git/wicket-userguide/grails-generator/../index.html
[Fatal Error] :758:74: The element type ""wicket:extend"" must be terminated by the matching end-tag ""</wicket:extend>"".
| Error Error executing script Doc: org.xml.sax.SAXParseException; lineNumber: 758; columnNumber: 74; The element type ""wicket:extend"" must be terminated by the matching end-tag ""</wicket:extend>"". (Use --stacktrace to see the full trace)
","30/Sep/13 16:18;mgrigorov;Voila!
It is there.",30/Sep/13 16:30;paulbors;Can we have a tutorial on http://wicket.apache.org/guide/ about how to send push requests to that guide?,01/Oct/13 08:14;mgrigorov;How to contribute - http://wicket.apache.org/guide/guide/chapter26.html,"01/Oct/13 08:17;mgrigorov;There is a problem with this setup though.
The shell scripts that run Jekyll (regenerate.sh and liveedit.sh) delete all files from _site folder, including the guide. They do this to be able to preserve .svn folders.

Option 1) use Git for PubSub (.git/ is only in the root folder)
Option 2) Use newer Subversion (.svn/ is only in the root folder)
Option 3) ???","01/Oct/13 09:53;dashorst;I suggest using a newer svn. I have done so for the last 8 releases or so, and it works like a charm. With SVN > 1.8 there is just one .svn folder in the root, rendering the preservation step moot, and making it a lot faster as well.

option 3: make regenerate ""know about our guide"", such that it will regenerate the guide as well. This will ensure that deleted files are actually removed (as long as wel ""svn rm"" them...)","01/Oct/13 13:30;paulbors;Quick question about versioning this guide.
What would happen when Wicket 7.x is released and there will be some API changes rendering the text in the guide off.

Should then the guide's major version match that of Wicket's major version?
ie: Instead of starting at v1 start at v6 since it's documenting Wicket 6.x?

Then when Wicket 7.x will be release the guide can be branched and updated under v7 thus users will know which version of the guide to refer to for the Wicket version they use.","01/Oct/13 13:36;paulbors;Also, can we have a ""wicket-guide"" component in Jira?",01/Oct/13 14:43;dashorst;I've added a guide component to JIRA... Andrea is the component lead.,"01/Oct/13 14:54;dashorst;Re: versioning

I think it is better to inline the differences in the reference guide for different versions rather than branch it out. Most text is reusable and only some examples will become different. This way the reference guide can also function as a migration guide.

On the other hand, a migration guide would be easier as one chapter.

Basically I'd rather have us focus on one guide and make it high quality than on 3 versions of the guide and do a mediocre job of maintaining it.","01/Oct/13 15:33;paulbors;Then having the guide against the latest version is fine as long as for each migration there is a chapter (or at least migrating from the last major version).

My first migration was from a Wicket 1.3.x to 1.5.x and I had to read all migration wiki pages that I aggregated into a single doc and spread it out into different tasks that my team and I had to go through to migrate over the entire project. Wasn't a pleasant mini-project but we did it!

I'm not sure if the migration doc really belongs in this guide because of 2 reasons I can think of:
# That chapter on migrating will keep growing over time
   What would happen with older migration guides?
# It would be harder for the community to add new sections to the migration as they run into them
   A wiki is easier to edit and contribute to that this guide that requires code to be checked out, create patches, push requests and etc.","01/Oct/13 16:36;bitstorm;Thank you for your work to put the guide online!

About versioning: I think that it would be better to create branches/tags for different version as I also don't think that a migration guide should be part of the user guide. 
About setup: it would be grate if we could implement the third option proposed by Martijn.
","21/Oct/13 09:49;bitstorm;I did some work to allow the guide to be exported as pdf (the command is 'grails doc --pdf'). Most of the effort has been spent to resize pictures and code snippet to fit in the pdf format. I've kept the original pictures in a new folder locate in src/docs/imgOrigin.
The next step will be to remove comSysto copyright and upper-left logo, replacing them with Apache Foundation name and logo. I'd like also to keep a reference to comSysto in the introduction, inserting something like 'first release by comSysto' after the original introduction. ","21/Oct/13 20:28;bitstorm;I've updated the documents and regenerated the html to display the Apache logo and copyright. Now it's ""officially"" part of Wicket.  ","07/Nov/13 14:34;dashorst;Would a 7.x branch work?

i.e.

http://wicket.apache.org/guide/7.x
http://wicket.apache.org/guide/6.x

?","07/Nov/13 14:37;dashorst;We should probably look at the site structure and separate out the guide such that svnpubsub can deploy them separately, and make it a better experience to maintain the website separately from the guide and vice versa.","19/Nov/13 16:52;bitstorm;I'm a little bit out from technical details about the site, but what folder/structure do you suggest to use to store the guide?","18/Dec/13 09:16;mgrigorov;Closing the ticket because the guide is incorporated in the site.
When we start upgrade/update of the guide for things specific to Wicket 7 we will open a new ticket.",,,,,,
FilenameWithVersionResourceCachingStrategy breaks silently when the versionPrefix is contained in the original filename,WICKET-5263,12655973,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,03/Jul/13 06:58,16/Dec/13 13:30,13/Mar/19 23:18,03/Jul/13 07:14,6.9.0,,,,,,,,6.10.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"If a resource name contains the character used as version prefix then FilenameWithVersionResourceCachingStrategy#undecorateUrl() will split the decorated filename wrongly and the resource response will return 404 (Not found).

",,,,,,,,,,,,,,,,,WICKET-5446,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-12 12:48:45.855,,,no_permission,,,,,,,,,,,,336248,,,Thu Dec 12 13:42:39 UTC 2013,,,,,,0|i1m00f:,336572,,,,,,,,"12/Dec/13 12:48;sfussenegger;[~martin-g] I wouldn't consider adding a log message a good enough fix for this issue. I think it would be better to patch {{undecorateUrl(..)}} to check the validity of the version it tries to strip:

Current
{code:java}
// get position of version string
pos = fullname.lastIndexOf(versionPrefix);

// remove version string if it exists
if (pos != -1)
{
  // SNIP
}
{code}

Patched
{code:java}
// get position of version string
pos = fullname.lastIndexOf(versionPrefix);

// remove version string if it exists
if (pos != -1 && isVersion(fullname.substring(pos + versionPrefix.length()))
{
  // SNIP
}
{code}

The implementation of {{isVersion(..)}} isn't obvious as there naturally is one problem: The version depends on the resource and the resource isn't known without properly stripping the version from the URL. I'd therefore suggest to the method {{getVersionPattern()}} to {{IResourceVersion}}.

The implementations for all current implementations would be trivial:

{{LastModifiedResourceVersion}}: ""\[0-9\]\+"" = timestamp in ms
{{MessageDigestResourceVersion}}: ""\[0-9A-F\]\+"" = hex value (uppercase)
{{StaticResourceVersion}}: {{Pattern.quote(version)}}
{{CachingResourceVersion}} and {{RequestCycleCachedResourceVersion}}: {{delegate.getVersionPattern()}}

Making this pattern optional (i.e. return null) would retain the current behavior. Sure, it's still prone to errors (e.g. if version prefix is '-' and the resource is foo-1.png -> foo.png) but at least it avoids some (or probably most) errors (e.g. foo-bar1.png).",12/Dec/13 13:42;sfussenegger;I've submitted [pull request #66 on github|https://github.com/apache/wicket/pull/66] according to my comment above.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IResourceCachingStrategy implementations should only set caching if version matches,WICKET-5441,12684261,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,sfussenegger,sfussenegger,12/Dec/13 14:13,16/Dec/13 13:18,13/Mar/19 23:18,16/Dec/13 13:18,6.12.0,7.0.0-M1,,,,,,,6.13.0,7.0.0-M1,,,,,,0,,,,,,,,"Implementations of IResourceCachingStrategy (FilenameWithVersionResourceCachingStrategy and QueryStringWithVersionResourceCachingStrategy) should only set cache duration to maximum if the version matches. Currently, if a user requests a resource with an arbitrary version, the version will be cached for one year (WebResponse.MAX_CACHE_DURATION). So people could polute proxy caches with potentially upcoming version.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-16 13:18:05.337,,,no_permission,,,,,,,,,,,,363333,,,Mon Dec 16 13:18:05 UTC 2013,,,,,,0|i1qmnz:,363639,,,,,,,,12/Dec/13 14:47;sfussenegger;I've submitted [pull request #67 on github|https://github.com/apache/wicket/pull/67]. There remains a question though: What is the appropriate caching if versions don't match? The application default used for my patch still is WebResponse.MAX_CACHE_DURATION (though at least configurable and only privately cacheable),"16/Dec/13 13:18;mgrigorov;Thanks!

I've applied your patch with a minor change - if the calculated version is not null then make the check and set the caching headers.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"TimeOfDay.valueOf(Calendar, Time) and TimeOfDay.valueOf(Time) incorrectly use 12-hour clock",WICKET-5442,12684368,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,dgileadi,dgileadi,12/Dec/13 22:54,13/Dec/13 12:14,13/Mar/19 23:18,13/Dec/13 12:14,6.12.0,,,,,,,,6.13.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"TimeOfDay.valueOf(Calendar, Time) is implemented as:
    return militaryTime(time.getHour(calendar), time.getMinute(calendar), time.getSecond(calendar));

This is flawed because Time.getHour() is implemented as:
    return get(calendar, Calendar.HOUR);
and Calendar.HOUR is for the 12-hour clock. The result is that TimeOfDay.valueOf(Calendar, Time) incorrectly only returns 12-hour results, not 24-hour results. This affects TimeOfDay.valueOf(Time) as well since it is implemented in terms of the previously-named method.

One fix would be to change Time.getHour() to use Calendar.HOUR_OF_DAY. Since Time doesn't have an am/pm indicator this seems reasonable. An alternate, more localized fix would be to change TimeOfDay.valueOf(Calendar, Time) to call time.get(Calendar.HOUR_OF_DAY) to get the hour value.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-13 12:14:57.477,,,no_permission,,,,,,,,,,,,363440,,,Fri Dec 13 12:14:57 UTC 2013,,,,,,0|i1qnbj:,363746,,,,,,,,13/Dec/13 12:14;svenmeier;I've changed Time.getHour() as suggested. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Page.isPageStateless() returning true in regular run but false in WicketTester,WICKET-5424,12680977,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,jyrimatti,jyrimatti,25/Nov/13 07:22,26/Nov/13 20:23,13/Mar/19 23:18,26/Nov/13 18:08,6.12.0,6.8.0,,,,,,,6.13.0,,,,,,,0,,,,,,,,"Motivation:
Healthcheck/heartbeat pages must always be stateless to prevent significant amounts of session creation and storage.
Also each anonymously accessed page in a public site should be stateless due to the same reason (otherwise the site could easily be DoSsed down).
It would be nice to verify these requirements by tests.

If I create an ought-to-be-stateless page with an AjaxLink which is hidden by a behavior:

public class MyPage extends WebPage {
    public MyPage() {
        add(new AjaxLink<Void>(""link"") {
            @Override
            public void onClick(AjaxRequestTarget target) {
                //
            }
        }.add(new Behavior() {
            @Override
            public void onConfigure(Component c) {
                c.setVisible(false);
            }
        }));
        add(new Label(""isPageStateless"", new AbstractReadOnlyModel<Boolean>() {
            @Override
            public Boolean getObject() {
                return MyPage.this.isPageStateless();
            }
        }));
    }
}

then checking through a web server the page correctly prints ""true"", and no HttpSessions are created.

However, when I try to verify statelessness through WicketTester, the following test passes:

@Test
public void testName() throws Exception {
    WicketTester tester = new WicketTester(new WebApplication() {
        @Override
        public Class<? extends Page> getHomePage() {
            return MyPage.class;
        }
    });
    tester.startPage(MyPage.class);
    tester.assertLabel(""isPageStateless"", ""false"");
    assertFalse(tester.getLastRenderedPage().isPageStateless());
}

It seems that somehow due to WicketTester, isPageStateless() is being invoked before any behaviors are run (and thus the AjaxLink is still visible), and since stateless-flag for the page is cached, it remains false.

If it's by design that isPageStateless should always return the same result during each request, then I guess that the statelessness resolution process must not depend on anything happening after the page constructor? I assume it's not by design.

Suggestions:

A) Obvious fix would be to remove stateless-flag caching, since apparently it is causing problems, as also suggested by a hackish comment in Page.init(). In general, caching should always be used sparingly.

B) Or maybe whoever is invoking isPageStateless() at an early stage should actually be using Page.peekPageStateless()? But this doesn't really seem like a real fix, more like a temporary hack.

C) All caching could also be disabled during test runs, but this would not be a good thing since tests should reproduce the actual behavior as closely as possible.

D) In case this is a known issue without a proper fix, how then could I verify page statelessness through WicketTester? Currently I'm clearing the stateless-cache by reflection, which feels kind of bad...",,,,,,,,,,,,,,,,,,,,,,,,,25/Nov/13 21:49;svenmeier;WICKET-5424-tester.patch;https://issues.apache.org/jira/secure/attachment/12615678/WICKET-5424-tester.patch,25/Nov/13 11:25;jyrimatti;wicket-bug-test.zip;https://issues.apache.org/jira/secure/attachment/12615578/wicket-bug-test.zip,,,2.0,,,,,,,,,,,,,,,,,,,2013-11-25 07:39:15.162,,,no_permission,,,,,,,,,,,,360242,,,Tue Nov 26 20:23:09 UTC 2013,,,,,,0|i1q3n3:,360541,,,,,,,,"25/Nov/13 07:39;mgrigorov;Could you please attach a failing test case ?
Thank you! ","25/Nov/13 11:25;jyrimatti;Added test case.
Seems that this has something to do with RenderStrategy.ONE_PASS_RENDER","25/Nov/13 15:00;mgrigorov;The test case is not failing.
Let me see deeper.","25/Nov/13 15:16;jyrimatti;I organized the test so that the two tests pass meaning that the page is considered stateful. Should have made two failing tests, sorry, I'll learn :)

Anyway, the test now asserts that isPageStateless returns _false_, but if you start jetty and load the frontpage it displays _true_. So the behaviors in the test and actual run differ.","25/Nov/13 15:34;mgrigorov;The quickstart has no Start.java so I cannot run it normally (i.e. w/o WicketTester). I already deleted maven jetty plugin - it was using 6.1.22... I didn't want to download something that old. Sorry :-)
Next time use http://wicket.apache.org/start/quickstart.html.

But I think it should behave the same way - #isPageStateless() is called early in org.apache.wicket.request.handler.render.WebPageRenderer#respond().
Behavior#onConfigure() is called once the page rendering process starts. So it is late to hide the stateful component and make the page stateless again.

The problem is deeper.
org.apache.wicket.Page#stateless is transient but the page is deserialized only if it is loaded from the disk. Before loading from disk Wicket checks for the level 1 cache - the http session keeps the last used page. So if the page is loaded from http session the 'stateless' cache is still there and even if you remove/replace the solely stateful component with a stateless one the page will still be assumed as stateful due to the cached.
This can be improved by null-ifying the cache in #detach().

I am not sure that removing the cache will be a good thing. This may make the page processing considerably slower.
Maybe we can introduce protected non-final #getStatelessCache() that returns org.apache.wicket.Page#stateless. If page like yours needs to disable the cache then you can override this method and return null always.

[~svenmeier], [~ivaynberg] WDYT about this problem ?
",25/Nov/13 20:43;svenmeier;I'll take a look at it tomorrow.,"25/Nov/13 21:49;svenmeier;Actually there are two different problems:

1) BaseWicketTester uses a special PageRenderer that records the last rendered page. The current implementation pulls the page out of the pageProvider *before* actual rendering.
This results in the observed difference between test and non-test (only with ONE_PASS_RENDER though).

IMHO we should fix this with the attached patch and close this ticket.

2) Then reconsider the separate issue of changing statelessness in #onConfigure().","26/Nov/13 10:30;mgrigorov;Good catch!
The patch looks good to me.",26/Nov/13 11:53;svenmeier;BaseWicketTester now takes care not to interfere with the wrapped PageRenderer. With the configured render strategy ONE_PASS_RENDER the page is reported as stateless in the testcase and when rendered in the browser.,"26/Nov/13 14:15;mgrigorov;The issue is still existing in master branch - http://ci.apache.org/builders/wicket-master/builds/1522/steps/compile/logs/stdio.

I've used the attached quickstart as a test case.","26/Nov/13 18:08;svenmeier;The difference between test and in-browser run is present in 6.x only, this issue is now fixed with 6.13.0.

WICKET-5426 will track improvements on statelessness handling when stateful components are hidden in the render phase.","26/Nov/13 18:10;svenmeier;Thanks Martin, I'll use WicketTesterLazyIsPageStatelessBase and subclasses in WICKET-5426.","26/Nov/13 20:23;jyrimatti;Thanks a lot, you are quick =)

...but I'm a bit worried of two things:

1) Caching should be used with great caution, unless it's clear that the result will never change. If this approach is used widely in Wicket, it might be causing bugs which are really hard to catch. At least it's making Wicket more fragile. Are you sure removing the cache would cause a noticeable hit? It looks like the method is just invoking isVisible/EnabledInHierarchy for the whole component tree a couple of times. Since the implementation is ""going down"" with a visitor and on each component coming back up with the ""hierarchy"", it's doing the same stuff multiple times, so maybe the whole check could be performed in one method so that the visibility of each component is checked only once? Would it still be too slow?

2) I probably don't understand much about statelessness in Wicket, but doesn't it feel odd that statelessness can change during a request? How about turning the process ""upside down"": instead of checking for statelessness, make each component determine its statelessness just before rendering. Thus this flag wouldn't even be available before the render phase and it could not change once it's determined (there's no point in changing it during rendering or afterwards, right?).

I'm kind of waving my hands in the air here, so feel free to ignore my suggestions =)",,,,,,,,,,,,,,,,,,,,,,,
WicketTester doesn't preserve the request cookies when #executeListener() is used,WICKET-5425,12681032,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,25/Nov/13 13:34,25/Nov/13 13:43,13/Mar/19 23:18,25/Nov/13 13:43,6.12.0,,,,,,,,6.13.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"org.apache.wicket.util.tester.BaseWicketTester#executeListener(org.apache.wicket.Component, org.apache.wicket.RequestListenerInterface) creates a new new MockHttpServletRequest but doesn't do the cookie management as in org.apache.wicket.util.tester.BaseWicketTester#setupNextRequestCycle() (the only other place where a new MockHttpServletRequest is created).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,360297,,,Mon Nov 25 13:43:37 UTC 2013,,,,,,0|i1q3zb:,360596,,,,,,,,"25/Nov/13 13:43;mgrigorov;There was no need of creating a new MockHttpServletRequest.
It is enough to set the calculated url to the request scheduled to be used for the next request cycle.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
this.replaceWith is broken when called from onInitialize,WICKET-5417,12679111,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,rdearing,rdearing,13/Nov/13 21:25,25/Nov/13 12:33,13/Mar/19 23:18,25/Nov/13 12:33,6.12.0,,,,,,,,7.0.0-M1,,,,wicket,,,0,,,,,,,,"When calling this.replaceWith within the onInitialize method, wicket throws an exception:

""Last cause: org.apache.wicket.Component has not been properly initialized. Something in the hierarchy of com.mycompany.PanelA has not called super.onInitialize() in the override of onInitialize() method""
  

This happens because detach is called on the panel being replaced which clears Component.request flags (sets to 0) which causes the exception on line 864 of Component.java:
if (!getRequestFlag(RFLAG_INITIALIZE_SUPER_CALL_VERIFIED)) {
            // throws here
}",,,,,,,,,,,,,,,,,,,,,,,,,15/Nov/13 14:27;mgrigorov;WICKET-5417.patch;https://issues.apache.org/jira/secure/attachment/12614063/WICKET-5417.patch,13/Nov/13 21:25;rdearing;replacewithbug.tgz;https://issues.apache.org/jira/secure/attachment/12613694/replacewithbug.tgz,,,2.0,,,,,,,,,,,,,,,,,,,2013-11-15 14:27:08.409,,,no_permission,,,,,,,,,,,,358476,,,Mon Nov 25 12:33:34 UTC 2013,,,,,,0|i1pson:,358766,,,,,,,,13/Nov/13 21:25;rdearing;Quickstart to repro bug,"15/Nov/13 14:27;mgrigorov;Attaching a possible solution.

I'm not 100% certain we want to do this though.
If you know you want to replace the current component with another you can call super.onInitialize() after the replacement.

[~svenmeier], [~ivaynberg] What do you think ?
",15/Nov/13 15:51;ivaynberg;whats the usecase for component replacing itself during oninitialize()? it doesnt seem valid to me...,"15/Nov/13 17:18;svenmeier;The patch looks fine, but I don't think we have to cover every corner case.","18/Nov/13 09:41;mgrigorov;The same exception is thrown when replaceWith() is used in #onBeforeRender() *after* calling super.onBeforeRender().
At render time it is not allowed to change the hierarchy but the error message you get is: org.apache.wicket.Component has not been properly rendered. Something in the hierarchy of com.mycompany.PanelA has not called super.onBeforeRender() in the override of onBeforeRender() method.

So yes, the use cases are odd but the error message is not the best either.","18/Nov/13 17:12;rdearing;Calling super.onInitialize() after the replaceWith() call does prevent the error. This usecase only arose because I'm extending a panel that has overridden onInitialize() which in turn calls an abstract method implemented by subclasses. In that method there is some business logic that determines the current panel is not appropriate and calls replaceWith().

I was able to fix this by moving the logic into the constructor and calling replaceWith() there. It wasn't immediately clear what was causing the issue or that calling replaceWith() is not permitted within onInitialize(), so it would be nice to update the exception or the javadoc so it is more clear.","25/Nov/13 10:57;mgrigorov;I think my suggested patch should be applied.
It is allowed to use #replaceWith in #onBeforeRender() - the rendering is not yet started.

It is a strange use case but the fix is simple and will make #onInitialize() and #onBeforeRender() behave the same way as <init> (the constructor) and #onConfigure().",25/Nov/13 11:51;svenmeier;Can we apply the change to Wicket 7 only? I'm afraid of breaking someone's project with this.,25/Nov/13 12:02;mgrigorov;OK.,"25/Nov/13 12:33;mgrigorov;Correction: #replaceWith() cannot be called inside the constructor because at this time the parent is still unknown.

Since 7.0.0 it will be allowed to call #replaceWith inside #onInitialize and #onBeforeRender as well.",,,,,,,,,,,,,,,,,,,,,,,,,,
ComponentRenderer.renderComponent() adds a page to DataStore,WICKET-5422,12680468,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,MateuszM,MateuszM,21/Nov/13 09:21,24/Nov/13 11:50,13/Mar/19 23:18,24/Nov/13 11:50,6.12.0,,,,,,,,6.13.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"I'm using ComponenetRenderer withing CustomTooltipBehavior (wicket-jquery-ui) to generate tooltip content. I add this to about 50 rows in my table so I run renderComponent() method as many times.
All worked fine but there was a problem with performance when I used Fragment component with markup attached to the WebPage. I did some digging and finally checked http://localhost:8080/context/wicket/internal/debug/diskDataStore and it appeared that for one request, Wicket stores 51 pages in it. All of the size of the whole page (about 300kB) and all of them named org.apache.wicket.core.util.string.ComponentRenderer$RenderPage.

I changed implementation from Fragment to Panel componenet and the size was reduced to (1kB) but still all of these items were stored in the DataStore.

It seems that this method is creating a dummy page in order to create the markup, but how can I avoid storing these pages?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-24 11:50:24.069,,,no_permission,,,,,,,,,,,,359733,,,Sun Nov 24 11:50:24 UTC 2013,,,,,,0|i1q0if:,360032,,,,,,,,"21/Nov/13 09:23;MateuszM;Martin Grigorov's comment from users-list:
""The page should be marked as stateless to avoid storing it.""","24/Nov/13 11:50;mgrigorov;Please check latest wicket-6.x and/or master branches.
Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PropertyValidator ignoring groups with the @NotNull annotation only,WICKET-5418,12679125,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,ivaynberg,toxic53,toxic53,13/Nov/13 23:01,15/Nov/13 20:31,13/Mar/19 23:18,15/Nov/13 20:31,6.12.0,,,,,,,,6.13.0,7.0.0-M1,,,wicket-bean-validation,,,0,validation,,,,,,,"When using groups in your JSR303 compliant classes, Wicket does not honor the groups for the @NotNull annotation.  ","MacOSX, Glassfish",,,,,,,,,,,,,,,,,,,,,,,,15/Nov/13 16:31;toxic53;BeanValidation.zip;https://issues.apache.org/jira/secure/attachment/12614083/BeanValidation.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-11-15 14:44:04.791,,,no_permission,,,,,,,,,,,,358490,,,Fri Nov 15 16:31:53 UTC 2013,,,,,,0|i1psrr:,358780,,,,,,,,13/Nov/13 23:03;toxic53;An example with groups,"15/Nov/13 14:44;mgrigorov;I had the good willing to debug this problem but you work against yourself.
1) you removed Start.java from the quickstart so it is harder for me to debug it
2) your quickstart doesn't use any bean validation impl
Caused by: javax.validation.ValidationException: Unable to find a default provider
	at javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:264)
	at org.apache.wicket.bean.validation.DefaultValidatorProvider.get(DefaultValidatorProvider.java:29)
	at org.apache.wicket.bean.validation.DefaultValidatorProvider.get(DefaultValidatorProvider.java:19)

I can fix both of these but I see no reason why you tried to make it harder for us.

Please provide a proper quickstart with steps how to reproduce your problem.","15/Nov/13 16:31;toxic53;Quickstart to reproduce issue.  Sorry Martin, I dont know what happend but I uploaded the wrong quickstart.  I fixed and added a few clarifications in the homepage.html ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BOM in UTF markup file breaks encoding detection,WICKET-5416,12679096,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,Zebr911-v,Zebr911-v,13/Nov/13 20:11,15/Nov/13 14:11,13/Mar/19 23:18,15/Nov/13 14:11,1.5.10,6.12.0,,,,,,,1.5.11,6.13.0,7.0.0-M1,,wicket,,,0,,,,,,,,"I have project with internationalization and experienced this problem with one of the pages with non-english content. Page had UTF-8 encoding, but my JVM encoding is different. I always use ""<?xml encoding ... ?>"" to specify encoding for markup pages (and ""MarkupSettings.defaultMarkupEncoding"" is not set).

Unexpectedly I got problem with bad encoding on page. After several hours of debugging I found what source of this issue was UTF BOM (Byte order mark) at the beggining of file and inability of ""XmlReader"" to process it. ""XmlReader.getXmlDeclaration"" tries to match xml declaration with regular expression, but fails because of BOM. After that encoding defaults to JVM encoding.

It's possible to use ""org.apache.commons.io.input.BOMInputStream"" to handle BOM or you could handle it manually inside ""XmlReader"".

PS: issue found with Wicket 1.5.10 and I see same code in 6.12.0 without BOM handling, so I added it to ""Affects Version/s"", but no proof-in-code available from me at this moment.","Windows 7, jdk1.7.0_45",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-15 14:11:59.443,,,no_permission,,,,,,,,,,,,358461,,,Fri Nov 15 14:11:59 UTC 2013,,,,,,0|i1pslb:,358751,,,,,,,,15/Nov/13 14:11;mgrigorov;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Page#onInitialize called after an exception in the constructor of Page,WICKET-5387,12673109,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,wicket.x.ttp,wicket.x.ttp,09/Oct/13 21:02,15/Nov/13 11:03,13/Mar/19 23:18,15/Nov/13 10:34,6.11.0,,,,,,,,6.13.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"Page#onInitialize is called when the constructor of Page throws an exception, i.e. when the Page is not initialized correctly. This can cause additional exceptions which are usually added to an error log even in cases in which the exception in the constructor is handled (by Wicket). This issue is possibly related to WICKET-5083.

Another case of the problem occurs when setResponsePage(...) is used in the constructor to navigate away from a page that can't be initialized correctly.

I'm attaching a quickstart.",Linux,,,,,,,,,,,,,,,,WICKET-5415,,,,,,,,10/Oct/13 11:05;wicket.x.ttp;5387.1.tar.gz;https://issues.apache.org/jira/secure/attachment/12607780/5387.1.tar.gz,09/Oct/13 21:07;wicket.x.ttp;5387.tar.gz;https://issues.apache.org/jira/secure/attachment/12607653/5387.tar.gz,10/Oct/13 12:10;mgrigorov;WICKET-5387.patch;https://issues.apache.org/jira/secure/attachment/12607788/WICKET-5387.patch,,3.0,,,,,,,,,,,,,,,,,,,2013-10-10 07:14:58.731,,,no_permission,,,,,,,,,,,,352732,,,Fri Nov 15 11:03:49 UTC 2013,,,,,,0|i1otbz:,353019,,,,,,,,"10/Oct/13 07:14;mgrigorov;setResponsePage() just schedules another page to be executed, but it doesn't stop the execution flow.
To stop the flow you can use ""throw new RestartResponseException(...)"". This uses an exception and thus the execution stops where it is thrown.

I'll check your quickstart now.","10/Oct/13 07:26;mgrigorov;The quickstart is broken.
1) It has no home page
2) it has no Start.java

Please make sure the quickstart works so we can help you.","10/Oct/13 11:05;wicket.x.ttp;Thank you for your response.

I have added a Start.java and a homepage.

Please use the following URLs to test:

http://localhost:8080/page1
http://localhost:8080/page2
http://localhost:8080/page3
http://localhost:8080/page4
","10/Oct/13 11:49;mgrigorov;Thanks for fixing the quickstart!

I see what happens:
- the page is added to org.apache.wicket.page.RequestAdapter#touchedPages list in o.a.w.Page's constructor.
- the exception is thrown in Page1's constructor
- Wicket renders InternalErrorPage
- at the end of the request all touched pages are saved in the disk if they are stateful. To check whether a page is stateful Wicket initializes it if it is not initialized already

It is a bug for sure. I have no solution for now.","10/Oct/13 12:10;mgrigorov;Here is a patch that solves the problem.
The idea is that initially the page is ""touched"" in o.a.w.Page#onInitialize().
This way pages which haven't been rendered will not be stored at the end of the request.","10/Oct/13 12:26;svenmeier;What about pages which are instantiated but not rendered immediately, e.g. rendered after a redirect only?","10/Oct/13 13:05;mgrigorov;Right.
It is easy to mark it as dirty before the redirect but it seems REDIRECT_TO_RENDER strategy is broken anyway... 
Just create a simple stateful page, configure the redirect strategy and you'll see no redirect happens. ","10/Oct/13 13:28;svenmeier;Hm, maybe with your patch the following ""dirty hack"" in Page#init() is obsolete?

	// this is a bit of a dirty hack, but calling dirty(true) results in isStateless called
	// which is bound to set the stateless cache to true as there are no components yet
	stateless = null;

BTW can anybody make sense of the comment a few lines earlier? Does it still hold then?

	// All Pages are born dirty so they get clustered right away
	dirty(true);

And why is #dirty(boolean) public anyway?","11/Oct/13 17:48;wicket.x.ttp;Today I noticed that a call to onBeforeRender() of an uninitialized page instance can be triggered by calling the page with the ""?0"" query string more than once.

It is possible to reproduce this with the quickstart by calling ""http://localhost:8080/page1?0"" multiple times during one session or by first calling ""http://localhost:8080/page1"" and calling ""http://localhost:8080/page1?0"" after that.","16/Oct/13 19:28;svenmeier;With ""page1?0"" you're just pulling the previous page instance out of the store, which failed previously on instantiation.

With Martin's patch the failed page is no longer stored, so this is no longer possible.","21/Oct/13 13:51;wicket.x.ttp;Thank you very much for having a look at it and for the patch. I have tested it on top of wicket-6.11.0. Everything seems to work so far. If the exception occures in onInitialize() the page isn't saved either (though super.onInitialize() is called first), so the problem with the exceptions in onBeforeRender() does not happen.","15/Nov/13 09:15;mgrigorov;The proposed patch is applied and will be part of 6.13.
I'll debug how REDIRECT_TO_RENDER strategy behaves with it.","15/Nov/13 10:33;mgrigorov;> What about pages which are instantiated but not rendered immediately, e.g. rendered after a redirect only?

I am not able to find a problem with the suggested patch with REDIRECT_TO_RENDER strategy.
Due to the check at https://github.com/apache/wicket/blob/wicket-6.x/wicket-core/src/main/java/org/apache/wicket/request/handler/render/WebPageRenderer.java#L209 the page is rendered in the first request because the current and the target urls are the same. They differ only when there is an action (onClick, onEvent, etc.). That is, only when there is an action Wicket will redirect to render the page.","15/Nov/13 10:34;mgrigorov;I'm closing the ticket for now.
Please reopen if you find a use case where the applied fix breaks the functionality.",15/Nov/13 11:03;svenmeier;Thanks Martin!,,,,,,,,,,,,,,,,,,,,,
"JQuery 1.10.1 does not work well with IE11, upgrade to 1.10.2",WICKET-5404,12676880,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,vandeven,vandeven,31/Oct/13 15:58,11/Nov/13 10:00,13/Mar/19 23:18,11/Nov/13 10:00,6.11.0,,,,,,,,6.13.0,7.0.0-M1,,,wicket,,,0,JQuery,,,,,,,"The javascript method attachEvent was replaced with the method  	addEventListener in IE11.
JQuery 1.10.1 still uses this method in case of IE > 8. This will cause javascript compilation errors.
JQuery 1.10.2 seems to have solved this problem.","Internet Explorer 11, windows 8.1",3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-11 09:57:34.2,,,no_permission,,,,,,,,,,,,356256,,,Mon Nov 11 09:57:34 UTC 2013,,,,,,0|i1pezz:,356544,,,,,,,,"11/Nov/13 09:57;mgrigorov;This has been done with 

commit 8264011ab00556a7f47fd2d542f7338227027fbd
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   Thu Jul 11 08:46:10 2013 +0300

    Upgrade jQuery to 1.10.2/2.0.3

but only in master branch. It seems I forgot to merge it to wicket-6.x.

Wicket 6.13 will use 1.10.2.
You can use IJavaScriptLibrarySettings#setJQueryReference() to use any JQuery version at any time.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistent behaviour of org.apache.wicket.Page.isPageStateless(),WICKET-5225,12652277,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,,mischa.neumann@init.de,mischa.neumann@init.de,11/Jun/13 21:14,29/Oct/13 13:21,13/Mar/19 23:18,29/Oct/13 13:21,6.8.0,,,,,,,,6.9.0,7.0.0-M1,,,wicket-auth-roles,,,1,,,,,,,,"we have a page with
- a login form A (org.apache.wicket.markup.html.form.StatelessForm<T>)
- a standard form B inside a panel which is secured with @AuthorizeAction(action = Action.RENDER...)

our problem: the user must submit the login form twice.

reason:
- when the page is requested the first time, the page is stateless cause none of the visible children are stateful.
- when the user now submits the login form, the page claims to be stateful, the stateful component is form B. 
- org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(IRequestCycle) now handles the page as expired and omits the submit

possible buggy code: 
- the visiblity of components is computed before rendering in org.apache.wicket.Component.setRenderAllowed()
- org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(IRequestCycle) calls only org.apache.wicket.MarkupContainer.internalInitialize() on the current page to give it a chance for computing its visibility, Component.setRenderAllowed() is not called



",any,,,,,,,,,,,,,,,,,,,,,,,,14/Jun/13 10:55;mischa.neumann@init.de;wicket-bug-5225-quickstart.zip;https://issues.apache.org/jira/secure/attachment/12587801/wicket-bug-5225-quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-12 14:11:41.337,,,no_permission,,,,,,,,,,,,332601,,,Tue Oct 29 13:21:08 UTC 2013,,,,,,0|i1ldkv:,332930,,,,,,,,"12/Jun/13 06:32;mischa.neumann@init.de;i think it is correct, that the page claims to be stateless at the first request - there is no component that will save any state.
but if the stateless flag depends on the visibility of components, any functionality that changes the visiblity must be called at the beginning of Component.isStateless().

also think about if the assumptions taken in ListenerInterfaceRequestHandler.respond(IRequestCycle) are correct: a former stateless page might be stateful at the time of the the submit if any stateful component is now visible. even if the targeted component is still statelless, the request will be treated as targeting a stale page.","12/Jun/13 14:11;mgrigorov;Please attach a quickstart app that demonstrates the issue.
Thank you!","14/Jun/13 10:52;mischa.neumann@init.de;after creating the quick start app, I noticed that you have to set  the RenderStrategy.REDIRECT_TO_RENDER in your org.apache.wicket.WicketApplication.init() to make the bug occur.

you will find the file attached.

thank you too!",18/Jun/13 12:58;mgrigorov;The problem is reproducible with 6.8.0 but not with 6.9.0-SNAPSHOT and 7.0.0-SNAPSHOT,"18/Jun/13 13:30;mischa.neumann@init.de;if wicket 6.9.0 will be released soon, I would close the bug as to unimportant - I found no one else with the same problem while searching for a solution.","18/Jun/13 13:34;mgrigorov;I tried to find which change fixed it in 6.x branch with git bisect and it failed. Then I tried again with 6.9.0-SNAPSHOT and now I reproduce it.
I'll see what made it working in 7.x, but I guess is the recent change in WebPageRenderer (WICKET-3347)","19/Jun/13 06:53;mischa.neumann@init.de;Sounds reasonable. 
We can't migrate to the next major version in short, so I will try to manually prepare the component tree in our base page implementation in org.apache.wicket.Component.onInitialize().

""closed in 7.x"" is would be acceptable.","29/Oct/13 13:21;mgrigorov;Closing as ""Fixed"" because it worked with 6.9.0-SNAPSHOT last time I tried.
Please comment here if it doesn't and we will reopen it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
target.prependJavaScript and JQuery-Animation in IE8,WICKET-5397,12676115,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,lessy,lessy,28/Oct/13 13:11,29/Oct/13 12:27,13/Mar/19 23:18,29/Oct/13 12:27,6.11.0,,,,,,,,6.12.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"Copied from http://apache-wicket.1842946.n4.nabble.com/target-prependJavaScript-and-JQuery-Animation-in-IE8-td4662008.html:

To enable animation with JQuery on replacing a component with Ajax, we have followed the construct with the ""|""-Symbol (pipe) in the Javascript that is added with target.prependJavaScript (see http://wicketinaction.com/2013/02/replace-components-with-animation => Thank you, Martin)

This does not seem to work in IE8. I pass a function like this: prependJavaScript(""notify|myfunction(notify, '"" + container.getMarkupId() + ""')"");

The Function looks like this:
function myfunction(notify, id) {
  Wicket.Log.info(""this is not reached in IE8"");
  JQuery(""#"" + id).slideUp(500, notify);
}

In IE8, myfunction is not called at all. On FF and other Browsers everything works okay. ","IE8 on Windows 7, IE8 on Parallels on a MAC",,,,,,,,,,,,,,,,,,,,,,,,28/Oct/13 13:16;lessy;QuickStartWicket6-IE8.zip;https://issues.apache.org/jira/secure/attachment/12610553/QuickStartWicket6-IE8.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-29 11:41:26.509,,,no_permission,,,,,,,,,,,,355612,,,Tue Oct 29 11:41:26 UTC 2013,,,,,,0|i1pb1b:,355900,,,,,,,,"28/Oct/13 13:16;lessy;Start the Quick-Start with mvn jetty:run
In the Browser: localhost:8182  (Note the port)
Click in Animate: Text slides in and then out again in normal browsers.
In IE8 Text does not slide-in. prepend-Javascript with | (pipe) is not executed.",29/Oct/13 11:41;mgrigorov;The problem is that String.split(Regex) doesn't work very well in IE8 and older - http://stackoverflow.com/a/8511819/497381.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Could not open second modal window after closing first,WICKET-5101,12637037,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,a.morozov,a.morozov,14/Mar/13 15:15,25/Oct/13 18:41,13/Mar/19 23:18,25/Oct/13 18:41,6.6.0,,,,,,,,6.12.0,7.0.0-M1,,,wicket,,,1,ajax,modal,,,,,,"Precondition: first modal window is opened. 
It has ajax submit form inside.

After submitting form inside modal I want to open another modal with another content.

I debugged wicket ajax response and found, 
that script, witch should close first window, closes second instead.

I attached wicket-ajax-response.js to demonstrate the problem.

wicket ajax engine correct runs those two functions, but ""win.current.close();"" at line 16
actually closes second window, opened at line 40.


See also
https://issues.apache.org/jira/browse/WICKET-1576",,,,,,,,,,,,,,,,,,,,,,,,,14/May/13 15:16;bitstorm;WICKET-5101.patch;https://issues.apache.org/jira/secure/attachment/12583134/WICKET-5101.patch,14/Mar/13 16:12;a.morozov;modalFormClose.zip;https://issues.apache.org/jira/secure/attachment/12573726/modalFormClose.zip,14/Mar/13 15:15;a.morozov;wicket-ajax-response.js;https://issues.apache.org/jira/secure/attachment/12573719/wicket-ajax-response.js,,3.0,,,,,,,,,,,,,,,,,,,2013-03-14 15:26:02.751,,,no_permission,,,,,,,,,,,,317529,,,Fri Oct 25 18:40:07 UTC 2013,,,,,,0|i1isg7:,317870,,,,,,,,14/Mar/13 15:26;mgrigorov;The problem sounds like WICKET-3151.,"14/Mar/13 15:26;mgrigorov;Please attach a demo application so we can debug and fix it.
Thanks!","14/Mar/13 16:14;a.morozov;Steps for attached demo:

1. Click link. -> first modal shown
2. Click button on modal =>

Expected scenario : first modal closed, second shown
Actual: first still opened, second not shown.","21/Mar/13 10:58;bitstorm;@Artem

In the meantime you can try to close the current window via JavaScript. You should substitute 'first.close(target);' with 
'target.prependJavaScript(""Wicket.Window.get().close();"");'
","21/Mar/13 11:19;a.morozov; 
I have already made similar workaround in my case. 
Hope you will avoid usage of setTimeout, or improve 'win.close(target);' 
 
Thanks for attension to this issue! 
 
 ","21/Mar/13 13:27;bitstorm;@Artem
As you pointed out, we have a synchronization problem due to setTimeout. The second form is built without waiting for the first to be destroyed.

@Martin
The comment inside function Wicket.Window.close from modal.js says that we can not directly close the window and we must use setTimeOut. Do you know what's wrong with directly closing the modal window?","21/Mar/13 13:33;mgrigorov;I have no idea. Matej Knopp wrote this code 5+ years ago. But I guess we can improve this with jQuery.Deferred - i.e. when action1 is complete then execute action2.
Play with it. If no one fix it earlier then I'll try after 6.7.0 is released.",29/Apr/13 13:36;bitstorm;Today I will try to find something for this issue. Can it be considered as part of the roadmap for Wicket 7?,29/Apr/13 13:41;mgrigorov;If it doesn't break the usage of ModalWindows in 6.x then it can be applied even for 6.8.0.,"30/Apr/13 13:02;bitstorm;Well, JQuery deferred can actually solve this issue and It can be also applied to 6.x branch. I've attached a patch with a possible solution. However I would also consider to remove setTimeOut from function Wicket.Window.close and test it with all main browser. This solution would reduce the complexity of modal.js instead of increasing it.",14/May/13 12:14;mgrigorov;Removing setTimeout() from Wicket.Window.close() doesn't help in this case.,"14/May/13 12:35;mgrigorov;Your patch breaks the demo in wicket-examples.
I needed to restore the old logic in org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow#getCloseJavacriptInternal() to make it work, but then the quickstart from this ticket breaks again ... :-/",14/May/13 14:51;bitstorm;We can not use namespace Wicket.Window in a page with no ModalWindow. That's why demo app get broken. I'm trying to fix the patch.,14/May/13 15:19;bitstorm;Done. I've updated the patch. Both demo app and the quickstart work fine.,"10/Oct/13 13:37;zeratul;Hello, what's the current status of this ticket? The patch doesn't seem to be applied in the Wicket 6 master. Does the problem still exist in latest versions?

We currently use the snipepts from the patch and we have same issue as WICKET-4695 (undefined win.current inside the deferred function in IE8).

Thanks",25/Oct/13 18:40;bitstorm;Applied the solution proposed by Octavian Ciubotaru in issue WICKET-1771.,,,,,,,,,,,,,,,,,,,,
AutoComplete JavaScript errors,WICKET-5382,12671474,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,bitstorm,jan.moxter,jan.moxter,01/Oct/13 00:12,03/Oct/13 17:53,13/Mar/19 23:18,03/Oct/13 17:53,6.11.0,,,,,,,,6.12.0,7.0.0-M1,,,wicket-extensions,,,0,,,,,,,,"- there are two different problems inside the javascript for Autocomplete

see Quickstart

- indicator is not turned off
- positioning wrong if inside a div with position absolute",,,,,,,,,,,,,WICKET-5378,WICKET-5379,,,,,,,,,,,01/Oct/13 00:27;jan.moxter;autocomplete.diff;https://issues.apache.org/jira/secure/attachment/12606014/autocomplete.diff,01/Oct/13 00:14;jan.moxter;autocomplete.zip;https://issues.apache.org/jira/secure/attachment/12606011/autocomplete.zip,,,2.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,351184,,,Tue Oct 01 00:27:28 UTC 2013,,,,,,0|i1oju7:,351476,,,,,,,,01/Oct/13 00:14;jan.moxter;quickstart,01/Oct/13 00:27;jan.moxter;- adding patch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve ConcatBundleResource error handling when a resource is missing,WICKET-5375,12670731,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,26/Sep/13 13:49,26/Sep/13 14:54,13/Mar/19 23:18,26/Sep/13 14:54,6.11.0,,,,,,,,6.12.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"If a resource bundle cannot find any of its items them it fails with:

Caused by: java.lang.NullPointerException
	at org.apache.wicket.resource.bundles.ConcatBundleResource.readAllResources(ConcatBundleResource.java:172)
	at org.apache.wicket.resource.bundles.ConcatBundleResource.getCacheableResourceStream(ConcatBundleResource.java:229)
	at org.apache.wicket.request.resource.caching.version.LastModifiedResourceVersion.getVersion(LastModifiedResourceVersion.java:41)
	at org.apache.wicket.request.resource.caching.version.RequestCycleCachedResourceVersion.getVersion(RequestCycleCachedResourceVersion.java:97)
	at org.apache.wicket.request.resource.caching.FilenameWithVersionResourceCachingStrategy.decorateUrl(FilenameWithVersionResourceCachingStrategy.java:102)
	at org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper.mapHandler(BasicResourceReferenceMapper.java:238)
	at org.apache.wicket.request.mapper.ParentPathReferenceRewriter.mapHandler(ParentPathReferenceRewriter.java:91)
	at org.apache.wicket.request.mapper.CompoundRequestMapper.mapHandler(CompoundRequestMapper.java:215)
	at org.apache.wicket.request.cycle.RequestCycle.mapUrlFor(RequestCycle.java:433)


Both org.apache.wicket.resource.bundles.ConcatBundleResource#collectResourceStreams and org.apache.wicket.resource.bundles.ConcatBundleResource#getCacheKey return null if any of the resources' streams cannot be loaded.

It would be nice if Wicket logs an error explaining which resource is missing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,350560,,,2013-09-26 13:49:59.0,,,,,,0|i1og07:,350853,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResourceAggregator looses information about priority/filtering/... when using a bundle,WICKET-5366,12670229,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,mgrigorov,mgrigorov,24/Sep/13 08:25,25/Sep/13 08:10,13/Mar/19 23:18,24/Sep/13 13:37,6.11.0,,,,,,,,6.12.0,7.0.0-M1,,,wicket,,,0,,,,,,,,If a resource reference is part of a bundle and this resource reference is rendered with PriorityHeaderItem then the bundle is not rendered with priority.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-24 13:37:10.088,,,no_permission,,,,,,,,,,,,350058,,,Wed Sep 25 08:10:08 UTC 2013,,,,,,0|i1ocx3:,350352,,,,,,,,"24/Sep/13 08:28;mgrigorov;I've added a new test case in master branch - org.apache.wicket.resource.aggregator.bundlepriority.BundlePriorityTest#bundleAShouldBeAtTheTop.
It uses a page that contributes three header items - two without priority and one with priority.
Since the prioritized header item is part of a bundle it is not rendered at the top as one would expect.","24/Sep/13 08:35;mgrigorov;In WICKET-5291 (the ticket that broke this functionality) I suggested a patch that would fix this behavior but now I think it is not a good fix. 
1) it doesn't cover the case with FilteredHeaderItem
2) what should be the behavior when a bundle contains two resource references and these references are rendered with different filters (FilteredHeaderItem#getFilterName()) ?
3) whatever we do in org.apache.wicket.markup.head.ResourceAggregator#getItemToBeRendered to fix the problem with (Priority|Filtered)HeaderItem it won't be able to support user defined IWrappedHeaderItem implementations. I.e. if I have MyHeaderItem(someOtherHeaderItem) then org.apache.wicket.markup.head.ResourceAggregator#getItemToBeRendered will loose the information about MyHeaderItem.","24/Sep/13 13:37;papegaaij;Fixed by rewrapping the bundles if the original header item implements the IHeaderItemWrapper interface. For 7.0, this interface is merged into IWrappedHeaderItem.

Case 2 will cause the bundle to be rendered in the filter specified by the first of the 2 items rendered.",25/Sep/13 08:10;mgrigorov;The fix works! Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dependencies of Resource Bundle References are ignored,WICKET-5291,12660034,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,tobiashaupt,tobiashaupt,26/Jul/13 11:50,24/Sep/13 08:28,13/Mar/19 23:18,29/Jul/13 10:28,6.9.1,,,,,,,,6.10.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"When several resource references are bundled, the bundle inherits the dependencies of all included resource references. Those dependencies are not evaluated when a header item is created from an included reference and rendered to the response (in ResourceAggregator). ",,,,,,,,,,,,,,,,,,,,,WICKET-5366,,,,26/Jul/13 11:53;tobiashaupt;quickstart_bundle.zip;https://issues.apache.org/jira/secure/attachment/12594376/quickstart_bundle.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-29 10:28:47.272,,,no_permission,,,,,,,,,,,,340226,,,Mon Sep 23 16:04:17 UTC 2013,,,,,,0|i1mohz:,340544,,,,,,,,"26/Jul/13 11:53;tobiashaupt;The quickstart shows a page with 2 components on it. Each of the component references a css resource which itself has a dependency to an aditional css resource (that allways should be rendered first). If both divs (one for each panel) are rendered GREEN, the dependencies are in the correct order. If one is rendered RED, the order is not as defined.
A resource bundle is created in the web application that concats the two primary css resources into one file. If the bundle is not registered, everything works fine.","26/Jul/13 12:01;tobiashaupt;In ResourceAggregator every recorded item will be rendered in the specified order (child first, filtering etc.). When an item is recorded, the dependencies are recorded first.

The bundle resolving is triggered later, when all recorded items will be rendered to the real response. In getItemToBeRendered(HeaderItem item) items that belong to a bundle are replaced with that bundle. This may result in a bundle beeing rendered before all dependencies of the inculded items are rendered. 

Bundles should be searched for at recording time, not at real rendering time.",29/Jul/13 10:28;papegaaij;Fixed,"23/Sep/13 16:04;mgrigorov;This fix seems to break a use case - org.apache.wicket.markup.head.ResourceAggregator#getItemToBeRendered may return a bundle for a HeaderItem, but if the header item is PriorityHeaderItem then the bundle looses the priority status and later org.apache.wicket.markup.head.PriorityFirstComparator#compare has no information about the priority and doesn't sort properly.

I have to create a proper unit test but the following change seems to fix the problem with our app:

--- i/wicket-core/src/main/java/org/apache/wicket/markup/head/ResourceAggregator.java
+++ w/wicket-core/src/main/java/org/apache/wicket/markup/head/ResourceAggregator.java
@@ -400,6 +400,19 @@ public class ResourceAggregator extends DecoratingHeaderResponse
                }
 
                HeaderItem bundle = Application.get().getResourceBundles().findBundle(innerItem);
-               return bundle == null ? item : bundle;
+               HeaderItem itemToBeRendered;
+               if (bundle == null)
+               {
+                       itemToBeRendered = item;
+               }
+               else if (item instanceof PriorityHeaderItem)
+               {
+                       itemToBeRendered = new PriorityHeaderItem(bundle);
+               }
+               else
+               {
+                       itemToBeRendered = bundle;
+               }
+               return itemToBeRendered;
        }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Url.canonical() breaks when there are two consecutive ""parent"" segments followed by a normal segment",WICKET-5345,12667754,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,10/Sep/13 07:33,16/Sep/13 08:26,13/Mar/19 23:18,16/Sep/13 08:26,6.10.0,,,,,,,,6.11.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"assertEquals(""a/d"", Url.parse(""a/b/c/../../d"").canonical().getPath()); 

breaks with :
Expected :a/d
Actual   :a/b/../d",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,347690,,,2013-09-10 07:33:47.0,,,,,,0|i1nycv:,347989,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResourceStreamResource should use #getResourceStream() instead of directly using the 'stream' field,WICKET-5351,12668619,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,jthomerson,jthomerson,mgrigorov,14/Sep/13 04:28,14/Sep/13 05:06,13/Mar/19 23:18,14/Sep/13 05:06,1.5.10,,,,,,,,1.5.11,,,,wicket,,,0,,,,,,,,org.apache.wicket.request.resource.ResourceStreamResource#newResourceResponse() resolves the IResourceStream by using #internalGetResourceStream() but later still uses the 'stream' member field.,,,,,,,,,,,,WICKET-4632,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,348553,,,2013-09-14 04:28:31.0,,,,,,0|i1o3nj:,348850,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""Required"" flag initialized too early in PropertyValidator",WICKET-5329,12665451,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,amorozov,amorozov,26/Aug/13 05:23,02/Sep/13 10:00,13/Mar/19 23:18,02/Sep/13 10:00,6.10.0,,,,,,,,6.11.0,7.0.0-M1,,,wicket-bean-validation,,,0,,,,,,,,"Method PropertyValidator#setComponentRequiredFlag() called inside #bind() implementation causes ISE exception (""Could not resolve Property from component..."") in #getProperty() in case, when component wasn't added to page hierarchy yet:

Form<Person> form = new Form<>(""form"", new CompoundPropertyModel(person));
TextField<String> requiredField = new TextField<>(""firstName"");
requiredField.add(new PropertyValidator()); // ISE !
form.add(requiredField);
add(form);

","Windows 2008 Server, JDK 1.7_u11 64bit, Glassfish 3.1.2.2",,,,,,,,,,,,,,,,,,,,,,,,26/Aug/13 05:27;amorozov;fix-WICKET-5329.patch;https://issues.apache.org/jira/secure/attachment/12599872/fix-WICKET-5329.patch,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,345391,,,Mon Aug 26 05:27:58 UTC 2013,,,,,,0|i1nk7j:,345692,,,,,,,,"26/Aug/13 05:27;amorozov;Please, review and apply patch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
KittenCaptcha example is broken in IE10,WICKET-5334,12665982,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,abonis,abonis,28/Aug/13 18:50,02/Sep/13 09:09,13/Mar/19 23:18,02/Sep/13 09:09,,,,,,,,,6.11.0,7.0.0-M1,,,,,,0,,,,,,,,"KittenCaptcha example (http://www.wicket-library.com/wicket-examples-6.0.x/kitten-captcha/)
does not work for me in IE10. When I switch IE to version 9 mode example works fine.","Windows 7, IE10",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,345921,,,2013-08-28 18:50:49.0,,,,,,0|i1nnhb:,346222,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
After selecting a file MultiFileUploadField does not render properly input field,WICKET-5335,12666005,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,alan ramos,alan ramos,28/Aug/13 21:24,02/Sep/13 08:42,13/Mar/19 23:18,02/Sep/13 08:42,6.7.0,,,,,,,,6.11.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"When attaching a single file or more with MultiFileUploadField the result of this appears besides the browse button in a single row, so if two or three files are to be attached then they lay beside one another with Browse buttons after the name of the file, besides this the file name appears with the input field, too.

This behaviour is not presented in Firefox that was also used to test an attach more than one file.",IE8 / IE9 in Windows 7 ,,,,,,,,,,,,,,,,,,,,,,,,28/Aug/13 21:29;alan ramos;skärmdump-itincident.PNG;https://issues.apache.org/jira/secure/attachment/12600464/sk%C3%A4rmdump-itincident.PNG,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-29 14:44:17.294,,,no_permission,,,,,,,,,,,,345944,,,Thu Aug 29 14:44:17 UTC 2013,,,,,,0|i1nnmf:,346245,,,,,,,,28/Aug/13 21:29;alan ramos;This is the result from attaching files with MultiFileUploadField in IE8 and this behaviour is also presented in IE9,29/Aug/13 14:44;svenmeier;Works fine here with IE8 on Windows XP. Please attach a quickstart.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""Source code"" link doesn't work at wicket-library.com",WICKET-5322,12664426,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,19/Aug/13 19:16,19/Aug/13 19:24,13/Mar/19 23:18,19/Aug/13 19:24,6.9.1,,,,,,,,6.11.0,,,,wicket-examples,,,0,,,,,,,,"From https://github.com/wicketstuff/core/issues/250:


When I click on ""Source code"" at http://www.wicket-library.com/wicket-examples-6.0.x/helloworld/ and then some of links HelloWorld.html, HelloWorld.java or HelloWorldApplication.java, none of them is working (no code is displayed).

For version 1.5 it works fine.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,344427,,,2013-08-19 19:16:49.0,,,,,,0|i1ne9z:,344727,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong HTML attribute used in SizeTagModifier (wicket-bean-validation),WICKET-5313,12663078,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,amorozov,amorozov,11/Aug/13 07:35,12/Aug/13 10:08,13/Mar/19 23:18,12/Aug/13 09:17,6.9.1,,,,,,,,6.11.0,7.0.0-M1,,,,,,0,,,,,,,,"According to HTML spec, INPUT element doesn't have ""maxlen"" attribute, but have ""maxlength"". As side effect, max input length is not configured according to JRS 303 @Size annotation.

PS
couldn't find component ""wicket-bean-validation"" in Jira","Windows 8, JDK 1.7u13 64bit, Glassfish 3.1.2.2",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,343079,,,2013-08-11 07:35:39.0,,,,,,0|i1n5zj:,343383,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberFormatException when parsing the port from Requests with invalid URIs,WICKET-5287,12659746,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,funkattack,funkattack,25/Jul/13 09:19,08/Aug/13 12:43,13/Mar/19 23:18,08/Aug/13 12:43,1.5.10,6.9.1,,,,,,,6.10.0,7.0.0-M1,,,,,,0,,,,,,,,"we still can reproduce this on any version.

Maybe this git diff gives a clearer picture:

diff --git a/wicket-core/src/test/java/org/apache/wicket/protocol/http/servlet/ServletWebRequestTest.java b/wicket-core/src/test/java/org/apache/wicket/protocol/http/servlet/ServletWebRequestTest.java
index f974a06..9ee3308 100644
--- a/wicket-core/src/test/java/org/apache/wicket/protocol/http/servlet/ServletWebRequestTest.java
+++ b/wicket-core/src/test/java/org/apache/wicket/protocol/http/servlet/ServletWebRequestTest.java
@@ -191,6 +191,16 @@
 		assertEquals(""any/source/of/error"", errorClientUrl.toString());
 	}
 
+	@Test
+	public void wicketFoo()
+	{
+		String filterPath = ""filterPath"";
+		MockHttpServletRequest httpRequest = new MockHttpServletRequest(null, null, null);
+		httpRequest.setURL(""http://localhost"" + '/' + filterPath + ""/request/foo://:/"");
+
+		ServletWebRequest webRequest = new ServletWebRequest(httpRequest, filterPath);
+	}
+
 	private static class CustomRequestPage extends WebPage implements IMarkupResourceStreamProvider
 	{
 		private static final long serialVersionUID = 1L;

This tests leads to this exption

java.lang.NumberFormatException: For input string: """"
	at java.lang.NumberFormatException.forInputString(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at java.lang.Integer.parseInt(Unknown Source)
	at org.apache.wicket.request.Url.parse(Url.java:277)
	at org.apache.wicket.protocol.http.servlet.ServletWebRequest.getContextRelativeUrl(ServletWebRequest.java:208)
	at org.apache.wicket.protocol.http.servlet.ServletWebRequest.<init>(ServletWebRequest.java:112)
	at org.apache.wicket.protocol.http.servlet.ServletWebRequest.<init>(ServletWebRequest.java:82)
	at org.apache.wicket.protocol.http.servlet.ServletWebRequestTest.wicketFoo(ServletWebRequestTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,339938,,,2013-07-25 09:19:27.0,,,,,,0|i1mmpz:,340256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No page id appended to some stateful pages using repeaters,WICKET-5309,12662487,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,berniegp,berniegp,07/Aug/13 20:30,08/Aug/13 10:37,13/Mar/19 23:18,08/Aug/13 10:37,6.9.1,,,,,,,,6.10.0,7.0.0-M1,,,,,,0,stateful,,,,,,,"My test case is a page containing a ListView with a single stateful child. In that case, there is no redirect done to append a pageId to the url because the page's statefulness check is erroneous.

Analysis:
This calls page.isPageStateless() to dertermine whether a pageId should be added

BookmarkableMapper(AbstractBookmarkableMapper).getPageInfo(IPageRequestHandler) line: 440
BookmarkableMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 387
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 215
RequestCycle.mapUrlFor(IRequestHandler) line: 429
WebPageRenderer.respond(RequestCycle) line: 268
RenderPageRequestHandler.respond(IRequestCycle) line: 165
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 861
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64
RequestCycle.execute(IRequestHandler) line: 261

The problem I see is that AbstractRepeater's onPopulate() is called during onBeforeRender() and this is not done when the stateless status of the page is first checked. Therefore, no pageId is added unless other components not located inside repeaters are also stateful. 

See thread http://wicket-users.markmail.org/thread/6q2dmns7lqjgkok7

I will add a quickstart.",,,,,,,,,,,,,,,,,,,,,,,,,07/Aug/13 20:55;berniegp;WICKET-5309.zip;https://issues.apache.org/jira/secure/attachment/12596702/WICKET-5309.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-08 10:27:35.928,,,no_permission,,,,,,,,,,,,342490,,,Thu Aug 08 10:37:18 UTC 2013,,,,,,0|i1n2db:,342795,,,,,,,,"07/Aug/13 20:30;berniegp;According to Sven Meier, probably caused by WICKET-4995",07/Aug/13 20:55;berniegp;Quickstart,08/Aug/13 10:27;svenmeier;page url *can* change after render,"08/Aug/13 10:37;svenmeier;The page url is now checked again after rendering (as before WICKET-4995). Note that the fix for WICKET-4995 is still in place, i.e. the page is acquired first to prevent a stateful page to be rendered twice.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"if wicket is an external lib, BundleStringResourceLoader doesn't work",WICKET-5310,12662557,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,paul ms,paul ms,08/Aug/13 06:59,08/Aug/13 07:42,13/Mar/19 23:18,08/Aug/13 07:42,6.9.1,,,,,,,,6.10.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"We have got serveral Wicket-based Wepapps on our server and in order to save space, we have move all shared libs (including wicket) into a shared folder which is included via the ""common.loader"" of the catalina.properties file. (Using Apache Tomcat/7.0.39)
The Problem is now, that StringResourceModel works normal, but the BundleStringResourceLoader doesn't work anymore. It always returns null.

How to reproduce:
Build attached quickstart
Remove wicket-libs from war
Deploy in Tomcat",Apache Tomcat/7.0.39,,,,,,,,,,,,,,,,,,,,,,,,08/Aug/13 06:59;paul ms;quickstart.zip;https://issues.apache.org/jira/secure/attachment/12596786/quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-08 07:42:59.567,,,no_permission,,,,,,,,,,,,342560,,,Thu Aug 08 07:42:59 UTC 2013,,,,,,0|i1n2sn:,342864,,,,,,,,"08/Aug/13 07:42;mgrigorov;Fixed.
Now Wicket will fallback to thread's context class loader if the resource cannot be found as before.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamic and static extra paramaters not evaluated in ajax submitting behavior in a multipart form,WICKET-5306,12662310,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,aangenieux,aangenieux,07/Aug/13 08:05,07/Aug/13 09:53,13/Mar/19 23:18,07/Aug/13 09:53,6.8.0,6.9.0,6.9.1,,,,,,6.10.0,7.0.0-M1,,,,,,0,,,,,,,,"When a multipart form is submitted via an Ajax behavior, with ajax attributes having setMultipart(true), then dynamic extra parameters are not evaluated in submission",,,,,,,,,,,,,,,,,,,,,,,,,07/Aug/13 08:06;aangenieux;ajax-attrs-dyn-param-bug.zip;https://issues.apache.org/jira/secure/attachment/12596532/ajax-attrs-dyn-param-bug.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-07 08:45:07.209,,,no_permission,,,,,,,,,,,,342314,,,Wed Aug 07 09:53:22 UTC 2013,,,,,,0|i1n1a7:,342619,,,,,,,,07/Aug/13 08:06;aangenieux;Quickstart built on Wicket 6.9.1 demonstrating the issue,"07/Aug/13 08:45;mgrigorov;Fixed in 6.x and master branches.
I'll add unit tests soon.","07/Aug/13 09:53;mgrigorov;Static extra parameters had the same problem.
Both problems are fixed now. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using InlineEnclosure leads to two re-renderings of the controlling child component,WICKET-5302,12661848,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,05/Aug/13 09:19,06/Aug/13 14:44,13/Mar/19 23:18,06/Aug/13 14:44,6.9.1,,,,,,,,6.10.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"org.apache.wicket.protocol.http.AjaxEnclosureListener adds the inline enclosure when the controlling child is repainted but doesn't remove the child itself from the map and this leads to two <component> elements in the Ajax response.

<?xml version=""1.0"" encoding=""UTF-8""?>
<ajax-response>
	<component id=""cc7"" ><![CDATA[<div wicket:id=""cc"" id=""cc7"">New CC</div>]]></component>
	<component id=""wicket__InlineEnclosure_06"" ><![CDATA[<div wicket:enclosure=""cc"" id=""wicket__InlineEnclosure_06"">
					Before<br/>

					<div wicket:id=""cc"" id=""cc7"">New CC</div>

					After<br/>
				</div>]]>
	</component>
</ajax-response>",,,,,,,,,,,,,,,,,,,,,,,,,05/Aug/13 09:19;mgrigorov;inline-enclosure-doubling.tar.gz;https://issues.apache.org/jira/secure/attachment/12596070/inline-enclosure-doubling.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,341852,,,Tue Aug 06 14:44:01 UTC 2013,,,,,,0|i1myfz:,342158,,,,,,,,05/Aug/13 09:19;mgrigorov;Demo application,06/Aug/13 14:44;mgrigorov;From now on the listeners will work with the original/modifiable map and can modify it if needed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ComponentRenderingRequestHandler does not clear renderedComponents (PrototypeApplication),WICKET-5300,12661388,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,svenmeier,svenmeier,02/Aug/13 11:58,02/Aug/13 13:15,13/Mar/19 23:18,02/Aug/13 13:15,6.9.1,7.0.0-M1,,,,,,,6.10.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"A second click on the prototype link fails:

The component [Component id = counter] was rendered already. You can render it only once during a render phase. Class relative path: org.apache.wicket.markup.html.basic.Label:counter
 MarkupStream: [unknown]
	at org.apache.wicket.Page.componentRendered(Page.java:210)
	at org.apache.wicket.Component.rendered(Component.java:2610)
	at org.apache.wicket.Component.internalRender(Component.java:2383)
	at org.apache.wicket.Component.render(Component.java:2307)
	at org.apache.wicket.core.request.handler.ComponentRenderingRequestHandler.respond(ComponentRenderingRequestHandler.java:70)

ComponentUseCheck has to be enabled (e.g. development config). It seems ComponentRenderingRequestHandler does not clear the collection of renderedComponents in the page.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,341577,,,Fri Aug 02 13:15:45 UTC 2013,,,,,,0|i1mwr3:,341884,,,,,,,,02/Aug/13 13:15;svenmeier;ComponentRenderingRequestHandler now calls #startComponentRender() / #endComponentRender() as XmlAjaxResponse does.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket Example for effects with Prototype is broken,WICKET-5298,12661143,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,mgrigorov,mgrigorov,01/Aug/13 15:22,02/Aug/13 11:54,13/Mar/19 23:18,02/Aug/13 11:54,6.9.1,,,,,,,,6.10.0,7.0.0-M1,,,wicket,,,0,,,,,,,,http://www.wicket-library.com/wicket-examples-6.0.x/ajax/effects has JavaScript problems.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-02 11:12:17.125,,,no_permission,,,,,,,,,,,,341332,,,Fri Aug 02 11:54:29 UTC 2013,,,,,,0|i1mvb3:,341650,,,,,,,,"02/Aug/13 11:12;svenmeier;Seems there is a conflict between Prototype and jQuery,",02/Aug/13 11:54;svenmeier;the example uses jQuery UI now,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Base url is incorrect for error dispatched pages,WICKET-5203,12649337,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,24/May/13 14:54,31/Jul/13 12:03,13/Mar/19 23:18,27/May/13 08:35,6.8.0,,,,,,,,1.5.11,6.9.0,7.0.0-M1,,wicket,,,0,,,,,,,,"The fix for https://issues.apache.org/jira/browse/WICKET-4387 includes the following code in org.apache.wicket.protocol.http.servlet.ServletWebRequest#ServletWebRequest(HttpServletRequest httpServletRequest, String filterPrefix, Url url):

if (forwardAttributes != null || errorAttributes != null)
		{
			if (LOG.isDebugEnabled())
			{
				LOG.debug(""Setting filterPrefix('{}') to '' because there is either an error or a forward. {}, {}"",
						new Object[] {filterPrefix, forwardAttributes, errorAttributes});
			}
			// the filter prefix is not needed when the current request is internal
			// see WICKET-4387
			this.filterPrefix = """";

The filterPrefix is actually needed later when a request is made due to an error (e.g. 404):

public Url getClientUrl()
	{
		if (errorAttributes != null && !Strings.isEmpty(errorAttributes.getRequestUri()))
		{
			String problematicURI = Url.parse(errorAttributes.getRequestUri(), getCharset())
				.toString();
			return getContextRelativeUrl(problematicURI, filterPrefix);

With filterPrefix=="""" the urls for any resources in the error page are wrong.
",,,,,,,,,,,,,,,,,,,,,,,,,27/May/13 08:19;mgrigorov;quickstart.tgz;https://issues.apache.org/jira/secure/attachment/12584903/quickstart.tgz,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,329664,,,Mon May 27 08:19:12 UTC 2013,,,,,,0|i1kvj3:,329999,,,,,,,,"27/May/13 08:19;mgrigorov;Attaching a quickstart app.

It uses contextPath = ""context"", filterPath = ""/filter/*"" and <error-page> for 404 that is handled by a Wicket page. The error page uses CSS contribution which without this fix has wrong url and leads to another error dispatch, i.e. NotFoundPage is used for the request to the CSS.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wicket-atmosphere EventBus constructor throws NullPointerException under invalid state,WICKET-5135,12641083,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,ceefour,ceefour,05/Apr/13 18:03,29/Jul/13 07:16,13/Mar/19 23:18,29/Jul/13 07:16,6.6.0,,,,,,,,6.10.0,7.0.0-M1,,,wicket-atmosphere,,,0,,,,,,,,"With invalid configuration, like the WebApplication not yet associated with the servlet, wicket-atmosphere throws NPE.

{code}
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'atmosphereEventBus' defined in class id.co.bippo.springapp.AppConfig: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public org.apache.wicket.atmosphere.EventBus id.co.bippo.springapp.AppConfig.atmosphereEventBus()] threw exception; nested exception is java.lang.NullPointerException
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:581) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1031) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:927) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:490) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:314) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:910) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:853) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:768) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:486) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        ... 107 common frames omitted
Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public org.apache.wicket.atmosphere.EventBus id.co.bippo.springapp.AppConfig.atmosphereEventBus()] threw exception; nested exception is java.lang.NullPointerException
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:181) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:570) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        ... 117 common frames omitted
Caused by: java.lang.NullPointerException: null
        at org.apache.wicket.atmosphere.EventBus.<init>(EventBus.java:113) ~[wicket-atmosphere-0.8.jar:0.8]
        at id.co.bippo.springapp.SoluvasWebApplication.getEventBus(SoluvasWebApplication.java:296) ~[SoluvasWebApplication.class:na]
        at id.co.bippo.springapp.AppConfig.atmosphereEventBus(AppConfig.java:270) ~[AppConfig.class:na]
        at id.co.bippo.springapp.AppConfig$$EnhancerByCGLIB$$a9c1dc07.CGLIB$atmosphereEventBus$1(<generated>) ~[spring-core-3.2.2.RELEASE.jar:na]
        at id.co.bippo.springapp.AppConfig$$EnhancerByCGLIB$$a9c1dc07$$FastClassByCGLIB$$40a0fc3e.invoke(<generated>) ~[spring-core-3.2.2.RELEASE.jar:na]
        at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:286) ~[spring-context-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        at id.co.bippo.springapp.AppConfig$$EnhancerByCGLIB$$a9c1dc07.atmosphereEventBus(<generated>) ~[spring-core-3.2.2.RELEASE.jar:na]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_15]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_15]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_15]
        at java.lang.reflect.Method.invoke(Method.java:601) ~[na:1.7.0_15]
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:160) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]
        ... 118 common frames omitted
{code}

It should wrap the NPE in a more descriptive error. Suggestion: ""Provided Wicket WebApplication is not associated with a ServletContext. Please ensure Wicket application is fully initialized before creating Atmosphere EventBus.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-29 07:16:54.151,,,no_permission,,,,,,,,,,,,321499,,,Mon Jul 29 07:16:54 UTC 2013,,,,,,0|i1jgyv:,321844,,,,,,,,05/Apr/13 18:04;ceefour;Stackoverflow thread describing the issue: http://stackoverflow.com/a/13102861/122441,29/Jul/13 07:16;papegaaij;I've added several checks in the initialization code.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"o.a.w.a.AtmosphereBehavior onBroadcast should log DEBUG, not INFO",WICKET-5279,12658975,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,ceefour,ceefour,21/Jul/13 18:56,26/Jul/13 09:13,13/Mar/19 23:18,24/Jul/13 12:38,6.9.1,,,,,,,,6.10.0,7.0.0-M1,,,wicket-atmosphere,,,0,,,,,,,,"Logging of onBroadcast is too verbose to be on INFO level :

{code}
14:48:54.812 | INFO  | oryBean_Worker-4 | o.a.w.a.EventBus                 | pache.wicket.atmosphere.EventBus  203 | registering component for page 1 for session A3D08FEE5445F872C8A69289C00F79E3: crumbHolder:jobListPanel
14:48:54.831 | INFO  | Shared-AsyncOp-0 | o.a.w.a.AtmosphereBehavior       | et.atmosphere.AtmosphereBehavior  129 | onBroadcast: 32501<|msg|><?xml version=""1.0"" encoding=""UTF-8""?><ajax-response><component id=""jobListPanel1ea9"" ><![CDATA[<div id=""jobListPanel1ea9"">
<h3>Device Presences</h3>
<div class=""btn-toolbar"">
        <a href=""#"" class=""btn btn-danger"" id=""deleteAllBtn1f27""><i class=""icon-trash""></i> Delete all</a><span style=""display:none;"" class=""wicket-ajax-indicator"" id=""deleteAllBtn1f27--ajax-indicator""><img src=""./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/indicator-ver-1373820815000.gif"" alt=""""/></span>
</div>
<table id=""devicePresenceTable1f33"" class=""table-striped table-bordered table"">

<thead>

        <tr class=""navigation"">
                <td colspan=""5"">
...
{code}

It should be DEBUG level only",,3600,3600,,0%,3600,3600,,,,,,,,,,WICKET-5280,WICKET-5281,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,339168,,,Fri Jul 26 09:13:58 UTC 2013,,,,,,0|i1mhzj:,339488,,,,,,,,26/Jul/13 09:13;ceefour;Thank you [~mgrigorov]  ! :),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE on unmount in BookmarkableMapper.java:189,WICKET-5272,12657425,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,tla,tla,12/Jul/13 09:12,12/Jul/13 11:08,13/Mar/19 23:18,12/Jul/13 11:08,6.8.0,6.9.0,6.9.1,,,,,,6.10.0,7.0.0-M1,,,,,,0,,,,,,,,"When unmounting a page, I get a NullPointerException from BookmarkableMapper.java:189.

Snippet of the StackTrace:

java.lang.NullPointerException
        at org.apache.wicket.core.request.mapper.BookmarkableMapper.matches(BookmarkableMapper.java:189)
        at org.apache.wicket.core.request.mapper.BookmarkableMapper.parseRequest(BookmarkableMapper.java:98)
        at org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper.mapRequest(AbstractBookmarkableMapper.java:288)
        at org.apache.wicket.request.mapper.CompoundRequestMapper.unmount(CompoundRequestMapper.java:254)
        at org.apache.wicket.protocol.http.WebApplication.unmount(WebApplication.java:391)
        at ...

In CompoundRequestMapper.java:250 a Request is created, which returns null on getClientUrl() (see CompoundRequestMapper.java:291). This getClientUrl() is used as ""baseUrl"" at BookmarkableMapper.java:179 which leads to the NPE at BookmarkableMapper.java:189 ""baseUrl.getSegments()"".","OSGi, Oracle JDK 1.7.0_21",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-12 11:08:00.88,,,no_permission,,,,,,,,,,,,337647,,,Fri Jul 12 11:08:00 UTC 2013,,,,,,0|i1m8mf:,337970,,,,,,,,12/Jul/13 11:08;svenmeier;CompounRequestMapper#createRequest() uses the given url as clientUrl now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minified css/js gets compressed,WICKET-5250,12654667,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,johannes.odland@gmail.com,johannes.odland@gmail.com,25/Jun/13 05:56,11/Jul/13 12:56,13/Mar/19 23:18,11/Jul/13 12:56,6.8.0,,,,,,,,6.10.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"Given an application with a resource reference to a minified script, i.e. html5.js and html5.min.js.

When the ResourceRequestHandler responds 
it will set compress to false, if the resource reference was PackageResourceReference
but it will not change compression if the resource reference was JavaScriptResourceReference.


PackageResourceReference handles minified resources more or less correctly (if they are minified, they should not be further compressed), but this behavior is overwritten in its subclasses.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-25 19:50:18.247,,,no_permission,,,,,,,,,,,,334944,,,Thu Jul 11 12:56:04 UTC 2013,,,,,,0|i1lrz3:,335268,,,,,,,,"25/Jun/13 19:50;cedricgatay;Hi,
can you provide a quickstart for this one please (by digging in the code I see no reason for what you describe) ?

Thanks","26/Jun/13 09:52;johannes.odland@gmail.com;In PackageResourceReference#getResource() there is a check that sets compress to false on the resource if a minified name exists (Line 132-136).

This method is overwritten by JavaScriptResourceReference (and CssResourceReference). Neither of them checks if the resource is minified.
","28/Jun/13 17:26;cedricgatay;Ok I finally understood what you meant. The problem lies in the fact that the minified handling is done within PackageResourceReference and not in PackageResource. 

I am willing to take this issue into account and correct it for the Wicket.next, however, only if a core commiter tell me it is ok to do so (it represents quite a lot of work to be honest).

Can someone confirm this issue needs to be handled (or we might complete the JavaDoc of JavaScriptPackageResource to tell that automatic lookup of minified resource won't be done) ? ","29/Jun/13 10:42;cedricgatay;Hi,
I made a small patch allowing CssResourceReference and JavaScriptResourceReference to use the built-in mechanism in PackageResourceReference, please ignore the previous message as I melted things in my head.

You can find the correct patch at the following url : https://github.com/CedricGatay/wicket/compare/WICKET-5250?expand=1 it includes basic unit-testing around the bug as it has been described.

Regards,","11/Jul/13 12:56;mgrigorov;Patch applied.
Thanks, Cedric!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDI integration fails in Glassfish 4.0 with WELD-000070,WICKET-5226,12652318,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,leadseeker,leadseeker,12/Jun/13 04:25,03/Jul/13 08:07,13/Mar/19 23:18,17/Jun/13 07:55,6.8.0,,,,,,,,6.9.0,7.0.0-M1,,,wicket-cdi,,,0,cdi,glassfish,javaee7,,,,,"When CDI is configured in the Application and a page has a non-static inner class the page throws exception, regardless of whether there are any injected fields.

Caused by: org.jboss.weld.exceptions.DefinitionException: WELD-000070 Simple bean [EnhancedAnnotatedTypeImpl] private  class com.inversebit.HomePage$AForm cannot be a non-static inner class
	at org.jboss.weld.injection.producer.BasicInjectionTarget.checkType(BasicInjectionTarget.java:81)
	at org.jboss.weld.injection.producer.BasicInjectionTarget.<init>(BasicInjectionTarget.java:69)
	at org.jboss.weld.injection.producer.BeanInjectionTarget.<init>(BeanInjectionTarget.java:52)
	at org.jboss.weld.manager.InjectionTargetFactoryImpl.createInjectionTarget(InjectionTargetFactoryImpl.java:95)
	at org.jboss.weld.manager.InjectionTargetFactoryImpl.createInjectionTarget(InjectionTargetFactoryImpl.java:78)
	... 65 more
",Glassfish 4.0,,,,,,,,,,,,,,,,,,,,WICKET-5264,,,,20/Jun/13 06:44;leadseeker;WELD-000070_1.txt;https://issues.apache.org/jira/secure/attachment/12588768/WELD-000070_1.txt,12/Jun/13 04:27;leadseeker;cditest.zip;https://issues.apache.org/jira/secure/attachment/12587368/cditest.zip,20/Jun/13 07:23;leadseeker;cditest_2.zip;https://issues.apache.org/jira/secure/attachment/12588777/cditest_2.zip,,3.0,,,,,,,,,,,,,,,,,,,2013-06-17 07:55:22.454,,,no_permission,,,,,,,,,,,,332642,,,Thu Jun 20 08:09:17 UTC 2013,,,,,,0|i1ldtz:,332971,,,,,,,,"12/Jun/13 04:27;leadseeker;Quickstart with embedded Glassfish.
% mvn package embedded-glassfish:run
http://localhost:8282/cditest/","17/Jun/13 07:55;mgrigorov;From now on any inner non-static component class won't be processed by ComponentInjector.
Weld 1.1 doesn't complain about such classes but Weld 2.0 does. It seems Weld 1.1 missed the check.","20/Jun/13 05:23;leadseeker;Rebuilt Wicket from wicket-6.x and I'm still getting the same exception:

2013-06-20 07:13:40,729 [http-listener-2(3)] DEBUG org.apache.wicket.MarkupContainer - Add logo to [DebugBar [Component id = debug]]
2013-06-20 07:13:40,761 [http-listener-2(3)] WARN  RequestCycleExtra - ********************************
2013-06-20 07:13:40,901 [http-listener-2(3)] WARN  RequestCycleExtra - Handling the following exception
org.apache.wicket.WicketRuntimeException: Can't instantiate page using constructor 'public com.mydomain.webapp.HomePage(org.apache.wicket.request.mapper.parameter.PageParameters)' and argument ''. An exception has been thrown during construction!
	at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:194) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:76) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.DefaultMapperContext.newPageInstance(DefaultMapperContext.java:133) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.core.request.handler.PageProvider.resolvePageInstance(PageProvider.java:268) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.core.request.handler.PageProvider.getPageInstance(PageProvider.java:166) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.request.handler.render.PageRenderer.getPage(PageRenderer.java:78) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:244) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:165) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:861) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) ~[wicket-request-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261) [wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218) [wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289) [wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:259) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:201) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:282) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:256) ~[web-core.jar:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:214) ~[web-core.jar:na]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:316) ~[web-core.jar:na]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160) ~[web-core.jar:na]
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734) ~[web-core.jar:na]
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673) ~[web-core.jar:na]
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99) ~[web-glue.jar:na]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174) ~[web-core.jar:na]
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:357) ~[web-core.jar:na]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:260) ~[web-core.jar:na]
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:188) ~[kernel.jar:na]
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:191) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:168) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:189) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:288) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:206) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:136) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:114) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:838) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:113) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:115) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:55) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:135) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:564) ~[nucleus-grizzly-all.jar:na]
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:544) ~[nucleus-grizzly-all.jar:na]
	at java.lang.Thread.run(Thread.java:724) ~[na:1.7.0_25]
Caused by: java.lang.reflect.InvocationTargetException: null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.7.0_25]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57) ~[na:1.7.0_25]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.7.0_25]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:526) ~[na:1.7.0_25]
	at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:171) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	... 43 common frames omitted
Caused by: org.jboss.weld.exceptions.IllegalArgumentException: WELD-000070 Simple bean [EnhancedAnnotatedTypeImpl]  class org.apache.wicket.devutils.debugbar.DebugBar$3 cannot be a non-static inner class
	at org.jboss.weld.manager.InjectionTargetFactoryImpl.createInjectionTarget(InjectionTargetFactoryImpl.java:82) ~[weld-osgi-bundle.jar:20130513-1450]
	at org.jboss.weld.manager.InjectionTargetFactoryImpl.createInjectionTarget(InjectionTargetFactoryImpl.java:68) ~[weld-osgi-bundle.jar:20130513-1450]
	at org.jboss.weld.manager.BeanManagerImpl.createInjectionTarget(BeanManagerImpl.java:1039) ~[weld-osgi-bundle.jar:20130513-1450]
	at org.apache.wicket.cdi.NonContextual.<init>(NonContextual.java:118) ~[wicket-cdi-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.cdi.NonContextual.of(NonContextual.java:84) ~[wicket-cdi-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.cdi.NonContextualManager.inject(NonContextualManager.java:54) ~[wicket-cdi-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.cdi.AbstractInjector.inject(AbstractInjector.java:43) ~[wicket-cdi-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.cdi.ComponentInjector.onInstantiation(ComponentInjector.java:57) ~[wicket-cdi-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.application.ComponentInstantiationListenerCollection$1.notify(ComponentInstantiationListenerCollection.java:38) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.application.ComponentInstantiationListenerCollection$1.notify(ComponentInstantiationListenerCollection.java:34) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80) ~[wicket-util-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.application.ComponentInstantiationListenerCollection.onInstantiation(ComponentInstantiationListenerCollection.java:33) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.Component.<init>(Component.java:683) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.MarkupContainer.<init>(MarkupContainer.java:121) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.markup.html.WebMarkupContainer.<init>(WebMarkupContainer.java:52) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.markup.repeater.AbstractRepeater.<init>(AbstractRepeater.java:67) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.markup.html.list.ListView.<init>(ListView.java:140) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.markup.html.list.ListView.<init>(ListView.java:162) ~[wicket-core-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.devutils.debugbar.DebugBar$3.<init>(DebugBar.java:131) ~[wicket-devutils-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.devutils.debugbar.DebugBar.contentSection(DebugBar.java:130) ~[wicket-devutils-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.devutils.debugbar.DebugBar.<init>(DebugBar.java:117) ~[wicket-devutils-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at org.apache.wicket.devutils.debugbar.DebugBar.<init>(DebugBar.java:86) ~[wicket-devutils-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]
	at com.mydomain.webapp.common.StandardBasePage.<init>(StandardBasePage.java:52) ~[StandardBasePage.class:na]
	at com.mydomain.webapp.HomePage.<init>(HomePage.java:22) ~[HomePage.class:na]
	... 48 common frames omitted","20/Jun/13 05:38;mgrigorov;I have fixed this the other day by adding a check to not process for injecting an anonymous class.
Are you sure that you have the latest 6.x code ?","20/Jun/13 05:50;leadseeker;I'm pretty sure it's the latest code unless I'm doing something daft...
This line in the above stack trace suggests I'm using your recently modified ComponentInjector.java as line 57 was not present before:
at org.apache.wicket.cdi.ComponentInjector.onInstantiation(ComponentInjector.java:57) ~[wicket-cdi-6.9.0-SNAPSHOT.jar:6.9.0-SNAPSHOT]","20/Jun/13 05:58;mgrigorov;Indeed. It appears that I have forgotten to merge the fix from master to 6.x.
Just did it. Please pull  and try again.","20/Jun/13 06:43;leadseeker;That has solved the DebugBar issue which is now getting skipped correctly.
2013-06-20 08:18:20,875 [http-listener-2(2)] DEBUG org.apache.wicket.cdi.ComponentInjector - Skipping non-static inner class 'class org.apache.wicket.devutils.debugbar.DebugBar$3' 

I'm still getting the exception on other components though, see WELD-000070_1.txt","20/Jun/13 06:51;mgrigorov;com.mydomain.webapp.common.PostalAddressLookupPanel$1 looks the same - an anonymous class.
Please either update the quickstart so it is failing again or put a breakpoint at ComponentInjector and see why this class is processed.",20/Jun/13 07:23;leadseeker;Updated quickstart,"20/Jun/13 07:26;leadseeker;Seems to be AjaxLink now causing the error, just adding an AjaxLink to a Page will trigger it:
Last cause: WELD-000070 Simple bean [EnhancedAnnotatedTypeImpl]  class org.apache.wicket.ajax.markup.html.AjaxLink$1 cannot be a non-static inner class","20/Jun/13 07:52;mgrigorov;Thanks!
Moved the check to AbstractInjector so it is reused by ComponentInjector and BehaviorInjector.
I'm not sure whether the same check should be used for @PostConstruct too.
Please try again.","20/Jun/13 08:06;leadseeker;Looking good so far :)
Many thanks - I'll let you know if I run into further CDI issues.",20/Jun/13 08:09;mgrigorov;Thanks for your help !,,,,,,,,,,,,,,,,,,,,,,,
UrlRenderer#renderUrl() doesn't preserve the host,WICKET-5260,12655543,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,01/Jul/13 07:13,01/Jul/13 07:14,13/Mar/19 23:18,01/Jul/13 07:14,6.9.0,,,,,,,,6.10.0,7.0.0-M1,,,wicket,,,0,,,,,,,,When context absolute url is re-calculated to a relative the host part is not preserved.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,335818,,,2013-07-01 07:13:27.0,,,,,,0|i1lxcv:,336142,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Url can't parse urls with username and password,WICKET-5259,12655371,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,papegaaij,papegaaij,28/Jun/13 15:58,28/Jun/13 16:13,13/Mar/19 23:18,28/Jun/13 16:13,1.5.11,6.9.0,7.0.0-M1,,,,,,1.5.11,6.10.0,7.0.0-M1,,wicket,,,0,,,,,,,,"Url tries to parse the password as the portnumber, because it's after the :, resulting in the following exception:
java.lang.NumberFormatException: For input string: ""23dc429c-4ffa-4e99-8e24-984571f4c3b6@digdag-rest-dev2.topicusonderwijs.nl""
	java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	java.lang.Integer.parseInt(Integer.java:492)
	java.lang.Integer.parseInt(Integer.java:527)
	org.apache.wicket.request.Url.parse(Url.java:276)
	org.apache.wicket.request.Url.parse(Url.java:192)
	org.apache.wicket.protocol.http.servlet.ServletWebResponse.encodeRedirectURL(ServletWebResponse.java:212)
	org.apache.wicket.protocol.http.servlet.ServletWebResponse.sendRedirect(ServletWebResponse.java:236)
	org.apache.wicket.protocol.http.BufferedWebResponse$SendRedirectAction.invoke(BufferedWebResponse.java:400)
	org.apache.wicket.protocol.http.BufferedWebResponse.writeTo(BufferedWebResponse.java:588)
	org.apache.wicket.protocol.http.HeaderBufferingWebResponse.stopBuffering(HeaderBufferingWebResponse.java:60)
	org.apache.wicket.protocol.http.HeaderBufferingWebResponse.flush(HeaderBufferingWebResponse.java:97)
	org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:269)
	org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:201)
	org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:282)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,335646,,,Fri Jun 28 16:13:11 UTC 2013,,,,,,0|i1lwan:,335970,,,,,,,,"28/Jun/13 16:13;papegaaij;Fixed by skipping the credentials when searching for the port number, they are considered part of the host (which seems to work fine).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minified name resolves incorrectly if default resource reference is used,WICKET-5251,12654669,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,johannes.odland@gmail.com,johannes.odland@gmail.com,25/Jun/13 06:12,26/Jun/13 09:48,13/Mar/19 23:18,26/Jun/13 09:41,6.8.0,,,,,,,,6.10.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"In PackageResourceReference.

When a default reference to a minified resource is used (i.e. the resource wasn't mounted) the resource reference name includes '.min'. 

When trying to resolve the minified name, another '.min' is appended, resulting in the minified name resolving to 'html5.min.min.js'. 

As a result, the PackageResourceReference concludes that the resource was not minified, and adds compression.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-25 19:55:12.693,,,no_permission,,,,,,,,,,,,334946,,,Wed Jun 26 09:41:36 UTC 2013,,,,,,0|i1lrzj:,335270,,,,,,,,25/Jun/13 19:55;cedricgatay;I'm taking this one.,25/Jun/13 20:10;cedricgatay;You can find a fix for already minified resources by name detection at the following URL : https://github.com/CedricGatay/wicket/compare/WICKET-5251?expand=1,"26/Jun/13 09:41;mgrigorov;Thanks, Cedric!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnEventHeaderItem can't be applied via AJAX,WICKET-5234,12652734,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,bitstorm,bitstorm,13/Jun/13 19:46,24/Jun/13 11:49,13/Mar/19 23:18,24/Jun/13 11:49,,,,,,,,,1.5.11,6.9.0,7.0.0-M1,,,,,0,,,,,,,,"OnEventHeaderItem doesn't have effect if it is applied to a component refreshed via AJAX. In short, OnEventHeaderItem is applied before the component is refreshed via AJAX, hence the releated event handler is removed from the target component. 
We could modify JavaScript function Wicket.Ajax.Call.loadedCallback in order to apply header contributors after the component has been refreshed (see patch).",,,,,,,,,,,,,,,,,,,,,,,,,22/Jun/13 20:08;bitstorm;EventScript.patch;https://issues.apache.org/jira/secure/attachment/12589263/EventScript.patch,13/Jun/13 20:02;bitstorm;OnEventAjax.zip;https://issues.apache.org/jira/secure/attachment/12587692/OnEventAjax.zip,13/Jun/13 19:48;bitstorm;WICKET-5234.patch;https://issues.apache.org/jira/secure/attachment/12587691/WICKET-5234.patch,,3.0,,,,,,,,,,,,,,,,,,,2013-06-14 08:13:27.896,,,no_permission,,,,,,,,,,,,333058,,,Sat Jun 22 20:12:40 UTC 2013,,,,,,0|i1lge7:,333386,,,,,,,,13/Jun/13 20:02;bitstorm;I've attached a quickstart project as well to show you the problem.,"14/Jun/13 08:13;mgrigorov;The suggested patch is not good because the prepended/appended scripts by AjaxRequestTarget may need JS library to be able to do their job.

",14/Jun/13 08:24;mgrigorov;AjaxHeaderResponse now handles OnEventHeaderItem specially as it already does with OnLoad and OnDomReady header items,22/Jun/13 20:12;bitstorm;Method getJavaScript of OnEventHeaderItem returns the script without its event handler. I added a patch that adds method getFullJavaScript to OnEventHeaderItem to solve the problem.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Session should be bound when adding messages to it,WICKET-5165,12645459,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,berniegp,berniegp,30/Apr/13 16:53,20/Jun/13 14:01,13/Mar/19 23:18,20/Jun/13 11:10,6.7.0,,,,,,,,6.9.0,7.0.0-M1,,,,,,0,session,,,,,,,"When using the Sessions info(), error() and success() methods, and the session is temporary, the messages can be dropped silently. This happens when on stateless pages and a redirect happens in the same request during which a session message is added.

The fix for this could be to make sure the session is bound and call Session#bind() automatically when a session message is added.

Email thread:
http://wicket-users.markmail.org/thread/zd72s4gwnlp5d7ch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-30 18:00:00.654,,,no_permission,,,,,,,,,,,,325821,,,Thu Jun 20 14:01:27 UTC 2013,,,,,,0|i1k7mf:,326166,,,,,,,,"30/Apr/13 18:00;mgrigorov;If there is no redirect to another page then there is no need to bind the session, right ?",30/Apr/13 20:07;berniegp;That is correct.,30/Apr/13 20:10;mgrigorov;And this makes the decision whether to bind the session not so easy :-/,"01/May/13 13:56;berniegp;Here's an idea that might work without concurrent request cycles:

Session gets a new flag called ""wasBoundForMessage"" to indicate that the current session was bound during this request specifically for a session message. That flag is reset anytime the bind() method is called for another reason. At the end of a request, if wasBoundForMessage is true and the response is rendered in the same request (no redirect), the Session is ""unbound"".

Like I said, I know this doesn't work as is, but I'm posting it in case the concept sparks another idea.",20/Jun/13 11:10;mgrigorov;Fixed by checking for session feedback messages before making a redirect.,20/Jun/13 14:01;berniegp;The fix looks nice and simple. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"use jquery ""focusin""/""focusout"" for ajax focus tracking",WICKET-5229,12652403,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,svenmeier,svenmeier,12/Jun/13 13:41,14/Jun/13 10:54,13/Mar/19 23:18,12/Jun/13 13:46,7.0.0-M1,,,,,,,,7.0.0-M1,,,,wicket,,,0,,,,,,,,"Focus tracking in wicket-ajax-jquery.js can be simplified with jQuery bubbling ""focusin""/""focusout"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-14 09:25:58.755,,,no_permission,,,,,,,,,,,,332727,,,Fri Jun 14 10:54:13 UTC 2013,,,,,,0|i1lecv:,333056,,,,,,,,12/Jun/13 13:46;svenmeier;Could be backported to 6.x on demand.,"14/Jun/13 09:25;mgrigorov;The new code binds on 'window' element, i.e. uses event delegation.
The code in 6.x binds directly on input, select, textarea, button and 'a' elements.

I think the new code will break if attributes.setEventPropagation(STOP) is used somewhere in the hierarchy. ","14/Jun/13 10:08;svenmeier;For that to happen the developer would have to listen for ""focusin"" event and explicitely use EventPropagation#STOP in AjaxRequestAttributes. How likely is that? If we see a problem here, then we could never utilize event bubbling.","14/Jun/13 10:26;mgrigorov;Focus tracking in wicket-ajax.js is used internally by Wicket.
For example Wicket.Ajax.Call.success() calls window.setTimeout(""Wicket.Focus.requestFocus();"", 0); to refocus the last focused element if it has been replaced in the Ajax response.

I'm not sure how serious is this change. I just note that the change in the behavior is big enough to appear in someone's use case.","14/Jun/13 10:54;svenmeier;IMHO the old solution was due for an overhaul:

	// re-attach the events to the new components (a bit blunt method...)
	// This should be changed for IE See comments in wicket-event.js add (attachEvent/detachEvent)
	// IE this will cause double events for everything.. (mostly because of the jQuery.proxy(element))
	Wicket.Focus.attachFocusEvent();

Note that if a developer uses #stopImmediately from his ""focus"" event handler, this would break Wicket's focus tracking too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxFormChoiceComponentUpdatingBehavior fails for choices containing other invalid FormComponents,WICKET-5230,12652422,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,svenmeier,svenmeier,12/Jun/13 15:59,13/Jun/13 07:02,13/Mar/19 23:18,12/Jun/13 18:52,1.5.10,6.8.0,7.0.0-M1,,,,,,1.5.11,6.9.0,7.0.0-M1,,wicket,,,0,,,,,,,,"If a TextField inside a RadioGroup has a ValidationError, processing of AjaxFormChoiceComponentUpdatingBehavior will erroneously update the group's model:

- RadioGroup#validate() does not convert the input, because #isValid() returns false (since the nested textfield has an error message)
- the behavior tests #hasErrorMessage() on the group, which returns false (since the group itself doesn't have an error message)
- the behavior continues processing with a null value",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,332746,,,Wed Jun 12 18:52:28 UTC 2013,,,,,,0|i1leh3:,333075,,,,,,,,12/Jun/13 18:52;svenmeier;#isValid() is now used instead of #hasErrorMessage() for cases where a nested FormComponent might have an error message. This is how FormComponent does it too.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Component.setMetaData() should not allow saving non-Serializable objects,WICKET-5227,12652335,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,12/Jun/13 07:16,12/Jun/13 14:09,13/Mar/19 23:18,12/Jun/13 14:09,7.0.0-M1,,,,,,,,7.0.0-M1,,,,wicket,,,0,,,,,,,,"Application and RequestCycle can store any type of meta data because it is not being serialized.
At the moment Session.setMetaData() works with Serializable value, but Component can accept any type and will fail during page serialization with runtime error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,332659,,,2013-06-12 07:16:30.0,,,,,,0|i1ldxr:,332988,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Direct iframe removal not supported by Firefox: tab title stays as ""Connecting""",WICKET-5222,12651998,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,gsmet,gsmet,10/Jun/13 09:42,10/Jun/13 14:28,13/Mar/19 23:18,10/Jun/13 12:06,6.8.0,,,,,,,,6.9.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"Hi,

When using the post via iframe feature of Wicket (for multipart Ajax request) with Firefox, the tab title is changed to ""Connecting..."" and it doesn't get back to the original page title at all, even after the Ajax call returned.

The iframe is removed in the onload of the iframe ( see
https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js#L868
) and it seems to be problematic for Firefox.

Looks like there is some literature about it here:
http://stackoverflow.com/questions/7285866/never-ending-connecting-message-after-ajax-form-submit

and using a pattern like the following should fix it:
iframe.onload = function(){
    // Do work with the content of the iframe…

    setTimeout(function(){
        iframe.parentNode.removeChild(iframe);
    }, 0);
}

Quickstart coming with a way to reproduce the problem:
- Launch the application using Start.java;
- Go to http://localhost:8080/ with Firefox;
- Upload a file via the Ajax submit button;
- The tab title stays as ""Connecting..."".

Now uncomment the resource replacement line in the WicketApplication file, restart the app and it should work correctly.

Patch using a setTimeout call coming too.","Wicket 6.8.0, Firefox 21",,,,,,,,,,,,,,,,,,,,,,,,10/Jun/13 09:45;gsmet;postInIframe.tar.gz;https://issues.apache.org/jira/secure/attachment/12587046/postInIframe.tar.gz,10/Jun/13 09:45;gsmet;wicket-fix-iframe-removal.patch;https://issues.apache.org/jira/secure/attachment/12587045/wicket-fix-iframe-removal.patch,,,2.0,,,,,,,,,,,,,,,,,,,2013-06-10 12:06:52.032,,,no_permission,,,,,,,,,,,,332322,,,Mon Jun 10 14:28:18 UTC 2013,,,,,,0|i1lbvb:,332651,,,,,,,,"10/Jun/13 12:06;mgrigorov;The patch is applied.
Thanks for the investigation!",10/Jun/13 14:28;gsmet;Thanks Martin.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxEditableLabel not working well in form,WICKET-5220,12651887,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,betlista,betlista,08/Jun/13 22:48,10/Jun/13 12:25,13/Mar/19 23:18,10/Jun/13 12:25,6.8.0,7.0.0-M1,,,,,,,6.9.0,7.0.0-M1,,,,,,0,AjaxEditableLabel,,,,,,,"Using quickstart I created new maven project (using 6.8.0 wicket + extensions).

Code of my page is

package net.betlista;

import org.apache.wicket.extensions.ajax.markup.html.AjaxEditableLabel;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.model.CompoundPropertyModel;

public class AjaxEditableLabelInFormTestPage extends WebPage {

	Form<AjaxEditableLabelInFormTestPageModel> form = new Form(""form"");
	
	AjaxEditableLabel<String> text = new AjaxEditableLabel<String>(""text"");
	
	public AjaxEditableLabelInFormTestPage() {
		form.setModel(new CompoundPropertyModel<AjaxEditableLabelInFormTestPage.AjaxEditableLabelInFormTestPageModel>(new AjaxEditableLabelInFormTestPageModel()));
		form.add(text);
		add(form);
	}
	
	class AjaxEditableLabelInFormTestPageModel {
		String text;
	}
	
}

code for markup HTML is

<!DOCTYPE html PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"" ""http://www.w3.org/TR/html4/loose.dtd"">
<html>
	<head>
		<meta http-equiv=""Content-Type"" content=""text/html; charset=ISO-8859-1"">
		<title>Insert title here</title>
	</head>
	<body>

		<form wicket:id=""form"">
			<span wicket:id=""text"">text</span>
		</form>
		
	</body>
</html>

and when I edit the label and press tab, it changed to regular page text (span), but when I press enter (while editing) the component is still input instead of span and the content is not submitted also. It's not possible to  change the component to span again...","Win8, MS10, Chrome 27.0.1453.94 m",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-09 09:28:34.923,,,no_permission,,,,,,,,,,,,332211,,,Mon Jun 10 12:25:25 UTC 2013,,,,,,0|i1lb6n:,332540,,,,,,,,08/Jun/13 22:49;betlista;reerted previous {{code}} try,09/Jun/13 09:28;svenmeier;EditableLabelPage in wicket-examples works just fine. Could you please attach your quickstart?,09/Jun/13 16:00;betlista;But in in EditableLabelPage it is not in form if we are talking about the same page - http://www.wicket-library.com/wicket-examples-6.0.x/ajax/editable-label,"09/Jun/13 19:33;svenmeier;Indeed, I should have read your description more carefully.",10/Jun/13 12:25;svenmeier;Enter key has to be prevented onkeypress.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade atmosphere-runtime to 1.0.13,WICKET-5200,12649083,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,ceefour,ceefour,23/May/13 10:36,10/Jun/13 10:41,13/Mar/19 23:18,10/Jun/13 10:41,,,,,,,,,6.9.0,7.0.0-M1,,,wicket-atmosphere,,,0,,,,,,,,"Latest 1.0.x version is 1.0.13.

1.1.x is still in RC2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,329410,,,2013-05-23 10:36:37.0,,,,,,0|i1ktyn:,329745,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxEditableLabel doesn't provide a way to configure Ajax attributes for its Ajax behaviors,WICKET-5223,12652001,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,10/Jun/13 09:58,10/Jun/13 10:37,13/Mar/19 23:18,10/Jun/13 10:37,6.8.0,,,,,,,,6.9.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"AjaxEditableLabel uses EditorAjaxBehavior and LabelAjaxBehavior to change its modes.
At the moment there is no way to configure custom Ajax attributes for both behaviors.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,332325,,,2013-06-10 09:58:53.0,,,,,,0|i1lbvz:,332654,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EnclosureContainer calls child#configure() way before rendering,WICKET-5218,12651054,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,svenmeier,svenmeier,05/Jun/13 08:25,05/Jun/13 09:25,13/Mar/19 23:18,05/Jun/13 09:25,1.5.10,6.8.0,7.0.0-M1,,,,,,1.5.11,6.9.0,7.0.0-M1,,wicket,,,0,,,,,,,,"Having a button contained in an EnclosureContainer the following bug may happen:
- before #onSubmit() is called, the visibility of the button and its parents is checked
- EnclosureContainer calls #configure() on the button to determine its own visibility
- #onSubmit() is called on the button
- rendering starts
- the button is not configured again, since #configure() was already called
- a possible visibility change of the button is not applied",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,331380,,,Wed Jun 05 09:25:01 UTC 2013,,,,,,0|i1l63b:,331712,,,,,,,,05/Jun/13 09:25;svenmeier;child.configure() is now callled from #onConfigure(),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when using ComponentRenderer.renderComponent on a panel with <wicket:enclosure>,WICKET-5209,12649646,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,sgleizes,sgleizes,28/May/13 08:27,28/May/13 20:42,13/Mar/19 23:18,28/May/13 20:15,6.8.0,,,,,,,,6.9.0,7.0.0-M1,,,wicket,,,1,,,,,,,,"Hi,

Consider this example:
<wicket:panel>
	<wicket:enclosure child=""externalLink"">
		<a wicket:id=""externalLink"">Link</a>
	</wicket:enclosure>
</wicket:panel>

When trying to render such a panel with ComponentRenderer.renderComponent, a NPE is thrown because Wicket try to render Enclosure without initializing it.

Root cause:
java.lang.NullPointerException
	at org.apache.wicket.markup.html.internal.Enclosure.isVisible(Enclosure.java:143)
	at org.apache.wicket.Component.determineVisibility(Component.java:4363)
	at org.apache.wicket.Component.internalBeforeRender(Component.java:916)
	at org.apache.wicket.Component.beforeRender(Component.java:991)
	at org.apache.wicket.Component.internalPrepareForRender(Component.java:2214)
	at org.apache.wicket.Component.render(Component.java:2303)
	at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1390)
	at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1554)
	at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1529)
	at org.apache.wicket.MarkupContainer.renderAssociatedMarkup(MarkupContainer.java:689)
	at org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy.renderAssociatedMarkup(AssociatedMarkupSourcingStrategy.java:76)
	at org.apache.wicket.markup.html.panel.PanelMarkupSourcingStrategy.onComponentTagBody(PanelMarkupSourcingStrategy.java:112)
	at org.apache.wicket.Component.internalRenderComponent(Component.java:2549)
	... 29 more

See the attached quickstart.

I've looked a little into it, and it seems that RenderPage (used by ComponentRenderer to render components) is never initialized.
Therefore the panel's children are never initialized too (see MarkupContainer l.930), and this causes Enclosure to have a null childComponent.

Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,28/May/13 08:32;sgleizes;component-renderer-enclosure-test-case.tar.gz;https://issues.apache.org/jira/secure/attachment/12585008/component-renderer-enclosure-test-case.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-28 20:42:09.749,,,no_permission,,,,,,,,,,,,329973,,,Tue May 28 20:42:09 UTC 2013,,,,,,0|i1kxfr:,330308,,,,,,,,28/May/13 08:32;sgleizes;See TestComponentRenderer in the quickstart.,"28/May/13 20:42;gsmet;Thanks Martin.

FYI, we now use this feature a lot to generate HTML emails and PDF files using XHTMLRenderer.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Page redirects can fail when using url encoding,WICKET-5202,12649315,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,jamesgifford,jamesgifford,24/May/13 12:36,27/May/13 15:24,13/Mar/19 23:18,27/May/13 13:42,6.8.0,,,,,,,,1.5.11,6.9.0,7.0.0-M1,,wicket,,,0,,,,,,,,"When url encoding is used instead of cookies for session management, some redirections do not work in Wicket 6.8.0. The problem appears to be in UrlRenderer.renderRelativeUrl, which returns the (invalid) relative URL:

""..//demo/app;jsessionid=0BFE4703434CFF7BEBAE5CBF6C60B15F"" 

when passed the URL:

""http://localhost:8080/demo/app;jsessionid=0BFE4703434CFF7BEBAE5CBF6C60B15F""

and when the UrlRenderer's base URL is: 

""wicket/page?1-1.ILinkListener-link""

This is because the removeCommonPrefixes method tries to compare segments between the encoded target URL and a URL parsed from 

(URLRenderer line 319):
Url commonPrefix = Url.parse(request.getContextPath() + request.getFilterPath());

This second URL does not contain the ;jsessionid=... suffix and the removeCommonPrefixes method doesn't remove prefixes properly. The problem doesn't occur when using cookies for session management, of course.

This issue is new between Wicket version 6.2.0 and 6.8.0. When deployed into a servlet container using url-encoding for session management, the following app works under Wicket 6.2.0 but fails (because of redirecting to an invalid URL) under Wicket 6.8.0:

// ------------------------
// App.java
import org.apache.wicket.protocol.http.WebApplication;
import org.apache.wicket.Page;

public class App extends WebApplication {
    @Override
    public Class<? extends Page> getHomePage() {
        return A.class;
    }
}

// ------------------------
// A.java
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.link.Link;

public class A extends WebPage {
    public A() {
        add(new Link<Object>(""link"") {
            @Override
            public void onClick() {
                setResponsePage(B.class);
            }
        });
    }
}
    
// ------------------------
// B.java
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.link.Link;

public class B extends WebPage {
    public B() {
        add(new Link<Object>(""link"") {
            @Override
            public void onClick() {
                setResponsePage(A.class);
            }
        });
    }
}

// ------------------------

Clicking the link on the home page A will successfully navigate to page B. Clicking the link on page B should navigate to page A. Under Wicket 6.2.0, or Wicket 6.8.0 with cookies, it works. With Wicket 6.8.0 and url-encoding, it tries to redirect to an incorrect URL like 

http://localhost:8080/demo/app//demo/app;jsessionid=0BFE4703434CFF7BEBAE5CBF6C60B15F

which fails (note the double slash and repeated context/filter in the URL). 

It is possible to configure Tomcat to use url encoding instead of cookies for session management by editing the conf/context.xml file within the Tomcat installation and making the root element of that file read:

 <Context cookies=""false"">

","Linux, Tomcat 7.0.39, JDK 1.7.0",,,,,,,,,,,,,,,,,,,,,,,,27/May/13 10:53;jamesgifford;jira5202.tgz;https://issues.apache.org/jira/secure/attachment/12584916/jira5202.tgz,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-27 09:35:16.203,,,no_permission,,,,,,,,,,,,329642,,,Mon May 27 10:53:47 UTC 2013,,,,,,0|i1kve7:,329977,,,,,,,,"27/May/13 09:35;mgrigorov;Please package the code snippets in a quickstart application that reproduces the described problem.
You can setup Jetty in Wicket Quickstart archetype (Start.java) to use url encoding with:

// uncomment next line if you want to test with JSESSIONID encoded in the urls
		// ((AbstractSessionManager) bb.getSessionHandler().getSessionManager()).setUsingCookies(false);

But you can also provide app that shows the problem on Tomcat.","27/May/13 10:53;jamesgifford;I've tweaked the Start class in the attached Quickstart app to configure Jetty to use url encoding. Running the Start class, hitting http://localhost:8080 and clicking the links three times exhibits the problem. 

Note that running Jetty via ""mvn jetty:run"" doesn't use the Start class and hence doesn't exhibit the problem. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The DateTimeField.onBeforeRender() method does not format the fields correctly.,WICKET-5204,12649346,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,caleb.powell,caleb.powell,24/May/13 16:00,27/May/13 15:15,13/Mar/19 23:18,27/May/13 15:15,1.5.9,6.7.0,6.8.0,,,,,,1.5.11,6.9.0,7.0.0-M1,,wicket-datetime,,,0,,,,,,,,"The current implementation relies on the org.joda.time.MutableDateTime instance to format the date, hours, amOrPm, and minutes fields. Unfortunately, the MutableDateTime constructor is not provided with the client's TimeZone value (assuming it is set). As a result, the joda library uses the JVM's default timezone. If the defaul timezone differs from the client's timezone, the formatted fields may turn out to be incorrect.",,,,,,,,,,,,,,,,,,,,,,,,,24/May/13 16:04;caleb.powell;DateTimeFieldTest.java;https://issues.apache.org/jira/secure/attachment/12584703/DateTimeFieldTest.java,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,329673,,,Fri May 24 16:04:13 UTC 2013,,,,,,0|i1kvl3:,330008,,,,,,,,"24/May/13 16:04;caleb.powell;This unit test demonstrates the problem; it sets the default timezone to UTC, and then creates a DateTimeField component with a client timezone of 'America/Toronto'. The formatted time does not meet the expectation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AbstractAjaxBehavior.unbind does not clean stored reference to host component,WICKET-5205,12649448,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,denis.shok,denis.shok,25/May/13 12:27,25/May/13 20:14,13/Mar/19 23:18,25/May/13 20:14,6.5.0,7.0.0-M1,,,,,,,6.9.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"Reference to a component stored on bind does not cleaned properly on unbind.
Instead, local paremeter is cleaned:

	/** the component that this handler is bound to. */
	private Component component;

	@Override
	public final void bind(final Component hostComponent)
	{
                ...
		component = hostComponent;
                ...
	}

	@Override
	public final void unbind(Component component)
	{
		onUnbind();
		component = null;
		super.unbind(component);
	}

It prevents reusing AbstractAjaxBehavior.",,,,,,,,,,,,,,,,,WICKET-4925,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,329775,,,2013-05-25 12:27:48.0,,,,,,0|i1kw7r:,330110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adding AjaxFormValidatingBehavior to the form prevents form from being filled,WICKET-5194,12648573,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,solomax,solomax,21/May/13 07:38,23/May/13 14:49,13/Mar/19 23:18,23/May/13 14:49,6.8.0,,,,,,,,6.9.0,,,,wicket,,,0,,,,,,,,"It is impossible to enter any text in the form fields in case

AjaxFormValidatingBehavior.addToAllFormComponents(form, ""keydown"", Duration.ONE_SECOND);

was added.

Everything works as expected in 6.7.0",,,,,,,,,,,,,,,,,WICKET-5197,,,,,,,,21/May/13 15:09;bitstorm;AjaxFormValBehavior.zip;https://issues.apache.org/jira/secure/attachment/12584016/AjaxFormValBehavior.zip,21/May/13 13:13;bitstorm;WICKET-5178.patch;https://issues.apache.org/jira/secure/attachment/12584007/WICKET-5178.patch,22/May/13 07:36;mgrigorov;WICKET-5194.patch;https://issues.apache.org/jira/secure/attachment/12584266/WICKET-5194.patch,,3.0,,,,,,,,,,,,,,,,,,,2013-05-21 12:52:32.807,,,no_permission,,,,,,,,,,,,328928,,,Thu May 23 14:49:37 UTC 2013,,,,,,0|i1kr1r:,329270,,,,,,,,21/May/13 12:52;bitstorm;Event cancellation has been added at line 1819 of wicket-ajax-jquery.js. I'm tracking back the commit that introduced this instruction.,21/May/13 13:12;bitstorm;We should set the default behavior flag to true for AjaxFormValidatingBehavior. See patch.,21/May/13 13:19;bitstorm;The problem is bigger as it affects also AjaxEventBehavior :(,"21/May/13 13:35;mgrigorov;What do you mean ?

In 6.7.0 we added a property in AjaxRequestAttributes for JS event.stopPropagation() so now you can control it like you were able for event.preventDefault().

Additionally we moved the call to preventDefault/stopPropagation in code that is not throttled so they are always executed.

The behavior should be as in 6.6.0 but it seems indeed something is different thus this ticket.","21/May/13 13:59;bitstorm;Yes, behavior still be as in 6.6.0. The point is that from ver 6.7.0 to 6.8.0 function Wicket.Ajax.ajax has been changed adding 'Wicket.Ajax._handleEventCancelation(attributes)' which by default  invokes 'evt.preventDefault()'. This last invocation is controlled by attribute AjaxRequestAttributes.allowDefault which is false by default.
In short with ver 6.8.0 every event-based AJAX behavior prevent the default event handling by default. If we try to use an AjaxEventBehavior like this:

textfield.add(new AjaxEventBehavior(""keydown"") {
			
	@Override
	protected void onEvent(AjaxRequestTarget target) {
				
				
        }
});

we obtain the same issue described here (the textfield is not editable).","21/May/13 14:14;mgrigorov;I cannot find any problem with Ajax in our app and with Wicket-Examples.
Please create a quickstart and attach it here.
Thanks!","21/May/13 14:26;svenmeier;Prior to Wicket 6.8.0 a event default was not prevented, when the Ajax request was throttled. The old behavior was a bug: If a developer wants the default event to be prevented, it should do so whether the request is throttled or not.

We'll have to fix AjaxFormValidatingBehavior#addToAllFormComponents() now.",21/May/13 15:11;bitstorm;I've attached a quickstart. It's quite simple: you have fields 'name' and 'surname'. The first has the same AjaxEventBehavior reported in my last post and you can not edit a value in it.,"21/May/13 16:47;svenmeier;Andrea's patch looks fine to me. It's not exactly the old behavior though, as previously any event without throttle delay would not have allowed the default.
","22/May/13 06:53;mgrigorov;Indeed there is a problem with 'allowDefault' default value being 'false'.
Andrea's quickstart shows that <input type=""text"" ../> + 'key(down|up)' event doesn't work unless 'allowDefault=true' is set explicitly.

To avoid overriding #updateAjaxAttributes(AjaxRequestAttributes attributes) for each and every Ajax behavior in your app one can do:

getAjaxRequestTargetListeners().add(new AjaxRequestTarget.AbstractListener()
		{
			@Override
			public void updateAjaxAttributes(AjaxRequestAttributes attributes)
			{
				super.updateAjaxAttributes(attributes);

				attributes.setAllowDefault(true);
			}
		});

in MyApp#init().

I'll raise this problem in dev@.",22/May/13 07:36;mgrigorov;A patch that sets 'allowDefault' default value to 'true'. ,23/May/13 14:49;mgrigorov;Andrea's patch is applied.,,,,,,,,,,,,,,,,,,,,,,,,
StopPropagation functionality on link is broken,WICKET-5178,12645936,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,marie,marie,03/May/13 08:56,21/May/13 12:56,13/Mar/19 23:18,13/May/13 13:11,6.7.0,,,,,,,,6.8.0,7.0.0-M1,,,,,,1,,,,,,,,"In the quickstart I'll add the following is illustrated:
- simple table with AjaxLink on tr
- on that tr there's another AjaxLink with should not propagate the onclick to the tr
- So when clicking the ""here"" link, on the server logging only the following should appear:
     * onclick LNK
 but also the logging from the tr link is printed:
    * onclick LNK
    * onclick TR

In wicket 6.6 this works. 

Thanks in advance ! Kind regards, Marieke",,,,,,,,,,,,,,,,,WICKET-5194,,,,,,,,03/May/13 08:57;marie;myproject.zip;https://issues.apache.org/jira/secure/attachment/12581676/myproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-03 09:08:30.514,,,no_permission,,,,,,,,,,,,326295,,,Mon May 13 12:43:57 UTC 2013,,,,,,0|i1kajj:,326640,,,,,,,,"03/May/13 09:08;mgrigorov;The change for 6.7 was intentional - WICKET-5093.
AjaxRequestAttributes has a setting ""allowDefault"" which managed both JS event's ""preventDefault"" and ""stopPropagation"". It was a bug that it handled ""stopPropagation"".

Maybe we should add a separate setting for stop propagation in AjaxRequestAttributes.","03/May/13 09:23;svenmeier;An additional setting for ""stop propagation"" would be nice, Java devs don't want to write ""Wicket.Event.stop(attrs.event)"".
We could make that setting true by default, to make this change compatible with the previous behavior.",03/May/13 09:25;mgrigorov;Agree.,08/May/13 10:42;buurmansven;Seconded. Please fix asap. This broke functionality in an important page for us and we would not like to have to revert to wicket 6.6 for production.,"08/May/13 11:08;mgrigorov;It will be improved in 6.8.0.
There is no need to revert to 6.6.0 for just this. There is explanation in WICKET-5093 how this can be handled.","08/May/13 12:39;mgrigorov;The new setting for AjaxRequestAttributes is added in master branch.
Please have a look and let me know whether it fixes your problems.
I'll test soon the attached quickstart with 6.x branch and backport the fix.","08/May/13 13:29;svenmeier;Hi Martin,

now allowDefault and stopPropagation are coupled once again, since you return false from the function:

				var handleStopPropagation = function (attributes) {
					var result = false;
					var evt = attributes.event;
					if (attributes.sp === ""stop"") {
						Wicket.Event.stop(evt);
					} else if (attributes.sp === ""stopImmediate"") {
						Wicket.Event.stop(evt, true);
					} else {
						result = true;
					}
					return result;
				};

Is that you intention?","08/May/13 13:31;mgrigorov;I just improved it.
Now they are separated.","08/May/13 13:50;svenmeier;Separated but still not a fix for WICKET-5093:

A delayed ajax call will call _handleEventCancelation() too late to have any effect on the browser's event processing :(.","08/May/13 13:57;mgrigorov;OK, I'll move back the W.E.stop() call in Wicket.Ajax.ajax(), without the ""return"" which messes with #preventDefault().
I don't have time now to properly test your quickstart but I think it is possible to solve the problem with the new setting.",08/May/13 14:30;svenmeier;Both preventDefault and stopPropagation have to be handled in Wicket.Ajax.ajax() before the call is possibly queued by the channel. Why not call _handleEventCancelation() from there?,"08/May/13 15:46;ivaynberg;on a side note please rename StopPropagation to Propagation {BUBBLE, STOP, STOP_IMMEDIATELY}. reading StopPropagation.NO makes my head assplode :)","13/May/13 12:43;svenmeier;The fix works fine for me, thanks!

A minor nitpick:
Even if an event is throttled, _handleEventCancelation() should be called nevertheless. Otherwise an event might trigger the default or bubble up because the throttled execution is delayed.

--- a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js
+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js
@@ -1797,13 +1797,12 @@
 							throttler.throttle(throttlingSettings.id, throttlingSettings.d,
 								Wicket.bind(function () {
 									call.ajax(attributes);
-									Wicket.Ajax._handleEventCancelation(attributes);
 								}, this));
 						}
 						else {
 							call.ajax(attributes);
-							Wicket.Ajax._handleEventCancelation(attributes);
 						}
+						Wicket.Ajax._handleEventCancelation(attributes);
 					});
 				});
 			},",,,,,,,,,,,,,,,,,,,,,,,
PopupSettings IE8 - dosen't work second time a link is clicked.,WICKET-5119,12639350,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,uheerfordt,uheerfordt,27/Mar/13 16:02,02/May/13 09:49,13/Mar/19 23:18,26/Apr/13 14:47,6.4.0,,,,,,,,1.5.11,6.8.0,,,wicket,,,0,,,,,,,,"Hi,

The popup functionality causes a script error in IE8, if the popup window is already open. As a result the link's default behaviour is executed instead - as ' return false; ' never is reached.

Class: org.apache.wicket.markup.html.link.PopupSettings

The problem exists in line: 188 //  if(w.blur) w.focus();

In IE8 blur and focus isen't defined - secound time a popup link is called and therefore the logic breaks.

//An alternative: (test if w.blur is defined)
script.append(""'); if( jQuery.isFunction( w.blur ) && w.blur ) { w.focus(); } "").append("" return false;"");

Br,
Uffe.",,900,900,,0%,900,900,,,,,,,,,,,,,,,,,,22/Apr/13 12:15;mgrigorov;pages-in-popup.tgz;https://issues.apache.org/jira/secure/attachment/12579827/pages-in-popup.tgz,13/Apr/13 10:01;uheerfordt;quickstart-onissue.zip;https://issues.apache.org/jira/secure/attachment/12578594/quickstart-onissue.zip,,,2.0,,,,,,,,,,,,,,,,,,,2013-04-08 21:48:11.087,,,no_permission,,,,,,,,,,,,319820,,,Fri Apr 26 14:47:18 UTC 2013,,,,,,0|i1j6lb:,320161,,,,,,,,"08/Apr/13 21:48;mgrigorov;I cannot reproduce the problem.
I don't have real IE 7/8 around so I use IE9 in IE 7/8 mode.
At http://www.wicket-library.com/wicket-examples-6.0.x/linkomatic/home I click on the link with text ""Click this link for a popup"" and then I click second time on the same link without closing the popup.
Are the steps correct ?

Could it be something related to your installation of IE 8 ? Can you try from a different machine too ? Also please try with different DOCTYPE, preferably HTML5.","09/Apr/13 20:13;hillj2;I have been running into this issue recently as well.  In my case, the link is bringing up a PDF document.  Perhaps the fact that it is not an HTML document, some of the object data is being discarded so that repeated calls to window.open, using the same window name, are failing.

If I override PopupSettings.getPopupJavaScript() with the following, I get an error message of ""Error: Member not found."":

return ""try {"" + super.getPopupJavaScript() + ""} catch (err) {alert(err);}"";

I have found this to be a very crude workaround, which also overrides PopupSettings.getPopupJavaScript():

return ""var win = window.open('about:blank', '"" + WINDOW_NAME + ""','width=""+ WIDTH +"",height="" + HEIGHT + ""'); win.close(); "" + super.getPopupJavaScript();

The big downside is the FIRST time you click the link, a temporary window pops up and quickly closes before your actual link content appears.  That is the main reason I included width and height above, so the window mostly appears similar to the final popup.  Also WINDOW_NAME must match whatever window name you're passing to PopupSettings.  The following link talks about this issue, and also links to another page where I got this crude workaround:

http://stackoverflow.com/questions/987572/opening-a-popup-in-ie-member-not-found

The solution provided at stackoverflow may be a better option, but could not be accomplished with a simple override of getPopupJavaScript().  The strange thing is this issue did not occur when I was still using wicket 1.4.  I know I had to make significant code changes when I converted to 1.5, but I have yet to see how any of those changes would suddenly cause this bug to occur.  I am still investigating this issue on my own, now that I am narrowing in on the cause.","09/Apr/13 20:30;hillj2;Also, this bug appears in IE10, so I would assume IE9 is not immune to it.","11/Apr/13 07:10;mgrigorov;Hi Joel,

Can you reproduce the problem at http://www.wicket-library.com/wicket-examples-6.0.x/linkomatic/home ?
What steps I should follow to be able to reproduce it ?","11/Apr/13 14:33;hillj2;I cannot reproduce it at linkomatic, but there also isn't a popup that brings up a PDF file.  I don't know what the original reporter's link is bringing up, but having a PDF popup seems to be integral to my issue (I have HTML popups that work fine).  For some reason the focus() method is not defined for the javascript window object in IE.  When the call to focus fails, since the URL is defined in the HREF attribute, IE navigates the main window to the PDF document.  However, since the error occurs after the call to window.open, the PDF document loads in existing popup as well.

If I had time, I would try and add a PDF popup to the linkomatic example.  Unfortunately I have to move on to a different task for now.  I don't know if or when I'll be able to swing back around to this problem and see if I can recreate it by modifying linkomatic.

For now I have to drop in a partial workaround in our app and move on.",11/Apr/13 14:35;mgrigorov;Please attach a quickstart demonstrating the problem and we will fix it for the next version of Wicket.,13/Apr/13 10:01;uheerfordt;Quickstart project that shows the problem in IE.,"13/Apr/13 10:10;uheerfordt;Hi,

My first report was maybe a bit vague so I have now added a Quickstart project that can recreate the issue.  The issue is only visible in Internet Explorer and I have been able to reproduce it in IE8,IE9 and IE10.

Steps to reproduce the problem:

1. Start the attached quickstart project
2. Click one first link on the default page. (popup shows nicely and has the focus) 
3. Now click on secound link without closing the popupwindow.  (script error occurs and content is shown in main window)

Script Error:  'Member not found' is thrown when focus() is called on the popup window.

Br,
Uffe","22/Apr/13 12:15;mgrigorov;Hi Uffe,

I was not able to reproduce the problem with your application because my IE9 was downloading the .pdf instead of showing it in a popup window.

Can you try with ""pages-in-popup.tgz"" ? 
It works fine for me. IE9 v.9.0.8 on Windows 7",22/Apr/13 12:27;mgrigorov;I'm able to reproduce the problem now.,"22/Apr/13 13:10;mgrigorov;The suggested solution:

    script.append(""'); if( jQuery.isFunction( w.blur ) && w.blur ) { w.focus(); } "").append("" return false;""); 

doesn't work for me. It fails with an error in the dev tools' console.

According to http://msdn.microsoft.com/en-us/library/ms536425%28VS.85%29.aspx :

    Windows Internet Explorer 8 and later. The focus method no longer brings child windows (such as those created with the open method) to the foreground. Child windows now request focus from the user, usually by flashing the title bar. To directly bring the window to the foreground, add script to the child window that calls the focus method of its window object.

So it seems there is no way to bring to the foreground a popup with a PDF content. If the content is HTML then you should use OnDomReadyHeaderItem.forScript(""self.focus()"").

Removing the problematic ""if (w.blur) w.focus()"" doesn't break the current behavior in Chrome browser, but breaks it in Firefox, i.e. the popup window is not focused after loading the new content - as in IE.
At the moment I don't have a better solution.","23/Apr/13 18:56;uheerfordt;Hi,

The first proposed solution wasen't very thought through by me -  I have afterwards attempted different solutions like doing an explict close() on the popup... attempting to to store the window in a global variable to reuse it... and doing a document write... to get IE to unload the plugin.  However none of the attempts fully worked,  I guess the two options are to either remove the focus logic or to supress the exception by adding try{}catch(ignore){} around the statement.. When testing in IE without the logic, it seems to auto focus the popup automaticly.  There dosen't seem to be a perfect fix for this atm, only a workaround.

Br,
Uffe","26/Apr/13 14:47;mgrigorov;I've tried many things and none of them made IE9 focusing the popup when the second link is clicked.
So I've try/catched the focusing code as you suggested.",,,,,,,,,,,,,,,,,,,,,,,
Wicket session id not up to date when container changes session id,WICKET-5103,12637364,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,svenmeier,svenmeier,16/Mar/13 07:45,30/Apr/13 18:18,13/Mar/19 23:18,30/Apr/13 12:20,6.6.0,,,,,,,,6.8.0,7.0.0-M1,,,wicket,,,1,,,,,,,,"When the web container changes the session id, Wicket session still holds previous session id and never updates.

The attached quickstart uses basic form authentication, so Jetty will change the session id after login.",,,,,,,,,,,,,,,,,WICKET-4512,,,,,,,,16/Mar/13 07:57;svenmeier;WICKET-5103.zip;https://issues.apache.org/jira/secure/attachment/12573999/WICKET-5103.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-30 13:35:32.444,,,no_permission,,,,,,,,,,,,317856,,,Tue Apr 30 18:18:32 UTC 2013,,,,,,0|i1iugv:,318197,,,,,,,,16/Mar/13 07:57;svenmeier;quickstart,20/Mar/13 15:56;svenmeier;The session id is now updated in #detach() as in Wicket 1.4.x,"30/Apr/13 07:30;svenmeier;I reverted the unreleased change for 1.5.x, since this issue is more complicated (see WICKET-5164).",30/Apr/13 12:15;svenmeier;PageStoreManager.SessionEntry caches sessionId too :(,"30/Apr/13 12:20;svenmeier;PageStoreManager now uses the same sessionId to store and get pages to/from the IPageStore.

Keeping SessionEntry#sessionId in-sync with the actual container session id will be tracked in WICKET-5164.",30/Apr/13 13:35;mgrigorov;I see only commit in master branch. This means it wont be included in 6.8.0. You have to port to wicket-6.x for 6.8.0.,30/Apr/13 18:18;svenmeier;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Positioning of autocomplete popup does not take into account borders,WICKET-5154,12644348,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,0xabadea,0xabadea,24/Apr/13 12:44,26/Apr/13 15:25,13/Mar/19 23:18,26/Apr/13 15:25,6.6.0,,,,,,,,6.8.0,,,,wicket-extensions,,,0,,,,,,,,"In wicket-autocomplete.js function getPosition() is used to compute the position of the input that the autocomplete is attached to. It uses the offsetTop and offsetLeft DOM properties, which does not take the borders into account. This causes the popup to be misplaced in all three browsers I have tested: IE9, Firefox 16 and Chrome 22.

A possible solution is to take the (non-standard) clientTop and clientLeft properties into account, too.",,,,,,,,,,,,,,,,,,,,,,,,,24/Apr/13 12:46;0xabadea;test.html;https://issues.apache.org/jira/secure/attachment/12580281/test.html,24/Apr/13 15:50;0xabadea;wicket-5154.diff;https://issues.apache.org/jira/secure/attachment/12580297/wicket-5154.diff,,,2.0,,,,,,,,,,,,,,,,,,,2013-04-24 12:52:14.057,,,no_permission,,,,,,,,,,,,324715,,,Fri Apr 26 15:25:12 UTC 2013,,,,,,0|i1k0sv:,325060,,,,,,,,"24/Apr/13 12:46;0xabadea;Attaching a HTML file that helps to reproduce the problem. Display in browser and, using Firebug or the Chrome Dev Tools, display the clientLeft and offsetLeft DOM properties of the td element that contains ""Test"".","24/Apr/13 12:47;0xabadea;I can provide a patch for the clientTop/clientLeft solution if wanted. Since this has the potential of breaking other users due to browser bugs, should there be a new setting for it in AutoCompleteSettings?","24/Apr/13 12:52;mgrigorov;Yes. A new setting will make it easier for applications in production to adapt.

By the way, you may want to check https://github.com/ivaynberg/wicket-select2. More and more people use this component.",24/Apr/13 15:50;0xabadea;Proposed fix,"24/Apr/13 15:59;0xabadea;Thanks for the mention of select2. It looks interesting (and visually much more pleasant), but I'll have to have a closer look at it.

The attached patch introduces a new flag to AutoCompleteSettings, called ignoreBordersWhenPositioning. For backward compatibility it is set to true. When set to false, it includes clientLeft and clientTop in position computations. This computes the position of the input field correctly in IE9+, Firefox 16 and Chrome 22. In IE8 (and, presumably, earlier) it does not: the offsetLeft and offsetTop properties of the input field seem to already contain the borders of the input field's parent element.

What's the preferred Wicket approach in these situations? Should I try to detect the browser and avoid including the borders even though the user asked to include them? Or should we expect the user to set the ignoreBordersWhenPositioning flag according to the browser vendor and version? I will note that the former might still not yield the expected results, because I don't fully understand the IE bug.
","26/Apr/13 15:25;mgrigorov;Thanks for the patch, Andrei!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URL query parameter values containing equals sign get cut off,WICKET-5157,12644676,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,martin knopf,martin knopf,25/Apr/13 20:21,26/Apr/13 12:57,13/Mar/19 23:18,26/Apr/13 12:57,6.7.0,,,,,,,,1.5.11,6.8.0,,,,,,0,,,,,,,,When calling a page with a query parameter like 'param1=val1=val2' the value of 'param1' obtained from PageParameters will be 'val1'. Everything after the equals sign inside the parameter value gets cut off.,,,,,,,,,,,,,,,,,,,,,,,,,25/Apr/13 20:43;martin knopf;fix-WICKET-5157.patch;https://issues.apache.org/jira/secure/attachment/12580581/fix-WICKET-5157.patch,25/Apr/13 20:26;martin knopf;urlwithequalssign.zip;https://issues.apache.org/jira/secure/attachment/12580576/urlwithequalssign.zip,,,2.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,325041,,,Thu Apr 25 20:43:32 UTC 2013,,,,,,0|i1k2tb:,325386,,,,,,,,"25/Apr/13 20:26;martin knopf;Quickstart: start the application, open localhost:8080/urlwithequalssign/?param1=val1=val2",25/Apr/13 20:43;martin knopf;added a fix for this,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WicketTester MockHttpRequest.getCookies very slow / OutOfMemory,WICKET-5147,12642888,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,robau,robau,17/Apr/13 10:15,26/Apr/13 09:03,13/Mar/19 23:18,26/Apr/13 09:03,6.7.0,,,,,,,,6.8.0,,,,,,,0,,,,,,,,"
We have an extensive set of WicketTester tests. Recently, the wicket RELEASE in the maven repository changed to 6.7.0. After the new version, our tests got very slow.

When profiling, I discovered that the MockHttpRequest.getCookies() was taking up a lot of time. Also, tests failed because of OutOfMemory exceptions. My guess is that somehow a lot of objects are created at such speeds that the GC cannot clean them

I will investigate further, but switching back to 6.6.0 solved the issue. 

[Edit]
The tests are run with TestNG and using 'mvn test'",,,,,,,,,,,,,,,,,WICKET-4989,,,,,,,,17/Apr/13 12:21;robau;testcookies.zip;https://issues.apache.org/jira/secure/attachment/12579119/testcookies.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-17 11:16:20.221,,,no_permission,,,,,,,,,,,,323301,,,Fri Apr 26 09:03:18 UTC 2013,,,,,,0|i1js33:,323646,,,,,,,,"17/Apr/13 11:07;robau;During debugging a test, I see the number of Cookies is doubled a lot of times. This would explain the huge increase in memory. ",17/Apr/13 11:08;robau;The Cookies all contain the same data.,17/Apr/13 11:16;mgrigorov;Please attach a test case that shows the problematic behavior.,"17/Apr/13 11:19;robau;I will try to make one. It is a bit of work, as I need an AuthenticaedWebsession and (a lot of) ajax-calls","17/Apr/13 12:22;robau;The test 'changeLabelTwoTimes' test will fail. The number of cookies in the request will be 16 after the first call (too much already) and is 64 after the second call. 
I would expect them to be 1.

","17/Apr/13 20:15;michael.mosmann;think,i found it..
","18/Apr/13 06:03;michael.mosmann;First Bugfix in https://github.com/apache/wicket/pull/35 ... but there should be a lot more tests.. so do NOT pull this, i will make an other refactoring with more test, hopefully without this reformating stuff..","22/Apr/13 22:43;michael.mosmann;I did a second try:

https://github.com/apache/wicket/pull/36

This way i fixed some bugs, wrote some tests, fixed the docu, fixed this reformating problem, and so on.
","24/Apr/13 07:54;mgrigorov;Rob,

Please check http://markmail.org/thread/an4g2mx5bpemc7nw
Do you destroy WicketTester after your tests ?","24/Apr/13 08:47;robau;I do not destroy the WicketTester. But I also do not reuse the WicketTester between tests. My UI tests use this piece of code:

        @BeforeMethod
	public final void setupTest() throws Exception
	{
		LOG.info( ""Running test in class:"" + this.getClass() );

		this.wicketTester = new WicketTester( this.wicketApplication );
		this.login();
	}

Besides that, I see the number of cookies increase expontentially in my testcase in the attached zip.","24/Apr/13 09:10;mgrigorov;We will fix the issue for Wicket 6.8.0. I'm just trying to tell you that you hit OOM because your tests leak resources.
Cookie class is quite small. You have to produce a lot of instances to fill the memory. I doubt that you create so many cookies in a single test to run out of memory. It is just that resources from a previous usage of WicketTester are not recycled during the whole run of the test suite.

I see you reuse the application instance for the different instances of WicketTester. This is already a candidate for memory leaks.
I guess you do this to avoid costly initializations, like initializing Spring for example.","24/Apr/13 09:35;robau;Hi Martin, 

Thanks for the resolution. And you are right that I'm injecting the WicketAppliction using Spring :)

BTW. The problem is not that the Cookie itself is big, but rather that going through some ajax calls within one test causes the number of cookies to double and double and double; so basically having one cookie will cause OOM after a slightly bigger test, (for example 20 ajaxcalls will cause at least 2^20 (~ 1 million) cookies.). 

Some context: In our application users can set filters in a few mouseclicks, but to make sure they have to do as little as possible, I want to remove all the options that are not applicable after each choice. Typically, the user will select 2 to 4 filters and some operators, so 'normal' behaviour would be around 4 to 8 ajax calls. I want to fuzztest this component. The number of filters and operations that I use in the fuzztest go up to 10, causing the OOM

","25/Apr/13 23:36;michael.mosmann;Ok. 
- I have fixed it. 
- I have extended the test to check if cookies are visible in tester.getRequest(). 
- I did check the quickstart. 
- I have updated comments
Everything is fine.
",25/Apr/13 23:43;michael.mosmann;Someone should have a look at https://github.com/apache/wicket/pull/36 for code review...,"26/Apr/13 09:03;mgrigorov;Thank you for the help, Michael!",,,,,,,,,,,,,,,,,,,,,
do not post an Atmosphere event if the filtered subscription set is empty,WICKET-5145,12642785,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,papegaaij,martin geisse,martin geisse,16/Apr/13 18:27,24/Apr/13 09:21,13/Mar/19 23:18,17/Apr/13 05:34,6.6.0,,,,,,,,6.8.0,,,,wicket-atmosphere,,,0,,,,,,,,"wicket-atmosphere will post an event for an AtmosphereResource even if, after applying filters, no subscription exists for that resource. This includes resources which listen to events of different type (the second parameter of the subscribed method) since that is handled by filters too.",,1800,1800,,0%,1800,1800,,,,,,,,,,,,,,,,,,16/Apr/13 18:33;martin geisse;2;https://issues.apache.org/jira/secure/attachment/12578980/2,16/Apr/13 18:34;martin geisse;3;https://issues.apache.org/jira/secure/attachment/12578981/3,,,2.0,,,,,,,,,,,,,,,,,,,2013-04-17 05:34:49.527,,,no_permission,,,,,,,,,,,,323199,,,Wed Apr 17 14:48:21 UTC 2013,,,,,,0|i1jrgf:,323544,,,,,,,,16/Apr/13 18:33;martin geisse;new source file,"16/Apr/13 18:35;martin geisse;file ""2"" is the new source code, file ""3"" is a diff","17/Apr/13 05:34;papegaaij;Thanks for the patch, it's applied. Next time, please generate a unified patch with diff -u or git diff. Unified patches are easier to read and apply.","17/Apr/13 14:48;martin geisse;Alright, I'll keep that in mind.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generating invalid JavaScript for ajax update,WICKET-5142,12642210,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,amukas,amukas,12/Apr/13 08:45,22/Apr/13 11:49,13/Mar/19 23:18,22/Apr/13 11:49,,,,,,,,,6.8.0,,,,wicket,,,0,,,,,,,,"Suppose I have BlinkBehaviour 

public static class BlinkBehaviour extends Behavior { 
        @Override 
        public void renderHead(Component component, IHeaderResponse response) { 
            AjaxRequestTarget target = component.getRequestCycle().find(AjaxRequestTarget.class); 
            if (target != null) { 
                target.prependJavaScript(""notify|jQuery('#"" + component.getMarkupId() + ""').fadeOut(400, notify);""); 
                target.appendJavaScript(""jQuery('#""+component.getMarkupId()+""').fadeIn(400);""); 
            } 
        } 
    } 

If I add it twice to a control and update the control via ajax 6.7.0-SNAPSHOT will yield error: 

ERROR: Wicket.Ajax.Call.processEvaluation: Exception evaluating javascript: SyntaxError: Unexpected token ), text: f = function(notify) {jQuery('#version2').fadeOut(400, notify);})();(function(){notify|jQuery('#version2').fadeOut(400, notify);};
",,,,,,,,,,,,,,,,,,,,,,,,,12/Apr/13 08:45;amukas;myproject.zip;https://issues.apache.org/jira/secure/attachment/12578400/myproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-12 10:26:10.177,,,no_permission,,,,,,,,,,,,322624,,,Mon Apr 22 11:49:22 UTC 2013,,,,,,0|i1jnwv:,322969,,,,,,,,"12/Apr/13 10:26;mgrigorov;This is more trickier than it seems.
The problem at the moment is the Regex that we use to detect that a manual execution of 'notify' is needed. But the deeper problem is that the user code has two executions of 'notify', i.e. the first execution will release FunctionsExecutor to proceed with the following steps.

The solution that I see is to split the combined JavaScript into parts again. For example:

combined: (function(){notify|jQuery('#version4').fadeOut(400, notify);})();(function(){notify|jQuery('#version4').fadeOut(400, notify);})();
to:
1) (function(){notify|jQuery('#version4').fadeOut(400, notify);})();
2) (function(){notify|jQuery('#version4').fadeOut(400, notify);})();

and then execute them one by one, so they wait for each other.",12/Apr/13 10:36;amukas;Looks good,"12/Apr/13 11:27;mgrigorov;I'm not quite sure.
Splitting will lead to bad performance, especially on IE.
The best is to chain the JS snippets and call Wicket's notify() (the callback passed by Wicket) at the end.
For example the perfect JS should look like:

(function(){notify|jQuery('#version4').fadeOut(400, function(){
   jQuery('#version4').fadeOut(400, notify);
})})();

But it will be hard to compose this at the client side.",22/Apr/13 11:49;mgrigorov;Improved the code by splitting the text with all-functions-in-one in <evaluate> element to separate functions which are executed one by one and each of them can execute 'notify' manually.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PageRequestHandlerTracker doesn't track resolves of handlers caused by Exception ,WICKET-5149,12643574,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mgrigorov,mgrigorov,19/Apr/13 11:55,19/Apr/13 12:03,13/Mar/19 23:18,19/Apr/13 11:56,6.7.0,,,,,,,,1.5.11,6.8.0,,,wicket,,,0,,,,,,,,PageRequestHandlerTracker should implement #onExceptionRequestHandlerResolved(),,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,323941,,,2013-04-19 11:55:21.0,,,,,,0|i1jw1b:,324286,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Application not destroyed if WicketFilter#init() fails,WICKET-5146,12642797,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,bht@actrix.gen.nz,bht@actrix.gen.nz,16/Apr/13 19:36,19/Apr/13 10:00,13/Mar/19 23:18,19/Apr/13 10:00,1.5.10,6.7.0,,,,,,,1.5.11,6.8.0,,,,,,0,,,,,,,,"WicketFilter calls Application#initApplication() which calls Application#init().

In case of Exception thrown in the application's init() method, there is no cleanup in WicketFilter's finally block.

The result of this is, in case where Wicket is in the application server's libraries (not deployed with the war file), that the application cannot be re-deployed withhout re-starting the application server.

That is because Application#setName() crashes with IllegalStateException(""Application name can only be set once."").

In Application, private static final Map<String, Application> applicationKeyToApplication holds a reference to the crashed instance after the application is undeployed.
",,,,,,,,,,,,,,,,,,,,,,,,,18/Apr/13 22:13;cedricgatay;fix-WICKET-5146-2.patch;https://issues.apache.org/jira/secure/attachment/12579439/fix-WICKET-5146-2.patch,18/Apr/13 19:39;bht@actrix.gen.nz;testcase.zip;https://issues.apache.org/jira/secure/attachment/12579400/testcase.zip,,,2.0,,,,,,,,,,,,,,,,,,,2013-04-18 17:23:28.913,,,no_permission,,,,,,,,,,,,323211,,,Fri Apr 19 10:00:06 UTC 2013,,,,,,0|i1jrj3:,323556,,,,,,,,18/Apr/13 17:23;cedricgatay;Could you provide a Quickstart regarding this issue please ?,"18/Apr/13 17:51;cedricgatay;You'll find a patch that should work around the issue you described. However, without a quickstart, it would be difficult to check if it is ok. Please test it and tell me if it works for you.",18/Apr/13 19:39;bht@actrix.gen.nz;Quick start.,"18/Apr/13 19:53;bht@actrix.gen.nz;I have attached the quickstart as requested. But to reproduce the problem you have to deploy the app to the server in a way that the libraries are not deployed with it. You can do this by adding an attribute to the dependencies <scope>provided</scope>

You could try this on an application server e.g. GlassFish that installs itself with NetBeans as follows:

- Install the app server
- copy wicket libraries to the domain's lib folder
- Run the app with the exception in init()
- Take out the exception, recompile and run again

In the error scenario, private static final Map<String, Application> applicationKeyToApplication is not cleared. I don't know how the patch addresses this.",18/Apr/13 19:57;cedricgatay;Thanks. I'll have a look at it. I think the way I fixed it the flag in the hash map will not be cleared but overwritten by the second deploy. ,18/Apr/13 20:21;bht@actrix.gen.nz;The hash map cannot be overwritten because it is final. I think you need to call Application#internalDestroy(),"18/Apr/13 22:13;cedricgatay;After testing against your test application, it appears that one need to call internalDestroy() as you stated in order to properly unregister the application from the static application hashmap.

The attached fix-WICKET-5146-2.patch file include this update wrapped inside another try / catch block.","19/Apr/13 10:00;svenmeier;I changed the patch to call #destroy(), thus safely destroying the application factory too.

Thanks Cedric.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception while rendering absolute URL with UrlResourceReference,WICKET-5141,12642184,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,amukas,amukas,12/Apr/13 05:19,12/Apr/13 07:44,13/Mar/19 23:18,12/Apr/13 07:44,6.6.0,,,,,,,,6.7.0,,,,wicket,,,0,,,,,,,,"While rendering absolute url UrlRenderer calls renderFullUrl on line 112 which causes error.
",,,,,,,,,,,,,,,,,,,,,,,,,12/Apr/13 05:20;amukas;myproject.zip;https://issues.apache.org/jira/secure/attachment/12578362/myproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-12 07:44:33.017,,,no_permission,,,,,,,,,,,,322598,,,Fri Apr 12 07:44:33 UTC 2013,,,,,,0|i1jnr3:,322943,,,,,,,,12/Apr/13 05:20;amukas;quick start,12/Apr/13 07:44;mgrigorov;Thanks for testing with -SNAPSHOT !,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problems with cookies disabled when using 301/302 and also 303 (even with cookies),WICKET-5131,12640774,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,olze84,olze84,04/Apr/13 14:22,09/Apr/13 07:35,13/Mar/19 23:18,08/Apr/13 11:06,6.6.0,,,,,,,,1.5.11,6.7.0,,,,,,0,,,,,,,,"As mentioned in the mailing list by Martin, i open this as a bug...

Its not possible to use 303 as redirect (SC_SEE_OTHER) because thats not supported, only 302 and 301 are supported but this is defined in RFC HTTP 1.1 from 1997. 

301 will add the Location header - which works as expected when disabling cookies. But a 302 (which is what i prefer) will redirect to the same page because the Location header is missing. When i enable cookies, its working.

Example can be found here: https://github.com/olze/WicketRedirect",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-08 11:06:52.149,,,no_permission,,,,,,,,,,,,321233,,,Tue Apr 09 07:35:26 UTC 2013,,,,,,0|i1jfc7:,321578,,,,,,,,"08/Apr/13 11:06;mgrigorov;Added support for SC_SEE_OTHER.
Please test it with 6.7.0-SNAPSHOT before next Friday if you can.","09/Apr/13 07:31;olze84;Just tested it. SC_SEE_OTHER works like a charm (with and without cookies)
SC_MOVED_PERMANENTLY also works like a charm with and without cookies.
SC_MOVED_TEMPORARLY does not work when cookies are disabled.

Thanks! Is there some release planning when 6.7.0 comes out? Jira said 15.3.",09/Apr/13 07:35;mgrigorov;It is planned for next Friday (12.04).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxSelfUpdatingTimerBehavior in hidden component in ModalWindow causes Ajax Response Error,WICKET-5104,12637461,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,mscoon,mscoon,17/Mar/13 22:00,08/Apr/13 21:11,13/Mar/19 23:18,08/Apr/13 21:08,6.3.0,6.6.0,,,,,,,6.7.0,,,,,,,0,,,,,,,,"I have a ModalWindow which shows a panel with a hidden label with an AjaxSelfUpdatingTimerBehavior. When the modal window is shown, the following error occurs in the Wicket Ajax Debug console:

ERROR: Wicket.Ajax.Call.processEvaluation: Exception evaluating javascript: TypeError: Cannot read property 'label5' of undefined, text: (function(){clearTimeout(Wicket.TimerHandles['label5']); delete Wicket.TimerHandles['label5'];})();",,,,,,,,,,,,,,,,,,,,,,,,,17/Mar/13 22:05;mscoon;5104.zip;https://issues.apache.org/jira/secure/attachment/12574087/5104.zip,24/Mar/13 13:51;cedricgatay;fix-WICKET-5104.patch;https://issues.apache.org/jira/secure/attachment/12575227/fix-WICKET-5104.patch,,,2.0,,,,,,,,,,,,,,,,,,,2013-03-24 13:51:11.921,,,no_permission,,,,,,,,,,,,317952,,,Mon Apr 08 21:11:56 UTC 2013,,,,,,0|i1iv27:,318293,,,,,,,,17/Mar/13 22:05;mscoon;Quickstart to reproduce the problem - just click on the link on the home page to open the modal window and cause the error to appear.,"24/Mar/13 13:51;cedricgatay;You'll find the patch attached, the problem still exists with Wicket 6.7.0-SNAPSHOT.

The problem was we were not checking if the head had already been rendered before pushing JavaScript asking to stop the behavior.","08/Apr/13 12:56;mgrigorov;I cannot reproduce the problem with the attached quickstart.
The Label is set invisible in the panel constructor thus the Ajax timer behavior is disabled and its #renderHead() is not called at all, so it doesn't contribute the JS which should lead to this error.

What do I miss ?","08/Apr/13 12:59;cedricgatay;For me it happened only the second time the page was rendered. The first display everything was fine, after a second display it was all messed up with the JavaScript error in the Wicket Ajax Debug window","08/Apr/13 13:10;mgrigorov;I just tried again.
I've opened the modal several times without problem.
I removed ?pageId from the url to create a new page instance and tried again and there is no error.","08/Apr/13 13:19;cedricgatay;My brain hurts me this monday ;) It is not the second page load but the second click on the link to open the modal. I just checked it with the latest 6.7.0-SNAPSHOT.

Launched quickstart, clicked open, closed the modal, clicked open another time > bam Wicket Ajax Debug fever is on.","08/Apr/13 13:23;mgrigorov;No error here :-/
I've put breakpoints both at org.apache.wicket.ajax.AbstractAjaxTimerBehavior#stop() and org.apache.wicket.ajax.AbstractAjaxTimerBehavior#renderHead() and they are never called no matter how many times I open and the close the modal.","08/Apr/13 13:24;mgrigorov;And yes, I also use master branch.","08/Apr/13 13:39;cedricgatay;Hum, I just built the master branch (mvn clean install -Dmaven.test.skip=true) locally, then ran mvn clean jetty:run and could reproduce it. I am using Chrome 28.0.1464.0 dev (the built war is available at the following URL http://cl.ly/1c0C30212e3j). The steps to reproduce are the one I detailed previously.","08/Apr/13 16:08;svenmeier;I can reproduce this issue:

On second click the first MessageBoxPanel's behavior tries to stop itself (because its owning component is removed). Since the modal window is not visible, it's markup is not present on the currently rendered page.","08/Apr/13 17:40;cedricgatay;The attached patch fixes this issue, as far as I can tell, a review could be necessary to do it the right way though.",08/Apr/13 20:26;svenmeier;I would think a test on isVisibleInHierarchy() should suffice.,"08/Apr/13 20:38;mgrigorov;Sven: can you reproduce the issue ?
org.apache.wicket.Component#renderHead(HtmlHeaderContainer) checks whether the component is visible(InHierarchy) and only then calls behavior#renderHead().
As I said earlier neither org.apache.wicket.ajax.AbstractAjaxTimerBehavior#renderHead() nor org.apache.wicket.ajax.AbstractAjaxTimerBehavior#stop() is called here.
Please put breakpoints in these methods and attach/paste the stacktraces.","08/Apr/13 20:55;svenmeier;Martin: The issue can easily be reproduced with Cedric instructions:

Thread [qtp1028384965-18] (Suspended (breakpoint at line 201 in AbstractAjaxTimerBehavior))	
	AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).onRemove(Component) line: 201	
	Behaviors.onRemove(Component) line: 235	
	MessageBoxPanel$1(Component).internalOnRemove() line: 1110	
	MessageBoxPanel(MarkupContainer).removeChildren() line: 1590	
	MessageBoxPanel(Component).internalOnRemove() line: 1111	
	ModalWindow(MarkupContainer).removedComponent(Component) line: 1343	
	ModalWindow(MarkupContainer).replace(Component) line: 740	
	ModalWindow.setContent(Component) line: 944	
	HomePage$1.onClick(AjaxRequestTarget) line: 26	
	...

As you can see this has nothing to do with #renderHead().",08/Apr/13 21:00;mgrigorov;Thanks!,"08/Apr/13 21:08;mgrigorov;Thanks, Cedric!",08/Apr/13 21:11;cedricgatay;I'm glad it is finally fixed. Looking forward to help fixing more ;-) ,,,,,,,,,,,,,,,,,,,
Wicket does not correctly handle http OPTIONS requests,WICKET-5138,12641405,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,ivaynberg,ivaynberg,ivaynberg,08/Apr/13 17:05,08/Apr/13 17:35,13/Mar/19 23:18,08/Apr/13 17:35,6.6.0,,,,,,,,6.7.0,,,,,,,0,,,,,,,,"currently these requests cause regular processing (page rendering), when in fact they should have a special response.

rendering the page in OPTIONS causes renderCount to be incremented and this messes with the subsequent request to the same url via a GET or POST",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,321821,,,2013-04-08 17:05:46.0,,,,,,0|i1jiyf:,322166,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Url#toString(StringMode.FULL) throws exception if a segment contains two dots,WICKET-5114,12638857,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,mgrigorov,pparson,pparson,25/Mar/13 11:19,08/Apr/13 10:01,13/Mar/19 23:18,08/Apr/13 10:01,6.5.0,,,,,,,,1.5.11,6.7.0,,,wicket,,,0,,,,,,,,"When invoking toString(StringMode.FULL) for a URL like
/mountPoint/whatever.../
an IllegalStateException is thrown with message: Cannot render this url in FULL mode because it has a `..` segment: /mountPoint/whatever.../

The method does not actually check for `..` segments but rather checks whether path.contains("".."")

",,,,,,,,,,,,,,,,,,,,,,,,,07/Apr/13 13:08;cedricgatay;fix-WICKET-5114.patch;https://issues.apache.org/jira/secure/attachment/12577449/fix-WICKET-5114.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-07 13:08:37.153,,,no_permission,,,,,,,,,,,,319327,,,Mon Apr 08 10:01:55 UTC 2013,,,,,,0|i1j3jr:,319668,,,,,,,,07/Apr/13 13:08;cedricgatay;Added two tests regarding this issue and corrected the bogus part checking if the path was containing two dots with a segment check.,"08/Apr/13 10:01;mgrigorov;Thanks, Cedric!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Component.continueToOriginalDestination() can redirect to ./.,WICKET-5123,12639636,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,mdietze,mdietze,28/Mar/13 17:40,28/Mar/13 20:40,13/Mar/19 23:18,28/Mar/13 20:40,1.5.10,6.6.0,,,,,,,1.5.11,6.7.0,,,wicket,,,0,,,,,,,,"Following scenario:

Home page redirects to login page via RestartResponseException if no user is logged in.
The user logs in, and is led back to the originally called page via continueToOriginalDestination().

If the original page was the home page, Wicket's UrlRenderer produces a target url of ./. here (which IE browsers can't handle).",,14400,14400,,0%,14400,14400,,,,,,,,,,,,,,,,,,28/Mar/13 17:42;mdietze;urlrenderer.tar.gz;https://issues.apache.org/jira/secure/attachment/12575899/urlrenderer.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-28 20:40:36.353,,,no_permission,,,,,,,,,,,,320105,,,Thu Mar 28 20:40:36 UTC 2013,,,,,,0|i1j8cn:,320446,,,,,,,,28/Mar/13 17:42;mdietze;Browse to 'http://localhost'. You will be redirected to the LoginPage on which the target URL is printed as it would be generated inside of continueToOriginalDestination().,"28/Mar/13 20:40;svenmeier;url is now rendered as ""."" instead of ""./.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parantheses problem with UrlValidator,WICKET-5112,12638798,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,tneto,tneto,25/Mar/13 08:31,27/Mar/13 12:53,13/Mar/19 23:18,26/Mar/13 22:09,1.5.10,,,,,,,,1.5.11,6.7.0,,,wicket,,,0,UrlValidator,,,,,,,"One of our users got an error message when trying to add a new URL:

'http://en.wikipedia.org/wiki/Genus_(mathematics)' is not a valid URL

I just created very quickly a junit test and it fails:

String[] schemes = {""http""};
UrlValidator urlValidator = new UrlValidator(schemes);
assertTrue(urlValidator.isValid(""http://en.wikipedia.org/wiki/Genus_(mathematics)""));",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-26 22:09:45.65,,,no_permission,,,,,,,,,,,,319273,,,Wed Mar 27 12:53:02 UTC 2013,,,,,,0|i1j37r:,319614,,,,,,,,26/Mar/13 22:09;svenmeier;parenthesis are valid in url path,27/Mar/13 12:40;tneto;How can I get wicket 1.5.11 jar files?,"27/Mar/13 12:53;mgrigorov;You will have to wait for the release.
1.5.10 was recently released and there are just 11 fixes for 1.5.11 so far. I guess it will be released after one month.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TabbedPanel.setSelectedTab() does not behave as specified in JavaDoc,WICKET-5116,12639066,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,svenmeier,sclassen,sclassen,26/Mar/13 09:44,26/Mar/13 21:55,13/Mar/19 23:18,26/Mar/13 21:55,6.6.0,,,,,,,,6.7.0,,,,,,,0,,,,,,,,"The JavaDoc of TabbedPanel.setSelectedTab() states that -1 is a valid argument. Actually passing -1 will throw a IndexOutOfBoundsException

{code}
	/**
	 * sets the selected tab
	 * 
	 * @param index
	 *            index of the tab to select
	 * @return this for chaining
	 * @throws IndexOutOfBoundsException
	 *             if index is not {@code -1} or in the range of available tabs
	 */
	public TabbedPanel<T> setSelectedTab(final int index)
	{
		if ((index < 0) || (index >= tabs.size()))
		{
			throw new IndexOutOfBoundsException();
		}

		setDefaultModelObject(index);

		// force the tab's component to be aquired again if already the current tab
		currentTab = -1;
		setCurrentTab(index);

		return this;
	}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-26 21:55:46.306,,,no_permission,,,,,,,,,,,,319536,,,Tue Mar 26 21:55:46 UTC 2013,,,,,,0|i1j4u7:,319877,,,,,,,,26/Mar/13 21:55;svenmeier;corrected the javadoc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket ignores allowDefault:false attribute in multipart ajax requests,WICKET-5117,12639189,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,ivaynberg,ivaynberg,ivaynberg,26/Mar/13 21:07,26/Mar/13 21:23,13/Mar/19 23:18,26/Mar/13 21:23,6.6.0,,,,,,,,6.7.0,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,319659,,,2013-03-26 21:07:51.0,,,,,,0|i1j5lj:,320000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wicket-bean-validation: Bean validation PropertyValidator only works with direct field access,WICKET-5102,12637217,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Major,Fixed,ivaynberg,pekka,pekka,15/Mar/13 16:01,20/Mar/13 01:49,13/Mar/19 23:18,20/Mar/13 01:49,6.6.0,,,,,,,,6.7.0,,,,wicket,,,0,,,,,,,,"There's a substring indexing bug in the wicket-bean-validation module in org.apache.wicket.bean.validation.DefaultPropertyResolver that causes it to only work with direct field access and fail when field is missing and getter method should be used.

The problem is on this line:

    String name = getter.getName().substring(3, 1).toLowerCase() + getter.getName().substring(4);

Which should be:

    String name = getter.getName().substring(3, 4).toLowerCase() + getter.getName().substring(4);

(or simply a single character access)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,317709,,,2013-03-15 16:01:58.0,,,,,,0|i1itk7:,318050,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IRequestCycleListener not notified of all executed handlers,WICKET-6129,12952463,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,22/Mar/16 14:53,18/Feb/19 18:45,13/Mar/19 23:18,24/Apr/16 18:42,8.0.0-M1,,,,,,,,8.0.0-M1,,,,wicket,,,0,,,,,,,,"IRequestCycleListener#onRequestHandlerExecuted() is not called for all request handlers:
- RenderPageRequestHandler, when it is scheduled by ListenerInterfaceRequestHandler
- any handler replacing a handler via a RestartResponseException (the original handler is reported as being executed instead)

RequestHandlerStack#execute(IRequestHandler) recursively calls itself for any scheduled or replacement handler, bypassing notification of any listeners in the requestCycle.",,,,,,,,,,,,,,,,WICKET-6637,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-03-23 09:46:59.603,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Apr 24 18:42:55 UTC 2016,,,,,,0|i2v13r:,9223372036854775807,,,,,,,,"23/Mar/16 09:46;jira-bot;Commit fa33fbb9917e093ba712c9c339c258b4fb4ff43d in wicket's branch refs/heads/WICKET-6129-scheduled-handler-notification from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fa33fbb ]

WICKET-6129 let requestcycle execute scheduled and replaced handlers
","23/Mar/16 09:51;svenmeier;On branch WICKET-6129-scheduled-handler-notification you can take a look at my proposed fix:
- RequestCycle executes all handlers
- RequestHandlerStack passes replacements handlers back to RequestCycle via exception
- scheduled handlers are passed back to RequestCycle via return

RequestHandlerStackTest is failing currently, I'll have to check what this test will do in the future.","04/Apr/16 12:02;jira-bot;Commit 39c0ba604ed8feba17203eef69f5658388b7a967 in wicket's branch refs/heads/WICKET-6129-scheduled-handler-notification from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=39c0ba6 ]

WICKET-6129 moved test from RequestHandlerStackTest to RequestCycleListenerTest
","07/Apr/16 09:37;jira-bot;Commit 39da7f9d8671b49727262cf62696d8703f9dbe8f in wicket's branch refs/heads/WICKET-6129-scheduled-handler-notification from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=39da7f9 ]

WICKET-6129 further simplification: catch ReplaceHandlerException in RequestCycle only
","10/Apr/16 14:18;jira-bot;Commit 548d93539e7af0108b8411577c90a81250e5c7b8 in wicket's branch refs/heads/WICKET-6129-scheduled-handler-notification from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=548d935 ]

WICKET-6129 handlers were never executed nested actually, so no need to keep a stack of handlers
","10/Apr/16 14:18;jira-bot;Commit 794bc991e0322f3354ab1ce1d3bb3dc44d006b25 in wicket's branch refs/heads/WICKET-6129-scheduled-handler-notification from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=794bc99 ]

WICKET-6129 use execute() for exception execution too
","10/Apr/16 14:18;jira-bot;Commit 2c9f50cc640719befef6fe683b7b99454e598a6e in wicket's branch refs/heads/WICKET-6129-scheduled-handler-notification from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2c9f50c ]

WICKET-6129 ordered methods to follow invocation order
","10/Apr/16 14:18;jira-bot;Commit f026d08b6ee7875c223a1cc9fda35bea70192c57 in wicket's branch refs/heads/WICKET-6129-scheduled-handler-notification from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f026d08 ]

WICKET-6129 reordered if-statements
","10/Apr/16 14:18;jira-bot;Commit 4ba83a5b2b434577a778d91f07b7d4617de53421 in wicket's branch refs/heads/WICKET-6129-scheduled-handler-notification from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4ba83a5 ]

WICKET-6129 move duplicated code into #executeExceptionRequestHandler
","10/Apr/16 14:18;jira-bot;Commit 03ea3af26d1fa7dfe442f257fd18cbdef8890ba9 in wicket's branch refs/heads/WICKET-6129-scheduled-handler-notification from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=03ea3af ]

WICKET-6129 listeners are notified of all executed handlers now, so it is sufficient to listen for #onRequestHandlerResolved() only
","12/Apr/16 10:25;jira-bot;Commit 95c06fb984d0bd039523f9049b793cf480ae013e in wicket's branch refs/heads/WICKET-6129-scheduled-handler-notification from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=95c06fb ]

WICKET-6129 RequestHandlerStack is not a stack, thus it is better be named RequestHandlerExecutor
","16/Apr/16 20:36;jira-bot;Commit e1d6ba4258fb0340a53a65636fe3fd1789085e1d in wicket's branch refs/heads/WICKET-6129-scheduled-handler-notification from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e1d6ba4 ]

WICKET-6129 javadoc and deprecated: removeAll is removeScheduled now
","22/Apr/16 13:09;jira-bot;Commit 138ccca3023a5c01372cbe487f9be22d884b4461 in wicket's branch refs/heads/WICKET-6129-scheduled-handler-notification from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=138ccca ]

WICKET-6129 javadoc; cleanup and  corrected spelling
","24/Apr/16 18:38;jira-bot;Commit e02bdd8e7111ccfdce097a2841d6b61b64c0e7b9 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e02bdd8 ]

WICKET-6129 further simplification: catch ReplaceHandlerException in RequestCycle only
","24/Apr/16 18:38;jira-bot;Commit 88db7274135b9ea293291936843e0b0e5473cffa in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=88db727 ]

WICKET-6129 handlers were never executed nested actually, so no need to keep a stack of handlers
","24/Apr/16 18:38;jira-bot;Commit 8c1fb9b33c607395e3328ca967450a252ad3ca52 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8c1fb9b ]

WICKET-6129 use execute() for exception execution too
","24/Apr/16 18:38;jira-bot;Commit 9c0c37e6e25344436c413bcc4900a0c4eafaa907 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9c0c37e ]

WICKET-6129 ordered methods to follow invocation order
","24/Apr/16 18:38;jira-bot;Commit 80562f9b40c969ea2835a379d1200546f499441a in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=80562f9 ]

WICKET-6129 reordered if-statements
","24/Apr/16 18:38;jira-bot;Commit 71f220266550eb5b6514400e3daa34eed9607a54 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=71f2202 ]

WICKET-6129 move duplicated code into #executeExceptionRequestHandler
","24/Apr/16 18:38;jira-bot;Commit 0e55e547294d5e922fd8649175ad575af8574f9b in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0e55e54 ]

WICKET-6129 listeners are notified of all executed handlers now, so it is sufficient to listen for #onRequestHandlerResolved() only
","24/Apr/16 18:38;jira-bot;Commit dc356b95381bf1ebfbe317f8e5bba6e231a610d8 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=dc356b9 ]

WICKET-6129 RequestHandlerStack is not a stack, thus it is better be named RequestHandlerExecutor
","24/Apr/16 18:38;jira-bot;Commit b3f4fa0b7e40f7be4266f1e28057cea751975671 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b3f4fa0 ]

WICKET-6129 javadoc and deprecated: removeAll is removeScheduled now
","24/Apr/16 18:38;jira-bot;Commit eaa3bfa0fe498e542d7f96348a1009f7de59f6bc in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=eaa3bfa ]

WICKET-6129 javadoc; cleanup and  corrected spelling
","24/Apr/16 18:42;svenmeier;RequestCycleListeners are now notified as you'd expect it, i.e. in difference to Wicket 7.x:
- #onRequestHandlerResolved() is called before *all* handlers to be executed
- #onRequestHandlerExecuted() is called after *all* successful handlers (and only those)
- #onExceptionRequestHandlerResolved() is called for *all* exception handlers, even those resulting from a previous exception retry.",,,,,,,,,,,,
Ajax repaint is not correctly handled when component being repainted has an enclosure associated with it and is not a child of the enclosure,WICKET-6604,13194488,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,ivaynberg,ivaynberg,ivaynberg,26/Oct/18 18:52,30/Oct/18 15:30,13/Mar/19 23:18,30/Oct/18 15:30,7.10.0,8.1.0,,,,,,,7.11.0,8.2.0,,,,,,0,ajax,,,,,,,"When a component is repainted with ajax we first check if that component is a controlling component of the enclosure and if it is we repaint the enclosure instead of the component. However, we make the assumption that the controlling component of the enclosure is always contained within the enclosure, which may not always be true with inline enclosures.

For example:
{code:java}
<label wicket:child=""name"" wicket:for=""name"">Name</label>
<input type=""text"" wicket:id=""name""/>{code}
In this case the inline enclosure will only encompass the label. So if we repaint the textfield by adding it to the ajax request handler we will get a strange result where any header contributions associated with the name component will get rendered, but the markup for the name component will not - because we make the assumption that since it is controlling an enclosure it is also inside it so there is no point in repainting it directly.

 

One may argue that controlling components have to be inside the enclosure and we should throw an error if they are not, but I prefer this more flexible approach which allows the controller to be outside.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-26 19:56:36.621,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 30 15:30:46 UTC 2018,,,,,,0|i3zoyv:,9223372036854775807,,,,,,,,"26/Oct/18 19:56;jira-bot;Commit 88a521ce88737719808e362d8a082046406d0cdd in wicket's branch refs/heads/wicket-7.x from [~ivaynberg]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=88a521c ]

WICKET-6604 fixed bug where controllers of enclosures were not correctly repainted in ajax if they were outside enclosures
","26/Oct/18 20:26;jira-bot;Commit ec1549118b3c583afdfb3ef45b0e62d870f318b6 in wicket's branch refs/heads/wicket-8.x from [~ivaynberg]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ec15491 ]

WICKET-6604 fixed bug where controllers of enclosures were not correctly repainted in ajax if they were outside enclosures
","30/Oct/18 07:58;mgrigorov;I do not see a commit in master branch.

[~ivaynberg] Any reason not to have the fix in master ?","30/Oct/18 15:29;jira-bot;Commit a6d73f46b30e0846701bc8fdf3039895520eea1d in wicket's branch refs/heads/master from [~ivaynberg]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a6d73f4 ]

WICKET-6604 fixed bug where controllers of enclosures were not correctly repainted in ajax if they were outside enclosures
","30/Oct/18 15:30;ivaynberg;forgot, its there now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Events to close pop-up on Modal Window are not propagated,WICKET-5552,12706482,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,neilbennett,neilbennett,03/Apr/14 18:40,23/Oct/18 13:33,13/Mar/19 23:18,15/Oct/18 21:46,7.10.0,,,,,,,,8.2.0,9.0.0,,,wicket-extensions,,,1,javascript,modalwindow,,,,,,"When using a field on a modal window that shows a pop-up window, like a time picker, when clicking outside of the pop-up window but over the modal window, mousedown/click events are not propagated. Clicks outside of the modal window are propagated.

This is due to Wicket.Event.stop(event) being called on mousedown on the w_content_1 component. Removal of this leads to the Drag javascript being executed which itself calls Wicket.Event.stop(event), disabling this then propagates the event which leads to the pop-up window being closed but causes any field on the modalwindow to get focus.

I have a quickstart that demonstrates the modalwindow behavior vs that on a page. You will see that launching the modal window and clicking on the time component opens the pop-up window. However, you can only get this to close when clicking outside of the modal window. The same component has been put on the main page as a comparison which does close when clicking outside of the pop-up window.

",Windows/Eclipse/JRE7,,,,,,,,,,,,,,,,WICKET-6601,,,,,,,,03/Apr/14 18:41;neilbennett;quickstart.zip;https://issues.apache.org/jira/secure/attachment/12638535/quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2014-04-22 14:44:56.497,,,no_permission,,,,,,,,,,,,384805,,,Mon Oct 15 23:16:10 UTC 2018,,,,,,0|i1uajj:,385072,,,,,,,,"22/Apr/14 14:44;mgrigorov;Removing Wicket.Event.stop(event) or ""return false"" from Wicket.Drag.mouseDownHandler() breaks the dragging behavior.
To reproduce it just use wicket-examples > ajax > modal window > with a page.","26/Sep/18 03:35;githubbot;GitHub user andruhon opened a pull request:

    https://github.com/apache/wicket/pull/294

    WICKET-5552 fix modal mousedown and make modal more extendable

    Demo to reproduce the issue https://github.com/andruhon/wicket-modal-mousedown-issue
    
    Demo using 9.0.0-SNAPSHOT from maven local to demonstrate the fix:
    https://github.com/andruhon/wicket-modal-mousedown-issue/tree/fix-WICKET-5552

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/andruhon/wicket WICKET-5552-fix-modal-mousedown-and-make-it-more-extendable

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/294.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #294
    
----
commit 3adf1b5144b5948c45100129c6279fa183d85420
Author: Andrew Kondratev <andruhon@...>
Date:   2018-09-26T02:58:11Z

    WICKET-5552 fix modal mousedown and make it more extendable

----
","26/Sep/18 04:59;githubbot;Github user solomax commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/294#discussion_r220426844
  
    --- Diff: wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js ---
    @@ -2301,6 +2302,10 @@
     					onDrag = jQuery.noop;
     				}
     
    +				if (typeof(settings) !== ""undefined"" && settings.stopDragOnCssSelector) {
    --- End diff --
    
    According to the code `settings` should be `object`
    Maybe it would be better to change this line to be
    `typeof(settings) === 'object'` ?
","26/Sep/18 05:01;githubbot;Github user andruhon commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/294#discussion_r220427102
  
    --- Diff: wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js ---
    @@ -2301,6 +2302,10 @@
     					onDrag = jQuery.noop;
     				}
     
    +				if (typeof(settings) !== ""undefined"" && settings.stopDragOnCssSelector) {
    --- End diff --
    
    True. I'll change it to === 'object'. Will check that it still works and push.
","26/Sep/18 06:37;githubbot;Github user andruhon commented on the issue:

    https://github.com/apache/wicket/pull/294
  
    Updated with typeof object check.
","09/Oct/18 01:40;githubbot;Github user andruhon commented on the issue:

    https://github.com/apache/wicket/pull/294
  
    Is there anything else I should rework here?
","10/Oct/18 18:02;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/294
  
    Why so complicated - I've fixed the issue by removing the mouse blocker from modal.js and restricting any dragging on the element itself:
    
    ```
    diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js
    index 64852de..8d94b36 100644
    --- a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js
    +++ b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js
    @@ -2485,6 +2485,10 @@
     
     			mouseDownHandler: function (e) {
     				e = Wicket.Event.fix(e);
    +				
    +				if (e.target !== this) {
    +					return;
    +				}
     
     				var element = this;
     
    diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js
    index f683119..5a0f122 100644
    --- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js
    +++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js
    @@ -1189,7 +1189,7 @@
     					""<div class=\""w_left\"" id='""+idLeft+""'>""+
     						""<div class=\""w_right_1\"">""+
     							""<div class=\""w_right\"" id='""+idRight+""'>""+
    -								""<div class=\""w_content_1\"" onmousedown=\""Wicket.Event.stop(event);\"">""+
    +								""<div class=\""w_content_1\"" >""+
     									""<div class=\""w_caption\""  id=\""""+idCaption+""\"">""+
     										""<a class=\""w_close\"" style=\""z-index:1\"" href=\""#\""></a>""+
     										""<h3 id=\""""+idCaptionText+""\"" class=\""w_captionText\""></h3>""+
    ```
    Can you try that instead?
","11/Oct/18 00:04;githubbot;Github user andruhon commented on the issue:

    https://github.com/apache/wicket/pull/294
  
    @svenmeier sure, it was the first thing I tried. Unfortunately it prevents the w_captionText of the popup from working as a drag area, which I think is undesired effect.
    
    Potentially can be done as something like `e.target !== this && e.target.className.indexOf('w_captionText') == -1`, but it makes the mouseDownHandler know about css classes of modal so I think the approach with some general stopper class is more universal.
","11/Oct/18 18:27;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/294
  
    Ha, that's really some crufty code :)
    
    Just noticed that you filed the issue for Wicket 6.x - note that we will only apply security fixes for that version.
","11/Oct/18 20:15;githubbot;Github user andruhon commented on the issue:

    https://github.com/apache/wicket/pull/294
  
    @svenmeier it still exists in 7, 8 and in 9 snapshot. Are there jiras for appropriate versions? Didn't find them.
","12/Oct/18 21:06;githubbot;Github user andruhon commented on the issue:

    https://github.com/apache/wicket/pull/294
  
    Shoud I create a new PR without a ticket name or rewording commit is enough?
","12/Oct/18 22:04;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/294
  
    I'm still not happy about the change :/.
    
    Note that for Wicket 9 I want to move all Drag-handling from wicket-ajax to modal.js - we don't need it really in the former and for modal we'll have it easier to adjust it.
    
    For now we could allow the start handler to veto the drag:
    
    ```
    diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js
    index 18ab6bd..e71b4e8 100644
    --- a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js
    +++ b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js
    @@ -2476,14 +2476,16 @@
     
     				var element = this;
     
    +				if (element.wicketOnDragBegin(element, e) === false) {
    +					return;
    +				}
    +
     				Wicket.Event.stop(e);
     
     				if (e.preventDefault) {
     					e.preventDefault();
     				}
     
    -				element.wicketOnDragBegin(element);
    -
     				element.lastMouseX = e.clientX;
     				element.lastMouseY = e.clientY;
     
    diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js
    index b00ceec..6d63807 100644
    --- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js
    +++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js
    @@ -901,7 +901,12 @@
     		/**
     		 * Called when dragging has started.
     		 */
    -		onBegin: function(object) {
    +		onBegin: function(element, event) {
    +			// ignore anything inside the content
    +			if (jQuery(event.target).closest('.w_content_2').size()	) {
    +				return false;
    +			}
    +			
     			if (this.isIframe() && (Wicket.Browser.isGecko() || Wicket.Browser.isIELessThan11() || Wicket.Browser.isSafari())) {
     				this.revertList = [];
     				Wicket.Iframe.documentFix(document, this.revertList);
    @@ -1183,7 +1188,7 @@
     					""<div class=\""w_left\"" id='""+idLeft+""'>""+
     						""<div class=\""w_right_1\"">""+
     							""<div class=\""w_right\"" id='""+idRight+""'>""+
    -								""<div class=\""w_content_1\"" onmousedown=\""Wicket.Event.stop(event);\"">""+
    +								""<div class=\""w_content_1\"">""+
     									""<div class=\""w_caption\""  id=\""""+idCaption+""\"">""+
     										""<a class=\""w_close\"" style=\""z-index:1\"" href=\""#\""></a>""+
     										""<h3 id=\""""+idCaptionText+""\"" class=\""w_captionText\""></h3>""+
    
    ```
","12/Oct/18 23:23;githubbot;Github user andruhon commented on the issue:

    https://github.com/apache/wicket/pull/294
  
    @svenmeier Do you plan to completely remove the drag handling from wicket-ajax or just to allow the modal.js control it by itself?
","13/Oct/18 18:06;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/294
  
    It is used by ModalWindow and the Ajax debug console only - if we can agree to remove the latter (has been discussed a few years already), we can just move the code to modal.js
    But that's a separate discussion.
","15/Oct/18 21:34;jira-bot;Commit 03412f18eeab8954cc60f5532585993ae1f012d0 in wicket's branch refs/heads/wicket-8.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=03412f1 ]

WICKET-5552 allow prevention of drags

used by ModalWindow to prevent dragging on window content",15/Oct/18 21:46;svenmeier;events are allowed to bubble now,"15/Oct/18 21:47;jira-bot;Commit ace845c412d6ea3117c6f366d9bd91b06c6270da in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ace845c ]

WICKET-5552 allow prevention of drags

used by ModalWindow to prevent dragging on window content","15/Oct/18 21:51;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/294
  
    I've fixed WICKET-5552, please open a new pull request if you think ModalWindow is in need of further extensibility.
","15/Oct/18 23:16;githubbot;Github user andruhon commented on the issue:

    https://github.com/apache/wicket/pull/294
  
    Thanks for ace845c412d6ea3117c6f366d9bd91b06c6270da. I'll create another one with extensibility improvements soon. 
","15/Oct/18 23:16;githubbot;Github user andruhon closed the pull request at:

    https://github.com/apache/wicket/pull/294
",,,,,,,,,,,,,,,,
ResponseIOException should never escape from WicketFilter,WICKET-6599,13192475,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,papegaaij,papegaaij,papegaaij,18/Oct/18 09:33,18/Oct/18 12:37,13/Mar/19 23:18,18/Oct/18 12:37,8.1.0,,,,,,,,8.2.0,9.0.0,,,wicket-core,,,0,,,,,,,,"We are observing the stacktrace below in the logs on our systems. The problem is that Wicket wraps the IOException in a ReponseIOException and lets this exception escape from the filter. Undertow logs IOExceptions at debug, but the ReponseIOException is considered a real error and logged at error.

{code}
2018-10-02 08:04:51,307 ERROR [io.undertow.request] (default task-540) UT005023: Exception handling request to /console/wicket/resource/assets.AssetsResourceReferenceMarker/fonts/flaticons-stroke.woff: javax.servlet.ServletException: org.apache.wicket.protocol.http.servlet.ResponseIOException: java.io.IOException: Broken pipe
        at org.apache.shiro.web.servlet.AdviceFilter.cleanup(AdviceFilter.java:196)
        at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:148)
        at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
        at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
        at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
        at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
        at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
        at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
        at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
        at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
        at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at org.apache.deltaspike.servlet.impl.produce.RequestResponseHolderFilter.doFilter(RequestResponseHolderFilter.java:63)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at nl.topicus.cobra.filter.ClickjackFilter.doFilter(ClickjackFilter.java:29)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)
        at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)
        at io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68)
        at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)
        at org.wildfly.extension.undertow.security.SecurityContextAssociationHandler.handleRequest(SecurityContextAssociationHandler.java:78)
        at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
        at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:132)
        at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)
        at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
        at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)
        at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)
        at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)
        at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)
        at io.undertow.security.handlers.NotificationReceiverHandler.handleRequest(NotificationReceiverHandler.java:50)
        at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)
        at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
        at org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(JACCContextIdHandler.java:61)
        at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
        at org.wildfly.extension.undertow.deployment.GlobalRequestControllerHandler.handleRequest(GlobalRequestControllerHandler.java:68)
        at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
        at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:292)
        at io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:81)
        at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:138)
        at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:135)
        at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)
        at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)
        at org.wildfly.extension.undertow.security.SecurityContextThreadSetupAction.lambda$create$0(SecurityContextThreadSetupAction.java:105)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:272)
        at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81)
        at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:104)
        at io.undertow.server.Connectors.executeRootHandler(Connectors.java:360)
        at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830)
        at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
        at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1985)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1487)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1378)
        at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.wicket.protocol.http.servlet.ResponseIOException: java.io.IOException: Broken pipe
        at org.apache.wicket.protocol.http.servlet.ServletWebResponse.flush(ServletWebResponse.java:316)
        at org.apache.wicket.protocol.http.HeaderBufferingWebResponse.flush(HeaderBufferingWebResponse.java:99)
        at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:264)
        at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:204)
        at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:286)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
        at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
        at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
        ... 58 more
Caused by: java.io.IOException: Broken pipe
        at sun.nio.ch.FileDispatcherImpl.write0(Native Method)
        at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)
        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
        at sun.nio.ch.IOUtil.write(IOUtil.java:51)
        at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
        at org.xnio.nio.NioSocketConduit.write(NioSocketConduit.java:153)
        at org.xnio.conduits.AbstractStreamSinkConduit.write(AbstractStreamSinkConduit.java:51)
        at io.undertow.conduits.WriteTimeoutStreamSinkConduit.write(WriteTimeoutStreamSinkConduit.java:109)
        at io.undertow.server.protocol.http.HttpResponseConduit.write(HttpResponseConduit.java:609)
        at io.undertow.conduits.AbstractFixedLengthStreamSinkConduit.write(AbstractFixedLengthStreamSinkConduit.java:106)
        at org.xnio.conduits.ConduitStreamSinkChannel.write(ConduitStreamSinkChannel.java:150)
        at io.undertow.channels.DetachableStreamSinkChannel.write(DetachableStreamSinkChannel.java:240)
        at io.undertow.server.HttpServerExchange$WriteDispatchChannel.write(HttpServerExchange.java:2099)
        at io.undertow.servlet.spec.ServletOutputStreamImpl.writeBufferBlocking(ServletOutputStreamImpl.java:573)
        at io.undertow.servlet.spec.ServletOutputStreamImpl.flushInternal(ServletOutputStreamImpl.java:488)
        at io.undertow.servlet.spec.ServletOutputStreamImpl.flush(ServletOutputStreamImpl.java:475)
        at io.undertow.servlet.spec.HttpServletResponseImpl.flushBuffer(HttpServletResponseImpl.java:468)
        at org.apache.wicket.protocol.http.servlet.ServletWebResponse.flush(ServletWebResponse.java:311)
        ... 67 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-18 11:44:51.654,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Oct 18 12:23:18 UTC 2018,,,,,,0|i3zclb:,9223372036854775807,,,,,,,,"18/Oct/18 11:44;jira-bot;Commit c01c22bd1d61ec670eae926dfafdf261f63e0521 in wicket's branch refs/heads/wicket-8.x from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c01c22b ]

WICKET-6599: unwrap ResponseIOException before leaving WicketFilter
","18/Oct/18 12:23;jira-bot;Commit b1247255b12dd3736654bc32a59f54fcd01c0e2c in wicket's branch refs/heads/master from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b124725 ]

WICKET-6599: unwrap ResponseIOException before leaving WicketFilter
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Import Junit Package as optional,WICKET-6584,13183298,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,,SubbuS,SubbuS,06/Sep/18 06:08,14/Sep/18 06:21,13/Mar/19 23:18,10/Sep/18 18:29,8.0.0,,,,,,,,8.1.0,9.0.0,,,wicket,,,0,pull-request-available,,,,,,,"Currently the wicket-core and the wicket-util bundle import junit packages, we should export packages as resolution:=optional

Fix provided https://issues.apache.org/jira/browse/WICKET-6509 is not working as expected

 

Refer : 

http://apache-wicket.1842946.n4.nabble.com/wicket-core-and-util-OSGI-wiring-problem-with-junit-framework-with-test-environment-td4680840.html

 

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-06 06:49:22.847,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Sep 14 06:21:51 UTC 2018,,,,,,0|i3xsbb:,9223372036854775807,,,,,,,,"06/Sep/18 06:08;SubbuS;Working on Pull Request, Will be attach in soon","06/Sep/18 06:36;SubbuS;Created Pull Request

https://github.com/apache/wicket/pull/290/commits/bec778642934bd1028c4c2722daf114b16dfbdbb","06/Sep/18 06:49;papegaaij;If this works for OSGI, we should merge this. Wrt maven dependency resolution it makes no difference.

For wicket 9 we should fix the cause of these problems: test classes in core packages. IMHO we should move these classes to a new maven module and not pollute our core packages with test related classes. A challenge might be a circular dependency between wicket-core, wicket-tester and the tests in wicket-core.","06/Sep/18 07:48;papegaaij;The PR is not correct, but the actual commit is.",06/Sep/18 10:07;SubbuS;I will create a new pull request.,"06/Sep/18 11:17;SubbuS;created pull request for wicket - 8.x

[https://github.com/apache/wicket/pull/291/commits/d170946b3e88b1e71243d57b9c1ec2dc58dad809]

 

 

Can i create pull request for master?

 ","06/Sep/18 11:30;solomax;I believe this commit will be cherry-picked into master, no need to create another PR",06/Sep/18 12:17;SubbuS;Yes,"08/Sep/18 17:43;jira-bot;Commit d4818a4ff2301bf75e39faa3d904a64c5807fb33 in wicket's branch refs/heads/master from Subrahmanyam Sitha
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d4818a4 ]

WICKET-6584 Fix org.junit as resolution:=optional
",14/Sep/18 05:47;SubbuS;Thank you. How can i test it. When it will release?,"14/Sep/18 06:21;mgrigorov;We are voting on 8.1.0: [https://markmail.org/message/tfmhh3egttmwe5co|https://markmail.org/message/tfmhh3egttmwe5co.]

 ",,,,,,,,,,,,,,,,,,,,,,,,,
Wicket fails / does not encode request header values in AjaxCalls,WICKET-6568,13173138,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,tkrah,tkrah,19/Jul/18 08:45,23/Jul/18 19:24,13/Mar/19 23:18,22/Jul/18 16:46,7.7.0,,,,,,,,7.11.0,8.1.0,9.0.0,,wicket,,,0,ajax,encode,header,UTF-8,,,,"Looking at:

https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js?source

Wicket just sets the Wicket-FocusedElementId header to the id of the element.
However according to:

http://w3c.github.io/html/single-page.html#element-attrdef-global-id

The id must not contain a space, other UTF-8 characters are allowed.

{quote}
When specified on HTML elements, the id attribute value must be unique amongst all the IDs in the element’s tree and must contain at least one character. The value must not contain any space characters.
{quote}


We got UTF-8 characters in our ids - now wicket fails to make Ajax calls with e.g. this error:

{code}
ERROR: Wicket.Ajax.Call.failure: Error while parsing response: TypeError: Cannot convert string to ByteString because the character at index 64 has value 328 which is greater than 255.
{code}

Because the Header value set in the code:

{code}
if (Wicket.Focus.lastFocusId) {
    headers[""Wicket-FocusedElementId""] = Wicket.Focus.lastFocusId;
}
{code}

has to be encoded and decoded on the backend (either base64, url encoding or something else which is allowed to be in a header).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-19 19:31:34.731,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jul 23 19:24:33 UTC 2018,,,,,,0|i3w25z:,9223372036854775807,,,,,,,,"19/Jul/18 19:31;jira-bot;Commit ac85c32f4c001b3c4c06a5d94bd1ff6ab8d4acae in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ac85c32 ]

WICKET-6568 escape header ""Wicket-FocusedElementId""

it might contain non-ASCII","19/Jul/18 19:33;svenmeier;Thanks Torsten, could you try out the change I pushed just now? Works fine here with url encoding.","20/Jul/18 14:49;tkrah;[~svenmeier] tested it with 7.11.0-SNAPSHOT, fix works fine here. Thanks for the fast support.","22/Jul/18 16:42;jira-bot;Commit f6a195d346758ceed155ffc87074780b48d3dfbe in wicket's branch refs/heads/WICKET-6563 from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f6a195d ]

WICKET-6568 escape header ""Wicket-FocusedElementId""

it might contain non-ASCII","22/Jul/18 16:42;jira-bot;Commit 409cef886cfd5ae70261dfcbb369038796a9767a in wicket's branch refs/heads/WICKET-6563 from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=409cef8 ]

WICKET-6568 added test
","22/Jul/18 16:43;jira-bot;Commit 9bea1621e88d32c0d2f35d0d6efb484ecc56145e in wicket's branch refs/heads/wicket-8.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9bea162 ]

WICKET-6568 escape header ""Wicket-FocusedElementId""

it might contain non-ASCII","22/Jul/18 16:43;jira-bot;Commit b02a5afe8ec65b5ed5c36f61fc180b329b47d9ce in wicket's branch refs/heads/wicket-8.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b02a5af ]

WICKET-6568 added test
","22/Jul/18 16:43;jira-bot;Commit ec433e6a313676db5f302563a20c533813c1070a in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ec433e6 ]

WICKET-6568 added test
","22/Jul/18 16:46;svenmeier;We might decide to decode all header values later. But for now only ""Wicket-FocusedElementId""  is decoded, since we know wicket-ajax-jquery encodes it before setting the header.

Thanks Torsten!","23/Jul/18 19:24;jira-bot;Commit acb9785052c971a11bf898762afa2855cbdad2bf in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=acb9785 ]

WICKET-6568 escape header ""Wicket-FocusedElementId""

it might contain non-ASCII","23/Jul/18 19:24;jira-bot;Commit 8bd43a4c11fe826a4fe257feb312967415801c37 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8bd43a4 ]

WICKET-6568 added test
",,,,,,,,,,,,,,,,,,,,,,,,,
CssContentHeaderItem comments CSS code with HTML comments,WICKET-6546,13148553,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,solomax,rniestroj,rniestroj,28/Mar/18 12:08,05/Apr/18 16:24,13/Mar/19 23:18,05/Apr/18 16:24,6.24.0,6.29.0,,,,,,,7.11.0,8.0.0,,,wicket,,,0,,,,,,,,"CssContentHeaderItem wraps the passed CSS in HTML comments thus rendering invalid markup.

Example code:

 
{code:java}
@Override
public void renderHead(Component component, IHeaderResponse response) {
   super.renderHead(component, response);
   response.render(CssContentHeaderItem.forCSS("".select2-container--open {z-index: 100000;}"", ""select2-mod"", """"));
}
{code}
Renders:

 
{code:java}
<style type=""text/css"" id=""select2-mod"">
<!-- .select2-container--open {z-index: 100000;}-->
</style>{code}
The HTML comments in the CSS make the response invalid and in the browser you get a XML Parsing Error - Not Well Formed.

 

It should not render this invalid html comments in CSS.

Looking at the source code i think the error is in the CssUtils class: https://github.com/apache/wicket/blob/wicket-6.x/wicket-core/src/main/java/org/apache/wicket/core/util/string/CssUtils.java

 ",,,,,,,,,,,,,,,,,,,,,,,,,29/Mar/18 06:53;rniestroj;wicket6546 (2).zip;https://issues.apache.org/jira/secure/attachment/12916754/wicket6546+%282%29.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2018-03-28 15:38:08.794,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Apr 05 16:23:50 UTC 2018,,,,,,0|i3rvzb:,9223372036854775807,,,,,,,,"28/Mar/18 15:38;solomax;Works as expected on {{static}} html page

Will try to check with quick-start","28/Mar/18 15:56;solomax;Works for me as expected [https://github.com/solomax/ajax-download]

Could you please provide quickstart demonstrating this issue?","28/Mar/18 19:37;rniestroj;Quickstart attached. The page works here, but the comments in the CSS is also there.","29/Mar/18 03:00;solomax;Your quick-start is same as mine :) (10 times bigger ...)

I can see no errors in browser console

no errors in CSS interpreting, what is the issue ?","29/Mar/18 06:55;rniestroj;CSS comments should be /* */ and not <!-- --> as per [https://developer.mozilla.org/en-US/docs/Web/CSS/Comments#Notes]

Also the added CSS should not be commented at all. I just want it to be.

Attached another QS with the error visible in browser console. Click the AjaxLink. Tested on recent Firefox Developer and Chrome Stable. In chrome the logged error is:

 

 
{code:java}
wicket-ajax-jquery-debug-ver-1518883664000.js:131 Wicket.Ajax:  Error in parsing: This page contains the following errors:error on line 2 at column 19: Double hyphen within comment: <!--
 .select2-container
 Below is a rendering of the page up to the first error.

{code}
Found two answers for this on SE: [https://www.google.pl/search?q=Double+hyphen+within+comment
]

The problem seems to be the conjunction with the Select2 class name:
select2-container--open","29/Mar/18 09:41;solomax;I can see the issue now

This comments are described

here: [https://www.w3.org/TR/html401/present/styles.html#hiding]

and here: [https://www.w3.org/TR/html5/document-metadata.html#the-style-element]

 

I believe it should be safe to remove this HTML comments","02/Apr/18 16:11;solomax;White writing unit-test for this issue I find out the root cause is in this {{select2-container--open}} class name ...
with following {{select2-container-open}} name everything works as expected ... ","03/Apr/18 02:06;solomax;The further investigation shows these HTML comments were added to CSS to prevent CSS from being validated by XML processor
https://www.w3.org/International/questions/qa-escapes#styleattr

right now I see no other way to do it
Maybe someone can propose better way?","03/Apr/18 07:25;svenmeier;Actually these comments are written to hide the contents from ancient browses, that do not understand the <style> tag (and would display the CSS rules as text instead).","03/Apr/18 14:24;jira-bot;Commit 976f28de7a890a5827ef8c160e74a40df2c87709 in wicket's branch refs/heads/WICKET-6546-no-css-comments from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=976f28d ]

[WICKET-6546] HTML comments are removed from inline CSS
","03/Apr/18 14:24;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/wicket/pull/274

    [WICKET-6546] HTML comments are removed from inline CSS

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6546-no-css-comments

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/274.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #274
    
----
commit 976f28de7a890a5827ef8c160e74a40df2c87709
Author: Maxim Solodovnik <solomax666@...>
Date:   2018-04-03T14:23:48Z

    [WICKET-6546] HTML comments are removed from inline CSS

----
",03/Apr/18 21:23;rniestroj;Can you merge this also to Wicket 7 and 8 if the issue is there as well?,"04/Apr/18 21:31;svenmeier;I'd prefer if we applied the change to Wicket 7 and 8 only.

There are really old Wicket 6 projects out there that might not work with this change. This issue isn't so important that we should take any risk.","05/Apr/18 16:22;jira-bot;Commit 976f28de7a890a5827ef8c160e74a40df2c87709 in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=976f28d ]

[WICKET-6546] HTML comments are removed from inline CSS
","05/Apr/18 16:22;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/274
","05/Apr/18 16:23;jira-bot;Commit ebc97e31d09dba1b5a1e01c730831a40405f3deb in wicket's branch refs/heads/wicket-7.x from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ebc97e3 ]

[WICKET-6546] HTML comments are removed from inline CSS
",,,,,,,,,,,,,,,,,,,,
"onConfigure() Javadoc claims Overrides must call super, but there is no check to enforce it",WICKET-6543,13142517,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,keesvandieren,keesvandieren,05/Mar/18 13:08,29/Mar/18 21:52,13/Mar/19 23:18,29/Mar/18 16:37,8.0.0-M8,,,,,,,,8.0.0,,,,,,,0,,,,,,,,"[https://github.com/apache/wicket/blob/9e42a9548adb0da540e4e87d491f5824e778537e/wicket-core/src/main/java/org/apache/wicket/Component.java#L795] claims that: 

{{Overrides must call \{@code super.onConfigure()}, usually before any other code}}

However Component#onConfigure() does not set a flag (like onInitialize() does) nor does configure() check that its own onConfigure() gets called.

As user of the framework, I would expect consistent behavior between onConfigure() and onInitialize().

It might be a good idea to fix this before Wicket 8.0.0, as changing this behavior is a breaking change.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-29 16:37:10.151,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Mar 29 21:32:10 UTC 2018,,,,,,0|i3qv8n:,9223372036854775807,,,,,,,,"29/Mar/18 16:37;jira-bot;Commit 65227fb1464330213a5893be4d6bca89465abbf7 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=65227fb ]

WICKET-6543 verify super call for onConfigure
",29/Mar/18 16:37;svenmeier;Added super call verification for consistency with other overridable hook methods.,"29/Mar/18 21:20;jira-bot;Commit 1d2c6d0776b9b53a3dad56004be4fdef4f1cfa97 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1d2c6d0 ]

WICKET-6543 add test for EnclosureContainer
","29/Mar/18 21:32;jira-bot;Commit f8c87367651248a581f98900d348e425427e880b in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f8c8736 ]

WICKET-6543 add test for EnclosureContainer
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Two AbstractAjaxTimerBehaviors on same component timeId conflict,WICKET-6523,13133063,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,23/Jan/18 14:05,06/Feb/18 17:39,13/Mar/19 23:18,06/Feb/18 17:38,7.9.0,8.0.0-M8,,,,,,,8.0.0-M9,,,,wicket,,,0,,,,,,,,"When two or more AbstractAjaxTimerBehaviors are added two the same component, they use an identical timerId (= markupId).

This can lead a stopping behavior erroneously stopping the other behavior instead of itself.",,,,,,,,,,,,,,,,,WICKET-5570,WICKET-4959,WICKET-4689,WICKET-6191,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-01-26 04:50:38.214,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Feb 06 17:39:39 UTC 2018,,,,,,0|i3p90v:,9223372036854775807,,,,,,,,"26/Jan/18 04:50;jira-bot;Commit edb8c370a6989cbfdc1ca53b382a8e1caea3e103 in wicket's branch refs/heads/WICKET-6523-unique-timer-id from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=edb8c37 ]

[WICKET-6523] unique suffix is added if more than 1 timer behaviour is added for the component
","26/Jan/18 04:51;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/wicket/pull/260

    [WICKET-6523] unique suffix is added if more than 1 timer behaviour i…

    …s added for the component

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6523-unique-timer-id

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/260.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #260
    
----
commit edb8c370a6989cbfdc1ca53b382a8e1caea3e103
Author: Maxim Solodovnik <solomax666@...>
Date:   2018-01-26T04:50:19Z

    [WICKET-6523] unique suffix is added if more than 1 timer behaviour is added for the component

----
","26/Jan/18 08:12;githubbot;Github user martin-g commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/260#discussion_r164051658
  
    --- Diff: wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java ---
    @@ -92,6 +95,35 @@ public void renderHead(Component component, IHeaderResponse response)
     		}
     	}
     
    +	/**
    +	 * Can be overridden to provide different implementation
    +	 * 
    +	 * @return the unique ID of JS timer
    +	 */
    +	protected CharSequence createTimerId()
    +	{
    +		StringBuilder jsId = new StringBuilder(getComponent().getMarkupId());
    +		List<AbstractAjaxTimerBehavior> list = getComponent().getBehaviors(AbstractAjaxTimerBehavior.class);
    +		if (list.size() != 1)
    +		{
    +			for (int i = 0; i < list.size(); ++i)
    +			{
    +				if (list.get(i) == this)
    +				{
    +					jsId.append('_').append(i);
    --- End diff --
    
    Maybe it will be better to use UUID or an id from the session (like the page ids).
    Using the behavior index might break when the application removes some behavior and adds another.
    
    If behavior index is used then you may want to use `break` here.
","26/Jan/18 08:14;githubbot;Github user solomax commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/260#discussion_r164051979
  
    --- Diff: wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java ---
    @@ -92,6 +95,35 @@ public void renderHead(Component component, IHeaderResponse response)
     		}
     	}
     
    +	/**
    +	 * Can be overridden to provide different implementation
    +	 * 
    +	 * @return the unique ID of JS timer
    +	 */
    +	protected CharSequence createTimerId()
    +	{
    +		StringBuilder jsId = new StringBuilder(getComponent().getMarkupId());
    +		List<AbstractAjaxTimerBehavior> list = getComponent().getBehaviors(AbstractAjaxTimerBehavior.class);
    +		if (list.size() != 1)
    +		{
    +			for (int i = 0; i < list.size(); ++i)
    +			{
    +				if (list.get(i) == this)
    +				{
    +					jsId.append('_').append(i);
    --- End diff --
    
    I thought UUIDs are not being used cause it is long String.
    This was my first idea. If there would be no better ideas I'll update PR
","26/Jan/18 10:07;jira-bot;Commit 883db38419977da450eaac81fbe3356542e0c845 in wicket's branch refs/heads/WICKET-6523-ajax-timers from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=883db38 ]

WICKET-6523 remove timer handle as soon as possible
","26/Jan/18 10:07;jira-bot;Commit cf315b0fd1b3b442aee32fd6b572276cda92d686 in wicket's branch refs/heads/WICKET-6523-ajax-timers from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=cf315b0 ]

WICKET-6523 restarting should re-set the timeout
","26/Jan/18 10:07;jira-bot;Commit d06c28b3f62db6bb8a66581d21e3ac452325c27a in wicket's branch refs/heads/WICKET-6523-ajax-timers from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d06c28b ]

WICKET-6523 use behaviorId for timerId
","26/Jan/18 10:07;jira-bot;Commit 6eb29bb4af22fd851a94b3b3bcc203ec10070b53 in wicket's branch refs/heads/WICKET-6523-ajax-timers from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6eb29bb ]

WICKET-6523 timerId can no longer be used

to search for markup owning a timer, but timers will be removed by onRemove() callback anyway
","26/Jan/18 10:07;jira-bot;Commit cdfffcb6fa4465ef5032b6354792e2cf46d0eba9 in wicket's branch refs/heads/WICKET-6523-ajax-timers from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=cdfffcb ]

WICKET-6523 browser auto start; fixed version parameter

when choosing from modules or filtering
","26/Jan/18 10:13;svenmeier;Thanks Maxim, but there's something we have to address:

WICKET-4689 added some code to wicket-ajax-jquery.js, that removes timers based on the existence of dom elements with an id identical to the timerId.

I'm already experimenting on branch WICKET-6523-ajax-timers with this. IMHO that code can be dropped, since WICKET-4959 introduced another solution, that allows timer behaviors to clear their timeout by themselves.

Furthermore I'm wondering why we don't clear the timer handles as soon as they have fired - I don't see a reason to keep them around any longer than necessary.

I've tried to make my decisions easier to follow by using separate commits on branch WICKET-6523-ajax-timers.","26/Jan/18 11:18;githubbot;Github user solomax closed the pull request at:

    https://github.com/apache/wicket/pull/260
","26/Jan/18 23:04;jira-bot;Commit 36bf207bbda3e6ba53a6a24fc1fa6409783449c4 in wicket's branch refs/heads/WICKET-6523-ajax-timers from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=36bf207 ]

WICKET-6523 remove timer handle as soon as possible
","26/Jan/18 23:04;jira-bot;Commit 15aa06f47b2230a4fbe8b6aed6bf731e68968ac8 in wicket's branch refs/heads/WICKET-6523-ajax-timers from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=15aa06f ]

WICKET-6523 restarting should re-set the timeout
","26/Jan/18 23:04;jira-bot;Commit 23b7a0f5cc27031625f01da8a65ad21b1eae449c in wicket's branch refs/heads/WICKET-6523-ajax-timers from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=23b7a0f ]

WICKET-6523 use behaviorId for timerId
","26/Jan/18 23:04;jira-bot;Commit 63c4ae8d50cb5f119c8a3c772e2fa26c33165125 in wicket's branch refs/heads/WICKET-6523-ajax-timers from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=63c4ae8 ]

WICKET-6523 timerId can no longer be used

to search for markup owning a timer, but timers will be removed by onRemove() callback anyway
","26/Jan/18 23:04;jira-bot;Commit ffcb8cfecd0ffa65a771af5d677725d985bfc6bf in wicket's branch refs/heads/WICKET-6523-ajax-timers from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ffcb8cf ]

WICKET-6523 browser auto start; fixed version parameter

when choosing from modules or filtering
","06/Feb/18 15:08;jira-bot;Commit 9c67d13e8ba093af89f9bb01d2887d6c3d1bb6bc in wicket's branch refs/heads/WICKET-6523-ajax-timers from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9c67d13 ]

WICKET-6523 removed getJsTimeoutCall

added getTimerId instead; improved javadoc
","06/Feb/18 16:58;jira-bot;Commit db92a09a21f770208ff1eabec728c28d7b7a1290 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=db92a09 ]

WICKET-6523 remove timer handle as soon as possible
","06/Feb/18 16:58;jira-bot;Commit 871cf7d279a764c5192d5c61a4d8aff9ec8e5e2f in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=871cf7d ]

WICKET-6523 restarting should re-set the timeout
","06/Feb/18 16:58;jira-bot;Commit 16b612ae029d4f9990b259526ebc4f94e38cd903 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=16b612a ]

WICKET-6523 use behaviorId for timerId
","06/Feb/18 16:58;jira-bot;Commit c989470fece7389ed1791320ed31a8c69332f098 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c989470 ]

WICKET-6523 timerId can no longer be used

to search for markup owning a timer, but timers will be removed by onRemove() callback anyway
","06/Feb/18 16:58;jira-bot;Commit 2da550519a80268531a479bc6abf382427c9f399 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2da5505 ]

WICKET-6523 browser auto start; fixed version parameter

when choosing from modules or filtering
","06/Feb/18 16:58;jira-bot;Commit 4ec7c626058a0fde4163ba1f5f81e6176e27478e in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4ec7c62 ]

WICKET-6523 removed getJsTimeoutCall

since it needs the timerId, added getTimerId() instead; improved javadoc;
this closes #261
","06/Feb/18 17:31;jira-bot;Commit c6c17fecb7864fc9b875b89daa771a20f14432f2 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c6c17fe ]

WICKET-6523 fixed semicolon in JavaScript
","06/Feb/18 17:38;svenmeier;Timers are now identified by their component's markupId and behaviorId, subclasses can override getTimerId() to use some other means.
This 'timerId' is kept until the timer has fired or the behavior is stopped.

A timer's handle is now cleared as soon as it triggers, the behavior will set a new timeout if it's no yet stopped.

restart() restarts the timer as its name suggests,",06/Feb/18 17:39;svenmeier;Quickstarts of all referenced issues work fine.,,,,,,,,,,
Component.getDefaultModelObject() wraps in RuntimeException instead of WicketRuntimeException,WICKET-6477,13106920,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,perhuss,perhuss,04/Oct/17 11:58,06/Feb/18 12:54,13/Mar/19 23:18,30/Dec/17 22:30,7.9.0,,,,,,,,7.10.0,8.0.0-M9,,,wicket,,,0,,,,,,,,"If a model throws an exception when wicket tries to get the model value during rendering using Component.getDefaultModelObject() the original exception will be wrapped in a vanilla RuntimeException. This will then be wrapped again in a WicketRuntimeException. Perhaps there is a reason for this behaviour that I'm not aware of, or perhaps it's just accidental? I would expect the getDefaultModelObject() to wrap directly in a WicketRuntimeException, which will propagate the wicket stack properly without further wrapping.

My use case is a SessionTimeoutException (originating from a timed out session to a third system) that depending on which path wicket has travelled when the exception is thrown, it is sometimes wrapped directly in a WicketRuntimeException and sometimes wrapped in a RuntimeException wrapped in a WicketRuntimeException. This can be handled by the top level exception handler of course, but requires more complexity and may offer a few runtime WTFs...

Changing Component.getDefaultModelObject() to throw a WicketRuntimeException should be fairly safe since it is a RuntimeException and it will avoid the redundant wrapping.

Unit test quickstart attached. 

Last: Thank you for awesomeness!",,,,,,,,,,,,,,,,,,,,,,,,,04/Oct/17 11:55;perhuss;componentexception.zip;https://issues.apache.org/jira/secure/attachment/12890348/componentexception.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-12-30 22:30:21.683,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Dec 30 22:30:24 UTC 2017,,,,,,0|i3kv33:,9223372036854775807,,,,,,,,"30/Dec/17 22:30;jira-bot;Commit e4ee449e54df86664e132c60892fffcc7aa0fac5 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e4ee449 ]

WICKET-6477 Component.getDefaultModelObject() wraps in RuntimeException instead of WicketRuntimeException
","30/Dec/17 22:30;jira-bot;Commit 2acd52de099330a73f2f2b7445822798c0abda6c in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2acd52d ]

WICKET-6477 Component.getDefaultModelObject() wraps in RuntimeException instead of WicketRuntimeException

(cherry picked from commit e4ee449e54df86664e132c60892fffcc7aa0fac5)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultPageManagerProvider does not honour StoreSettings.setAsynchronous(false),WICKET-6501,13120867,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,solomax,gregjohnson,gregjohnson,27/Nov/17 09:51,06/Feb/18 12:52,13/Mar/19 23:18,28/Nov/17 03:49,8.0.0-M8,,,,,,,,6.29.0,7.10.0,8.0.0-M9,,wicket,,,0,,,,,,,,"StoreSettings.setAsynchronous(false) does not prevent pageStore from being wrapped with AsynchronousPageStore 

DefaultPageManagerProvider.java:
if (pageStore.canBeAsynchronous()) 
{
    pageStore = new AsynchronousPageStore(pageStore, capacity);
}

Suggest:
if (pageStore.canBeAsynchronous() && storeSettings.isAsynchronous())
{
    pageStore = new AsynchronousPageStore(pageStore, capacity);
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-27 13:08:59.342,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Nov 28 04:04:42 UTC 2017,,,,,,0|i3n7hz:,9223372036854775807,,,,,,,,"27/Nov/17 13:08;jira-bot;Commit 383c40f2557e78ac852ca4ea4300901281902435 in wicket's branch refs/heads/WICKET-6501-store-settings from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=383c40f ]

[WICKET-6501] storeSettings.isAsynchronous() is honored
","27/Nov/17 13:12;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/wicket/pull/248

    [WICKET-6501] storeSettings.isAsynchronous() is honored

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6501-store-settings

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/248.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #248
    
----
commit 383c40f2557e78ac852ca4ea4300901281902435
Author: Maxim Solodovnik <solomax666@gmail.com>
Date:   2017-11-27T13:08:40Z

    [WICKET-6501] storeSettings.isAsynchronous() is honored

----
",27/Nov/17 13:13;solomax;[~gregjohnson] Thanks for the working code :),"28/Nov/17 03:47;jira-bot;Commit 383c40f2557e78ac852ca4ea4300901281902435 in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=383c40f ]

[WICKET-6501] storeSettings.isAsynchronous() is honored
","28/Nov/17 03:48;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/248
","28/Nov/17 03:59;jira-bot;Commit caddaed006efcc30339cafd2482a29d7ec5bd38c in wicket's branch refs/heads/wicket-7.x from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=caddaed ]

[WICKET-6501] storeSettings.isAsynchronous() is honored
","28/Nov/17 04:04;jira-bot;Commit e5ddaaaf5978ef5f68117902c44bbfffab3eb4b9 in wicket's branch refs/heads/wicket-6.x from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e5ddaaa ]

[WICKET-6501] storeSettings.isAsynchronous() is honored
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicate definition of interface JSONString,WICKET-6496,13117941,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,dieter.tremel,dieter.tremel,13/Nov/17 13:59,06/Feb/18 12:48,13/Mar/19 23:18,13/Nov/17 14:24,8.0.0-M8,,,,,,,,8.0.0-M9,,,,wicket,,,0,,,,,,,,"org.apache.wicket.ajax.json.JSONFunction implements org.apache.wicket.ajax.json.JSONString, whereas com.github.openjson.JSONStringer relies on com.github.openjson.JSONString. I suppose this leads to problems on line 255 of JSONStringer  which checks if value is instance of JSONString, so that JSONFunction is not rendered correctly. Found by analyzing [issue #616 of wicketstuff|https://github.com/wicketstuff/core/issues/616].",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-13 14:20:06.899,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Nov 14 03:35:58 UTC 2017,,,,,,0|i3mphb:,9223372036854775807,,,,,,,,"13/Nov/17 14:20;jira-bot;Commit 81260044ce93f5903a33dc66c8feb9e0b0fbbd35 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8126004 ]

WICKET-6496 Duplicate definition of interface JSONString","13/Nov/17 14:24;bitstorm;Hi [~dieter.tremel]

I've replaced org.apache.wicket.ajax.json.JSONString with com.github.openjson.JSONString. This should fix the issue.

Thank you!","14/Nov/17 03:35;jira-bot;Commit 50bc0d61c95ad13cb35f2f1b515c0241f02be756 in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=50bc0d6 ]

[WICKET-6496] javadoc clean-up
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leaks on quickstart restart in tomcat,WICKET-6518,13130707,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,solomax,solomax,solomax,13/Jan/18 03:17,06/Feb/18 12:48,13/Mar/19 23:18,22/Jan/18 03:27,8.0.0-M8,,,,,,,,8.0.0-M9,,,,wicket-quickstart,,,0,,,,,,,,"I've noticed that with a quickstart project and with a permanent session,
with Tomcat I get the same behavior described here
https://issues.apache.org/jira/browse/WICKET-6046.
Is something we should worry about?

Mail thread: http://markmail.org/message/pekftutbrgj5bzps",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-01-13 03:19:19.218,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Jan 22 03:38:54 UTC 2018,,,,,,0|i3ovuv:,9223372036854775807,,,,,,,,"13/Jan/18 03:19;jira-bot;Commit cfd6a55fc9d613d4412a004efcc8e06d6ac1d73d in wicket's branch refs/heads/WICKET-6518-quickstart-logback from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=cfd6a55 ]

[WICKET-6518] Log4j is replaced with logback
","13/Jan/18 03:20;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/wicket/pull/257

    [WICKET-6518] Log4j is replaced with logback

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6518-quickstart-logback

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/257.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #257
    
----
commit cfd6a55fc9d613d4412a004efcc8e06d6ac1d73d
Author: Maxim Solodovnik <solomax666@...>
Date:   2018-01-13T03:18:56Z

    [WICKET-6518] Log4j is replaced with logback

----
","13/Jan/18 08:36;jira-bot;Commit 2e545f66c1db7448f1962ca519d0b685c8b8ded9 in wicket's branch refs/heads/WICKET-6518-quickstart-logback from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2e545f6 ]

[WICKET-6518] missing logback.xml is added
","16/Jan/18 07:02;githubbot;Github user klopfdreh commented on the issue:

    https://github.com/apache/wicket/pull/257
  
    Much better! Now only the relevant things are available and if the user wants to go for logback he just can add it, but doesn't need to remove not used xmls if logback isn't used. 👍 
","16/Jan/18 07:06;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/257
  
    +1
","22/Jan/18 03:22;jira-bot;Commit 1d20044b5e9a5d282217514bffd040c13794b808 in wicket's branch refs/heads/WICKET-6518-quickstart-logback from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1d20044 ]

Merge branch 'master' into WICKET-6518-quickstart-logback
","22/Jan/18 03:23;jira-bot;Commit cfd6a55fc9d613d4412a004efcc8e06d6ac1d73d in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=cfd6a55 ]

[WICKET-6518] Log4j is replaced with logback
","22/Jan/18 03:23;jira-bot;Commit 2e545f66c1db7448f1962ca519d0b685c8b8ded9 in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2e545f6 ]

[WICKET-6518] missing logback.xml is added
","22/Jan/18 03:23;jira-bot;Commit 1d20044b5e9a5d282217514bffd040c13794b808 in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1d20044 ]

Merge branch 'master' into WICKET-6518-quickstart-logback
","22/Jan/18 03:23;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/257
",22/Jan/18 03:28;solomax;Shall I cherry-pick these changes to wicket-7.x?,"22/Jan/18 03:38;jira-bot;Commit cfd6a55fc9d613d4412a004efcc8e06d6ac1d73d in wicket's branch refs/heads/WICKET-6498_deferred_javascript from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=cfd6a55 ]

[WICKET-6518] Log4j is replaced with logback
","22/Jan/18 03:38;jira-bot;Commit 2e545f66c1db7448f1962ca519d0b685c8b8ded9 in wicket's branch refs/heads/WICKET-6498_deferred_javascript from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2e545f6 ]

[WICKET-6518] missing logback.xml is added
","22/Jan/18 03:38;jira-bot;Commit 1d20044b5e9a5d282217514bffd040c13794b808 in wicket's branch refs/heads/WICKET-6498_deferred_javascript from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1d20044 ]

Merge branch 'master' into WICKET-6518-quickstart-logback
",,,,,,,,,,,,,,,,,,,,,,
IllegalArgumentException: Argument 'pageClass' may not be null,WICKET-6485,13110675,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,francois,francois,19/Oct/17 13:50,20/Oct/17 12:29,13/Mar/19 23:18,20/Oct/17 10:57,8.0.0-M7,,,,,,,,8.0.0-M8,,,,wicket,,,0,,,,,,,,"If I bookmark a stateful page, close the browser, reopen it and click on the bookmark
I get an IllegalArgumentException


java.lang.IllegalArgumentException: Argument 'pageClass' may not be null.
     at org.apache.wicket.util.lang.Args.notNull(Args.java:41)
     at org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper$UrlInfo.&lt;init&gt;(AbstractBookmarkableMapper.java:90)
     at org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper.mapHandler(AbstractBookmarkableMapper.java:410)
     at org.apache.wicket.request.mapper.CompoundRequestMapper.mapHandler(CompoundRequestMapper.java:210)",,,,,,,,,,,,,,,,,,,,,,,,,20/Oct/17 08:42;bitstorm;WICKET-6485.patch;https://issues.apache.org/jira/secure/attachment/12893218/WICKET-6485.patch,19/Oct/17 13:49;francois;quickstart.zip;https://issues.apache.org/jira/secure/attachment/12893048/quickstart.zip,,,2.0,,,,,,,,,,,,,,,,,,,2017-10-19 15:57:16.599,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 20 12:29:36 UTC 2017,,,,,,0|i3lgrb:,9223372036854775807,,,,,,,,"19/Oct/17 14:40;francois;fixed by Andrea
https://issues.apache.org/jira/browse/WICKET-6481",19/Oct/17 15:57;bitstorm;After WICKET-4201 PageProvider#getPageInstance does not throws PageExpiredException  anymore and returns a null page instance.,"20/Oct/17 03:13;solomax;Hello [~bitstorm], do you need any help with this issue?","20/Oct/17 06:38;francois;I forgot to mention that :
When I got this exception it was only after having closed the browser, reopened it and clicked on the stateful page link I previously bookmarked.
But if I did not close the browser and just removed the history (clean the cache) I got the Page Expired, which was ok.","20/Oct/17 08:07;bitstorm;Hi all,

the problem is that after WICKET-4201 neither PageProvider#getPageInstance nor PageProvider#getPageClass check if page has been expired. This check has been moved in ListenerRequestHandler#getPage() but this is not enough. We should add a similar check also in RenderPageRequestHandler#respond. This fixes the issue but I'm not completely sure this is the right way to go. I haven't followed the development of WICKET-4201 so I'm not sure about its initial goal.

PS: to reproduce the error it's enough to start a Wicket application and then type 'http://localhost:8080/wicket/page?1'. The page with the given id (might be > 1) is not found (it's expired) but we get the IllegalArgumentException instead.","20/Oct/17 08:14;bitstorm;I've just found that  WICKET-4201 description says exactly what I've just written :-). Talking about PageStore:

{quote} For example, getPage can throw a PageExpiredException, but getPageClass cannot, it should return null if no page class is set. Perhaps, it's even better to never throw exceptions at all.{quote}","20/Oct/17 08:43;bitstorm;I suggest to reintroduce PageExpiredException in IPageStore for methods getPageClass, getPageInstance and getPageParameters. See attached patch.","20/Oct/17 08:53;solomax;According to https://github.com/apache/wicket/pull/210/files (which is original work on WICKET-4201)
https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerRequestHandler.java is also affected, does it need any modifications as well?","20/Oct/17 09:35;bitstorm;[~solomax] I would simply remove expiration checking from ListenerRequestHandler#getPage, like it was before  WICKET-4201",20/Oct/17 09:44;solomax;great :),"20/Oct/17 09:54;jira-bot;Commit 3183aeb24f09d57e91bfc01813005f01cfd671df in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3183aeb ]

WICKET-6485 reintroduce PageExpiredException in IPageStore for
methods getPageClass, getPageInstance and getPageParameters","20/Oct/17 12:29;githubbot;GitHub user svenmeier opened a pull request:

    https://github.com/apache/wicket/pull/239

    WICKET-6485 reintroduce PageExpiredException in IPageStore for

    Building on #151 I've built this alternative implementation with the following advantages:
    
    - lazy loading can now *start* on an Ajax request too
    - much simpler without using the event bus
    - the timer adjusts to the minimum of the preferred timeout of all LazyLoadPanels
    - reworded methods and improved JavaDoc

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/239.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #239
    
----
commit 3183aeb24f09d57e91bfc01813005f01cfd671df
Author: Andrea Del Bene <adelbene@apache.org>
Date:   2017-10-20T09:53:21Z

    WICKET-6485 reintroduce PageExpiredException in IPageStore for
    methods getPageClass, getPageInstance and getPageParameters

----
",,,,,,,,,,,,,,,,,,,,,,,,
AjaxNewWindowNotifyingBehavior erroneously reports new window,WICKET-6479,13108215,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,10/Oct/17 07:51,18/Oct/17 18:42,13/Mar/19 23:18,17/Oct/17 20:58,6.29.0,7.10.0,8.0.0-M8,,,,,,8.0.0-M8,,,,,,,0,,,,,,,,"When opening an 'old' page (e.g. through back button or via link to a certain page reference), AjaxNewWindowNotifyingBehavior reports a new window.

This is wrong, when that page was in fact rendered in that same window, but the window name has meanwhile been changed by a more recent page.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-10 22:05:58.652,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Oct 18 18:42:33 UTC 2017,,,,,,0|i3l2iv:,9223372036854775807,,,,,,,,"10/Oct/17 22:05;jira-bot;Commit 00e84ea1926d38496607780c8b8985cab488b758 in wicket's branch refs/heads/WICKET-6479-new-window from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=00e84ea ]

WICKET-6479 keep window name
if the page was not yet rendered into any window, just keep the window name as is, instead of changing it
","10/Oct/17 22:07;githubbot;GitHub user svenmeier opened a pull request:

    https://github.com/apache/wicket/pull/238

    WICKET-6479 keep window name

    If the page was not yet rendered into any window, just keep the window name as is, instead of changing it for each new page.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6479-new-window

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/238.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #238
    
----
commit 00e84ea1926d38496607780c8b8985cab488b758
Author: Sven Meier <svenmeier@apache.org>
Date:   2017-10-10T22:05:35Z

    WICKET-6479 keep window name
    if the page was not yet rendered into any window, just keep the window name as is, instead of changing it

----
","11/Oct/17 08:25;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/238
  
    With this change AjaxNewWindowNotifyingBehavior keeps the window's name if it is already present.
    
    All successively rendered pages will be bound to an identical name and window.name will stay the same.
    Thus going back to a previous page instance will not report a new window.
","11/Oct/17 08:25;githubbot;Github user svenmeier commented on the issue:

    https://github.com/apache/wicket/pull/238
  
    With this change AjaxNewWindowNotifyingBehavior keeps the window's name if it is already present.
    
    All successively rendered pages will be bound to an identical name and window.name will stay the same.
    Thus going back to a previous page instance will not report a new window.
","17/Oct/17 20:55;jira-bot;Commit 34177bf8d1a0de1690a2759d2351efe4634ad902 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=34177bf ]

WICKET-6479 keep window name
if the page was not yet rendered into any window, just keep the window name as is, instead of changing it

This closes #238
","17/Oct/17 20:55;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/238
","17/Oct/17 20:58;svenmeier;With this change the behavior keeps an existing window name, as WebPage has done it in 1.4.x","18/Oct/17 18:42;jira-bot;Commit eb64b2af424f1492e60c6a2038c466878a855b01 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=eb64b2a ]

WICKET-6479 do not send request when name has not changed
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
It is impossible to use multiple WebSocketTester with the same WebApplication,WICKET-6476,13106616,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,solomax,solomax,solomax,03/Oct/17 04:44,03/Oct/17 12:37,13/Mar/19 23:18,03/Oct/17 10:20,8.0.0-M7,,,,,,,,7.10.0,8.0.0-M8,,,wicket-native-websocket,,,0,,,,,,,,"WebSocketTester set FilterPath for underlying Application without ant checks
The issue is: setFilterPath can be called only once.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-03 04:46:45.511,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 03 12:37:32 UTC 2017,,,,,,0|i3kt8f:,9223372036854775807,,,,,,,,"03/Oct/17 04:46;jira-bot;Commit 58a7106d74de02cc9f193d95613b6c1f3483ca7b in wicket's branch refs/heads/WICKET-6476-websocket-tester from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=58a7106 ]

[WICKET-6476] check is added while setting filter path to prevent exception
","03/Oct/17 04:47;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/wicket/pull/236

    [WICKET-6476] check is added while setting filter path to prevent exc…

    …eption

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/wicket WICKET-6476-websocket-tester

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/236.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #236
    
----
commit 58a7106d74de02cc9f193d95613b6c1f3483ca7b
Author: Maxim Solodovnik <solomax666@gmail.com>
Date:   2017-10-03T04:46:28Z

    [WICKET-6476] check is added while setting filter path to prevent exception

----
","03/Oct/17 09:09;githubbot;Github user solomax commented on the issue:

    https://github.com/apache/wicket/pull/236
  
    @martin-g Should I merge then delete the branch? Is the process of merging documented somewhere?
","03/Oct/17 09:46;jira-bot;Commit 58a7106d74de02cc9f193d95613b6c1f3483ca7b in wicket's branch refs/heads/master from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=58a7106 ]

[WICKET-6476] check is added while setting filter path to prevent exception
","03/Oct/17 09:46;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/236
","03/Oct/17 09:46;githubbot;Github user solomax commented on the issue:

    https://github.com/apache/wicket/pull/236
  
    Should this change be cherry-picked to other branches?
","03/Oct/17 10:14;githubbot;Github user martin-g commented on the issue:

    https://github.com/apache/wicket/pull/236
  
    1) yes, delete the branch
    
    2) cherry-pick in 7.x
","03/Oct/17 10:15;jira-bot;Commit 97daad6ab085c8da2cf90cdfd3478c55e4e8e861 in wicket's branch refs/heads/wicket-7.x from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=97daad6 ]

[WICKET-6476] check is added while setting filter path to prevent exception
",03/Oct/17 10:20;solomax;7.9.0 seems NOT to be marked as released in JIRA :((,"03/Oct/17 12:37;jira-bot;Commit 58a7106d74de02cc9f193d95613b6c1f3483ca7b in wicket's branch refs/heads/WICKET-6105-java.time from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=58a7106 ]

[WICKET-6476] check is added while setting filter path to prevent exception
",,,,,,,,,,,,,,,,,,,,,,,,,,
Ajax re-renders of enclosures do not render their children's header contributions,WICKET-6459,13098526,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,dpoliakas,dpoliakas,30/Aug/17 10:34,04/Sep/17 21:25,13/Mar/19 23:18,04/Sep/17 21:13,7.8.0,8.0.0-M6,,,,,,,7.9.0,8.0.0-M8,,,wicket,,,0,,,,,,,,"When a component in an enclosure is added to the AjaxRequestTarget, its (and subsequently its children's) header contributions are not rendered. 

AjaxEnclosureListener replaces any components with enclosures that are in the target with their enclosures. However, in the wicket hierarchy the enclosures appear to be siblings to the components they enclose. What this causes is that when the default ChildFirstHeaderRenderStrategy attempts to render the header contributions for the enclosure, nothing is rendered as the enclosure itself has no children in the hierarchy.

On one hand, ChildFirstHeaderRenderStrategy seems to be the culprit - it should detect enclosures and act accordingly - but fixing the problem there would cause it to resurface in the future if the default implementation of header render strategy is changed. What would be a correct way fix for this? ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-04 12:30:37.987,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Sep 04 21:25:12 UTC 2017,,,,,,0|i3jg2v:,9223372036854775807,,,,,,,,04/Sep/17 12:27;dpoliakas;It seems this only happens on inline enclosures. ,"04/Sep/17 12:30;githubbot;GitHub user disblader opened a pull request:

    https://github.com/apache/wicket/pull/232

    Ajax inline enclosure fix.

    A fix for the issue I described in WICKET-6459. 
    
    I've made this for 7.x as that's the version relevant for me, but I'd like it to be propogate to 8.x as well, how would I do that? Should I create a new pull request trying to merge this branch into 8.x?

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/disblader/wicket enclosure-ajax

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/232.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #232
    
----
commit 3b21b3a1d2a2220452eac74ec19e78b2c2d6da4a
Author: Domas Poliakas <dpoliakas@domas-mbp.local>
Date:   2017-09-01T16:39:42Z

    Ajax inline enclosure fix.

----
","04/Sep/17 18:43;githubbot;Github user martin-g commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/232#discussion_r136861843
  
    --- Diff: wicket-core/src/test/java/org/apache/wicket/markup/renderStrategy/ChildFirstHeaderRenderStrategyTest.java ---
    @@ -51,6 +57,39 @@ public void test2() throws Exception
     	}
     
     	/**
    +	 * Tests that when a controller of an enclosure is added to the ajax target, its header
    +	 * contributions reach the response
    +	 *
    +	 * WICKET-6459
    +	 *
    +	 */
    +	@Test
    +	public void testAjaxAndEnclosures() throws Exception
    +	{
    +
    +		tester.startPage(SimplePage3.class);
    --- End diff --
    
    Let's rename the page name to `InlineEnclosureAjaxRenderPage`.
    `SimplePage`s are legacy, but for new stuff we should try better! :-)
","04/Sep/17 19:09;githubbot;Github user disblader commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/232#discussion_r136863271
  
    --- Diff: wicket-core/src/test/java/org/apache/wicket/markup/renderStrategy/ChildFirstHeaderRenderStrategyTest.java ---
    @@ -51,6 +57,39 @@ public void test2() throws Exception
     	}
     
     	/**
    +	 * Tests that when a controller of an enclosure is added to the ajax target, its header
    +	 * contributions reach the response
    +	 *
    +	 * WICKET-6459
    +	 *
    +	 */
    +	@Test
    +	public void testAjaxAndEnclosures() throws Exception
    +	{
    +
    +		tester.startPage(SimplePage3.class);
    --- End diff --
    
    I renamed it to `EnclosureAjaxRenderPage`, since it actually tests for both regular and inline enclosures 
","04/Sep/17 21:13;mgrigorov;The PR is merged!

I didn't notice earlier that the commit messages do not mention WICKET-6459 and that's why they do not appear in this ticket.

Thank you, [~dpoliakas]!","04/Sep/17 21:25;githubbot;Github user disblader closed the pull request at:

    https://github.com/apache/wicket/pull/232
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fixed WicketTester to detect components in enclosure when doing isComponentOnAjaxResponse.,WICKET-6434,13092167,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,klopfdreh,klopfdreh,03/Aug/17 11:25,04/Sep/17 19:34,13/Mar/19 23:18,04/Sep/17 19:34,8.0.0-M6,,,,,,,,8.0.0-M7,,,,wicket,,,0,fix,,,,,,,"When a component is in a wicket:enclosure and is then correctly re-rendered using ajax, WicketTester seemed to not be able to detect that the component was in the ajax response in the isComponentOnAjaxResponse method.

A functionality has been additionalwhere isComponentOnAjaxResponse tries to find an enclosure whose child is the given component, and if one is found, it recurses into isComponentOnAjaxResponse passing the enclosure as an argument.

In order not to duplicate logic detecting when an enclosure's child is a given component, AjaxEnclosureListener's isControllerOfEnclosure has been switched to public and static.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-03 11:25:41.048,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Sep 04 19:34:01 UTC 2017,,,,,,0|i3iddb:,9223372036854775807,,,,,,,,"03/Aug/17 11:25;githubbot;Github user klopfdreh commented on the issue:

    https://github.com/apache/wicket/pull/224
  
    Thanks a lot for your effort. @martin-g I saw you did the review already. I created a JIRA ticket: https://issues.apache.org/jira/browse/WICKET-6434.
",04/Sep/17 19:34;mgrigorov;This has been resolved for 8.0.0-M7 (https://github.com/apache/wicket/pull/224#issuecomment-320505015),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxFormSubmitBehavior doesn't submit inner forms,WICKET-6455,13096961,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,bitstorm,bitstorm,23/Aug/17 08:51,23/Aug/17 12:53,13/Mar/19 23:18,23/Aug/17 12:53,7.8.0,8.0.0-M7,,,,,,,7.9.0,8.0.0-M8,,,,,,0,,,,,,,,AjaxFormSubmitBehavior doesn't submit inner forms if wantSubmitOnParentFormSubmit returns false,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-23 09:26:31.737,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Aug 23 09:27:35 UTC 2017,,,,,,0|i3j6i7:,9223372036854775807,,,,,,,,"23/Aug/17 09:26;jira-bot;Commit 411aa0ee38d45232f075549bf7212e78a0c626ce in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=411aa0e ]

WICKET-6455 AjaxFormSubmitBehavior doesn't submit inner forms","23/Aug/17 09:27;jira-bot;Commit 163d5c14b4577382b9924701336b84b0cbaa13ec in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=163d5c1 ]

WICKET-6455 AjaxFormSubmitBehavior doesn't submit inner forms",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Edge not recognized in UserAgent,WICKET-6373,13072740,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,papegaaij,papegaaij,17/May/17 09:07,13/Jun/17 21:32,13/Mar/19 23:18,13/Jun/17 21:32,7.6.0,8.0.0-M5,,,,,,,7.8.0,8.0.0-M7,,,wicket,,,0,,,,,,,,"The User-Agent {{Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 Edge/15.15063}} is recognized as Chrome 52. Edge should be added to both UserAgent and ClientProperties as a new browser.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-13 21:09:21.216,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jun 13 21:31:52 UTC 2017,,,,,,0|i3f3rj:,9223372036854775807,,,,,,,,"13/Jun/17 21:09;jira-bot;Commit 2668fbffa91b08a96e75d60a38c0567929b5ca63 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2668fbf ]

WICKET-6373 Edge not recognized in UserAgent
","13/Jun/17 21:09;jira-bot;Commit 1fc5a627de35b0034c2d6a756b44155a4aa18eff in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1fc5a62 ]

WICKET-6373 Edge not recognized in UserAgent

(cherry picked from commit 2668fbffa91b08a96e75d60a38c0567929b5ca63)
","13/Jun/17 21:31;jira-bot;Commit 4362848a7317b0c53d05be4b7542a670fa6b77d1 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4362848 ]

WICKET-6373 Edge not recognized in UserAgent

Fix detection of Chrome.
Add parsing in ClientProperties and WebClientInfo
","13/Jun/17 21:31;jira-bot;Commit c6d23d8ebb999d3cc8fa0676290f8dc554f34a9e in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c6d23d8 ]

WICKET-6373 Edge not recognized in UserAgent

Fix detection of Chrome.
Add parsing in ClientProperties and WebClientInfo

(cherry picked from commit 4362848a7317b0c53d05be4b7542a670fa6b77d1)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ajax redirects to non http(s)-urls are interpreted as relative,WICKET-6376,13074489,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,,papegaaij,papegaaij,24/May/17 12:02,31/May/17 22:09,13/Mar/19 23:18,30/May/17 15:56,7.7.0,8.0.0-M6,,,,,,,7.8.0,8.0.0-M7,,,wicket,,,0,,,,,,,,"wicket-ajax-jquery.js (processAjaxResponse) only understands http:// and https:// as schemes. This makes it impossible to redirect to other schemes, like chrome-extension://. I propose to change the regular expression to:
{code}
var withScheme  = /^[a-z][a-z0-9+.-]*:\/\//;  // checks whether the string starts with a scheme
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-24 19:20:38.868,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed May 31 22:09:46 UTC 2017,,,,,,0|i3fejz:,9223372036854775807,,,,,,,,24/May/17 19:20;mgrigorov;Looks good!,"25/May/17 15:42;papegaaij;Ok, I'll commit the fixes next week on 7 and 8.","30/May/17 15:55;jira-bot;Commit 12305d9f5f7d644282541e1858b2fec41cb57579 in wicket's branch refs/heads/master from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=12305d9 ]

WICKET-6376: allow non-http(s) uris in ajax redirects
","30/May/17 15:55;jira-bot;Commit 6963c723f1efb55d7ffdc64d2ccd8ab16718ef19 in wicket's branch refs/heads/wicket-7.x from [~emond]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6963c72 ]

WICKET-6376: allow non-http(s) uris in ajax redirects
",30/May/17 15:56;papegaaij;Fix applied,"31/May/17 22:04;jira-bot;Commit 0491709c1ad9720f120ed7ecad21d205c8be5470 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0491709 ]

WICKET-6376: allow non-http(s) uris in ajax redirects

Add JS unit tests
","31/May/17 22:09;jira-bot;Commit 260a483561e8d8470b0dc2dcd1dcdd66c788136d in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=260a483 ]

WICKET-6376: allow non-http(s) uris in ajax redirects

Remove debug leftover
","31/May/17 22:09;jira-bot;Commit 3c9985ec5c2ce7526de5fe75afb959ca8849719c in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3c9985e ]

WICKET-6376: allow non-http(s) uris in ajax redirects

Add JS unit tests

(cherry picked from commit 0491709c1ad9720f120ed7ecad21d205c8be5470)
","31/May/17 22:09;jira-bot;Commit 837b6b14711a4703521f7185e84764ae19afa9cf in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=837b6b1 ]

WICKET-6376: allow non-http(s) uris in ajax redirects

Remove debug leftover

(cherry picked from commit 260a483561e8d8470b0dc2dcd1dcdd66c788136d)
",,,,,,,,,,,,,,,,,,,,,,,,,,,
IModel's default models should detach the target model,WICKET-6379,13075389,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,mgrigorov,mgrigorov,27/May/17 20:35,27/May/17 20:47,13/Mar/19 23:18,27/May/17 20:47,8.0.0-M6,,,,,,,,8.0.0-M7,,,,wicket,,,0,,,,,,,,As discussed at users@ (http://markmail.org/message/dri5stzkr7z2r7ep) the default methods in IModel which transform the object of another IModel should detach it.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-27 20:47:38.707,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat May 27 20:47:38 UTC 2017,,,,,,0|i3fk3z:,9223372036854775807,,,,,,,,"27/May/17 20:47;jira-bot;Commit 63aa52b04df11e87ae20cda744465c4d77dde05b in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=63aa52b ]

WICKET-6379 IModel's default models should detach the target model
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HeaderItems with different PageParameters are treated as identical,WICKET-6362,13066904,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,boris@alum.mit.edu,boris@alum.mit.edu,26/Apr/17 01:06,11/May/17 19:20,13/Mar/19 23:18,11/May/17 19:20,7.5.0,8.0.0-M5,,,,,,,6.27.0,7.8.0,8.0.0-M6,,wicket,,,0,,,,,,,,"Given code like the following, where same ResourceReference is used for both resources but they have different PageParameters and different IDs, only one of them actually gets rendered in the page head:

{code}
public void renderHead(IHeaderResponse response) {
    …
    response.render(JavaScriptHeaderItem.forReference(resRef, pageParameters1, “id1”));
    response.render(JavaScriptHeaderItem.forReference(resRef, pageParameters2, “id2”));
}
{code}


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-11 19:05:13.386,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu May 11 19:20:20 UTC 2017,,,,,,0|i3e3t3:,9223372036854775807,,,,,,,,"11/May/17 19:05;jira-bot;Commit 47aa1461d58b9a5660fc11032db952ce4df36a33 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=47aa146 ]

WICKET-6362 HeaderItems with different PageParameters are treated as identical

Implement proper #equals() and #hashCode() for all HeaderItems
","11/May/17 19:06;jira-bot;Commit 9a3dcecca101efb5ed3c6363153665d91697d172 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9a3dcec ]

WICKET-6362 HeaderItems with different PageParameters are treated as identical

Implement proper #equals() and #hashCode() for all HeaderItems
","11/May/17 19:19;jira-bot;Commit bf732ec61700b4ae391cec42452eb12ac0aca824 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bf732ec ]

WICKET-6362 HeaderItems with different PageParameters are treated as identical

Implement proper #equals() and #hashCode() for all HeaderItems
",11/May/17 19:20;mgrigorov;Fixed by implementing proper #equals() and #hashCode() methods for all HeaderItem implementations.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MarkupContainer#queue doesn't work in table column,WICKET-6361,13066128,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,ageery,ageery,23/Apr/17 00:22,02/May/17 09:22,13/Mar/19 23:18,02/May/17 09:22,7.6.0,8.0.0-M5,,,,,,,7.7.0,8.0.0-M6,,,wicket,,,0,,,,,,,,"When the AbstractColumn#populateItem adds a Panel which uses the MarkupComponent#queue method to add its children, the following error occurs:  Detach called on component with id 'cell' while it had a non-empty queue.

If the queue methods are changed to add, everything works.  This is the workaround.

In the attached file, the problem is ActionPanel (which is added by ActionColumn).  Changing queue to add makes the example work.",,,,,,,,,,,,,,,,,,,,,,,,,23/Apr/17 00:22;ageery;myproject.zip;https://issues.apache.org/jira/secure/attachment/12864664/myproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2017-04-29 13:08:49.236,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue May 02 09:22:48 UTC 2017,,,,,,0|i3dz0v:,9223372036854775807,,,,,,,,"29/Apr/17 13:08;jira-bot;Commit 446003862b96e8c5ff551b26489f2e0751b50db0 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4460038 ]

WICKET-6361 MarkupContainer#queue doesn't work in table column","29/Apr/17 17:58;jira-bot;Commit 70342df0f5d0c87e4a0c335dbf68a699359dd469 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=70342df ]

WICKET-6361 MarkupContainer#queue doesn't work in table column","02/May/17 09:22;bitstorm;With this fix components dequeuing is triggered on container initialization, but only if the container or one of its parent has something to dequeue.
The code we use inside MarkupContainer#addedComponent to propagate dequeuing has been removed as it is not useful anymore ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxFallbackButton#onError parameter type should be Optional<AjaxRequestTarget>,WICKET-6324,13044924,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,ageery,ageery,21/Feb/17 18:41,24/Mar/17 13:16,13/Mar/19 23:18,23/Feb/17 11:59,8.0.0-M3,,,,,,,,8.0.0-M4,,,,wicket,,,0,,,,,,,,"The parameter for AjaxFallbackButton#onSubmit is Optional<AjaxRequestTarget> because the AjaxRequestTarget can be null.  However, the parameter for AjaxFallbackButton#onError is AjaxRequestTarget.  The AjaxRequestTarget can be null so the parameter to #onError should follow #onSubmit and also be Optional.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-02-23 11:46:20.464,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Mar 24 13:16:53 UTC 2017,,,,,,0|i3ae5r:,9223372036854775807,,,,,,,,"23/Feb/17 11:46;jira-bot;Commit 1d8a9c780756130fad77135aa54717552bdd41c9 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1d8a9c7 ]

WICKET-6324 optional for all callbacks
","23/Feb/17 11:59;svenmeier;Thanks, I fixed some other callback methods too.","24/Mar/17 13:05;mgrigorov;[~svenmeier]
Why did you make this change:
{code}
diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/markup/html/form/AjaxFallbackButton.java b/wicket-core/src/main/java/org/apache/wicket/ajax/markup/html/form/AjaxFallbackButton.java
index 8fd7ad8..f24dd22 100644
--- a/wicket-core/src/main/java/org/apache/wicket/ajax/markup/html/form/AjaxFallbackButton.java
+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/markup/html/form/AjaxFallbackButton.java
@@ -73,19 +73,19 @@ public abstract class AjaxFallbackButton extends Button
                        @Override
                        protected void onSubmit(AjaxRequestTarget target)
                        {
-                               AjaxFallbackButton.this.onSubmit(Optional.ofNullable(target));
+                               AjaxFallbackButton.this.onSubmit(Optional.of(target));
{code}

`target` may be null and then this will break at :

{code}
private Optional(T value) {
       this.value = Objects.requireNonNull(value);
}
{code}","24/Mar/17 13:16;svenmeier;Thanks for asking:

The target cannot - nor should it - be null, at that moment. So Optional#of() assures that this assumption holds.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The Ajax reponse of an AjaxSubmitButton creates invalid XHTML markup for multipart forms,WICKET-6340,13057054,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,mhusar,mhusar,17/Mar/17 16:09,21/Mar/17 22:23,13/Mar/19 23:18,17/Mar/17 20:37,6.26.0,7.6.0,,,,,,,6.27.0,7.7.0,8.0.0-M5,,wicket,,,0,patch,triaged,,,,,,"My web pages are delivered as XHTML5 ({{response.setContentType(""application/xhtml+xml"");}}). When I add a multipart form and submit a file, I get strange JavaScript errors about invalid or illegal strings.

{quote}
Wicket.Ajax:  An error occurred while executing Ajax request:SyntaxError: An invalid or illegal string was specified 
XML Parsing Error: mismatched tag. Expected: </iframe>.
Address: 
Row Nr. 1, Column 202:
{quote}

I found out that Wicket’s Ajax code is responsible for those problems.

{code:title=wicket-ajax-jquery.js, row 70|borderStyle=solid}
createIFrame = function (iframeName) {
  var $iframe = jQuery('<iframe name=""'+iframeName+'"" id=""'+iframeName+
    '"" src=""about:blank"" style=""position: absolute; top: -9999px; left: -9999px;"">');
  return $iframe[0];
};
{code}

The iframe tag isn’t closed. This is fine for HTML5, but not for XHTML5.

I have attached a quite minimal Wicket project were the problems can be examined:

{code}
mkdir wicket-ajax-jquery-iframe
mv wicket-ajax-jquery-iframe.zip wicket-ajax-jquery-iframe
cd wicket-ajax-jquery-iframe
unzip wicket-ajax-jquery-iframe.zip
mvn package
mvn jetty:run-war
{code}

Open your browser’s console and upload any file on localhost:8080.

A patch which fixes this issued is attached. Thanks for your help.","Jetty 9, Fedora 25",,,,,,,,,,,,,,,,,,,,,,,,17/Mar/17 16:09;mhusar;wicket-ajax-jquery-iframe.zip;https://issues.apache.org/jira/secure/attachment/12859312/wicket-ajax-jquery-iframe.zip,17/Mar/17 16:09;mhusar;wicket-ajax-jquery.patch;https://issues.apache.org/jira/secure/attachment/12859313/wicket-ajax-jquery.patch,,,2.0,,,,,,,,,,,,,,,,,,,2017-03-17 20:25:07.72,,,no_permission,,,,Patch,,,,,,,,9223372036854775807,,,Tue Mar 21 22:23:58 UTC 2017,,,,,,0|i3cfnr:,9223372036854775807,,,,,,,,"17/Mar/17 20:25;jira-bot;Commit 1421ea2dc9207143cdadb735f3c79421674d924d in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1421ea2 ]

WICKET-6340 improve support for XHTML markup
","17/Mar/17 20:25;jira-bot;Commit 94b07c6c1070ea88bba0c269e2f5fe4d80ebea05 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=94b07c6 ]

WICKET-6340 improve support for XHTML markup
","17/Mar/17 20:34;svenmeier;The problem shows up with content type ""application/xhtml+xml"" - a XHTML doctype in the markup is not enough to trigger it.

Note: To change the content type it's easier to just override #getMarkupType() in your page:

{code}
	@Override
	public MarkupType getMarkupType()
	{
		return new MarkupType(""html"", MarkupType.XML_MIME);
	}
{code}","17/Mar/17 20:35;jira-bot;Commit 1b6ab749a79e9a921f50c296ab48a06cef43f3f1 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1b6ab74 ]

WICKET-6340 improve support for XHTML markup
",17/Mar/17 20:37;svenmeier;Generating the <iframe> is done XHTML conform now. Additionally I've replaced &nbsp; in wicket-ajax-debug with &#160; since these lead to further errors on the console.,"20/Mar/17 16:28;jira-bot;Commit 7f646712c9b1c0ca5817d7a3a4badec1da087a22 in wicket's branch refs/heads/WICKET-6286-ajax-download from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7f64671 ]

WICKET-6286 Add support for success callback to 'NewWindow' location

Add 'onDownloadCompleted()' callback that is executed after any success or failure callback. Like in jQuery - do something in all cases.

WICKET-6340 Use XHTML friendly markup when creating the iframe
","20/Mar/17 20:59;jira-bot;Commit 89e509f1992a4d5c8c2e8d7700106b2ff389ce6d in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=89e509f ]

WICKET-6340 improve support for XHTML markup
","21/Mar/17 20:27;jira-bot;Commit 84d557ab14c4e06352d937f786b0d97b6194e187 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=84d557a ]

WICKET-6340 improve support for XHTML markup
","21/Mar/17 20:28;jira-bot;Commit fd6befd0201070bb024fbbb37595463ea22c9413 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fd6befd ]

WICKET-6340 improve support for XHTML markup
","21/Mar/17 22:23;jira-bot;Commit a7c01094b369c95316ee103f364f04f57cbba1ad in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a7c0109 ]

WICKET-6286 Add support for success callback to 'NewWindow' location

Add 'onDownloadCompleted()' callback that is executed after any success or failure callback. Like in jQuery - do something in all cases.

WICKET-6340 Use XHTML friendly markup when creating the iframe
",,,,,,,,,,,,,,,,,,,,,,,,,,
AbstractTree#updateBranch() and #updateNode() make AjaxRequestTarget mandatory,WICKET-6325,13045636,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,23/Feb/17 14:34,23/Feb/17 14:36,13/Mar/19 23:18,23/Feb/17 14:36,8.0.0-M3,,,,,,,,8.0.0-M4,,,,wicket-extensions,,,0,,,,,,,,"With the new Optional<AjaxRequestTarget> spreading over Wickets code base, AbstractTree#updateBranch() and #updateNode() were changed (by me) to get an optional ART.

Further examination shows, that this was a wrong decision:
- most Java experts argue against optional method parameters
- there are cases now where an existing ART must be wrapped in an optional just to pass it into the methods.

The former solution to check the parameter against null isn't feasible now either, since you have to use optional#orElse(null) if you happen to have an Optional<ART> only.

Thus it is better to just make the ART parameter mandatory.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-02-23 14:35:41.335,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Feb 23 14:35:41 UTC 2017,,,,,,0|i3aij3:,9223372036854775807,,,,,,,,"23/Feb/17 14:35;jira-bot;Commit 3bb858f96b2754f3386055f6b21e30c56d79b9be in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3bb858f ]

WICKET-6325 ART is a mandatory parameter now
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken Link in Tomcat because of Page Mount,WICKET-5247,12654128,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,martin wischnewski,martin wischnewski,21/Jun/13 11:43,07/Feb/17 22:25,13/Mar/19 23:18,21/Jun/13 12:58,6.8.0,,,,,,,,1.5.11,6.9.0,7.0.0-M1,,wicket-quickstart,,,0,,,,,,,,"I post this message on the user mailing List (http://apache-wicket.1842946.n4.nabble.com/Broken-Link-in-Tomcat-because-of-Page-Mount-tt4659663.html) and Martin Grigorov asked me, to create a ticket on Jira.

Broken Link in Tomcat because of Page Mount

Following situation:
-I have a Wicket Application(6.8.0) which runs under the context ""webapp"" on a Tomcat 7.0.41
-I mount a Page with two parameters (this is important) in the WicketApplication.
	mountPage(""/mount/${parameter1}/${parameter2}"", MountedPage.class);
-The mounted Page(MountedPage.class) has only a simple Link
-There are two links on the HomePage to the mounted Page.
 They are declared as follows:
 
	add(new Link<Void>(""link"") {
			@Override
			public void onClick() {
				setResponsePage(MountedPage.class, linkParameters);
			}
	});

	add(new Link<Void>(""brokenLink"") {
			@Override
			public void onClick() {
				setResponsePage(new MountedPage(linkParameters));
			}
	});
	
I deploy this Application as a war file on a Tomcat under the context ""webapp"".
When I call the first Link on the HomePage and then the Link on the mounted Page, everything works fine.

But if I call the second Link and then the Link on the mounted Page, the link is broken.
The context is missing in the generated link
	http://localhost:8080/wicket/bookmarkable/com.mycompany.LinkedPage

Does anyone have an idea, why the second link does not work on Tomcat?

I add a Quickstart and the war file as attachment.

Ps: Both links works fine in Jetty. 
Pss:If I remove the mount command, both links will work in  Tomcat too.",Tomcat 7.0.41,,,,,,,,,,,,,,,,,,,,,,,,21/Jun/13 11:46;martin wischnewski;quickstart.zip;https://issues.apache.org/jira/secure/attachment/12589048/quickstart.zip,21/Jun/13 11:46;martin wischnewski;webapp.war;https://issues.apache.org/jira/secure/attachment/12589049/webapp.war,,,2.0,,,,,,,,,,,,,,,,,,,2013-06-21 12:20:23.566,,,no_permission,,,,,,,,,,,,334405,,,Tue Feb 07 22:25:09 UTC 2017,,,,,,0|i1lop3:,334731,,,,,,,,"21/Jun/13 12:20;svenmeier;As a quick fix you can pass the PageParameters to the super constructor:

	public MountedPage(PageParameters parameters) {
		super(parameters);

		...
	}

Otherwise there is no way for Wicket to know and use them in the generation of the mounted url.

I will commit a fix that improves handling of this coding error.","21/Jun/13 12:58;svenmeier;the handler is no longer mapped by MountedMapper when the value for a required placeholder is
missing","21/Jun/13 13:25;mgrigorov;Sven,

I see commits only in 6.x and master.
Did you forget to push to 1.5.x ? 1.5.11 is in ""Fix Version""","21/Jun/13 13:31;svenmeier;Should have checked the console output - fatal: Authentication failed
",21/Jun/13 14:00;martin wischnewski;Thanks for the quick fix!,"07/Feb/17 22:25;githubbot;Github user martin-g commented on a diff in the pull request:

    https://github.com/apache/wicket/pull/210#discussion_r99945970
  
    --- Diff: wicket-core/src/test/java/org/apache/wicket/core/request/mapper/MountedMapperTest.java ---
    @@ -714,7 +714,7 @@ public boolean isNewPageInstance()
     	@Test
     	public void placeholderEncode4()
     	{
    -		PageProvider provider = new PageProvider(new MockPage())
    +		PageProvider provider = new PageProvider(MockPage.class)
    --- End diff --
    
    I didn't understand you.
    ```java
    /**
    	 * WICKET-5247 page instantiated without required parameters won't be mapped
    	 */
    	@Test
    	public void placeholderEncode4()
    	{
    		PageProvider provider = new PageProvider(new MockPage())
    		{
    			@Override
    			public boolean isNewPageInstance()
    			{
    				return false;
    			}
    		};
    		provider.setPageSource(context);
    		IRequestHandler handler = new RenderPageRequestHandler(provider);
    		Url url = placeholderEncoder.mapHandler(handler);
    		assertNull(url);
    	}
    ```
    The test setups a PageProvider and uses it. There is no replacement after.
    By making this change I think we don't test the same as what broke in WICKET-5247.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket tester encodes page id for stateless links in stateless pages,WICKET-6316,13040296,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,pedrosans,pedrosans,pedrosans,04/Feb/17 01:48,04/Feb/17 21:12,13/Mar/19 23:18,04/Feb/17 21:12,6.26.0,7.6.0,8.0.0-M3,,,,,,6.27.0,7.7.0,8.0.0-M4,,,,,0,,,,,,,,The stateless link URL encoded for the request at tester#executeListener contains the page id even in a stateless page.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-02-04 05:57:59.093,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Feb 04 21:12:04 UTC 2017,,,,,,0|i39lw7:,9223372036854775807,,,,,,,,"04/Feb/17 05:57;jira-bot;Commit 5c9e27c6ec262d9ec4a0878bc74c594f12303558 in wicket's branch refs/heads/master from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5c9e27c ]

WICKET-6316 encoding bookmarkable URLs for stateless pages in wicket tester
","04/Feb/17 21:04;jira-bot;Commit dc6b2f4f5dbfb262a52f5ff403ec04e2c73ba82f in wicket's branch refs/heads/wicket-6.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=dc6b2f4 ]

WICKET-6316 encoding bookmarkable URLs for stateless pages in wicket tester
","04/Feb/17 21:12;jira-bot;Commit da4f51fba485fde0ed82ced19fe6ae0ac02513f8 in wicket's branch refs/heads/wicket-7.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=da4f51f ]

WICKET-6316 encoding bookmarkable URLs for stateless pages in wicket tester
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistent behavior of Markupstream.hasMore vs. MarkupStream.next.,WICKET-6165,12969849,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,pedrosans,tschoening,tschoening,15/May/16 18:18,03/Feb/17 02:54,13/Mar/19 23:18,03/Feb/17 02:54,7.3.0,,,,,,,,6.27.0,7.7.0,8.0.0-M4,,wicket,,,0,,,,,,,,"{CODE}
hasMore: return currentIndex < markup.size();
next:    if (++currentIndex < markup.size()) {...}
me:      while (markupStream.hasMore()) {...}
{CODE}

I get a null element within the while loop which I wouldn't expect to get. markup.size() is 73, currentIndex 72, so ""hasMore"" returns true, while ""next"" returns null, because it already advanced the index during its check. ""hasMore"" saying ""yes"" while ""next"" saying ""no"" seems inconsistent to me, even though one can check the return value of ""next"" against ""null"".

Shouldn't ""next"" use

{CODE}
if (currentIndex++ < markup.size()) {...}
{CODE}

to be in line with ""hasMore""? Or more better directly call ""hasMore"" for the check itself to have only one single consistent implementation of the check?",,,,,,,,,,,,,,,,,,,,,,,,,16/May/16 11:06;tschoening;HtmlHandler.java.patch;https://issues.apache.org/jira/secure/attachment/12804153/HtmlHandler.java.patch,16/May/16 11:03;tschoening;MarkupStream.java.patch;https://issues.apache.org/jira/secure/attachment/12804152/MarkupStream.java.patch,15/May/16 18:41;tschoening;MarkupStream.java.patch;https://issues.apache.org/jira/secure/attachment/12804073/MarkupStream.java.patch,,3.0,,,,,,,,,,,,,,,,,,,2016-09-05 05:01:49.65,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Feb 03 02:54:04 UTC 2017,,,,,,0|i2xzn3:,9223372036854775807,,,,,,,,"15/May/16 18:41;tschoening;The attached patch implements the checks how I would understand the API, but a lot of tests fail in this case with missing elements in the markup stream. If hasMore is left unchanged instead, out of bounds excpetions occur, which make sense because markup.size() is most likely not a max index, but a number of elements and next checked that properly.

So this looks like hasMore is wrong, idx vs. nr of elements, and a lot of code is relying on this behavior now? If that's the case, this should be documented in my opinion, maybe even deprecated?

Or I'm totally misunderstanding things here...","16/May/16 11:03;tschoening;Attaching another version of MarkupStream where I tried to fix the problems with the tests. After reviewing the code, I found some implementations where ""hasMore"" is used as loop head, while in the loop the current element is checked first and ""next"" used afterwards. In most of the other implementations I've seen ""hasMore"" is really used to detect if there is a next element, not a current one, so I changed all those places I found in the file to something I find easier to understand even if ""hasMore"" is not changed.

In the end, I think it should made more clearly using the docs what the purpose of ""hasMore"" really is: Should it tell about a current available element or if there's a next one, so calling ""next"" always succeeds? I understand the name und docs as the latter.",16/May/16 11:06;tschoening;Debugging for HtmlHandler.postProcess,"05/Sep/16 05:01;jira-bot;Commit e3e09fd002452c8d2ea4be18f2733cffda78fc10 in wicket's branch refs/heads/master from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e3e09fd ]

WICKET-6165 renaming MarkupStream#hasMore to MarkupStream#isCurrentIndexInsideTheStream
","05/Sep/16 05:08;pedrosans;Hi Thorsen, thank you for reporting the error and the patches.

As most of wicket-core is built on top of the iteration style: read, move, do it again if current index is inside the stream; it's better to simple fix the name.","10/Sep/16 03:50;jira-bot;Commit 2c8fd45c8f3287d39daf1413b582608620db0639 in wicket's branch refs/heads/stream-api-improvement from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2c8fd45 ]

WICKET-6165 addind and using MarkupStream#isCurrentIndexInsideTheStream instead of MarkupStream#hasMore
","31/Jan/17 20:41;mgrigorov;I've set the ""Fix Version"" to 8.0.0 so we don't forget to finish this ticket before the final release. ","03/Feb/17 02:49;jira-bot;Commit c21b09bc83e31311f06e23d4871f48f19c57a7e0 in wicket's branch refs/heads/wicket-7.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c21b09b ]

WICKET-6165 addind and using MarkupStream#isCurrentIndexInsideTheStream instead of MarkupStream#hasMore
","03/Feb/17 02:54;jira-bot;Commit 3ac7cfcc9842c80caf9683a02efafd8a2732ec4b in wicket's branch refs/heads/wicket-6.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3ac7cfc ]

WICKET-6165 addind and using MarkupStream#isCurrentIndexInsideTheStream instead of MarkupStream#hasMore
",,,,,,,,,,,,,,,,,,,,,,,,,,,
7.6 release references 7.5-SNAPSHOT poms,WICKET-6314,13039174,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,jan.luehr@anderscore.com,jan.luehr@anderscore.com,31/Jan/17 13:10,31/Jan/17 20:33,13/Mar/19 23:18,31/Jan/17 20:33,7.6.0,,,,,,,,6.27.0,7.7.0,8.0.0-M4,,wicket,,,0,,,,,,,,"mvn install fails, due to referencing 7.5-SNAPSHOT dependencies

Error:
{code:none}
jan@Daisy:/tmp$ mvn archetype:generate -DarchetypeGroupId=org.apache.wicket -DarchetypeArtifactId=wicket-archetype-quickstart -DarchetypeVersion=7.6.0 -DgroupId=com.mycompany -DartifactId=myproject -DarchetypeRepository=https://repository.apache.org/ -DinteractiveMode=false                                                                                                                                                                                                                                                                            
[INFO] Scanning for projects...                                                                                                                                                                                                                                                
[INFO]                                                                                                                                                                                                                                                                         
[INFO] ------------------------------------------------------------------------                                                                                                                                                                                                
[INFO] Building Maven Stub Project (No POM) 1                                                                                                                                                                                                                                  
[INFO] ------------------------------------------------------------------------                                                                                                                                                                                                
[INFO]                                                                                                                                                                                                                                                                         
[INFO] >>> maven-archetype-plugin:2.4:generate (default-cli) @ standalone-pom >>>                                                                                                                                                                                              
[INFO]                                                                                                                                                                                                                                                                         
[INFO] <<< maven-archetype-plugin:2.4:generate (default-cli) @ standalone-pom <<<
[INFO] 
[INFO] --- maven-archetype-plugin:2.4:generate (default-cli) @ standalone-pom ---
[INFO] Generating project in Batch mode
[INFO] Archetype defined by properties
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating project from Archetype: wicket-archetype-quickstart:7.6.0
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: com.mycompany
[INFO] Parameter: artifactId, Value: myproject
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: package, Value: com.mycompany
[INFO] Parameter: packageInPathFormat, Value: com/mycompany
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: package, Value: com.mycompany
[INFO] Parameter: groupId, Value: com.mycompany
[INFO] Parameter: log4j.properties, Value: log4j2.xml
[INFO] Parameter: artifactId, Value: myproject
[INFO] project created from Archetype in dir: /tmp/myproject
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 0.671s
[INFO] Finished at: Tue Jan 31 14:03:07 CET 2017
[INFO] Final Memory: 13M/145M
[INFO] ------------------------------------------------------------------------
jan@Daisy:/tmp$ cd myproject/
jan@Daisy:/tmp/myproject$ ls -lh
total 12K
-rw-r--r-- 1 jan jan 5.5K Jan 31 14:03 pom.xml
drwxr-xr-x 4 jan jan 4.0K Jan 31 14:03 src
jan@Daisy:/tmp/myproject$ mvn install
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building quickstart 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
Downloading: https://repository.apache.org/content/repositories/snapshots/org/apache/wicket/wicket-core/7.5.0-SNAPSHOT/maven-metadata.xml
Downloading: https://repository.apache.org/content/repositories/snapshots/org/apache/wicket/wicket-core/7.5.0-SNAPSHOT/wicket-core-7.5.0-SNAPSHOT.pom
[WARNING] The POM for org.apache.wicket:wicket-core:jar:7.5.0-SNAPSHOT is missing, no dependency information available
Downloading: https://repository.apache.org/content/repositories/snapshots/org/apache/wicket/wicket-core/7.5.0-SNAPSHOT/wicket-core-7.5.0-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.348s
[INFO] Finished at: Tue Jan 31 14:03:21 CET 2017
[INFO] Final Memory: 9M/145M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal on project myproject: Could not resolve dependencies for project com.mycompany:myproject:war:1.0-SNAPSHOT: Could not find artifact org.apache.wicket:wicket-core:jar:7.5.0-SNAPSHOT in Apache Nexus (https://repository.apache.org/content/repositories/snapshots/) -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/DependencyResolutionException
{code}

Looking at myproject/pom.xml there is:
{code:xml}
<wicket.version>7.5.0-SNAPSHOT</wicket.version>
{code}
After changing this to 7.6.0 everything is fine.",Debian GNU/Linux Jessie,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-01-31 20:33:20.952,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jan 31 20:33:20 UTC 2017,,,,,,0|i39ezz:,9223372036854775807,,,,,,,,31/Jan/17 20:33;mgrigorov;Fixed by https://git1-us-west.apache.org/repos/asf?p=wicket.git;a=commit;h=86f7cb04.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Native Websocket exception when the page is expired,WICKET-6267,13017599,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,phenderson,phenderson,03/Nov/16 11:33,04/Jan/17 09:43,13/Mar/19 23:18,08/Nov/16 12:12,7.3.0,,,,,,,,7.6.0,8.0.0-M3,,,wicket-native-websocket,,,0,,,,,,,,"I have a Servlet session listener. When a session is destroyed a web socket broadcast message is sent (from a background worker thread). This can result in exception 



{quote}
2016-11-03 11:26:07.245 SEVERE oawpwa.AbstractWebSocketProcessor An error occurred during processing of a WebSocket message
java.lang.IllegalArgumentException: Argument 'component' may not be null.
        at org.apache.wicket.util.lang.Args.notNull(Args.java:41)
        at org.apache.wicket.protocol.ws.api.WebSocketRequestHandler.<init>(WebSocketRequestHandler.java:59)
        at org.apache.wicket.protocol.ws.WebSocketSettings.newWebSocketRequestHandler(WebSocketSettings.java:220)
        at org.apache.wicket.protocol.ws.api.AbstractWebSocketProcessor.broadcastMessage(AbstractWebSocketProcessor.java:245)
        at org.apache.wicket.protocol.ws.api.AbstractWebSocketConnection.sendMessage(AbstractWebSocketConnection.java:43)
        at org.apache.wicket.protocol.ws.api.WebSocketPushBroadcaster$1.run(WebSocketPushBroadcaster.java:124)
        at org.apache.wicket.protocol.ws.WebSocketSettings$SameThreadExecutor.run(WebSocketSettings.java:246)
        at org.apache.wicket.protocol.ws.api.WebSocketPushBroadcaster.process(WebSocketPushBroadcaster.java:119)
        at org.apache.wicket.protocol.ws.api.WebSocketPushBroadcaster.broadcastAll(WebSocketPushBroadcaster.java:109)
        at com.starjar.engine.LoggedInUserTrackerActor.broadcastStats(LoggedInUserTrackerActor.scala:69)
        at com.starjar.engine.LoggedInUserTrackerActor$$anonfun$receive$1.applyOrElse(LoggedInUserTrackerActor.scala:102)
        at akka.actor.Actor$class.aroundReceive(Actor.scala:467)
        at com.starjar.engine.LoggedInUserTrackerActor.aroundReceive(LoggedInUserTrackerActor.scala:31)
        at akka.actor.ActorCell.receiveMessage(ActorCell.scala:516)
        at akka.actor.ActorCell.invoke(ActorCell.scala:487)
        at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:238)
        at akka.dispatch.Mailbox.run(Mailbox.scala:220)
        at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)
        at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
        at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
        at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
        at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)
{quote}

see
[https://github.com/apache/wicket/blob/d9d142b0738e289e639165523c4190727e281519/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java#L310]


","Linux, tomcat 8.5.5 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-11-08 12:07:06.097,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Nov 08 12:11:26 UTC 2016,,,,,,0|i35sjj:,9223372036854775807,,,,,,,,"08/Nov/16 12:07;jira-bot;Commit 8effc799a947a5cb13fe35009beca5e5301f7ccd in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8effc79 ]

WICKET-6267 Native Websocket exception when the page is expired

Add a check for non-null page
","08/Nov/16 12:07;jira-bot;Commit ec4c95cfb9422f34461659c4fb5b74603af6a671 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ec4c95c ]

WICKET-6267 Native Websocket exception when the page is expired

Add a check for non-null page
","08/Nov/16 12:11;jira-bot;Commit a05bffd889380d0894ff9f04e3edb49975843dcd in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a05bffd ]

WICKET-6267 Native Websocket exception when the page is expired

Add a check for non-null page
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket should use the appropriate Locale for the context,WICKET-6273,13020217,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,cmenzel,cmenzel,cmenzel,11/Nov/16 23:25,25/Nov/16 13:09,13/Mar/19 23:18,25/Nov/16 13:09,7.4.0,8.0.0-M2,,,,,,,,,,,,,,0,,,,,,,,"On some systems (like my desktop ;-) ) there is not one single Locale, but rather different ones for text and formats. For example, I use en_US for nearly everything, but de_DE for formatting. In this situation, DurationTest fails, because DurationTest correctly uses NumberFormat.getNumberInstance, which uses Locale.getDefault(Locale.Category.FORMAT). Duration itself, however, just calls Locale.getDefault() and thus misses the difference. 

This is likely not an problem in production, since from the request and the session there is only one single locale per user anyway. But in testing and developing, this might sometimes be an issue. Best to also check the other uses of Locale.getDefault in the codebase.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-11-22 13:00:18.269,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Nov 23 16:33:03 UTC 2016,,,,,,0|i368p3:,9223372036854775807,,,,,,,,"22/Nov/16 13:00;githubbot;Github user duesenklipper commented on the issue:

    https://github.com/apache/wicket/pull/188
  
    Ticket is at https://issues.apache.org/jira/browse/WICKET-6273, and I went through the various calls to Locale.getDefault. What do you think?
","23/Nov/16 15:36;jira-bot;Commit 1ea7b7e44c73884abb6458c834988e1baa92f342 in wicket's branch refs/heads/wicket-7.x from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1ea7b7e ]

WICKET-6273 make BytesTest work with split locale
","23/Nov/16 15:36;jira-bot;Commit 16e097d25b5eba43db25bc59e9e8e62a4299e13b in wicket's branch refs/heads/wicket-7.x from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=16e097d ]

WICKET-6273 use formatting locale where appropriate
","23/Nov/16 16:32;jira-bot;Commit 056532206acd02f15c7727070a9ff160f2216bda in wicket's branch refs/heads/master from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0565322 ]

WICKET-6273 make BytesTest work with split locale
","23/Nov/16 16:33;jira-bot;Commit ce66c242ad83266a4f5c01363b4b446138b054e9 in wicket's branch refs/heads/master from [~cmenzel]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ce66c24 ]

WICKET-6273 use formatting locale where appropriate
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8.0.0-M1 <wicket:link> MarkupNotFoundException,WICKET-6256,13013811,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,gregjohnson,gregjohnson,20/Oct/16 09:58,09/Nov/16 04:53,13/Mar/19 23:18,27/Oct/16 12:56,7.5.0,8.0.0-M2,,,,,,,7.6.0,8.0.0-M3,,,wicket,,,0,,,,,,,,"On browser refresh, MarkupNotFoundException after 3rd render.

From the attached quickstart ...
* run Start.java
* localhost:8080/ - Home Page displays
* Press browser refresh - Home Page displays
* Press browser refresh - MarkupNotFoundException: Markup not found for Component: [TransparentWebMarkupContainer [Component id = wicket_link1]]

if the <wicket:link> tags are removed there is no problem. Note that there are no links, it is just the mere presence of the <wicket:link> tags that seems to cause the problem.
",,,,,,,,,,,,,,,,,,,,,,,,,20/Oct/16 09:59;gregjohnson;myproject.zip;https://issues.apache.org/jira/secure/attachment/12834366/myproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-10-26 16:20:12.444,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Oct 28 03:13:03 UTC 2016,,,,,,0|i3556n:,9223372036854775807,,,,,,,,"26/Oct/16 16:20;jira-bot;Commit ebc503324c8eabdf57d70c9294cf03d0f559564a in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ebc5033 ]

WICKET-6256 8.0.0-M1 <wicket:link> MarkupNotFoundException","26/Oct/16 18:37;bitstorm;[~gregjohnson] The problem should be fixed if you use snapshot release of version 8. Could you confirm this?
thank you.","27/Oct/16 10:37;jira-bot;Commit af9c68181fbb31c1f4e5bf9e12a13b838cc014de in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=af9c681 ]

WICKET-6256 8.0.0-M1 <wicket:link> MarkupNotFoundException","28/Oct/16 03:13;gregjohnson;Fixed, thank you :-)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wicket:enclosure and getVariation().,WICKET-6231,12999512,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,jvanheesch,jvanheesch,24/Aug/16 06:21,01/Nov/16 16:53,13/Mar/19 23:18,29/Aug/16 17:51,7.4.0,8.0.0-M1,,,,,,,7.5.0,8.0.0-M2,,,wicket,,,0,,,,,,,,"We have a panel with a child form.
When the form is submitted (via a link, textfield, ...),  the following events will happen:
* 1 call to form's onSubmit()
* n calls to panel's getVariation().
* reload of panel (with or without ajax).

If, however, there is a <wicket:enclosure> tag with a child (for example - a label) inside the form's markup, the following events will happen when the form is submitted:
* 1 call to panel's getVariation()
* 1 call to form's onSubmit()
* m calls to panel's getVariation().

The resulting problem:
The form (and its children) seem to be rendered using the markup file that was found as a result of the first call to getVariation(), while all other children
of the panel will be rendered using the markup file that was found as a result of a call to getVariation() that happened after the form's submission.

In our case - the form's submission causes the result of getVariation() to change, which results in incorrect markup (mixture of two markup files).",,,,,,,,,,,,,,,,,,,,,,,,,24/Aug/16 06:25;jvanheesch;myproject.zip;https://issues.apache.org/jira/secure/attachment/12825202/myproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-08-29 10:01:31.452,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Aug 29 15:28:30 UTC 2016,,,,,,0|i32p6n:,9223372036854775807,,,,,,,,24/Aug/16 06:25;jvanheesch;quickstart example,"29/Aug/16 10:01;jira-bot;Commit 961d6cde4fe6f434a44385a6dc5f5b187816f169 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=961d6cd ]

WICKET-6231 wicket:enclosure and getVariation().","29/Aug/16 12:50;jira-bot;Commit f1f34994c6637f9d49245204350a57a5dae76396 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f1f3499 ]

Revert ""WICKET-6231 wicket:enclosure and getVariation().""

This reverts commit 961d6cde4fe6f434a44385a6dc5f5b187816f169.
","29/Aug/16 13:34;jira-bot;Commit 286bf943de105c434babf92dd706772376a7338b in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=286bf94 ]

WICKET-6231 wicket:enclosure and getVariation().","29/Aug/16 15:28;jira-bot;Commit c9b98b77db80dc437474c83b08116a13b03bd3a4 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c9b98b7 ]

WICKET-6231 wicket:enclosure and getVariation().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Datepicker ""Close"" text overlays 'x' icon.",WICKET-5972,12857896,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,pedrosans,richaosu,richaosu,21/Aug/15 16:51,24/Sep/16 00:58,13/Mar/19 23:18,24/Sep/16 00:58,6.19.0,,,,,,,,6.25.0,7.5.0,8.0.0-M2,,wicket-datetime,,,0,,,,,,,,"The close button on the YUI datepicker displays ""Close"" on top of the 'x' icon. I believe the source statement is at line #2928 of calendar.js at org/apache/wicket/extensions/yui/:

{{lnk.innerHTML = '<span class=""' + cssClose + ' ' + this.Style.CSS_CLOSE + '"">' + closeStr + '</span>';}}

In the browser (Firefox), the issue is resoved when I remove the 'Close' text from the span contents.

{{<span class=""close-icon calclose"">Close</span>}}","Linux, Tomcat, Java 1.8, Firefox",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-09-06 00:06:11.674,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Sep 24 00:58:03 UTC 2016,,,,,,0|i2j7vz:,9223372036854775807,,,,,,,,"06/Sep/16 00:06;jira-bot;Commit bef134d31b1772ac6d9bb6aec5a513257b49bdf6 in wicket's branch refs/heads/wicket-6.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bef134d ]

WICKET-5972 no close label for Yahoo date picker by default
","06/Sep/16 00:12;pedrosans;Hi Richard, 

I couldn't reproduce the issue on my 47.0.1 Firefox. I noticed that Yahoo calendar uses a messy CSS to show the close span by both adding a default close label and a CSS to ignore it and to show only the background image width. I improved the default setup for the calendar by removing the ignored close label. Can you test Wicket's 6.x snapshot and see if it's fixed on your Firefox?

cheers","06/Sep/16 02:24;jira-bot;Commit 373ee1de419a0aad176be92a3fa132f28a62f50f in wicket's branch refs/heads/wicket-6.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=373ee1d ]

WICKET-5972 fixing DatePickerTest
","24/Sep/16 00:26;jira-bot;Commit 1f801ba7e829d4094b964962fee9b79f090b5e1a in wicket's branch refs/heads/master from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1f801ba ]

WICKET-5972 no close label for Yahoo date picker by default
","24/Sep/16 00:58;jira-bot;Commit 796255d77d22742760e80b0ebc136fafddbbe3bb in wicket's branch refs/heads/wicket-7.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=796255d ]

WICKET-5972 no close label for Yahoo date picker by default
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update the version of clirr-maven-plugin (current 2.6.1),WICKET-5836,12774973,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,klopfdreh,klopfdreh,13/Feb/15 18:00,20/Sep/16 19:40,13/Mar/19 23:18,20/Sep/16 19:39,6.20.0,7.0.0-M6,8.0.0-M1,,,,,,8.0.0-M2,,,,wicket,,,0,,,,,,,,"This ticket is targeting Wicket 6.x, 7.x, 8.x compiled with JDK 8, because the current version of the clirr plugin 2.6.1 isn't compatible with Java 8. At the moment there is no version higher then 2.6.1 so we have to wait until release.

More information can be found here: 

http://mail-archives.apache.org/mod_mbox/commons-dev/201407.mbox/%3CCACZkXPzS2nxtvK5sEJFyikvhP2817EY2b+7RAk0W_NUYzHA5BQ@mail.gmail.com%3E

http://mail-archives.apache.org/mod_mbox/commons-dev/201407.mbox/%3C11f48c22-60d5-4a94-8ed2-42cccfefaf2e@email.android.com%3E

Here the correlating tickets:

https://issues.apache.org/jira/browse/BCEL-173
https://issues.apache.org/jira/browse/BCEL-174
https://issues.apache.org/jira/browse/BCEL-175",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-02-13 22:18:05.455,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 20 19:40:38 UTC 2016,,,,,,0|i25m27:,9223372036854775807,,,,,,,,"13/Feb/15 20:40;klopfdreh;A possible workaround:
In wicket's parrent pom:
	<dependencies>
		<dependency>
		<groupId>org.apache.bcel</groupId>
		<artifactId>bcel</artifactId>
		<version>6.0-SNAPSHOT</version>		
	</dependency>

Plugin config:

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>clirr-maven-plugin</artifactId>
					<version>2.6.1</version>
					<configuration>
						<comparisonVersion>6.0.0</comparisonVersion>
						<failOnError>true</failOnError>
						<logResults>true</logResults>
						<ignored>
							<difference>
								<!-- FeedbackCollector used to be final. Now it is non-final and so all existing methods were made final to keep them non-overridable. However, clirr does not take into account the class going from final to non-final and thinks overridable methods were made final. We ignore this change to silence it. -->
								<className>org${file.separator}apache${file.separator}wicket${file.separator}feedback${file.separator}FeedbackCollector</className>
								<method>*</method>
								<differenceType>7014</differenceType>
							</difference>
						</ignored>
						
					</configuration>
					<executions>
						<execution>
							<id>clirr-check</id>
							<phase>compile</phase>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>org.apache.bcel</groupId>
							<artifactId>bcel</artifactId>
							<version>6.0-SNAPSHOT</version>		
						</dependency>
					</dependencies>
					
				</plugin>

Repository:

<repositories>
    <repository>
        <releases>
            <enabled>false</enabled>
        </releases>
        <snapshots>
            <enabled>true</enabled>
        </snapshots>
        <id>apache.snapshots</id>
        <name>Apache Snapshot Repository</name>
        <url>https://repository.apache.org/content/groups/snapshots</url>
        <layout>default</layout>
    </repository>
</repositories>","13/Feb/15 20:46;klopfdreh;The previous solution should not be committed, but it shows how to solve the issue building wicket with java 8.","13/Feb/15 22:18;mgrigorov;Thanks for the investigation, Tobias!

Another option for everyone who wants to build Wicket 6.x (and 7.0.1+, once released) with JDK 1.8 is to add ""-Dclirr.skip"".

I believe clirr-maven-plugin will be updated by the time we release Wicket 8.0.1 (the first version built officially with JDK 8 and with enabled Clirr plugin).","03/May/16 06:24;klopfdreh;Hi Martin,

short update: https://github.com/mojohaus/clirr-maven-plugin/issues/3

kind regards

Tobias","03/May/16 06:49;mgrigorov;Hi Tobias,

I am watching C-M-P project too.
The plugin won't be enabled in Wicket until 8.0.0 so we have some more time.","20/Sep/16 19:39;jira-bot;Commit 8538df05c460d5e07da5585310cbe975bb4d838f in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8538df0 ]

WICKET-5836 Update the version of clirr-maven-plugin
",20/Sep/16 19:39;mgrigorov;Upgraded it to 2.8 which works on Java 8.,20/Sep/16 19:40;klopfdreh;Yay! Great! Thanks a lot Martin.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pub2 Wicket example isn't switching the beer images,WICKET-6238,13003104,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,pedrosans,pedrosans,pedrosans,07/Sep/16 04:09,14/Sep/16 03:25,13/Mar/19 23:18,14/Sep/16 03:25,7.4.0,8.0.0-M1,,,,,,,7.5.0,8.0.0-M2,,,wicket-examples,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2016-09-07 04:09:24.0,,,,,,0|i33bbj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Files.remove() causes a 5 seconds delay instead of 500ms as was intended,WICKET-6236,13002434,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,pedrosans,eloyar,eloyar,02/Sep/16 18:31,07/Sep/16 03:13,13/Mar/19 23:18,05/Sep/16 08:16,6.23.0,6.24.0,,,,,,,6.25.0,7.5.0,8.0.0-M2,,wicket,,,0,delay,delete,files,sleep,,,,"The method Files.remove(final java.io.File file) has a cycle for trying to delete a file.
As Javadoc says, it was intended to re-try 50 times, with a delay of 100ms at each 10th attemp (implemented with 2 cycles, one inside another), but acctually it has a 100ms delay EACH time, because the sleep is inside the inner cycle. This produces a delay of 5 secs for each file, and if you have about 10 files it's a lot of time (about a minute).

In windows using a page that has a model with a list of FileUpload, it tries to delete the files each time it recovers the Page from PageStore, and (I dont know why) can't delete any of the files, resulting in the mentioned delay. (in linux it works without problem)

Besides the problem with windows locking the files, If the cycle works as intended (the sleep in the outer cycle), the problem will be smaller.

",Windows 7,600,600,,0%,600,600,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-09-05 07:31:54.129,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Sep 07 03:13:31 UTC 2016,,,,,,0|i3376v:,9223372036854775807,,,,,,,,"05/Sep/16 07:31;jira-bot;Commit 8b4aaa05e9b3526062f7db663b2881322ae87242 in wicket's branch refs/heads/wicket-6.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8b4aaa0 ]

WICKET-6236 honoring the javadoc by putting a wait only after the 10th failed attempt to delete a file
","05/Sep/16 07:58;jira-bot;Commit 7d3b7a8660801c7024b863c971c701c7336fefa9 in wicket's branch refs/heads/wicket-7.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7d3b7a8 ]

WICKET-6236 honoring the javadoc by putting a wait only after the 10th failed attempt to delete a file
","05/Sep/16 08:06;jira-bot;Commit 03bacf49dad8371fbf3c935119e29a0b2b5d5b48 in wicket's branch refs/heads/master from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=03bacf4 ]

WICKET-6236 honoring the javadoc by putting a wait only after the 10th failed attempt to delete a file
","05/Sep/16 19:49;jira-bot;Commit 5d5af682d061565dbcb8e443e96b515404da7297 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5d5af68 ]

WICKET-6236 honoring the javadoc by putting a wait only after the 10th failed attempt to delete a file

Scope of Hamcrest must be 'test' (inherited).
","07/Sep/16 03:13;jira-bot;Commit 3b42b19973d49141301e9ce79a155968b4111634 in wicket's branch refs/heads/wicket-7.x from Pedro Henrique Oliveira dos Santos
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3b42b19 ]

WICKET-6236 honoring the javadoc by putting a wait only after the 10th failed attempt to delete a file
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aautocomplete suggestion window is not closing in IE11,WICKET-6175,12974441,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,ravala,ravala,01/Jun/16 05:26,30/Aug/16 03:53,13/Mar/19 23:18,02/Jun/16 09:29,6.23.0,7.3.0,,,,,,,6.24.0,7.4.0,8.0.0-M1,,wicket,,,0,,,,,,,,"The fix for this call( https://issues.apache.org/jira/browse/WICKET-5882 ) resulted in not closing the suggestion window in IE, 
when suggestion window has a horizontal scroll bar and if we make the horizontal scroll,
and then if we click on outside the autocomplete suggestion window it is not closing.",windows 7,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-06-01 17:15:03.241,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jun 17 16:34:43 UTC 2016,,,,,,0|i2yry7:,9223372036854775807,,,,,,,,"01/Jun/16 17:15;jira-bot;Commit 6a870dba4bc0b4cac8748b1cd8381ca049529a54 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6a870db ]

WICKET-6175 Aautocomplete suggestion window is not closing in IE11
","01/Jun/16 19:25;jira-bot;Commit 39fb20b112e2005dab8e17667e5a763b1d89f18e in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=39fb20b ]

WICKET-6175 Aautocomplete suggestion window is not closing in IE11
","02/Jun/16 17:19;jira-bot;Commit c373c2d433c38fefdabd708389324e8dffee0e53 in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c373c2d ]

WICKET-6175 Aautocomplete suggestion window is not closing in IE11
","17/Jun/16 16:34;jira-bot;Commit e70e662d8fdfe13821789fe7bd6cf50850f35263 in wicket's branch refs/heads/WICKET-6183 from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e70e662 ]

WICKET-6175 Aautocomplete suggestion window is not closing in IE11
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When sending binary data from server to client, wicket-websocket-jquery.js throws error ""message.indexOf is not a function""",WICKET-6232,12999627,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,cquarters,cquarters,24/Aug/16 10:44,28/Aug/16 21:39,13/Mar/19 23:18,24/Aug/16 22:11,7.4.0,,,,,,,,6.25.0,7.5.0,8.0.0-M2,,wicket-native-websocket,,,0,,,,,,,,"On the server I'm calling this method
org.apache.wicket.protocol.ws.api.IWebSocketConnection.sendMessage(byte[] message, int offset, int length)

The Wicket javascript client code (wicket-websocket-jquery.js) assumes the incoming message is a string and attempts to detect if it's an ajax response.

self.ws.onmessage = function (event) {
  var message = event.data;
  if (message && message.indexOf('<ajax-response>') > -1) {
    var call = new Wicket.Ajax.Call();
    call.process(message);
  }
  else {
    Wicket.Event.publish(topics.Message, message);
  }
};

https://github.com/apache/wicket/blob/master/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/res/js/wicket-websocket-jquery.js",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-24 22:11:06.964,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Aug 28 21:39:35 UTC 2016,,,,,,0|i32pw7:,9223372036854775807,,,,,,,,"24/Aug/16 22:11;jira-bot;Commit f4a6996aa4c3240b31ba191ef396864bf0dfad6c in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f4a6996 ]

WICKET-6232 When sending binary data from server to client, wicket-websocket-jquery.js throws error ""message.indexOf is not a function""
",24/Aug/16 22:11;mgrigorov;Thank you!,"24/Aug/16 22:12;jira-bot;Commit 8735f99905f6a859b9886b80a467abe6d3dde490 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8735f99 ]

WICKET-6232 When sending binary data from server to client, wicket-websocket-jquery.js throws error ""message.indexOf is not a function""
","28/Aug/16 21:39;jira-bot;Commit 650106fa26f15e701e7a5bc796fb44a0c8ba4c36 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=650106f ]

WICKET-6232 When sending binary data from server to client, wicket-websocket-jquery.js throws error ""message.indexOf is not a function""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TagTester incomplete support for void elements,WICKET-6220,12993727,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,30/Jul/16 08:34,07/Aug/16 10:00,13/Mar/19 23:18,07/Aug/16 10:00,6.24.0,7.4.0,8.0.0-M1,,,,,,8.0.0-M2,,,,wicket,,,0,,,,,,,,"Support for void elements added with WICKET-5874 and WICKET-6172 is still incomplete, e.g. getValue() throws IndexOutOfBoundsException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-30 08:47:29.867,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Aug 07 10:00:02 UTC 2016,,,,,,0|i31phz:,9223372036854775807,,,,,,,,"30/Jul/16 08:47;jira-bot;Commit b27e6aca99519fa88bfea4f653a528cd41bc5c75 in wicket's branch refs/heads/WICKET-6220-tag-tester-void-elements from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b27e6ac ]

WICKET-6220 value of void element should be null
","01/Aug/16 08:49;jira-bot;Commit 069735395955b6a68347fae61217df05811d8a43 in wicket's branch refs/heads/WICKET-6220-tag-tester-void-elements from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0697353 ]

WICKET-6220 improved support for void elements; unified code for createTagsXXX and createTagXX
","07/Aug/16 09:57;jira-bot;Commit 86256b0ad8137f2afe4f124e92779aaa0f6c46e3 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=86256b0 ]

WICKET-6220 value of void element should be null
","07/Aug/16 09:57;jira-bot;Commit e173e8c07a4bf2437a35bdb05fdfa1762ba8f590 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e173e8c ]

WICKET-6220 improved support for void elements; unified code for createTagsXX and createTagXX
","07/Aug/16 10:00;svenmeier;It's time to clean up all that code duplication in TagTester to get consistent results for void elements.
Since this is an Api break and my solution depends on Java 8 lambdas, the improvement is applied to Wicket 8.x only.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistent results from getTag[s]ByWicketId,WICKET-6172,12972414,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,boris@alum.mit.edu,boris@alum.mit.edu,24/May/16 15:30,27/Jul/16 21:21,13/Mar/19 23:18,26/May/16 17:07,,,,,,,,,6.24.0,7.4.0,8.0.0-M1,,wicket,,,0,,,,,,,,"The change in WICKET-5874 alters the behavior for getTagByWicketId but not getTagsByWicketId .  Thus for markup like this:

<div><img ...></div>

getTagByWicketId will return the img tag, but getTagsByWicketId will return an empty list, which feels very inconsistent.

Since HTML5 made the /> syntax optional for void elements like input and img, the XmlPullParser probably needs to be replaced with something that can parse HTML5.  The fix in WICKET-5874 does not seem sufficient.

",,,,,,,,,,,,,,,,,,,,,,,,,24/May/16 17:19;boris@alum.mit.edu;tag-tester-quickstart.zip;https://issues.apache.org/jira/secure/attachment/12805928/tag-tester-quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-05-24 15:42:37.523,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jul 27 21:21:14 UTC 2016,,,,,,0|i2yfgf:,9223372036854775807,,,,,,,,24/May/16 15:42;mgrigorov;Please provide a test case.,"24/May/16 17:19;boris@alum.mit.edu;Quickstart showing the issue.
Both ""logo"" tests should pass, but only one does.
","26/May/16 17:06;jira-bot;Commit 2ef6f14ed4a57567d6dc6b3131254ff8884fecab in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2ef6f14 ]

WICKET-6172 Inconsistent results from getTag[s]ByWicketId
","26/May/16 17:07;jira-bot;Commit 0b4907fe660d6e706b14255882bf947f264f3a8c in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0b4907f ]

WICKET-6172 Inconsistent results from getTag[s]ByWicketId
",26/May/16 17:07;mgrigorov;Thanks!,"26/May/16 17:07;jira-bot;Commit 447f887813fe3cd883d2e368c1ca976f18c4ccc4 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=447f887 ]

WICKET-6172 Inconsistent results from getTag[s]ByWicketId
","31/May/16 20:37;jira-bot;Commit 7febb298bc91b0619a162fb1271a69eff8aedf1a in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7febb29 ]

WICKET-6173 WICKET-6172 makes TagTester.createTagsByAttribute stop
working","31/May/16 20:41;jira-bot;Commit 8fe5a70d70c9a512fbfd35df9915ecea0237f548 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8fe5a70 ]

WICKET-6173 WICKET-6172 makes TagTester.createTagsByAttribute stop
working","17/Jun/16 16:34;jira-bot;Commit 7eced629a6b5ec6ee6be18da29efede1cc05714b in wicket's branch refs/heads/WICKET-6183 from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7eced62 ]

WICKET-6172 Inconsistent results from getTag[s]ByWicketId
","17/Jun/16 16:34;jira-bot;Commit 86009a4436cf76b76a12e3c7f4dcb886c2041cf0 in wicket's branch refs/heads/WICKET-6183 from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=86009a4 ]

WICKET-6173 WICKET-6172 makes TagTester.createTagsByAttribute stop
working","27/Jul/16 21:21;jira-bot;Commit 996e17c3c625411c14206c14cf6a6ac4e2296dc7 in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=996e17c ]

WICKET-6173 WICKET-6172 makes TagTester.createTagsByAttribute stop
working",,,,,,,,,,,,,,,,,,,,,,,,,
ModalWindow broken on IE,WICKET-6214,12991769,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,22/Jul/16 10:30,24/Jul/16 18:55,13/Mar/19 23:18,24/Jul/16 18:55,6.23.0,6.24.0,,,,,,,6.25.0,7.5.0,8.0.0-M2,,wicket,,,0,,,,,,,,"Since WICKET-6108 wicket-event-jquery.js no longer fixes passed in events:

{code}
	fix: function (evt) {
-		var evnt = evt || window.event;
-		return jQuery.event.fix(evnt);
+		return evt || jQuery.event.fix(window.event);
 	},
{code}

But modal.js directly invokes {{Wicket.Event#stop()}}:

{code}
 	onmousedown=\""Wicket.Event.stop(event);\""
{code}

Thus the event is not 'fixed', but {{#stopPropagation()}} is called on it:

{code}
	stop: function (evt, immediate) {
		evt = Wicket.Event.fix(evt);
		if (immediate) {
			evt.stopImmediatePropagation();
		} else {
			evt.stopPropagation();
		}
		return evt;
	},
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-22 12:35:08.636,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Jul 24 18:55:48 UTC 2016,,,,,,0|i31dev:,9223372036854775807,,,,,,,,"22/Jul/16 10:55;svenmeier;I wonder whether {{#fix()}} should actually read (similar as before):

{code}
	fix: function (evt) {
		return jQuery.event.fix(evt || window.event);
 	},
{code}","22/Jul/16 12:35;mgrigorov;I don't have time to check now but AFAIR one of the jQuery core devs recommended to not try to ""fix"" already ""fixed"" event. I.e. event passed by jQuery event listener should not be fixed.","22/Jul/16 12:55;svenmeier;Seems like jQuery has a guard against double ""fixing"":

{code}
	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},
{code}
https://github.com/jquery/jquery/blob/master/src/event.js#L437","24/Jul/16 18:55;svenmeier;Event.fix() is now reverted to the previous behavior, e.g. always fix the event.

To my reading jQuery does not re-fix an already fixed event, so there is no danger in calling it again.

Although we could fix ModalWindow instead, IMHO we should not change the behavior of this method, as we don't know who is calling it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
requesting focus on disabled field fails with error in IE8,WICKET-6209,12990567,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,18/Jul/16 21:39,19/Jul/16 22:14,13/Mar/19 23:18,19/Jul/16 21:34,6.23.0,7.3.0,8.0.0-M2,,,,,,6.25.0,7.5.0,8.0.0-M2,,wicket,,,0,,,,,,,,"IE8 reports an error when focus is set on a *then* disabled component:

- user clicks AjaxCheckBox
- server disables checkbox and updates it via ART
- wicket-ajax-jquery.js tries to restore focus

This problem occurs since WIcket 6.20, presumably caused by WICKET-5858.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-19 21:32:39.515,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jul 19 22:14:39 UTC 2016,,,,,,0|i315zz:,9223372036854775807,,,,,,,,19/Jul/16 20:16;svenmeier;the try-catch has no effect any more because of the #setTimeout() call,"19/Jul/16 21:32;jira-bot;Commit 7fe591fa301f4e7da65141643c428ea9a3f01aa6 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7fe591f ]

WICKET-6209 move try-catch into function which is invoked via #setTimeout(), so IE errors get caught

;removed workaround for WicketWICKET-5755, i.e. directly call #requestFocus() since it now always uses #setTimeout() to request focus (see WICKET-5858)
","19/Jul/16 21:32;jira-bot;Commit 294de69449850b761f647a57fd13a46265aa4cb9 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=294de69 ]

WICKET-6209 move try-catch into function which is invoked via #setTimeout(), so IE errors get caught

;removed workaround for WicketWICKET-5755, i.e. directly call #requestFocus() since it now always uses #setTimeout() to request focus (see WICKET-5858)
","19/Jul/16 21:33;jira-bot;Commit 4d10d11a7894617364d23ac3a4f3068a60f7ec62 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4d10d11 ]

WICKET-6209 move try-catch into function which is invoked via #setTimeout(), so IE errors get caught

;removed workaround for WicketWICKET-5755, i.e. directly call #requestFocus() since it now always uses #setTimeout() to request focus (see WICKET-5858)
",19/Jul/16 21:34;svenmeier;try-catch wraps #focus() again,"19/Jul/16 22:14;jira-bot;Commit b93e1ba557f85cdbf77fd44a14721918feb23910 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b93e1ba ]

WICKET-6209 move try-catch into function which is invoked via #setTimeout(), so IE errors get caught

;removed workaround for WicketWICKET-5755, i.e. directly call #requestFocus() since it now always uses #setTimeout() to request focus (see WICKET-5858)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to disable a MultiFileUploadField,WICKET-6198,12987492,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,stevenbaldet@gmail.com,stevenbaldet@gmail.com,07/Jul/16 13:51,08/Jul/16 08:53,13/Mar/19 23:18,07/Jul/16 14:31,7.3.0,8.0.0-M1,,,,,,,7.4.0,8.0.0-M2,,,wicket,,,0,,,,,,,,"I want to disable a MultiFileUploadField but the button (input type file) is still enable and it's possible to click and open the file selection dialog.

If I edit html manually, it's possible to disable the button.

I will attach a quickstart.

Best Regards,

",,,,,,,,,,,,,,,,,,,,,,,,,07/Jul/16 13:52;stevenbaldet@gmail.com;uploadfile.7z;https://issues.apache.org/jira/secure/attachment/12816630/uploadfile.7z,,,,1.0,,,,,,,,,,,,,,,,,,,2016-07-07 14:29:31.827,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jul 08 08:53:29 UTC 2016,,,,,,0|i30njz:,9223372036854775807,,,,,,,,"07/Jul/16 14:29;jira-bot;Commit 5903e4968afa9b5eb1a029c2bce6cc954210344e in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5903e49 ]

WICKET-6198 disabled MultiFileUploadField
","07/Jul/16 14:30;jira-bot;Commit 123f282c9d20a7610c1a5c74d8aaaddbd4df4505 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=123f282 ]

WICKET-6198 disabled MultiFileUploadField
",07/Jul/16 14:31;svenmeier;Thanks!,08/Jul/16 08:53;stevenbaldet@gmail.com;Thanks for the quick fix ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CheckingObjectOutputStream broken in Wicket 7,WICKET-6196,12986819,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,jonas,jonas,05/Jul/16 13:59,05/Jul/16 20:39,13/Mar/19 23:18,05/Jul/16 20:39,7.3.0,8.0.0-M1,,,,,,,7.4.0,8.0.0-M2,,,,,,0,,,,,,,,"CheckingObjectOutputStream seems to be broken in Wicket 7: child components of pages no longer seem to be checked.
The issue can be reproduced by slightly changing org.apache.wicket.core.util.objects.checker:SessionCheckerTest:

line 55 should read

    byte[] serialized = serializer.serialize(new InternalErrorPage().add(component));

(i.e. the serialized component is added to an InternalErrorPage first)

The test fails and the serialized session is no longer detected.

The same code on Wicket 6 works just fine.","Wicket 7.3.0, jre 1.8.0_92 (32 bit), win 7 (64 bit)",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-05 20:36:34.405,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Jul 05 20:39:47 UTC 2016,,,,,,0|i30jef:,9223372036854775807,,,,,,,,"05/Jul/16 20:36;jira-bot;Commit fdbb57b11bb5d643b49e57bc19056e70db43995e in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fdbb57b ]

WICKET-6196 mark object checked after checking it
","05/Jul/16 20:37;jira-bot;Commit 6faabe45a6973d7e65146a3dbad8b1d37fd9a2d4 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6faabe4 ]

WICKET-6196 mark object checked after checking it
",05/Jul/16 20:39;svenmeier;Many thanks Jonas for your investigation!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Browser/Client info navigatorJavaEnabled property returns undefined,WICKET-6174,12974438,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,ravala,ravala,01/Jun/16 05:18,17/Jun/16 16:34,13/Mar/19 23:18,01/Jun/16 19:23,6.23.0,7.3.0,8.0.0-M1,,,,,,6.24.0,7.4.0,8.0.0-M1,,wicket,,,0,,,,,,,,"Hi, 

I was trying to use WebClientInfo to get browser information on the server, In the IPAD Chrome 
when retrieving  'navigatorJavaEnabled' is returning 'undefined' instead of true/false. 

The problem is as  'undefined' is string but server is expecting boolean, leads to exception and causing  browser to reload continuously. 

possible solution 

In wicket-browser-info.js 
-------------------------------------- 
info.navigatorJavaEnabled = window.navigator.javaEnabled() || false; 

Also posted the same in wicket forum:
http://apache-wicket.1842946.n4.nabble.com/Browser-Client-info-navigatorJavaEnabled-property-returns-undefined-td4674794.html",Ipad chrome browser,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-06-01 19:18:40.406,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jun 17 16:34:44 UTC 2016,,,,,,0|i2yrxj:,9223372036854775807,,,,,,,,"01/Jun/16 19:18;jira-bot;Commit fc2f2a829491b255939e9175ab3b7edeacb137d9 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fc2f2a8 ]

WICKET-6174 guard against #javaEnabled() returning undefined
","01/Jun/16 19:20;jira-bot;Commit 46b22ea86f92d15c090577a673346130d22d8859 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=46b22ea ]

WICKET-6174 guard against #javaEnabled() returning undefined
","01/Jun/16 19:22;jira-bot;Commit 877aaa1ae43581d18082b9202331e1523ded5621 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=877aaa1 ]

WICKET-6174 guard against #javaEnabled() returning undefined
",01/Jun/16 19:23;svenmeier;Thanks!,"17/Jun/16 16:34;jira-bot;Commit db90877cca819c7675d88eae80aa3b4eb315fac2 in wicket's branch refs/heads/WICKET-6183 from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=db90877 ]

WICKET-6174 guard against #javaEnabled() returning undefined
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revert the removal of the default error message when uploading too big files,WICKET-6181,12979984,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,mgrigorov,mgrigorov,16/Jun/16 20:35,17/Jun/16 07:47,13/Mar/19 23:18,17/Jun/16 07:47,6.23.0,,,,,,,,6.24.0,,,,wicket,,,0,,,,,,,,"With WICKET-5735 the default error message for ""form upload too big"" has been removed unintentionally:

In 6.17.0:
final String defaultValue = ""Upload must be less than "" + getMaxSize();
String msg = getString(getId() + '.' + UPLOAD_TOO_LARGE_RESOURCE_KEY,
Model.ofMap(model), defaultValue)

While in 6.23.0:
String msg = getString(getId() + '.' + UPLOAD_TOO_LARGE_RESOURCE_KEY,
Model.ofMap(model));

This makes it hard to specify an error message when using nested forms and the inner form has FileUploadField.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-06-17 07:47:10.244,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Jun 17 07:47:10 UTC 2016,,,,,,0|i2zlcv:,9223372036854775807,,,,,,,,"17/Jun/16 07:47;jira-bot;Commit 46220db46669affbd03d75c0273208fa474eadcf in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=46220db ]

WICKET-6181 Revert the removal of the default error message when uploading too big files
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Newline in ModalWindow title ,WICKET-6155,12964277,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,ramonvs,ramonvs,02/May/16 12:17,20/May/16 17:26,13/Mar/19 23:18,20/May/16 17:26,6.22.0,7.2.0,8.0.0-M1,,,,,,6.23.0,7.4.0,8.0.0-M1,,wicket-extensions,,,0,,,,,,,,"Setting a newline (\n) in the title of ModalWindow crashes, because the newline is used unescaped in JavaScript (only HTML is escaped) and breaks the generated string literal.

Reproduction steps:

Create the modal-window example project.
Change the title:
 
    add(modal1 = new ModalWindow(""modal1""));
    modal1.setTitle(""modal title\n with newline"");

Start the application and open the modal window.

    Exception evaluating javascript: SyntaxError: unterminated string literal, text: (function(){var settings = new Object();
    ...
    settings.cookieId=""modal-1"";
    settings.title=""modal title
 with newline"";
    ...

Note that the newline ends up unescaped. The string literal generation code is in getWindowOpenJavaScript#getWindowOpenJavaScript()

    String title = getTitle() != null ? getTitle().getObject() : null;
    if (title != null)
    {
        String escaped = getDefaultModelObjectAsString(title);
        appendAssignment(buffer, ""settings.title"", escaped);
    }

getDefaultModelObjectAsString does escape HTML (if flag is set), but does not escape the JavaScript.

Perhaps #appendAssignment() should escape the value?

Same for the characters \ and \r

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-20 17:23:15.862,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri May 20 17:26:44 UTC 2016,,,,,,0|i2x1db:,9223372036854775807,,,,,,,,02/May/16 12:19;ramonvs;Related to WICKET-6037,"20/May/16 17:23;jira-bot;Commit c3468068b8e13c36438e07c8b8d73ec2419076a5 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c346806 ]

WICKET-6155 escape JavaScript object values
","20/May/16 17:23;jira-bot;Commit e1157cb783cb82d791bdf97869d4924bd369a1f0 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e1157cb ]

WICKET-6155 use JSON for settings
","20/May/16 17:23;jira-bot;Commit 4535aec9dffdcf88f06dba207fb7d7a19108466b in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4535aec ]

WICKET-6155 escape JavaScript object values
","20/May/16 17:24;jira-bot;Commit 9198d06a6fe4011139f5c488b48aaee72ce489c3 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9198d06 ]

WICKET-6155 escape JavaScript object values
","20/May/16 17:26;svenmeier;All JavaScript string values are now properly escaped, in 8.x ModalWindow uses a JSONObject for the settings now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WicketTester and application servers are destroying app differently,WICKET-6157,12964411,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,phantom,phantom,02/May/16 19:12,06/May/16 21:56,13/Mar/19 23:18,06/May/16 21:56,7.2.0,8.0.0-M1,,,,,,,7.4.0,8.0.0-M1,,,wicket,,,0,wicket-tester,,,,,,,"It's easy to recieve NPE because of absence of App in context in test during destroying app and it's OK on real app. The reason is the following:

Wicket Test has just this code:

```
	public void destroy()
	{
		application.internalDestroy();
		ThreadContext.detach();
	}
```

But real filter has this one:

```
@Override
	public void destroy()
	{
		if (application != null)
		{
			try
			{
				ThreadContext.setApplication(application);
				application.internalDestroy();
			}
			finally
			{
				ThreadContext.detach();
				application = null;
			}
		}

		if (applicationFactory != null)
		{
			try
			{
				applicationFactory.destroy(this);
			}
			finally
			{
				applicationFactory = null;
			}
		}
	}
```

So, as you can see filter explicitly setting app, so NPE would not happen, but wicket tester do not. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-06 16:13:28.655,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri May 06 20:14:15 UTC 2016,,,,,,0|i2x273:,9223372036854775807,,,,,,,,"02/May/16 19:17;phantom;Original exception in my case (which is absent in case of real app):

[ERROR] (2016-05-02 12:15:41,408) ModuledDataInstallator: Exception during destroying module 'devutils'
org.apache.wicket.WicketRuntimeException: There is no application attached to current thread Thread-6
	at org.apache.wicket.Application.get(Application.java:236)
	at org.apache.wicket.core.request.mapper.AbstractComponentMapper.getContext(AbstractComponentMapper.java:47)
	at org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper.processBookmarkable(AbstractBookmarkableMapper.java:239)
	at org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper.mapRequest(AbstractBookmarkableMapper.java:358)
	at org.apache.wicket.protocol.http.WebApplication.unmountFromCompound(WebApplication.java:468)
	at org.apache.wicket.protocol.http.WebApplication.unmount(WebApplication.java:449)
	at org.orienteer.core.OrienteerWebApplication.mountOrUnmountPages(OrienteerWebApplication.java:293)
	at org.orienteer.core.OrienteerWebApplication.unmountPages(OrienteerWebApplication.java:263)
	at org.orienteer.core.OrienteerWebApplication.unmountPages(OrienteerWebApplication.java:259)
	at org.orienteer.devutils.Module.onDestroy(Module.java:41)
	at org.orienteer.core.module.AbstractOrienteerModule.onDestroy(AbstractOrienteerModule.java:105)
	at org.orienteer.core.module.ModuledDataInstallator.onBeforeDestroyed(ModuledDataInstallator.java:135)
	at org.apache.wicket.ApplicationListenerCollection$2.notify(ApplicationListenerCollection.java:52)
	at org.apache.wicket.ApplicationListenerCollection$2.notify(ApplicationListenerCollection.java:48)
	at org.apache.wicket.util.listener.ListenerCollection$1.notify(ListenerCollection.java:120)
	at org.apache.wicket.util.listener.ListenerCollection.reversedNotify(ListenerCollection.java:144)
	at org.apache.wicket.util.listener.ListenerCollection.reversedNotifyIgnoringExceptions(ListenerCollection.java:113)
	at org.apache.wicket.ApplicationListenerCollection.onBeforeDestroyed(ApplicationListenerCollection.java:47)
	at org.apache.wicket.Application.internalDestroy(Application.java:776)
	at org.apache.wicket.protocol.http.WebApplication.internalDestroy(WebApplication.java:704)
	at org.apache.wicket.util.tester.BaseWicketTester.destroy(BaseWicketTester.java:620)
	at org.orienteer.junit.StaticInjectorProvider$1.run(StaticInjectorProvider.java:35)
","06/May/16 16:13;jira-bot;Commit 8361b8bee3b83a61630ff397d1aa84e0748e8e27 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=8361b8b ]

WICKET-6157 WicketTester and application servers are destroying app differently
","06/May/16 20:14;jira-bot;Commit 95863397de43ca4e42cd6649577ea1f279c53c3b in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9586339 ]

WICKET-6157 WicketTester and application servers are destroying app differently
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing type for MediaComponent causing iOS devices not to be able to play videos,WICKET-6160,12964758,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,klopfdreh,klopfdreh,klopfdreh,03/May/16 19:33,03/May/16 20:39,13/Mar/19 23:18,03/May/16 19:57,7.2.0,8.0.0,,,,,,,7.4.0,8.0.0-M1,,,wicket,wicket-examples,,0,,,,,,,,"Because of a missing option to set the type for MediaComponents - Video / Audio can't be played on iOS devices.

If you want to enable it with the Wicket 7.2.0 you have to override the onComponentTag method:
{code}
	@Override
	protected void onComponentTag(ComponentTag tag)
	{
		super.onComponentTag(tag);
                tag.put(""type"", ""video/mp4"");
	}
{code}

See Table 10-1  File name extensions for MIME types:

https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariWebContent/CreatingVideoforSafarioniPhone/CreatingVideoforSafarioniPhone.html#//apple_ref/doc/uid/TP40006514-SW6

I used remote debugging of iOS Safari / Mac OS X to check if all videos are playing, now.

http://moduscreate.com/enable-remote-web-inspector-in-ios-6/ (for iOS 9 very similar)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-03 19:47:19.878,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue May 03 20:39:06 UTC 2016,,,,,,0|i2x4c7:,9223372036854775807,,,,,,,,"03/May/16 19:47;jira-bot;Commit b3c813c5ceeb06095438d51f467cf9df7b8404ec in wicket's branch refs/heads/wicket-7.x from [~klopfdreh]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b3c813c ]

WICKET-6160","03/May/16 19:51;jira-bot;Commit 89c1290cb007f14c13c1d6d6648a8c0a090a97b2 in wicket's branch refs/heads/master from [~klopfdreh]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=89c1290 ]

WICKET-6160","03/May/16 19:59;klopfdreh;[~mgrigorov] - I can't set the Fix Version/s to 7.4.0 - because 7.3.0 is going to be released, soon I think this change is not going to make it in 7.3.0 anymore. Would you be so kind and help me out with this?

Thanks a lot! :-)","03/May/16 20:36;mgrigorov;Next time just type the new version manually, i.e. do not select it from the drop-down ;-)",03/May/16 20:39;klopfdreh;That easy? Impossible! :-) - Thank you,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DebugBar/PageSizeDebugPanel throws NullPointerException (need wrapper exception with more detail),WICKET-6151,12961659,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,ceefour,ceefour,22/Apr/16 14:34,22/Apr/16 21:16,13/Mar/19 23:18,22/Apr/16 21:16,7.2.0,,,,,,,,7.3.0,8.0.0-M1,,,wicket-devutils,,,0,,,,,,,,"Probably due to unserializable model somewhere... in which case Wicket should give an explanation error.

{noformat}
org.apache.wicket.WicketRuntimeException
Exception in rendering component: [Component id = data]
at org.apache.wicket.Component.internalRenderComponent(Component.java:2589)
at org.apache.wicket.markup.html.WebComponent.onRender(WebComponent.java:60)
at org.apache.wicket.Component.internalRender(Component.java:2380)
at org.apache.wicket.Component.render(Component.java:2308)
at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1524)
at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759)
at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1734)
at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1657)
at org.apache.wicket.markup.html.link.AbstractLink.onComponentTagBody(AbstractLink.java:82)
at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:70)
at org.apache.wicket.Component.internalRenderComponent(Component.java:2565)
at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1698)
at org.apache.wicket.Component.internalRender(Component.java:2380)
at org.apache.wicket.Component.render(Component.java:2308)
at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1524)
at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759)
at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1734)
at org.apache.wicket.MarkupContainer.renderAssociatedMarkup(MarkupContainer.java:797)
at org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy.renderAssociatedMarkup(AssociatedMarkupSourcingStrategy.java:77)
at org.apache.wicket.markup.html.panel.PanelMarkupSourcingStrategy.onComponentTagBody(PanelMarkupSourcingStrategy.java:112)
at org.apache.wicket.Component.internalRenderComponent(Component.java:2565)
at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1698)
at org.apache.wicket.Component.internalRender(Component.java:2380)
at org.apache.wicket.Component.render(Component.java:2308)
at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1524)
at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759)
at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1734)
at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1657)
at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:70)
at org.apache.wicket.Component.internalRenderComponent(Component.java:2565)
at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1698)
at org.apache.wicket.Component.internalRender(Component.java:2380)
at org.apache.wicket.Component.render(Component.java:2308)
at org.apache.wicket.markup.html.list.ListView.renderItem(ListView.java:584)
at org.apache.wicket.markup.html.list.ListView.renderChild(ListView.java:573)
at org.apache.wicket.markup.repeater.AbstractRepeater.onRender(AbstractRepeater.java:102)
at org.apache.wicket.Component.internalRender(Component.java:2380)
at org.apache.wicket.Component.render(Component.java:2308)
at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1524)
at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759)
at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1734)
at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1657)
at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:70)
at org.apache.wicket.Component.internalRenderComponent(Component.java:2565)
at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1698)
at org.apache.wicket.Component.internalRender(Component.java:2380)
at org.apache.wicket.Component.render(Component.java:2308)
at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1524)
at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759)
at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1734)
at org.apache.wicket.MarkupContainer.renderAssociatedMarkup(MarkupContainer.java:797)
at org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy.renderAssociatedMarkup(AssociatedMarkupSourcingStrategy.java:77)
at org.apache.wicket.markup.html.panel.PanelMarkupSourcingStrategy.onComponentTagBody(PanelMarkupSourcingStrategy.java:112)
at org.apache.wicket.Component.internalRenderComponent(Component.java:2565)
at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1698)
at org.apache.wicket.Component.internalRender(Component.java:2380)
at org.apache.wicket.Component.render(Component.java:2308)
at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1524)
at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759)
at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1734)
at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1657)
at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:70)
at org.apache.wicket.Component.internalRenderComponent(Component.java:2565)
at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1698)
at org.apache.wicket.Component.internalRender(Component.java:2380)
at org.apache.wicket.Component.render(Component.java:2308)
at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1524)
at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759)
at org.apache.wicket.Page.onRender(Page.java:879)
at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:141)
at org.apache.wicket.Component.internalRender(Component.java:2380)
at org.apache.wicket.Component.render(Component.java:2308)
at org.apache.wicket.Page.renderPage(Page.java:1018)
at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124)
at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:236)
at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
java.lang.RuntimeException
An error occurred while getting the model object for Component: [Component id = data, page = id.co.bippo.cart.web.pub.ProductCartViewPage, path = 32:dev:content:contributors:3:contrib:link:data.Label, isVisible = true, isVersioned = true, markup = [markup = jar:file:/home/anton/space_spring/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/id.co.bippo.springapp/WEB-INF/lib/wicket-devutils-7.2.0.jar!/org/apache/wicket/devutils/debugbar/StandardDebugPanel.html <span wicket:id=""data""></span>, index = 0, current = '<span wicket:id=""data"">' (line 0, column 0)]]
at org.apache.wicket.Component.getDefaultModelObject(Component.java:1631)
at org.apache.wicket.Component.getDefaultModelObjectAsString(Component.java:1654)
at org.apache.wicket.markup.html.basic.Label.onComponentTagBody(Label.java:115)
at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:70)
at org.apache.wicket.Component.internalRenderComponent(Component.java:2565)Caused by: 
java.lang.NullPointerException
at java.io.ByteArrayInputStream.<init>(ByteArrayInputStream.java:106)
at org.apache.wicket.serialize.java.JavaSerializer.deserialize(JavaSerializer.java:105)
at org.apache.wicket.core.util.lang.WicketObjects.cloneObject(WicketObjects.java:313)
at org.apache.wicket.core.util.lang.WicketObjects.sizeof(WicketObjects.java:377)
at org.apache.wicket.devutils.debugbar.PageSizeDebugPanel$2.getObject(PageSizeDebugPanel.java:96)
at org.apache.wicket.devutils.debugbar.PageSizeDebugPanel$2.getObject(PageSizeDebugPanel.java:89)
at org.apache.wicket.Component.getDefaultModelObject(Component.java:1626)
{noformat}

Follow-up to WICKET-5807

Original reporter: [~AntonKurniawan]","Tomcat 7, JDK 8, Linux Mint 17.3 64bit, Spring 4.2.5",,,,,,,,,,,,,,,,,,,,,,,WICKET-5807,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-22 21:16:05.412,,,no_permission,,,https://idbippo.atlassian.net/browse/BC-3838,,,,,,,,,9223372036854775807,,,Fri Apr 22 21:16:23 UTC 2016,,,,,,0|i2wlcn:,9223372036854775807,,,,,,,,"22/Apr/16 21:16;jira-bot;Commit 69f2d0ad9820e8ada6907ff1fa8138c89970713c in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=69f2d0a ]

WICKET-6151 DebugBar/PageSizeDebugPanel throws NullPointerException (need wrapper exception with more detail)

Throw an exception if the result of serializing an object is null.
Passing null to deserialization will lead to NullPointerException without details of the problematic object
","22/Apr/16 21:16;jira-bot;Commit ff41797cd7682964329fe3baf61ec78cde78f55f in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ff41797 ]

WICKET-6151 DebugBar/PageSizeDebugPanel throws NullPointerException (need wrapper exception with more detail)

Throw an exception if the result of serializing an object is null.
Passing null to deserialization will lead to NullPointerException without details of the problematic object
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Apps can't use Application.setName instead of WicketFilter for e.g. JMX names,WICKET-5816,12768977,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,tschoening,tschoening,21/Jan/15 14:11,20/Apr/16 21:24,13/Mar/19 23:18,27/Mar/15 21:27,6.18.0,,,,,,,,6.20.0,7.0.0-M6,,,wicket,wicket-jmx,,0,,,,,,,,"I have an application which gets deployed multiple times into a Tomcat under different folder names, by only changing the absolute minimum configuration needed per application. Especially the web.xml is generic and doesn't change normally, which leads to each instance in Tomcat has the same application name, corresponding to the filter name for the Wicket filter used in web.xml.

This becomes a problem if one wants to use wicket-jmx, because ""org.apache.wicket.jmx.Initializer.init"" exposes a gerneric ""org.apache.wicket.app.[name]"" in such and environment and the JMX console provided with at least Java 7 doesn't show each node exposed for all the hosted applications, but only one of them. This makes one unable to distinguish to which application the exposed host ultimately belongs. If I change the names of the Wicket filter in web.xml to something unique instead, the JMX console shows all exposed applications under their unique name.

So I thought of setting a unique name using Application.setName automatically by creating a ServletContextListener, which will statically set some created name using the deployment folder name, which afterwards can be used in the ctor of my derivation of Application. The problem with this approach is, that currently WicketFilter always issues a call to Application.setName as well and that will error out if I already set the name before.

While I do understand that may approach may be a somewhat hacky workaround for my deployment scenario, from my understanding of how WicketFilter behaves it shouldn't harm to let applications set their own name for whatever reason. Currently it's not just possible because WicketFilter wants to do it as well.

What I propose is that WicketFilter first checks using Application.getName if a name has already been set druing application construction and in that case doesn't try to set it on it's own. This way applications could set it on their own depending on different criteria and the current behaviour of only setting it once, with WicketFilter as fallback, would be preserved.

The relevant code in WicketFilter is the following:

{code:java}
public void init(final boolean isServlet, final FilterConfig filterConfig)
[...]
	// locate application instance unless it was already specified during construction
	if (application == null)
	{
			applicationFactory = getApplicationFactory();
			application = applicationFactory.createApplication(this);
	}

	application.setName(filterConfig.getFilterName());
	application.setWicketFilter(this);
{code}

This has been discussed on the users list as well:

http://mail-archives.apache.org/mod_mbox/wicket-users/201501.mbox/<121497384.20150120190546@am-soft.de>",,,,,,,,,,,,,,,,,WICKET-6053,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-27 21:27:21.908,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Mar 27 21:27:35 UTC 2015,,,,,,0|i24m3z:,9223372036854775807,,,,,,,,"27/Mar/15 21:27;jira-bot;Commit 792a0a4138aad61dfe63c8bace96648878767003 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=792a0a4 ]

WICKET-5816 Apps can't use Application.setName instead of WicketFilter for e.g. JMX names
","27/Mar/15 21:27;jira-bot;Commit 2de1284a589f7862133bb2c2166bf8563268d252 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2de1284 ]

WICKET-5816 Apps can't use Application.setName instead of WicketFilter for e.g. JMX names

(cherry picked from commit 792a0a4138aad61dfe63c8bace96648878767003)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"AjaxButton forces rendering type=""button"" ",WICKET-6139,12956534,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,rfoerthe,rfoerthe,06/Apr/16 15:57,07/Apr/16 07:23,13/Mar/19 23:18,07/Apr/16 07:23,7.0.0-M2,,,,,,,,7.3.0,8.0.0-M1,,,wicket,,,0,,,,,,,,"Since WICKET-5594 AjaxButton forces rendering type=""button"". I understand, that this is the desired behavior if JavaScript is disabled. On the other hand it disables the browser behavior ""submit form on enter"" when JavaScript is enabled. I can't see any problem on using type=""submit"" in conjunction with AjaxButton, since the designated Methods onSubmit(AjaxRequestTarget target, Form<?> form), onAfterSubmit(AjaxRequestTarget target, Form<?> form) and onError(AjaxRequestTarget target, Form<?> form) will be called when pressing enter.

The new behavior affects a lot of forms in our wicket applications we are currently porting from Wicket 6 to 7. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-06 17:12:24.875,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Apr 07 07:23:53 UTC 2016,,,,,,0|i2vq7j:,9223372036854775807,,,,,,,,"06/Apr/16 17:12;svenmeier;Hi Roland,

I think we revert part of the commit to WICKET-5594 and leave the button type as specified in the markup:

- if JavaScript is disabled, the browser will submit the form non-Ajax and AjaxButton#submit() will log a warning. This is actually an improvement over the current situation, where clicking the buttons does nothing.
- if JavaScript is enabled, Wicket will submit the form via XMLHttpRequest regardless whether you've clicked the button or used the enter key to submit the first submitting button.

WDYT?
","07/Apr/16 06:57;rfoerthe;Hi Sven,

that would be a good solution.
","07/Apr/16 07:18;jira-bot;Commit e70c170cef191a3dc5f52331c8e04a5e12295bb5 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e70c170 ]

WICKET-6139 don't tamper with button type: AjaxButton with JavaScript disabled will now log a warning instead of ignoring the click
","07/Apr/16 07:19;jira-bot;Commit 686058119dd795b3de7f2016e3e64fb8f025f813 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=6860581 ]

WICKET-6139 don't tamper with button type: AjaxButton with JavaScript disabled will now log a warning instead of ignoring the click
","07/Apr/16 07:23;svenmeier;It seems tampering with the button type was a bad idea after all: it is left untouched now.
When JavaScript is disabled, the normal HTTP request will be logged as a warning, effectively ignoring the click as before. Users can just use type=""button"" in their markup if they want to prevent the superfluous request in this case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JsonRequestLogger --> JsonMappingException --> StackOverflowError Infinite recursion,WICKET-6097,12939801,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,francois,francois,17/Feb/16 11:09,18/Feb/16 20:38,13/Mar/19 23:18,18/Feb/16 20:35,7.2.0,,,,,,,,7.3.0,8.0.0-M1,,,wicket-extensions,,,0,,,,,,,,"The JsonRequestLogger is not working correctly:

JsonRequestLogger --> JsonMappingException --> StackOverflowError Infinite recursion

Wicket : 7.2.0
Jackson : 2.7.1

JsonRequestLogger throw a JsonMappingException when executing getMapper().writeValueAsString(new RequestSessionTuple(rd, sd));

java.lang.RuntimeException: com.fasterxml.jackson.databind.JsonMappingException: 
Infinite recursion (StackOverflowError) 
(through reference chain: org.apache.wicket.PageReference[""page""]->com.mycompany.SimplePage[""pageReference""]->org.apache.wicket.PageReference[""page""]->com.mycompany.SimplePage[""pageReference""]->org.apache.wicket.PageReference[""page""]->....


at org.apache.wicket.extensions.requestlogger.JsonRequestLogger.getLogString(JsonRequestLogger.java:141) ~[wicket-extensions-7.2.0.jar:7.2.0]
	at org.apache.wicket.extensions.requestlogger.JsonRequestLogger.log(JsonRequestLogger.java:125) ~[wicket-extensions-7.2.0.jar:7.2.0]
	at org.apache.wicket.protocol.http.AbstractRequestLogger.performLogging(AbstractRequestLogger.java:325) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.onInternalDetach(RequestCycle.java:620) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.detach(RequestCycle.java:600) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:297) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261) ~[wicket-core-7.2.0.jar:7.2.0]
	
at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:694) ~[jackson-databind-2.7.1.jar:2.7.1]
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:157) ~[jackson-databind-2.7.1.jar:2.7.1]
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:672) ~[jackson-databind-2.7.1.jar:2.7.1]
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:678) ~[jackson-databind-2.7.1.jar:2.7.1]
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:157) ~[jackson-databind-2.7.1.jar:2.7.1]
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:672) ~[jackson-databind-2.7.1.jar:2.7.1]
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:678) ~[jackson-databind-2.7.1.jar:2.7.1]
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:157) ~[jackson-databind-2.7.1.jar:2.7.1]
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:672) ~[jackson-databind-2.7.1.jar:2.7.1]
","Wicket : 7.2.0
Jackson : 2.7.1
OSX
JKD 8",,,,,,,,,,,,,,,,,,,,,,,,17/Feb/16 11:14;francois;quickstart.zip;https://issues.apache.org/jira/secure/attachment/12788229/quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-02-18 20:35:38.495,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Feb 18 20:38:18 UTC 2016,,,,,,0|i2sxxr:,9223372036854775807,,,,,,,,"18/Feb/16 20:35;jira-bot;Commit 547b17e1d111e56255d36d4af2e542b985fd1ff0 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=547b17e ]

WICKET-6097 JsonRequestLogger --> JsonMappingException --> StackOverflowError Infinite recursion
","18/Feb/16 20:38;jira-bot;Commit 4904e4cf25c7f04874e3ccfbfcc962d3ed0a13a6 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4904e4c ]

WICKET-6097 JsonRequestLogger --> JsonMappingException --> StackOverflowError Infinite recursion
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnChangeAjaxBehavior does not work if the url contains a request parameter with same name as wicket id,WICKET-6069,12928599,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,robinshine,robinshine,08/Jan/16 09:53,06/Feb/16 14:25,13/Mar/19 23:18,06/Feb/16 14:23,6.21.0,,,,,,,,6.22.0,7.3.0,8.0.0-M1,,wicket,,,0,,,,,,,,"To demonstrate the issue, create below simple page:

{code:title=""HomePage.html""}
<wicket:extend>
  <select wicket:id=""choice""></select>
</wicket:extend>
{code}

{code:title=""HomePage.java""}
public class HomePage extends WebPage {
	private String choice = ""a"";
	
	@Override
	protected void onInitialize() {
		super.onInitialize();

		List<String> choices = new ArrayList<String>();
		choices.add(""a"");
		choices.add(""b"");
		add(new DropDownChoice<String>(""choice"", new IModel<String>() {

			@Override
			public void detach() {
			}

			@Override
			public String getObject() {
				return choice;
			}

			@Override
			public void setObject(String object) {
				choice = object;
			}
			
		}, choices).add(new OnChangeAjaxBehavior() {

			@Override
			protected void onUpdate(AjaxRequestTarget target) {
				System.out.println(choice);
			}
			
		}));		
	}
}
{code}
This simple page prints out choosed value via OnChangeAjaxBehavior, it works fine if you access the page via http://localhost:8080. However it always prints ""null"" if you access the page with a request parameter the same name as the wicket id, for instance: http://localhost:8080/?choice=somevalue
It works again if you use different value for wicket id of the choice component and request parameter.",,,,,,,,,,,,,,,,,,,,,,,,,09/Jan/16 01:02;robinshine;myproject.zip;https://issues.apache.org/jira/secure/attachment/12781345/myproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-01-08 09:56:13.086,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Feb 06 14:25:06 UTC 2016,,,,,,0|i2r16f:,9223372036854775807,,,,,,,,"08/Jan/16 09:56;mgrigorov;Please create a quickstart application (http://wicket.apache.org/start/quickstart.html) with the provided sources and steps to reproduce.
Thank you!","09/Jan/16 01:07;robinshine;Thanks for looking into this. The quickstart is attached. Steps to reproduce:
1. Open the project in Eclipse (or any other IDE). 
2. Run ""com.mycompany.Start""
3. Access the home page via ""http://localhost:8080?choice=1""
4. Select ""a"" or ""b"" from the choice field, the console always prints ""null"". 
5. Above step will print choosed value correctly if acess the home page via ""http://localhost:8080"", or ""http://localhost:8080?nameOtherThanChoice=1""","05/Feb/16 20:23;mgrigorov;The problem is that by adding a request parameter in the query string there are two values for this request parameter at the server side and if the wrong value is used then the ChoiceRenderer cannot map it to a possible choice, thus `null`.


Devs, what do you think about this change:
{code}
diff --git i/wicket-request/src/main/java/org/apache/wicket/request/Request.java w/wicket-request/src/main/java/org/apache/wicket/request/Request.java
index 95d24cc..0ecec9d 100644
--- i/wicket-request/src/main/java/org/apache/wicket/request/Request.java
+++ w/wicket-request/src/main/java/org/apache/wicket/request/Request.java
@@ -133,7 +133,7 @@ public abstract class Request
         */
        public IRequestParameters getRequestParameters()
        {
-               return new CombinedRequestParametersAdapter(getQueryParameters(), getPostParameters());
+               return new CombinedRequestParametersAdapter(getPostParameters(), getQueryParameters());
        }
{code}

This gives POST parameters higher priority than GET parameters at org.apache.wicket.markup.html.form.AbstractSingleSelectChoice#convertValue(). Here Wicket uses just the first value if there are several.

The GET request parameter is in the Ajax url because of 
{code}
PageParameters parameters = getRecreateMountedPagesAfterExpiry() ? new PageParameters(
				handler.getPage().getPageParameters()).mergeWith(handler.getPageParameters())
				: handler.getPageParameters();
{code}
in AbstractBookmarkableMapper, line 445, Wicket 6.21.0. I.e. for page recreation after expiry.",05/Feb/16 22:21;svenmeier;+1 IMHO it makes sense to give precedence to post parameters ,"06/Feb/16 14:22;jira-bot;Commit 72e61c26973c43c4aa6b0afec78822655757d7a5 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=72e61c2 ]

WICKET-6069 OnChangeAjaxBehavior does not work if the url contains a request parameter with same name as wicket id

Give presedence to POST parameters
","06/Feb/16 14:22;jira-bot;Commit 356b85054ff6f38cce3ff33046267d3c54d9de90 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=356b850 ]

WICKET-6069 OnChangeAjaxBehavior does not work if the url contains a request parameter with same name as wicket id

Give presedence to POST parameters
","06/Feb/16 14:25;jira-bot;Commit 74ba1a8ab5c56747dd63b144e05cb0034197dd48 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=74ba1a8 ]

WICKET-6069 OnChangeAjaxBehavior does not work if the url contains a request parameter with same name as wicket id

Give presedence to POST parameters
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ajax request failure handler receives incorrect arguments,WICKET-6084,12934800,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,sander.evers,sander.evers,28/Jan/16 12:57,28/Jan/16 13:34,13/Mar/19 23:18,28/Jan/16 13:34,7.1.0,,,,,,,,6.22.0,7.3.0,8.0.0-M1,,wicket,,,0,ajax,,,,,,,"According to {{AbstractDefaultAjaxBehavior.FAILURE_HANDLER_FUNCTION_TEMPLATE}}, the ajax request failure handler that a user can register should receive the arguments {{attrs, jqXHR, errorMessage, textStatus}}. However, the arguments actually passed to the handler are {{attrs, errorMessage}}.",,,,,,,,,,,,,,,,,,,,,,,,,28/Jan/16 13:03;sander.evers;ajax-fh-bug.zip;https://issues.apache.org/jira/secure/attachment/12784910/ajax-fh-bug.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2016-01-28 13:00:43.761,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jan 28 13:34:14 UTC 2016,,,,,,0|i2s3dz:,9223372036854775807,,,,,,,,"28/Jan/16 13:00;githubbot;GitHub user sanderevers opened a pull request:

    https://github.com/apache/wicket/pull/157

    WICKET-6084: supply additional args to ajax request fh function

    in order to match AbstractDefaultAjaxBehavior.FAILURE_HANDLER_FUNCTION_TEMPLATE

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sanderevers/wicket wicket-7.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/157.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #157
    
----
commit d8fbdde2372e0fffbc02094702d538cd0a820a83
Author: Sander Evers <sander.evers@topicus.nl>
Date:   2016-01-28T12:31:26Z

    wicket-ajax-jquery: supply additional args to fh function to match
    AbstractDefaultAjaxBehavior.FAILURE_HANDLER_FUNCTION_TEMPLATE

----
",28/Jan/16 13:03;sander.evers;Quickstart included to reproduce bug and demonstrate the fix.,"28/Jan/16 13:21;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/157
","28/Jan/16 13:32;jira-bot;Commit 3bc3f2327d243274dba5e7ba2ffcbd5ea675b62c in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3bc3f23 ]

WICKET-6084 ajax request failure handler receives incorrect arguments

Add unit tests
","28/Jan/16 13:33;jira-bot;Commit ac21758f358c42322efa9cc28bd0ac6dc26fdb01 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ac21758 ]

WICKET-6084 ajax request failure handler receives incorrect arguments

Add unit tests
","28/Jan/16 13:33;jira-bot;Commit a22e9f209f397ea57b6f4c820da36ef6c5f8e915 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a22e9f2 ]

WICKET-6084 ajax request failure handler receives incorrect arguments

Add unit tests
",28/Jan/16 13:34;mgrigorov;Thank you!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The key RangeValidator.exact is not mapped in Application_de.properties,WICKET-6068,12928333,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,blalasaadri,blalasaadri,07/Jan/16 14:30,07/Jan/16 20:00,13/Mar/19 23:18,07/Jan/16 20:00,6.19.0,,,,,,,,6.22.0,7.2.0,8.0.0-M1,,,,,0,,,,,,,,"The AbstractRangeValidator supports a mode called ""EXACT"" which requires the key ""RangeValidator.exact"". While this key does exist in the English Application.properties, it is missing in the German Application_de.properties (and possibly others). My suggestion for this entry would be something like this:

{code}
RangeValidator.exact=Der Wert von '${label}' muss genau ${minimum} betragen.
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-01-07 19:57:22.96,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jan 07 20:00:53 UTC 2016,,,,,,0|i2qzjb:,9223372036854775807,,,,,,,,"07/Jan/16 19:57;jira-bot;Commit ed9cbb23a7b1ebde0ad33157e61eac6419a81ffb in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ed9cbb2 ]

WICKET-6068 RangeValidator.exact for de
","07/Jan/16 19:57;jira-bot;Commit 16e9658ca29f8212c551fe8522997cfe9158abdb in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=16e9658 ]

WICKET-6068 RangeValidator.exact for de
",07/Jan/16 20:00;svenmeier;Many thanks Alasdair!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ModalWindow.closeCurrent() causes 414 status error,WICKET-6006,12905562,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,dashorst,dashorst,16/Oct/15 15:41,24/Dec/15 13:18,13/Mar/19 23:18,12/Dec/15 22:12,6.20.0,7.0.0,,,,,,,6.22.0,7.2.0,8.0.0-M1,,wicket-extensions,,,0,,,,,,,,"When you have a panel inside a modal window, and the panel contains a form with e.g. a textarea, and you fill the textarea with about 10k of text, when the modal window is closed using closeCurrent() you get a 414 status error stating that the URL is too long (depends on the backend server).

{code}
	public ModalPanel1(String id)
	{
		super(id);

		Form<?> form = new Form<>(""form"");
		add(form);

		add(new AjaxLink<Void>(""closeCancel"") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				ModalWindow.closeCurrent(target);
			}
		});

		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < 10000; i++)
			sb.append(""a"");
		form.add(new TextArea<>(""bigFingTextField"", Model.of(sb.toString())));
	}
{code}

Closing the window using ModalWindow.closeCurrent() will add the serializedForm of the modal window's contents (See line 656 of wicket-ajax-debug.js) to the URL that's sent to wicket. If the form inside the panel contains lots of data, this will exceed the maximum URL length...

https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js#L656

The workaround is of course to use ModalWindow#close(IPartialPageRequestHandler) instead, however, why is ModalWindow#closeCurrent() even there, and why doesn't it properly close the window with the same behavior as the instance method?",,,,,,,,,,,,,,,,,,,,,,,,,12/Dec/15 21:43;mgrigorov;WICKET-5948.7z;https://issues.apache.org/jira/secure/attachment/12777309/WICKET-5948.7z,,,,1.0,,,,,,,,,,,,,,,,,,,2015-10-18 08:54:22.415,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Dec 24 13:18:06 UTC 2015,,,,,,0|i2n4hj:,9223372036854775807,,,,,,,,"18/Oct/15 08:54;mgrigorov;I don't see anything in https://github.com/apache/wicket/blob/master/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js#L791-L854 that would cause form submit or usage of Wicket.Form.

#closeCurrent() just calls target.appendJavaScript(getCloseJavacriptInternal());
#close() calls #getCloseJavacript() that by default just delegates to #getCloseJavacriptInternal().

Please attach a quickstart app.",14/Nov/15 10:29;mgrigorov;Without a quickstart I'm afraid I cannot help you.,"18/Nov/15 22:55;mgrigorov;Cannot reproduce!
Please reopen if you find a way to reproduce it.",12/Dec/15 21:43;mgrigorov;Attaching a quickstart provided by a user at users@,"12/Dec/15 21:46;mgrigorov;The quickstart uses #closeCurrent() and shows the problem explained in the description.
If ModalWindow#close() is used then the modal's content is set invisible and there is nothing to serialize.
The JS code looks like:
{code}
settings.onClose = function() { Wicket.Ajax.ajax({""u"":""./?0-1.IBehaviorListener.1-myModal"",""c"":""myModal2""}); };
{code}
So it serializes the all form elements in the Modal window.
",12/Dec/15 21:49;mgrigorov;Same problem is happening if the close button is used.,"12/Dec/15 22:09;jira-bot;Commit a7a04e4b17b8ca8075637879c77b173df98cacb4 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a7a04e4 ]

WICKET-6006 ModalWindow.closeCurrent() causes 414 status error

Do not submit the form elements inside the ModalWindow when closing it.
","12/Dec/15 22:11;jira-bot;Commit 3cefb00dfa9900821a11f6af1f202af7e479138a in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3cefb00 ]

WICKET-6006 ModalWindow.closeCurrent() causes 414 status error

Do not submit the form elements inside the ModalWindow when closing it.
","12/Dec/15 22:11;jira-bot;Commit e0335bbb5706c489d6039f250215a53cdc6a6797 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e0335bb ]

WICKET-6006 ModalWindow.closeCurrent() causes 414 status error

Do not submit the form elements inside the ModalWindow when closing it.
","24/Dec/15 13:07;jira-bot;Commit 1daec2ef2b6b9ae5ff4f60d42ed5d119cbaaf4a0 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1daec2e ]

WICKET-6050 Wicket Ajax (Wicket.From.serializeElement) causes 400 bad request
WICKET-5948 wicket-ajax.js probably doesn't traverse the children of <div> or <span>
WICKET-6006 ModalWindow.closeCurrent() causes 414 status error

Introduce AjaxRequestAttributes#serializeRecursively with default value 'false'.
This is a flag indicating whether to collect (submit) the name/value pairs for all HTML form elements children of the HTML element with the JavaScript listener
","24/Dec/15 13:14;jira-bot;Commit 1d9c6b955553d72e36b029e44bc07e3206fa4e88 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1d9c6b9 ]

WICKET-6050 Wicket Ajax (Wicket.From.serializeElement) causes 400 bad request
WICKET-5948 wicket-ajax.js probably doesn't traverse the children of <div> or <span>
WICKET-6006 ModalWindow.closeCurrent() causes 414 status error

Introduce AjaxRequestAttributes#serializeRecursively with default value 'false'.
This is a flag indicating whether to collect (submit) the name/value pairs for all HTML form elements children of the HTML element with the JavaScript listener
","24/Dec/15 13:18;jira-bot;Commit abd958d4eb128056bc7e57ab943dfc69c23b3925 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=abd958d ]

WICKET-6050 Wicket Ajax (Wicket.From.serializeElement) causes 400 bad request
WICKET-5948 wicket-ajax.js probably doesn't traverse the children of <div> or <span>
WICKET-6006 ModalWindow.closeCurrent() causes 414 status error

Introduce AjaxRequestAttributes#serializeRecursively with default value 'false'.
This is a flag indicating whether to collect (submit) the name/value pairs for all HTML form elements children of the HTML element with the JavaScript listener
",,,,,,,,,,,,,,,,,,,,,,,,
ListView NullPointerException when viewSize is set explicitly,WICKET-6045,12916402,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,tta,tta,26/Nov/15 10:21,29/Nov/15 16:05,13/Mar/19 23:18,28/Nov/15 14:37,7.1.0,,,,,,,,7.2.0,8.0.0-M1,,,,,,0,,,,,,,,"ListView tries to render the null list because of the beginning of method ListView.getViewSize():
public int getViewSize()
	{
		int size = viewSize;

		final Object modelObject = getDefaultModelObject();
		if (modelObject == null)
		{
			return size == Integer.MAX_VALUE ? 0 : size;
		}
....

Let say I had 10 items in the list before a refresh to this listview. When refreshing, my getter returned null because it didn't find anything 
-> modelObject is null and size != Integer.MAX_VALUE 
-> previous viewSize is returned. 
-> populateItem throws npe if it tries for example getDefaultModelObject() like this:
java.lang.NullPointerException
     at org.apache.wicket.markup.html.list.ListItemModel.getObject(ListItemModel.java:61)
     at org.apache.wicket.Component.getDefaultModelObject(Component.java:1626)
     at syncrontech.common.gate.list.GateEditableListPanel$2.populateItem(GateEditableListPanel.java:264)
     at org.apache.wicket.markup.html.list.ListView.onPopulate(ListView.java:523)

The behaviour is also inconsistent: Constructing the listview with null list is ok, because that same point in code would return the 0.

This should probably always return 0 if the modelObject is null? Or am I missing something?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-26 12:25:07.773,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Nov 29 16:05:31 UTC 2015,,,,,,0|i2oyyn:,9223372036854775807,,,,,,,,"26/Nov/15 12:25;svenmeier;In my test I didn't see any difference between constructing the ListView with null vs. a model with a list which turns null on later renders:
- if the list is null and no viewSize is set, the ListView will render empty
- if the list is null and a viewSize is set, it takes precedence and a NullPointerException is thrown.","26/Nov/15 12:41;mgrigorov;NPE like:
java.lang.NullPointerException
at org.apache.wicket.markup.html.list.ListItemModel.getObject(ListItemModel.java:61)
?

We should prevent this.","26/Nov/15 12:44;tta;Yes, forgot to mention we have set a viewsize. And since that is set after construction, the null list works when constructing. Yes, I could check if my list is null and replace it with an empty list (this is actually what I do now) or set the viewsize to zero, but is there a reason for this strange if-clause in the getViewSize()? If it would return zero when the modelObject is null, this would work without the extra checks for null lists. Also, having a null list and then setting a viewsize wouldn't accomplish anything useful.","26/Nov/15 12:53;svenmeier;Simplest solution:

{code}
    final Object modelObject = getDefaultModelObject();
    if (modelObject == null)
    {
        return 0;
    }
{code}",27/Nov/15 07:46;mgrigorov;+1,"28/Nov/15 14:26;jira-bot;Commit d3abc0ec0432afedf11f44015cbb3170b49bab7c in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d3abc0e ]

WICKET-6045 viewSize can not be greater than available size, which is 0 for null
","28/Nov/15 14:26;jira-bot;Commit a2f440ed21664440e672445e3db3495a2e953f30 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a2f440e ]

WICKET-6045 viewSize can not be greater than available size, which is 0 for null
",28/Nov/15 14:37;svenmeier;viewSize is 0 when model object is null now,"29/Nov/15 16:05;jira-bot;Commit d3abc0ec0432afedf11f44015cbb3170b49bab7c in wicket's branch refs/heads/lambdas from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=d3abc0e ]

WICKET-6045 viewSize can not be greater than available size, which is 0 for null
",,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in case DebugBar is added to AjaxRequestTarget,WICKET-6011,12908215,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,solomax,solomax,27/Oct/15 12:51,19/Nov/15 11:58,13/Mar/19 23:18,27/Oct/15 13:52,7.0.0,8.0.0-M1,,,,,,,7.2.0,8.0.0-M1,,,wicket-devutils,,,0,,,,,,,,"NPE due to broken serialization happens in case DebugBar is being added to AjaxRequestTarget

Please see stacktrace and quickstart attached",,,,,,,,,,,,,,,,,,,,,,,,,27/Oct/15 12:52;solomax;WICKET-6011.tgz;https://issues.apache.org/jira/secure/attachment/12768976/WICKET-6011.tgz,27/Oct/15 12:52;solomax;stacktrace.txt;https://issues.apache.org/jira/secure/attachment/12768977/stacktrace.txt,,,2.0,,,,,,,,,,,,,,,,,,,2015-10-27 13:49:31.952,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Oct 27 13:54:09 UTC 2015,,,,,,0|i2nkon:,9223372036854775807,,,,,,,,"27/Oct/15 13:49;jira-bot;Commit 5a5ae6d73e496672a6437b0c8f1fc56275b6068e in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5a5ae6d ]

WICKET-6011 keep pageUpdate transient, since the page might get serialized before the Ajax update has finished (e.g. from Debugbar)
",27/Oct/15 13:52;svenmeier;I message this up when extracting PartialPageUpdate from Ajax; PartialPageUpdate$PartialHtmlHeaderContainer's javadoc has the details.,"27/Oct/15 13:54;jira-bot;Commit 660023c68cea35b72ad5267f7a42e6d9696ca336 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=660023c ]

WICKET-6011 keep pageUpdate transient, since the page might get serialized before the Ajax update has finished (e.g. from Debugbar)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CLONE - AjaxFallbackOrderByBorder wicketOrder[Up|Down|None] class missing in 7.1.0,WICKET-6013,12908613,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,keesvandaalen,mgrigorov,28/Oct/15 15:56,13/Nov/15 15:58,13/Mar/19 23:18,28/Oct/15 20:05,7.1.0,,,,,,,,7.2.0,8.0.0-M1,,,wicket-extensions,,,0,,,,,,,,"The class of the OrderByLink in the AjaxFallbackOrderByBorder is not set on the AjaxFallbackOrderByBorder in Wicket 7, this was the case in Wicket 6.
I will include two quickstarts using Wicket 6 and 7 to demonstrate this.",,,,,,,,,,,,WICKET-5975,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-28 20:02:29.259,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Oct 28 20:11:15 UTC 2015,,,,,,0|i2nn33:,9223372036854775807,,,,,,,,"28/Oct/15 20:02;jira-bot;Commit e74fdcf219938fe3b262fdec742a7bc15694c4b6 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e74fdcf ]

WICKET-6013 add css classes to AjaxFallbackOrderByBorder too
",28/Oct/15 20:05;svenmeier;AjaxFallbackOrderByBorder adds the CSS classes now too.,"28/Oct/15 20:11;jira-bot;Commit db88fd29f5d21a8406638f9724c522173c3a558c in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=db88fd2 ]

WICKET-6013 add css classes to AjaxFallbackOrderByBorder too
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket.Ajax.done() called twice on redirect,WICKET-6032,12912272,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,11/Nov/15 19:46,12/Nov/15 10:12,13/Mar/19 23:18,12/Nov/15 10:12,6.20.0,7.1.0,8.0.0-M1,,,,,,6.22.0,7.2.0,8.0.0-M1,,wicket,,,0,,,,,,,,"When a redirect is received from the server during Ajax requests, #processAjaxResponse() explicitly calls #done() on the current call:
(wicket-ajax-jquery.js, line 777)

{code}
if (typeof(redirectUrl) !== ""undefined"" && redirectUrl !== null && redirectUrl !== """") {
    // In case the page isn't really redirected. For example say the redirect is to an octet-stream.
    // A file download popup will appear but the page in the browser won't change.
    this.success(context);
    this.done(context.attrs);
{code}

This leads to:
- done() being called before the step added in #success()
- done() being called a second time from the step added in #complete()",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-12 10:02:56.897,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Nov 12 10:12:50 UTC 2015,,,,,,0|i2o9kf:,9223372036854775807,,,,,,,,"12/Nov/15 10:02;jira-bot;Commit 19f32b68913c224588473b8750a76f3119c8cd15 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=19f32b6 ]

WICKET-6032 don't call done on redirect, it will be invoked from complete later
","12/Nov/15 10:05;jira-bot;Commit a341150e23f206929e03347e6a82c26027eceeae in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a341150 ]

WICKET-6032 don't call done on redirect, it will be invoked from complete later
","12/Nov/15 10:06;jira-bot;Commit a30bff2baaf78705debef388c3226713be4f8a86 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a30bff2 ]

WICKET-6032 don't call done on redirect, it will be invoked from complete later
",12/Nov/15 10:12;svenmeier;The duplicate call to #done() is removed now: Ajax request handling continues normally and #complete() will call #done() later as always.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxFallbackOrderByBorder wicketOrder[Up|Down|None] class missing,WICKET-5975,12858946,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,keesvandaalen,keesvandaalen,26/Aug/15 10:50,28/Oct/15 19:55,13/Mar/19 23:18,26/Aug/15 12:14,7.0.0,,,,,,,,7.1.0,,,,wicket-extensions,,,0,,,,,,,,"The class of the OrderByLink in the AjaxFallbackOrderByBorder is not set on the AjaxFallbackOrderByBorder in Wicket 7, this was the case in Wicket 6.
I will include two quickstarts using Wicket 6 and 7 to demonstrate this.",,,,,,,,,,,,,,,,,,,,,,,,,28/Oct/15 15:47;xomit;quickstart700.zip;https://issues.apache.org/jira/secure/attachment/12769311/quickstart700.zip,28/Oct/15 15:47;xomit;quickstart710.zip;https://issues.apache.org/jira/secure/attachment/12769312/quickstart710.zip,26/Aug/15 10:52;keesvandaalen;wicket6.zip;https://issues.apache.org/jira/secure/attachment/12752442/wicket6.zip,26/Aug/15 10:52;keesvandaalen;wicket7.zip;https://issues.apache.org/jira/secure/attachment/12752443/wicket7.zip,4.0,,,,,,,,,,,,,,,,,,,2015-08-26 11:59:10.994,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Oct 28 19:55:14 UTC 2015,,,,,,0|i2je9j:,9223372036854775807,,,,,,,,"26/Aug/15 11:59;svenmeier;Since WICKET-5257 the CSS classes are now located on the orderByLinks.

We should tweak this to restore the Wicket 6 state with the CSS class on the <th>.","26/Aug/15 12:12;jira-bot;Commit 64e07c372ddb168078afa3153a74accce045f4c8 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=64e07c3 ]

WICKET-5975 move ordering CSS classes to OrderByBorder as the default in Wicket 6.x
",26/Aug/15 12:14;svenmeier;CSS classes are now added to the <th> as in Wicket 6.x,"28/Oct/15 15:47;xomit;The CSS classes are still not added neither to the TH nor the A tags. With 7.0.0 the tags has been added to the A tag, with 7.1.0 the CSS classes are missing. See the attached quickstarts quickstart700.zip (Wicket 7.0.0) and quickstart710 (Wicket 7.1.0).",28/Oct/15 15:55;mgrigorov;This could be related to the new ServiceLoader thingy. Although I have tested that IInitiialzer's IStringPropertyLoader is working.,"28/Oct/15 19:55;svenmeier;Sorry, I changed OrderByBorder only, not the Ajax variant.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PageableListView constructor argument and set/getItemsPerPage are inconsistent,WICKET-6007,12906442,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,tta,tta,21/Oct/15 06:39,21/Oct/15 07:43,13/Mar/19 23:18,21/Oct/15 07:43,7.0.0,,,,,,,,8.0.0-M1,,,,wicket,,,0,,,,,,,,"I bumped into a little inconsistency, PageableListView constructors want an int like this:
public PageableListView(final String id, final IModel<? extends List<T>> model, int itemsPerPage)

But the set/getItemsPerPage and the property itemsPerPage use a long:
public final long getItemsPerPage()
public final void setItemsPerPage(long itemsPerPage)
private long itemsPerPage;



",,,,,,,,,,,,,,,,,WICKET-1175,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-21 07:42:43.096,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Oct 21 07:43:32 UTC 2015,,,,,,0|i2n9sn:,9223372036854775807,,,,,,,,"21/Oct/15 07:42;jira-bot;Commit 52f4ec449e2588cea25243a94605ce434cf38e49 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=52f4ec4 ]

WICKET-6007 make itemsPerPage a long in constructor too
",21/Oct/15 07:43;svenmeier;Fixed in Wicket 8.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket 1.5 DTD link on website does not point to valid location,WICKET-6000,12905366,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,dnedrow,dnedrow,15/Oct/15 23:25,18/Oct/15 08:44,13/Mar/19 23:18,18/Oct/15 08:44,1.5.13,,,,,,,,1.5.14,,,,site,wicket,,0,,,,,,,,"The DTD link for Wicket 1.5 does not point to a valid location at the following URL:

http://wicket.apache.org/dtds.data/",NA,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-18 08:44:15.353,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Oct 18 08:44:15 UTC 2015,,,,,,0|i2n39z:,9223372036854775807,,,,,,,,18/Oct/15 08:44;mgrigorov;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""Range"" header parsing is broken",WICKET-5995,12902977,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,klopfdreh,ntkoopman,ntkoopman,07/Oct/15 13:03,11/Oct/15 22:26,13/Mar/19 23:18,08/Oct/15 02:41,7.0.0,,,,,,,,7.1.0,8.0.0-M1,,,wicket,,,0,,,,,,,,"In the new version of Wicket, AbstractResource parses the 'Range' header in the method 'setRequestRangeMetaData'. This method is always called. 

Unfortunately, it is fundamentally broken. According to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35 a range request can contain multiple ranges. The current implementation only supports one range and throws a NumberFormatException when multiple ranges are requested.

Fortunately, a Resource supporting Range requests can override this method, but it also means that the CONTENT_RANGE_STARTBYTE and CONTENT_RANGE_ENDBYTE metadata are a flawed abstraction.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-07 20:16:52.374,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Oct 11 22:26:15 UTC 2015,,,,,,0|i2moq7:,9223372036854775807,,,,,,,,"07/Oct/15 13:14;ntkoopman;It is valid to respond to only a subset of the ranges, so if Wicket would only parse the first range it would be valid according to the specification.",07/Oct/15 20:16;klopfdreh;If it would be ok for you I am going to change the implementation so that only the first byte-range is going to be parsed.,"08/Oct/15 02:37;jira-bot;Commit 51c713d6210d07602afe203f45f1b42c72c7c135 in wicket's branch refs/heads/wicket-7.x from [~klopfdreh]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=51c713d ]

WICKET-5995","08/Oct/15 02:41;jira-bot;Commit 3b54aa80222075b5de3e99e6b144ccc0b14f241f in wicket's branch refs/heads/master from [~klopfdreh]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3b54aa8 ]

WICKET-5995","11/Oct/15 22:25;jira-bot;Commit 2249514e675568ae99800f80f90305218a3c635d in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2249514 ]

WICKET-5995

Minor optimizations in the 'Range' header parsing logic
","11/Oct/15 22:26;jira-bot;Commit 619d00a7d4161fc8787b743d4e97e83a26f07ae4 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=619d00a ]

WICKET-5995

Minor optimizations in the 'Range' header parsing logic
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mounted packages throw IllegalArgumentException when visiting base package url.,WICKET-5996,12903093,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,staretta,staretta,07/Oct/15 19:12,07/Oct/15 20:30,13/Mar/19 23:18,07/Oct/15 20:29,6.20.0,,,,,,,,6.21.0,7.1.0,8.0.0-M1,,wicket,,,0,,,,,,,,"Mounting a package using WicketApplication#mountPackage() is throwing an IllegalArgumentException when visiting the base package's url. 

Example: 
mountPackage(""/mount"", Page.class);

If I go to localhost:8080/mount/Page, it works fine, and retrieves the page correctly. 
If I go to localhost:8080/mount/ it throws an IllegalArgumentException: Argument 'className' may not be null or empty.
If I go to localhost:8080/mount it gives me a 404. 

What I expect to happen, is that localhost:8080/mount/ also throws a 404, as this was the way it worked in Wicket 6.13.0, but as of Wicket 6.14.0 it's been throwing the exception. 

Here's the stack trace:
java.lang.IllegalArgumentException: Argument 'className' may not be null or empty.
	at org.apache.wicket.util.lang.Args.notEmpty(Args.java:64)
	at org.apache.wicket.core.request.mapper.AbstractComponentMapper.cleanClassName(AbstractComponentMapper.java:132)
	at org.apache.wicket.core.request.mapper.PackageMapper.parseRequest(PackageMapper.java:140)
	at org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper.mapRequest(AbstractBookmarkableMapper.java:310)
	at org.apache.wicket.request.mapper.mount.UnmountedMapperAdapter.mapRequest(UnmountedMapperAdapter.java:76)
	at org.apache.wicket.request.mapper.mount.MountMapper.mapRequest(MountMapper.java:135)
	at org.apache.wicket.request.mapper.CompoundRequestMapper.mapRequest(CompoundRequestMapper.java:152)
	at org.apache.wicket.request.cycle.RequestCycle.resolveRequestHandler(RequestCycle.java:190)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:215)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:259)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:201)
	at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:282)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:443)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:556)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1044)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:372)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:189)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:978)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handle(Server.java:369)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:486)
	at org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:53)
	at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:933)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:995)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:644)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)
	at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:72)
	at org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:264)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Unknown Source)",java 1.8,,,,,,,,,,,,,,,,,,,,,,,,07/Oct/15 19:22;staretta;myproject.zip;https://issues.apache.org/jira/secure/attachment/12765438/myproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2015-10-07 20:18:40.768,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Oct 07 20:30:11 UTC 2015,,,,,,0|i2mpfz:,9223372036854775807,,,,,,,,07/Oct/15 19:22;staretta;Attached Quickstart,"07/Oct/15 20:18;jira-bot;Commit fac99dd61b7324aa2b450617917735946f98bf0c in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fac99dd ]

WICKET-5996 Mounted packages throw IllegalArgumentException when visiting base package url.

Return null UrlInfo if the class name is missing
","07/Oct/15 20:19;jira-bot;Commit 9ce82fd2fdcf272bf14afedae1715454d6b665fc in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9ce82fd ]

WICKET-5996 Mounted packages throw IllegalArgumentException when visiting base package url.

Return null UrlInfo if the class name is missing
","07/Oct/15 20:30;jira-bot;Commit 7d811219d368e9ed897b7eb2649b79c5c74450c3 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7d81121 ]

WICKET-5996 Mounted packages throw IllegalArgumentException when visiting base package url.

Return null UrlInfo if the class name is missing
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Re-rendering page after exception in render phase does not call onBeforeRender(),WICKET-5911,12831273,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,lemmingucwcz,lemmingucwcz,20/May/15 05:27,04/Jun/15 08:45,13/Mar/19 23:18,20/May/15 19:16,7.0.0-M6,,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"(I sent this to the mailing list originaly, Sven Meier replied this is probably a bug and requested creating a JIRA issue for it.)

I got page with structure like: 

- Page 
  +- ListView -- items 
  \ - Footer panel 


Now the scenario (heavily simplified): 

One of the items in ListView gets exception from backend during onInitialize(). Required behavior in this case is to keep user on the page and replace ListView with a panel stating ""Sorry, backend outage"". 

So I catch the backend exception using aspect, replace view in the structure with the message panel and throw NonResettingRestartException to restart rendering the page. 

Page is rendered and seems OK, BUT I realize onBeforeRender() of Footer panel is never called. 

I debugged it and found the cause: 

ListView adds items in onPopulate() method which is called from onBeforeRender(). When page starts rendering, its onBeforeRender() is called. Page does: 

setFlag(FLAG_PREPARED_FOR_RENDER, true); 

and calls onBeforeRenderChildren(). This calls onBeforeRender() of ListView, causes exception, so that onBeforeRender() of the footer is not called this time. 

When second rendering is attempted, call flow gets to internalBeforeRender() of the page component. There is check: 

if ((determineVisibility()) && !getFlag(FLAG_RENDERING) && !getFlag(FLAG_PREPARED_FOR_RENDER)) { 
  ... 
  onBeforeRender(); 
  ... 
} 

But since FLAG_PREPARED_FOR_RENDER is set from previous attempt, onBeforeRender() of the page is not called (again) which means onBeforeRender() of the children is not called. 

I found that if I call 

markRendering(false); 

on the page before throwing the NonResettingRestartException, all goes well. But I am quite uneasy about this solution, so I have two questions: 

1) Cannot this cause some unforeseen troubles? (Supposing my components are correctly written so that their onBeforeRender() / onConfigure() / onAfterRender() procedures can be safely called multiple times.) 

2) Should not Wicket itself reset the FLAG_PREPARED_FOR_RENDER when response restarting exception is caught and processed? 


I created a Wicket quickstart project demonstrating the bug here: http://lemming.hofyland.cz/restartbug.zip
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-05-20 19:11:12.327,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed May 20 19:16:16 UTC 2015,,,,,,0|i2eyyf:,9223372036854775807,,,,,,,,"20/May/15 05:29;lemmingucwcz;I originally encountered this bug in 6.14, but it ""works"" in 7.0.0-SNAPSHOT too.","20/May/15 19:11;jira-bot;Commit a58cf45bd865fd488fac86b94202830a3354a934 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a58cf45 ]

WICKET-5911 reset all flags after render
","20/May/15 19:13;jira-bot;Commit 010f0efdef14977bfef83f5975b96f24ac808ebe in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=010f0ef ]

WICKET-5911 reset all flags after render
",20/May/15 19:16;svenmeier;Flag FLAG_PREPARED_FOR_RENDER is now reset too via markRendering(false) - the page is now ready to be rerendered even after a previous exception.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wicket.xsd refers to non-existing xhtml.label:attlist,WICKET-5887,12822141,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,mgrigorov,mgrigorov,19/Apr/15 12:13,21/Apr/15 08:12,13/Mar/19 23:18,19/Apr/15 12:14,6.19.0,7.0.0-M5,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"As reported at http://markmail.org/message/6hcvptvmvybeq2iz wicket.xsd has a typo in 'xhtml.label:attlist'. It should be: xhtml.label.attlist, as defined at http://www.w3.org/MarkUp/SCHEMA/xhtml-basic-form-1.xsd",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-19 12:14:36.768,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Apr 21 08:12:35 UTC 2015,,,,,,0|i2dg5r:,9223372036854775807,,,,,,,,"19/Apr/15 12:14;jira-bot;Commit fa7677df6d41279ecf2f194210a6978d29fb218a in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fa7677d ]

WICKET-5887 wicket.xsd refers to non-existing xhtml.label:attlist
","19/Apr/15 12:14;jira-bot;Commit 623f8f4caecca34356949cf1156dcb7d8bb9544d in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=623f8f4 ]

WICKET-5887 wicket.xsd refers to non-existing xhtml.label:attlist

(cherry picked from commit fa7677df6d41279ecf2f194210a6978d29fb218a)
","19/Apr/15 19:45;jira-bot;Commit 46e11b400d796c3abf97bfc2e0c6a26a343cb9cc in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=46e11b4 ]

WICKET-5887 Minor simplification of wicket:for declaration - use wicket:notEmptyToken as a base
","19/Apr/15 19:46;jira-bot;Commit 5ae2809bd67787f27d3e7a84c1b52130c85bafa0 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5ae2809 ]

WICKET-5887 Minor simplification of wicket:for declaration - use wicket:notEmptyToken as a base

(cherry picked from commit 46e11b400d796c3abf97bfc2e0c6a26a343cb9cc)
","19/Apr/15 20:04;jira-bot;Commit 766336077a6e35ee0536cab76a204862b2a3993c in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7663360 ]

WICKET-5887 Mandate that the value of 'wicket:enclosure"" attribute is non-empty. Disallows whitespace
","19/Apr/15 20:04;jira-bot;Commit 7722b13c5955224db157e8b5313923636e362bac in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7722b13 ]

WICKET-5887 Mandate that the value of 'wicket:enclosure"" attribute is non-empty. Disallows whitespace

(cherry picked from commit 766336077a6e35ee0536cab76a204862b2a3993c)
","21/Apr/15 08:10;jira-bot;Commit 4ced73e4b8d7ae9bf4f1e1026ae9220ce3b30a9d in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4ced73e ]

WICKET-5887 Move <redefine> to the top to comply with XSD sequence order
","21/Apr/15 08:11;jira-bot;Commit 9539d818abbda45a24a93bd44c7eec5d4745a835 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9539d81 ]

WICKET-5887 Increment the version of wicket.xsd to 6.20.0 so it says when was the last update in it
","21/Apr/15 08:12;jira-bot;Commit 2ecbff6611b7bbf52582d5e2617cbd9d981bc851 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2ecbff6 ]

WICKET-5887 Move <redefine> to the top to comply with XSD sequence order

(cherry picked from commit 4ced73e4b8d7ae9bf4f1e1026ae9220ce3b30a9d)
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Feedback messages not cleared for invisible/disabled form components on submit.,WICKET-5883,12821167,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,denis.shok,denis.shok,15/Apr/15 14:05,19/Apr/15 21:26,13/Mar/19 23:18,19/Apr/15 21:26,6.19.0,,,,,,,,6.20.0,7.0.0-M6,,,,,,1,,,,,,,,"Having: 
- IFeedbackMessageFilter.NONE used as the default application's feedback message cleanup filter (in order to make feedback messages not to disappear after page refresh, i.e. persistent)
- form with validatable component whose enabled/visible state may be dynamically changed by user (e.g. checkbox ""send me email"" and text field ""email"")

First, user tries to submit form having invalid value - as the result validation error occurs. 
Then user makes that component invisible and retries form submitting - as the result no validation errors, but form wasn't submitted.

This happens because that component still has error feedback message got from first submit. Note that when using default application's feedback message cleanup filter, form is successfully submitted.

Probably, feedback messages should be cleared for invisible/disabled form components on submit, as it done for visible/enabled components in FormComponent.validate()",,,,,,,,,,,,,,,,,,,,,,,,,15/Apr/15 14:06;denis.shok;quickstart.zip;https://issues.apache.org/jira/secure/attachment/12725577/quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2015-04-17 12:17:33.116,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Apr 19 21:26:07 UTC 2015,,,,,,0|i2da9r:,9223372036854775807,,,,,,,,15/Apr/15 14:06;denis.shok;Quickstart attached.,17/Apr/15 12:17;svenmeier;You could just use a custom IFeedbackMessageFilter which cleans up all messages of invisible or disabled components. Can't you?,"17/Apr/15 12:48;mgrigorov;I'd argue that messages for invisible components should be preserved because they are not rendered.
I'm not sure why the messages for the disabled components are not cleaned up.","19/Apr/15 12:53;mgrigorov;OK. I see what happens.
The error feedback message is rendered but preserved for the next request because of:
{code}
// make feedback messages not to disappear after page refresh
getApplicationSettings().setFeedbackMessageCleanupFilter(IFeedbackMessageFilter.NONE);
{code}

[~svenmeier] What do you think about adding checks for component.isVisibileInHierarchy() and #isEnabledInHierarchy() at org.apache.wicket.markup.html.form.Form#anyFormComponentError()?
{code}
diff --git i/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java w/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java
index 789a804..c7fea42 100644
--- i/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java
+++ w/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java
@@ -1141,7 +1141,7 @@ public class Form<T> extends WebMarkupContainer implements IFormSubmitListener,
                        @Override
                        public void component(final Component component, final IVisit<Boolean> visit)
                        {
-                               if (component.hasErrorMessage())
+                               if (component.isVisibleInHierarchy() && component.isEnabledInHierarchy() && component.hasErrorMessage())
                                {
                                        visit.stop(true);
{code}

",19/Apr/15 16:19;svenmeier;[~martin-g] +1 that looks like a good solution,"19/Apr/15 21:22;jira-bot;Commit b980efc3ad60928d10b5a30e7aac067b2a8b508e in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b980efc ]

WICKET-5883 Feedback messages not cleared for invisible/disabled form components on submit.
","19/Apr/15 21:26;jira-bot;Commit cd3b92346b33b38c451434a1cabb7cf79d7188f0 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=cd3b923 ]

WICKET-5883 Feedback messages not cleared for invisible/disabled form components on submit.

(cherry picked from commit b980efc3ad60928d10b5a30e7aac067b2a8b508e)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WicketTester TagTester does not work as expected when using non self closing tags,WICKET-5874,12818876,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,ostlund,ostlund,07/Apr/15 09:53,07/Apr/15 12:23,13/Mar/19 23:18,07/Apr/15 12:23,,,,,,,,,6.20.0,7.0.0-M6,,,,,,0,,,,,,,,"WicketTester TagTester does not work as expected when using non self closing tags.

*WicketTester code*
{code}
TagTester tagTester = wicketTesterInstance.getTagByWicketId(""someInputId"");
{code}

*This does not work, _tagTester_ is null:*
{code}
<input wicket:id=""someInputId"">
{code}

*This works as expected:*
{code}
<input wicket:id=""someInputId""/>
{code}

Found using Wicket version 6.17.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-07 12:23:24.383,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Apr 07 12:23:35 UTC 2015,,,,,,0|i2cwev:,9223372036854775807,,,,,,,,"07/Apr/15 12:23;jira-bot;Commit 7fa2d45eb74e0447950bb5e8826846069f34d204 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=7fa2d45 ]

WICKET-5874 WicketTester TagTester does not work as expected when using non self closing tags
","07/Apr/15 12:23;jira-bot;Commit 907f891af1a158ef015e7fcd70e0c997b227d22a in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=907f891 ]

WICKET-5874 WicketTester TagTester does not work as expected when using non self closing tags

(cherry picked from commit 7fa2d45eb74e0447950bb5e8826846069f34d204)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BigDecimalConverter does not allow parsing of values great than Double.MAX_VALUE,WICKET-5861,12783792,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,20/Mar/15 23:32,21/Mar/15 18:15,13/Mar/19 23:18,21/Mar/15 14:33,6.19.0,7.0.0-M5,,,,,,,7.0.0-M6,,,,wicket,,,0,,,,,,,,See WICKET-5853,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-21 14:32:37.278,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Mar 21 18:15:27 UTC 2015,,,,,,0|i272nb:,9223372036854775807,,,,,,,,"21/Mar/15 14:32;jira-bot;Commit b80f6640b7a7c4645876cc2ce86552cb7144e48b in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b80f664 ]

WICKET-5853 and WICKET-5861: number converters are based on BigDecimals now
","21/Mar/15 14:33;svenmeier;All number converters are based on BigDecimal now, so now rounding or bounds error should occur.","21/Mar/15 15:21;zeratul;Hi Sven,

thanks for fixing this. I had something very similar drafted and I got only one questions if I may:

1) https://github.com/apache/wicket/blob/master/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/BigIntegerConverter.java#L55
Is there some reason for not using _number.toBigInteger()_ ?

Thanks.","21/Mar/15 17:03;jira-bot;Commit 240972e09f3fe0f0ee20e320a7fe136f791bd69e in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=240972e ]

WICKET-5861 cleanup: remove special handling of empty string in Big*Converter and use #toBigInteger()
","21/Mar/15 17:07;svenmeier;> some reason for not using number.toBigInteger() ?

I was looking for that method, but didn't found it o_O

Thanks for you participation.","21/Mar/15 18:15;zeratul;Np, thanks again for quick fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LongConverter converts some values greater than Long.MAX_VALUE,WICKET-5853,12780491,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,zeratul,zeratul,09/Mar/15 12:45,21/Mar/15 14:33,13/Mar/19 23:18,21/Mar/15 14:33,6.19.0,7.0.0-M5,,,,,,,7.0.0-M6,,,,wicket,,,0,,,,,,,,"Currently it's possible to submit some values via Long Textfield<Long> that are greater than Long.MAX_VALUE. This will produce converted input and model update with value of Long.MAX_VALUE

I'm not sure what the behavior should be - imho throwing ConversionException seems fair as the input isn't a valid Long.

The reason seems to be precision loss during Double.valueOf(input) execution while converting, and then comparing to Long.MAX_VALUE  using Long.doubleValue() in *AbstractNumberConverter*, which by casting leads to to the same precision loss and the numbers are seemingly equal during comparison of ranges.

Maybe using BigDecimals for parsing could help here.

The quickstart is available at [https://github.com/zeratul021/wicket-number-conversion].

For the fastest demonstration I extended Wicket's _longConversion()_ test-case in *ConvertersTest*: [https://github.com/zeratul021/wicket-number-conversion/blob/master/src/test/java/com/github/zeratul021/wicketnumberconversion/ConvertersTest.java#L300]",,,,,,,,,,,,,,,,,WICKET-5861,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-16 14:32:19.876,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Mar 21 14:33:30 UTC 2015,,,,,,0|i26iof:,9223372036854775807,,,,,,,,"16/Mar/15 14:32;mgrigorov;{code}
LongConverter converter = new LongConverter();
Long converted = converter.convertToObject(""9223372036854776833"", Locale.US);
{code}

fails for me with ConversionException:
{code}
org.apache.wicket.util.convert.ConversionException: Value cannot be greater than 9.223372036854776E18
	at org.apache.wicket.util.convert.converter.AbstractConverter.newConversionException(AbstractConverter.java:80)
	at org.apache.wicket.util.convert.converter.AbstractNumberConverter.parse(AbstractNumberConverter.java:90)
	at org.apache.wicket.util.convert.converter.LongConverter.convertToObject(LongConverter.java:45)
	at org.apache.wicket.util.convert.converter.LongConverterTest.aa(LongConverterTest.java:15)
{code}

I'll test now your quickstart.","18/Mar/15 14:54;svenmeier;Is this a real problem or rather a theoretical exercise?
It seems we'll have to change the signature of AbstractNumberConverter#parse(Object, double, double, Locale) to support this case.

If your users are allowed to enter such high numbers, you can switch to BigDecimals instead.","18/Mar/15 16:50;zeratul;Hi Martin,

In my version of _longConversion()_ the first added test-case shows that number you used is the boundary where the conversion works again. However try decrementing it and pass it to the converter (9223372036854776832) - it should fail as well but doesn't in my second added test-case.","18/Mar/15 17:33;zeratul;Hi Sven,

we can of course use BigIntegers or BigDecimals.

Our specification allows numbers in the Long range so we used that and hit a corner-case. We fixed it by setting RangeValidator max to the Long.MAX_VALUE - 1 which works as a viable workaround for us. 

So you might say that from this point on it's a theoretical exercise. In my books it's a bug because it contract of AbstractNumberConverter#parse() is not honored. It's up to you guys to decide what to do with it. I can see that a signature change at such place is risky and gain is meager.

Another curious thing I noticed while working on this is that both BigInteger and BigDecimal can not have arbitrary size because they are bound in the range of -Double.MAX_VALUE and Double.MAX_VALUE in their respective converters (forced by method signature).","18/Mar/15 18:13;svenmeier;Hi Marek,

>both BigInteger and BigDecimal can not have arbitrary size because they are bound
>in the range of -Double.MAX_VALUE and Double.MAX_VALUE in their respective converters

this is what I thought too initially.
But it is not the case actually - the double value of very large BigDecimal is Double.MAX_VALUE, thus the converter will not complain.
","19/Mar/15 09:28;zeratul;Hi Sven,

I didn't know that so I tried with my quickstart and for big enough BigInteger or BigDecimal the _doubleValue()_ returns actually Double.POSITIVE_INFINITY which will fail the conversion at the range check.","19/Mar/15 09:45;svenmeier;Hi Marek,

I stand corrected: BigDecimalConverter cannot parse large values (i.e. larger than Double.MAX_VALUE) currently.

It's a rather extreme usecase, nevertheless we should support it.","21/Mar/15 14:32;jira-bot;Commit b80f6640b7a7c4645876cc2ce86552cb7144e48b in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b80f664 ]

WICKET-5853 and WICKET-5861: number converters are based on BigDecimals now
","21/Mar/15 14:33;svenmeier;All number converters are based on BigDecimal now, so now rounding or bounds error should occur.",,,,,,,,,,,,,,,,,,,,,,,,,,,
URL IPv6 parsing,WICKET-5809,12765969,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,guyw,guyw,09/Jan/15 08:37,10/Jan/15 18:03,13/Mar/19 23:18,10/Jan/15 18:03,6.18.0,7.0.0-M4,,,,,,,6.19.0,7.0.0-M5,,,wicket,,,0,,,,,,,,"There is an issue with native IPv6 address parsing.
""https://[::1]/myapp"", URL parsing fails:

org.apache.wicket.request.Url.parse(""https://[::1]/myapp"")
generates an exception:
java.lang.NumberFormatException: For input string: ""1]""
at java.lang.NumberFormatException.forInputString(
NumberFormatException.java:65)
at java.lang.Integer.parseInt(Integer.java:492)

However, ""https://[::1]:80/myapp"" works as expected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-10 17:44:11.112,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Jan 10 17:58:48 UTC 2015,,,,,,0|i2444f:,9223372036854775807,,,,,,,,"10/Jan/15 17:44;jira-bot;Commit b1f4e6a3444dab7869a26ce7914e4faaabd50462 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b1f4e6a ]

WICKET-5809 URL IPv6 parsing","10/Jan/15 17:58;jira-bot;Commit 86e49b017688e73bcd2adf915d3e667a852b13de in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=86e49b0 ]

WICKET-5809 URL IPv6 parsing
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
arraycopy with bad length in AbstractRequestLogger:172,WICKET-5784,12759714,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,honzik,honzik,05/Dec/14 16:19,05/Dec/14 18:52,13/Mar/19 23:18,05/Dec/14 18:52,6.17.0,,,,,,,,6.19.0,7.0.0-M5,,,wicket,wicket-devutils,,0,easyfix,patch,,,,,,"When clicking on DebugBar org.apache.wicket.devutils.inspector.LiveSessionsPage NullPointerException is thrown.
After investigating the reason I think AbstractRequestLogger:172 arraycopy params cause it. 
{{arraycopy(requestWindow, 0, copy, requestWindow.length - oldestPos, indexInWindow);}}
Should be changed to:
{{arraycopy(requestWindow, 0, copy, requestWindow.length - oldestPos, oldestPos);}}","6.17.0 with DebugBar from devutils on Tomcat 7, Java 7 (Oracle)",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-05 18:41:40.812,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Dec 05 18:52:26 UTC 2014,,,,,,0|i233sf:,9223372036854775807,,,,,,,,"05/Dec/14 18:41;jira-bot;Commit 2a25390957d9151e6176830cb617f42d1f5680f3 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2a25390 ]

WICKET-5784 fixed copying of requests","05/Dec/14 18:46;jira-bot;Commit b6259e5f3f028cf477eb36aa1a758790ccf3008b in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b6259e5 ]

WICKET-5784 fixed copying of requests
","05/Dec/14 18:52;svenmeier;The whole copying method was bogus.

Thanks Jan!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem with WICKET-4441 and RestartResponseAtInterceptPageException,WICKET-5734,12750594,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,bitstorm,bitstorm,26/Oct/14 11:40,03/Nov/14 12:22,13/Mar/19 23:18,02/Nov/14 22:25,7.0.0-M3,,,,,,,,7.0.0-M4,,,,,,,0,,,,,,,,"WICKET-4441 introduced an issue when our app has an authorization strategy and user is logged out. If user tries to access a protected url/page, RestartResponseAtInterceptPageException is handled by DefaultExceptionMapper and leads to exception page instead of redirecting user.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-10-26 14:00:21.504,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Oct 26 18:32:49 UTC 2014,,,,,,0|i21l33:,9223372036854775807,,,,,,,,"26/Oct/14 14:00;jira-bot;Commit 71674df5c8905c425152038281379027de89cf9b in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=71674df ]

WICKET-5734 Problem with WICKET-4441 and
RestartResponseAtInterceptPageException","26/Oct/14 18:32;jira-bot;Commit 71674df5c8905c425152038281379027de89cf9b in wicket's branch refs/heads/improvingQueuing from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=71674df ]

WICKET-5734 Problem with WICKET-4441 and
RestartResponseAtInterceptPageException",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to find markup for children of deeply nested IComponentResolvers during Ajax response,WICKET-5569,12709761,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,jesselong,jesselong,22/Apr/14 13:15,15/Oct/14 08:07,13/Mar/19 23:18,26/May/14 19:45,6.14.0,,,,,,,,6.16.0,7.0.0-M2,,,wicket,,,0,,,,,,,,"Component hierarchy: Page -> WebMarkupContainer -> IComponentResolver (that uses Page to resolve) and Page -> Panel.

Markup hierarchy: Page -> WebMarkupContainer -> IComponentResolver -> Panel.

When rendering whole page, it works, because it is markup driven. Wicket encounters ComponentTag for Panel and resolves the Panel using IComponentResolver, which retrieves the Panel from the Page.

When you add the Panel to an AjaxRequestTarget, the render is component driven. In order to render the Panel, we must retrieve the markup for the Panel from its parent MarkupContainer, which happens to be the Page.

Markup.java around line 230 skips to closing tags of ComponentTag, so when Page gets to the opening tag of the WebMarkupContainer, it skips to the closing tag of the WebMarkupContainer, and so passes over the ComponentTag for Panel without noticing it. There is actually another check, in DefaultMarkupSourcingStrategy, that tries to fetch from all the ""transparent"" components in the markup container, but this is not good enough, because in our example, the IComponentResolver is not actually a direct child of the Panel's parent, to it is never used to try find the markup.

One solution might be to traverse the tree, and attempt to find the markup from all IComponentResolving MarkupContainers, but we should be careful. I'm a bit concerned at how various parts of Wicket just assume that an IComponentResolver is transparent and resolves from its direct parent only.

If we do go down the route of traversing the tree to find IComponentResolvers, then try find the markup from each of them, we really should add a check in AbstractMarkupSourcingStrategy#searchMarkupInTransparentResolvers() to check that the Component that the IComponentResolver resolves for the markup id is the same component for which we are looking for markup.

This is a difficult one. I am working around it for the mean time, just recording the difficulty here. Will try make a patch when I can.",,,,,,,,,,,,,,,,,,,,,,,,,27/Apr/14 20:03;jesselong;WICKET-5569-1.patch;https://issues.apache.org/jira/secure/attachment/12642151/WICKET-5569-1.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2014-05-26 19:45:01.602,,,no_permission,,,,,,,,,,,,388083,,,Wed Oct 15 07:46:56 UTC 2014,,,,,,0|i1uuov:,388341,,,,,,,,"27/Apr/14 20:03;jesselong;WICKET-5569-1.patch

Patch against Wicket 6. This solution uses the visitor pattern to traverse all children of the markup container to find descendants which are both MarkupContainers and IComponentResolvers. It then attempts to retrieve markup for the component from the MarkupContainer. If markup is found, a the IComponentResolver interface of the MarkupContainer is used to resolve the Component for that markup to ensure that we get the correct markup fragment.

The exact implementation is supposed to match that of MarkupContainer#renderNext(). Please note that MarkupContainer#renderNext() is not final. I think it should be.

I added a comment asking whether or not it is safe to assume that MarkupStream#atTag() would return true. I'm not sure, please check and fix if my assumption is wrong.

Included are tests.","27/Apr/14 20:13;jesselong;More on MarkupContainer#renderNext(). It is marked as not part of the public API, and is protected. Nothing in Wicket overrides this method, and I cant see how anyone would want to override it without a lot of copy and paste.

The specific part I care about in the context of this issue is: when an attempting to resolve a component, first try get(String) from the MarkupContainer, then, if that did not work, try resolve using IComponentResolvers. This is the current behavior, and my patch does the same. However, if we allow custom ways of resolving components (non-final MarkupContainer#renderNext()) then the patch will not always be correct. I dont think that any custom resolving is necessary outside of what IComponentResolver provides, so I think MarkupContainer#renderNext() should be made final.","05/May/14 16:19;jesselong;Please dont apply this patch yet, I think that have a better solution by changing Markup#find() and MarkupFragment#find(). Will update once implemented and tested.","06/May/14 11:12;jesselong;I have proposed the alternative solution by modifying Markup#find() as WICKET-5580. While the WICKET-5580 solution will solve my specific needs as far as WICKET-5569 is concerned, there is still a theoretical problem to be solved with WICKET-5569. I still think that AbstractMarkupSourcingStrategy#searchMarkupInTransparentResolvers() is better with the WICKET-5569 patch applied, but it it will be used less with WICKET-5580 patch applied.","26/May/14 19:45;mgrigorov;I've improved a bit your patch and applied it.
Thanks again for your contributions!","15/Oct/14 07:46;jira-bot;Commit a4ae23c635b6e8f71d9e616fbc22f60c74e176d0 in wicket's branch refs/heads/wicket-6.x from [~jesselong]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a4ae23c ]

Avoid visiting some children more than once when searching for markup of a child.

When the ComponentTag of a child Component is nested inside a sibling
Component's ComponentTag,
AssociatedMarkupSourcingStrategy.searchMarkupInTransparentResolvers() is
called to attempt find the markup from inside component resolving markup
containers.

WICKET-5569 introduced behavior to use the visitor pattern to traverse
the Component tree and find these component resolving markup containers
however nested they may be.

Since the highest (page-most) component resolving markup container
component tree will probably cause a call to
searchMarkupInTransparentResolvers() if the markup is not found, there
is no need to descend any deeper than the first component resolving
markup container in that method.
","15/Oct/14 07:46;jira-bot;Commit a9e82296a772d35b5d07900d5946e2cbdeb05a64 in wicket's branch refs/heads/master from [~jesselong]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a9e8229 ]

Avoid visiting some children more than once when searching for markup of a child.

When the ComponentTag of a child Component is nested inside a sibling
Component's ComponentTag,
AssociatedMarkupSourcingStrategy.searchMarkupInTransparentResolvers() is
called to attempt find the markup from inside component resolving markup
containers.

WICKET-5569 introduced behavior to use the visitor pattern to traverse
the Component tree and find these component resolving markup containers
however nested they may be.

Since the highest (page-most) component resolving markup container
component tree will probably cause a call to
searchMarkupInTransparentResolvers() if the markup is not found, there
is no need to descend any deeper than the first component resolving
markup container in that method.

(cherry picked from commit a4ae23c635b6e8f71d9e616fbc22f60c74e176d0)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Method Strings.join doesn't work correctly if separator is empty.,WICKET-5720,12745987,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,bitstorm,bitstorm,05/Oct/14 13:47,05/Oct/14 13:52,13/Mar/19 23:18,05/Oct/14 13:52,6.17.0,7.0.0-M3,,,,,,,6.18.0,7.0.0-M4,,,,,,0,,,,,,,,"If we use an empty separator ("""") to join strings, the first character of any fragment is truncated.
Es ""foo"", ""bar"", ""baz"" became ""ooaraz"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-10-05 13:49:09.19,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Oct 05 13:52:00 UTC 2014,,,,,,0|i20t9r:,9223372036854775807,,,,,,,,"05/Oct/14 13:49;jira-bot;Commit 2fc6a3957da8b59443afb6e97e849510983a411b in wicket's branch refs/heads/master from adelbene
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2fc6a39 ]

WICKET-5720 Method Strings.join doesn't work correctly if separator is
empty.","05/Oct/14 13:52;jira-bot;Commit 9bd9d3679d90ed0192f4127373d34f7c43faa660 in wicket's branch refs/heads/wicket-6.x from adelbene
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=9bd9d36 ]

WICKET-5720 Method Strings.join doesn't work correctly if separator is
empty.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SecuritySettings.setEnforceMounts() does not work when the mounted mapper is not in the root compound mapper,WICKET-5712,12744984,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,jesselong,jesselong,jesselong,30/Sep/14 16:10,30/Sep/14 16:49,13/Mar/19 23:18,30/Sep/14 16:49,6.17.0,,,,,,,,6.18.0,7.0.0-M4,,,wicket,,,0,,,,,,,,"BookmarkableMapper.isPageMounted() assumes that all mounted mappers are in Application.getRootRequestMapperAsCompound(). Sometimes the mappers make a tree structure, with multiple compounds existing, sometimes separated by wrappers, like HttpsMapper and CryptoMapper.

Because of this, BookmarkableMapper fails to realise that a page is mounted and so does not enforce mounting.",,,,,,,,,,,,,,,,,WICKET-5560,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-30 16:17:50.07,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 30 16:49:52 UTC 2014,,,,,,0|i20n2f:,9223372036854775807,,,,,,,,30/Sep/14 16:11;jesselong;Relates to work done in WICKET-5560,"30/Sep/14 16:17;jira-bot;Commit a05aa4cae6145a707698fce9ef73885656589318 in wicket's branch refs/heads/wicket-6.x from [~jesselong]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a05aa4c ]

WICKET-5712 SecuritySettings.setEnforceMounts() does not work when the mounted mapper is not in the root compound mapper
","30/Sep/14 16:47;jira-bot;Commit 145da0212480f26b571208968e299abdfd951e2b in wicket's branch refs/heads/master from [~jesselong]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=145da02 ]

WICKET-5712 SecuritySettings.setEnforceMounts() does not work when the mounted mapper is not in the root compound mapper

(cherry picked from commit a05aa4cae6145a707698fce9ef73885656589318)

Conflicts:
	wicket-core/src/main/java/org/apache/wicket/core/request/mapper/BookmarkableMapper.java
","30/Sep/14 16:49;jesselong;Fixed in 6.18.0 and 7.0.0-M4, test added.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nested Redirects and REDIRECT_TO_BUFFER,WICKET-5689,12737828,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,gudujarlson,gudujarlson,29/Aug/14 15:59,09/Sep/14 13:38,13/Mar/19 23:18,09/Sep/14 13:38,1.5.11,6.16.0,,,,,,,6.18.0,7.0.0-M4,,,,,,0,,,,,,,,"When the render strategy is REDIRECT_TO_BUFFER, redirects cannot be nested. After the second redirect, Wicket renders the buffered first page in preference to the second page. The relevant code is in WebPageRenderer.respond:

{noformat}
		if (bufferedResponse != null)
		{
			logger.warn(""The Buffered response should be handled by BufferedResponseRequestHandler"");
			// if there is saved response for this URL render it
			bufferedResponse.writeTo((WebResponse)requestCycle.getResponse());
		}
{noformat}

The attached quickstart demonstrates the issue. Simply navigate to the home page. The observed behavior is that Page1 is displayed, but I expect Page2 to be displayed.

I can work around the issue by calling WebApplication.getAndRemoveBufferedResponse() to clear the render buffer, but I am uneasy with this solution since it seems like I am playing with Wicket internals; albeit the function is public. ","Windows 7, tomcat 7.0.47",,,,,,,,,,,,,,,,,,,,,,,,29/Aug/14 16:01;gudujarlson;nestedredirects.tar.gz;https://issues.apache.org/jira/secure/attachment/12665361/nestedredirects.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,2014-09-09 08:03:54.345,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Sep 09 13:38:21 UTC 2014,,,,,,0|i1zhon:,9223372036854775807,,,,,,,,"09/Sep/14 08:03;mgrigorov;In my opinion this code snippet should be removed completely.
If BufferedResponseRequestHandler has the chance to handle the request it will do its job. But if something else (like the use case in this ticket) tries to handle the request in another way then Wicket should not try to ""recover"" in such a late phase of the request processing.

Opinions ?","09/Sep/14 08:14;svenmeier;>If BufferedResponseRequestHandler has the chance to handle the request it will do its job.
My thoughts exactly.

>In my opinion this code snippet should be removed completely.
Agreed.
","09/Sep/14 13:22;jira-bot;Commit b5b2c9d10e6ae1df0e44a5448558da285d0cea99 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b5b2c9d ]

WICKET-5689 Nested Redirects and REDIRECT_TO_BUFFER
","09/Sep/14 13:38;jira-bot;Commit 2ac29d3065a448c00a2ba7ac4b8cd53ae6c2b91b in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2ac29d3 ]

WICKET-5689 Nested Redirects and REDIRECT_TO_BUFFER

(cherry picked from commit b5b2c9d10e6ae1df0e44a5448558da285d0cea99)

Conflicts:
	wicket-core/src/main/java/org/apache/wicket/request/handler/render/WebPageRenderer.java
",09/Sep/14 13:38;mgrigorov;Removed the code as suggested earlier.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
content type in header is being lost when using a AbstractTransformerBehavior,WICKET-5687,12737044,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,kukushi,kukushi,27/Aug/14 08:36,29/Aug/14 10:43,13/Mar/19 23:18,29/Aug/14 07:18,6.16.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket,,,0,,,,,,,,"The content type header information is being lost when using a AbstractTransformerBehavior, please see the attached example of the problem for an example.

I believe this is the same issue as WICKET-3633.",,,,,,,,,,,,,,,,,,,,,,,,,27/Aug/14 08:42;kukushi;defect.tar.bz2;https://issues.apache.org/jira/secure/attachment/12664597/defect.tar.bz2,,,,1.0,,,,,,,,,,,,,,,,,,,2014-08-29 07:03:09.548,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Fri Aug 29 10:43:06 UTC 2014,,,,,,0|i1zdsf:,9223372036854775807,,,,,,,,"27/Aug/14 08:42;kukushi;======with AbstractTransformerBehaviour=====
# /tmp> wget localhost:8080
--2014-08-27 09:39:54--  http://localhost:8080/
Resolving localhost... ::1, 127.0.0.1, fe80::1
Connecting to localhost|::1|:8080... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified
Saving to: 'index.html'

    [ <=>                                                                                                                   ] 2,529       --.-K/s   in 0s

2014-08-27 09:39:55 (142 MB/s) - 'index.html' saved [2529]

======without AbstractTransformerBehaviour=====
# /tmp> wget localhost:8080
--2014-08-27 09:40:51--  http://localhost:8080/
Resolving localhost... ::1, 127.0.0.1, fe80::1
Connecting to localhost|::1|:8080... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: 'index.html.1'

    [ <=>                                                                                                                   ] 2,529       --.-K/s   in 0s

2014-08-27 09:40:52 (172 MB/s) - 'index.html.1' saved [2529]","29/Aug/14 07:03;mgrigorov;Please don't make our lives harder. 
To unpack the file I had to do: 

$ tar jxvf defect.tar.bz2 
tar: This does not look like a tar archive
tar: Skipping to next header
tar: Exiting with failure status due to previous errors
$ file defect.tar.bz2 
defect.tar.bz2: bzip2 compressed data, block size = 900k
$ bunzip2 defect.tar.bz2 
$ file defect.tar 
defect.tar: gzip compressed data, from Unix, last modified: Wed Aug 27 11:35:40 2014
$ mv defect.tar defect.gz
$ gunzip defect.gz 
$ file defect 
defect: POSIX tar archive
$ mv defect defect.tar
$ tar xvf defect.tar 

","29/Aug/14 07:17;jira-bot;Commit 3b0b2f2032e27445347b5ca24420933b4f32723f in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3b0b2f2 ]

WICKET-5687 content type in header is being lost when using a AbstractTransformerBehavior

Preserve the web response's meta data (headers) when AbstractTransformerBehavior is used to transform the page's markup
","29/Aug/14 07:18;jira-bot;Commit 01368001943155bc5262f9dc0df009d17aa66bda in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0136800 ]

WICKET-5687 content type in header is being lost when using a AbstractTransformerBehavior

Preserve the web response's meta data (headers) when AbstractTransformerBehavior is used to transform the page's markup

(cherry picked from commit 3b0b2f2032e27445347b5ca24420933b4f32723f)
","29/Aug/14 07:18;mgrigorov;Fixed!
Thanks for reporting!",29/Aug/14 10:43;kukushi;Thanks. sorry for the confusing file extension!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jquery.wicketatmosphere.js is not packed in wicket-atmosphere.jar and thus leads to 404,WICKET-5685,12737032,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,mgrigorov,mgrigorov,27/Aug/14 07:39,27/Aug/14 07:40,13/Mar/19 23:18,27/Aug/14 07:40,6.17.0,,,,,,,,6.17.0,,,,wicket-atmosphere,,,0,,,,,,,,With the recent introduction of wicket.properties in wicket-atmosphere/src/main/resources Maven stopped packaging any resources from src/main/java and thus jquery.wicketatmosphere.js is not packed in the jar and the functionality doesn't work any more.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-27 07:40:41.126,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Aug 27 07:40:51 UTC 2014,,,,,,0|i1zdpr:,9223372036854775807,,,,,,,,"27/Aug/14 07:40;jira-bot;Commit 2dd4f515d7d4eefd272b1d79793b9efcd009ee61 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=2dd4f51 ]

WICKET-5685 jquery.wicketatmosphere.js is not packed in wicket-atmosphere.jar and thus leads to 404
","27/Aug/14 07:40;jira-bot;Commit 0a761f54f8dbf46b1f5561b493e4647e5930122b in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0a761f5 ]

WICKET-5685 jquery.wicketatmosphere.js is not packed in wicket-atmosphere.jar and thus leads to 404

(cherry picked from commit 2dd4f515d7d4eefd272b1d79793b9efcd009ee61)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxEditableLabel keeps raw input after cancel following a validation failure ,WICKET-5680,12735730,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,21/Aug/14 08:26,21/Aug/14 08:42,13/Mar/19 23:18,21/Aug/14 08:42,6.16.0,7.0.0-M2,,,,,,,6.17.0,7.0.0-M3,,,wicket-extensions,,,0,,,,,,,,"Raw input should be cleared after cancel, otherwise it will reappear on next editing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-08-21 08:38:09.54,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Aug 21 08:40:34 UTC 2014,,,,,,0|i1z6bb:,9223372036854775807,,,,,,,,"21/Aug/14 08:38;jira-bot;Commit 4559da4ef9c0c38a9c7092be3785e27611a535a6 in wicket's branch refs/heads/master from svenmeier
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=4559da4 ]

WICKET-5680 no need to serialize form element explicitly, wicket-ajax
does it already
","21/Aug/14 08:38;jira-bot;Commit a65fea5a743d161f1c5c06499f486d38cb5b0623 in wicket's branch refs/heads/master from svenmeier
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a65fea5 ]

WICKET-5680 clear input on cancel
","21/Aug/14 08:40;jira-bot;Commit 45719f3f86bb419e177afe262ce5e1987cc97ce7 in wicket's branch refs/heads/wicket-6.x from svenmeier
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=45719f3 ]

WICKET-5680 no need to serialize form element explicitly, wicket-ajax
does it already","21/Aug/14 08:40;jira-bot;Commit 45ad072fc482ed4a2d3b187befbfba6de01033d5 in wicket's branch refs/heads/wicket-6.x from svenmeier
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=45ad072 ]

WICKET-5680 clear input on cancel",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AjaxWizardButtonBar broken since ARA#preventDefault is false,WICKET-5644,12727461,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,15/Jul/14 20:37,15/Jul/14 20:40,13/Mar/19 23:18,15/Jul/14 20:40,7.0.0-M2,,,,,,,,7.0.0-M3,,,,wicket,,,0,,,,,,,,"AjaxWizardButtonBar has to prevent non-Ajax submit, similar to AjaxButton.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,405567,,,2014-07-15 20:37:08.0,,,,,,0|i1xslz:,405593,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResourceResponse does not write headers when status code is set,WICKET-5639,12726783,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,ntkoopman,ntkoopman,11/Jul/14 11:22,14/Jul/14 15:20,13/Mar/19 23:18,14/Jul/14 15:20,6.16.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket,,,0,,,,,,,,"When creating a ResourceResponse from a Resource, if you set the status code to anything not null, the headers you set will not be sent.

The problem is in
org.apache.wicket.request.resource.AbstractResource#setResponseHeaders
which will abort if data.getStatusCode() != null.
I see no reason to return from that branch.

My use case is implementing Partial Content, which requires both code 206 and custom headers. Our current workaround is overloading setResponseHeaders.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-07-14 15:20:41.068,,,no_permission,,,,,,,,,,,,404890,,,Mon Jul 14 15:20:41 UTC 2014,,,,,,0|i1xojz:,404928,,,,,,,,14/Jul/14 15:20;mgrigorov;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix last button translation germany of wizard to 'Letzter',WICKET-5630,12723596,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,patrick1701,patrick1701,25/Jun/14 09:41,25/Jun/14 10:57,13/Mar/19 23:18,25/Jun/14 10:57,6.14.0,,,,,,,,6.17.0,7.0.0-M3,,,wicket-extensions,,,0,,,,,,,,"Hi,
should be 'Letzter' instead of 'Letzer'...

regards
Patrick",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-06-25 10:57:05.656,,,no_permission,,,,,,,,,,,,401781,,,Wed Jun 25 10:57:05 UTC 2014,,,,,,0|i1x5nj:,401850,,,,,,,,25/Jun/14 10:57;svenmeier;Corrected. Danke!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RequestLogger's server duration does not include 'detach duration',WICKET-5241,12653712,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,chrisgunnink,chrisgunnink,19/Jun/13 14:07,24/Jun/14 13:25,13/Mar/19 23:18,24/Jun/14 13:25,6.6.0,,,,,,,,7.0.0-M3,,,,wicket,,,0,performance,,,,,,,"When a certain IModel impl takes a lot of time to detach, this will not be included in the 'duration' section. This is very easy to reproduce: use a model that sleeps for 10 seconds in the detach(); make sure to write a page which will not much time to render, say 100ms. One will see that the RequestLogger will output 100ms as duration, instead of 10100ms.

In our production environment, these this server duration is the primary metric to show server performance; so right now we're dealing with misleading figures.

I hope this is an easy one to fix ;-)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-25 06:50:16.138,,,no_permission,,,,,,,,,,,,333989,,,Tue Jun 24 13:25:19 UTC 2014,,,,,,0|i1lm4n:,334315,,,,,,,,"25/Jun/13 06:50;cedricgatay;You can find an implementation allowing to trace the time taken for the request including the time taken for detaching entities at the following commit https://github.com/CedricGatay/wicket/compare/WICKET-5241?expand=1

Could you please provide a quickstart allowing to test the implementation I made before merging it ?","25/Jun/13 09:07;dashorst;The issue is not that the requestlogger is reporting wrong figures, but rather that the detach phase is halting the response. When the request is in detach phase, no client side visible stuff should happen, including having a request stall for 10 seconds. To further aggravate the issue, onDetach is called twice in Wicket 6, making each request take twice as long as necessary:

I've crafted 4 quickstarts: 1.3.7, 1.4.22, 1.5.10 and 6.8.0, each running on 8083, 8084, 8085 and 8086 respectively. Each HomePage class has been modified to include the following onDetach handler:

	@Override
	protected void onDetach() {
		super.onDetach();
		Duration.seconds(10).sleep();
	}


Wicket 1.3:
time curl http://localhost:8083 -o /dev/null -s

real	0m10.021s
user	0m0.009s
sys	0m0.007s

Wicket 1.4:

time curl http://localhost:8084 -o /dev/null -s

real	0m10.221s
user	0m0.008s
sys	0m0.006s

Wicket 1.5:

time curl http://localhost:8085 -o /dev/null -s

real	0m20.330s
user	0m0.007s
sys	0m0.007s

Wicket 6.8:

time curl http://localhost:8086 -o /dev/null -s

real	0m20.282s
user	0m0.008s
sys	0m0.007s

According to me this is completely wrong. There are two issues at hand:

1. the response is only written to the client after detach
2. since wicket 1.5 the detach is performed twice

1. is easily fixable by flushing the response prior to detaching, giving instant performance boosts to all users of Wicket

this doesn't fix the reported times by curl, but will enable browsers to start processing the markup (and close the connection on their end).

2. I don't know yet (haven't debugged that part)
","25/Jun/13 09:50;mgrigorov;According 2) see:
*) WICKET-4012
*) WICKET-84
*) http://markmail.org/thread/x7744zsbi7jsddqw",05/Mar/14 15:33;mgrigorov;When someone starts working on this task (s)he may also take a look at the strange synchronization on a field that is re-assigned in the synchronization block: https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/protocol/http/AbstractRequestLogger.java?source=c#L458,"14/Mar/14 09:55;mgrigorov;branch '5241-request-logger-duration' [1] contains possible fixes for the problems identified above.
Please review/test it. 

1. https://github.com/apache/wicket/compare/wicket-6.x...5241-request-logger-duration",24/Jun/14 13:25;mgrigorov;The suggested changes from branch '5241-request-logger-duration' are applied.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UploadProgressBar does not show up if no FileUploadField is given,WICKET-5615,12720942,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,12/Jun/14 18:58,13/Jun/14 06:39,13/Mar/19 23:18,13/Jun/14 06:39,6.15.0,7.0.0-M1,,,,,,,6.17.0,7.0.0-M3,,,wicket-extensions,,,0,,,,,,,,"start() in progressbar.js no longer starts, if it is configured to show progress for any uploadField (i.e. fileid is """")",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,399141,,,Thu Jun 12 19:08:20 UTC 2014,,,,,,0|i1wppr:,399257,,,,,,,,12/Jun/14 19:08;svenmeier;Restored the old condition.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"AjaxFallbackButton does not call #onError(ART, Form) when JavaScript disabled",WICKET-5598,12715444,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,20/May/14 12:02,20/May/14 12:10,13/Mar/19 23:18,20/May/14 12:10,6.15.0,7.0.0-M1,,,,,,,7.0.0-M2,,,,wicket,,,0,,,,,,,,"AjaxFallbackButton promises to ""degrade to a normal request if ajax is not available"":
Thus if JavaScript is disabled, #onSubmit(ART, Form) is called with a null ART.
But in case of validation errors, #onError(ART, Form) is not invoked.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,393730,,,Tue May 20 12:10:41 UTC 2014,,,,,,0|i1vspb:,393886,,,,,,,,"20/May/14 12:10;svenmeier;The callback is now forwared to #onError(ART, Form). 

I don't think we should apply the change in 6.x, since applications may depend on the current state.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a method to clear the cache of CachingResourceStreamLocator,WICKET-5592,12714462,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,frido-lbm,frido-lbm,15/May/14 11:56,19/May/14 15:01,13/Mar/19 23:18,19/May/14 15:01,6.15.0,,,,,,,,6.16.0,7.0.0-M2,,,wicket,,,0,,,,,,,,See WICKET-5590,,,,,,,,,,,,,,,,,WICKET-5590,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,392775,,,2014-05-15 11:56:33.0,,,,,,0|i1vmzr:,392951,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing translation for HoursValidator.range (in DateTimeField),WICKET-5591,12714420,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,fdonckels,fdonckels,15/May/14 08:38,17/May/14 15:07,13/Mar/19 23:18,17/May/14 15:07,6.15.0,,,,,,,,6.16.0,7.0.0-M2,,,wicket-datetime,,,0,,,,,,,,"The HoursValidator in DateTimeField extends RangeValidator. Therefore when validation fails, the key used is HoursValidator.range. There is no default translation for it (and the translation mechanism doesn't look at the inheritance chain for validators).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-05-17 15:07:27.686,,,no_permission,,,,,,,,,,,,392733,,,Sat May 17 15:07:27 UTC 2014,,,,,,0|i1vmqf:,392909,,,,,,,,"17/May/14 15:07;svenmeier;Message key is ""RangeValidator.range"" now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade wicket-atmosphere to the latest version of atmosphere,WICKET-5589,12713305,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,papegaaij,papegaaij,papegaaij,09/May/14 13:15,09/May/14 13:17,13/Mar/19 23:18,09/May/14 13:17,6.15.0,7.0.0-M1,,,,,,,6.16.0,7.0.0-M2,,,wicket-atmosphere,,,0,,,,,,,,Wicket-atmosphere should be upgraded to atmosphere 2.1.4 and js 2.1.6. It's guava dependency to 17.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,391621,,,Fri May 09 13:17:05 UTC 2014,,,,,,0|i1vg4n:,391833,,,,,,,,09/May/14 13:17;papegaaij;Version are upgraded,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't cache the result of AuthenticatedWebApplication#getWebSessionClass(),WICKET-5557,12707783,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,wspeirs,wspeirs,10/Apr/14 20:13,14/Apr/14 08:34,13/Mar/19 23:18,14/Apr/14 08:34,6.14.0,,,,,,,,6.15.0,7.0.0-M1,,,wicket-auth-roles,,,0,,,,,,,,"Currently the AuthenticatedWebApplication constructor obtains and holds a reference to the AbstractAuthenticatedWebSession class. This makes it impossible for classes extending AuthenticatedWebApplication to use a class based upon something passed into their constructors. The only option is to provide a ""static""/""constant"" class from the getWebSessionClass() method.

I don't see any advantage to holding this reference. Instead I propose that the class is changed to simply calling getWebSessionClass() each time the class is needed.",,,,,,,,,,,,,,,,,,,,,,,,,10/Apr/14 20:41;wspeirs;wicket-5557v1.patch;https://issues.apache.org/jira/secure/attachment/12639648/wicket-5557v1.patch,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,386106,,,Thu Apr 10 20:41:09 UTC 2014,,,,,,0|i1uijb:,386371,,,,,,,,10/Apr/14 20:41;wspeirs;Attached patch that removed the reference and simply calls getWebSessionClass() each time the class is needed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adding behavior in component instantiation listener causes Page.onInitialize() being called even if constructor throws an exception,WICKET-5546,12704206,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,robinshine,robinshine,28/Mar/14 09:20,04/Apr/14 06:26,13/Mar/19 23:18,04/Apr/14 06:26,6.13.0,6.14.0,,,,,,,6.15.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"Page.onInitialize() will be called even if constructor throws an exception
in case below code is added in wicket WebApplication.init():
getComponentInstantiationListeners().add(new IComponentInstantiationListener() {
              @Override
              public void onInstantiation(Component component) {
                  component.add(new Behavior() {

                  });
              }
             
          });

It seems that the instantiation listener adds the behavior to the page at very start of the page constructor, and then the page is marked as dirty to cause onInitialize() being called afterwards.",,,,,,,,,,,,,,,,,,,,,,,,,29/Mar/14 12:43;svenmeier;WICKET-5546.patch;https://issues.apache.org/jira/secure/attachment/12637625/WICKET-5546.patch,29/Mar/14 09:47;svenmeier;WICKET-5546.zip;https://issues.apache.org/jira/secure/attachment/12637619/WICKET-5546.zip,,,2.0,,,,,,,,,,,,,,,,,,,2014-03-29 09:47:13.961,,,no_permission,,,,,,,,,,,,382540,,,Fri Apr 04 06:26:51 UTC 2014,,,,,,0|i1twl3:,382808,,,,,,,,"28/Mar/14 09:22;robinshine;To reproduce the issue, extract attached file to a directory, and run ""mvn jetty:run"" inside extracted directory. Then visit http://localhost:8080. The page will throw an exception in constructor intentionally. Now check the console the ""onInitialize"" text will be printed indicating that Page.onInitialize has been called.",28/Mar/14 09:24;robinshine;This relates to WICKET-5387,"29/Mar/14 09:47;svenmeier;Interestingly adding a behavior in the page's constructor does not expose this issue.

Reason:
Page's constructor calls #init(), which calls dirty(true). This leads to the page being marked dirty *without* calling pageManager#touchPage()
If a behavior is added afterwards, the page is already marked dirty.

But if the behavior is added from an instantiationListener, the constructor and #init() has not been called yet - thus the page is marked dirty *and* touched :/.","29/Mar/14 12:43;svenmeier;Possible solution:

allow Page to #init() before doing anything else.",03/Apr/14 08:49;mgrigorov;The patch looks OK to me.,04/Apr/14 06:26;svenmeier;Page's #init() is called first now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IE11 returns false for Wicket.Browser.isIE(),WICKET-5517,12697105,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,papegaaij,lukedjn,lukedjn,25/Feb/14 11:32,13/Mar/14 07:46,13/Mar/19 23:18,13/Mar/14 07:25,6.14.0,,,,,,,,6.15.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"As of Internet Explorer 11 this statement returns false instead of true (like it did prior to version 11):

typeof(document.all) !== ""undefined""

This statement is used on line 56 of wicket-event-jquery.js which means Wicket.Browser.isIE() will return false in IE11.","Internet Explorer 11, tested on Windows 7 and 8.",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-25 11:42:43.373,,,no_permission,,,,,,,,,,,,375579,,,Thu Mar 13 07:46:03 UTC 2014,,,,,,0|i1spyf:,375875,,,,,,,,"25/Feb/14 11:42;mgrigorov;Thank you!
We are aware of this but we prefer to not fix it until there is a real issue with this check somewhere.
IE11 is more close to W3C standards and most of the checks in Wicket code for "".isIE()"" don't apply for 11.","25/Feb/14 11:50;mgrigorov;Closing as ""Won't fix"" until there is a real issue with this helper method.

I've added #isIE11() helper method in case it is needed by the application.","25/Feb/14 12:16;papegaaij;I do not agree with you here. A function called 'isIE()' should return true if the browser is IE, no matter what version. In this case, the distinction needed because of different handling of events on selects, which is still the case in IE11. If isIE() is used in Wicket code for work arounds which are no longer required on IE11, those places should be fixed. A quick grep on isIE() shows only a handful of places outside modal.js.","25/Feb/14 12:25;mgrigorov;[~papegaaij] I hope you will find time to fix any problems caused by this change in the later versions of Wicket !

I see no reason why to fix something when there is no real problem with it. I'd rather deprecate these methods.","25/Feb/14 15:23;githubbot;GitHub user niesink opened a pull request:

    https://github.com/apache/wicket/pull/69

    WICKET-5517 Added support for detection of IE11 in Wicket.Browser.isIE() and update references to  Wicket.Browser.isIE()

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/niesink/wicket wicket-6.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/69.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #69
    
----
commit bcce5f29cf42afc83ab99d50f26558194b59192c
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-16T08:25:11Z

    Append character instead of String where possible

commit 3c4db496af86e972b2cfc2ed20a6fef25539afb6
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-16T08:25:30Z

    WICKET-5345 Url.canonical() breaks when there are two consecutive ""parent"" segments followed by a normal segment

commit 6eb5df74a771f8ad15a1302aa5700e463ddc70a6
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-16T11:52:52Z

    WICKET-5348 JavaDoc for IColumn#getSortProperty() in misleading

commit 89c660fbb1be911b540ff0cf270c35e7ff6a8fb0
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-17T08:11:05Z

    Minor improvement: use Args.notNull

commit 1758ba6b5061f00550d9d65c9b077710d0834e9e
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-17T08:22:00Z

    WICKET-5354 Make ResourceBundles and related classes easier for extension

commit 46c03d259c62a9b6b4e13b9c0a86b252c9ecde19
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-09-20T09:59:22Z

    Added release notes

commit abd0bc5dbb95772af53649510f36a9607d5a9018
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-09-20T10:01:43Z

    Added revert script to quickly revert a release when e.g. the changelog was not updated...

commit 556587dfe5ebaf9499812fe08f273e7f75c56da4
Author: svenmeier <sven@meiers.net>
Date:   2013-09-20T19:11:09Z

    WICKET-5359 fixed equals for different locales

commit 53b335ee6140f9a0eade5bd30e1d131a67483f20
Author: bitstorm <an.delbene@gmail.com>
Date:   2013-09-21T13:40:55Z

    WICKET-5356 AutoCompleteSettings.setShowListOnEmptyInput(true) is not
    working anymore

commit d1570dbe76926459e7b036ab3e457a54fbeebbe8
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-23T12:01:40Z

    WICKET-5362 Add support for parsing IE 11 user agent

commit c0c83d54f6b7466962b0d66bdfac0a0be231d312
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-24T08:27:41Z

    WICKET-5366 ResourceAggregator looses information about priority/filtering/... when using a bundle
    
    Add a test case showing the problem

commit a6a37d445182fdc0ba385602170b474cca674ff5
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-09-24T13:20:35Z

    WICKET-5366: rewrap bundle-HeaderItems after resolving

commit 27cfdf284521cde403f2bfaca4a03f40fc9f2372
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-24T17:44:40Z

    Remove usage of prototype.js in Ajax/GuestBook example. It is not really needed

commit 865a34fdd5b114fe35c3c7fb2c9a013ca689375a
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-09-25T10:18:10Z

    Start next development version

commit dd336fe22c9b0cfea6bad54261cce0c4fb112a77
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-09-25T10:18:45Z

    Merge remote-tracking branch 'origin/wicket-6.x' into wicket-6.x

commit a13dec062fffbe1b9fe933b0f546e6f50e1d7fed
Author: Leonid Bogdanov <leonid_bogdanov@mail.ru>
Date:   2013-09-26T09:12:31Z

    Upgrade Atmosphere to 2.0.0

commit 28cac7193fe84790dc890937404f739c19927eda
Author: svenmeier <sven@meiers.net>
Date:   2013-09-26T09:54:16Z

    WICKET-5374 don't let XhtmlRenderer use a StringBufferInputStream, as it
    fails on non-ASCII characters

commit 4a92041ebfd770f1b2450707d71d39363e3ceb4d
Author: svenmeier <sven@meiers.net>
Date:   2013-09-26T11:06:13Z

    retain existing CSS classes

commit eaed6ee5ebc479fa87b67cc0489e2c3350541a55
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-09-26T13:02:05Z

    Merge branch 'wicket-6.x' of https://github.com/vonZeppelin/wicket into wicket-6.x

commit 7db55f5a828560d8733c4db34eeaa06f11982741
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-26T14:49:06Z

    WICKET-5375 Improve ConcatBundleResource error handling when a resource is missing

commit 2ae366b2eb90d53f1a6e06c3c09ba0d509bfe9d7
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-26T15:12:46Z

    WICKET-5369 Can't set a cookie using CookieUtils during an ajax request due to java.lang.ClassCastException: org.apache.wicket.ajax.AbstractAjaxResponse$AjaxResponse cannot be cast to org.apache.wicket.request.http.WebResponse

commit 4b55c3fdbb5e7c5391c9864e2857649c61b74ead
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-27T07:11:45Z

    Mark an unused method as deprecated

commit 9ed34b990b2f2d7c2bf09251dd6016208c000972
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-27T11:13:10Z

    Use Character instead of String when possible

commit 0ff9269369b4a6c9a4d42d27f7323e6255c27b09
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-27T11:13:32Z

    WICKET-5346 Support MultiFileUploadField in FormTester

commit 9ad992b63c630127ca2f6276bd88cc4581546520
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-27T12:26:31Z

    WICKET-5376 Log the exception if the application cannot start properly

commit 3597c84cc1ff78c75938dfb58d41efd8f4c510e8
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-30T10:39:04Z

    WICKET-5380 Wicket rebinds the SessionEntry session attribute and this causes problems in Glassfish
    
    Bind SessionEntry as an attribute in the http session only when freshly created.
    Do not set it on every request because this causes notifications in Glassfish which are too early for the logic this HttpSessionBindingListener is used for.

commit 9a85319ade75fefe2b795c798415e5843f35c315
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-30T11:49:29Z

    Upgrade Jetty and JUnit for the quickstart of 6.x

commit a75b8a95b49fede5a8dc2077a205b68e724e868e
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-30T12:59:30Z

    WICKET-5381 Add Wicket.Event.unsubscribe method
    
    Additionally update Grunt configs (copy from master branch) to be able to run the tests

commit 9ce66e9eb18830991f8b563ce28ae8f0f7d06f21
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-30T13:01:09Z

    WICKET-5381 Add Wicket.Event.unsubscribe method
    
    Extract the topic names as constants.
    Optimize the lookups to Wicket.Event.xyz() methods.

commit 6c6dee01c708a6e48ffc8770472f942d875bfbe3
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-30T20:24:56Z

    Sumit with GET method to the iframe for multipart Ajax submit in PhantomJS/NodeJS.
    
    For some reason POST doesn't work (error message: Cannot POST to http://localhost:post/test/js/data/submitNestedForm.xml?...)

commit 6816a404ce809f34bede9980daefdec3abc87d12
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-30T20:27:15Z

    Add grunt-cli as dev dependency, so 'npm install' is enough to prepare the test environment

commit 6624e3de1ec923cbb84371efa986bac5022bdbc9
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-30T20:39:49Z

    Add 'jshint' to the default tasks.
    
    Fix some JSHint errors

commit 76b619d63741fa0746f04217890ded47987ddc59
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-09-30T20:45:33Z

    Fix the Grunt task for 'npm test'

commit 721b1d4581d3fb66ca959f97842ff6efac2c7ff9
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-10-01T11:46:35Z

    WICKET-4862 AjaxPagingNavigationLink and AjaxPagingNavigationIncrementLink output inline onclick attributes in addition to Wicket.Ajax.ajax event registration

commit 6502884ed36a4b1297ec6aa4d6183cc89ad792df
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-10-01T13:34:46Z

    Add forgotten file for AMD QUnit tests

commit 7b491ef4a1cad7104149527d57f6869465bdac02
Author: bitstorm <an.delbene@gmail.com>
Date:   2013-10-03T17:45:20Z

    WICKET-5378 AutoCompleteTextField inside a ModalWindow shows auto
    complete dropdown in the wrong location
    WICKET-5379 IE7: AutoCompleteTextField inside a ModalWindow shows auto
    complete dropdown behind ModalWindow
    WICKET-5382 AutoComplete JavaScript errors

commit 3150ba7fcf1ac8b69da480c2f935b941d77bf9aa
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-10-04T11:28:44Z

    Update Jetty 9.0

commit fad9fb01f509937e427837665f7202e3736dc3ea
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-10-04T14:15:39Z

    WICKET-5384 Allow form components to trim the input themselves

commit fc8163d84a0c4b29daff5d8243ae6405e458970d
Author: svenmeier <sven@meiers.net>
Date:   2013-10-07T10:59:53Z

    WICKET-5385 now well-formed

commit 9696bf9d2842840da6fb8f153503a4381f351edb
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-10-24T14:11:45Z

    WICKET-5393 Remove 'final' from InlineFrame#onComponentTag()

commit 41344ae8db627f06c59a5749ec32e836bf58d1bb
Author: bitstorm <an.delbene@gmail.com>
Date:   2013-10-25T18:33:02Z

    WICKET-5101 Could not open second modal window after closing first

commit b30455facc2fcadca9dea2365bf2f7c40ff25750
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-08-19T09:07:41Z

    WICKET-4997: render bookmarkable urls for bookmarkable pages (not stateless)

commit 6321587ef3b67835f6ff0e8dda929f89889e0948
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-08-19T09:09:20Z

    WICKET-4997: fix testcases

commit 272c5d9bdeb8e84b1201e65c1462a6b987e28f78
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-08-21T18:55:41Z

    WICKET-4997: more restrictive condition for using bookmarkable urls

commit 5006518390532736280928321d21d2427a30635d
Author: svenmeier <sven@meiers.net>
Date:   2013-10-28T13:09:52Z

    fixed javadoc typo

commit 68828cde24e00e47d0d3a80745c04391000b55a9
Author: svenmeier <sven@meiers.net>
Date:   2013-10-29T09:08:47Z

    WICKET-5398 don't use possibly conflicting encoding from XML declaration
    when parsing a String

commit 176a9fd4bd4956da62a3d3f44d2731b708aa6026
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-10-29T12:20:10Z

    WICKET-5397 target.prependJavaScript and JQuery-Animation in IE8
    
    Use RegExp to find all occurrences of a pattern in a string.
    String.split(RegExp) doesn't work in IE8

commit 0a70077741db3407d23604dca0d69b353395119e
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-10-29T12:44:14Z

    WICKET-5388 Allow DebugBar contributors to be removed

commit 97ed9c827c60bab4d001aea4b4d97f2ba7966e79
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-10-29T13:03:41Z

    WICKET-5386 ChainingModel should not check if the modelObject given as argument is null

commit d9a41a6cc040b01f4c9794eb8a579552767f2a50
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-10-29T13:08:49Z

    WICKET-5395 HeaderItem to be Serializable

commit 982f21ce0dcc3f97bd2e126b2932bba262e65189
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-10-29T13:15:26Z

    WICKET-5390 Session management doesn't work with Jetty's JDBCSessionManager

commit 4aa9ba8d9760401216ea37f8f5524d3d7eae62a7
Author: svenmeier <sven@meiers.net>
Date:   2013-10-31T10:20:20Z

    Allow access to modifiable list of previous requests/responses

commit 43a928903eec582f89b13a11f97af88ea321187f
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-11-01T09:38:02Z

    Added changelog for 6.12

commit 15435846ba563a57c3016dae27db6cc82e4bf454
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-11-01T10:18:05Z

    Updated revert script to remove more lingering artefacts

commit 9852fc794d7e961ce408ee46641ded2699d22dbe
Author: svenmeier <sven@meiers.net>
Date:   2013-11-05T19:54:58Z

    removed eclipse format settings

commit 385085abde1ee60bce2a1ce396b82e1bff5dc9ba
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-11-05T22:13:07Z

    Start next development version

commit e75dc904835b46a858f8972ffb28a67fc6970db0
Author: svenmeier <sven@meiers.net>
Date:   2013-11-07T08:48:57Z

    WICKET-5060 fail early if fragment markup is no fragment tag

commit f745108ab21e797b978669e5f5fd2ac875a6522b
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-08T10:44:59Z

    Backported wicket-cdi-1.1 from Wicket 7 to 6

commit ac780b61a1bdf3ff9b540d8748e729f682929f7e
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-08T10:55:16Z

    Workaround for WELD-1546: try to lookup beanmanager from JNDI first

commit 0484f21dc6dc474954512629254a70ee440e1598
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-08T13:22:16Z

    Also inject anonymous classes

commit 03b45cd9914aef90945052849e5f892baedf2aae
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-08T13:35:22Z

    Fix testcases

commit 4e9a83fdca21c2ac9ee98b3ed635973c42ab594b
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-08T13:40:07Z

    fix all kinds of warnings

commit a73209beab8814a06f2e085384ad87bdf1fda212
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2013-11-09T06:48:22Z

    WICKET-5411 auto label auto update during ajax

commit 92a5bdbdb7aaa7e6e0c0bd8aab42a33d174a3e81
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2013-11-09T07:04:35Z

    WICKET-5411 auto label - realign css property names to 7.0 and fix tests

commit 62fed8f5fd9c6fa428c09a914ab159fd1aa62662
Author: John Sarman <johnsarman@gmail.com>
Date:   2013-07-16T17:06:10Z

    Merged pull request #50

commit 996313537f0c0d7efccc108d810d61f2626b099c
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-11T08:51:05Z

    Merge remote-tracking branch 'origin/wicket-4997' into wicket-6.x

commit fbadd2bc5623dc16502e385451c33684a7a6c12b
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-11T09:14:39Z

    Reformatted code

commit 1e912b771a3512cc468c905edf45bb2f6c7b48a5
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-11T09:15:17Z

    Use IConversationPropagation interface

commit 7d3d350f9aa7ff8252942f76101b028c62980be3
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-07-11T05:46:10Z

    Upgrade jQuery to 1.10.2/2.0.3

commit 6b64a85ca61610c955bae8ac70646d9a8f75a990
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-11T10:20:13Z

    WICKET-5400 Behaviors#internalAdd(Behavior) erroneously gets id for stateless behaviors

commit fccd0ffb45385043ad2b20250d7645d4d4173346
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-11T13:24:05Z

    Fixed last testcase: InitialContext.lookup can return null

commit 7c25bf2b389d0eed810789294aabdab76b38969b
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-12T08:32:02Z

    WICKET-5411 auto label auto update during ajax
    
    Expose Wicket.DOM.toggleClass API that delegates to jQuery.toggleClass

commit f168587a92309cb8e822f43c05238abd883a04a0
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2013-11-12T18:31:49Z

    WICKET-5411 fix css keys

commit 039e7e09864ea2bb3f63e602719e530ad8c6139e
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-13T10:33:11Z

    WICKET-5409 wicket-native-websocket does not work with Safari/Safari iOS
    
    set response headers only for Tomcat:
      resp.setHeader(""upgrade"", ""websocket"");
      resp.setHeader(""connection"", ""upgrade"");
    
    Downport some improvements from master branch

commit 39b5e6421b813b9f5ee7d8962e0996f92b7b9c61
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-13T13:03:28Z

    WICKET-5401 provide no-argument constructor in string based header items

commit 49840c02b3daa3e7bc13119b9534b98d14a9fb45
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-13T20:30:25Z

    Remove support for ignored classes, Weld no longer logs warnings for those classes

commit 4b43ba654841655e31c416a67e2bd50b65def709
Author: bitstorm <an.delbene@gmail.com>
Date:   2013-11-14T22:07:21Z

    WICKET-5413 Positioning AutoCompleteTextField not correct on resized
    window
    WICKET-5379 IE7: AutoCompleteTextField inside a ModalWindow shows auto
    complete dropdown behind ModalWindow

commit 86a34bfc03c3ae6bb56e1e23453fdead603ec7ab
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-15T09:11:11Z

    WICKET-5415 Do not initialize pages which were not rendered
    WICKET-5387 Page#onInitialize called after an exception in the constructor of Page

commit 724e9f711ca6cd9f83550b8841919b1dd227178f
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-15T09:40:37Z

    WICKET-5415 Do not initialize pages which were not rendered
    WICKET-5387 Page#onInitialize called after an exception in the constructor of Page
    
    Add specializations of the test with the three render strategies.

commit 4bb19a48ff5df89d03da53e87efba379ff3c54d3
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-15T14:08:03Z

    WICKET-5416 BOM in UTF markup file breaks encoding detection
    
    Copy BOMInputStream, ByteOrderMark and ProxyInputStream from commons-io 2.4 (http://svn.apache.org/viewvc/commons/proper/io/trunk/src/main/java/org/apache/commons/io/input/)

commit 49922cdd5ccba3b97c59106d3aea769b8468962e
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2013-11-15T20:30:22Z

    WICKET-5418 properly handle groups in NonNull constraint

commit 7bd677ff843fdfece3963e303faaf901aa5ec04b
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2013-11-15T20:38:17Z

    WICKET-5418 properly handle groups in NonNull constraint

commit bb416f1a05db1bb7fd9c2b113be8a6dd126dc1a2
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2013-11-15T23:30:57Z

    Revert due to bad formatting ""WICKET-5418 properly handle groups in NonNull constraint""
    
    This reverts commit 7bd677ff843fdfece3963e303faaf901aa5ec04b.

commit 77065e7556a189d5804ed422c13e3ae644988512
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2013-11-15T23:31:19Z

    Revert due to bad formatting ""WICKET-5418 properly handle groups in NonNull constraint""
    
    This reverts commit 49922cdd5ccba3b97c59106d3aea769b8468962e.

commit 9eb670b5ad0d04e0a942db660b89befc0935f6ea
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2013-11-15T23:41:43Z

    WICKET-5418 properly handle groups in NonNull constraint

commit 10326bf77de3b85df62df9eede094763629722e7
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-15T20:57:37Z

    revert wicket-cdi-1.1 to wicket-cdi

commit 6564bc9cf78d2d0319f6434d63ab33035ce802de
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-15T20:59:21Z

    Reintroduction of CDI 1.1: NonContextualManager removed, fixed testcases

commit 9def8e363f6a311f1fe87117bb4a821db5dfd3e0
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-18T19:35:28Z

    Use specified, portable conversation propagation via cid parameter

commit 15930182aa83f7e2cef9d6127e2a5d5a1ebeeb4d
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-19T16:53:03Z

    removed settings to disable injection

commit ecf2c9fe26f2b814f7369054badc2f8515ce8508
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-19T16:56:42Z

    moved wicket-cdi from core into parent

commit 05939320c54949e20372c940622c528024addb71
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-20T12:20:48Z

    WICKET-5420 Make UploadProgressBar easier to extend
    
    Always remove the custom attribute Wicket sets to form element when calling its onsubmit() method.
    onsubmit() may throw an exception and the attribute won't be removed.

commit 10082e75833c8cb65cf1e7c85be331693c661501
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-20T12:25:48Z

    WICKET-5420 Make UploadProgressBar easier to extend
    
    Allow to set the value of the 'display' property with Wicket.DOM.show()

commit 58873efb0f843081824d03484b639c607b177f9d
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-20T12:26:59Z

    WICKET-5420 Make UploadProgressBar easier to extend
    
    Fix a typo in comments

commit 5a73fe98b637bf5e00c2925e6f4f3cb7a7f34c09
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-20T12:27:44Z

    WICKET-5420 Make UploadProgressBar easier to extend

commit f803e1d21084ce2d9de31fc16b901cf8510c6d66
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-20T12:51:01Z

    WICKET-5420 Make UploadProgressBar easier to extend
    
    Change the type of the bar and status components to MarkupContainer so they can have children if needed

commit 01de4f35b05371bf9d3b0e8e5f7b458d1e007839
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-20T14:33:27Z

    PR #61 - WTP support for archetype project

commit df4b33636dda5bfb7afdb51f3613d586131402ca
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-21T07:21:33Z

    better implementation for NONBOOKMARKABLE and made it default again

commit 4824b031d8389d7b43ed1c1f6e8173f87114cabd
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-22T08:42:07Z

    Merge branch 'wicket-cdi-1.1-rewrite' into wicket-6.x

commit 285bf05f721d21a2cc0544bd86bc313cc46f2dc7
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-22T09:16:09Z

    no change

commit fa88b3bdc6832eed51683505d304568792947b26
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-22T10:03:26Z

    deleted tmp file

commit 0c97e75e59b294eda46d0914152248b1a99c2932
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-21T14:04:54Z

    WICKET-5423 Create IResource based implementation of Native Web Sockets

commit ff14a7d0124e473901af9f973cdeee13d12981de
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-21T15:20:04Z

    WICKET-5423 Create IResource based implementation of Native Web Sockets
    
    Add support for testing WebSocketResource and unit tests

commit 9c3a0ad5cffe06eb5bd1b4979ccbdbd98d3975a2
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-22T10:13:34Z

    WICKET-5423 Create IResource based implementation of Native Web Sockets
    
    Move IWebSocketConnectionRegistry to **.api.registry package

commit 6a8c0fb96dab15c637bca69b181d24a22890f812
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-22T12:51:35Z

    WICKET-5423 Create IResource based implementation of Native Web Sockets
    
    Use 'false' as a falsy value for pageId. '0' is a valid pageId

commit 6e294161d63a431ffea10b5d552199fab0743ad2
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-24T11:48:57Z

    WICKET-5422 ComponentRenderer.renderComponent() adds a page to DataStore

commit 10ea2f3fc85c205472f8e75cf17752f225d0de19
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-25T13:37:45Z

    Fix a typo in comments and add space around '='

commit 6db3be25fc628c7ced5c5c16e9301e9103d5415e
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-25T13:38:32Z

    WICKET-5425 WicketTester doesn't preserve the request cookies when #executeListener() is used
    
    No need to create a new request. Just set the calculated url to the scheduled request.

commit 6189a89d09a72d7008bae6dd517d49cab9a7f30a
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-25T14:42:14Z

    WICKET-5425 WicketTester doesn't preserve the request cookies when #executeListener() is used
    
    Add a test case asserting that the request cookie is there even after clickLink (delegates to executeListener)

commit 5133c7587143d53d3228ddb77f28f21d64810dfe
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-26T06:50:37Z

    Fixed auto conversations

commit a742c6e598f54b31c5cdfdf4be98ca14397a54f8
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-26T06:51:10Z

    Updated the cdi example to wicket-cdi-1.1

commit 4e161cbcc7890de4587de178b64cdc073f3389e4
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-26T06:51:57Z

    formatting

commit 3239c8d0096045c3d3faeab724ec9b4769e829aa
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-26T08:08:59Z

    Upgrade atmosphere to 2.0.4 and js to 2.0.8

commit 8ff9809d34d9dc92bd2b385951a1041f91cd2a03
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-26T10:05:57Z

    Fix testcases

commit 809443634a8e76cb83a360c15122843caaecd54d
Author: svenmeier <sven@meiers.net>
Date:   2013-11-26T11:46:33Z

    ignore license header in simplelogger.properties

commit 5276637135f108d1036c2098ca438a650180f226
Author: svenmeier <sven@meiers.net>
Date:   2013-11-26T11:47:10Z

    WICKET-5424 record rendered page after wrapped render has responded

commit 4a5d1220e5c897e07db59aa1a50d6b67b0c06001
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-26T14:00:38Z

    WICKET-5424 Page.isPageStateless() returning true in regular run but false in WicketTester
    
    Add the quickstart app as a test case

commit 8808dd8f20bfed844ba9ea8c6ab57f24cd2c53c9
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2013-11-26T16:03:31Z

    tweak for WICKET-5411

commit 6c37c6604b6358b6a9d836770445744ed2b51293
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2013-11-26T16:16:39Z

    tweak for WICKET-5411

commit be7783803c166d0f513a9d7ddcd8e0a50851a945
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-11-27T09:31:27Z

    Updated script to generate the remove previous release from mirrors

commit c3a35e74ed34cf4149f6519253b924f0c459e09c
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-11-27T20:59:51Z

    Massive improvements in testcases voor wicket-cdi

commit 95a2741ef673b734ea8356f97a9a324298ad8845
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-28T14:02:55Z

    Whitespace fixes

commit f854750fdb307555693373db7795ce0c7884d276
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-11-28T14:03:07Z

    Do not try to print the class name of the used input stream.
    
    If there is an error often the variable 'ois' is not initialized and causes NullPointerException and thus hides the real cause of the problem

commit 16a48e1560af9a2a394ef03667b54801cd89e052
Author: Emond Papegaaij <emond.papegaaij@topicus.nl>
Date:   2013-12-04T07:44:56Z

    Support for a fallback beanmanager

commit 270a39abd3e3fdc9bb4066acff0ec24845163cf5
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-05T16:19:48Z

    WICKET-5436 Implement BigIntegerConverter

commit c5715d1c23b5e0f9fa0ba5ed40f83ccb71254e45
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-05T16:23:13Z

    WICKET-5437 When a ConversionException is thrown, its message is not used in the ValidationError

commit 0edc840dd5057f47665239261fc6adecb3b48cde
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-05T16:30:56Z

    WICKET-5437 When a ConversionException is thrown, its message is not used in the ValidationError
    
    Add a test case

commit 4001ac5550c8ed8405494be1efd5115efdca3d09
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-05T16:41:31Z

    WICKET-5437 When a ConversionException is thrown, its message is not used in the ValidationError
    
    Fix the test

commit e0424b8e163b875ce7a36e6312ce850f07c58027
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-05T16:47:45Z

    WICKET-5436 Implement BigIntegerConverter
    
    Enable BigIntegerConverter by default

commit 0127324650a2f88177c14f09772d26dd8901554b
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-06T09:09:06Z

    WICKET-4585 WicketTester.assertErrorMessages passes even if the message isn't visible on the page
    WICKET-5128 Allow for Testing Component relative Feedback-Messages in Wicket-Tester
    
    Backport ExactLevelFeedbackMessageFilter from master branch (7.0.0-SNAPSHOT)

commit f908960a608335303dd6ada0cb781eb633bb6b1e
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-12-07T11:54:22Z

    Upgrade to version 13 of Apache pom... what could possibly go wrong?

commit 5a28919d431d302f764fc84854c7648b1c9b14b8
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-12-07T11:56:34Z

    Changelog for 6.13.0

commit 98dcf50622c3e6e141a54245eeb1528adf6d074e
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-12-07T11:57:43Z

    Set java version on OS X

commit d9dfb1973418761a33ebe15e899cc0ff5c5217c3
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-12-08T15:10:29Z

    Use -Papache-release for releasing

commit 2658f512ea37a7100a6d197652e80f6fa95b251f
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-12-08T15:11:50Z

    Using MacGPG2 instead of homebrew gpg stuff...

commit ba2e5ce076d0badc155b1e733e86f1244058ec41
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-09T12:10:56Z

    Pull Request #64 - Improve the JavaDocs for FeedbackMessages#hasMessage(int)
    
    contributed-by: Paul Bors

commit 84baf973dbd098f253240f89296783b9c29bf886
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-12-09T19:41:44Z

    Fix for starvation issue when running this test under newer JDKs

commit 536f3334e2ff5a8b5c0729a16b489c2ed8cc450b
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-12-10T15:25:28Z

    Upgrade release plugin to something that might work
    
    Issue with 2.3.2 appears to be that it tags the snapshot version instead of the final version,
    causing the perform step to start building and uploading snapshot releases.

commit 577129d983369de2b2344709a0adf8302a8c3844
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2013-12-10T16:51:33Z

    Revert ""Revert ""WICKET-4948 fix vertical centering of modals in safari"" safari seems to work fine now. WICKET-5224""
    
    This reverts commit 8fda26e515f83540ead654d997a5ffd8844ee839.

commit 90235c1c2ef7eb6ffa9d5d836ce7d0a398ca2821
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-12T13:51:57Z

    WICKET-5435 Ajaxified version of WebSession#getClientInfo should be added

commit 7fcbfe7bc4172c8671ab037c73780c1006d1704d
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-12T13:55:15Z

    Add licence

commit a2c21b134d0c855a1c1c7cd3d83ff1ad93c068d6
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-12T14:06:59Z

    WICKET-5435 Ajaxified version of WebSession#getClientInfo should be added
    
    Since it uses Ajax it should be *Web*ClientInfo

commit 5d93f17d1467c43a5b2cd0b38e6589b03e74747b
Author: Michael Haitz <michael.haitz@gmx.com>
Date:   2013-12-13T07:03:42Z

    WICKET-5443 Increase randomness and reduce predictability of CaptchaImageResource rendered images
    
    increase ""randomness"" and reduce predictability of CaptchaImageResource rendered images

commit 7f9e99500214bf4bf6e5a627be395edbbf091009
Author: svenmeier <sven@meiers.net>
Date:   2013-12-13T12:13:42Z

    WICKET-5442 fixed Time.getHour() to use 24-hour clock

commit 3aff2f5fbdb98a0a05f2724a70f86068583d4dc9
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-13T13:12:48Z

    Add Apache licence

commit 94c0c8415bb4f10a0375114b7e5f29d905da40ce
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-13T13:13:26Z

    Merge branch 'pr-68' into wicket-6.x

commit c84f0c25bf86731e5abdaa1899def55f2545ee90
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-14T08:09:30Z

    WICKET-5435 Ajaxified version of WebSession#getClientInfo should be added
    
    Introduce AjaxClientInfoBehavior that collects the client info.

commit dd5de0e554d6b0e33f8221b4c34c608c7b8e4046
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-14T20:59:56Z

    Merge branch 'wicket-6.x' into 5435-ajax-browser-info

commit ded718cf9ce1d8a61e7ff33327e29c22ddce4681
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-16T09:20:28Z

    WICKET-5444 Make org.apache.wicket.pageStore.memory.PageTable public so custom impls of IDataStoreEvictionStrategy can be made

commit e594bb85675eab0a3dfd7fdec738fada07b9607b
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-16T09:49:35Z

    Add 'change' Ajax link next to the captcha image to show how to refresh/change it.

commit 853b568a5e75305722e487b85082eb923f8b6d31
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-16T12:21:38Z

    WICKET-5445 Make CaptchaImageResource easier to extend and reuse
    
    Make CaptchaImageResource easier to extend and add demos with Kaptcha and Cage libraries

commit e0ed8e7ff5981cffc1ba6cb9d5eb7080f00235ef
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-16T13:16:22Z

    WICKET-5441 IResourceCachingStrategy implementations should only set caching if version matches
    
    (cherry picked from commit 8ccb1f6de4479bef623bc97dd4ad4abeb7b802df)

commit 48ab3962a6a8abda274fff3b447243fcc04538d5
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-16T14:03:45Z

    Mark IPageLink as deprecated

commit 3e00add3475fcec3a2a753e26a1468c06ec62334
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-16T14:04:00Z

    Remove unneeded double cast

commit b90ef48663cdc702cca87261fda7a12d4c35e500
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-16T14:12:20Z

    Revert ""Remove unneeded double cast""
    
    This reverts commit 3e00add3475fcec3a2a753e26a1468c06ec62334.

commit 0e872c3c7acb4fa04900c2905df27ab5dc59c8e5
Author: svenmeier <sven@meiers.net>
Date:   2013-12-17T07:49:18Z

    WICKET-5447 close generated divs

commit 86e27ffda583e5080d023c9069cc7b8649ee53ef
Author: svenmeier <sven@meiers.net>
Date:   2013-12-17T08:02:57Z

    added license header

commit d5a64b123826404c095f8b12b410ae557c42897b
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-17T09:53:12Z

    Improve the javadoc of Component#onBeforeRender
    
    (cherry picked from commit dc5fe23447f2e6583fff43c3320f6c3ffbcf499b)

commit 2ced99eac4f85c9c59be978b198a9368aeaeff20
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-17T10:25:11Z

    WICKET-5429 ResourceReference's properties are not preserved when using reference replacement

commit 37a845613f4ba2bba84511460176d1209a76d218
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-17T13:06:39Z

    WICKET-5364 Reduce logging for wicket-atmosphere
    
    (cherry picked from commit cc292d47267d5e1a85f3b41350c4c22072f3183f)

commit f5dfb92e92760845f8cab36f9fcaadfa093b5fde
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-17T13:45:52Z

    WICKET-4472 Modal window accessibility - add role and aria attributes to outer div for assitive technologies
    
    add aria-labelledBy attribute
    
    (cherry picked from commit a4e6bd6dfb15ffdba01ddf5ad33c65f5b9ff0158)

commit d28a103347a0ec179a996d14a8c00830ac690a2f
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-17T15:28:13Z

    WICKET-4909 ModalWindow overwrites window.onbeforeunload
    
    (cherry picked from commit 637690f59dae71408b4f23ba34e3350e82aa78a2)

commit f36fa2002bd0ef6f1b304d820efa72b2dfa36db8
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-18T08:22:05Z

    WICKET-5415 Do not initialize pages which were not rendered
    
    Initialize the page for modal window because otherwise it ends with ""Page expired"" exception

commit 1724d89e5a16c4588f42cb551f028803dab193c7
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-18T08:40:41Z

    WICKET-4905 PagingNavigation: possible to call setStartIndex() earlier than onBeforeRender?
    
    set the model and the start index in onConfigure(), not in onBeforeRender()

commit 3994cb3aa04e5b4d0fd5b8f015a1d53a5c8b1c4b
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-18T09:13:07Z

    WICKET-5450 Double escaping when using EnumChoiceRenderer and DropDownChoice

commit d6135b5d03a3de3007721703780aa93910615914
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-18T10:39:57Z

    WICKET-4762 IResourceVersion should be based on final result

commit d1e5a7494277cb1eb91c4615e3a470bf54b91fda
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-18T13:09:34Z

    WICKET-4268 Quality of ThumbnailImageResource
    
    Make #getScaledImageInstance() non-final so client applications can provide better algorithm for scaling

commit e624c74d74fd273c4080c23eedd74f4e02998745
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-18T13:10:22Z

    Fix a minor typo in the comments

commit 1f07c6e19fd7d741db54229f2058773c6b79e1ae
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-18T15:44:13Z

    WICKET-1197 add/remove all buttons in Palette component

commit 98b30c803539f32c540382164ef770107a81f0c2
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-18T16:07:47Z

    Optimize imports

commit 71eaf51613fefbf0417e96cebc7459b3f7a2c273
Author: svenmeier <sven@meiers.net>
Date:   2013-12-19T14:11:08Z

    WICKET-5426 reset stateless flag on render, since stateful components
    might be added *and* removed

commit ea6d615580e2fbe3c0debd740afc1c8493ddcb59
Author: svenmeier <sven@meiers.net>
Date:   2013-12-19T14:16:03Z

    WICKET-5424 make sure no page instance is created in redirect

commit d4f0cb441b79d7eb347d28c086aedbf3ef48e905
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-19T14:36:55Z

    WICKET-5402 NullPointerException when logging out with wicket-atmosphere
    
    (cherry picked from commit fed60b1cb4f43f6915ccb87e5b674b4a0c094ec5)

commit fa625fa6a8e0dc1fc454d63690fd712758345331
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-27T09:09:56Z

    WICKET-5456 Make RawMarkup extendable
    
    (cherry picked from commit bb315ba8414fd0192d0524126b9355165e28355b)

commit 2b880e322cc94847cc5a902834c985b0c6ec2c81
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2013-12-27T09:18:21Z

    WICKET-5455 Allow access to the JS ResourceReference of AbstractAutoCompleteBehavior
    
    (cherry picked from commit f565f6de776aaadcba2ff0e384cd62558dbc6be9)

commit a296b6c5e3e3c8235e43ddc465d5609bbbba98ae
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-03T08:46:44Z

    Remove casts that are no more needed.
    Remove an override of a method with the same body in the parent (AbstractRepeater)

commit 97cd11758ac4f5081ea0449cac2780ebed97931e
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2013-12-24T20:41:28Z

    Trying to fix the release process
    
    Apply fix for inability to release, see MRELEASE-812

commit 4940d1c47c7167cbc36e524606e52a30acf161b8
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2014-01-05T20:21:25Z

    Update change log for rebase of 6.13.0

commit 44fd2e9413a1eea13c87c20632554ee883c884fb
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2014-01-05T20:22:23Z

    Update apache pom to v13

commit 512a573e15753e905e1aafbf9b451d0460e6ba2f
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2014-01-06T18:25:19Z

    AAU-5462 fix npe in ajax form component label repainting

commit 2f52df61f45f747a6e42d51b73c2f02aa49f6b66
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2014-01-06T18:26:17Z

    Revert ""AAU-5462 fix npe in ajax form component label repainting"" incorrect jira number
    
    This reverts commit 512a573e15753e905e1aafbf9b451d0460e6ba2f.

commit 9bd0e07b3da4e8ed4405d3d625fab7034721e3c7
Author: Igor Vaynberg <igor.vaynberg@gmail.com>
Date:   2014-01-06T18:26:46Z

    WICKET-5462 fix npe in ajax form component label repainting

commit 72792b259985ce0f126f04b54a449e2a7caa9cac
Author: svenmeier <sven@meiers.net>
Date:   2014-01-06T19:43:52Z

    WICKET-5460 always reset FLAG_PREPARED_FOR_RENDER, so stateless page is
    re-prepared before next render

commit 193645235a8e74a4630c6136639e5ae73b994225
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-07T08:24:37Z

    Fix JSHint errors
    
    (cherry picked from commit 0b09acb7af0009dd0bc97ef73575da3094bbe7c4)

commit 16c962d99bc1f9f37344147e9b9d5f242f49d3f1
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-07T08:27:12Z

    Upgrade QUnit to 1.13.0

commit 84a3b04f3fdab86a4fd938a237aff0683f360ac9
Author: svenmeier <sven@meiers.net>
Date:   2014-01-07T18:30:09Z

    WICKET-5463 resilience against unsupported Charsets

commit ae9f4fe4afddbe9cc8804c7710cb336a2e0d6034
Author: svenmeier <sven@meiers.net>
Date:   2014-01-08T20:15:06Z

    WICKET-5439 backported from 7.x, but still update the hosting component
    on restart as before; WICKET-5464 don't stop onRemove, just clear the
    timer

commit bc6aa89ca162e9367f69b3c68b23f1bc55870917
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2014-01-09T09:23:47Z

    Start next development version

commit 06f65b23b8deb37b7be12e8468ebc1cd831469fe
Author: Martijn Dashorst <martijn.dashorst@gmail.com>
Date:   2014-01-09T09:24:35Z

    Merge remote-tracking branch 'origin/wicket-6.x' into wicket-6.x

commit e725f4285fc83d86bf059c0cde7c059ab9bb7a23
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-09T09:46:41Z

    WICKET-5043 Page not mounted with WebApplication#mountPackage

commit f7a616bdb4d4f5dcea5f51040834298fa5521f9a
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-13T09:15:34Z

    WICKET-5470 Remove 'final' from org.apache.wicket.markup.html.form.EnumChoiceRenderer#getDisplayValue

commit c13084b881f8924d9fb9ec8847e8e9dab9e118a7
Author: svenmeier <sven@meiers.net>
Date:   2014-01-14T15:59:54Z

    WICKET-5466 watch out for null component; break early from method

commit 23172242b84704d8c95bbe168198c99d8b0f5ec4
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-14T21:13:37Z

    WICKET-5471 Store the page if it is known that it will be used in a following request

commit 1cc56f56aedbb9f0da0c6e1df35a441106568e72
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-14T21:22:05Z

    WICKET-5472 PackageResource#internalGetResourceStream() should return ProcessingResourceStream only when the resource is existing

commit 3fca3415b46af58591463c7a1c8843c0e9f894ac
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-15T08:10:27Z

    WICKET-5471 Store the page if it is known that it will be used in a following request
    
    Better fix.
    The page will be touched (i.e. stored). But it won't be initialized unless really used because setStatelessHint(false) is called as well.

commit 0f0be95c81c97d224de5a1b9ec7abc44dc7f149f
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-15T09:15:17Z

    WICKET-5469 ModalWindow unload warning always displayed (even if window is closed)
    
    Always reset window.onbeforeunload on close

commit e7dd6ea3895ed6e19d7850a25d846cebb5551d10
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-15T09:40:42Z

    WICKET-5469 ModalWindow unload warning always displayed (even if window is closed)
    
    Use event listeners instead of property based event handler for onbeforeunload.
    
    We don't do the same for 'onunload' because event listeners can be skipped with event.stopImmediatePropagation() and this may lead to memory leaks in IE.

commit d9f50272e37b62a78f6a67c9b9f3f32f024d0ab8
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-15T10:02:00Z

    WICKET-5468 UrlRenderer#renderRelativeUrl potentially appends ""/"" after query parameters

commit 2c3aa01aba8666f8dc358e5ae25f36e38523924d
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-15T10:13:27Z

    WICKET-5467 NumberTextField should support ""any"" as valid step attribute value

commit b1f247926d46f0d82f96e378b11d4aa2e5456c94
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-16T14:30:05Z

    WICKET-4697 Autolinking not working as soon as component gets a wicket:id
    
    (cherry picked from commit a595d838c41730da82cb7d3c698661add46fcd6a)

commit a760b6f9a1c7e6dc287cc5b9b9548a0a66725253
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-16T15:13:47Z

    WICKET-5288 Allow <script>-Tags act as WebMarkUpContainer to add Child-Components
    
    (cherry picked from commit 9d726ae2f33d3988aa3bb26521717234e0d41deb)

commit c1d804c8ca9415757c80180f18011898508aee36
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-17T11:32:06Z

    WICKET-3491 Introduce IComponentOnConfigureListener
    
    (cherry picked from commit 697b87eb75f663fdc9ebe06a389a026254d196d0)

commit 04864b2a31eca9f798f7ca4fd63edaed80f41de4
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-17T13:52:53Z

    WICKET-5288 Allow <script>-Tags act as WebMarkUpContainer to add Child-Components
    
    Improve the fix to handle attribute values wrapped in single quotes
    
    (cherry picked from commit 686bc9a8abbdb15034cf8055ec7653e27929f4ce)

commit 71983d62470f6785f8683ec050a662684b6920cd
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-18T19:45:51Z

    Avoid creation of array (even via varargs) when debug is not enabled
    
    (cherry picked from commit cb0197477b88c381b15f4c8550f11ab57fc873a0)

commit 2eed194ad1b610cdf4afc57a37b9e82f31a7e3a0
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-18T19:50:34Z

    Wicket 6.x uses old version of SLF4J without varargs.

commit 1f1e16b91324b91d5af52c667fccb71fdf6e6e67
Author: svenmeier <sven@meiers.net>
Date:   2014-01-20T15:54:11Z

    WICKET-5477 add CSS for styled columns as other column based toolbars

commit 4ab1dbc3f018d73ec2ffe4435c46b736ad4fb35c
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-21T12:48:13Z

    WICKET-5478 Wrong JavaDoc for WicketTester

commit cc16f8e920205af12c505968ebb6db343321dce5
Author: svenmeier <sven@meiers.net>
Date:   2014-01-23T13:29:15Z

    WICKET-5484 rendering and writing of a page should never happen on an
    Ajax request, even if other circumstances imply otherwise

commit 7daa542fb16149c14adfeb419ff3f469f7fff2fd
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-24T14:09:47Z

    WICKET-5488 Promote experimental modules to become stable

commit f2f5f30ef899b92fad7611a319bb8343b492058a
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-24T14:22:39Z

    WICKET-5488 Promote experimental modules to become stable
    
    Fix the path to wicket-websocket-jquery.js in Gruntfile.js

commit e7e4071f45e972ee5b06cc25fb898c7daa1d6c0d
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-28T08:17:51Z

    Return error code 404 (Not found) for blocked resources in production mode.
    
    In dev mode return 500 so the user can see the error displayed on the screen and fix it
    
    (cherry picked from commit dbad8851b184f4df81b61544fdabac6659029e0f)

commit b1b450f97743b17f6f47401d1d5cfb643507e13b
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-28T08:27:25Z

    Fix imports

commit cf99053f87e8350bf5991ddc98cef272a8896014
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-30T08:22:33Z

    Minor improvements
    
    (cherry picked from commit efce377cfdbbe0bc1ca58cde66f29c2b2c0d531f)

commit ed3db1d5516b700471aacdfd1244dec2d52ea4d8
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-30T08:41:40Z

    WICKET-5473 Wicket does not handle non in-memory Httpsessions correctly
    
    Mark the session dirty when incrementing the sequences for bound sessions

commit e5086fa35798649fe15b77ed12f6dc09ecb9ed75
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-30T08:47:04Z

    WICKET-5492 WebApplication ignores a SecurityException when reading the configuration type

commit f9ef8ed90b05d614657e9a07ab8dc29e5eebf026
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-30T08:55:48Z

    WICKET-5493 Disable jar indexing

commit 216949c1a6035e19de739603dcc82167ca43251a
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-30T08:57:43Z

    WICKET-5491 Wicket.DateTime.getViewportHeight() returning undefined on IE8, positions calendar out of viewport

commit d55e036fc8a7f9b6cee68b7dcf1e19b6c99468c3
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-26T10:37:47Z

    WICKET-5494 Upgrade JQuery to latest stable - 1.11.0 and 2.1.0
    
    (cherry picked from commit c9bfc5dd83fc55f953067fded11e27bf1a1f7993)

commit 54305b6260e30950bc6262867c62d2f71617c758
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-30T13:29:45Z

    WICKET-5486 WebPageRenderer should honor RedirectPolicy.ALWAYS_REDIRECT more consistently

commit 27fb900bf216a3c38eea94e72e8b7f7b9e8d1a1e
Author: svenmeier <sven@meiers.net>
Date:   2014-02-01T12:23:27Z

    WICKET-5496 RangeValidator messages fix

commit 3c537345a05b5f43db3413d5d78982dc6ffb202f
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-01-31T13:08:28Z

    Print the current container's details when there is a problem finding a child for a ComponentTag
    
    (cherry picked from commit c5badbe0e1ad724f70e0d38794f0a248bdb399da)

commit e30c3b9a8cf928ce3094405504ff40b2928fc792
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-02T09:05:32Z

    WICKET-5482 Wicket-guice doesn't support @javax.inject.Named annotations
    
    (cherry picked from commit 8c17040d8a0e1a96069f9d91d116444e51385a40)

commit f5421bb9ffd1ceae8fc35977ea6589cea61b3f13
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-02T10:20:05Z

    WICKET-5497 NPE in JsonUtils when the value is null
    
    (cherry picked from commit 724066f406590a1b383a2476ee9983974f40ab80)

commit 632e4a37c8bacc6756a98c916abbdff37f4e7220
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-05T08:48:18Z

    Upgrade Weld to 2.1.2 to suppress some warnings

commit 2ee020c974e9cd636d22f1b8a141cc4c576e899c
Author: svenmeier <sven@meiers.net>
Date:   2014-02-05T11:05:27Z

    'exclude' dependency to javax.servlet-api 2.5, otherwise
    wicket-examples will not run in Eclipse with wicket-cdi requiring
    Servlet 3

commit 7cc191318ccdb98fc5b129b8f70f73de98b600e5
Author: svenmeier <sven@meiers.net>
Date:   2014-02-05T12:47:43Z

    Revert ""'exclude' dependency to javax.servlet-api 2.5, otherwise""
    
    This reverts commit 2ee020c974e9cd636d22f1b8a141cc4c576e899c.

commit 82999908fa0f3ad412713825c4341be354b8f1cf
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-06T09:57:34Z

    Use Args#notNull and thus simplify the method

commit 28e1b0fe4c297633453c92a0fd36bbac77a93784
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-06T10:24:20Z

    WICKET-5500 Ignore the path parameters when reading the page class

commit c7ed5a0d5b9608a42d0f0b35fce006a59d0ebe04
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-07T08:21:28Z

    Fix the path to jquery for the tests
    
    (cherry picked from commit 2c2df2efecdefe7f602063234bf25fece246b1b0)

commit b7fe180d850da71b0ac639ff741b0c590b4cd6eb
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-07T14:15:21Z

    WICKET-5502 Patch FileUploadBase to fix CVE-2014-0050

commit 588871dc73f0f64cc32fac3d13156733afd80b43
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-11T19:31:50Z

    WICKET-5499 Page is not touched during initialization
    
    (cherry picked from commit d86d9afa8fc5d21d0d5a1c70e0fcd780ace6e3e6)

commit 93fb6eb29ee0da6d7e884250c4b5a5f1e72800d9
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-12T13:52:59Z

    WICKET-5499 Page is not touched during initialization
    
    This is a partial revert of d86d9afa8fc5d21d0d5a1c70e0fcd780ace6e3e6 - don't mark the page as stateful when passed to RenderPageRequestHandler because this breaks the submits of stateless forms

commit d08c7c86b320b1a57546b0d5cc046553d54155b6
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-13T16:06:19Z

    Improve the error message when an element cannot be found to bind an event listener

commit 83578b30768f7dc66b0fe32eca1a98c4a6600892
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-14T09:19:26Z

    Fix Session javadoc
    
    (cherry picked from commit f033d30970a149baf909efaa8c42565a2cf79c64)

commit 9ba9dafee15d6bc1c80724680bfdd7e75da77288
Author: Martijn Dashorst <dashorst@apache.org>
Date:   2014-02-11T22:12:06Z

    Added 6.14 to changelog

commit 1772dd88bdbadc848ee74b5dc665b0e419836ff2
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-17T10:32:07Z

    WICKET-5509 Wicket examples' MailTemplate from Page is broken
    
    Render the page directly without using PageRenderer.

commit 2af81ccab8a46f2f63667d48104971f8191d5abd
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-17T20:14:32Z

    WICKET-5504 AjaxRequestTarget.append/prependJavaScript cannot handle scripts with new-lines anymore
    
    (cherry picked from commit 87df7f443d4d5403fb304fc1272953189d411596)

commit 8ff59feaa7799f3245ea817cff4eb21a2f47ba23
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-18T08:13:20Z

    WICKET-5508 Memory model improvements for Session fields
    
    (cherry picked from commit c78379f4ba3fdd58c574a610db3e85e616860d10)

commit 36d1901cf556e9d1941a0a662ac2c3735ed8e6a5
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-18T08:21:57Z

    WICKET-5510 Avoid using jQuery.text() when possible. It is very slow in IE

commit 9ea20af107c0ec56a2d736ee569af14c77fb2227
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-18T08:32:29Z

    WICKET-5504 AjaxRequestTarget.append/prependJavaScript cannot handle scripts with new-lines anymore
    
    Extend the test to have one evaluation with new lines and another without
    
    (cherry picked from commit a69e7ed1c0256a6ebd0e89749095eed7632e3697)

commit e5cc837884e320647a8a72e33c21e7c2afbf44eb
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-18T08:42:42Z

    WICKET-5505 DefaultPropertyResolver does not respect JavaBean conventions
    
    (cherry picked from commit 6cceff44098a0183f0c9f632af93b3205db4ac22)

commit 0aaf1a55c3edb30fa5acb00ebe315a59a1f34da7
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-18T08:50:19Z

    Fix compilation issue after a cherry-pick

commit f2aec3356ba71160a89faacc88a51e99fd811ff0
Author: Martijn Dashorst <dashorst@apache.org>
Date:   2014-02-19T07:41:28Z

    New dev version

commit e6e8210312a840271da4ea94e8408b20fc81cf44
Author: Martijn Dashorst <dashorst@apache.org>
Date:   2014-02-19T07:42:16Z

    Merge remote-tracking branch 'origin/wicket-6.x' into wicket-6.x

commit 315472c6cf4146bc4383c1c47c6b2e12c22f6720
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-19T12:33:56Z

    WICKET-5512 Allow using child selector for JS event bindings
    
    (cherry picked from commit cade75e5afdf447f4889a0aad28da472c22a00d3)

commit 3f5367f57994a518a16bdafbe2b9160ef1c7b1f0
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-20T15:46:31Z

    WICKET-831 Return response status 404 when a mapper cannot decode a request url

commit 08fa9829392c98876432b4085d8a49b1a8c0b4ca
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-21T13:26:34Z

    WICKET-5513 Remove IRedirectListener and rework RedirectPage to create bookmarkable urls
    
    Deprcate IRedirectListener

commit 225369c9d2bdfc9d48b07dad2766288159d0707e
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-25T10:58:24Z

    WICKET-5516 RadioChoice / add a getAdditionalAttributes() also for <label>-tag

commit dfd12188a0da8cdc37aecbd29fc83fddfcb51c4d
Author: Martin Tzvetanov Grigorov <mgrigorov@apache.org>
Date:   2014-02-25T11:46:58Z

    WICKET-5517 IE11 returns false for Wicket.Browser.isIE()
    
    Add a simple check whether the current user agent is IE 11.
    It is not used by Wicket for now

commit a8fcba33b2ae33ccadfd6885ac05812143cbd5c9
Author: Luke Niesink <luke.niesink@topicus.nl>
Date:   2014-02-25T15:15:06Z

    WICKET-5517 Added support for detection of IE11 in Wicket.Browser.isIE()

commit a6565b625581ea583006ac98e5d4dba9c7b730fc
Author: Luke Niesink <luke.niesink@topicus.nl>
Date:   2014-02-25T15:16:35Z

    WICKET-5517 Use Wicket.Browser.isIELessThan11() as the behaviour of Wicket.Browser.isIE() has changed

----
","25/Feb/14 15:25;githubbot;GitHub user niesink opened a pull request:

    https://github.com/apache/wicket/pull/70

    WICKET-5517 Added support for detection of IE11 in Wicket.Browser.isIE() and update references to  Wicket.Browser.isIE()

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/niesink/wicket wicket-6.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/70.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #70
    
----
commit a8fcba33b2ae33ccadfd6885ac05812143cbd5c9
Author: Luke Niesink <luke.niesink@topicus.nl>
Date:   2014-02-25T15:15:06Z

    WICKET-5517 Added support for detection of IE11 in Wicket.Browser.isIE()

commit a6565b625581ea583006ac98e5d4dba9c7b730fc
Author: Luke Niesink <luke.niesink@topicus.nl>
Date:   2014-02-25T15:16:35Z

    WICKET-5517 Use Wicket.Browser.isIELessThan11() as the behaviour of Wicket.Browser.isIE() has changed

----
","25/Feb/14 15:27;githubbot;Github user niesink commented on the pull request:

    https://github.com/apache/wicket/pull/69#issuecomment-36018963
  
    Tried to merge into master instead of the wicket-6.x branch, apologies
","25/Feb/14 15:27;githubbot;Github user niesink closed the pull request at:

    https://github.com/apache/wicket/pull/69
",13/Mar/14 07:25;papegaaij;I've merged your pull request and picked the commits in wicket 7. All Wicket scripts now use 'compliant' behavior for IE11+ but isIE() still returns true for IE11.,"13/Mar/14 07:46;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/70
",,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultPropertyResolver should resolve the Property according to the getter first,WICKET-5506,12694449,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,vmathon,vmathon,11/Feb/14 09:34,05/Mar/14 13:09,13/Mar/19 23:18,05/Mar/14 13:09,6.13.0,,,,,,,,6.15.0,7.0.0-M1,,,wicket-bean-validation,,,0,,,,,,,,"A domain model model2 may extend a domain model model1 and have JSR303 annotations on one or more getter to override constraints. In such a case, DefaultPropertyResolver cannot detect the right domain model implementation since direct property analysis is done first. Indeed, with the current implementation, if a property is declared in model1 and the getter is overriden in model2, model1 is systematically  affected as the property class owner although model2 is the actual implementation associated with the Wicket model. As a consequence, some constraints validations may never been thrown.

Swapping direct property analysis and getter analysis solves this problem.

Workaround: providing my own property resolver.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-18 08:45:45.214,,,no_permission,,,,,,,,,,,,372957,,,Tue Feb 18 08:45:45 UTC 2014,,,,,,0|i1s9u7:,373259,,,,,,,,18/Feb/14 08:45;mgrigorov;[~ivaynberg] This sounds correct but I have never read the JSR303 spec... Should I change it ?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FormComponent.updateCollectionModel  does not handle unmodifiableList,WICKET-5518,12697106,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,petr.lancaric@lmc.eu,petr.lancaric@lmc.eu,25/Feb/14 11:57,27/Feb/14 10:57,13/Mar/19 23:18,27/Feb/14 10:57,6.12.0,,,,,,,,6.15.0,7.0.0-M1,,,,,,0,,,,,,,,"FormComponent.updateCollectionModel should handle situation, when getter returns unmodifiable list.

Proposed solution:

			formComponent.modelChanging();
			booelan isChanged;
			try {
				collection.clear();
				if (convertedInput != null)
				{
					collection.addAll(convertedInput);
				}
				isChanged = true;
			catch (Exception e)
			{
				// ignore this exception as Unmodifiable list does not allow change 				
				logger.info(""An error occurred while trying to modify list attached to "" + formComponent, e);
			}

			try
			{
				if(isChanged)				
					formComponent.getModel().setObject(collection);
				else 
					// TODO: create here collection as non-abstract successor of setObject declared argument
					formComponent.getModel().setObject(new ArrayList(convertedInput));
				isChanged = true;
			}
			catch (Exception e)
			{
				// ignore this exception because it could be that there
				// is not setter for this collection.
				logger.info(""An error occurred while trying to set the new value for the property attached to "" + formComponent, e);
			}
			// at least one update method should pass successfully			
			if(isChanged)
				formComponent.modelChanged();
			else
				throw new RuntimeException(""An error occurred while trying to modify value for the property attached to "" + formComponent);	   ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-25 12:26:28.802,,,no_permission,,,,,,,,,,,,375580,,,Thu Feb 27 10:57:09 UTC 2014,,,,,,0|i1spyn:,375876,,,,,,,,"25/Feb/14 12:26;mgrigorov;What is the use case ?
Why you want to use unmodifiable model (list) ?","25/Feb/14 12:52;svenmeier;A getter might return an unmodifiable collection, expecting the setter to be called with a new collection. Makes sense to me.","25/Feb/14 12:53;petr.lancaric@lmc.eu;There is a discussion on pros and cons of immutable objects, so I considered as good practice to use immutable object:
http://programmers.stackexchange.com/questions/151733/if-immutable-objects-are-good-why-do-people-keep-creating-mutable-objects

My initial motivation was that I want to track changes on my value object, therefore getter returns copy of list and changes could be detected in setter. I am able to achieve this goal using mutable copy as shown bellow.

I understand task is not so easy as we have to find suitable collection type and create instance via reflection, which is accepted by setObject call as an argument.

My code of vaue object used in property model:

    public List<Integer> getBusinessFieldList() {
        // fails:
        return Collections.unmodifiableList(this.businessFieldList);
       // works: 
       //return Lists.newArrayList(this.businessFieldList);
    }

    public void setBusinessFieldList(List<Integer> value) {
        trackChange(""businessField"", this.businessFieldList, value);
        this.businessFieldList = value;
    }
","25/Feb/14 13:02;mgrigorov;Immutable collections makes sense to be used when:
1) the collection is designed to be immutable
2) in multithreaded context

1) is very important because immutable collections have additional logic to reuse the same memory when an item is added/removed to/from it. 
I.e. the old collection will share most of its items with the new collection. With your code your are adding more pressure to the Garbage Collector, nothing more, because Java collections are not designed to be used as immutable. Wicket protects you from multithreaded issues if the collection is not with session scope.

But in the case when you use real immutable collections (like Guava's ones) then the suggested change makes more sense.
The logger level should be DEBUG IMO.","25/Feb/14 13:19;petr.lancaric@lmc.eu;With guava the result is the same:

Caused by: java.lang.UnsupportedOperationException
	at com.google.common.collect.ImmutableCollection.clear(ImmutableCollection.java:142)
	at org.apache.wicket.markup.html.form.FormComponent.updateCollectionModel(FormComponent.java:1593)
	at org.apache.wicket.markup.html.form.ListMultipleChoice.updateModel(ListMultipleChoice.java:371)


Colelction.clear and Collection.addAll are declared as optional methods and it is correct if they throw UnsupportedOperationException. Such situation should be handled.

http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html#clear%28%29
","25/Feb/14 22:25;svenmeier;I've pushed an improvement in Wicket master. I'm not sure it's safe to apply the change to 6.x too, since it changes the invocation order of #modelChanged() and this might break user's code.","26/Feb/14 09:39;svenmeier;On second though I think it's safe to apply the change on 6.x too.

[~petr.lancaric@lmc.eu] Does the proposed solution work for you?","26/Feb/14 10:03;petr.lancaric@lmc.eu;Thank you, there is a bug:
	if (modified && logger.isDebugEnabled())

should be 

	if (modified)
                if(logger.isDebugEnabled())
....
otherwise switch off debuging will cause exception.

Another think is, that my ""TODO"" was not processed, code will work only if setter accept List (or ArrayList or parents), but there are other collection will fail (Set e.g.). It is not an easy task to find right instance, but I recommend to put there at least comment, that code is unfinished. For my situation (ListMultipleChoice) it would work fine.










","26/Feb/14 10:11;mgrigorov;The problem has been fixed already.

Another suggestion:
if (logger.isDebugEnabled()) 	{ logger.error(...) }

I.e. if debug is enabled then log it as an error.",26/Feb/14 10:25;svenmeier;It's not an error when the list is unmodifiable *or* the setter fails - one of both suffices. Thus I don't think logger.error() would be correct.,"26/Feb/14 10:26;petr.lancaric@lmc.eu;IMO it is not an error, as unmodifiable collection or missing setter (like in jaxb) is normal situation. It would just spam log.","26/Feb/14 10:35;mgrigorov;If DEBUG is enabled then it will be logged no matter whether .debug() or .error() is used.
While it is OK in this case I think it may be a bug in someone else's application. With the new silent behavior the original collection will be silently replaced with a new ArrayList and pretend that everything was OK.

I still miss the idea in this improvement.
1) Initially the application uses unmodifiable collection as a model object.
2) Then either ""collection.clear();"" or ""collection.addAll(convertedInput);"" will fail and Wicket will change the type of the underlying model object to an ArrayList (or HashSet, or HashMap, or ...).
3) And from now on the component will use the modifiable collection and will be able to clear/addAll in the next request.
So after the first failure the unmodifiable collection is lost.
Am I right or I miss a step here ?","26/Feb/14 10:47;svenmeier;>I still miss the idea in this improvement.

Take a look at this example:

public class Foo {
  private List<Bar> bars = new ArrayList();

  public void setBars(List<Bar> bars) {
    this.bars.clear();
    this.bars.addAll(bars);

    // missing step: do something with bars
  }

  public List<Bar> getBars() {
    // prevent modification from outside
    return Collections.unmodifiableList(this.bars);
  }
}

Yes, #getBars() could return a copy of the list, but I've come across this pattern regularly.
With the proposed change it will be supported too.",26/Feb/14 10:54;mgrigorov;OK.,"26/Feb/14 11:07;petr.lancaric@lmc.eu;Take a look at another  example:

public class Foo {
private Set<Bar> bars = new HashSet();

public void setBars(Set<Bar> bars)
{ this.bars.clear(); this.bars.addAll(bars); // missing step: do something with bars }

public Set<Bar> getBars()
{ // prevent modification from outside 
return Collections.unmodifiableSet(this.bars); }
}

Result is something like ClassCastException, as Set is a Collection, but incompatible with an ArrayList.

",26/Feb/14 11:11;mgrigorov;We can add simple helper method that uses the type of the original collection to create the new one.,"26/Feb/14 11:25;petr.lancaric@lmc.eu;Yes, it is a good solution working if type has public ctor taking collection  Ctor(Collection arg). It is not case of e.g. Collections.UnmodifiableCollection. I am not sure, package access could be probably overcome by reflection in this case, but generally speaking proposed solution is not working allways.

SingletonImmutableList - not working, should be constructed as ImmutableList.copyof

Consider the following situation: returned type is SingletonImmutableList, but we want to add another list element. So different type has to be constructed. Really not an easy task...","27/Feb/14 10:57;svenmeier;Unmodifiable lists are supported now.

Further improvements for other collection types can be tracked in a separate ticket.",,,,,,,,,,,,,,,,,,
WebPageRenderer should honor RedirectPolicy.ALWAYS_REDIRECT more consistently,WICKET-5486,12690775,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,sludwig,sludwig,23/Jan/14 14:33,24/Feb/14 14:46,13/Mar/19 23:18,24/Feb/14 14:46,6.13.0,7.0.0-M1,,,,,,,6.14.0,7.0.0-M1,,,wicket,,,0,contract,unexpected,,,,,,"In WebPageRenderer shouldPreserveClientUrl() currently has precedence over RedirectPolicy.ALWAYS_REDIRECT.

This can lead to confusion or unexpected behavior when RedirectPolicy.ALWAYS_REDIRECT is explicitely set, but for some reason shouldPreserveClientUrl() returns true and thus no redirect is performed due to the logic in WebPageRenderer.

A fix for this particular problem could be implemented in 
WebPageRenderer as of Wicket 6.12.0 by changing line 211 to:

                || (shouldPreserveClientUrl && getRedirectPolicy() != RedirectPolicy.ALWAYS_REDIRECT)) //


Note that this problem is slightly related to WICKET-5484. Both fixes combined the line could look like this:

                || (shouldPreserveClientUrl && !isAjax && getRedirectPolicy() != RedirectPolicy.ALWAYS_REDIRECT)) //

",,,,,,,,,,,,,,,,,WICKET-3551,,,,,,,,23/Jan/14 17:08;sludwig;fix-WICKET-5486-Wicket_6-regarding_shouldPreserveClientUrl_only.patch;https://issues.apache.org/jira/secure/attachment/12624828/fix-WICKET-5486-Wicket_6-regarding_shouldPreserveClientUrl_only.patch,03/Feb/14 15:12;sludwig;fix-WICKET-5486-Wicket_7-shouldPreserveClientUrl_now_overruled_by_ALWAYS_REDIRECT.patch;https://issues.apache.org/jira/secure/attachment/12626659/fix-WICKET-5486-Wicket_7-shouldPreserveClientUrl_now_overruled_by_ALWAYS_REDIRECT.patch,23/Jan/14 15:44;sludwig;fix-WICKET-5486-Wicket_7-shouldPreserveClientUrl_only.patch;https://issues.apache.org/jira/secure/attachment/12624812/fix-WICKET-5486-Wicket_7-shouldPreserveClientUrl_only.patch,,3.0,,,,,,,,,,,,,,,,,,,2014-01-30 13:32:26.214,,,no_permission,,,,,,,,,,,,369513,,,Mon Feb 03 15:12:55 UTC 2014,,,,,,0|i1rosf:,369818,,,,,,,,"23/Jan/14 14:52;sludwig;Here is an example case regarding shouldPreserveClientUrl() vs. RedirectPolicy.ALWAYS_REDIRECT. A developer would perhaps write:

        getRequestCycle().scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler(new PageProvider(page),
                RenderPageRequestHandler.RedirectPolicy.ALWAYS_REDIRECT));

When a bit later the logic in WebPageRenderer is executed, it is possible (due to whatever reason) that the request has traversed at least one server-internal forward. In such a case, ServletWebRequest usually has forward attributes, in particular the Request URI. Therefore, ServletWebRequest.shouldPreserveClientUrl() returns true.

Due to the logic in WebPageRenderer, where shouldPreserveClientUrl() has precedence over RedirectPolicy.ALWAYS_REDIRECT, the result may be that no redirect is performed.
",23/Jan/14 15:44;sludwig;Patch to be considered for Wicket 7.0.0 to make RedirectPolicy.ALWAYS_REDIRECT overrule specializations of WebRequest.shouldPreserveClientUrl().,23/Jan/14 17:08;sludwig;same patch for Wicket 6.x,"30/Jan/14 13:32;mgrigorov;I was not able to break it in 7.x.
I've changed 'shouldPreserveClientUrl' to true in org.apache.wicket.request.handler.render.WebPageRendererTest#testRedirectPolicyAlways() but it doesn't break.
So I applied only the patch for 6.x.

Please report back if you are able to break it in master branch with a new test.

Thanks!","03/Feb/14 15:12;sludwig;Patch for Wicket 7.x with a new test case in WebPageRendererTest that breaks if shouldPreserveClientUrl is not overruled by ALWAYS_REDIRECT.

This patch also includes the change to WebPageRenderer contained in isolated form in fix-WICKET-5486-Wicket_7-shouldPreserveClientUrl_only.patch attachment.

In this patch here I also adjusted the expected outcomes in WebPageRendererTest.testShouldRenderPageAndWriteResponseVariation(). Thereby I looked closely at each variation for which I had to adjust its expected outcome to validate the proposed change.

Please consider that the setResponsePage(Class) and setResponsePage(Class, PageParameters) convenience methods in the Wicket API (in RequestCycle and Component) internally use RedirectPolicy.ALWAYS_REDIRECT. I currently do not see a problem here with respect to WICKET-3551 since the forward to a web.xml error page would be performed by the container and not via setResponsePage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OutputComponentPath Html5 compliance,WICKET-5498,12692839,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,spieper,spieper,03/Feb/14 12:35,18/Feb/14 09:37,13/Mar/19 23:18,18/Feb/14 09:37,6.11.0,,,,,,,,7.0.0-M1,,,,wicket,,,0,,,,,,,,"This issue has cropped up in our project because the attribute name ""wicket-path"" or ""wicketpath"" is not compliant with html5.
Custom attributes need to start with ""data"" as in ""data-wicket-path""
http://www.w3.org/TR/2010/WD-html5-20101019/elements.html#embedding-custom-non-visible-data-with-the-data-attributes
It would be appreciated if this could be made configurable. It is possible to write a custom implementation of the DebugSettings interface, however, the problem lies in the Component class, where currently the string wicketpath is hardcoded.

If Component could be adapted like this:
{{protected void onComponentTag(final ComponentTag tag)}}
...
{{tag.put(getApplication().getDebugSettings().getOutputComponentPath() , path);}}

IDebugSettings would need two new methods:

{{String getOutputComponentPath();}}
{{setOutputComponentPath(boolean enabled,String outputComponentPath);}}

And the implementation of IDebugSettings in the class DebugSettings would of course have to implement these methods and store the outputComponentpath in a field. 

This would make it possible to use wicketpath and be html5 compliant.

This has already been referred to in https://issues.apache.org/jira/browse/WICKET-1877","Jetty, Windows7, IE, Firefox",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-18 09:37:52.599,,,no_permission,,,,,,,,,,,,371425,,,Tue Feb 18 09:37:52 UTC 2014,,,,,,0|i1s0gn:,371728,,,,,,,,"18/Feb/14 09:37;mgrigorov;For Wicket 7 a new method is added: org.apache.wicket.settings.DebugSettings#setComponentPathAttributeName(String).

Its parameter will be used as the name of the attribute if it is not null or empty string. It is responsibility of the application to provide a valid attribute name.

The old org.apache.wicket.settings.DebugSettings#setOutputComponentPath(boolean) is still here but is deprecated and will be removed in Wicket 8. It is used only when org.apache.wicket.settings.DebugSettings#getComponentPathAttributeName() returns an empty value.

The straight migration is:
in MyApp.java:

// replace 
getDebugSettings.setOutputComponentPath(true)

// with
getDebugSettings#setComponentPathAttributeName(""wicketpath"")",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultPropertyResolver does not respect JavaBean conventions,WICKET-5505,12694446,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,vmathon,vmathon,11/Feb/14 09:06,18/Feb/14 08:43,13/Mar/19 23:18,18/Feb/14 08:43,6.13.0,,,,,,,,6.15.0,7.0.0-M1,,,wicket-bean-validation,,,0,,,,,,,,"The property name code should handle the isPropertyName pattern

if(getterName.startsWith(""get"")) {
	name = getterName.substring(3, 4).toLowerCase() + getterName.substring(4);
} else {
	name = getterName.substring(2, 3).toLowerCase() + getterName.substring(3);
}

Workaround: providing my own property resolver.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,372954,,,2014-02-11 09:06:45.0,,,,,,0|i1s9tj:,373256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Wicket.DateTime.getViewportHeight() returning undefined on IE8, positions calendar out of viewport",WICKET-5491,12691625,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,alankila@bel.fi,alankila@bel.fi,28/Jan/14 12:41,05/Feb/14 16:11,13/Mar/19 23:18,30/Jan/14 08:59,,,,,,,,,1.5.12,6.14.0,7.0.0-M1,,wicket-datetime,,,0,,,,,,,,"A small mistake in Wicket.DateTime.getViewportHeight() causes the function to return undefined. This allows the calendar to pop up in such a way that the it may lie outside the existing viewport, forcing user to scroll it into view.

The provided patch corrects the issue.",Internet Explorer,3600,3600,,0%,3600,3600,,,,,,,,,,WICKET-1497,,,,,,,,28/Jan/14 12:42;alankila@bel.fi;read-clientHeight.patch;https://issues.apache.org/jira/secure/attachment/12625570/read-clientHeight.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-30 08:59:36.107,,,no_permission,,,,,,,,,,,,370370,,,Thu Jan 30 08:59:36 UTC 2014,,,,,,0|i1rtzz:,370671,,,,,,,,28/Jan/14 12:42;alankila@bel.fi;Fix for the issue,30/Jan/14 08:59;mgrigorov;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Jetty 9.1.0 has its own UpgradeFilter, use it",WICKET-5453,12685456,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,joakime,joakime,18/Dec/13 20:35,31/Jan/14 09:39,13/Mar/19 23:18,31/Jan/14 09:39,7.0.0-M1,,,,,,,,7.0.0-M1,,,,wicket-native-websocket,,,0,,,,,,,,"In a recent stackoverflow question ..

http://stackoverflow.com/questions/20661139/websocket-timeout-with-apache-wicket-and-embedded-jetty

I noticed a reference to a class called Jetty9WebSocketFilter

Starting in Jetty 9.1.0, a filter for websocket upgrade ships with Jetty.

See answer (with example code):

http://stackoverflow.com/a/20663447/775715
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-19 13:53:10.767,,,no_permission,,,,,,,,,,,,364533,,,Fri Jan 31 09:39:02 UTC 2014,,,,,,0|i1qu07:,364833,,,,,,,,"19/Dec/13 13:53;mgrigorov;Thanks for letting us know!
But unfortunately it is not that simple. 

1) -jetty9 module is used for Jetty 9.0.x, so WebSocketUpgradeFilter is not available
For Jetty 9.1.+ we use the standard JSR 356 APIs - https://github.com/apache/wicket/tree/master/wicket-experimental/wicket-native-websocket/wicket-native-websocket-javax
At the moment Tomcat 7.0.47+/8.x and Jetty 9.1.x are supported by this module. We cannot depend on container specifics here.

2) It is not easy to use normal servlet filter chaining because we need functionality/information from both Jetty/Tomcat/... and WicketFilter.
See https://github.com/apache/wicket/blob/master/wicket-experimental/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/AbstractUpgradeFilter.java?source=c#L75
It has some code that I copied from Jetty 7/8 and Tomcat 7 to be able to check whether this is a WebSocket connection.
It would be much better for integrations like Wicket's Native WebSocket if the web container provided helper classes/methods that check this info and return a result. Since I wasn't able to reuse Jetty/Tomcat's WebSocketServlet I had to copy this code locally :-/ ","19/Dec/13 23:23;joakime;Tis a shame.

Well, know that the original point of the question on stackoverflow had to do with idle timeout.
The answer there has been updated with some specifics about how idle timeout works on jetty.

We like the JSR 356 apis, they are a great step towards standardization. +1 for that.
However, the JSR 356 spec and API are missing various things that are proving to be difficult for some users.

Some gotchas:

* ServerEndpointConfig.Configurator execution order is undetermined.  tomcat / jetty / tyrus / grizzly all do it differently.
* ServerEndpointConfig.Configurator instantiation is undetermined. jetty uses 1 instance per endpoint, tyrus / grizzly seem to create a new instance per session ( which complicates / prevents singleton endpoint use in Configurator.getEndpointInstance() )
* connectToServer() has no connect timeouts
* no rules on combined use of RemoteEndpoint.Basic + RemoteEndpoint.Async
* if implementation queues frames in RemoteEndpoint.Async and a queue full occurs, it has to fail the .send() calls via the future or sendhandler, not via a runtime exception (as any extensions will sit between the queue and the send call).  If a single message results in multiple frames in the queue, some frames might be ok, but a later one might fail, making the entire stream invalid at this point.   This means the only safe thing to do on RemoteEndpoint.Async.send() calls and a full queue is to fail the message and then force close the session.

Hopefully these kinds of quirks and undetermined behavior will be addressed in a future revision of JSR 356.","19/Dec/13 23:28;joakime;Looking at your WicketFilter.

You might have problems with that in the future, as Servlet 3.1 has its own Upgrade mechanism and rules.
Those requests will not be passed through a filter or servlet if upgraded by the implementation automatically.
Jetty's 9.1 native websockets is moving to this approach to conform to the Servlet 3.1 spec more properly.
","19/Dec/13 23:36;joakime;Some more points of concern with WicketFilter ...

Chrome 32 (due out soon) is more strict on Subprotocol validation.
If a request from a client contains a Sec-WebSocket-Protocol then the server *MUST* respond with one of the provided protocols or fail the upgrade.

RFC 6455 - Section 4.4 / http://tools.ietf.org/html/rfc6455#section-4.4
If you have a Sec-WebSocket-Version header, but it doesn't contain version 13 then you should respond with error 400.
I know that section 4.2.2 says you can optionally choose to send response code 426 (but few websocket clients support that properly as that response code is not part of RFC 2616 spec)

You should also detect Sec-WebSocket-Draft and Sec-WebSocket-Key1/Sec-WebSocket-Key2 headers to give proper errors for Safari 5.x (either from OSX or IOS) or Flash clients.
",15/Jan/14 09:06;mgrigorov;[~joakime] Pull requests or directions how to improve/fix any of these issue will be highly appreciated!,"30/Jan/14 09:50;mgrigorov;Reworked JSR356 integration to be based on ServerApplicationConfig and tested it with Servlet 3.1 web containers (Tomcat 8.0.1 and Jetty 9.1.1).
This overcome the previous problem with Glassfish but then I hit two new bugs so it still doesn't work ..

Additionally tested the problem with Sec-WebSocket-Protocol with Chrome 32 (there was a fix required in Tomcat 8.0.0, thus 8.0.1). Works fine with Jetty 9.0.7 and 9.1.1.

There returned error code for Sec-WebSocket-Version is changed to 400 as suggested.

I didn't work on the problems with Sec-WebSocket-Draft because I have no iWidgets around.


So the only thing that left here is the configurability problem. Looking at Jetty's sources I think it is possible to do something like:

WebSocketServerContainerInitializer.configureContext(webAppContext);
WebSocketUpgradeFilter upgradeFilter = 
         (WebSocketUpgradeFilter) webAppContext.getAttribute(WebSocketUpgradeFilter.class.getName());
upgradeFilter.getFactory().getPolicy().setIdleTimeout(5000);

before starting the Server instance.

[~joakime] Is this OK ?","30/Jan/14 20:32;joakime;That code snippet is sane.
Yes, that would set the idle timeout.

But I have to ask, since you have ServerApplicationConfig, and you are apparently using JSR-356, why not just use the JSR-356 techniques?

Example:

Using a {{ServletContainerInitializer}} you could ...

{code:java}
    pubilc void onStartup(Set<Class<?>> c, ServletContext ctx) throws ServletException
    {
        ServerContainer wsContainer = (ServerContainer) ctx.getAttribute(""javax.websocket.server.ServerContainer"");
        wsContainer.setDefaultMaxSessionIdleTimeout(5000);
    }
{code}

I would expect that to be the same behavior.

","31/Jan/14 09:39;mgrigorov;This looks like the best solution.
Every application can provide its own implementation of ServletContainerInitializer and configure whatever is needed for its specific use cases.

Thanks for your help!",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing chapter 2 is causing off-by-one page names in the guides URL links,WICKET-5449,12685246,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,paulbors,paulbors,17/Dec/13 20:49,28/Jan/14 14:03,13/Mar/19 23:18,28/Jan/14 14:03,6.12.0,,,,,,,,6.14.0,,,,guide,,,0,,,,,,,,"Links in the outline of the guide do not match the actual chapter/section number but they are functional.

For example take:
http://wicket.apache.org/guide/guide/chapter11.html#chapter11_10

I would expect that to take me to chapter 11 section 10, instead it takes me to chapter 12 section 10. 

Looks like this broke with Chapter 2:
http://wicket.apache.org/guide/guide/chapter2.html

Which is really chapter 3...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-17 21:13:20.327,,,no_permission,,,,,,,,,,,,364323,,,Tue Jan 28 14:03:23 UTC 2014,,,,,,0|i1qspr:,364623,,,,,,,,"17/Dec/13 20:51;paulbors;It might be a naming convention here, Chapter 2 is not missing its URL is:
http://wicket.apache.org/guide/guide/howToSource.html

Perhaps it should have been:
http://wicket.apache.org/guide/guide/chapter2.html and have howToSource.html be a redirect to chapter2.html?",17/Dec/13 20:58;paulbors;Is the guide's source code in GitHub?,17/Dec/13 21:13;mgrigorov;See http://wicket.apache.org/guide/guide/chapter26.html,"17/Dec/13 22:43;paulbors;You mean Chapter 27 :)

Thanks, I'll take a look at it and try to fix it when I get some spare time.","28/Jan/14 14:03;mgrigorov;I've renamed all 'chapterXY' files to 'somethingMeaningful'.
This way the chapter number won't be shown in the url and be different than the generated one.

Also this way it will be simpler to insert new chapters/pages somewhere in the middle of the existing docs.

The only thing that we should be careful about is that we use 'chapter x.y' as text for the links inside the content and those can easily get out of date when inserting new chapter/page. We should rename these to 'something meaningful' as well at some point.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ModalWindow unload warning always displayed (even if window is closed),WICKET-5469,12688247,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,jonas,jonas,10/Jan/14 14:03,22/Jan/14 19:07,13/Mar/19 23:18,15/Jan/14 09:16,6.13.0,7.0.0-M1,,,,,,,6.14.0,7.0.0-M1,,,wicket-extensions,,,0,,,,,,,,"The fix applied for WICKET-4909 seems to be bad:

If there's a ModalWindow with showUnloadConfirmation == true (java) and window.onbeforeunload == null (javascript), the warning message ('Reloading this page will cause the modal window to disappear') is always displayed, even if the ModalWindow was closed.

The fix for WICKET-4909 should probably take the showUnloadConfirmation flag into account.",,,,,,,,,,,,,,,,,,,,,SYNCOPE-477,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-15 09:47:39.653,,,no_permission,,,,,,,,,,,,367266,,,Wed Jan 15 09:47:39 UTC 2014,,,,,,0|i1rb0v:,367575,,,,,,,,"10/Jan/14 14:14;jonas;As a workaround, it is possible to assign an empty function to window.onbeforeunload, e.g.

target.appendJavaScript(""window.onbeforeunload = function() {};"");

before calling ModalWindow.show(AjaxRequestTarget)","10/Jan/14 15:49;jonas;Wouldn't it make sense to use 
window.addEventListener(""onbeforeunload"", handler)
and
window.removeEventListener(""onbeforeunload"", handler)
(or whatever jquery has up it's sleeve in that area)
instead of messing with window.onbeforeunload ?
This would probably also avoid the problem described in WICKET-4909","15/Jan/14 09:47;mgrigorov;The problem is fixed and now we use event listeners.
Thank you!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ajax behavior on component with setRenderBodyOnly(true) don't get called - improve warning,WICKET-5476,12689624,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,vlastimil.dolejs,vlastimil.dolejs,18/Jan/14 10:36,18/Jan/14 23:15,13/Mar/19 23:18,18/Jan/14 23:15,6.13.0,,,,,,,,7.0.0-M1,,,,wicket,,,0,,,,,,,,"When you put AJAX behavior on component with setRenderBodyOnly(true) and try to call it with callback script it won't get called and no error / warning is displayed. See attached quickstart sample. Just unzipp and run with: mvn jetty:run

Navigate browser to http://localhost:8080/
When you try to click on labels AJAX behavior should get called. But it won't. This kind of behavior is correct (i assume). But i think user should be warned that behavior can't be called. I think proper place is somewhere on server side? But I don't know where exactly put the warning.

Now only message is in Wicket Ajax Debug window - ""Ajax request stopped because of precondition check"". I had to debug wicket javascript to find what precondition check failed. Maybe more detailed message in default precondition check would be useful too?",,,,,,,,,,,,,,,,,,,,,,,,,18/Jan/14 10:38;vlastimil.dolejs;sample.zip;https://issues.apache.org/jira/secure/attachment/12623799/sample.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-18 23:15:42.784,,,no_permission,,,,,,,,,,,,368591,,,Sat Jan 18 23:15:42 UTC 2014,,,,,,0|i1rj3r:,368895,,,,,,,,"18/Jan/14 23:15;svenmeier;A warning is now logged as suggested.

I've changed Check and Radio to no longer request the markup id from the containing group, as this would trigger this new warning.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Behaviors#internalAdd(Behavior) erroneously gets id for stateless behaviors,WICKET-5400,12676489,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,svenmeier,svenmeier,29/Oct/13 20:41,16/Jan/14 13:54,13/Mar/19 23:18,11/Nov/13 10:23,6.11.0,7.0.0-M1,,,,,,,6.13.0,7.0.0-M1,,,wicket,,,0,,,,,,,,see http://markmail.org/thread/jtd4zn527r343jbm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-30 09:28:29.767,,,no_permission,,,,,,,,,,,,355921,,,Thu Jan 16 13:54:24 UTC 2014,,,,,,0|i1pcxz:,356209,,,,,,,,"30/Oct/13 09:28;mgrigorov;By prio ""Minor"" do you say it is OK to leave that change after the release of 6.12 ?
I prefer to do it after 6.12 is out so we have more time to test it for 6.13.

I have no idea when 6.12 will be released though.","30/Oct/13 09:54;svenmeier;Yes, I think this is a minor issue only: We're wasting a few bytes for behavior-ids which are not needed. The misleading error message in our tests is just a small trouble.",16/Jan/14 10:50;robsonke;Could it be that this has broken the implementation of WICKET-3764? I'm checking this but since wicket 6.13 I'm getting the error from WICKET-3764 again.,"16/Jan/14 11:39;mgrigorov;https://github.com/wicketstuff/core/tree/master/jdk-1.6-parent/stateless-parent has changed too - https://github.com/wicketstuff/core/commit/ecadd460a17387fef7399223137f5fa1e86d5a32.

I have tested the change against 6.13.0-SNAPSHOT at the time.
Please try with Wicket 6.13.0 and WicketStuff 6.0-SNAPSHOT and if it breaks then create an issue for WicketStuff with more detailed description.
Thanks!","16/Jan/14 13:02;robsonke;Ah, thanks a lot. I didnt notice that change. I'll check it right away!

Edit: Works like a charm!","16/Jan/14 13:54;mgrigorov;Cool.
I will release WicketStuff 6.13 early next week. There were few reports for regression in Wicket 6.13 and I want to see whether there will be 6.13.1 or not. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Button silently ignores MissingResourceException,WICKET-5235,12652814,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,mpulkkinen,mpulkkinen,14/Jun/13 06:10,06/Jan/14 14:41,13/Mar/19 23:18,14/Jun/13 13:52,6.8.0,,,,,,,,7.0.0-M1,,,,wicket,,,0,,,,,,,,"When a Button is rendered with model that tries to load a resource that is missing
and ResourceSettings.throwExceptionOnMissingResource = true, the button catches and silently ignores the MissingResourceException in onComponentTag(), which is not nice.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-14 07:50:03.848,,,no_permission,,,,,,,,,,,,333137,,,Fri Jun 14 13:52:54 UTC 2013,,,,,,0|i1lgvr:,333465,,,,,,,,"14/Jun/13 07:50;svenmeier;Digging into the old SF svn it seems that the try-catch was introduced first [1] to make it possible to use a button inside a CompoundPropertyModel. Later on this case was handled additionally by overriding #initModel().

So it seems to me, that the try-catch is obsolete.

[1] http://svn.apache.org/viewvc/wicket/trunk/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Button.java?r1=457657&r2=457679&diff_format=h
[2] http://svn.apache.org/viewvc/wicket/trunk/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Button.java?r1=459746&r2=459762&diff_format=h","14/Jun/13 13:52;svenmeier;I removed the try-catch, since the workaround for button in compoundPropertyModel is not needed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Page not recognized as stateless although stateful component is hidden in #onConfigure(),WICKET-5426,12681249,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,26/Nov/13 12:17,19/Dec/13 14:18,13/Mar/19 23:18,19/Dec/13 14:18,6.12.0,7.0.0-M1,,,,,,,6.13.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"Page#stateless gets cached. If Page#isStateless() is called before rendering, a page might not be considered stateless although in #onConfigure() all stateful components are hidden.",,,,,,,,,,,,,,,,,WICKET-5424,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-18 13:27:21.2,,,no_permission,,,,,,,,,,,,360514,,,Thu Dec 19 14:18:05 UTC 2013,,,,,,0|i1q5b3:,360813,,,,,,,,26/Nov/13 12:19;svenmeier;related bug in BaseWicketTester,26/Nov/13 18:09;svenmeier;See WicketTesterLazyIsPageStatelessBase and subclasses.,"28/Nov/13 12:22;svenmeier;The regression of ONE_PASS_RENDER is caused by commit 22f1e04:

   WICKET-3347 Simplify ... WebPageRenderer.respond()

Now #isPageStateless() is called prematurely in line #215 of WebPageRenderer.

Even worse, for a PageProvider with a pageClass only, the page instance gets created unnecessarily in case of a redirect :(.","18/Dec/13 13:24;svenmeier;I've changed WebPageRenderer so that #isPageStateless() is no longer called if not needed.

Thus we now have the same situation as in Wicket 6.x.","18/Dec/13 13:27;mgrigorov;Thanks, Sven !","19/Dec/13 12:04;svenmeier;Now as to the actual problem...

Page#onBeforeRender() resets the cached stateless already:

{code:java}
     @Override
     protected void onBeforeRender()
     {
          ...
          // if the page is stateless, reset the flag so that it is tested again
          if (Boolean.TRUE.equals(stateless))
          {
               stateless = null;
          }
          ...
     }
{code}

Why don't we do this for FALSE too? This would fix this issue.
","19/Dec/13 13:32;mgrigorov;That is, remove the check completely and always set stateless to null.
I think this will be more correct behavior.",19/Dec/13 14:18;svenmeier;stateless cache is now cleared in Page#onBeforeRender() regardless of its previous value,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TableTree's NodeBorder does not properly close divs,WICKET-5447,12685119,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,17/Dec/13 07:45,17/Dec/13 07:50,13/Mar/19 23:18,17/Dec/13 07:50,6.12.0,7.0.0-M1,,,,,,,6.13.0,7.0.0-M1,,,wicket-extensions,,,0,,,,,,,,NodeBorder fails to properly close generated <div>s.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,364196,,,Tue Dec 17 07:50:45 UTC 2013,,,,,,0|i1qrxj:,364496,,,,,,,,17/Dec/13 07:50;svenmeier;divs are now closed in #afterRender(),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make org.apache.wicket.pageStore.memory.PageTable public so custom impls of IDataStoreEvictionStrategy can be made,WICKET-5444,12684910,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,mgrigorov,mgrigorov,16/Dec/13 09:20,16/Dec/13 09:21,13/Mar/19 23:18,16/Dec/13 09:21,6.12.0,,,,,,,,6.13.0,7.0.0-M1,,,wicket,,,0,,,,,,,,org.apache.wicket.pageStore.memory.PageTable is package private and this prevents making custom implementations of org.apache.wicket.pageStore.memory.IDataStoreEvictionStrategy.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,363988,,,2013-12-16 09:20:11.0,,,,,,0|i1qqnb:,364288,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When a ConversionException is thrown, its message is not used in the ValidationError",WICKET-5437,12682926,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,danhaywood,danhaywood,05/Dec/13 15:41,05/Dec/13 16:33,13/Mar/19 23:18,05/Dec/13 16:33,6.11.0,,,,,,,,6.13.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"Probably affects 6.12 also, though haven't checked.

As noted by Martin Grigorov in ISIS-621:

The code for creating a ValidationError is at
https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java?source=c#L1219

As you can see the cause's message is not used :-/

The problem is:
ValidationError error = new ValidationError();

it should be:
ValidationError error = new ValidationError(cause.getMessage());

Later at https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/validation/ValidationError.java?source=c#L241 Wicket will look for i18n keys and fallback to the message.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-05 15:45:13.5,,,no_permission,,,,,,,,,,,,362183,,,Thu Dec 05 16:33:38 UTC 2013,,,,,,0|i1qfjz:,362478,,,,,,,,"05/Dec/13 15:45;mgrigorov;As I explained the message will be used as a fallback.
The recommended way is to use i18n resource bundle.","05/Dec/13 16:33;mgrigorov;I've committed my suggestion.
Now if there are no i18n keys that match Wicket will use the message.

But I think in your case there is some generic key that matches, no ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Positioning AutoCompleteTextField not correct on resized window,WICKET-5413,12678664,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,thyzz,thyzz,11/Nov/13 20:34,26/Nov/13 15:25,13/Mar/19 23:18,14/Nov/13 22:13,6.12.0,,,,,,,,6.13.0,7.0.0-M1,,,wicket-extensions,,,0,,,,,,,,"The positioning of the AutoCompleteTextField options is off when having a resized browser window.

I'll upload a testcase. And I have a patch which uses jQueries .offset() which fixes the problem for me.",,,,,,,,,,,,,,,,,,,,,,,,,11/Nov/13 20:40;thyzz;autocompletetest.zip;https://issues.apache.org/jira/secure/attachment/12613218/autocompletetest.zip,11/Nov/13 20:43;thyzz;screenshot-1.jpg;https://issues.apache.org/jira/secure/attachment/12613219/screenshot-1.jpg,11/Nov/13 21:35;thyzz;wicket-5413.patch;https://issues.apache.org/jira/secure/attachment/12613228/wicket-5413.patch,,3.0,,,,,,,,,,,,,,,,,,,2013-11-13 22:24:52.808,,,no_permission,,,,,,,,,,,,358031,,,Wed Nov 13 22:24:52 UTC 2013,,,,,,0|i1ppxr:,358321,,,,,,,,"11/Nov/13 20:40;thyzz;Run the quickstart. Halfway on the page I added the AutoCompleteTextField start typing the word 'choice'

If you have resized the window and scroll down to the field the autocompleted values will be somewhere above the field. (also see screenshot).

Please don't mind the coloring. ",11/Nov/13 21:35;thyzz;And a patch (simple onliner),13/Nov/13 22:24;bitstorm;Thanks for your patch!!!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
eclipse .settings files,WICKET-5399,12676319,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,funkattack,funkattack,29/Oct/13 11:59,06/Nov/13 12:07,13/Mar/19 23:18,06/Nov/13 12:07,,,,,,,,,,,,,,,,0,,,,,,,,The Eclipse .settings files keep getting in the way.,,,,,,,,,,,,,,,,,,,,,,,,,29/Oct/13 12:03;funkattack;fix-WICKET-5399.diff;https://issues.apache.org/jira/secure/attachment/12610798/fix-WICKET-5399.diff,,,,1.0,,,,,,,,,,,,,,,,,,,2013-11-06 12:07:47.544,,,no_permission,,,,,,,,,,,,355816,,,Wed Nov 06 12:07:47 UTC 2013,,,,,,0|i1pcan:,356104,,,,,,,,"29/Oct/13 12:03;funkattack;Sorry this diff is so big. My environment seems to render the site a little different. As in uses 'doublequotes' instead of 'singlequotes'

The files edited:
contribute/build.md
start/download.md
regenerate.sh","29/Oct/13 12:20;funkattack;Just double linking:
https://github.com/apache/wicket/pull/56","06/Nov/13 12:07;svenmeier;Thanks Martin, I added the instructions to the ""IDEs"" page.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XmlPullParser fails to properly parse from String with encoding declaration,WICKET-5398,12676234,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,28/Oct/13 22:33,29/Oct/13 13:24,13/Mar/19 23:18,29/Oct/13 13:24,6.11.0,7.0.0-M1,,,,,,,6.12.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"When parsing from a string, XmlPullParser fails if the encoding from the XML declaration is different than the system's file encoding.

Examples:
   -Dfile.encoding=ISO-8859-1
   parser.parse(""<?xml encoding='UTF-8' ?><span id='umlaut-äöü'></span>"");

   -Dfile.encoding=UTF-8
   parser.parse(""<?xml encoding='ISO-8859-1' ?><span id='umlaut-äöü'></span>"");

Both fail because the string is read with the system's file encoding while the parser expects the stream to be encoded in the declarated encoding.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-29 08:10:25.512,,,no_permission,,,,,,,,,,,,355731,,,Tue Oct 29 13:24:17 UTC 2013,,,,,,0|i1pbrr:,356019,,,,,,,,29/Oct/13 08:10;mgrigorov;I believe this conversation is related - http://markmail.org/thread/4emvqzvcui6sojds,"29/Oct/13 09:17;svenmeier;Thanks Martin, I wasn't aware of this discussion.

Juergen wrote:
>To support unit testing XPP provide a parse(String) method which encapsulates the string into a inputstream,
>in order not to circumvent XmlReader for testing.

I'm revisit my change and check why it should be 'bad to circumvent XmlReader' in testing.","29/Oct/13 13:24;svenmeier;IMHO it's better to circumvent any encoding problem by using a StringReader directly on the parsed String.

XmlPullParserTest makes sure detection of XML encoding still works.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ChainingModel should not check if the modelObject given as argument is null,WICKET-5386,12672809,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,fdonckels,fdonckels,08/Oct/13 13:02,29/Oct/13 13:04,13/Mar/19 23:18,29/Oct/13 13:04,6.11.0,,,,,,,,6.12.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"In Wicket 1.5.x there was no check against the null value of the target of a CompoundPropertyModel.

This allowed to define a CPM based on a possibly value, then being able to refer to sub-properties of that value in through labels included in the markup without fearing a NullPointerException, nice empty labels would be displayed instead.

Now that CPM has been refactored, null values are explicitly rejected, but only in the constructor.
Changing the model through a call to setObject doesn't check the null value and allows the previous behaviour to work again.
(another workaround is to pass Model.of(value) in the constructor).

These are workarounds, the check itself adds no value and removes functionality.",,1200,1200,,0%,1200,1200,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,352432,,,2013-10-08 13:02:44.0,,,,,,0|i1orhj:,352719,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wicket-bean-validation PropertyValidator_fr.properties.xml : org.xml.sax.SAXParseException,WICKET-5385,12672446,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,tahitiangabriel,tahitiangabriel,05/Oct/13 01:37,07/Oct/13 11:01,13/Mar/19 23:18,07/Oct/13 11:01,6.11.0,,,,,,,,6.12.0,7.0.0-M1,,,wicket-bean-validation,,,0,parse,translation,,,,,,"French translation for wicket-bean-validation was added in WICKET-5333.
It was a properties file that was working.
Unfortunatly in the source code it was changed in a XML file that is not weel-formed!

java.util.InvalidPropertiesFormatException: org.xml.sax.SAXParseException; lineNumber: 24; columnNumber: 110; The content of elements must consist of well-formed character data or markup.
	at java.util.XMLUtils.load(XMLUtils.java:76) ~[na:1.7.0_21]
	at java.util.Properties.loadFromXML(Properties.java:868) ~[na:1.7.0_21]


",,,,,,,,,,,,,,,,,,,,,,,,,05/Oct/13 01:38;tahitiangabriel;PropertyValidator_fr.properties.xml;https://issues.apache.org/jira/secure/attachment/12606957/PropertyValidator_fr.properties.xml,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-07 11:01:52.982,,,no_permission,,,,,,,,,,,,352073,,,Mon Oct 07 11:01:52 UTC 2013,,,,,,0|i1opa7:,352361,,,,,,,,05/Oct/13 01:38;tahitiangabriel;a well format PropertyValidator_fr.properties.xml file!,07/Oct/13 11:01;svenmeier;Thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't set a cookie using CookieUtils during an ajax request due to java.lang.ClassCastException: org.apache.wicket.ajax.AbstractAjaxResponse$AjaxResponse cannot be cast to org.apache.wicket.request.http.WebResponse,WICKET-5369,12670306,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,dgileadi,dgileadi,24/Sep/13 16:23,26/Sep/13 15:14,13/Mar/19 23:18,26/Sep/13 15:14,6.9.1,,,,,,,,6.12.0,7.0.0-M1,,,,,,0,,,,,,,,"I have a subclass of org.apache.wicket.extensions.markup.html.repeater.data.table.DataTable whose IDataProvider.iterator method indirectly calls CookieUtils.save. This causes the following stack trace:

Caused by: java.lang.ClassCastException: org.apache.wicket.ajax.AbstractAjaxResponse$AjaxResponse cannot be cast to org.apache.wicket.request.http.WebResponse
	at org.apache.wicket.util.cookies.CookieUtils.getWebResponse(CookieUtils.java:354) ~[wicket-core-6.9.1.jar:6.9.1]
	at org.apache.wicket.util.cookies.CookieUtils.save(CookieUtils.java:297) ~[wicket-core-6.9.1.jar:6.9.1]
	at org.apache.wicket.util.cookies.CookieUtils.save(CookieUtils.java:184) ~[wicket-core-6.9.1.jar:6.9.1]

DataTable calls its data provider's iterator method during org.apache.wicket.markup.repeater.AbstractRepeater.onBeforeRender. Apparently at this point the response isn't a WebResponse. Perhaps CookieUtils should be changed to work with a generic Response, using its getContainerResponse method.","Java 7, Servlet 2.5, Apache Tomcat 7.",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-26 15:14:19.025,,,no_permission,,,,,,,,,,,,350135,,,Thu Sep 26 15:14:19 UTC 2013,,,,,,0|i1ode7:,350429,,,,,,,,26/Sep/13 15:14;mgrigorov;From now on it will be WebResponse.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SourcesPage fails on resources with non-ASCII characters,WICKET-5374,12670673,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,26/Sep/13 09:50,26/Sep/13 10:08,13/Mar/19 23:18,26/Sep/13 10:08,6.9.1,7.0.0-M1,,,,,,,6.12.0,7.0.0-M1,,,wicket-examples,,,0,,,,,,,,"When created with a String input argument, XhtmlRenderer uses the deprecated java.io.StringBufferInputStream, which ""does not properly convert characters into bytes"" (javadoc).

Thus the rendered output may contain invalid characters for the Ajax response.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,350502,,,Thu Sep 26 10:08:03 UTC 2013,,,,,,0|i1ofnb:,350795,,,,,,,,"26/Sep/13 10:08;svenmeier;using another XhtmlRenderer constructor now to avoid usage of StringBufferInputStream
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.wicket.util.string.StringValue#equals broken,WICKET-5359,12669634,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,jonas,jonas,20/Sep/13 11:17,22/Sep/13 07:35,13/Mar/19 23:18,20/Sep/13 19:14,6.10.0,,,,,,,,6.12.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"The #equals implementation for org.apache.wicket.util.string.StringValue is broken. The following throws an exception instead of just printing 'false':

StringValue val = StringValue.valueOf(""bla"", Locale.FRANCE);
StringValue val2 = StringValue.valueOf(""bla"", Locale.CANADA);
System.out.println(val.equals(val2));


This part of #equals
Objects.isEqual(locale, stringValue.locale)

should probably be replaced with something like
(locale == stringValue.locale || (locale != null && locale.equals(stringValue.locale))

-> Objects.isEqual is not suitable to determine equality of Locale
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-20 19:14:43.968,,,no_permission,,,,,,,,,,,,349566,,,Fri Sep 20 19:14:43 UTC 2013,,,,,,0|i1o9wn:,349864,,,,,,,,"20/Sep/13 19:14;svenmeier;The locale seems always to be non-null, so we can just use #equals() on it",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AutoCompleteSettings.setShowListOnEmptyInput(true) is not working anymore,WICKET-5356,12669015,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,eloyar,eloyar,17/Sep/13 13:42,22/Sep/13 07:26,13/Mar/19 23:18,21/Sep/13 13:51,6.10.0,,,,,,,,6.12.0,7.0.0-M1,,,wicket-extensions,,,0,,,,,,,,"With the introduction of the MinInputLength setting, the ShowListOnEmptyInput is not working anymore, unless you set MinInputLength to a negative value  (but then you can't use MinInputLength).

I think it's becuase 'wicket-autocomplete.js' MinInputLength is cheked in the pre-conditions, and when Input is empty, 'Input.length' is always less than  'MinInputLength' ",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,348947,,,2013-09-17 13:42:20.0,,,,,,0|i1o63b:,349245,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AutoCompleteTextField suggestions popup position is wrong when its container has scrollbar,WICKET-5343,12667491,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,bitstorm,bitstorm,bitstorm,08/Sep/13 20:08,16/Sep/13 12:42,13/Mar/19 23:18,16/Sep/13 12:28,,,,,,,,,6.11.0,7.0.0-M1,,,,,,0,,,,,,,,The position of suggestions popup is wrongly calculated if the container of the owner component has a scroll bar. ,,,,,,,,,,,,,,,,,,,,,,,,,08/Sep/13 20:09;bitstorm;autocomplete-test.zip;https://issues.apache.org/jira/secure/attachment/12602067/autocomplete-test.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-09-16 11:59:16.717,,,no_permission,,,,,,,,,,,,347428,,,Mon Sep 16 12:42:03 UTC 2013,,,,,,0|i1nwqn:,347727,,,,,,,,08/Sep/13 20:09;bitstorm;quickstart,08/Sep/13 20:11;bitstorm;Using getBoundingClientRect inside getPosition(obj) should fix the problem. I'm testing it.,16/Sep/13 11:59;mgrigorov;Andrea: I saw you pushed an improvement both in 6.x and master branches. Is there anything more to be done ?,"16/Sep/13 12:25;mgrigorov;I've tested the issue on all major browsers - Chrome 29, Firefox 23, Opera 12.16, IE 9 and Safari 5.1. The issue is fixed.","16/Sep/13 12:33;bitstorm;thank you! I've forgot to ask you to close it.

ps: can I be granted the right to close an issue?","16/Sep/13 12:42;mgrigorov;Yes, I've added you to the Jira ""Committers"" role, so you should be able.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaDoc for IColumn#getSortProperty() in misleading,WICKET-5348,12668253,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,betlista,betlista,12/Sep/13 13:31,16/Sep/13 11:54,13/Mar/19 23:18,16/Sep/13 11:54,6.10.0,,,,,,,,6.11.0,7.0.0-M1,,,,,,0,column,columns,properties,property,property-expression,sort,table,"JavaDoc for getSortProperty() in org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn<T, S> interface states:

""Returns the name of the property that this header sorts. If null is returned the header will be unsortable.""

According to this JavaDoc I'd expect that it should be String.

I assume that someone would like to use something other than String. But I think that at least for PropertyColumn it has to be bound to String, so change the:

public class PropertyColumn<T, S> extends AbstractColumn<T, S> implements IExportableColumn<T, S, Object>

to:

public class PropertyColumn<T> extends AbstractColumn<T, String> implements IExportableColumn<T, String, Object>

because referenced PropertyModel is not parameterized with S.

I also suggest to add PropertySortParam that extends SortParam<String> to framework.

And also IPropertyColumn<T> interface that extends IColumn<T, String>.

@param <T> for IColumn<T, S> is not described too.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-12 14:35:31.838,,,no_permission,,,,,,,,,,,,348187,,,Mon Sep 16 11:54:32 UTC 2013,,,,,,0|i1o1en:,348483,,,,,,,,"12/Sep/13 13:33;betlista;Maybe I had to split the ""bug"" to several bugs, but I feel those parts (wrong JavaDoc, PropertyColumn declaration and PropertySortParam) are closely related.",12/Sep/13 13:37;betlista;It's related to https://issues.apache.org/jira/browse/WICKET-4535,"12/Sep/13 14:35;svenmeier;There could be cases where the whole table uses a certain sort identifier:

    DataTable<Foo, SortIdentifier>

... and among other column implementations it uses PropertyColumns:

    new PropertyColumn<Foo, SortIdenfier>(Model.of(""Bar""), SortIdentifier.BAR, ""bar"");

Highly unlikely but possible.","12/Sep/13 15:01;betlista;I understand that this is some additional sorting parameter type. Now I understand it's meaning, so if I have some time I'll add patch for JavaDoc and later I'll contribute enahncement for IColumn hierarchy. Thanks","16/Sep/13 11:54;mgrigorov;I've improved a bit the javadoc by removing ""the name of"" for #getSortProperty() method.
Please attach a patch with further improvements when you have some. Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broadcast.EXACT does not notify Behaviors of target Component,WICKET-5339,12666687,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,sturmm,sturmm,03/Sep/13 12:56,06/Sep/13 07:49,13/Mar/19 23:18,06/Sep/13 07:33,,,,,,,,,6.11.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"As described in IRC I want to ""answer"" an event by sending an event back to events source using broadcast exact. But that answer should be handled by a Behavior on the component.

When using any other broadcast type behaviors will be notified too. But not when using exact. Since Behavior does not implement IEventSink I cannot address the behavior directly instead of the component. Even if that works I think it wont be a good practice.

I'm not sure if this is a bug, since it's a philosophic question if exact broadcast should include behaviors of a component. ",,,,,,,,,,,,,,,,,,,,,,,,,04/Sep/13 10:10;mgrigorov;broadcast-exact.patch;https://issues.apache.org/jira/secure/attachment/12601352/broadcast-exact.patch,04/Sep/13 09:31;mgrigorov;event_quickstart-working.tgz;https://issues.apache.org/jira/secure/attachment/12601337/event_quickstart-working.tgz,03/Sep/13 12:57;sturmm;event_quickstart.zip;https://issues.apache.org/jira/secure/attachment/12601149/event_quickstart.zip,,3.0,,,,,,,,,,,,,,,,,,,2013-09-04 09:31:57.229,,,no_permission,,,,,,,,,,,,346625,,,Fri Sep 06 07:46:46 UTC 2013,,,,,,0|i1nrsv:,346926,,,,,,,,"03/Sep/13 12:57;sturmm;Quick start that doesn""t work for me.","04/Sep/13 09:31;mgrigorov;Here is a modified quickstart that workarounds the problem

The main problem is that Behavior is I*ComponentAware*EventSink, and there is no Component to pass to #onEvent(Component, IEvent).
So I made your Behavior implementing IEventSink.",04/Sep/13 10:10;mgrigorov;A patch that allows to send events to specific IComponentAwareEventSink,"04/Sep/13 10:35;sturmm;The patch seems to be ok. I would like it more if my answering component must not know the behaviors implementation or class. Otherwise I could do: 

((Component)event.getSource()).getBehaviors(MagicBehavior.class).get( ? ).doMagicStuff(...)

So maybe Behavior needs to implement IEventSource so that I can send the answer directly to the Behavior which I will get from event.getSource() ... ?",04/Sep/13 10:38;sturmm;I can pass the Behavior - thats waiting for answer - as payload or attribute of my payload to ... ,06/Sep/13 07:33;mgrigorov;From now on if the sink is a Component instance then all its behaviors are notified as well.,"06/Sep/13 07:46;sturmm; Application.get().getFrameworkSettings().add(new IEventDispatcher() {
            @Override
            public void dispatchEvent(Object sink, IEvent<?> event, Component component) {
                if (sink instanceof Component && Broadcast.EXACT.equals(event.getType())){
                    Component componentSink = (Component) sink;
                    List<? extends Behavior> behaviors = componentSink.getBehaviors();
                    for (Behavior behavior : behaviors) {
                        behavior.onEvent(componentSink, event);
                    }
                }
            }
        });

Did it for me as workaround until release.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ComponentRenderer.renderComponent does not render markup for ListView,WICKET-5325,12665192,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,harmoniaa,harmoniaa,23/Aug/13 07:36,02/Sep/13 11:59,13/Mar/19 23:18,02/Sep/13 11:59,6.10.0,,,,,,,,6.11.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"ComponentRenderer.renderComponent does not return HTML markup for a ListView component, only wicket tags. Attaching a quickstart demonstrating the issue that will print the following output to console:

ListView markup with wicket tags stripped: null
Label markup with wicket tags stripped: Example
ListView markup with wicket tags included: <wicket:container wicket:id=""list""></wicket:container><wicket:container wicket:id=""list""></wicket:container><wicket:container wicket:id=""list""></wicket:container>
Label markup with wicket tags included: <wicket:container wicket:id=""text"">Example</wicket:container>",,,,,,,,,,,,,,,,,,,,,,,,,23/Aug/13 07:37;harmoniaa;myproject.tar.gz;https://issues.apache.org/jira/secure/attachment/12599587/myproject.tar.gz,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,345133,,,Fri Aug 23 07:37:34 UTC 2013,,,,,,0|i1nimf:,345434,,,,,,,,23/Aug/13 07:37;harmoniaa;Quickstart project,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket Atmosphere CouldNotLockPageException,WICKET-5316,12663597,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,papegaaij,guidoschmetz,guidoschmetz,14/Aug/13 08:56,14/Aug/13 13:04,13/Mar/19 23:18,14/Aug/13 13:04,6.9.1,,,,,,,,6.11.0,7.0.0-M1,,,wicket-atmosphere,,,0,,,,,,,,CouldNotLockPageException after 1 minute in case of posting from multiple threads.,,,,,,,,,,,,,,,,,,,,,,,,,14/Aug/13 08:58;guidoschmetz;wicket-atmosphere-locker.zip;https://issues.apache.org/jira/secure/attachment/12597927/wicket-atmosphere-locker.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-14 09:31:16.921,,,no_permission,,,,,,,,,,,,343598,,,Wed Aug 14 13:04:10 UTC 2013,,,,,,0|i1n96v:,343902,,,,,,,,14/Aug/13 08:58;guidoschmetz;Example test project,"14/Aug/13 09:31;papegaaij;Your quickstart is posting messages to the pages at a rate of 500 events per second (which crashes the chrome process btw). Processing of a single event takes a little over 2ms on my machine, which is quite fast, but not fast enough to keep up with the endless stream of events, causing starvation on some threads. This is triggering the page lock exceptions.","14/Aug/13 09:52;guidoschmetz;Also on a much lower rate the application will crash. Just try it. You sometimes have to wait a bit longer, but in the end it will crash. It's just not stable enough for a production environment.","14/Aug/13 10:10;dashorst;Critical is only for wicket-core functionality that blocks normal processing. Unsupported, experimental features never get a priority of anything higher than minor.",14/Aug/13 10:19;guidoschmetz;Thanks. I'll keep that in mind next time.,"14/Aug/13 11:56;papegaaij;Further testing shows that PageAccessSynchronizer is not always able to lock a page when multiple threads acquire and release locks at a very high rate. This is what happens:
thread B putIfAbsent(1) -> null
thread A putIfAbsent(2) -> 1
thread B remove(1)
thread B notifyAll(1)
thread A wait(1).......",14/Aug/13 13:04;papegaaij;The releasing issue is fixed by adding an additional check before waiting for the lock to be released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make ThrottleSettings#id default to the component's markupId,WICKET-5305,12662140,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,cmenzel,cmenzel,cmenzel,06/Aug/13 15:43,07/Aug/13 12:02,13/Mar/19 23:18,07/Aug/13 12:02,7.0.0-M1,,,,,,,,7.0.0-M1,,,,wicket,,,0,,,,,,,,"ThrottleSettings#id was until today not well documented. It came up a few times in the trainings and coachings I give and users were all confused about what it's for and why they have to explicitly set it each time.

I think that in most cases defaulting to a unique value should be sufficient unless you want to combine several events in one throttle.

I have a commit (not yet pushed) that changes AbstractDefaultAjaxBehavior (where the id is read and sent to the client) so if the id is null it will simply use the current component's markup id, which is guaranteed to be unique.

Any objections?",,,,,,,,,,,,,,,,,,,,,,,,,07/Aug/13 09:23;cmenzel;0001-WICKET-5305-make-ThrottleSettings-id-default-to-the-.patch;https://issues.apache.org/jira/secure/attachment/12596555/0001-WICKET-5305-make-ThrottleSettings-id-default-to-the-.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-07 07:09:35.858,,,no_permission,,,,,,,,,,,,342144,,,Wed Aug 07 12:02:05 UTC 2013,,,,,,0|i1n08n:,342449,,,,,,,,07/Aug/13 07:09;svenmeier;So ThrottlingSettings will get a constructor without the id argument?,"07/Aug/13 09:23;cmenzel;Yes, as shown in the patch which I just uploaded. This is the entire change I'm going to push if there are no flaws found :)","07/Aug/13 09:26;mgrigorov;+1

No need of the whitespace change in:
@@ -140,7 +140,7 @@ public abstract class AbstractDefaultAjaxBehavior extends AbstractAjaxBehavior
 		for (AjaxRequestTarget.IListener listener : ajaxRequestTargetListeners)
 		{
 			listener.updateAjaxAttributes(attributes);
-		}
+			}",07/Aug/13 10:01;cmenzel;All the whitespace changes are done by the eclipse autoformatter that is configured to use the default Wicket style. It seems that the class wasn't formatted entirely correctly.,"07/Aug/13 10:05;mgrigorov;OK. Then please use ""git add -p"" to separate the real change from the noise, i.e. commit formatting changes in separate commits. Thanks!",07/Aug/13 12:02;cmenzel;pushed the patch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MarkupCache ignores enforceReload flag,WICKET-5294,12660872,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,jesselong,jesselong,31/Jul/13 07:42,01/Aug/13 07:17,13/Mar/19 23:18,01/Aug/13 07:17,6.9.1,,,,,,,,6.10.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"MarkupCache ignores the enforceReload flag in the loadMarkupAndWatchForChanges() method. v6.9.1 lines 498 to 511 should be wrapped in an ""if (!enforceReload){ }"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,341061,,,2013-07-31 07:42:30.0,,,,,,0|i1mtmv:,341379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Tabindex overwritten in modal window for IE - Works in FF, Chrome",WICKET-5273,12657715,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,morpa,morpa,15/Jul/13 12:42,24/Jul/13 10:10,13/Mar/19 23:18,24/Jul/13 10:10,6.9.1,,,,,,,,6.10.0,7.0.0-M1,,,,,,0,,,,,,,,"Attribute tabindex gets overwritten in ModalDialog, when using IE 8,9,10.. It works fine in FF, Chrome.
This breaks chances of creating accessability by using tab.

See attachment for testproject, which works in ff,chrome, fails in ie 8,9,10.
1) Open modallink (lightbox)
2) use tabbutton - in ff, chrome you'll tab between closebutton and content, in ie this fails cause tabindex gets overwritten by -1. 

I suspect it's this codepart in modal.js that does it.

if (Wicket.Browser.isIE()) {
				this.disabledTabsRevertList = [];
				for (var j = 0; j < this.tabbableTags.length; j++) {
					var tagElements = doc.getElementsByTagName(this.tabbableTags[j]);
					for (var k = 0 ; k < tagElements.length; k++) {
						// if this is not an iframe window and the element is child of window content,
						// don't disable tab on it
						if (win.isIframe() === true || this.isParent(tagElements[k], win.content) === false) {
							var element = tagElements[k];
							element.hiddenTabIndex = element.tabIndex;
							element.tabIndex=""-1"";
							this.disabledTabsRevertList.push(element);
						}
					}
				}
			}

",,,,,,,,,,,,,,,,,,,,,,,,,15/Jul/13 12:43;morpa;tabindexinieoverwritten.zip;https://issues.apache.org/jira/secure/attachment/12592321/tabindexinieoverwritten.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-24 10:10:04.335,,,no_permission,,,,,,,,,,,,337935,,,Wed Jul 24 10:10:04 UTC 2013,,,,,,0|i1mae7:,338257,,,,,,,,"24/Jul/13 10:10;mgrigorov;Modified the check which tabbableTags to disable by allowing tabIndex in all elements in the Modal Window, not just in the 'content' part. That means now all tabbable elements in the 'caption' won't be disabled.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ComponentRenderer.renderComponent fails to render two components with different component IDs,WICKET-5268,12656862,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,harmoniaa,harmoniaa,09/Jul/13 13:32,11/Jul/13 10:03,13/Mar/19 23:18,11/Jul/13 10:03,6.9.0,,,,,,,,6.10.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"After WICKET-5232 was fixed, #renderComponent now accepts component with any component ID. However since the markup of the RenderPage is cached, after calling #renderComponent for one component it will fail for components having different component ID.

This could be fixed as I suggested in WICKET-5232: RenderPage could implement IMarkupCacheKeyProvider interface and return null in #getCacheKey.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,337085,,,2013-07-09 13:32:58.0,,,,,,0|i1m55z:,337408,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XmlAjaxResponse restores wrong response,WICKET-5269,12656865,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,svenmeier,svenmeier,09/Jul/13 14:00,09/Jul/13 14:08,13/Mar/19 23:18,09/Jul/13 14:08,6.9.0,7.0.0-M1,,,,,,,6.10.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"XmlAjaxResponse#writeComponent() erroneously sets the passed response into the requestCycle, although it *never* was the old (=original) response: 

@Override
protected void writeComponent(Response response, ...)
{
	...
	// Restore original response
	RequestCycle.get().setResponse(response);
}

AjaxRequestHandler#respond(...) restores the correct old response afterwards, but temporarily the current response of the RequestCycle is wrong.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,337088,,,Tue Jul 09 14:08:26 UTC 2013,,,,,,0|i1m56n:,337411,,,,,,,,09/Jul/13 14:08;svenmeier;the response is now restored where it was altered,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow configuring the resource used by ResourceStreamRequestHandler,WICKET-5256,12655118,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,pharazon,pharazon,27/Jun/13 11:01,27/Jun/13 11:31,13/Mar/19 23:18,27/Jun/13 11:31,1.5.10,,,,,,,,1.5.11,6.10.0,7.0.0-M1,,wicket,,,0,ResourceStreamResource,setTextEncoding,StringResourceStream,,,,,"During the migration from Wicket 1.4 to 1.5.10 I found out that the ResourceStreamResource.respond() does not set the ContentType charset if the resource is of type StringResourceStream. Even though the stream holds the charset, it is not set, although quite a few other header parameters are (well this is understandable because not all ResourceStreams are StringResourceStreams. Also, it is difficult to call the resource.setTextEncoding, because the current flow in resourceStreamRequestHandler.respond does not allow easy overriding of any smaller piece of respond than the whole method. The practical issue was to download a CSV file by clicking a button. I managed to fix the issue by copy/paste/Overriding the ResourceStreamRequestHandler.respond, but IMHO this is not nice:

    private void addCsvButton() {
        Form<?> form = new Form<Void>(""form"") {
            @Override
            protected void onSubmit() {
                final String fileName = getFileName(""csv"");
                TableCsvResourceFactory factory = new TableCsvResourceFactory();
                final IResourceStream resourceStream = factory.getResourceStream(tableModel.getObject());
                ResourceStreamRequestHandler resourceStreamRequestHandler = new ResourceStreamRequestHandler(
                        resourceStream) {
                    final ContentDisposition contentDisposition = ContentDisposition.ATTACHMENT;

                    @Override
                    public void respond(IRequestCycle requestCycle) {
                        Attributes attributes = new Attributes(requestCycle.getRequest(), requestCycle.getResponse());

                        ResourceStreamResource resource = new ResourceStreamResource(resourceStream);
                        resource.setFileName(fileName);
                        if (contentDisposition != null) {
                            resource.setContentDisposition(contentDisposition);
                        } else {
                            resource.setContentDisposition(Strings.isEmpty(fileName) ? ContentDisposition.INLINE
                                    : ContentDisposition.ATTACHMENT);
                        }

                        final Duration cacheDuration = getCacheDuration();
                        if (cacheDuration != null) {
                            resource.setCacheDuration(cacheDuration);
                        }
+                        resource.setTextEncoding(""UTF-8"");

                        resource.respond(attributes);
                    }
                };
                RequestCycle.get().scheduleRequestHandlerAfterCurrent(resourceStreamRequestHandler);
            }
        };
        form.setVisible(displayCsv);
        add(form);
    }

There are a couple of problems with the current implementation of ResourceStreamRequestHandler:
1) I didn't figure out yet any other way how to call the 
                        resource.setTextEncoding(""UTF-8"");
except by copy/pasting the whole ResourceStreamRequestHandler.respond() code to the Override. It would be nice, if there would be some cleaner hook to override some smaller part of this method, such as an empty default implementation of setTextEncoding() that would be always called but would not do anything for other types.

2) A second approach would be to create a StringResourceStreamRequestHandler extends ResourceStreamRequestHandler that would be otherwise the same, but would use IStringResource instead of IResource, and would also set the TextEncoding.

3) However, third, I didn't yet find any good way to get the encoding from the StringResourceStream itself, because the AbstractStringResourceStream has a protected getCharset(). This problem could be overcome by adding public version of getCharset() to StringResourceStream, or as I did, create a parallel subclass CharsetStringResourceStream that is a copy/paste from StringResourceStream but is non-final and has public getCharset(). After this you could dynamically set the text encoding in ResourceStreamRequestHandler.respond for example like this:

                        if (getResourceStream() instanceof CharsetStringResourceStream) {
                            resource.setTextEncoding(((CharsetStringResourceStream)getResourceStream()).getCharsetName());
                        }

Anyway, I think the usage of StringResourceStream with ResourceStreamRequestHandler should be improved somehow, at the moment I think it is a bit awkward to use.
","Ubuntu 12.04, Sun JDK 1.6.0_38 64bit",,,,,,,,,,,,,,,,,,,,,,,,27/Jun/13 11:14;mgrigorov;WICKET-5256.patch;https://issues.apache.org/jira/secure/attachment/12589879/WICKET-5256.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-27 11:14:20.628,,,no_permission,,,,,,,,,,,,335395,,,Thu Jun 27 11:31:08 UTC 2013,,,,,,0|i1lur3:,335719,,,,,,,,"27/Jun/13 11:02;pharazon;One addition: the practical issue is that in the HTTP header content-type you get only for example

 text/x-csv

and I would like to get
 text/x-csv; charset=UTF-8

","27/Jun/13 11:14;mgrigorov;Here is a possible improvement.
A new method #configure(ResourceStreamResource) is introduced.
This way you can do something like:

ResourceStreamRequestHandler rsrh = new ResourceStreamRequestHandler(...) {
  @Override
  protected void configure(ResourceStreamResource resource) 
  {
     super.configure(resource);
     resource.setXyz(...);
  }
}

Is this better ?",27/Jun/13 11:20;pharazon;Exposing public getCharsetName() in StringBufferResourceStream would also do.,"27/Jun/13 11:22;pharazon;Martin: Yes, I think that would be one good solution!",27/Jun/13 11:31;mgrigorov;The improvement is applied.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnChangeAjaxBehavior doesn't work with cut/paste done with mouse,WICKET-5249,12654482,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,kizer,kizer,24/Jun/13 12:15,24/Jun/13 12:20,13/Mar/19 23:18,24/Jun/13 12:20,6.8.0,,,,,,,,6.9.0,,,,wicket,,,0,ajax,jquery,OnChangeAjaxBehavior,wicket,,,,"Add OnChangeAjaxBehavior to a text-field. In chrome/firefox, we can cut and paste using just the mouse (right-click) and it fires an ajax-call each time. In IE, i doesn't fire except when we use keyboard. Ctrl+c/Ctrl+v works, but mouse right-click and cut/paste doesn't fire an ajax event.
This is extra noticable in our case, since we had to remove the onchange-event from OnChangeAjaxBehavior. (If textfield had focus, and user clicked an ajax-button, the onchange-event fired and stopped the ajax-button-click from firing. Most likely because we have implemented a veil on ajax-calls, so the user can't click anything on the page while the ajax-event is running.)
Workaround was to add the events cut and paste:
in updateAjaxAttributes: attributes.setEventNames(""inputchange paste cut"");

This WILL create issues if you don't throttle the ajax (we have 200 milliseconds throttling). Without throttling, it fires twice (might or might not be a problem).

A better way would be to make the inputchange-event work properly in IE, but I have no idea why it doesn't work....
","Windows 7, IE 10.",,,,,,,,,,,,,,,,,,,,,,,,24/Jun/13 12:15;kizer;Quickstart.zip;https://issues.apache.org/jira/secure/attachment/12589394/Quickstart.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-24 12:20:10.12,,,no_permission,,,,,,,,,,,,334759,,,Mon Jun 24 12:20:10 UTC 2013,,,,,,0|i1lqun:,335085,,,,,,,,24/Jun/13 12:15;kizer;quickstart demonstrating the problem (if you use IE),"24/Jun/13 12:20;mgrigorov;This is fixed last week with https://git-wip-us.apache.org/repos/asf/wicket/repo?p=wicket.git;a=commitdiff;h=2f0cd33240c649073c706a1c39c82f5dced86d7d

Please try with latest snapshot from 6.x",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wicket generates invalid HTML by expanding col tags,WICKET-5237,12653167,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,kmohrf,kmohrf,17/Jun/13 10:25,19/Jun/13 09:27,13/Mar/19 23:18,19/Jun/13 09:27,6.8.0,,,,,,,,6.9.0,7.0.0-M1,,,,,,0,html,,,,,,,"hi,

I just noticed that wicket expands col tags, even though the (x)html specifications forbids it.

take this markup as an example:

<table>
    <colgroup>
        <col width=""20%"" />
        <col width=""80%"" />
    </colgroup>
    <tbody>
        <tr>
            <td>I take a fifth of the available space</td>
            <td>I take four fifth of the available space</td>
        </tr>
    </tbody>
</table>

Instead of return this as-is, it get's converted to:

<table>
    <colgroup>
        <col width=""20%""></col>
        <col width=""80%""></col>
    </colgroup>
    <tbody>
        <tr>
            <td>I take a fifth of the available space</td>
            <td>I take four fifth of the available space</td>
        </tr>
    </tbody>
</table>

But the specifications mention that col tags must not have end tags. This may be related to WICKET-2765, as this seems to be the point when col was added to the OpenCloseTagExpander class. Note that it is ok to have a non closing col tag in html (self-closing in xhtml). It's all about generating a separated end tag.

This happens in wicket 6.8, but I guess it's relevant to all versions down to wicket 1.4.

Specs for reference:

http://www.w3.org/TR/1999/REC-html401-19991224/struct/tables.html#edef-COL
http://www.w3.org/TR/html-markup/col.html

Kind regards,

Konrad","Ubuntu 12.10, 3.5.0-32-generic #53-Ubuntu SMP Wed May 29 20:23:04 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
java version ""1.7.0_21""
Java(TM) SE Runtime Environment (build 1.7.0_21-b11)
Java HotSpot(TM) 64-Bit Server VM (build 23.21-b01, mixed mode)",,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,333490,,,2013-06-17 10:25:46.0,,,,,,0|i1lj27:,333818,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect signature of types which extend Comparable,WICKET-5182,12646384,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,ogalimov,ogalimov,07/May/13 09:54,27/May/13 17:57,13/Mar/19 23:18,27/May/13 17:57,6.7.0,,,,,,,,7.0.0-M1,,,,wicket,,,0,,,,,,,,"AbstractRangeValidator has the following Signature:

public abstract class AbstractRangeValidator<R extends Comparable<R> & Serializable, V extends Serializable> extends Behavior implements IValidator<V>

Because of this it cannot be used with DateMidnight as its Comparable implementation is in a base class.

I think the correct signature should be:

public abstract class AbstractRangeValidator<R extends Comparable<? super R> & Serializable, V extends Serializable> extends Behavior implements IValidator<V>

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,326742,,,2013-05-07 09:54:14.0,,,,,,0|i1kdan:,327087,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Session is created unnecessarily,WICKET-5191,12647944,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,svenmeier,mzhavzharov,mzhavzharov,16/May/13 11:55,16/May/13 14:35,13/Mar/19 23:18,16/May/13 14:19,6.6.0,,,,,,,,1.5.11,6.8.0,7.0.0-M1,,wicket,,,0,,,,,,,,"PageRenderer#getSessionId() should check for existence of a Session, otherwise session could creates multiple types. 
For example if we mount home page, and starts an app, it will creates session 2 times, because of redirect, I think.",,,,,,,,,,,,,,,,,,,,,,,,,16/May/13 12:24;mzhavzharov;multiple_session.zip;https://issues.apache.org/jira/secure/attachment/12583472/multiple_session.zip,16/May/13 13:58;mzhavzharov;multiple_session_wicket_670.zip;https://issues.apache.org/jira/secure/attachment/12583481/multiple_session_wicket_670.zip,,,2.0,,,,,,,,,,,,,,,,,,,2013-05-16 12:01:26.578,,,no_permission,,,,,,,,,,,,328300,,,Thu May 16 14:24:49 UTC 2013,,,,,,0|i1kn6n:,328644,,,,,,,,"16/May/13 12:01;mgrigorov;Please attach a quickstart.
#getSessionId() is called when the response is stored (REDIRECT_TO_BUFFER strategy). That means the page is stateful and there must be a bound session.","16/May/13 12:24;mzhavzharov;When I created a quickstart, the StackTrace of app.newSession() method, have changed and do not calls getSessionId() method now.
Now for all session creation it is:
1)com.alee.WicketApplication.newSession(WicketApplication.java:37)
2)org.apache.wicket.Application.fetchCreateAndSetSession(Application.java:1557)
3)org.apache.wicket.Session.get(Session.java:152)
4)org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData.get(RestartResponseAtInterceptPageException.java:146)
5)org.apache.wicket.RestartResponseAtInterceptPageException$1.matchedData(RestartResponseAtInterceptPageException.java:211)
6)org.apache.wicket.RestartResponseAtInterceptPageException$1.getCompatibilityScore(RestartResponseAtInterceptPageException.java:179)
7)org.apache.wicket.request.mapper.CompoundRequestMapper.mapRequest(CompoundRequestMapper.java:134)
8)org.apache.wicket.request.cycle.RequestCycle.resolveRequestHandler(RequestCycle.java:182)
9)org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:207)
10)org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:281)
11)org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:188)
12)org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:245)
13)org.apache.catalina.core.ApplicationFilterChain.internalDoFilter
...","16/May/13 13:16;svenmeier;Your quickstart runs with Wicket 6.0.0, in that version an unnecessary temporary Session was created by the intercept request mapper. This was mitigated with Wicket 6.6.0.

Additionally each redirect causes a new temporary session to be created.",16/May/13 13:26;bitstorm;In addition your home page is stateless and this kind of page creates a temporary session each time is requested (if user doesn't already own a permanent session).,"16/May/13 13:58;mzhavzharov;Sorry for my mistakes.
Now I created QuickStart with wicket 6.7.0, and make HomePage statefull, but problem is the same. When page loads, session creates 2 times.
StackTrace is different then previous:
1)com.alee.WicketApplication.newSession(WicketApplication.java:38)
2)org.apache.wicket.Application.fetchCreateAndSetSession(Application.java:1557)
3)org.apache.wicket.Session.get(Session.java:168)
4)org.apache.wicket.request.handler.render.PageRenderer.getSessionId(PageRenderer.java:101)
5)org.apache.wicket.request.handler.render.WebPageRenderer.getAndRemoveBufferedResponse(WebPageRenderer.java:79)
6)org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:168)
7)org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:165)
8)org.apache.wicket.request.cycle.RequestCycle","16/May/13 14:09;mzhavzharov;Also, maybe that I use Glassfish 3.0.1 as a server can cause such problems. Or I missing something else?","16/May/13 14:18;svenmeier;I've change PageRenderer to check for the existence of the session. This will spare you the creation of one Session before a redirect.

Apart from that it's quite normal for Wicket to create temporary sessions. You should restructure your application to make the creation of a session a cheap operation.",16/May/13 14:19;svenmeier;Session existence is now checked.,"16/May/13 14:22;mgrigorov;Any reason why master branch has not be updated with this improvement ?

(I still have doubts in the improvement though).","16/May/13 14:24;svenmeier;Master is updated too now. To repeat my explanation:

In the quickstart there is no bound session.

PageRenderer just checks whether there is a buffered response lingering around, but it isn't.
Note the warning logged in that case:

            logger.warn(""The Buffered response should be handled by BufferedResponseRequestHandler"");

Sven ",,,,,,,,,,,,,,,,,,,,,,,,,,
Implementing markup loading by extending ResourceStreamLocator produces errors with inherited markup,WICKET-5163,12645339,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,mazabel,mazabel,29/Apr/13 23:55,15/May/13 08:30,13/Mar/19 23:18,15/May/13 08:30,6.7.0,,,,,,,,6.8.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"According to Wicket wiki it should be possible to implement application-specific markup loading by extending ResourceStreamLocator (https://cwiki.apache.org/WICKET/control-where-html-files-are-loaded-from.html). The method ResourceStreamLocator#locate returns an IResourceStream. Therefore it should be possible to return a custom FileResourceStream/StringResourceStream/...

However, whenResourceStreamLocator#locate returns anything else than the standard implementation this works only as long as the page inherits directly from WebPage.

When any markup inherited from another page is loaded, the following stack trace is printed:

ERROR - MarkupFactory              - Markup not found: Base markup of inherited markup not found. Component class: my.package.HomePage. Enable debug messages for org.apache.wicket.core.util.resource.locator.ResourceStreamLocator to get a list of all filenames tried.
org.apache.wicket.markup.MarkupNotFoundException: Base markup of inherited markup not found. Component class: my.package.HomePage. Enable debug messages for org.apache.wicket.core.util.resource.locator.ResourceStreamLocator to get a list of all filenames tried.
        at org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader.loadMarkup(InheritedMarkupMarkupLoader.java:71)
        at org.apache.wicket.markup.loader.DefaultMarkupLoader.loadMarkup(DefaultMarkupLoader.java:52)
        at org.apache.wicket.markup.MarkupFactory.loadMarkup(MarkupFactory.java:412)
        at org.apache.wicket.markup.MarkupCache.loadMarkup(MarkupCache.java:448)
        ...

ERROR - DefaultExceptionMapper     - Unexpected error occurred
org.apache.wicket.markup.MarkupNotFoundException: Can not determine Markup. Component is not yet connected to a parent. [Page class = my.package.HomePage, id = 0, render count = 1]
        at org.apache.wicket.Component.getMarkup(Component.java:736)
        at org.apache.wicket.Component.internalRender(Component.java:2335)
        at org.apache.wicket.Component.render(Component.java:2298)
        at org.apache.wicket.Page.renderPage(Page.java:1010)
        at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:116)
        ...

The attached source shows this issue. HomePage is loaded without any problem. Clicking the link to view InheritingPage makes the error occur. When exactly the same html code is loaded from the standard file location there is no problem at all.",,,,,,,,,,,,,,,,,,,,,,,,,29/Apr/13 23:55;mazabel;inheritanceandmarkuploading.zip;https://issues.apache.org/jira/secure/attachment/12581075/inheritanceandmarkuploading.zip,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,325701,,,2013-04-29 23:55:03.0,,,,,,0|i1k6vr:,326046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unknown tag name with Wicket namespace: 'panel',WICKET-5187,12647479,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,andyvdh,andyvdh,14/May/13 10:07,14/May/13 11:53,13/Mar/19 23:18,14/May/13 11:53,,,,,,,,,6.8.0,7.0.0-M1,,,,,,0,,,,,,,,"If you create a non-panel component with PanelMarkupSourcingStrategy(true), and provide the html:

<!doctype html>
<html xmlns:wicket=""http://wicket.apache.org"">
  <wicket:panel>
  	// MY CODE
  </wicket:panel>
</html>

You get an error: ""Unknown tag name with Wicket namespace: 'panel'""

In org.apache.wicket.markup.html.panel.Panel the static code ""WicketTagIdentifier.registerWellKnownTagName(PANEL);"" will register wicket:panel, 
so you only get this if you add the non-panel component before your first panel. 



",,,,,,,,,,,,,,,,,,,,,,,,,14/May/13 11:01;andyvdh;myproject.zip;https://issues.apache.org/jira/secure/attachment/12583108/myproject.zip,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-14 10:19:05.178,,,no_permission,,,,,,,,,,,,327835,,,Tue May 14 11:53:17 UTC 2013,,,,,,0|i1kkbb:,328179,,,,,,,,"14/May/13 10:19;mgrigorov;As discussed in the mailing lists this problem should not happen with the current code.
Please provide a quickstart so we can see what breaks.","14/May/13 10:51;andyvdh;If I load a real Panel before I load my non-panel component (with PanelMarkupSourcingStrategy), it works correctly.
This can be solved by registering the tagname at construction time in AssociatedMarkupSourcingStrategy. 

I'll provide a quickstart",14/May/13 11:01;andyvdh;This is the quickstart,14/May/13 11:53;mgrigorov;Moved the registration to the respective MarkupSourcingStrategies - or Panel and Border.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringResourceModel doesn't detach model in some cases,WICKET-5176,12645918,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,damien.hollis,damien.hollis,03/May/13 04:06,13/May/13 15:19,13/Mar/19 23:18,13/May/13 15:19,,,,,,,,,6.8.0,7.0.0-M1,,,,,,0,,,,,,,,"We have come across an issue with StringResourceModel not detaching the model it holds under a certain condition.  The problem is the case where the StringResourceModel is created but it is not used - for example when it is on a tab that is not displayed.

StringResourceModel is a subclass of LoadableDetachableModel and it simply implements onDetach(), letting the superclass decide whether it is attached or not. The problem is that when StringResourceModel is created, LoadableDetachableModel.attached will be false.  If the StringResourceModel is never read (i.e. getObject() is not called) the LoadableDetachableModel will not be marked as attached and when detach() is called, onDetach() will not be called.  Therefore StringResourceModel will not call detach() on the model that it holds.",,,,,,,,,,,,,,,,,,,,,,,,,03/May/13 04:07;damien.hollis;Main.java;https://issues.apache.org/jira/secure/attachment/12581658/Main.java,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-13 15:19:04.933,,,no_permission,,,,,,,,,,,,326277,,,Mon May 13 15:19:04 UTC 2013,,,,,,0|i1kafj:,326622,,,,,,,,03/May/13 04:07;damien.hollis;Attached is a very small test program that shows the issue.  ,"13/May/13 15:19;mgrigorov;From now on StringResourceModel detaches its wrappedModel, defaultValue and parameters in #detach().
Custom needs should be done in #onDetach() if needed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[quickstart] archetype not found for 6.8-SNAPSHOT and the stable version 6.7 is not in the drop list,WICKET-5156,12644467,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,duongphuhiep,duongphuhiep,24/Apr/13 22:51,25/Apr/13 05:52,13/Mar/19 23:18,25/Apr/13 05:52,6.7.0,6.8.0,,,,,,,,,,,site,,,0,documentation,maven,,,,,,"use Quick Start page to generate the maven command for 6.8-SNAPSHOT 
1) run the maven => archetype not found
2) I wanted to change to the stable version (6.7) => it is not in the drop list",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-25 05:52:44.962,,,no_permission,,,,,,,,,,,,324834,,,Thu Apr 25 05:52:44 UTC 2013,,,,,,0|i1k1jj:,325180,,,,,,,,"25/Apr/13 05:52;mgrigorov;Fixed.
Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IE8 error in wicket-date.js when used in a modalwindow,WICKET-5125,12639911,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,ageery,ageery,30/Mar/13 03:26,08/Apr/13 21:15,13/Mar/19 23:18,08/Apr/13 21:15,6.5.0,,,,,,,,6.7.0,,,,wicket-datetime,,,0,,,,,,,,"Using the DatePicker in a ModalWindow, I get the error below after using the calendar widget and closing the modal.  The widget works fine for me; it's simply throwing a JS error in IE8 (displayed in the
lower lefthand corner of the browser).  I don't see the error in other browsers.

The problematic line in wicket-date.js is this one:

YAHOO.wicket[cfg.dpJs].hide();

I can avoid the error simply by adding a condition to the if-statement that is wrapped around the hide method to check that YAHOO.wicket[cfg.dpJs] is not null:

if (... && YAHOO.wicket[cfg.dpJs]) ...

I'm guessing that this is related to the bug fix for https://issues.apache.org/jira/browse/WICKET-4975 -- perhaps the widget is getting destroyed in IE before it can be hidden?

========================================

Webpage error details

User Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2;
Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR
3.0.4506.2152; .NET CLR 3.5.30729)
Timestamp: Fri, 29 Mar 2013 17:54:46 UTC

Message: 'YAHOO.wicket[...]' is null or not an object
Line: 308
Char: 6
Code: 0
URI: http://127.0.0.1:8080/test/wicket/resource/org.apache.wicket.extensions.yui.calendar.DatePicker/wicket-date-ver-1359131272000.js
",NA,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,320380,,,2013-03-30 03:26:30.0,,,,,,0|i1ja1r:,320721,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CheckingObjectOutputStream#check(Object) swallows Exception without logging the cause,WICKET-5136,12641327,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Minor,Fixed,mgrigorov,pparson,pparson,08/Apr/13 07:31,08/Apr/13 10:06,13/Mar/19 23:18,08/Apr/13 10:06,6.5.0,,,,,,,,6.7.0,,,,wicket,,,0,,,,,,,,"A warning message is sent to log when an exception occurs during checking, but it does not include information about the exception itself.

Patch: pass Exception object to log.warn",,,,,,,,,,,,,,,,,,,,,,,,,08/Apr/13 07:33;pparson;CheckingObjectOutputStream_check_pass_exception_to_log_warn.patch;https://issues.apache.org/jira/secure/attachment/12577497/CheckingObjectOutputStream_check_pass_exception_to_log_warn.patch,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,321743,,,2013-04-08 07:31:45.0,,,,,,0|i1jih3:,322088,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect Javadoc: Refering to specific page in Application properties file is not possible,WICKET-6610,13195904,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,svenmeier,StanB123,StanB123,02/Nov/18 14:18,04/Nov/18 19:45,13/Mar/19 23:18,04/Nov/18 19:45,8.0.0,8.1.0,,,,,,,8.2.0,9.0.0,,,wicket-core,,,0,,,,,,,,"I posted [a question about this on Stackoverflow|https://stackoverflow.com/questions/53119449/refering-to-a-specific-page-in-wicket-i18n-properties-file] and was asked by a Wicket contributor to file the question as a bug. It is not actually a bug in Wicket itself, it appears the Javadoc documentation is wrong.

Please refer to the Stackoverflow question for more detail, I intend to keep this short.

According to the Javadoc of ComponentStringResourceLoader the lookup order of resources is as given below:

{{page1.properties => form1.input1.Required}}
 {{page1.properties => Required}}
 {{form1.properties => input1.Required}}
 {{form1.properties => Required}}
 {{input1.properties => Required}}
 {{myApplication.properties => *page1*.form1.input1.Required}}
 {{myApplication.properties => Required}}

However, the *page1* part on the second to last line seems not to be possible. Thus the Javadoc is incorrect.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-04 19:43:59.64,,,no_permission,,,https://stackoverflow.com/questions/53119449/refering-to-a-specific-page-in-wicket-i18n-properties-file,,,,,,,,,9223372036854775807,,,Sun Nov 04 19:45:37 UTC 2018,,,,,,0|s002fc:,9223372036854775807,,,,,,,,"04/Nov/18 19:43;jira-bot;Commit 17c092e22fd8b5cd44aa17c2457d25c1e0f0dd77 in wicket's branch refs/heads/wicket-8.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=17c092e ]

WICKET-6610 corrected javadoc

for resource lookup
","04/Nov/18 19:45;jira-bot;Commit 1d6bb4ec509db7fdb55b308778b6cd00903c841a in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1d6bb4e ]

WICKET-6610 corrected javadoc

for resource lookup
","04/Nov/18 19:45;svenmeier;Thanks, I've corrected the JavaDoc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Exception when ""identifier|code"" javascript is not start on PrependJavaScript",WICKET-6489,13115569,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,mgrigorov,dutrieux,dutrieux,02/Nov/17 09:00,06/Feb/18 12:52,13/Mar/19 23:18,30/Dec/17 22:10,7.9.0,,,,,,,,7.10.0,8.0.0-M9,,,wicket,,,0,,,,,,,,"I use the functionnality of prependJavaScript to replace a composant with animation, but I have I a problem when I have two functions (on difference composants), one with normal syntax like this :

{code:java}
target.prependJavaScript(""$('"" + c.getMarkupId() + ""').selectpicker('destroy')"");
{code}

and I other one with special syntax for animation :

{code:java}
target.prependJavaScript(String.format(""notify|var c=$('#%s.collapse');if(c.length){c.on('hidden.bs.collapse',function(){notify();});c.collapse('hide');}else{notify();}"", c.getMarkupId()));
{code}

I get a error when wicket evaluate the javascript :


{code:java}
ERROR: Wicket.Ajax.Call.processEvaluation: Exception evaluating javascript: SyntaxError: expected expression, got keyword 'var', text: (function(){$('#var1').selectpicker('destroy');})();(function(){notify|var c=$('#var2.collapse');if(c.length){c.on('hidden.bs.collapse',function(){notify();});c.collapse('hide');}else{notify();}})();
{code}

The problem is that the regexp ""scriptWithIdentifierR"" tests that the javascript is in form of *start with* ""identifier|code"" or my javascript don't start with ""identifier|code"" because is :

{code:javascript}
(function(){$('#var1').selectpicker('destroy');})();(function(){notify|var c=$('#var2.collapse');if(c.length){c.on('hidden.bs.collapse',function(){notify();});c.collapse('hide');}else{notify();}})();
{code}

There is 2 functions : the first is a normal function but the second is ""identifier|code"" function.

If I change the var ""scriptWithIdentifierR"" (https://tinyurl.com/y8r24b5m) to :

{code:Java}
new RegExp(""\\(function\\(\\)\\{([a-zA-Z_]\\w*)\\|((.|\\n)*)?\\}\\)\\(\\);$"");
{code}

without the ^ of the first caractere that work nicely.
",Windows 7 x64,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-30 22:09:31.431,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Dec 30 22:09:43 UTC 2017,,,,,,0|i3maw7:,9223372036854775807,,,,,,,,"30/Dec/17 22:09;jira-bot;Commit bce8b05bcf34027ea11ac2db0f0acecf4d317939 in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=bce8b05 ]

WICKET-6489 Exception when ""identifier|code"" javascript is not start on PrependJavaScript
","30/Dec/17 22:09;jira-bot;Commit 588408a19413649e693c9fc57c69aba09036b2d0 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=588408a ]

WICKET-6489 Exception when ""identifier|code"" javascript is not start on PrependJavaScript
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SignOutPage_ru.html is missing,WICKET-6311,13037066,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,mgrigorov,solomax,solomax,23/Jan/17 14:59,26/Jan/17 01:15,13/Mar/19 23:18,25/Jan/17 20:50,7.6.0,,,,,,,,7.7.0,8.0.0-M4,,,wicket-auth-roles,,,0,,,,,,,,"SignInPage_ru.html present
SignOutPage_ru.html is missing",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-01-23 15:11:12.91,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jan 26 01:15:37 UTC 2017,,,,,,0|i392uv:,9223372036854775807,,,,,,,,"23/Jan/17 15:11;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/wicket/pull/206

    WICKET-6311 Russian sign out page is added

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/solomax/wicket master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/206.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #206
    
----
commit ef66df872de4314b524b7e83943113f5c23642a7
Author: Maxim Solodovnik <solomax666@gmail.com>
Date:   2017-01-23T15:09:25Z

    Russian sign out page is added

----
","23/Jan/17 15:11;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/wicket/pull/207

    WICKET-6311 Russian sign out page is added

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/solomax/wicket wicket-7.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/wicket/pull/207.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #207
    
----

----
","25/Jan/17 20:45;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/wicket/pull/206
","25/Jan/17 20:50;jira-bot;Commit c579ba1c23881900bf179b46b49d2146d5f85216 in wicket's branch refs/heads/wicket-7.x from [~solomax]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=c579ba1 ]

WICKET-6311 Russian sign out page is added
",25/Jan/17 20:50;mgrigorov;Thanks!,"25/Jan/17 20:52;githubbot;Github user martin-g commented on the issue:

    https://github.com/apache/wicket/pull/207
  
    I've amended the commit to add 'WICKET-6311' in the message and now the auto-close won't work.
    @solomax Please close this PR! Thanks!
","26/Jan/17 01:15;githubbot;Github user solomax closed the pull request at:

    https://github.com/apache/wicket/pull/207
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
10.6 Generating structured and clear URLs - Wrong reference to URL Encryption,WICKET-6205,12990166,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,bitstorm,jan.luehr@anderscore.com,jan.luehr@anderscore.com,17/Jul/16 08:52,18/Jul/16 10:17,13/Mar/19 23:18,18/Jul/16 10:17,,,,,,,,,,,,,guide,,,0,,,,,,,,"Is: 
Qutoing 10.6: ""Paragraph 21.4 will provide a more detailed description of how Wicket encrypts page URLs and we will see how to use stronger ciphers. ""

Should:
- It is in paragraph 22.4 (see) https://ci.apache.org/projects/wicket/guide/7.x/guide/security.html
- Is it possible to just link the paragraph in case it gets moved again?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-17 20:01:32.812,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sun Jul 17 21:38:04 UTC 2016,,,,,,0|i313j3:,9223372036854775807,,,,,,,,"17/Jul/16 20:01;bitstorm;Hi,

paragraphs can be linked using the following syntax:

{code}
[""Security with Wicket""|guide:security]
{code}

after the prefix guide: we can specify the name of the paragraph we want to link in a number-indipendent way. The documentation engine will warn you if any links to sections in your guide break.

PS: thanks for your doc revision. ","17/Jul/16 20:02;jira-bot;Commit 0ff4617437948f7eaabc6fc937af5b745ccc5aba in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0ff4617 ]

WICKET-6205 10.6 Generating structured and clear URLs - Wrong reference
to URL Encryption","17/Jul/16 21:38;jira-bot;Commit 3ce569d5d890577e5f0c8c92f064492c67f3268f in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3ce569d ]

WICKET-6205 10.6 Generating structured and clear URLs - Wrong reference
to URL Encryption",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Guide: 26.1 Page storing, section HttpSessionDataStore - example code is not correct",WICKET-6202,12989808,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,mgrigorov,jan.luehr@anderscore.com,jan.luehr@anderscore.com,15/Jul/16 14:14,16/Jul/16 08:46,13/Mar/19 23:18,15/Jul/16 17:39,7.3.0,,,,,,,,6.24.0,7.4.0,8.0.0-M2,,guide,,,0,,,,,,,,"Is:
The example does not compile
- new DefaultPageManagerProvider() does not exist. The application is needed as an attribute.
- pageManagerContext is not visible. A getter must be used.

Proposal / working example:
{code:title=Example.java|borderStyle=solid}
@Override
public void init(){
	super.init();
	setPageManagerProvider(new DefaultPageManagerProvider(this){
		@Override
		protected IDataStore newDataStore() {
			return new HttpSessionDataStore(getPageManagerContext(), new PageNumberEvictionStrategy(20));
		}
	});
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-15 17:37:41.779,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Sat Jul 16 08:46:40 UTC 2016,,,,,,0|i311bj:,9223372036854775807,,,,,,,,"15/Jul/16 17:37;jira-bot;Commit 660bc37f140a930b9eeb5448dbf41e1203d1f145 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=660bc37 ]

WICKET-6202 Guide: 26.1 Page storing, section HttpSessionDataStore - example code is not correct
","15/Jul/16 17:38;jira-bot;Commit ae0eeaedd536d876a01c923ee3f8f98df0d11a4c in wicket's branch refs/heads/wicket-7.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ae0eeae ]

WICKET-6202 Guide: 26.1 Page storing, section HttpSessionDataStore - example code is not correct
","15/Jul/16 17:38;jira-bot;Commit 018b78f580c1cae79f3a26982d43ae4e387fb578 in wicket's branch refs/heads/wicket-6.x from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=018b78f ]

WICKET-6202 Guide: 26.1 Page storing, section HttpSessionDataStore - example code is not correct
",15/Jul/16 17:39;mgrigorov;Thank you!,"16/Jul/16 08:46;jira-bot;Commit a361d2f406fce748afc81ce109894f42310f2b2c in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=a361d2f ]

WICKET-6202 Guide: 26.1 Page storing, section HttpSessionDataStore - example code is not correct
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update Guide: Pagemaps are gone,WICKET-6199,12988330,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,bitstorm,jan.luehr@anderscore.com,jan.luehr@anderscore.com,11/Jul/16 15:29,13/Jul/16 22:29,13/Mar/19 23:18,13/Jul/16 22:29,7.3.0,,,,,,,,,,,,guide,,,0,,,,,,,,"Is - The Guide says: 
"" When storing information in fields you should consider that the information is serializable, because the pages are stored in Wicket's page map. By default the page map stores the pages on the hard disk.""

But: Page Maps are gone since 1.5 - this info is confusing.
http://apache-wicket.1842946.n4.nabble.com/1-5-Page-Maps-td2998780.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-12 19:41:43.392,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Jul 13 22:29:10 UTC 2016,,,,,,0|i30sov:,9223372036854775807,,,,,,,,"12/Jul/16 19:41;jira-bot;Commit 1dac2e866cd26156e18726718bfd76f009943046 in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=1dac2e8 ]

WICKET-6199 Update Guide: Pagemaps are gone","12/Jul/16 20:59;jira-bot;Commit 556aad309c872472feef282466bf655c0d29714f in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=556aad3 ]

WICKET-6199 Update Guide: Pagemaps are gone","12/Jul/16 21:16;jira-bot;Commit 159da61823b83bbfcce3665c7916e05447cc3a73 in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=159da61 ]

WICKET-6199 Update Guide: Pagemaps are gone","12/Jul/16 21:34;jan.luehr@anderscore.com;Hello,

thanks! 
Btw. Are you sure about the fix? It looks like the second sentence ""By default the page map stores the pages on the hard disk."" is still there.

Greetz, Jan",13/Jul/16 07:31;bitstorm;Yep! Thank you! Time for a text-search :-).,"13/Jul/16 19:03;jira-bot;Commit b9bd664535baf4a735fe533b08c8b59762900cff in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=b9bd664 ]

WICKET-6199 Update Guide: Pagemaps are gone","13/Jul/16 22:03;jira-bot;Commit fb9c65df3069567943251a22c4519757c8f0ef2f in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=fb9c65d ]

WICKET-6199 Update Guide: Pagemaps are gone","13/Jul/16 22:04;jira-bot;Commit 0cde96d53910b1b4c5eed229a3b78b3b63338cc1 in wicket's branch refs/heads/wicket-7.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0cde96d ]

WICKET-6199 Update Guide: Pagemaps are gone",13/Jul/16 22:29;bitstorm;I think there are no more reference to page map. Thank you!,,,,,,,,,,,,,,,,,,,,,,,,,,,
German Translation for EqualInputValidator wrong,WICKET-6048,12916927,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,svenmeier,bertra,bertra,30/Nov/15 10:39,01/Dec/15 11:51,13/Mar/19 23:18,30/Nov/15 13:16,7.0.0,,,,,,,,6.22.0,7.2.0,8.0.0-M1,,wicket,,,0,,,,,,,,"The german translation for EqualInputValidator contains to many 'Label' words:

english: EqualInputValidator='${input0}' from ${label0} and '${input1}' from ${label1} must be equal.

german: 
 EqualInputValidator='${input0}' vom Label ${label0} und '${input1}' vom Label ${label1} m\u00fcssen gleich sein.

it should be 
 EqualInputValidator='${input0}' vom ${label0} und '${input1}' vom  ${label1} m\u00fcssen gleich sein.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-30 10:57:08.871,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Tue Dec 01 11:51:21 UTC 2015,,,,,,0|i2p273:,9223372036854775807,,,,,,,,"30/Nov/15 10:57;svenmeier;Sollte das nicht ""von"" heißen:

{code}
'${input0}' von ${label0} und '${input1}' von ${label1} m\u00fcssen gleich sein.
{code}

oder besser ""für"" (in der englischen Ressource ist es ""from"") ?",30/Nov/15 13:05;bertra;das ist sicherlich korrekt. So genau habe ich das gar nicht betrachtet. Unserem Tester war nur das zusätzliche 'Label' aufgefallen im Deutschen,"30/Nov/15 13:10;jira-bot;Commit 3b91968f88abb67519047986caba92c500ca907a in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=3b91968 ]

WICKET-6048 german translation for EqualInputValidator fix
","30/Nov/15 13:12;jira-bot;Commit 5b1dd696a19dd868efb980a7f0889db97b472f18 in wicket's branch refs/heads/wicket-7.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=5b1dd69 ]

WICKET-6048 german translation for EqualInputValidator fix
","30/Nov/15 13:13;jira-bot;Commit 45293e1d6efcc95b73212318aef4693e974f0a39 in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=45293e1 ]

WICKET-6048 german translation for EqualInputValidator fix
","30/Nov/15 13:16;svenmeier;Removed superfluous ""Label"" and changed preposition to ""für"".

Danke!","01/Dec/15 11:51;jira-bot;Commit e9f0a9d7905cbc10ae4c67d4809e7143663dee8b in wicket's branch refs/heads/lambdas from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=e9f0a9d ]

WICKET-6048 german translation for EqualInputValidator fix
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dead Links for Wicket User Guide,WICKET-5949,12844121,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,bitstorm,slouahchi,slouahchi,10/Jul/15 10:58,11/Jul/15 17:41,13/Mar/19 23:18,11/Jul/15 17:41,,,,,,,,,,,,,site,,,0,,,,,,,,"On 'https://wicket.apache.org/learn/' the Wicket User Guide Links are dead.
They are pointing to 

HTML | https://wicket.apache.org/guide/guide/index.html
HTML (single page) https://wicket.apache.org/guide/guide/single.html

The only working URI is under 
https://ci.apache.org/projects/wicket/guide/6.x
and
https://ci.apache.org/projects/wicket/guide/7.x

Kind regards
Smail",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,9223372036854775807,,,2015-07-10 10:58:00.0,,,,,,0|i2h3fb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wicket-examples DataTablePage is broken,WICKET-5925,12838889,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,svenmeier,svenmeier,svenmeier,18/Jun/15 18:39,18/Jun/15 18:51,13/Mar/19 23:18,18/Jun/15 18:51,6.20.0,,,,,,,,6.21.0,,,,wicket-examples,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-18 18:51:04.779,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Thu Jun 18 18:51:04 UTC 2015,,,,,,0|i2g84f:,9223372036854775807,,,,,,,,"18/Jun/15 18:51;jira-bot;Commit edcbd4e849378a5aba9ee2d5e4f954bce904af52 in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=edcbd4e ]

WICKET-5925 removed code left from WICKET-1069
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wicket-event-jquery.js: Wicket.Browser.isIE11() does not return boolean,WICKET-5870,12787392,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,svenmeier,xomit,xomit,01/Apr/15 16:24,04/Jun/15 08:46,13/Mar/19 23:18,01/Apr/15 19:54,7.0.0-M5,,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"In wicket-event-jquery.js starting with Line 115 the method isIE11 does not return a boolean.

Current implementation:

var isTrident = userAgent.indexOf(""Trident"");
var is11 = userAgent.indexOf(""rv:11"");

Fix:

var isTrident = userAgent.indexOf(""Trident"") > -1;
var is11 = userAgent.indexOf(""rv:11"") > -1;


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-01 19:52:55.329,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed Apr 01 19:57:05 UTC 2015,,,,,,0|i27ni7:,9223372036854775807,,,,,,,,"01/Apr/15 19:52;jira-bot;Commit 22d7c6e98bf95234f6c054e18621011d7a818cae in wicket's branch refs/heads/wicket-6.x from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=22d7c6e ]

WICKET-5870 corrected IE11 detection
","01/Apr/15 19:54;jira-bot;Commit 97c5eb8f8c655e9600103b2e2dd7a4cfee57484d in wicket's branch refs/heads/master from [~svenmeier]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=97c5eb8 ]

WICKET-5870 corrected IE11 detection
",01/Apr/15 19:54;svenmeier;Thanks!,01/Apr/15 19:57;xomit;Well thank you and all the other devs for Wicket! :-),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The application can not find  /META-INF/wicket/**.properties on Windows systems,WICKET-5915,12832992,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,mgrigorov,borev,borev,27/May/15 09:23,27/May/15 09:47,13/Mar/19 23:18,27/May/15 09:34,7.0.0-M5,,,,,,,,7.0.0-M6,,,,wicket,,,0,,,,,,,,"Application.java  

Line 556:   fileName.contains(""/META-INF/wicket/"") return false on Windows systems.

Use something like  String.format(""%sMETA-INF%swicket%s"", File.pathSeparatorChar);

",windows 7   java 7,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-05-27 09:34:28.254,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Wed May 27 09:47:10 UTC 2015,,,,,,0|i2f8vz:,9223372036854775807,,,,,,,,"27/May/15 09:34;jira-bot;Commit f569ea57562feb1af98db493a24910918027c082 in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=f569ea5 ]

WICKET-5915 The application can not find /META-INF/wicket/**.properties on Windows systems
",27/May/15 09:34;mgrigorov;Thank you!,"27/May/15 09:47;jira-bot;Commit 548bcbe66fb0ffd7661c3ff78ba4b747aaa51c1b in wicket's branch refs/heads/master from [~mgrigorov]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=548bcbe ]

WICKET-5915 The application can not find /META-INF/wicket/**.properties on Windows systems

s/pathSeparatorChar/separatorChar/
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PagingNavigator invalid HTML (rel attribute on span tag),WICKET-5857,12782164,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,bitstorm,mikulka,mikulka,16/Mar/15 10:14,16/Mar/15 21:57,13/Mar/19 23:18,16/Mar/15 21:31,6.19.0,7.0.0-M5,,,,,,,6.20.0,7.0.0-M6,,,wicket,,,0,,,,,,,,"WICKET-5799 added rel=prev/next to PagingNavigator links. If the first page is active, then the ""prev"" link is disabled and it is a ""span"" tag instead of ""a"" tag, but it still has ""rel"" attribute. Same problem with ""next"" link if last page is active. ""rel"" tag is not permitted for ""span"" tag, so it's invalid HTML.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-16 21:31:42.522,,,no_permission,,,,,,,,,,,,9223372036854775807,,,Mon Mar 16 21:57:01 UTC 2015,,,,,,0|i26str:,9223372036854775807,,,,,,,,"16/Mar/15 21:31;jira-bot;Commit 0c4e96a828871e5e61a3c1cc1d2b5e8f8a1fe8ad in wicket's branch refs/heads/master from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=0c4e96a ]

WICKET-5857 PagingNavigator invalid HTML (rel attribute on span tag)","16/Mar/15 21:57;jira-bot;Commit ee3417134ecdab1c17bfd67f6b9b11da35587d34 in wicket's branch refs/heads/wicket-6.x from [~bitstorm]
[ https://git-wip-us.apache.org/repos/asf?p=wicket.git;h=ee34171 ]

WICKET-5857 PagingNavigator invalid HTML (rel attribute on span tag)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc for ReuseIfModelsEqualStrategy should mention that models must implement hashCode() method,WICKET-5547,12704221,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,svenmeier,chris.snyder,chris.snyder,28/Mar/14 11:07,28/Mar/14 15:10,13/Mar/19 23:18,28/Mar/14 15:10,,,,,,,,,6.15.0,7.0.0-M1,,,wicket,,,0,javadoc,,,,,,,"According to the Javadoc for ReuseIfModelsEqualStrategy:
""Reuse strategy that will reuse an old item if its model is equal to a model inside the newModels iterator...""
""Notice that the model and not the model object needs to implement the equals * method...""

However, in addition to overriding the equals() method, models must also override the hashCode() method in order to work properly. While it's always good practice to override hashCode() when overriding equals(), the Javadoc for ReuseIfModelsEqualStrategy could be updated to mention this requirement.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-28 15:10:08.434,,,no_permission,,,,,,,,,,,,382555,,,Fri Mar 28 15:10:08 UTC 2014,,,,,,0|i1twof:,382823,,,,,,,,28/Mar/14 15:10;svenmeier;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error message without parmeters filled.,WICKET-5536,12702338,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,mgrigorov,pp87,pp87,19/Mar/14 08:05,19/Mar/14 08:25,13/Mar/19 23:18,19/Mar/14 08:25,6.14.0,,,,,,,,6.15.0,7.0.0-M1,,,wicket,,,0,easyfix,,,,,,,"Method throws exception without parameters filled. 

Method :
public static <T extends Enum<T>> T toEnum(final CharSequence value, final Class<T> enumClass)

Class:
org.apache.wicket.util.string.Strings

Exception message:
String.format(""Cannot convert '{}' to enum constant of type '{}'."", value, enumClass)",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-19 08:25:22.064,,,no_permission,,,,,,,,,,,,380678,,,Wed Mar 19 08:25:22 UTC 2014,,,,,,0|i1tl7z:,380957,,,,,,,,"19/Mar/14 08:25;mgrigorov;This has been catched by FindBugs and fixed at Mar 5 2014 with commit 83ee2bd33ee91eb24f8f97002875dd73ebae6f2a.
Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong translation of RangeValidator.minimum and RangeValidator.maximum,WICKET-5496,12692561,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,svenmeier,froque,froque,31/Jan/14 18:46,01/Feb/14 12:33,13/Mar/19 23:18,01/Feb/14 12:33,6.13.0,7.0.0-M1,,,,,,,6.14.0,7.0.0-M1,,,wicket,,,0,easyfix,i18n,,,,,,the portuguese translation for RangeValidator.minimum and RangeValidator.maximum is wrong. ,,,,,,,,,,,,,,,,,,,,,,,,,31/Jan/14 18:47;froque;fix-WICKET-5496.patch;https://issues.apache.org/jira/secure/attachment/12626348/fix-WICKET-5496.patch,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-01 12:33:22.55,,,no_permission,,,,,,,,,,,,371156,,,Sat Feb 01 12:33:22 UTC 2014,,,,,,0|i1rytb:,371460,,,,,,,,01/Feb/14 12:33;svenmeier;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResourceReference's properties are not preserved when using reference replacement,WICKET-5429,12681273,Bug,Resolved,WICKET,Wicket,software,dashorst,"With proper mark-up/logic separation, a POJO data model, and a refreshing lack of XML, Wicket makes developing web-apps in Java simple and enjoyable again. Swap the boilerplate, complex debugging and brittle code for powerful, reusable components written with plain Java and HTML.",http://wicket.apache.org,Trivial,Fixed,mgrigorov,dutrieux,dutrieux,26/Nov/13 15:19,17/Dec/13 10:28,13/Mar/19 23:18,17/Dec/13 10:28,6.12.0,,,,,,,,6.13.0,7.0.0-M1,,,wicket,,,0,,,,,,,,"Media property of link (css) is not set if addResourceReplacement is set on WebApplication.init : 

I set a css file on page via renderHead(IHeaderResponse response) with screen media :

@Override
public void renderHead(IHeaderResponse response) {
  response.render(CssHeaderItem.forReference(OriginalResourceReference.get(), ""screen""));
}

and after if I defined a resourceReplacement on application init :

@Override
public void init() {
  super.init();
  addResourceReplacement(OriginalResourceReference.get(), new CssResourceReference(OriginalResourceReference.class, ""overwrite.css""));
}

I don't have the property media=""screen"" when wicket generated page.

Duto ",,,,,,,,,,,,,,,,,,,,,,,,,26/Nov/13 15:21;dutrieux;Sample.zip;https://issues.apache.org/jira/secure/attachment/12615845/Sample.zip,03/Dec/13 14:21;mgrigorov;WICKET-5429-RRBR.patch;https://issues.apache.org/jira/secure/attachment/12616783/WICKET-5429-RRBR.patch,02/Dec/13 14:42;cedricgatay;fix-WICKET-5429.patch;https://issues.apache.org/jira/secure/attachment/12616554/fix-WICKET-5429.patch,,3.0,,,,,,,,,,,,,,,,,,,2013-12-02 14:42:34.491,,,no_permission,,,,,,,,,,,,360538,,,Tue Dec 03 16:55:03 UTC 2013,,,,,,0|i1q5gf:,360837,,,,,,,,"02/Dec/13 14:42;cedricgatay;Patch for the described use case. I did not find a better way than double checking if we are manipulating CssReferenceHeaderItems to copy the media / pageParameters / condition to the replacement bundle.

The patch was made against wicket-6.x branch.","03/Dec/13 14:21;mgrigorov;Attaching an extended version of Cedric's patch.

There were few problems with his version:

1) it was fixing only the case with CSS resources, but not for JS ones

2) his code was used for normal resource bundles too. I.e. the bundle will be recreated with the details of each of its resources and it will use the ones from the last resource reference.
I've added a special ReplacementResourceBundleReference to be able to decide when to preserve the details and when not.",03/Dec/13 14:21;mgrigorov;[~papegaaij] Do you have a better solution for this problem ?,"03/Dec/13 14:32;papegaaij;addResourceReplacement is a shortcut for registering a bundle with only 1 item. The 3 lines of code can also be executed manually, with a minor change to the last line (creating the item for the css reference). I don't think we need to extend the api for a usecase that's rarely used and can be solved with 3 lines of code already.","03/Dec/13 14:40;mgrigorov;The problem is:

1) it is not automatic. 
the developer will have to do this manually by copy/paste-ing code from Wicket

2) the developer will duplicate the details once where the original header item is created and second time where the replacement header item is declared. It will be very easy to forget to update any of them

I'm also not happy with the new ReplacementResourceBundleReference but I see no other way how to differentiate whether the current case is a replacement or a ""normal"" bundle.
Another way is to add #isReplacement to ResourceBundleReference - not better :-/",03/Dec/13 14:51;cedricgatay;That's the reason why I made the change only for the use case described in this Jira issue. It however lacks the ability to tell if the resource really needs to be recreated as Martin stated in his first answer.,"03/Dec/13 15:14;papegaaij;Ok, I see the problem now. I think this should be solved with a dedicated HeaderItemWrapper. Bundles are rewrapped prior being rendered. This should allow copying the properties without explicit class checks. I'll see if I can create a patch on my way home (in an hour).","03/Dec/13 16:55;papegaaij;I've looked at it some more, and bundles are rewrapped, but that's not going to help, because the wrap method is invoked on the original item, not on the bundle. We could do another interface check, but I don't think the result will be any better than your patch. So, you can apply your patch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
