{
    "data" : [
        "\nR version 3.6.1 (2019-07-05) -- \"Action of the Toes\"\nCopyright (C) 2019 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n[Workspace loaded from ~/Documents/NABATS/scripts/Analysis/.RData]\n\n",
        "> ",
        "#install.packages(c(\"dplyr\",\"scales\",\"relaimpo\",\"rms\",\"e1071\",\"Hmisc\"))",
        "> ",
        "#install.packages(\"rms\")",
        "> ",
        "#install.packages(\"mvtnorm\")",
        "> ",
        "library(dplyr)",
        "\nAttaching package: ‘dplyr’\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    filter, lag\n\n",
        "The following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n",
        "> ",
        "library(scales)",
        "> ",
        "require(relaimpo)",
        "Loading required package: relaimpo\n",
        "Loading required package: MASS\n",
        "\nAttaching package: ‘MASS’\n\n",
        "The following object is masked from ‘package:dplyr’:\n\n    select\n\n",
        "Loading required package: boot\n",
        "Loading required package: survey\n",
        "Loading required package: grid\n",
        "Loading required package: Matrix\n",
        "Loading required package: survival\n",
        "\nAttaching package: ‘survival’\n\n",
        "The following object is masked from ‘package:boot’:\n\n    aml\n\n",
        "\nAttaching package: ‘survey’\n\n",
        "The following object is masked from ‘package:graphics’:\n\n    dotchart\n\n",
        "Loading required package: mitools\n",
        "This is the global version of package relaimpo.\n\n",
        "If you are a non-US user, a version with the interesting additional metric pmvd is available\n\n",
        "from Ulrike Groempings web site at prof.beuth-hochschule.de/groemping.\n\n",
        "> ",
        "library(rms)",
        "Loading required package: Hmisc\n",
        "Loading required package: lattice\n",
        "\nAttaching package: ‘lattice’\n\n",
        "The following object is masked from ‘package:boot’:\n\n    melanoma\n\n",
        "Loading required package: Formula\n",
        "Loading required package: ggplot2\n",
        "\nAttaching package: ‘Hmisc’\n\n",
        "The following object is masked from ‘package:survey’:\n\n    deff\n\n",
        "The following objects are masked from ‘package:dplyr’:\n\n    src, summarize\n\n",
        "The following objects are masked from ‘package:base’:\n\n    format.pval, units\n\n",
        "Loading required package: SparseM\n",
        "\nAttaching package: ‘SparseM’\n\n",
        "The following object is masked from ‘package:base’:\n\n    backsolve\n\n",
        "\nAttaching package: ‘rms’\n\n",
        "The following object is masked from ‘package:survey’:\n\n    calibrate\n\n",
        "> ",
        "library(e1071)",
        "\nAttaching package: ‘e1071’\n\n",
        "The following object is masked from ‘package:Hmisc’:\n\n    impute\n\n",
        "> ",
        "library(Hmisc)",
        "> ",
        "",
        "> ",
        "#Read in CSV",
        "> ",
        "df <- read.csv(\"/home/kjbaron/Documents/NABATS/HAROLD/project-misclassified-files/experiments-fn-files/dataset-all-projects.csv\", header = TRUE)",
        "> ",
        "#df <- filter(df, num_post > 0)",
        "> ",
        "#df <- na.omit(df) #remove rows with na values",
        "> ",
        "",
        "> ",
        "#df <- filter(df, num_post > 0)",
        "> ",
        "",
        "> ",
        "################################################################################",
        "> ",
        "# (MC-1) Estimate budget for degrees of freedom",
        "> ",
        "################################################################################",
        "> ",
        "#Since we plan to fit using ordinary least squares, we use the below rule of",
        "> ",
        "# thumb to estimate our budget",
        "> ",
        "print( floor(min(nrow(df[df$exp > 0,]), nrow(df[df$exp == 0,]) )/15))",
        "[1] 0\n",
        "> ",
        "print(floor(min(nrow(df[df$bfs > 0,]), nrow(df[df$bfs == 0,]) )/15))",
        "[1] 0\n",
        "> ",
        "print(floor(min(nrow(df[df$num_bugs > 0,]), nrow(df[df$num_bugs == 0,]) )/15))",
        "[1] 0\n",
        "> ",
        "",
        "> ",
        "################################################################################",
        "> ",
        "# (MC -2) Normality adjustment",
        "> ",
        "################################################################################",
        "> ",
        "# Normalize indep. & dep. variables with min-max",
        "> ",
        "df[c(\"lines\",\"cyclomatic\",\"churn\",\"mean_experience\",\"changed_lines\",\"num_issues\")] <- lapply(df[c(\"lines\",\"cyclomatic\",\"churn\",\"mean_experience\",\"changed_lines\",\"num_issues\")], function(x) c(scale(x, center= min(x), scale=diff(range(x))))) ",
        "> ",
        "",
        "> ",
        "#Set independent variable names",
        "> ",
        "ind_vars = c(\"lines\",\"cyclomatic\",\"churn\")",
        "> ",
        "",
        "> ",
        "################################################################################",
        "> ",
        "# (MC -3) Correlation analysis",
        "> ",
        "################################################################################",
        "> ",
        "#Calculate spearman's correlation between independent variables",
        "> ",
        "vc <- varclus(~ ., data=df[,ind_vars], trans=\"abs\")",
        "> ",
        "",
        "> ",
        "#Plot hierarchical clusters and the spearman's correlation threshold of 0.7",
        "> ",
        "plot(vc)",
        "> ",
        "threshold <- 0.7",
        "> ",
        "abline(h=1-threshold, col = \"red\", lty = 2)",
        "> ",
        "",
        "> ",
        "################################################################################",
        "> ",
        "# (MC -4) Redundancy analysis",
        "> ",
        "################################################################################",
        "> ",
        "red <- redun(~ ., data=df[,ind_vars], nk=0)",
        "> ",
        "print(red)",
        "\nRedundancy Analysis\n\nredun(formula = ~., data = df[, ind_vars], nk = 0)\n\nn: 52146 \tp: 3 \tnk: 0 \n\nNumber of NAs:\t 0 \n\nTransformation of target variables forced to be linear\n\nR-squared cutoff: 0.9 \tType: ordinary \n\nR^2 with which each variable can be predicted from all other variables:\n\n     lines cyclomatic      churn \n     0.981      0.981      0.129 \n\nRendundant variables:\n\nlines\n\nPredicted from variables:\n\ncyclomatic churn \n\n  Variable Deleted   R^2 R^2 after later deletions\n1            lines 0.981                          ",
        "\n",
        "> ",
        "",
        "> ",
        "sp <- spearman2(formula(paste(\"num_issues\" ,\" ~ \",paste0(ind_vars, collapse=\" + \"))), data= df, p=2)",
        "> ",
        "plot(sp)",
        "> ",
        "print(sp)",
        "\nSpearman rho^2    Response variable:num_issues\n\n            rho2       F df1   df2 P Adjusted rho2     n\nlines      0.090 2565.84   2 52143 0         0.090 52146\ncyclomatic 0.086 2462.22   2 52143 0         0.086 52146\nchurn      0.083 2350.20   2 52143 0         0.083 52146\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "################################################################################",
        "> ",
        "# (MC -5) Fit regression model",
        "> ",
        "################################################################################",
        "> ",
        "#Create a matrix to fill with R^2 values",
        "> ",
        "r2_results <- matrix(ncol=4, nrow=12)",
        "> ",
        "r2_results[1,] <- c(\"Project\", \"Y #Bugs\", \"Y ChgLines\", \"Y Exp\")",
        "> ",
        "i <- 2",
        "> ",
        "",
        "> ",
        "num_iter = 1000",
        "> ",
        "#RMS package requires a data distribution when building a model",
        "> ",
        "for (current_project in c(\"accumulo\",\"bookkeeper\",\"camel\",\"cassandra\",\"cxf\",\"derby\",\"felix\",\"hive\",\"openjpa\",\"pig\",\"wicket\"))",
        "+ ",
        "{",
        "+ ",
        "  print(current_project)",
        "+ ",
        "  ",
        "+ ",
        "  #Extract project",
        "+ ",
        "  p_df <- filter(df, project == current_project)",
        "+ ",
        "  p_df[c(\"lines\",\"cyclomatic\",\"churn\",\"mean_experience\",\"changed_lines\",\"num_issues\")] <- lapply(p_df[c(\"lines\",\"cyclomatic\",\"churn\",\"mean_experience\",\"changed_lines\",\"num_issues\")], function(x) c(scale(x, center= min(x), scale=diff(range(x))))) ",
        "+ ",
        "  ",
        "+ ",
        "  #RMS package requires a data distribution when building a model",
        "+ ",
        "  print(dim(p_df[,c(\"mean_experience\",ind_vars)]))",
        "+ ",
        "  dd_exp <- datadist(p_df[,c(\"mean_experience\",ind_vars)])",
        "+ ",
        "  options(datadist = \"dd_exp\")",
        "+ ",
        "  ",
        "+ ",
        "  dd_bfs <- datadist(p_df[,c(\"changed_lines\",ind_vars)])",
        "+ ",
        "  options(datadist = \"dd_bfs\")",
        "+ ",
        "  ",
        "+ ",
        "  dd_bugs <- datadist(p_df[,c(\"num_issues\",ind_vars)])",
        "+ ",
        "  options(datadist = \"dd_bugs\")",
        "+ ",
        "  ",
        "+ ",
        "  #Build generalized linear models for each dependent variable",
        "+ ",
        "  fit_exp <- lm(exp ~ lines+cyclomatic+churn, data=p_df, x=T, y=T)",
        "+ ",
        "  #print(summary(fit_exp))",
        "+ ",
        "  fit_bfs <- lm(bfs ~ lines+cyclomatic+churn, data=p_df, x=T, y=T)",
        "+ ",
        "  #print(summary(fit_bfs))",
        "+ ",
        "  fit_bugs <- lm(num_bugs ~ lines+cyclomatic+churn, data=p_df, x=T, y=T)",
        "+ ",
        "  #print(summary(fit_bugs))",
        "+ ",
        "  ",
        "+ ",
        "  #Calculate R^2",
        "+ ",
        "  #lmg is the R^2 contribution averaged over orderings among regressors\\",
        "+ ",
        "  # Metrics normalized to sum to 100% --> (rela=TRUE), otherwise --> (rela=FALSE)",
        "+ ",
        "  r2_exp <- calc.relimp(fit_exp, type=\"lmg\", rela=FALSE)@R2",
        "+ ",
        "  r2_bfs <- calc.relimp(fit_bfs, type=\"lmg\", rela=FALSE)@R2",
        "+ ",
        "  r2_bugs <- calc.relimp(fit_bugs, type=\"lmg\", rela=FALSE)@R2",
        "+ ",
        "  ",
        "+ ",
        "  #Add results to maxtrix",
        "+ ",
        "  r2_results[i,] <- c(current_project, r2_bugs, r2_bfs, r2_exp)",
        "+ ",
        "  i <- i+1",
        "+ ",
        "}",
        "[1] \"accumulo\"\n[1] 2760    4\n",
        "Error in model.frame.default(formula = exp ~ lines + cyclomatic + churn,  : \n  object is not a matrix\n",
        "> ",
        "install.packages(c(\"dplyr\",\"scales\",\"relaimpo\",\"rms\",\"e1071\",\"Hmisc\"))",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "install.packages(\"rms\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "install.packages(\"mvtnorm\")",
        "Error in install.packages : Updating loaded packages\n\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2
    ]
}